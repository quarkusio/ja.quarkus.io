msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. type: Title =
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Configuring Well-Known OpenID Connect Providers"
msgstr "よく知られたOpenID Connect プロバイダーの設定"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "This document explains how to configure well-known social OIDC and OAuth2 providers."
msgstr "このドキュメントでは、よく知られているソーシャル OIDC および OAuth2 プロバイダの設定方法について説明します。"

#. type: Title ==
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Introduction"
msgstr "はじめに"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "If you use xref:security-oidc-code-flow-authentication.adoc[OpenID Connect Authorization Code Flow] to protect Quarkus endpoints, then you need to configure Quarkus to tell it how to connect to OpenID Connect providers, how to authenticate to such providers, which scopes to use, and so on."
msgstr "xref:security-oidc-code-flow-authentication.adoc[OpenID Connect認可コードフロー] を使用してQuarkusのエンドポイントを保護する場合は、OpenID Connectプロバイダーへの接続方法、そのようなプロバイダーへの認証方法、使用するスコープなどをQuarkusに伝えるように設定する必要があります。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Sometimes you need to use the configuration to work around the fact that some providers do not implement OpenID Connect completely or when they are in fact xref:security-oidc-code-flow-authentication.adoc#oauth2[OAuth2 providers only]."
msgstr "プロバイダによってはOpenID Connectを完全に実装していなかったり、実際には xref:security-oidc-code-flow-authentication.adoc#oauth2[OAuth2プロバイダのみ] であったりするため、設定を使用して回避する必要がある場合があります。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "The configuration of such providers can become complex, very technical and difficult to understand."
msgstr "このようなプロバイダーの設定は、複雑で非常に技術的になり、理解が困難になる可能性があります。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider` configuration property has been introduced to refer to well-known OpenID Connect and OAuth2 providers. This property can be used to refer to a provider such as `github` with only a minimum number of customizations required, typically, an account specific `client id`, `client secret` and some properties have to be set to complete the configuration."
msgstr "よく知られた OpenID Connect および OAuth2 プロバイダーを参照するために、 `quarkus.oidc.provider` 設定プロパティーが導入されました。このプロパティーを使用して、最小限のカスタマイズのみが必要な `github` などのプロバイダーを参照することができます。通常、アカウント固有の `client id`、 `client secret` およびいくつかのプロパティーを設定して設定を完了する必要があります。"

#: _guides/security-openid-connect-providers.adoc
#, fuzzy
msgid "This property can be used in `application.properties` and in custom xref:security-openid-connect-multitenancy.adoc#tenant-config-resolver[TenantConfigResolvers] if the tenant configurations are created dynamically."
msgstr "このプロパティは、テナント構成が動的に作成される場合、 `application.properties` およびカスタム xref:security-openid-connect-multitenancy.adoc#tenant-config-resolver[TenantConfigResolver] で使用できます。"

#. type: Title ==
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Well Known Providers"
msgstr "よく知られたプロバイダー"

#. type: Title ===
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Apple"
msgstr "Apple"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"In order to set up OIDC for Apple you need to create a developer account, and sign up for the 99$/year program, but you cannot test your application on `localhost` like most other OIDC providers:\n"
"you will need to run it over HTTPS and make it publicly accessible, so for development purposes\n"
"you may want to use a service such as https://ngrok.com."
msgstr ""
"Apple 用の OIDC を設定するには、開発者アカウントを作成し、$99/年のプログラムにサインアップする必要がありますが、\n"
"他のほとんどの OIDC プロバイダーのように `localhost` でアプリケーションをテストできません。\n"
"HTTPS で実行して公開する必要があるため、開発目的では https://ngrok.com などのサービスを使用することをお勧めします。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Go to https://developer.apple.com/account/resources/identifiers/list[Create a new identifier] and press `+`"
msgstr "https://developer.apple.com/account/resources/identifiers/list[Create a new identifier] にアクセスして `+` を押します"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Don't touch anything, keep `App IDs` selected, and press `Continue`:"
msgstr "何も触れないで、 `App IDs` を選択したまま `Continue` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Don't touch anything, keep `App` selected, and press `Continue`:"
msgstr "何も触れないで、 `App` を選択したまま `Continue` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Enter a description and a Bundle ID (use your application package name):"
msgstr "説明とバンドル ID を入力します (アプリケーションパッケージ名を使用します)。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Then scroll down to find the `Sign in with Apple` Capability, select it, and press `Continue`:"
msgstr "次に、下にスクロールして `Sign in with Apple` 機能を見つけ、それを選択して、 `Continue` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Write down your App ID Prefix, then press `Register`:"
msgstr "アプリ ID 接頭辞を書き留めてから、 `Register` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Back on the `Identifiers` page, press `+`:"
msgstr "`Identifiers` ページに戻り、 `+` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Select `Service IDs` and press `Continue`:"
msgstr "`Service IDs` を選択し、 `Continue` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Enter a description and Bundle ID (use your application package name), then press `Continue`:"
msgstr "説明とバンドル ID を入力 (アプリケーションパッケージ名を使用) し、 `Continue` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Now press `Register`:"
msgstr "次に、 `Register` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Back on the service list, click on your newly created service:"
msgstr "サービスリストに戻り、新しく作成したサービスをクリックします。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Enable `Sign in with Apple` and press `Configure`:"
msgstr "`Sign in with Apple` を有効にして、 `Configure` を押します。"

#: _guides/security-openid-connect-providers.adoc
msgid "Add your domain and return URL (set to `<host>/apple`) and press `Next`:"
msgstr "ドメインを追加して URL に戻り (`<host>/apple` に設定)、 `Next` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Now press `Done`:"
msgstr "次に `Done` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Now press `Continue`:"
msgstr "続いて `Continue` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "And now press `Save`:"
msgstr "そして、 `Save` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Go to the https://developer.apple.com/account/resources/authkeys/list[Keys] page on the left menu, and press `+`:"
msgstr "左側のメニューの https://developer.apple.com/account/resources/authkeys/list[Keys] ページに移動し、 `+` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Fill in a key name, enable `Sign in with Apple`, and press `Configure`:"
msgstr "キー名を入力し、 `Sign in with Apple` を有効にして、 `Configure` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Select your Primary App ID and press `Save`:"
msgstr "Primary App ID を選択し、 `Save` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Back on the key page, press `Continue`:"
msgstr "キーページに戻り、 `Continue` を押します。"

#. type: delimited block =
#: _guides/security-openid-connect-providers.adoc
msgid "Write down your `Key ID`, download your key and save it to your Quarkus application in `src/main/resources/AuthKey_<KEYID>.p8`:"
msgstr "`Key ID` を書き留めてキーをダウンロードし、 `src/main/resources/AuthKey_<KEYID>.p8` の Quarkus アプリケーションに保存します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "You can now configure your `application.properties`:"
msgstr "これで、 `application.properties` を設定できます。"

#: _guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=apple` will request Apple to add `openid`, `email` and `name` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr "`quarkus.oidc.provider=Apple` は、発行されたアクセストークンに `openid`、 `email`、 `name` スコープを追加するように Apple に要求します。これらのスコープをオーバーライドしたり、さらにスコープを要求する方法は、<<provider-scope>> セクションを参照してください。"

#: _guides/security-openid-connect-providers.adoc
msgid "Discord"
msgstr "Discord"

#: _guides/security-openid-connect-providers.adoc
msgid "Create a https://discord.com/developers/applications[Discord application]:"
msgstr "https://discord.com/developers/applications[Discord アプリケーション] を作成します。"

#: _guides/security-openid-connect-providers.adoc
msgid "You now can get your client id and secret:"
msgstr "これでクライアント ID とシークレットを取得できます。"

#. type: Title ===
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Facebook"
msgstr "Facebook"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"Facebook will not let you test your application on `localhost` like most other OIDC providers:\n"
"you will need to run it over HTTPS and make it publicly accessible, so for development purposes\n"
"you may want to use a service such as https://ngrok.com."
msgstr ""

#: _guides/security-openid-connect-providers.adoc
msgid "In order to set up OIDC for Facebook start by https://developers.facebook.com/apps/create/[Creating an application], select `Other` as an app type, and click `Next`."
msgstr "Facebook 用の OIDC を設定するには、 https://developers.facebook.com/apps/create/[Creating an application] から開始し、アプリのタイプとして `Other` を選択して `Next` をクリックします。"

#: _guides/security-openid-connect-providers.adoc
msgid "Now choose your application type. For this guide choose `Consumer` and click `Next` until you reach the screen below. Now enter an application name, and contact email, and press `Create app`:"
msgstr "次に、アプリケーションの種類を選択します。このガイドでは、 `Consumer` を選択し、下の画面が表示されるまで `Next` をクリックします。次に、アプリケーション名と連絡先のメールアドレスを入力し、 `Create app` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "On the app page, click `Set up` on the `Facebook login` product:"
msgstr "アプリページで、 `Facebook login` 製品の `Set up` をクリックします。"

#: _guides/security-openid-connect-providers.adoc
msgid "On the `Quickstart` page click on `Facebook login > Settings` on the left menu:"
msgstr "クイックスタートページで、左側のメニューの `Facebook login > Settings` をクリックします。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"First click on `Get Advanced Access` to switch `public_profile` to advanced access.\n"
"Then enter your `Redirect URIs` (set to `<host>/facebook`) and press `Save changes`:"
msgstr ""
"まず、 `Get Advanced Access` をクリックして、 `public_profile` を詳細アクセスに切り替えます。\n"
"次に、 `Redirect URIs` を入力します (<host>/facebook`) をクリックし、 `Save changes` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Now go to `Settings > Basic` on the left-hand menu, and write down your `App ID` and `App secret`:"
msgstr "次に、左側のメニューの `Settings > Basic` に移動し、 `App ID` と `App secret` を書き留めます。"

#: _guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=facebook` will request Facebook to add `email` and `public_profile` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr "`quarkus.oidc.provider=facebook` は、発行されたアクセストークンに `email` および `public_profile` スコープを追加するよう Facebook に要求します。これらのスコープを上書きしたり、さらにスコープを要求したりする方法の詳細は、<<provider-scope>> セクションを参照してください。"

#. type: Title ===
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "GitHub"
msgstr "GitHub"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "In order to set up OIDC for GitHub you need to create a new OAuth application in your https://github.com/settings/applications/new[GitHub developer settings]:"
msgstr "GitHub の OIDC を設定するには、 https://github.com/settings/applications/new[GitHub developer settings] で新しい OAuth アプリケーションを作成する必要があります。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"Make sure to fill in the appropriate details, but more importantly the Authorization Callback URL, set to `http://localhost:8080/github`\n"
"(if you intend to test this using the Quarkus dev mode)."
msgstr ""
"詳細を適切に入力する必要がありますが、さらに Authorization Callback URL を `http://localhost:8080/github` に設定することが重要です\n"
" (Quarkus dev モードを使用してテストする場合)。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Now click on `Register application` and you'll be shown your application page:"
msgstr "次に、 `Register application` をクリックすると、アプリケーションページが表示されます。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"You need to click on `Generate a new client secret`, confirm your credentials, and write down\n"
"your Client ID and Client secret (especially that one, because you will not be able to see it again\n"
"later from that page, but you can always recreate one, do don't worry too much):"
msgstr ""
"`Generate a new client secret` をクリックし、クレデンシャルを確認して、Client ID と Client Secret を書き留める必要があります\n"
" (特に Client Secret は、後でこのページで再度見ることができないため、書き留めてください。\n"
"ただし、いつでも再作成できますので、心配しすぎる必要はありません)。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Now add the following configuration to your `application.properties`:"
msgstr "次に、以下の設定を `application.properties` に追加します。"

#: _guides/security-openid-connect-providers.adoc
#, fuzzy
msgid ""
"By default, Quarkus GitHub provider submits the client id and secret in the HTTP Authorization header.\n"
"However, GitHub may require that both client id and secret are submitted as form parameters instead.\n"
"When you get HTTP 401 error after logging in to GitHub and being redirected back to Quarkus MCP server,\n"
"replace the `quarkus.oidc.credentials.secret=<Secret>` property\n"
"with the following two properties instead:"
msgstr "デフォルトでは、Quarkus GitHubプロバイダはHTTP AuthorizationヘッダーにクライアントIDとsecretを送信します。しかし、GitHubは、クライアントIDとシークレットの両方をフォームパラメータとして送信することを要求する場合があります。GitHubにログインした後にHTTP 401エラーが発生し、Quarkus MCPサーバーにリダイレクトされる場合は、 `quarkus.oidc.credentials.secret=<Secret>` プロパティを次の2つのプロパティに置き換えてください："

#: _guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=github` will request GitHub to add a `user:email` scope to issued access tokens. For information about overriding this scope or requesting more scopes, see the  <<provider-scope>> section."
msgstr "`quarkus.oidc.provider=github` は、発行されたアクセストークンに `user:email` スコープを追加するよう GitHub に要求します。このスコープをオーバーライドしたり、さらにスコープを要求したりする方法の詳細は、<<provider-scope>> セクションを参照してください。"

#: _guides/security-openid-connect-providers.adoc
msgid "You can also send access tokens issued by GitHub to `quarkus.oidc.application-type=service` or `quarkus.oidc.application-type=hybrid` Quarkus applications."
msgstr "また、GitHub が発行したアクセストークンを、 `quarkus.oidc.application-type=service` または `quarkus.oidc.application-type=hybrid` Quarkus アプリケーションに送信することもできます。"

#. type: Title ===
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Google"
msgstr "Google"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "In order to set up OIDC for Google you need to create a new project in your https://console.cloud.google.com/projectcreate[Google Cloud Platform console]:"
msgstr "OIDC for Google を設定するには、 https://console.cloud.google.com/projectcreate[Google Cloud Platform console] で新しいプロジェクトを作成する必要があります。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Pick a project name and click on `CREATE`."
msgstr "プロジェクト名を選択し、 `CREATE` をクリックします。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Now make sure you select your project in the top selector, and click on the left-hand bar menu on `APIs and Services > OAuth consent screen`:"
msgstr "次に、トップセレクターでプロジェクトを選択し、左側のメニューバーから `APIs and Services > OAuth consent screen` をクリックします。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Select `External` to authorise any Google user to log in to your application and press `CREATE`:"
msgstr "`External` を選択して、Google ユーザーがアプリケーションにログインすることを許可し、 `CREATE` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Now you can fill in your application name, your support email, your developer contact information and press `SAVE AND CONTINUE`:"
msgstr "これで、アプリケーション名、サポートメール、開発者の連絡先情報を入力して、 `SAVE AND CONTINUE` を押すことができます。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Do not add any scopes on the next page, and press `SAVE AND CONTINUE`:"
msgstr "次のページにスコープを追加せずに、 `SAVE AND CONTINUE` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Do not add any test user on the next page, and press `SAVE AND CONTINUE`:"
msgstr "次のページにテストユーザーを追加せずに、 `SAVE AND CONTINUE` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Click on the top menu `CREATE CREDENTIALS` > `OAuth client ID`:"
msgstr "トップメニューの `CREATE CREDENTIALS` > `OAuth client ID` をクリックします。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"Select `Web application` as `Application type`, and add `http://localhost:8080/google` in\n"
"the `Authorised redirect URIs` list, then press `CREATE`:"
msgstr ""
"`Application type` として `Web application` を選択し、 `Authorised redirect URIs` リストに http://localhost:8080/google\n"
"を追加して、 `CREATE` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Copy your Client ID and Client Secret:"
msgstr "Client ID と Client Secret をコピーします。"

#: _guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=google` will request Google to add `openid`, `email` and `profile` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr "`quarkus.oidc.provider=google` は、発行されたアクセストークンに `openid`、 `email`、 `profile` スコープを追加するよう Google に要求します。これらのスコープをオーバーライドしたり、さらにスコープを要求したりする方法の詳細は、<<provider-scope>> セクションを参照してください。"

#: _guides/security-openid-connect-providers.adoc
msgid "You can also send access tokens issued by Google to `quarkus.oidc.application-type=service` or `quarkus.oidc.application-type=hybrid` Quarkus applications."
msgstr "また、Google が発行したアクセストークンを、 `quarkus.oidc.application-type=service` または `quarkus.oidc.application-type=hybrid` Quarkus アプリケーションに送信することもできます。"

#: _guides/security-openid-connect-providers.adoc
msgid "LinkedIn"
msgstr "LinkedIn"

#: _guides/security-openid-connect-providers.adoc
msgid "Create a https://developer.linkedin.com/[LinkedIn application]:"
msgstr "https://developer.linkedin.com/[LinkedIn アプリケーション] を作成します。"

#: _guides/security-openid-connect-providers.adoc
msgid "Add the `Sign In with LinkedIn using OpenId Connect` product:"
msgstr "OpenId Connect を使用して LinkedIn でサインイン製品を追加します。"

#: _guides/security-openid-connect-providers.adoc
msgid "You now can get your client id and secret. Don't forget to also add the authorized redirect URLs for your application:"
msgstr "これでクライアント ID とシークレットを取得できます。アプリケーションの承認済みリダイレクト URL も追加することを忘れないでください。"

#: _guides/security-openid-connect-providers.adoc
msgid "Mastodon"
msgstr "Mastodon"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"Create a https://joinmastodon.org/[Mastodon account]. You must https://joinmastodon.org/servers[pick a server], for example, `mastodon.social`.\n"
"Select a `Development` option in your account and register an application, for example:"
msgstr ""
"link:https://joinmastodon.org/[マストドンアカウント] を作成します。 link:https://joinmastodon.org/servers[サーバーを選択] する必要があります。例えば、 `mastodon.social` 。\n"
"アカウントで `Development` オプションを選択し、アプリケーションを登録します。例："

#: _guides/security-openid-connect-providers.adoc
msgid "Select the registered application:"
msgstr "登録されているアプリケーションを選択します："

#: _guides/security-openid-connect-providers.adoc
msgid "and note its client id and client secret properties, use them to configure your `application.properties`:"
msgstr "クライアントIDとクライアント・シークレットのプロパティをメモしておき、 `application.properties` の設定に使用する："

#: _guides/security-openid-connect-providers.adoc
msgid "By default, `quarkus.oidc.provider=mastodon` sets `quarkus.oidc.auth-server-url` to the `https://mastodon.social` Mastodon server address."
msgstr "デフォルトでは、 `quarkus.oidc.provider=mastodon` は `quarkus.oidc.auth-server-url` を `https://mastodon.social` に設定されます。"

#: _guides/security-openid-connect-providers.adoc
msgid "You can override `quarkus.oidc.auth-server-url` if you have created your account in another Mastodon server, for example:"
msgstr "他のマストドンサーバーでアカウントを作成した場合など、 `quarkus.oidc.auth-server-url` を上書きすることができます："

#. type: Title ===
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Microsoft"
msgstr "Microsoft"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"In order to set up OIDC for Microsoft you need to go to your https://portal.azure.com[Microsoft Azure Portal],\n"
"and search for `Microsoft Entra ID` formerly known as `Azure Active Directory` , then click on it:"
msgstr ""
"Microsoft の OIDC を設定するには、 https://portal.azure.com[Microsoft Azure ポータル] にアクセスする必要があります。\n"
"`Microsoft Entra ID` (旧称 `Azure Active Directory`) を検索し、クリックします。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Once there, on the left side under `Manage`, click on `App registrations` then click on `New registration`:"
msgstr "そこで、左側の `Manage` の下にある `App registrations` をクリックしてから、 `New registration` をクリックします。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"Fill in your application name, select `Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)` to allow anyone to log in, and add a `Web` Redirect URI as `http://localhost:8080/microsoft`,\n"
"then click on `Register`:"
msgstr ""
"アプリケーション名を入力し、 `Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)` を選択して誰でもログインできるようにし、 `Web` Redirect URI を `http://localhost:8080/microsoft` \n"
"として追加してから `Register` をクリックします。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "On that resulting page, copy the `Client Id` (under `Application (client) ID`, then click on `Add a certificate or secret`:"
msgstr "その結果のページで、 `Client Id` (`Application (client) ID` の下) をコピーしてから、 `Add a certificate or secret` をクリックします。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Now, under `Client secrets (0)`, click on `New client secret`:"
msgstr "次に、 `Client secrets (0)` の下にある `New client secret` をクリックします。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Click on `Add` in that dialog without changing anything:"
msgstr "何も変更せずに、そのダイアログで `Add` をクリックします。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "On the resulting page, copy your `Secret Value`:"
msgstr "結果のページで、 `Secret ID` をコピーします。"

#: _guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=microsoft` will request Microsoft to add `openid`, `email` and `profile` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr "`quarkus.oidc.provider=microsoft` は、発行されたアクセストークンに `openid`、 `email`、 `profile` スコープを追加するよう Microsoft に要求します。これらのスコープをオーバーライドしたり、さらにスコープを要求したりする方法の詳細は、<<provider-scope>> セクションを参照してください。"

#: _guides/security-openid-connect-providers.adoc
msgid "You can also send access tokens issued by Microsoft to `quarkus.oidc.application-type=service` or `quarkus.oidc.application-type=hybrid` Quarkus applications but you may need to set `quarkus.oidc.verify-access-token-with-user-info` configuration property to `true` if access tokens issued by Microsoft are not in JWT format."
msgstr "Microsoft が発行したアクセストークンを `quarkus.oidc.application-type=service` または `quarkus.oidc.application-type=hybrid` Quarkus アプリケーションに送信することもできますが、Microsoft が発行したアクセストークンが JWT 形式でない場合は、 `quarkus.oidc.verify-access-token-with-user-info` 設定プロパティーを `true` に設定する必要がある場合があります。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"Some Microsoft services may issue tokens whose signatures can only be verified if the current token's `nonce` header is reset with its SHA-256 digest value.\n"
"If your application has to deal with such tokens then please enable an Azure token customizer:"
msgstr ""
"一部の Microsoft サービスでは、現在のトークンの `nonce` ヘッダーが SHA-256 ダイジェスト値でリセットされた場合にのみ署名を検証できるトークンが発行される場合があります。\n"
"アプリケーションでこのようなトークンを処理する必要がある場合は、Azure トークンカスタマイザーを有効にしてください。"

#: _guides/security-openid-connect-providers.adoc
msgid "Slack"
msgstr "Slack"

#: _guides/security-openid-connect-providers.adoc
msgid "Create a https://api.slack.com/authentication/sign-in-with-slack#setup[Slack application]:"
msgstr "https://api.slack.com/authentication/sign-in-with-slack#setup[Slack アプリケーション] を作成します。"

#: _guides/security-openid-connect-providers.adoc
msgid "Select application name, workspace, and remember it, you will need it later:"
msgstr "アプリケーション名とワークスペースを選択し、後で必要になるので覚えておいてください。"

#: _guides/security-openid-connect-providers.adoc
msgid "Please save client id and secret displayed on the next page, you will need them later:"
msgstr "次のページに表示されるクライアント ID とシークレットを保存してください。後で必要になります。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"Configure redirect URLs.\n"
"Slack provider requires HTTPS protocol, for development purposes, you can use ngrok:"
msgstr ""
"リダイレクト URL を設定します。\n"
"Slack プロバイダーには HTTPS プロトコルが必要です。開発目的では ngrok を使用できます。"

#: _guides/security-openid-connect-providers.adoc
msgid "Use the `team` parameter to refer to the workspace you chose during the Slack OIDC application registration."
msgstr "Slack OIDC アプリケーションの登録時に選択したワークスペースを参照するには、 `team` パラメーターを使用します。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"Open your browser and navigate to your application `https://<your ngrok instance>.ngrok-free.app/`.\n"
"Quarkus will redirect you to Slack provider on the first request where you can grant required permissions:"
msgstr ""
"ブラウザーを開き、 `https://<your ngrok instance>.ngrok-free.app/` アプリケーションに移動します。\n"
"Quarkus は最初のリクエストで Slack プロバイダーにリダイレクトし、必要な権限を付与できます。"

#. type: Title ===
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Spotify"
msgstr "Spotify"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Create a https://developer.spotify.com/documentation/general/guides/authorization/app-settings/[Spotify application]:"
msgstr "https://developer.spotify.com/documentation/general/guides/authorization/app-settings/[Spotify application] を作成します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Don't forget to add `http://localhost:8080` as a redirect URI for testing during development purposes. You should get a client id and secret generated once a Spotify application setup has been complete, for example:"
msgstr "開発目的のテスト用に、リダイレクト URI として `http://localhost:8080` を追加することを忘れないでください。Spotify アプリケーションのセットアップが完了すると、クライアント ID とシークレットが生成されます。以下に例を示します。"

#: _guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=spotify` will request Spotify to add `user-read-private` and `user-read-email` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr "`quarkus.oidc.provider=spotify` は、Spotify に発行されたアクセストークンに `user-read-private` および `user-read-email` スコープを追加するよう要求します。これらのスコープをオーバーライドしたり、さらにスコープを要求したりする方法の詳細は、<<provider-scope>> セクションを参照してください。"

#: _guides/security-openid-connect-providers.adoc
msgid "Strava"
msgstr "Strava"

#: _guides/security-openid-connect-providers.adoc
msgid "Create a https://www.strava.com/settings/api[Strava application]:"
msgstr "https://www.strava.com/settings/api[Strava アプリケーション] を作成します。"

#: _guides/security-openid-connect-providers.adoc
msgid "For example, set `Category` to `SocialMotivation`, and set `ApplicationCallbackDomain` to either `localhost` or the domain name provided by Ngrok, see the <<redirect_url>> for more information."
msgstr "たとえば、 `Category` を `SocialMotivation` に設定し、 `ApplicationCallbackDomain` を `localhost`または Ngrok によって提供されるドメイン名に設定します。詳細は <<redirect_url>> を参照してください。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"Strava does not enforce that the redirect (callback) URI which is provided as an authorization code flow parameter is equal to the URI registered in the Strava application because it only requires configuring `ApplicationCallbackDomain`. For example, if `ApplicationCallbackDomain` is set to `www.my-strava-example.com`, Strava will accept redirect URIs such as `www.my-strava-example.com/a`, `www.my-strava-example.com/path/a`, which is not recommended by OAuth2 best security practices, see link:https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#name-insufficient-redirect-uri-v[Insufficient redirect_uri validation] for more information.\n"
"Therefore you must configure a redirect path when working with the Strava provider and Quarkus will enforce that the current request path matches the configured `quarkus.oidc.authentication.redirect-path` value before completing the authorization code flow. See the <<exact_redirect_uri_match>> for more information."
msgstr ""
"Strava では、認可コードフローパラメーターとして提供されるリダイレクト (コールバック) URI と、Strava アプリケーションに登録されている URI が一致するよう強制されません。これは、 `ApplicationCallbackDomain` を設定するだけでよいためです。たとえば、 `ApplicationCallbackDomain` が `www.my-strava-example.com` に設定されている場合、Strava では `www.my-strava-example.com/a`、 `www.my-strava-example.com/path/a` などのリダイレクト URI を使用できますが、これは OAuth2 のベストセキュリティープラクティスでは推奨されていません。詳細は、link:https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#name-insufficient-redirect-uri-v[不十分な redirect_uri 検証] を参照してください。\n"
"したがって、Strava プロバイダーを使用する場合はリダイレクトパスを設定する必要があり、Quarkus は認可コードフローを完了する前に、現在のリクエストパスが設定された`quarkus.oidc.authentication.redirect-path`値と一致することを強制します。詳細は、<<exact_redirect_uri_match>> を参照してください。"

#. type: Title ===
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Twitch"
msgstr "Twitch"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Create a https://dev.twitch.tv/console/apps[Twitch application]:"
msgstr "link:https://dev.twitch.tv/console/apps[Twitchアプリケーション] を作成する："

#: _guides/security-openid-connect-providers.adoc
msgid "[[twitter]] X (formerly Twitter)"
msgstr "[[twitter]] X (旧 Twitter)"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"You can use X (formerly Twitter) for OIDC login, but at the moment, it restricts access to the user's email, which means you\n"
"will have to obtain it and verify it yourself."
msgstr ""
"OIDC ログインには X (旧 Twitter) を使用できますが、現時点では、ユーザーのメールへのアクセスが制限されているため、\n"
"ご自身で Twitter を取得して確認する必要があります。"

#: _guides/security-openid-connect-providers.adoc
msgid "In order to set up OIDC for X, start by https://developer.twitter.com/en/portal/projects/new[Creating a project], enter a project name, and press `Next`:"
msgstr "X 用の OIDC を設定するには、 https://developer.twitter.com/en/portal/projects/new[Creating a project] で開始し、プロジェクト名を入力して、 `Next` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Enter a use case, and press `Next`:"
msgstr "ユースケースを入力し、 `Next` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Enter a project description, and press `Next`:"
msgstr "プロジェクトの説明を入力し、 `Next` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Now enter an application name, and press `Next`:"
msgstr "次に、アプリケーション名を入力して、 `Next` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Write down your keys, because they will not be displayed again, and press `App Settings`:"
msgstr "キーは再び表示されないので書き留めて、 `App Settings` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Navigate down to the `User authentication settings` section and press `Set up`:"
msgstr "`User authentication settings` セクションに移動し、 `Set up` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Check the `OAuth 2.0` check box:"
msgstr "`OAuth 2.0` チェックボックスをオンにします。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"Select `Web App` as application type, then fill in your application details (use `<host>/_renarde/security/twitter-success`\n"
"for the `Callback URI`)."
msgstr ""
"アプリケーションタイプとして `Web App` を選択し、アプリケーションの詳細を入力します (`Callback URI` の場合は\n"
" `<host>/_renarde/security/twitter-success` を使用)。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"X doesn't require https usage in practice, but won't accept your `Website URL` without it, so\n"
"you can still use ngrok for it."
msgstr ""
"X は実際には https を使用する必要はありませんが、 https がないと `Website URL` を受け入れないため、\n"
"ngrok を引き続き使用できます。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Now press `Save`:"
msgstr "次に、 `Save` を押します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "You can now copy your `Client ID` and `Client Secret` and press `Done`:"
msgstr "これで、 `Client ID` および `Client Secret` をコピーして `Done` を押すことができます。"

#: _guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=x` will request X to add `offline.access`, `tweet.read` and `users.read` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr "`quarkus.oidc.provider=x` は、発行されたアクセストークンに `offline.access`、 `tweet.read`、 `users.read` スコープを追加するよう X に要求します。これらのスコープをオーバーライドしたり、さらにスコープを要求したりする方法は、<<provider-scope>> セクションを参照してください。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"X provider requires Proof Key for Code Exchange (PKCE) which is supported by the `quarkus.oidc.provider=x` declaration.\n"
"Quarkus has to encrypt the current PKCE code verifier in a state cookie while the authorization code flow with X is in progress and it will\n"
"generate a secure random secret key for encrypting it."
msgstr ""
"X プロバイダーには、 `quarkus.oidc.provider=x` 宣言でサポートされている Proof Key for Code Exchange (PKCE) が必要です。\n"
"Quarkus は、X との認可コードフローが進行中に、現在の PKCE コード検証子を状態 Cookie で暗号化する必要があり、\n"
"暗号化するための安全なランダム秘密鍵を生成します。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"You can provide your own secret key for encrypting the PKCE code verifier if you prefer with the `quarkus.oidc.authentication.state-secret` property but\n"
"note that this secret should be 32 characters long, and an error will be reported if it is less than 16 characters long."
msgstr ""
"`quarkus.oidc.authentication.state-secret`プロパティーを使用して、PKCE コード検証を暗号化する独自の秘密鍵を提供することもできますが、\n"
"このシークレットの長さは 32 文字である必要があり、16 文字未満の場合、エラーが報告されることに注意してください。"

#: _guides/security-openid-connect-providers.adoc
msgid "X is the new name of Twitter. You can continue using `quarkus.oidc.provider=twitter` for the time being but it might become deprecated in the future."
msgstr "X は Twitter の新しい名前です。当面は `quarkus.oidc.provider=twitter` を引き続き使用できますが、今後廃止される可能性があります。"

#. type: Title ==
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Provider scopes"
msgstr "プロバイダーのスコープ"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Each provider declaration will request one or more token scopes added to access tokens issued by a given provider. For example, `quarkus.oidc.provider=google` will request `Google` to add `openid`, `email` and `profile` scopes."
msgstr "各プロバイダー宣言は、特定のプロバイダーによって発行されたアクセストークンに追加される 1 つ以上のトークンスコープを要求します。たとえば、 `quarkus.oidc.provider=google` は、 `Google` に `openid`、 `email`、および `profile` スコープを追加するように要求します。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "You can override these scopes with `quarkus.oidc.authentication.scopes` property, for example, if you work with `Google` and would not like to have an `email` scope added to access tokens:"
msgstr "たとえば、 `Google` を使用していて、アクセストークンに `email` スコープを追加しない場合は、 `quarkus.oidc.authentication.scopes` プロパティーを使用してこれらのスコープをオーバーライドできます。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "You may also want to add one or more scopes in addition to the scopes requested by default. For example, if you would like to use an access token issued by `Google` to access `Google Calendar` service, you can do it like this:"
msgstr "デフォルトで要求されるスコープに加えて、1 つ以上のスコープを追加することもできます。たとえば、 `Google` が発行したアクセストークンを使用して `Google Calendar` サービスにアクセスする場合は、次のようにします。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "It is simpler than using `quarkus.oidc.authentication.scopes` to add a new scope, because `quarkus.oidc.authentication.scopes` overrides the scopes already set by the provider declaration, which is why you need to list all the required scopes in this case:"
msgstr "`quarkus.oidc.authentication.scopes` を使用して新しいスコープを追加するよりも簡単です。 `quarkus.oidc.authentication.scopes` はプロバイダー宣言によってすでに設定されているスコープをオーバーライドするため、この場合は必要なスコープをすべてリストする必要があります。"

#. type: Title ==
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Support for multiple providers"
msgstr "複数プロバイダーのサポート"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "If you would like to support authenticating users with more than one provider then a provider-specific tenant configuration resolution must be supported."
msgstr "複数のプロバイダーによるユーザー認証をサポートする場合は、プロバイダー固有のテナント設定解決をサポートする必要があります。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "For more information, see the Quarkus xref:security-openid-connect-multitenancy.adoc#static-tenant-resolution[Using OpenID Connect (OIDC) Multi-Tenancy] guide."
msgstr "詳細は、Quarkus の xref:security-openid-connect-multitenancy.adoc#static-tenant-resolution[OpenID Connect (OIDC) マルチテナンシーの使用] ガイドを参照してください。"

#. type: Title ==
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "Access provider services with token propagation"
msgstr "トークン伝播によるプロバイダーサービスへのアクセス"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"Sometimes, only authenticating users with a social provider is not enough.\n"
"A provider-specific service also needs to be accessed for the Quarkus OIDC `web-app` application to fetch or update data from the provider service on behalf of the currently authenticated user."
msgstr ""
"場合によっては、ソーシャルプロバイダーを使用してユーザーを認証するだけでは不十分なことがあります。\n"
"現在認証されているユーザーに代わってプロバイダーサービスからデータを取得または更新するには、Quarkus OIDC `web-app` アプリケーションでプロバイダー固有のサービスにアクセスする必要があります。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"As mentioned in the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide, ID and access tokens are returned after the authorization code flow has been completed, with some providers like `GitHub` returning an access token only.\n"
"It is this access token that has to be propagated to services such as `Google Calendar`, or `Spotify Playlists` for the currently authenticated user to be able to use such services."
msgstr ""
"xref:security-oidc-code-flow-authentication.adoc[Web アプリケーションを保護するための OIDC コードフローメカニズム] ガイドに記載されているように、ID とアクセストークンは認可コードフローが完了した後に返されますが、 `GitHub` などの一部のプロバイダーはアクセストークンのみを返します。\n"
"現在認証されているユーザーが Google カレンダーや Spotify プレイリストなどのサービスを使用できるようにするには、このアクセストークンをこれらのサービスに伝播する必要があります。"

#: _guides/security-openid-connect-providers.adoc
msgid ""
"You do not have to bring provider-specific libraries in order to achieve this, but instead you can use a reactive `Token Propagation` filter, which can be bound to a given REST client with a simple annotation.\n"
"For more information, see the Quarkus xref:security-openid-connect-client-reference.adoc#token-propagation-rest[Access token propagation] guide."
msgstr ""
"これを実現するためにプロバイダー固有のライブラリーを用意する必要はありませんが、代わりに、簡単なアノテーションを使用して特定の REST クライアントにバインドできるリアクティブ `Token Propagation` フィルターを使用できます。\n"
"詳細は、Quarkus xref:security-openid-connect-client-reference.adoc#token-propagation-rest[アクセストークンの伝播] ガイドを参照してください。"

#: _guides/security-openid-connect-providers.adoc
msgid "For example, after you have configured the <<google>> provider, you can have events added to the user's Google Calendar by using a REST client as shown in the following example:"
msgstr "たとえば、<<google>> プロバイダーの場合、次の例に示すように、REST クライアントを使用して、ユーザーの Google カレンダーにイベントを追加できます。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "The `@AccessToken` annotation enables an access token propagation to the target service."
msgstr "`@AccessToken` アノテーションは、ターゲットサービスへのアクセストークンの伝播を可能にします。"

#: _guides/security-openid-connect-providers.adoc
msgid "Finally,  you need to configure the Google Calendar address and request  the Google Calendar scope for an access token, as outlined in the following example:"
msgstr "最後に、次の例に示すように、Google カレンダーのアドレスを設定し、アクセストークンの Google カレンダースコープを要求する必要があります。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Now you are ready to have users authenticated with Google and support updating their `Google` calendars on their behalf, for example:"
msgstr "これで、ユーザーをGoogleで認証させ、例えば彼らの代わりに `Google` カレンダーの更新をサポートする準備が整いました："

#: _guides/security-openid-connect-providers.adoc
msgid "You must update the application registered with the <<google>> provider to list `http://localhost:8080/calendar/event` as one of the authorized redirect URIs if you would like to test this endpoint on the local host, for example:"
msgstr "このエンドポイントをローカルホストでテストしたい場合は、<<google>> プロバイダに登録するアプリケーションを更新して、認可されたリダイレクト URI のひとつとして `http://localhost:8080/calendar/event` を認可されたリダイレクト URI の一つとしてリストアップするように Google プロバイダに登録されたアプリケーションを更新する必要があります。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "You might also have to register one or more test users:"
msgstr "また、1人以上のテストユーザーを登録する必要があるかもしれません："

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "Follow the same approach if the endpoint must access other Google services."
msgstr "エンドポイントが他のGoogleサービスにアクセスする必要がある場合も、同じ方法でアクセスする。"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "The pattern of authenticating with a given provider, where the endpoint uses either an ID token or UserInfo (especially if an OAuth2-only provider such as `GitHub` is used) to get some information about the currently authenticated user and using an access token to access some downstream services (provider or application specific ones) on behalf of this user can be universally applied, irrespectively of which provider is used to secure the application."
msgstr "エンドポイントは、IDトークンかUserInfo（特に `GitHub` のようなOAuth2のみのプロバイダが使用されている場合）を使用して、現在認証されているユーザーに関する情報を取得し、アクセストークンを使用して、このユーザーに代わって下流のサービス（プロバイダまたはアプリケーション固有のもの）にアクセスするという、所定のプロバイダで認証を行うパターンは、アプリケーションの安全性を確保するためにどのプロバイダが使用されているかに関係なく、普遍的に適用できます。"

#: _guides/security-openid-connect-providers.adoc
msgid "Exact redirect URI match"
msgstr "リダイレクト URI の完全一致"

#: _guides/security-openid-connect-providers.adoc
msgid "Most OIDC and OAuth2 providers with the exception of <<strava>> will enforce that the authorization code flow can be completed only if the redirect URI matches precisely the redirect URI configured in a given provider's dashboard."
msgstr "ほとんどの OIDC および OAuth2 プロバイダー (<<strava>> 以外) は、リダイレクト URI が特定のプロバイダーのダッシュボードで設定されたリダイレクト URI と正確に一致する場合に限り、認可コードフローを完了できるようにします。"

#: _guides/security-openid-connect-providers.adoc
msgid "From the practical point of view, your Quarkus endpoint will most likely need to have the `quarkus.oidc.authentication.redirect-path` relative path property set to an initial entry path for all the authenticated users, for example, `quarkus.oidc.authentication.redirect-path=/authenticated`, which means that newly authenticated users will land on the `/authenticated` page, irrespectively of how many secured entry points your application has and which secured resource they initially accessed."
msgstr "実用的な観点から言えば、Quarkus エンドポイントでは、 `quarkus.oidc.authentication.redirect-path` 相対パスプロパティーを、すべての認証済みユーザーの初期エントリーパスに設定する必要があります (例: `quarkus.oidc.authentication.redirect-path=/authenticated`)。つまり、アプリケーションのセキュリティー保護されたエントリーポイントの数や、最初にアクセスしたセキュリティー保護されたリソースに関係なく、新しく認証されたユーザーは `/authenticated` ページに移動します。"

#: _guides/security-openid-connect-providers.adoc
msgid "It is a typical flow for many OIDC `web-app` applications. Once the user lands on the initial secured page, your application can return an HTML page which uses links to guide users to other parts of the application or users can be immediately redirected to other application resources with the help of JAX-RS API."
msgstr "これは、多くの OIDC `web-app` アプリケーションに共通するフローです。ユーザーが最初のセキュリティー保護されたページにアクセスすると、アプリケーションは、ユーザーをアプリケーションの他の部分に誘導するリンクを使用する HTML ページを返すか、JAX-RS API を利用してユーザーを他のアプリケーションリソースにすぐにリダイレクトできます。"

#: _guides/security-openid-connect-providers.adoc
msgid "If necessary, you can configure Quarkus to restore the original request URI after the authentication has been completed. For example:"
msgstr "必要に応じて、認証が完了した後に元のリクエスト URI を復元するように Quarkus を設定できます。例: "

#: _guides/security-openid-connect-providers.adoc
msgid "`strava` provider configuration is the only supported configuration which enforces the `quarkus.oidc.authentication.redirect-path` property with the `/strava` path which you can override with another path such as `/fitness`."
msgstr "`strava` プロバイダー設定は、唯一のサポートされている設定で、 `/strava` パスを使用するように `quarkus.oidc.authentication.redirect-path` プロパティーを 強制します。このパスは、 `/fitness` などの別のパスで上書きできます。"

#: _guides/security-openid-connect-providers.adoc
msgid "If the users access the `/run` endpoint before the authentication, then, once they have authenticated and been redirected to the configured redirect path such as `/strava`, they will land on the original request `/run` path."
msgstr "ユーザーが認証前に `/run` エンドポイントにアクセスした場合、認証後に `/strava` など、設定されたリダイレクトパスにリダイレクトされると、元のリクエストの `/run` パスに移動します。"

#: _guides/security-openid-connect-providers.adoc
msgid "You do not have to set `quarkus.oidc.authentication.redirect-path` immediately because Quarkus assumes the current request URL is an authorization code flow redirect URL if no `quarkus.oidc.authentication.redirect-path` is configured. For example, to test that a <<google>> authentication is working, you can have a Quarkus endpoint listening on `/google` and update the Google dashboard that `http://localhost:8080/google` redirect URI is supported. Setting `quarkus.oidc.authentication.redirect-path` property will be required once your secured application URL space grows."
msgstr "`quarkus.oidc.authentication.redirect-path` をすぐに設定する必要はありません。その理由として `quarkus.oidc.authentication.redirect-path` が設定されていない場合、Quarkus は現在のリクエスト URL が認可コードフローのリダイレクト URL であると想定するためです。たとえば、<<google>> 認証が機能している場合は、Quarkus エンドポイントを `/google` でリッスンし、Google ダッシュボードを更新して `http://localhost:8080/google` リダイレクト URI がサポートされていることを確認できます。保護されたアプリケーションの URL スペースが増大すると、 `quarkus.oidc.authentication.redirect-path` プロパティーの設定が必要になります。"

#: _guides/security-openid-connect-providers.adoc
msgid "HTTPS Redirect URI"
msgstr "HTTPS リダイレクトURI"

#: _guides/security-openid-connect-providers.adoc
msgid "Some providers will only accept HTTPS-based redirect URIs. Tools such as https://ngrok.com/[ngrok] https://linuxhint.com/set-up-use-ngrok/[can be set up] to help testing such providers with Quarkus endpoints running on localhost in dev mode."
msgstr "プロバイダーによっては、 https ベースのリダイレクト URI のみを受け入れます。 https://ngrok.com/[ngrok] https://linuxhint.com/set-up-use-ngrok/[設定可能] などのツールは、開発モードで localhost 上で実行されている Quarkus エンドポイントを使用してこのようなプロバイダーをテストするのに役立ちます。"

#: _guides/security-openid-connect-providers.adoc
msgid "Rate Limiting"
msgstr "レート制限"

#: _guides/security-openid-connect-providers.adoc
msgid "Depending on your developer API subscription level, some providers may enforce a rather strict request rate limiting policy."
msgstr "開発者 API サブスクリプションレベルによっては、一部のプロバイダーがかなり厳格なリクエストレート制限ポリシーを適用する場合があります。"

#: _guides/security-openid-connect-providers.adoc
msgid "It may not be a problem when Quarkus fetches public verification keys from OIDC-compliant providers like the <<google>> provider and keeps verifying the user session with these keys locally. However, for pure OAuth2 providers where only an access token is available and which has to be verified indirectly by requesting UserInfo from the provider endpoint on every request done by an already authenticated user, it can become a problem."
msgstr "Quarkus が、<<google>> プロバイダーなどの OIDC 準拠のプロバイダーから公開検証鍵を取得し、これらの鍵を使用してユーザーセッションをローカルで検証し続ける場合は問題にならないかもしれませんが、アクセストークンのみが利用でき、認証済みユーザーから要求があるたびに、プロバイダーエンドポイントから UserInfo を要求して間接的に検証する必要があるピュア OAuth2 プロバイダーの場合には問題となる可能性があります。"

#: _guides/security-openid-connect-providers.adoc
msgid "Therefore, UserInfo is embedded in an internally generated ID token and is encrypted in the session cookie. You can disable it with `quarkus.oidc.cache-user-info-in-idtoken=false`."
msgstr "したがって、UserInfo は内部で生成された ID トークンに埋め込まれ、セッション Cookie で暗号化されます。 `quarkus.oidc.cache-user-info-in-idtoken=false` で無効化できます。"

#: _guides/security-openid-connect-providers.adoc
msgid "Alternatively, use a default or custom UserInfo cache provider, please see the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr "または、デフォルトまたはカスタムの UserInfo キャッシュプロバイダーを使用します。OpenID Connect (OIDC) Bearer トークン認証ガイドの xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[トークンイントロスペクションと UserInfo キャッシュ] セクションを参照してください。"

#. type: Title ==
#: _guides/security-openid-connect-providers.adoc
#, no-wrap
msgid "References"
msgstr "参照"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[ウェブアプリケーションを保護する OIDC コードフローメカニズム]"

#. type: Plain text
#: _guides/security-openid-connect-providers.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Security の概要]"
