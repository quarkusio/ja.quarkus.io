msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Using Apache Kafka with Schema Registry and Avro"
msgstr "Schema RegistryとAvroと共にApache Kafkaを使用"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"This guide shows how your Quarkus application can use Apache Kafka, https://avro.apache.org/docs/current/[Avro] serialized\n"
"records, and connect to a schema registry (such as the https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registry] or https://www.apicur.io/registry/[Apicurio Registry])."
msgstr "このガイドでは、Quarkus アプリケーションが Apache Kafka、 https://avro.apache.org/docs/current/[Avro] でシリアライズされたレコードを使用し、スキーマレジストリー (https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent スキーマレジストリー] または https://www.apicur.io/registry/[Apicurio レジストリー]) に接続する方法を説明しています。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"If you are not familiar with Kafka and Kafka in Quarkus in particular, consider\n"
"first going through the xref:kafka.adoc[Using Apache Kafka with Reactive Messaging] guide."
msgstr "特に Kafka や Kafka in Quarkus を使い慣れていない場合は、最初に xref:kafka.adoc[リアクティブメッセージングでの Apache Kafka の使用] ガイドを確認することをお勧めします。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"In this guide we are going to implement a REST resource, namely `MovieResource`, that\n"
"will consume movie DTOs and put them in a Kafka topic."
msgstr "このガイドでは、REST リソース、つまりムービー DTO を消費して Kafka トピックに配置する `MovieResource` を実装します。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"Then, we will implement a consumer that will consume and collect messages from the same topic.\n"
"The collected messages will be then exposed by another resource, `ConsumedMovieResource`, via\n"
"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events[Server-Sent Events]."
msgstr "次に、同じトピックからメッセージを消費および収集するコンシューマーを実装します。収集されたメッセージは、 https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events[Server-Sent Events] を介して別のリソースである `ConsumedMovieResource` によって公開されます。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"The _Movies_ will be serialized and deserialized using Avro.\n"
"The schema, describing the _Movie_, is stored in Apicurio Registry.\n"
"The same concept applies if you are using the Confluent Avro _serde_ and Confluent Schema Registry."
msgstr "_Movies_ は、Avro を使用してシリアライズおよびデシリアライズされます。_Movie_ を記述するスキーマは、Apicurio Registry に保存されます。Confluent Avro _serde_ および Confluent Schema Registry を使用している場合も同じ概念が適用されます。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Git リポジトリーのクローンを作成: `git clone{quickstarts-clone-url}`、または {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "The solution is located in the `kafka-avro-schema-quickstart` link:{quickstarts-tree-url}/kafka-avro-schema-quickstart[directory]."
msgstr "ソリューションは `kafka-avro-schema-quickstart` link:{quickstarts-tree-url}/kafka-avro-schema-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Creating the Maven Project"
msgstr "Maven プロジェクトの作成"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"If you use Confluent Schema Registry, you don't need the `quarkus-apicurio-registry-avro` extension.\n"
"Instead, you need the `quarkus-confluent-registry-avro` extension and a few more dependencies.\n"
"See <<confluent>> for details."
msgstr "Confluent Schema Registry を使用する場合、 `quarkus-apicurio-registry-avro` エクステンションは必要ありません。代わりに、 `quarkus-confluent-registry-avro` エクステンションと、さらにいくつかの依存関係が必要です。詳しくは、 <<confluent>> を参照下さい。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Avro schema"
msgstr "Avro スキーマ"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"Apache Avro is a data serialization system. Data structures are described using schemas.\n"
"The first thing we need to do is to create a schema describing the `Movie` structure.\n"
"Create a file called `src/main/avro/movie.avsc` with the schema for our record (Kafka message):"
msgstr "Apache Avro はデータシリアル化システムです。データ構造はスキーマを使用して記述されます。最初に `Movie` 構造を記述するスキーマを作成する必要があります。レコードのスキーマ (Kafka メッセージ) を使用して、 `src/main/avro/movie.avsc` というファイルを作成します。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "If you build the project with:"
msgstr "次のコマンドでプロジェクトをビルドする場合:"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"the `movies.avsc` will get compiled to a `Movie.java` file\n"
"placed in the `target/generated-sources/avsc` directory."
msgstr "`movies.avsc` は、 `target/generated-sources/avsc` ディレクトリーに配置された `Movie.java` ファイルにコンパイルされます。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"Take a look at the https://avro.apache.org/docs/current/spec.html#schemas[Avro specification] to learn more about\n"
"the Avro syntax and supported types."
msgstr "Avro 構文とサポートされているタイプの詳細については、 https://avro.apache.org/docs/current/spec.html#schemas[Avro 仕様] を参照してください。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "With Quarkus, there's no need to use a specific Maven plugin to process the Avro schema, this is all done for you by the `quarkus-avro` extension!"
msgstr "Quarkus を使用すると、Avro スキーマを処理するために特定の Maven プラグインを使用する必要はありません。これはすべて、 `quarkus-avro` エクステンションによって行われます。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "If you run the project with:"
msgstr "次のコマンドでプロジェクトを実行する場合:"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"the changes you do to the schema file will be\n"
"automatically applied to the generated Java files."
msgstr "スキーマファイルに加えた変更は、生成された Java ファイルに自動的に適用されます。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "The `Movie` producer"
msgstr "`Movie` プロデューサー"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "Having defined the schema, we can now jump to implementing the `MovieResource`."
msgstr "スキーマを定義したら、 `MovieResource` を実装できます。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"Let's open the `MovieResource`, inject an https://quarkus.io/blog/reactive-messaging-emitter/[`Emitter`] of `Movie` DTO and implement a `@POST` method\n"
"that consumes `Movie` and sends it through the `Emitter`:"
msgstr "`MovieResource` を開き、 `Movie` DTO の https://quarkus.io/blog/reactive-messaging-emitter/[`Emitter`] を挿入し、 `Movie` を消費する `@POST` メソッドを実装して `Emitter` 経由で送信してください。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"Now, we need to _map_ the `movies` channel (the `Emitter` emits to this channel) to a Kafka topic.\n"
"To achieve this, edit the `application.properties` file, and add the following content:"
msgstr "ここで、 `movies` チャネル (`Emitter` はこのチャネルに出力) を Kafka トピックに _マップ_ する必要があります。これを実現するには、 `application.properties` ファイルを編集し、次のコンテンツを追加します。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"You might have noticed that we didn't define the `value.serializer`.\n"
"That's because Quarkus can xref:kafka.adoc#serialization-autodetection[autodetect] that `io.apicurio.registry.serde.avro.AvroKafkaSerializer` is appropriate here, based on the `@Channel` declaration, structure of the `Movie` type, and presence of the Apicurio Registry libraries.\n"
"We still have to define the `apicurio.registry.auto-register` property."
msgstr "`value.serializer` を定義しなかったことにお気づきかもしれません。これは、 `@Channel` 宣言、 `Movie` タイプの構造、Apicurio Registry ライブラリーの存在に基づき、 `io.apicurio.registry.serde.avro.AvroKafkaSerializer` が適切であることを、Quarkus が xref:kafka.adoc#serialization-autodetection[自動検出] できるためです。それでも、 `apicurio.registry.auto-register` プロパティーは定義する必要があります。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"If you use Confluent Schema Registry, you don't have to configure `value.serializer` either.\n"
"It is also detected automatically.\n"
"The Confluent Schema Registry analogue of `apicurio.registry.auto-register` is called `auto.register.schemas`.\n"
"It defaults to `true`, so it doesn't have to be configured in this example.\n"
"It can be explicitly set to `false` if you want to disable automatic schema registration."
msgstr "Confluent Schema Registry を使用する場合は、 `value.serializer` も設定する必要はありません。同様に、自動的に検出されます。 `apicurio.registry.auto-register` の Confluent Schema Registry アナログは、 `auto.register.schemas` と呼ばれます。デフォルトは `true` であるため、この例で設定する必要はありません。自動スキーマ登録を無効にする場合は、明示的に `false` に設定できます。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "The `Movie` consumer"
msgstr "`Movie` コンシューマー"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"So, we can write records into Kafka containing our `Movie` data.\n"
"That data is serialized using Avro.\n"
"Now, it's time to implement a consumer for them."
msgstr "`Movie` データを含むレコードを Kafka に書き込むことができます。そのデータは Avro を使用してシリアライズされます。では、それらのコンシューマーを実装してみましょう。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"Let's create `ConsumedMovieResource` that will consume `Movie` messages\n"
"from the `movies-from-kafka` channel and will expose it via Server-Sent Events:"
msgstr "`movies-from-kafka` チャネルからの `Movie` メッセージを消費し、Server-Sent Event を介して公開する `ConsumedMovieResource` を作成します。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"The last bit of the application's code is the configuration of the `movies-from-kafka` channel in\n"
"`application.properties`:"
msgstr "アプリケーションのコードの最後のビットは、 `application.properties` の `movies-from-kafka` チャネルの設定です。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"You might have noticed that we didn't define the `value.deserializer`.\n"
"That's because Quarkus can xref:kafka.adoc#serialization-autodetection[autodetect] that `io.apicurio.registry.serde.avro.AvroKafkaDeserializer` is appropriate here, based on the `@Channel` declaration, structure of the `Movie` type, and presence of the Apicurio Registry libraries.\n"
"We don't have to define the `apicurio.registry.use-specific-avro-reader` property either, that is also configured automatically."
msgstr "`value.deserializer` を定義しなかったことにお気づきかもしれません。これは、 `@Channel` 宣言、 `Movie` タイプの構造、Apicurio Registry ライブラリーの存在に基づき、 `io.apicurio.registry.serde.avro.AvroKafkaDeserializer` が適切であることを、Quarkus が xref:kafka.adoc#serialization-autodetection[自動検出] できるためです。 `apicurio.registry.use-specific-avro-reader` プロパティーも自動で設定されるため、定義する必要はありません。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"If you use Confluent Schema Registry, you don't have to configure `value.deserializer` or `specific.avro.reader` either.\n"
"They are both detected automatically."
msgstr "Confluent Schema Registry を使用する場合は、 `value.deserializer` や `specific.avro.reader` を設定する必要はありません。どちらも自動的に検出されます。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Running the application"
msgstr "アプリケーションの実行"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "Start the application in dev mode:"
msgstr "アプリケーションを開発モードで実行します。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"Kafka broker and Apicurio Registry instance are started automatically thanks to Dev Services.\n"
"See xref:kafka-dev-services.adoc[Dev Services for Kafka] and xref:apicurio-registry-dev-services.adoc[Dev Services for Apicurio Registry] for more details."
msgstr "Dev Services により、Kafka ブローカーと Apicurio Registry インスタンスは自動的に開始されます。詳細については、xref:kafka-dev-services.adoc[Dev Services for Kafka] および xref:apicurio-registry-dev-services.adoc[Dev Services for Apicurio Registry] を参照してください。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"You might have noticed that we didn't configure the schema registry URL anywhere.\n"
"This is because Dev Services for Apicurio Registry configures all Kafka channels in Quarkus Messaging to use the automatically started registry instance."
msgstr ""
"スキーマレジストリのURLをどこにも設定していないことに気づいたかもしれません。\n"
"これは、Dev Services for Apicurio Registryによって、Quarkus MessagingのすべてのKafkaチャンネルが、自動的に起動されたレジストリインスタンスを使用するように設定されるためです。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"Apicurio Registry, in addition to its native API, also exposes an endpoint that is API-compatible with Confluent Schema Registry.\n"
"Therefore, this automatic configuration works both for Apicurio Registry serde and Confluent Schema Registry serde."
msgstr "ネイティブ API に加えて、Apicurio Registry は Confluent Schema Registry と API 互換のエンドポイントも公開します。したがって、この自動設定は、Apicurio Registry serde と Confluent Schema Registry serde の両方で機能します。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"However, note that there's no Dev Services support for running Confluent Schema Registry itself.\n"
"If you want to use a running instance of Confluent Schema Registry, configure its URL, together with the URL of a Kafka broker:"
msgstr "ただし、Confluent Schema Registry 自体の実行に対する Dev Services のサポートはないことに注意してください。Confluent Schema Registry の実行インスタンスを使用する場合は、その URL を Kafka ブローカーの URL と併せて設定します。"

#. type: delimited block =
#: _guides/kafka-schema-registry-avro.adoc
msgid "In the second terminal, query the `ConsumedMovieResource` resource with `curl`:"
msgstr "2 番目のターミナルで、 `ConsumedMovieResource` リソースを `curl` でクエリーします。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "In the third one, post a few movies:"
msgstr "3番目のターミナルで、いくつかの movie をポストします。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "Observe what is printed in the second terminal. You should see something along the lines of:"
msgstr "2 番目のターミナルに表示されているものを確認します。次の行に何かが表示されているはずです。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Running in JVM or Native mode"
msgstr "JVM またはネイティブモードでの実行"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"When not running in dev or test mode, you will need to start your own Kafka broker and Apicurio Registry.\n"
"The easiest way to get them running is to use `docker-compose` to start the appropriate containers."
msgstr "開発モードまたはテストモードで実行していない場合は、独自の Kafka ブローカーと Apicurio Registry を起動する必要があります。そのための最も簡単な方法は、 `docker-compose` を使用して適切なコンテナーを起動することです。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"If you use Confluent Schema Registry, you already have a Kafka broker and Confluent Schema Registry instance running and configured.\n"
"You can ignore the `docker-compose` instructions here, as well as the Apicurio Registry configuration."
msgstr "Confluent Schema Registry を使用している場合は、すでに Kafka ブローカーと Confluent Schema Registry インスタンスが実行および設定されています。ここに記した`docker-compose` や Apicurio Registry の設定に関する説明は無視してかまいません。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "Create a `docker-compose.yaml` file at the root of the project with the following content:"
msgstr "プロジェクトのルートに、次の内容の `docker-compose.yaml` ファイルを作成します。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "Before starting the application, let's first start the Kafka broker and Apicurio Registry:"
msgstr "アプリケーションを開始する前に、まず Kafka ブローカーと Apicurio Registry を起動します。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"To stop the containers, use `docker-compose down`. You can also clean up\n"
"the containers with `docker-compose rm`"
msgstr "コンテナを停止するには、 `docker-compose down` を使用します。 `docker-compose rm` を使用してコンテナをクリーンアップすることもできます。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "You can build the application with:"
msgstr "次のコマンドでアプリケーションをビルドできます。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "And run it in JVM mode with:"
msgstr "その後、次のコマンドを使用して JVM モードで実行します。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"By default, the application tries to connect to a Kafka broker listening at `localhost:9092`.\n"
"You can configure the bootstrap server using: `java -Dkafka.bootstrap.servers=\\... -jar target/quarkus-app/quarkus-run.jar`"
msgstr "デフォルトでは、アプリケーションは `localhost:9092` でリッスンしている Kafka ブローカーに接続しようとします。ブートストラップサーバーは、 `java -Dkafka.bootstrap.servers=\\... -jar target/quarkus-app/quarkus-run.jar` を使用して設定できます。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "Specifying the registry URL on the command line is not very convenient, so you can add a configuration property only for the `prod` profile:"
msgstr "コマンドラインでレジストリー URL を指定する方法は便利ではないため、 `prod` プロファイルに対してのみ設定プロパティーを追加します。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "You can build a native executable with:"
msgstr "以下でネイティブ実行可能ファイルをビルドできます。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "and run it with:"
msgstr "次に、それを実行します。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Testing the application"
msgstr "アプリケーションのテスト"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"As mentioned above, Dev Services for Kafka and Apicurio Registry automatically start and configure a Kafka broker and Apicurio Registry instance in dev mode and for tests.\n"
"Hence, we don't have to set up Kafka and Apicurio Registry ourselves.\n"
"We can just focus on writing the test."
msgstr "上記のとおり、Dev Services for Kafka と Apicurio Registry は、Kafka ブローカーと Apicurio Registry インスタンスを開発モードおよびテスト用に自動で開始し、設定します。したがって、Kafka および Apicurio Registry を自分で設定する必要はなく、テストの作成に集中できます。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "First, let's add test dependencies on REST Client and Awaitility to the build file:"
msgstr "まず、REST クライアントと Awaitility のテスト依存関係をビルドファイルに追加します。"

#. type: Block title
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"In the test, we will send movies in a loop and check if the `ConsumedMovieResource` returns\n"
"what we send."
msgstr "テストでは、ムービーをループで送信し、送信したものを `ConsumedMovieResource` が返すかどうかを確認します。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"We modified the `MovieResourceTest` that was generated together with the project. This test class has a\n"
"subclass, `NativeMovieResourceIT`, that runs the same test against the native executable.\n"
"To run it, execute:"
msgstr "プロジェクトと一緒に生成された `MovieResourceTest` を変更しました。このテストクラスには、ネイティブ実行可能ファイルに対して同じテストを実行するサブクラ ス`NativeMovieResourceIT` があります。実行するには、次を実行します。"

#. type: Title ===
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Manual setup"
msgstr "手動セットアップ"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "If we couldn't use Dev Services and wanted to start a Kafka broker and Apicurio Registry instance manually, we would define a xref:getting-started-testing.adoc#quarkus-test-resource[QuarkusTestResourceLifecycleManager]."
msgstr "Dev Services を使用できず、Kafka ブローカーと Apicurio Registry インスタンスを手動で開始する場合は、xref:getting-started-testing.adoc#quarkus-test-resource[QuarkusTestResourceLifecycleManager] を定義します。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Using compatible versions of the Apicurio Registry"
msgstr "互換性のあるバージョンのApicurio Registryの使用"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"The `quarkus-apicurio-registry-avro` extension depends on recent versions of Apicurio Registry client,\n"
"and most versions of Apicurio Registry server and client are backwards compatible.\n"
"For some you need to make sure that the client used by Serdes is compatible with the server."
msgstr "`quarkus-apicurio-registry-avro` エクステンションは、最近のバージョンのApicurio Registryクライアントに依存しており、Apicurio Registryサーバーとクライアントのほとんどのバージョンには後方互換性があります。一部では、Serdesで使用するクライアントがサーバーと互換性があることを確認する必要があります。"

#: _guides/kafka-schema-registry-avro.adoc
msgid "For example, with Apicurio Dev Service if you set the image name to use version `2.1.5.Final`:"
msgstr "例えば、Apicurio Dev Serviceで、バージョン `2.1.5.Final` を使用するようにイメージ名を設定した場合："

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"You need to make sure that `apicurio-registry-serdes-avro-serde` dependency\n"
"and the REST client `apicurio-common-rest-client-vertx` dependency are set to compatible versions:"
msgstr "`apicurio-registry-serdes-avro-serde` の依存関係と REST クライアント `apicurio-common-rest-client-vertx` の依存関係が互換性のあるバージョンに設定されていることを確認する必要があります："

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "Known previous compatible versions for `apicurio-registry-client` and `apicurio-common-rest-client-vertx` are the following"
msgstr "`apicurio-registry-client` および `apicurio-common-rest-client-vertx` の既知の旧互換バージョンは以下の通りです。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "`apicurio-registry-client` 2.1.5.Final with `apicurio-common-rest-client-vertx` 0.1.5.Final"
msgstr "`apicurio-registry-client` 2.1.5.Final と 0.1.5.Final `apicurio-common-rest-client-vertx`"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "`apicurio-registry-client` 2.3.1.Final with `apicurio-common-rest-client-vertx` 0.1.13.Final"
msgstr "`apicurio-registry-client` 2.3.1.Final と 0.1.13.Final `apicurio-common-rest-client-vertx`"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Using the Confluent Schema Registry"
msgstr "Confluent Schema Registryの使用"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"If you want to use the Confluent Schema Registry, you need the `quarkus-confluent-registry-avro` extension, instead of the `quarkus-apicurio-registry-avro` extension.\n"
"Also, you need to add a few dependencies and a custom Maven repository to your `pom.xml` / `build.gradle` file:"
msgstr "Confluent Schema Registry を使用する場合、 `quarkus-apicurio-registry-avro` エクステンションの代わりに、 `quarkus-confluent-registry-avro` エクステンションと、さらにいくつかの依存関係が必要です。また、Confluent Maven リポジトリーを `pom.xml` / `build.gradle` ファイルに追加する必要があります。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"In JVM mode, any version of `io.confluent:kafka-avro-serializer` can be used.\n"
"In native mode, Quarkus supports the following versions: `6.2.x`, `7.0.x`, `7.1.x`, `7.2.x`, `7.3.x`."
msgstr ""
"JVMモードでは、 `io.confluent:kafka-avro-serializer` の任意のバージョンを使用できます。\n"
"ネイティブモードでは、Quarkusは以下のバージョンをサポートしています： `6.2.x` `7.0.x` `7.1.x` `7.2.x` `7.3.x` 。"

#: _guides/kafka-schema-registry-avro.adoc
msgid "For versions `7.4.x` and later, due to an issue with the Confluent Schema Serializer, you need to add another dependency:"
msgstr "バージョン `7.4.x` 以降では、Confluent スキーマシリアライザーの問題のため、別の依存関係を追加する必要があります："

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "For any other versions, the native configuration may need to be adjusted."
msgstr "それ以外のバージョンでは、ネイティブコンフィギュレーションの調整が必要な場合があります。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Avro code generation details"
msgstr "Avro コード生成の詳細"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"In this guide we used the Quarkus code generation mechanism to generate Java files\n"
"from Avro schema."
msgstr "このガイドでは、Quarkus コード生成メカニズムを使用して、Avro スキーマから Java ファイルを生成しました。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "Under the hood, the mechanism uses `org.apache.avro:avro-compiler`."
msgstr "内部で、メカニズムは `org.apache.avro:avro-compiler` を使用します。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "You can use the following configuration properties to alter how it works:"
msgstr "次の設定プロパティーを使用して、動作を変更できます。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"`avro.codegen.[avsc|avdl|avpr].imports` - a list of files or directories that should be compiled first thus making them\n"
"importable by subsequently compiled schemas. Note that imported files should not reference each other. All paths should be relative\n"
"to the `src/[main|test]/avro` directory, or `avro` sub-directory in any source directory configured by the build system. Passed as a comma-separated list."
msgstr "`avro.codegen.[avsc|avdl|avpr].imports` - 最初にコンパイルされるべきファイルやディレクトリのリストで、後にコンパイルされるスキーマからインポートできるようにします。インポートされたファイルは互いに参照しあってはならないことに注意してください。すべてのパスは `src/[main|test]/avro` ディレクトリ、またはビルドシステムによって設定された任意のソースディレクトリの `avro` サブディレクトリからの相対パスでなければなりません。カンマで区切られたリストとして渡されます。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"`avro.codegen.stringType` - the Java type to use for Avro strings. May be one of `CharSequence`, `String` or\n"
"`Utf8`. Defaults to `String`"
msgstr "`avro.codegen.stringType` - Avro 文字列に使用する Java タイプ。 `CharSequence`、 `String`、 `Utf8` のいずれかである可能性があります。デフォルトは `String` です。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"`avro.codegen.createOptionalGetters` - enables generating the `getOptional...`\n"
"methods that return an Optional of the requested type. Defaults to `false`"
msgstr "`avro.codegen.createOptionalGetters` - 要求されたタイプの Optional を返す`getOptional...` メソッドを生成できるようにします。デフォルトは `false` です。"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "`avro.codegen.enableDecimalLogicalType` - determines whether to use Java classes for decimal types, defaults to `false`"
msgstr "`avro.codegen.enableDecimalLogicalType` - 10 進型に Java クラスを使用するかどうかを決定します。デフォルトは `false` です。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"`avro.codegen.createSetters` - determines whether to create setters for the fields of the record.\n"
"Defaults to `false`"
msgstr "`avro.codegen.createSetters` - レコードのフィールドにセッターを作成するかどうかを決定します。デフォルトは `false` です。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"`avro.codegen.gettersReturnOptional` - enables generating `get...` methods that\n"
"return an Optional of the requested type. Defaults to `false`"
msgstr "`avro.codegen.gettersReturnOptional` - 要求されたタイプの Optional を返す `get...` メソッドを生成できるようにします。デフォルトは `false` です。"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"`avro.codegen.optionalGettersForNullableFieldsOnly`, works in conjunction with `gettersReturnOptional` option.\n"
"If it is set, `Optional` getters will be generated only for fields that are nullable. If the field is mandatory,\n"
"regular getter will be generated. Defaults to `false`"
msgstr "`avro.codegen.optionalGettersForNullableFieldsOnly` は、 `gettersReturnOptional` オプションと連携して機能します。設定されている場合、 `Optional` ゲッターは null 許容フィールドに対してのみ生成されます。フィールドが必須の場合、通常のゲッターが生成されます。デフォルトは `false` です。"

#. type: Title ==
#: _guides/kafka-schema-registry-avro.adoc
#, no-wrap
msgid "Further reading"
msgstr "さらに詳しく"

#. type: Plain text
#: _guides/kafka-schema-registry-avro.adoc
msgid "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/kafka/kafka.html[SmallRye Reactive Messaging Kafka] documentation"
msgstr "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/kafka/kafka.html[Kafka における SmallRye リアクティブメッセージング] のドキュメント"

#: _guides/kafka-schema-registry-avro.adoc
msgid ""
"link:https://quarkus.io/blog/kafka-avro/[How to Use Kafka, Schema Registry and Avro with Quarkus] - a blog post on which\n"
"the guide is based. It gives a good introduction to Avro and the concept of schema registry"
msgstr "link:https://quarkus.io/blog/kafka-avro/[Quarkus での Kafka、Schema Registry、Avro の使用方法] - ガイドの基となるブログ投稿。Avro の紹介とスキーマレジストリーの概念について説明しています。"
