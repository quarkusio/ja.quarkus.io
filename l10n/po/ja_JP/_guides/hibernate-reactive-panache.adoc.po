msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Simplified Hibernate Reactive with Panache"
msgstr "PanacheでシンプルになったHibernate Reactive"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"link:https://hibernate.org/reactive/[Hibernate Reactive] is the only reactive Jakarta Persistence (formerly known as JPA) implementation and offers you the full\n"
"breadth of an Object Relational Mapper allowing you to access your database over reactive drivers.\n"
"It makes complex mappings possible, but it does not make simple and common mappings trivial.\n"
"Hibernate Reactive with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "link:https://hibernate.org/reactive/[Hibernate Reactive]は 、唯一のリアクティブ Jakarta Persistence（旧JPA）実装で、リアクティブドライバでデータベースにアクセスできるObject Relational Mapperの全機能を提供します。複雑なマッピングを可能にしますが、単純で一般的なマッピングを容易なものにするわけではありません。Hibernate Reactive with Panacheは、Quarkusでエンティティを簡単に、楽しく書けるようにすることに重点を置いています。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate Reactive is not a replacement for xref:hibernate-orm-panache.adoc[Hibernate ORM] or the future of Hibernate ORM.\n"
"It is a different stack tailored for reactive use cases where you need high-concurrency."
msgstr ""
"Hibernate Reactive は、xref:hibernate-orm-panache.adoc[Hibernate ORM] を置き換えるものでも、次世代の Hibernate ORM でもありません。\n"
"これは、高い同時実行性が必要なリアクティブなユースケース向けに調整された別のスタックです。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Furthermore, using Quarkus REST (formerly RESTEasy Reactive), our default REST layer, does not require the use of Hibernate Reactive.\n"
"It is perfectly valid to use Quarkus REST with Hibernate ORM,\n"
"and if you do not need high-concurrency, or are not accustomed to the reactive paradigm, it is recommended to use Hibernate ORM."
msgstr ""
"さらに、デフォルトの REST レイヤーである Quarkus REST (旧称 RESTEasy Reactive) を使用する場合、Hibernate Reactive を使用する必要はありません。\n"
"Quarkus REST を Hibernate ORM と併用することはまったく問題ありません。\n"
"高い同時実行性が必要ない場合、またはリアクティブパラダイムに慣れていない場合は、Hibernate ORM を使用することを推奨します。"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "First: an example"
msgstr "最初に:例"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "What we're doing in Panache allows you to write your Hibernate Reactive entities like this:"
msgstr "Panacheでは、HibernateのReactiveエンティティをこのように書けるようにしています:"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is?\n"
"Does this look interesting? Read on!"
msgstr "コードがどれだけコンパクトで読みやすくなっているかお気づきですか?面白いと思いませんか?読んでみてください。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "The `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "`list()` メソッドには、最初は驚くかもしれません。これはHQL（JP-QL）クエリのフラグメントを取り、残りをコンテキスト化するものです。そのため、非常に簡潔で、しかも読みやすいコードになります。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"What was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "上記で説明したのは、基本的に link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[アクティブレコードパターン] であり、単にエンティティパターンと呼ばれることもあります。Hibernate with Panacheでは、 `PanacheRepository` を介して、より古典的な link:https://martinfowler.com/eaaCatalog/repository.html[リポジトリパターン] を使用することも可能です。"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "The solution is located in the `hibernate-reactive-panache-quickstart` link:{quickstarts-tree-url}/hibernate-reactive-panache-quickstart[directory]."
msgstr "ソリューションは `hibernate-reactive-panache-quickstart` link:{quickstarts-tree-url}/hibernate-reactive-panache-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Setting up and configuring Hibernate Reactive with Panache"
msgstr "PanacheによるHibernate Reactiveのセットアップと設定"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "To get started:"
msgstr "始めるには:"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "add your settings in `{config-file}`"
msgstr "`{config-file}` で設定を追加します"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "annotate your entities with `@Entity`"
msgstr "エンティティに `@Entity` アノテーションを付けます"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "エンティティが `PanacheEntity` を拡張するようにする(リポジトリパターンを使用している場合はオプションです)"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "すべての設定は、 link:hibernate-orm.html#setting-up-and-configuring-hibernate-orm[Hibernateセットアップガイド]を確認してください。"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "In your `pom.xml`, add the following dependencies:"
msgstr "ビルドファイルに、以下の依存関係を追加します:"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "the Hibernate Reactive with Panache extension"
msgstr "Hibernate Reactive with Panache エクステンション"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "your reactive driver extension (`quarkus-reactive-pg-client`, `quarkus-reactive-mysql-client`, `quarkus-reactive-db2-client`, ...)"
msgstr "お使いのリアクティブドライバのエクステンション ( `quarkus-reactive-pg-client` , `quarkus-reactive-mysql-client` , `quarkus-reactive-db2-client` , ... )"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "For instance:"
msgstr "例えば:"

#. type: Block title
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、 `{config-file}` で関連する設定プロパティを追加します。"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Solution 1: using the active record pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Defining your entity"
msgstr "エンティティの定義"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your\n"
"columns as public fields:"
msgstr "Panache エンティティーを定義するには、 `PanacheEntity` を拡張して `@Entity` とアノテーションを付け、列をパブリック フィールドとして追加します。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the\n"
"`@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "publicフィールドには、すべてのJakarta Persistenceのカラムアノテーションを付けることができます。永続化しないフィールドが必要な場合は、 `@Transient` アノテーションをそのフィールドに使用します。アクセサーを書く必要がある場合は、次のようにできます:"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor,\n"
"and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "また、当社のフィールドアクセスリライトのおかげで、ユーザーが `person.name` を読むときには、実際に `getName()` アクセサが呼び出されます。これはフィールドの書き込みやセッターについても同様です。これにより、すべてのフィールドの呼び出しが、対応するゲッター/セッターの呼び出しに置き換えられるため、実行時に適切なカプセル化が可能になります。"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Most useful operations"
msgstr "最も使うことの多い操作"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、このように最も一般的な操作が実行できるようになります:"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Adding entity methods"
msgstr "エンティティメソッドの追加"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "エンティティに対するカスタムクエリを、エンティティ自体の中に追加できます。そうすることで、自分や同僚が簡単に見つけることができ、クエリは操作するオブジェクトと一緒に配置されます。エンティティクラスにスタティックメソッドとして追加するのがPanache Active Recordのやり方です。"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Solution 2: using the repository pattern"
msgstr "解決策2:リポジトリパターンを使用する"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr "リポジトリパターンを使用する場合、エンティティを通常のJakarta Persistenceエンティティとして定義することができます。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n"
"Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "エンティティにゲッター/セッターを定義するのが面倒な場合は、 `PanacheEntityBase` を拡張するようにすればQuarkusが生成してくれます。また、 `PanacheEntity` を拡張して、デフォルトのIDを利用することもできます。"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Defining your repository"
msgstr "リポジトリの定義"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheRepository`:"
msgstr "リポジトリを使用する場合、 `PanacheRepository` を実装することでアクティブレコードパターンとまったく同じ便利なメソッドをリポジトリにインジェクションできます:"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` で定義されている操作はすべてリポジトリ上で利用可能なので、これを使用することはアクティブレコードパターンを使用するのと全く同じですが、それを注入する必要があります。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書くことで実行可能な最も一般的な操作は以下の通りです:"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr "残りのドキュメントでは、アクティブレコードパターンに基づく使用法のみを示していますが、リポジトリパターンでも実行できることを覚えておいてください。リポジトリパターンの例は簡潔にするために省略しています。"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Advanced Query"
msgstr "高度なクエリー"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Paging"
msgstr "ページング"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"You should only use the `list` methods if your table contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "`list`  メソッドは、テーブルに含まれるデータセットが十分に小さい場合にのみ使用してください。より大きなデータセットの場合は、同等の `find` メソッドを使用して、ページングが可能な `PanacheQuery` を返すことができます:"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 型には、ページングや返されたストリームを処理するための他の多くのメソッドがあります。"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Using a range instead of pages"
msgstr "ページの代わりにレンジを使用"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、レンジベースのクエリーも使用できます。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "範囲とページを混在させることはできません。範囲を使用した場合、現在のページを持っていることに依存するすべてのメソッドは `UnsupportedOperationException` をスローします。 `page(Page)` もしくは `page(int, int)` を使用してページングに切り換えられます。"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Sorting"
msgstr "ソート"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "クエリー文字列を受け付けるすべてのメソッドは、以下の簡略化されたクエリー形式も受け付けます:"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "しかし、これらのメソッドには、オプションで `Sort` というパラメータが用意されており、これによってソートの抽象化が可能になります:"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr "`Sort` クラスには、列を追加したり、ソート方向を指定したり、nullの優先順位を指定したりするメソッドが豊富に用意されています。"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Simplified queries"
msgstr "シンプルなクエリー"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements\n"
"at the end."
msgstr "通常、HQLのクエリは `from EntityName [where …​] [order by …​]` というように最後にオプションの要素を持つという形式になっています。"

#: _guides/hibernate-reactive-panache.adoc
msgid "If your select query does not start with `from`, `select` or `with`, we support the following additional forms:"
msgstr "選択クエリーが `from`、 `select`、または `with` で始まっていない場合は、次の追加形式がサポートされます。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by ...` は `from EntityName order by ...` に展開されます"

#: _guides/hibernate-reactive-panache.adoc
msgid "`<singleAttribute>` (and single parameter) which will expand to `from EntityName where <singleAttribute> = ?`"
msgstr "<singleAttribute>` (および単一のパラメーター) は `from EntityName where <singleAttribute> = ?` に展開されます"

#: _guides/hibernate-reactive-panache.adoc
msgid "`where <query>` will expand to `from EntityName where <query>`"
msgstr "`where <query>` は `from EntityName where <query>` に展開されます"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` は `from EntityName where <query>` に展開されます"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "更新クエリーが `update` で始まらない場合は、以下の追加の形式をサポートしています:"

#: _guides/hibernate-reactive-panache.adoc
msgid "`from EntityName ...` which will expand to `update EntityName ...`"
msgstr "from EntityName ...` は `update EntityName ...` に展開されます"

#: _guides/hibernate-reactive-panache.adoc
msgid "`set? <singleAttribute>` (and single parameter) which will expand to `update EntityName set <singleAttribute> = ?`"
msgstr "`set? <singleAttribute>` (および単一のパラメーター) は `update EntityName set <singleAttribute> = ?` に展開されます"

#: _guides/hibernate-reactive-panache.adoc
msgid "`set? <update-query>` will expand to `update EntityName set <update-query>`"
msgstr "`set? <update-query>` は `update EntityName set <update-query>` に展開されます"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "削除クエリーが `delete` で始まらない場合は、以下の追加の形式をサポートしています:"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName …​` は `delete from EntityName ...` に展開されます"

#: _guides/hibernate-reactive-panache.adoc
msgid "`<singleAttribute>` (and single parameter) which will expand to `delete from EntityName where <singleAttribute> = ?`"
msgstr "`<singleAttribute>` (および単一のパラメーター) は `delete from EntityName where <singleAttribute> = ?` に展開されます"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` は `delete from EntityName where <query>` に展開されます"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"You can also write your queries in plain\n"
"link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr "また、プレーンな link:{hibernate-orm-docs-url}#hql[HQL] でクエリを記述することもできます："

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Named queries"
msgstr "名前付きクエリー"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "名前付きのクエリーは、その名前の前に「#」文字を付けることで、（簡易）HQLクエリーの代わりに参照することができます。また、名前付きのクエリーは、カウント、更新、削除のクエリーにも使用できます。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Named queries can only be defined inside your Jakarta Persistence entity classes,\n"
"or on one of their super classes."
msgstr "名前付きクエリーは、Jakarta Persistence エンティティークラス内で、またはそのスーパークラスの 1 つでのみ定義できます。"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Query parameters"
msgstr "クエリーパラメーター"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "以下のように、インデックス（1ベース）でクエリーパラメーターを渡すことができます:"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` を使った名前で:"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または、便利なクラス `Parameters` をそのまま使用するか、 `Map` を構築する:"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "すべてのクエリー操作は、インデックス( `Object…​`)または名前付きパラメーター( `Map<String,Object>` または `Parameters`)でパラメータを渡すことができます。"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Query projection"
msgstr "クエリーの射影"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "クエリーの射影は、 `find()` のメソッドが返す `PanacheQuery` オブジェクトに対して `project(Class)` のメソッドで行うことができます。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "これを使って、データベースから返されるフィールドを制限することができます。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n"
"This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide:\n"
"link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr "Hibernateは *DTOプロジェクション* を使用し、プロジェクションクラスからの属性を持つSELECT句を生成します。これは *動的インスタンス化* または *コンストラクタ式* とも呼ばれ、詳細は Hibernate ガイドの link:{hibernate-orm-docs-url}#hql-select-clause[hql select 節] を参照してください。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"The projection class needs to be a valid Java Bean and have a constructor that contains all its attributes, this constructor will be used to\n"
"instantiate the projection DTO instead of using the entity class. This must be the only constructor of the class."
msgstr "射影クラスは、有効な Java Bean であり、すべての属性を含むコンストラクタを持つ必要があります。このコンストラクタは、エンティティクラスを使用する代わりに、射影のDTOをインスタンス化するために使用されます。このクラスは、すべてのクラス属性をパラメータとして持つ一致するコンストラクタを持つ必要があります。"

#: _guides/hibernate-reactive-panache.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するようQuarkusに指示します。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "ここではパブリックフィールドを使用していますが、必要に応じてプライベートフィールドやゲッター/セッターを使用することもできます。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "This constructor will be used by Hibernate, and it must have a matching constructor with all the class attributes as parameters."
msgstr "このコンストラクタはHibernate によって使用されます。このコンストラクタはクラス内の唯一のコンストラクタであり、パラメータとしてクラスのすべての属性を持つ必要があります。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query,\n"
"so the compiler must be configured to store parameter names inside the compiled class.\n"
"This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your pom.xml."
msgstr "`project(Class)` メソッドの実装では、コンストラクタのパラメータ名を使用してクエリーの select 節を構築するため、コンパイルされたクラスの中にパラメータ名を格納するようにコンパイラを設定する必要があります。Quarkus Mavenアーキタイプを使用している場合はデフォルトで有効になっています。使用していない場合はプロパティ `<maven.compiler.parameters>true</maven.compiler.parameters>` を `pom.xml` に追加してください。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "DTO射影のオブジェクトから参照されるエンティティのフィールドがある場合、 `@ProjectedFieldName` アノテーションを使用してSELECT文のパスを提供することができます。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "`ownerName` DTOコンストラクタのパラメータは `owner.name` HQLプロパティから読み込まれます。"

#: _guides/hibernate-reactive-panache.adoc
msgid "In case you want to project an entity in a class with nested classes, you can use the `@NestedProjectedClass` annotation on those nested classes."
msgstr "ネストされたクラスを持つクラスにエンティティーを射影する場合は、それらのネストされたクラスで `@NestedProjectedClass` アノテーションを使用できます。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"This annotation can be used when you want to project `@Embedded` entity or `@ManyToOne`, `@OneToOne` relation.\n"
"It does not support `@OneToMany` or `@ManyToMany` relation."
msgstr ""
"このアノテーションは、 `@Embedded` エンティティーまたは `@ManyToOne`、 `@OneToOne` リレーションを射影する場合に使用できます。\n"
"`@OneToMany` または `@ManyToMany` 関係はサポートされていません。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor\n"
"matching the values returned by the select clause:"
msgstr "また、select句でHQLクエリを指定できます。この場合、射影クラスは、select句が返す値に一致するコンストラクタを持つ必要があります。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Hibernate Reactive will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr "Hibernate Reactive は、このコンストラクタを使用します。クエリが select 節を持つ場合、複数のコンストラクタを持つことが可能です。"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr "HQL `select new` クエリと `.project(Class)` を同時に行うことはできません。どちらかの方法を選択する必要があります。"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "For example, this will fail:"
msgstr "例えば、このような場合、失敗します。"

#: _guides/hibernate-reactive-panache.adoc
msgid "If you need to have multiple constructors in your DTO, you must annotate the constructor intended to generate a SELECT clause with @ProjectedConstructor:"
msgstr ""

#: _guides/hibernate-reactive-panache.adoc
msgid "This will use your annotated constructor to create the query. (`select new PersonName(name) from ...`)"
msgstr ""

#: _guides/hibernate-reactive-panache.adoc
msgid "If a DTO used in a projection has multiple constructors and is not properly annotated, it may lead to *unexpected behavior*."
msgstr ""

#: _guides/hibernate-reactive-panache.adoc
msgid "The constructor resolution process follows this order:"
msgstr ""

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Look for a constructor annotated with `@ProjectedConstructor`\n"
"This is the most explicit and preferred way to indicate which constructor should be used."
msgstr ""

#: _guides/hibernate-reactive-panache.adoc
msgid "Look for parameters annotated with `@ProjectedFieldName`"
msgstr ""

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Use the first non-parameterless constructor\n"
"If no annotations are found."
msgstr ""

#: _guides/hibernate-reactive-panache.adoc
msgid "Fallback to the first constructor it finds, this could lead to multiple problems or inconsistencies."
msgstr ""

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Multiple Persistence Units"
msgstr "複数の永続性ユニット"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "Hibernate Reactive in Quarkus currently does not support multiple persistence units."
msgstr "QuarkusのHibernate Reactiveは現時点では複数の永続化ユニットをサポートしていません。"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Sessions and Transactions"
msgstr "セッションとトランザクション"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"First of all, most of the methods of a Panache entity must be invoked within the scope of a reactive `Mutiny.Session`.\n"
"In some cases, the session is opened automatically on demand.\n"
"For example, if a Panache entity method is invoked in a Jakarta REST resource method in an application that includes the `quarkus-rest` extension.\n"
"For other cases, there are both a declarative and a programmatic way to ensure the session is opened.\n"
"You can annotate a CDI business method that returns `Uni` with the `@WithSession` annotation.\n"
"The method will be intercepted and the returned `Uni` will be triggered within a scope of a reactive session.\n"
"Alternatively, you can use the `Panache.withSession()` method to achieve the same effect."
msgstr ""
"まず、Panache エンティティーのメソッドのほとんどは、リアクティブ `Mutiny.Session` のスコープ内で呼び出す必要があります。\n"
"場合によっては、セッションは要求に応じて自動的に開かれます。\n"
"たとえば、 `quarkus-rest` エクステンションを含むアプリケーションの Jakarta REST リソースメソッドで Panache エンティティーメソッドが呼び出される場合です。\n"
"その他の場合、セッションが開かれていることを確認するための宣言的な方法とプログラム的な方法があります。\n"
"`Uni` を返す CDI ビジネスメソッドに `@WithSession` アノテーションを付けることができます。\n"
"メソッドはインターセプトされ、返された `Uni` はリアクティブセッションのスコープ内でトリガーされます。\n"
"または、 `Panache.withSession()` メソッドを使用して同じ効果を得ることもできます。"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "Note that a Panache entity may not be used from a blocking thread. See also xref:getting-started-reactive.adoc[Getting Started With Reactive] guide that explains the basics of reactive principles in Quarkus."
msgstr "Panache エンティティーはブロッキングスレッドから使用できないことに注意してください。Quarkus のリアクティブ原則の基礎を説明する xref:getting-started-reactive.adoc[リアクティブ入門] ガイドも参照してください。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Also make sure to wrap methods that modify the database or involve multiple queries (e.g. `entity.persist()`) within a transaction.\n"
"You can annotate a CDI business method that returns `Uni` with the `@WithTransaction` annotation.\n"
"The method will be intercepted and the returned `Uni` is triggered within a transaction boundary.\n"
"Alternatively, you can use the `Panache.withTransaction()` method for the same effect."
msgstr ""
"また、データベースを変更するメソッドや複数のクエリー (例: `entity.persist()`) を伴うメソッドをトランザクション内でラップしてください。\n"
"`Uni` を返す CDI ビジネスメソッドに `@WithTransaction` アノテーションを付けることができます。\n"
"メソッドはインターセプトされ、返された `Uni` はトランザクション境界内でトリガーされます。\n"
"または、 `Panache.withTransaction()` メソッドを使用して同じ効果を得ることもできます。"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "You cannot use the `@Transactional` annotation with Hibernate Reactive for your transactions: you must use `@WithTransaction`, and your annotated method must return a `Uni` to be non-blocking."
msgstr "Hibernate Reactive で `@Transactional` アノテーションをトランザクションに使用することはできません。 `@WithTransaction` を使用する必要があります。また、アノテーションが付けられたメソッドが非ブロッキングとなるように `Uni` を返す必要があります。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate Reactive batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.\n"
"This is usually a good thing as it is more efficient.\n"
"But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate Reactive send those changes to the database.\n"
"Remember, this is less efficient so don't abuse it.\n"
"And your transaction still has to be committed."
msgstr ""
"Hibernate Reactive は、エンティティーに加えられた変更をバッチ処理し、トランザクションの終了時またはクエリーの前に変更を送信します (これはフラッシュと呼ばれます)。\n"
"これは通常、より効率的であるため良いことです。\n"
"しかし、楽観的なロックの失敗をチェックしたり、オブジェクト検証をすぐに実行したり、一般的に即時のフィードバックを取得する場合は、 `entity.flush()` を呼び出してフラッシュ操作を強制したり、 `entity.persistAndFlush()` を使用して単一のメソッド呼び出しにすることができます。これにより、Hibernate Reactive がデータベースに変更を送信したときに発生する可能性のある `PersistenceException` をキャッチできます。\n"
"ただし、これは効率が悪いので乱用しないでください。\n"
"また、トランザクションは依然としてコミットされる必要があります。"

#. type: delimited block =
#: _guides/hibernate-reactive-panache.adoc
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "ここでは `PersistenceException` が発生した場合に特定の動作を行えるようにするための flush メソッドの使用例を示します:"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"The `@WithTransaction` annotation will also work for testing.\n"
"This means that changes done during the test will be propagated to the database.\n"
"If you want any changes made to be rolled back at the end of\n"
"the test you can use the `io.quarkus.test.TestReactiveTransaction` annotation.\n"
"This will run the test method in a transaction, but roll it back once the test method is complete to revert any database changes."
msgstr ""
"`@WithTransaction` アノテーションもテストに使用できます。\n"
"これは、テスト中に行われた変更がデータベースに伝播されることを意味します。\n"
"テスト終了時に変更をロールバックする場合は、 `io.quarkus.test.TestReactiveTransaction` アノテーションを使用できます。\n"
"これにより、トランザクション内でテストメソッドが実行されますが、テストメソッドが完了するとロールバックされ、データベースの変更が元に戻ります。"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Lock management"
msgstr "ロック管理"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panacheは `findById(Object, LockModeType)` や `find().withLock(LockModeType)` を使用してエンティティ/リポジトリでデータベースロックを直接サポートします。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "以下の例はアクティブレコードパターンの場合ですが、リポジトリでも同じように使用できます。"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "First: Locking using findById()."
msgstr "1つ目: findById()を使ってロックする。"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Second: Locking in a find()."
msgstr "2つ目：find()でロックする。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be called within a transaction."
msgstr "トランザクションが終了するとロックが解放されるため、ロッククエリーを呼び出すメソッドはトランザクション内で呼び出す必要があることに注意してください。"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Custom IDs"
msgstr "カスタムID"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we\n"
"have you covered."
msgstr "IDは微妙な問題で、誰もがフレームワークに任せることができるわけではありませんが、今回も私たちはカバーします。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then\n"
"you just declare whatever ID you want as a public field:"
msgstr "`PanacheEntity` の代わりに `PanacheEntityBase` を拡張することで独自のID戦略を指定することができます。そのあとに好きなIDをパブリック・フィールドとして宣言するだけです:"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr "リポジトリを使用している場合は `PanacheRepository` の代わりに `PanacheRepositoryBase` を拡張し、IDの型を追加の型パラメーターとして指定することになります:"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Testing reactive Panache entities in a `@QuarkusTest` is slightly more complicated than testing regular Panache entities due to the asynchronous nature of the APIs and the fact that all operations need to run on a Vert.x event loop."
msgstr "`@QuarkusTest` におけるリアクティブPanacheエンティティのテストは、APIの非同期性と、すべての操作がVert.xイベントループ上で実行される必要があるという事実のために、通常のPanacheエンティティのテストよりも若干複雑です。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"The `quarkus-test-vertx` dependency provides the `@io.quarkus.test.vertx.RunOnVertxContext` annotation and the `io.quarkus.test.vertx.UniAsserter` class which are intended precisely for this purpose.\n"
"The usage is described in the xref:hibernate-reactive.adoc#testing[Hibernate Reactive] guide."
msgstr "`quarkus-test-vertx` 依存関係は、まさにこの目的のために `@io.quarkus.test.vertx.RunOnVertxContext` アノテーションと `io.quarkus.test.vertx.UniAsserter` クラスを提供します。使用方法は、 xref:hibernate-reactive.adoc#testing[Hibernate Reactive] ガイドに記載されています。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Moreover, the `quarkus-test-hibernate-reactive-panache` dependency provides the `io.quarkus.test.hibernate.reactive.panache.TransactionalUniAsserter` that can be injected as a method parameter of a test method annotated with `@RunOnVertxContext`.\n"
"The `TransactionalUniAsserter` is a `io.quarkus.test.vertx.UniAsserterInterceptor` that wraps each assert method within a separate reactive transaction."
msgstr ""
"さらに、 `quarkus-test-hibernate-reactive-panache` 依存関係は、 `@RunOnVertxContext` でアノテーションが付けられたテストメソッドのメソッドパラメーターとして注入できる `io.quarkus.test.hibernate.reactive.panache.TransactionalUniAsserter` を提供します。\n"
"`TransactionalUniAsserter` は、各アサートメソッドを個別のリアクティブトランザクション内にラップする `io.quarkus.test.vertx.UniAsserterInterceptor` です。"

#. type: Block title
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "`TransactionalUniAsserter` Example"
msgstr "`TransactionalUniAsserter` 例"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "The first reactive transaction is used to persist the entity."
msgstr "1 つ目のリアクティブトランザクションは、エンティティーを永続化するために使用されます。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "The second reactive transaction is used to count the entities."
msgstr "2 つ目のリアクティブトランザクションは、エンティティーをカウントするために使用されます。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "The third reactive transaction is used to delete all entities."
msgstr "3 つ目のリアクティブトランザクションは、すべてのエンティティーを削除するために使用されます。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Of course, you can also define a custom `UniAsserterInterceptor` to wrap the injected `UniAsserter` and customize the behavior."
msgstr "もちろん、カスタムの `UniAsserterInterceptor` を定義して、注入された `UniAsserter` をラップし、動作をカスタマイズすることもできます。"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Mocking"
msgstr "モック"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Using the active record pattern"
msgstr "アクティブレコードパターンの使用"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr "アクティブレコードパターンを使用している場合、Mockitoは静的メソッドのモックをサポートしていないため、直接使用することはできませんが、 `quarkus-panache-mock` モジュールを使用することで、Mockitoを使用して、あなた自身のメソッドを含む、提供されたすべての静的メソッドをモックすることができます。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Add this dependency to your build file:"
msgstr "この依存関係をビルドファイルに追加してください:"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Given this simple entity:"
msgstr "このシンプルなエンティティ:"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "You can write your mocking test like this:"
msgstr "モック化テストはこのように書くことができます:"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "Make sure the test method is run on the Vert.x event loop."
msgstr "テストメソッドがVert.xのイベントループで実行されるようにします。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "The injected `UniAsserter` argument is used to make assertions."
msgstr "注入された `UniAsserter` 引数はアサーションを行うために使用されます。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr "`verify` と `do*` のメソッドは `Mockito` ではなく `PanacheMock` で呼び出すようにしてください。そうしないとどのモックオブジェクトを渡せばいいのかわからなくなってしまいます。"

#. type: Title ===
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr "リポジトリパターンを使用している場合は、 `quarkus-junit5-mockito` モジュールを使用して、Mockito を直接使用することができます。これにより、ビーンのモッキングが非常に簡単になります。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "And this repository:"
msgstr "そしてこのリポジトリ:"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "How and why we simplify Hibernate Reactive mappings"
msgstr "HibernateのReactiveマッピングを単純化する方法と理由"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"When it comes to writing Hibernate Reactive entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr "HibernateのReactiveエンティティを書くときに、ユーザーが不本意ながらも対処することに慣れてしまった、いくつかの厄介事があります:"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really\n"
"relevant to your model."
msgstr "IDロジックの重複:ほとんどのエンティティにはIDが必要ですが、モデルとはあまり関係がないため、ほとんどの人はIDの設定方法を気にしません。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields,\n"
"then generate getters and setters for those fields, even if they don't actually do anything more than read/write\n"
"the fields."
msgstr "ダサいゲッターとセッター：Javaは言語でプロパティをサポートしていないので、フィールドに対して読み書きを行わなかったとしてもフィールドを作成し、そのフィールドのためにゲッターとセッターを生成しなければなりません。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods\n"
"are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository\n"
"where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're\n"
"writing to set up an injection point before coming back to use it."
msgstr "オブジェクト指向アーキテクチャの通常のオブジェクトでは、ステートとメソッドが同じクラスにないことはあり得ないのに、伝統的なEEパターンでは、エンティティの定義（モデル）とそれに対する操作（DAOやリポジトリ）を分けることが推奨されており、実際にはステートとその操作を不自然に分ける必要があります。さらに、エンティティごとに2つのクラスが必要になり、エンティティの操作を行う必要があるDAOやRepositoryをインジェクションする必要があるため、編集フローが崩れ、書いているコードから抜けてインジェクションポイントを設定してから戻って使用しなければなりません。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr "Hibernateのクエリは非常に強力ですが、一般的な操作には冗長すぎるため、すべての部分が必要ない場合でもクエリを書く必要があります。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our\n"
"model usage."
msgstr "Hibernateは非常に汎用性が高いのですが、モデルの使用量の9割を占めるような些細な操作をしても些細にはなりません。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Panacheでは、これらの問題に対して、定見に基づいたアプローチをとりました:"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "エンティティは `PanacheEntity` を拡張するようにしてください: 自動生成されるIDフィールドがあります。カスタムID戦略が必要な場合は代わりに `PanacheEntityBase` を拡張するとIDを自分で処理することができます。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters\n"
"that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "パブリックフィールドを使ってください。無駄なゲッターとセッターを無くせます。フードの下では、不足しているすべてのゲッターとセッターを生成し、これらのフィールドへのすべてのアクセスを、アクセサ・メソッドを使用するように書き換えます。この方法では、必要なときに _便利な_ アクセサを書くことができ、エンティティ・ユーザーがフィールド・アクセスを使用していても、それが使用されます。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "アクティブレコードパターンの使用: アクティブレコードパターンでは、すべてのエンティティロジックをエンティティクラスのスタティックメソッドに置き、DAOを作りません。エンティティスーパークラスには、非常に便利なスタティックメソッドがたくさん用意されていますし、エンティティクラスに独自のメソッドを追加することもできます。 `Person` ユーザーは、 `Person` と入力するだけで、すべての操作を一か所で完了させることができます。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better\n"
"`Person.find(\"name\", \"stef\")`."
msgstr "`Person.find(\"order by name\")` や `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` 、さらには `Person.find(\"name\", \"stef\")` のように、必要のない部分を書かないようにしましょう。"

#. type: Plain text
#: _guides/hibernate-reactive-panache.adoc
msgid "That's all there is to it: with Panache, Hibernate Reactive has never looked so trim and neat."
msgstr "以上、Panacheを使えば、Hibernate Reactiveがこれほどまでにすっきりするのかということでした。"

#. type: Title ==
#: _guides/hibernate-reactive-panache.adoc
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"Hibernate Reactive with Panache relies on compile-time bytecode enhancements to your entities. If you define your entities in the\n"
"same project where you build your Quarkus application, everything will work fine."
msgstr ""
"Hibernate Reactive with Panache は、コンパイル時のバイトコード拡張によってエンティティーを拡張します。\n"
"Quarkus アプリケーションをビルドするのと同じプロジェクトでエンティティーを定義すれば、すべて正常に動作します。"

#: _guides/hibernate-reactive-panache.adoc
msgid ""
"If the entities come from external projects\n"
"or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr "エンティティーが外部のプロジェクトやジャーから来ている場合は、空の `META-INF/beans.xml` ファイルを追加することで、jarがQuarkusアプリケーションライブラリのように扱われるようにすることができます。"

#: _guides/hibernate-reactive-panache.adoc
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr "これにより、Quarkusは、エンティティが現在のプロジェクトの内部にあるかのようにインデックスを作成し、バイトコード強化をすることができます。"
