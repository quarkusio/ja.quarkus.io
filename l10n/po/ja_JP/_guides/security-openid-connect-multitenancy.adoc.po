msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Using OpenID Connect (OIDC) multitenancy"
msgstr "OpenID Connect (OIDC) マルチテナントの使用"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"This guide demonstrates how your OpenID Connect (OIDC) application can support multitenancy to serve multiple tenants from a single application.\n"
"These tenants can be distinct realms or security domains within the same OIDC provider or even distinct OIDC providers."
msgstr ""
"このガイドでは、OpenID Connect (OIDC) アプリケーションがマルチテナントをサポートして、単一のアプリケーションから複数のテナントにサービスを提供する方法を説明します。\n"
"これらのテナントは、同じ OIDC プロバイダー内の異なるレルムまたはセキュリティードメイン、あるいは異なる OIDC プロバイダーである場合もあります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"Each customer functions as a distinct tenant when serving multiple customers from the same application, such as in a SaaS environment.\n"
"By enabling multitenancy support to your applications, you can support distinct authentication policies for each tenant, even authenticating against different OIDC providers, such as Keycloak and Google."
msgstr ""
"SaaS 環境など、同じアプリケーションから複数の顧客にサービスを提供する場合、各顧客は個別のテナントとして機能します。\n"
"アプリケーションに対してマルチテナンシーサポートを有効にすると、Keycloak や Google などの異なる OIDC プロバイダーに対して認証する場合でも、テナントごとに異なる認証ポリシーをサポートできます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "To authorize a tenant by using Bearer Token Authorization, see the xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication] guide."
msgstr "Bearer Token Authorization を使用してテナントを認可するには、xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) ベアラートークン認証] ガイドを参照してください。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "To authenticate and authorize a tenant by using the OIDC authorization code flow, read the xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow mechanism for protecting web applications] guide."
msgstr "OIDC 認可コードフローを使用してテナントを認証および認可するには、xref:security-oidc-code-flow-authentication.adoc[Web アプリケーションを保護するための OpenID Connect 認可コードフローメカニズム] ガイドを参照してください。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Also, see the xref:security-oidc-configuration-properties-reference.adoc[OpenID Connect (OIDC) configuration properties] reference guide."
msgstr "また、xref:security-oidc-configuration-properties-reference.adoc[OpenID Connect (OIDC) 設定プロパティー] のリファレンスガイドも参照してください。"

#. type: Title ==
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "要件"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "https://stedolan.github.io/jq/[jq tool]"

#. type: Title ==
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャー"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "In this example, we build a very simple application that supports two resource methods:"
msgstr "この例では、次の 2 つのリソースメソッドをサポートする非常にシンプルなアプリケーションをビルドします。"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "`/{tenant}`"
msgstr "`/{tenant}`"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "This resource returns information obtained from the ID token issued by the OIDC provider about the authenticated user and the current tenant."
msgstr "このリソースは、認証されたユーザーと現在のテナントについて、OIDC プロバイダーによって発行された ID トークンから取得した情報を返します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "`/{tenant}/bearer`"
msgstr "`/{tenant}/bearer`"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "This resource returns information obtained from the Access Token issued by the OIDC provider about the authenticated user and the current tenant."
msgstr "このリソースは、認証されたユーザーと現在のテナントについて、OIDC プロバイダーによって発行された Access Token から取得した情報を返します。"

#. type: Title ==
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "For a thorough understanding, we recommend you build the application by following the upcoming step-by-step instructions."
msgstr "完全に理解するために、次の手順に従ってアプリケーションをビルドすることを推奨します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Alternatively, if you prefer to start with the completed example, clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "あるいは、完成した例から始める場合は、Git リポジトリーをクローン (`git clone {quickstarts-clone-url}`) するか、{quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr "ソリューションは、`security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[ディレクトリー]にあります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Creating the Maven project"
msgstr "Maven プロジェクトの作成"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"First, we need a new project.\n"
"Create a new project with the following command:"
msgstr ""
"まず、新しいプロジェクトが必要です。\n"
"以下のコマンドで新規プロジェクトを作成します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "If you already have your Quarkus project configured, add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr "Quarkus プロジェクトがすでに設定されている場合は、プロジェクトベースディレクトリーで次のコマンドを実行して、`oidc` エクステンションをプロジェクトに追加します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "This adds the following to your build file:"
msgstr "これにより、 `pom.xml` ファイルに以下が追加されます:"

#. type: Block title
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ==
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"Start by implementing the `/{tenant}` endpoint.\n"
"As you can see from the source code below, it is just a regular Jakarta REST resource:"
msgstr ""
"まず、`/{tenant}` エンドポイントを実装することから始めます。\n"
"以下のソースコードからわかるように、これは単なる通常の Jakarta REST リソースです。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "To resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in `application.properties`, create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface, which can dynamically resolve tenant configurations:"
msgstr "受信リクエストからテナントを解決し、`application.properties` 内の特定の `quarkus-oidc` テナント設定にマップするには、テナント設定を動的に解決できる `io.quarkus.oidc.TenantConfigResolver` インターフェイスの実装を作成します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"In the preceding implementation, tenants are resolved from the request path.\n"
"If no tenant can be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""
"前述の実装では、テナントはリクエストパスから解決されます。\n"
"テナントを推測できない場合は、デフォルトのテナント設定を使用する必要があることを示すために `null` が返されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"The `tenant-a` application type is `hybrid`; it can accept HTTP bearer tokens if provided.\n"
"Otherwise, it initiates an authorization code flow when authentication is required."
msgstr ""
"`tenant-a` アプリケーションタイプは `hybrid` です。提供されている場合、HTTP ベアラートークンを受け入れることができます。\n"
"それ以外の場合は、認証が必要なときに認可コードフローを開始します。"

#. type: Title ==
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"The first configuration is the default tenant configuration that should be used when the tenant cannot be inferred from the request.\n"
"Be aware that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` to support testing a multitenant application with Dev Services For Keycloak.\n"
"This configuration uses a Keycloak instance to authenticate users."
msgstr ""
"最初の設定は、リクエストからテナントを推測できない場合に使用するデフォルトのテナント設定です。\n"
"%prod` プロファイル接頭辞は、Dev Services For Keycloak を使用したマルチテナントアプリケーションのテストをサポートするために、`quarkus.oidc.auth-server-url` とともに使用される点に注意してください。\n"
"この設定では、Keycloak インスタンスを使用してユーザーを認証します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The second configuration, provided by `TenantConfigResolver`, is used when an incoming request is mapped to the `tenant-a` tenant."
msgstr "`TenantConfigResolver` によって提供される 2 番目の設定は、受信リクエストが `tenant-a` テナントにマップされるときに使用されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr "両方の設定は、異なる `realms` を使用しながら、同じ Keycloak サーバーインスタンスにマップされます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Alternatively, you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr "または、`application.properties` で直接テナント `tenant-a` を設定することもできます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "In that case, also use a custom `TenantConfigResolver` to resolve it:"
msgstr "その場合は、カスタム `TenantConfigResolver` も使用して解決します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"You can define multiple tenants in your configuration file.\n"
"To map them correctly when resolving a tenant from your `TenantResolver` implementation, ensure each has a unique alias."
msgstr ""
"設定ファイルで複数のテナントを定義できます。\n"
"`TenantResolver` 実装からテナントを解決するときにそれらを正しくマップするには、それぞれに一意のエイリアスがあることを確認します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "However, using a static tenant resolution, which involves configuring tenants in `application.properties` and resolving them with `TenantResolver`, does not work for testing endpoints with Dev Services for Keycloak because it does not know how the requests are be mapped to individual tenants, and cannot dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values. Therefore, using `%prod` prefixes with tenant-specific URLs within `application.properties` does not work in both test and development modes."
msgstr "ただし、`application.properties` でテナントを設定し、`TenantResolver` を使用してこれらを解決する静的テナント解決を使用することは、Dev Services for Keycloak を使用したエンドポイントのテストには機能しません。これは、リクエストが個々のテナントにどのようにマッピングされるかがわからず、テナント固有の `quarkus.oidc.<tenant-id>.auth-server-url` の値を動的に提供できないためです。したがって、`application.properties` 内のテナント固有の URL に `%prod` 接頭辞を付けると、テストモードと開発モードの両方で機能しません。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` contains a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant-specific state or session cookie already exists.\n"
"Therefore, when working with multiple OIDC providers, you only need a path-specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr ""
"現在のテナントが OIDC の `web-app` アプリケーションを表す場合、カスタムテナントリゾルバーがすべてのリクエストに対して呼び出されるまでに、現在の `io.vertx.ext.web.RoutingContext` には `tenant-id` 属性が含まれ、テナント固有の状態またはセッション Cookie のいずれかがすでに存在する場合に、コード認証フローとすでに認証されたリクエストを完了します。\n"
"したがって、複数の OIDC プロバイダーを使用する場合、`RoutingContext` に `tenant-id` 属性が設定されていない場合にのみ、パス固有のチェックを行ってテナント ID を解決する必要があります。以下はその例です。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "This is how Quarkus OIDC resolves static custom tenants if no custom `TenantResolver` is registered."
msgstr "これは、カスタム `TenantResolver` が登録されていない場合に、Quarkus OIDC が静的カスタムテナントを解決する方法です。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "A similar technique can be used with `TenantConfigResolver`, where a `tenant-id` provided in the context can return `OidcTenantConfig` already prepared with the previous request."
msgstr "同様の手法を `TenantConfigResolver` でも使用できます。コンテキストで提供される `tenant-id` は、以前のリクエストですでに準備されている `OidcTenantConfig` を返すことができます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you also use Hibernate ORM multitenancy or MongoDB with Panache multitenancy and both tenant ids are the same,\n"
"you can get the tenant id from the `RoutingContext` attribute with `tenant-id`. You can find more information here:"
msgstr ""
"Hibernate ORM マルチテナントまたは MongoDB with Panache マルチテナントも使用しており、両方のテナント ID が同じである場合、\n"
"`RoutingContext` 属性から `tenant-id` を使用してテナント ID を取得できます。詳細は、次の URL を参照してください。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy]"
msgstr "xref:hibernate-orm.adoc#multitenancy[Hibernate ORM マルチテナント]"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy]"
msgstr "xref:mongodb-panache.adoc#multitenancy[Panache マルチテナント機能を備えた MongoDB]"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Starting and configuring the Keycloak server"
msgstr "Keycloak サーバーの起動と設定"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "To start a Keycloak server, you can use Docker and run the following command:"
msgstr "Keycloak サーバーを起動するには、Docker を使用して次のコマンドを実行します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "where `keycloak.version` is set to `26.0.7` or higher."
msgstr "ここで、`keycloak.version` は `26.0.7` 以降に設定されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Access your Keycloak server at http://localhost:8180[localhost:8180]."
msgstr "http://localhost:8180[localhost:8180] で Keycloak サーバーにアクセスします。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"Log in as the `admin` user to access the Keycloak administration console.\n"
"The username and password are both `admin`."
msgstr ""
"Keycloak 管理コンソールにアクセスするには、`admin` ユーザーとしてログインします。\n"
"ユーザー名とパスワードは両方とも `admin` です。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Now, import the realms for the two tenants:"
msgstr "次に、2 つのテナントのレルムをインポートします。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm."
msgstr "link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] をインポートして、デフォルトのレルムを作成します。"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr "link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] をインポートし、テナント `tenant-a` のレルムを作成します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "For more information, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr "詳細は、https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[新規レルムの作成] 方法に関する Keycloak ドキュメントを参照してください。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Running and using the application"
msgstr "アプリケーションの実行と使用"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Running in developer mode"
msgstr "開発者モードで実行"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "To run the microservice in dev mode, use:"
msgstr "マイクロサービスを dev モードで実行する場合、次を実行して下さい:"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Running in JVM mode"
msgstr "JVM モードでの実行"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "After exploring the application in dev mode, you can run it as a standard Java application."
msgstr "開発モードでアプリケーションを試した後、標準の Java アプリケーションとして実行できます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "First, compile it:"
msgstr "まず、コンパイルします:"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "Then run it:"
msgstr "次に、それを実行します:"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Running in native mode"
msgstr "ネイティブモードでの実行"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "This same demo can be compiled into native code; no modifications are required."
msgstr "この同じデモはネイティブコードにコンパイルできます。変更は必要ありません。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resources."
msgstr ""
"これは、生成されたバイナリーにランタイムテクノロジーが含まれ、\n"
"最小限のリソースで実行するように最適化されているため、\n"
"実稼働環境に JVM をインストールする必要がなくなることを意味します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"Compilation takes a bit longer, so this step is turned off by default;\n"
"let's build again by enabling the native build:"
msgstr ""
"コンパイルには少し時間がかかるため、この手順はデフォルトでオフになっています。\n"
"ネイティブビルドを有効にして再度ビルドしてみましょう。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "After a little while, you can run this binary directly:"
msgstr "しばらくすると、このバイナリーを直接実行できるようになります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Test the application"
msgstr "アプリケーションのテスト"

#. type: Title ===
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Use Dev Services for Keycloak"
msgstr "Dev Services for Keycloakの使用"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"Dev Services for Keycloak launches and initializes a test container: it imports configured realms and sets a base Keycloak URL for the `CustomTenantResolver` to calculate a realm-specific URL."
msgstr ""
"Keycloak に対するインテグレーションテストには、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] が推奨されます。\n"
"Dev Services for Keycloak は、テストコンテナーを起動して初期化します。設定されたレルムをインポートし、`CustomTenantResolver` のベース Keycloak URL を設定して、レルム固有の URL を計算します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "First, add the following dependencies:"
msgstr "まず、次の依存関係を追加します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.\n"
"`HtmlUnit` tests the `/{tenant}` endpoint and the authorization code flow."
msgstr ""
"`quarkus-test-keycloak-server` は、レルム固有のアクセストークンを取得するためのユーティリティクラス `io.quarkus.test.keycloak.client.KeycloakTestClient` を提供します。これは、ベアラアクセストークンを想定する `/{tenant}/bearer` エンドポイントのテストに `RestAssured` と共に使用できます。\n"
"`HtmlUnit` は、`/{tenant}` エンドポイントと認可コードフローをテストします。"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "Next, configure the required realms:"
msgstr "次に、必要なレルムを設定します:"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Finally, write your test, which runs in JVM mode:"
msgstr "最後に、JVM モードで実行されるテストを記述します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "In native mode:"
msgstr "ネイティブモードの場合: "

#: _guides/security-openid-connect-multitenancy.adoc
msgid "For more information about how it is initialized and configured, see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]."
msgstr "初期化および設定方法の詳細は、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] を参照してください。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Use the browser"
msgstr "ブラウザーの使用"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "To test the application, open your browser and access the following URL:"
msgstr "アプリケーションの動作確認は、ブラウザを起動して以下のURLにアクセスしてください:"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr "http://localhost:8080/default[http://localhost:8080/default]"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"If everything works as expected, you are redirected to the Keycloak server to authenticate.\n"
"Be aware that the requested path defines a `default` tenant, which we don't have mapped in the configuration file.\n"
"In this case, the default configuration is used."
msgstr ""
"すべてが期待どおりに動作する場合、認証のために Keycloak サーバーにリダイレクトされます。\n"
"要求されたパスは、設定ファイルでマッピングされていない `default` テナントを定義していることに注意してください。\n"
"この場合、デフォルトの設定が使用されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "To authenticate to the application, enter the following credentials in the Keycloak login page:"
msgstr "アプリケーションを認証するには、Keycloak ログインページで次の認証情報を入力します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Username: `alice`"
msgstr "ユーザー名: `alice`"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Password: `alice`"
msgstr "パスわ=ド: `alice`"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "After clicking the *Login* button, you are redirected back to the application."
msgstr "*Login* ボタンをクリックすると、アプリケーションにリダイレクトされます。"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "If you try now to access the application at the following URL:"
msgstr "次の URL でアプリケーションにアクセスを試みます。"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"You are redirected again to the Keycloak login page.\n"
"However, this time, you are going to authenticate by using a different realm."
msgstr ""
"Keycloak ログインページに再度リダイレクトされます。\n"
"ただし、今回は別のレルムを使用して認証します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"In both cases, the landing page shows the user's name and email if the user is successfully authenticated.\n"
"Although `alice` exists in both tenants, the application treats them as distinct users in separate realms."
msgstr ""
"どちらの場合も、ユーザーが正常に認証されると、ランディングページにユーザーの名前とメールアドレスが表示されます。\n"
"`alice` は両方のテナントに存在しますが、アプリケーションはそれらを別々のレルム内の別個のユーザーとして扱います。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Tenant resolution"
msgstr "テナントの解決"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Tenant resolution order"
msgstr "テナント解決の順序"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "OIDC tenants are resolved in the following order:"
msgstr "OIDC テナントは、以下の順序で解決されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "`io.quarkus.oidc.Tenant` annotation is checked first if the proactive authentication is disabled."
msgstr "プロアクティブ認証が無効になっている場合は、最初に `io.quarkus.oidc.Tenant` アノテーションがチェックされます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Dynamic tenant resolution using a custom `TenantConfigResolver`."
msgstr "カスタム `TenantConfigResolver` を使用した動的なテナント解決。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Static tenant resolution using one of these options: custom `TenantResolver`, configured tenant paths, and defaulting to the last request path segment as a tenant id."
msgstr "静的テナント解決は、カスタム `TenantResolver`、設定されたテナントパス、およびテナント ID として最後のリクエストパスセグメントをデフォルト設定するオプションのいずれかを使用します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Finally, the default OIDC tenant is selected if a tenant id has not been resolved after the preceding steps."
msgstr "上記手順の後にテナント ID が解決されていない場合は、最後にデフォルトの OIDC テナントが選択されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "See the following sections for more information:"
msgstr "詳細は、以下のセクションを参照してください。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "<<annotations-tenant-resolver>>"
msgstr "<<annotations-tenant-resolver>>"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "<<tenant-config-resolver>>"
msgstr "<<tenant-config-resolver>>"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "<<static-tenant-resolution>>"
msgstr "<<static-tenant-resolution>>"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Additionally, for the OIDC `web-app` applications, the state and session cookies also provide a hint about the tenant resolved with one of the above mentioned options at the time when the authorization code flow started. See the <<tenant-resolution-for-web-app>> section for more information."
msgstr "さらに、OIDC `web-app`アプリケーションの場合、状態とセッションの Cookie は、認可コードフローが開始された時点で上記のオプションのいずれかで解決されたテナントに関するヒントも提供します。詳細は、<<tenant-resolution-for-web-app>> セクションを参照してください。"

#. type: Title ===
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Resolve with annotations"
msgstr "アノテーションで解決する"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "You can use the `io.quarkus.oidc.Tenant` annotation for resolving the tenant identifiers as an alternative to using `io.quarkus.oidc.TenantResolver`."
msgstr "`io.quarkus.oidc.TenantResolver` を使用する代わりに、`io.quarkus.oidc.Tenant` アノテーションを使用してテナント識別子を解決できます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work.\n"
"For more information, see the xref:security-proactive-authentication.adoc[Proactive authentication] guide."
msgstr ""
"これを機能させるには、プロアクティブ HTTP 認証を無効にする必要があります (`quarkus.http.auth.proactive=false`)。\n"
"詳細は、xref:security-proactive-authentication.adoc[プロアクティブ認証] ガイドを参照してください。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"Assuming your application supports two OIDC tenants, the `hr` and default tenants, all resource methods and classes carrying `@Tenant(\"hr\")` are authenticated by using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`.\n"
"In contrast, all other classes and methods are still authenticated by using the default OIDC provider."
msgstr ""
"アプリケーションが 2 つの OIDC テナント (`hr` テナントとデフォルトテナント) をサポートしていると仮定すると、`@Tenant(\"hr\")` を持つすべてのリソースメソッドとクラスは、`quarkus.oidc.hr.auth-server-url` によって設定された OIDC プロバイダーを使用して認証されます。\n"
"対照的に、他のすべてのクラスとメソッドは、引き続きデフォルトの OIDC プロバイダーを使用して認証されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The `io.quarkus.oidc.Tenant` annotation must be placed on either the resource class or resource method."
msgstr "`io.quarkus.oidc.Tenant` アノテーションは、リソースクラスまたはリソースメソッドのいずれかに配置する必要があります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "In the example above, authentication of the `sayHello` endpoint is enforced with the `@Authenticated` annotation."
msgstr "上記の例では、`sayHello` エンドポイントの認証が `@Authenticated` アノテーションによって適用されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"Alternatively, if you use an the xref:security-authorize-web-endpoints-reference.adoc#authorization-using-configuration[HTTP Security policy]\n"
"to secure the endpoint, then, for the `@Tenant` annotation be effective, you must delay this policy's permission check as shown in the following example:"
msgstr ""
"または、xref:security-authorize-web-endpoints-reference.adoc#authorization-using-configuration[HTTP セキュリティーポリシー] を使用する場合\n"
"エンドポイントを保護するには、`@Tenant` アノテーションを有効にするために、次の例に示すように、このポリシーの権限チェックを遅延する必要があります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Tell Quarkus to run the HTTP permission check after the tenant has been selected with the `@Tenant` annotation."
msgstr "`@Tenant` アノテーションを使用してテナントを選択した後、Quarkus に HTTP 権限チェックを実行するように指示します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"The `io.quarkus.oidc.Tenant` annotation can be used to select tenant for a WebSockets Next server endpoint.\n"
"The annotation must be placed on the endpoint class, because the `SecurityIdentity` is created before the HTTP connection is upgraded to a WebSocket connection.\n"
"For more information about the HTTP upgrade security, see the xref:websockets-next-reference.adoc#secure-http-upgrade[Secure HTTP upgrade] section of the Quarkus \"WebSockets Next reference\" guide."
msgstr ""
"`io.quarkus.oidc.Tenant` アノテーションを使用して、WebSockets Next サーバー・エンドポイントのテナントを選択できます。 \n"
"`SecurityIdentity` は、HTTP 接続が WebSocket 接続にアップグレードされる前に作成されるため、アノテーションはエンドポイ ントクラスに配置する必要があります。\n"
"HTTP アップグレードのセキュリティの詳細については、Quarkus \"WebSockets Next reference\" ガイドの xref:websockets-next-reference.adoc#secure-http-upgrade[Secure HTTP upgrade] のセクションを参照してください。"

#. type: Title ==
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Dynamic tenant configuration resolution"
msgstr "動的なテナント設定の解決"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n"
"entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr ""
"サポートするさまざまなテナントに対して、より動的な設定が必要で、設定ファイルに複数のエントリーを入れたくない場合は、\n"
"`io.quarkus.oidc.TenantConfigResolver` を利用できます。"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr "このインターフェイスを使用すると、実行時にテナント設定を動的に作成することができます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"The `OidcTenantConfig` returned by this method is the same one used to parse the `oidc` namespace configuration from the `application.properties`.\n"
"You can populate it by using any settings supported by the `quarkus-oidc` extension."
msgstr ""
"このメソッドから返される `OidcTenantConfig` は、`application.properties` から `oidc` namespace 設定を解析するために使用されるものと同じです。\n"
"`quarkus-oidc` エクステンションでサポートされている任意の設定を使用してデータを入力できます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "If the dynamic tenant resolver returns `null`, a <<static-tenant-resolution>> is attempted next."
msgstr "動的テナントリゾルバーが `null` を返す場合、次に <<static-tenant-resolution>> が試行されます。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Update resolved dynamic tenant configuration"
msgstr "解決された動的テナント設定の更新"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"It may be necessary to update the already resolved tenant configuration.\n"
"For example, a client secret may have to be updated following a client secret update in the registered OIDC application."
msgstr "すでに解決済みのテナント構成を更新する必要がある場合があります。例えば、登録されているOIDCアプリケーションのクライアントシークレットの更新後に、クライアントシークレットを更新する必要がある場合があります。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To update the configuration, use `OidcTenantConfigBuilder` to create a new instance of `OidcTenantConfig` and modify it as required before returning it:"
msgstr "コンフィギュレーションを更新するには、 `OidcTenantConfigBuilder` を使用して `OidcTenantConfig` の新しいインスタンスを作成し、必要に応じてそれを変更してから返します："

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Use `io.quarkus.oidc.runtime.TenantConfigBean` to get the already resolved tenant configuration. Alternatively, you can use the tenant `OidcTenantConfig` cached in your resolver."
msgstr "解決済みのテナント構成を取得するには、 `io.quarkus.oidc.runtime.TenantConfigBean` を使用します。あるいは、リゾルバにキャッシュされているテナント `OidcTenantConfig` を使用することもできます。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You may want to check if this configuration has already been updated, to avoid multiple redundant updates, for example, due to multliple redirects."
msgstr "この設定が既に更新されているかどうかをチェックすることで、 例えば複数のリダイレクトによる冗長な更新を避けることができます。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Use the resolved configuration to create a builder and update it as required."
msgstr "解決された設定を使用してビルダーを作成し、必要に応じて更新します。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Create an initial configuration if no configuration already exists."
msgstr "コンフィギュレーションがまだ存在しない場合は、初期コンフィギュレーションを作成します。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This is all you have to do update the already resolved dynamic tenantr configuration, without having to reconnect to the provider."
msgstr "これだけで、プロバイダに再接続することなく、すでに解決済みのダイナミックtenanr設定を更新することができます。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If reconnecting is necessary, for example, the `UserInfo` endpoint address may have changed for the tenant to rediscover it,\n"
"then simply set a `RoutingContext` `replace-tenant-configuration-context` property to `true`:"
msgstr "再接続が必要な場合、例えば、 `UserInfo` エンドポイントアドレスが変更され、テナントがそれを再発見する必要がある場合は、 `RoutingContext` `replace-tenant-configuration-context` プロパティを `true` に設定するだけです："

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Replace the resolved tenant configuration and re-connect to the provider"
msgstr "解決されたテナント構成を置き換え、プロバイダに再接続します。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Finally, if you decide to update the resoved configuration while the existing OIDC session is still active, you may to have the session cookie removed and the user re-authenticated to align with the latest tenant configuration requirements. Set a `RoutingContext` `remove-session-cookie` property to `true` if it is necessary:"
msgstr "最後に、既存の OIDC セッションがまだアクティブである間に、再認証された構成を更新することを決定した場合、最新のテナント構成要件に合わせるために、セッション Cookie を削除し、ユーザーを再認証させることができます。必要であれば、 `RoutingContext` `remove-session-cookie` プロパティを `true` に設定してください："

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Update the tenant configuration, remove the session cookie and triger the user re-authentication. If possible, prefer to get the user log-out first, instead of triggering the re-authentication at the tenant resolution time."
msgstr "テナント構成を更新し、セッションCookieを削除して、ユーザーの再認証をトリガーします。可能であれば、テナント解決時に再認証をトリガするのではなく、最初にユーザのログアウトを取得することをお勧めします。"

#. type: Title ==
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Static tenant configuration resolution"
msgstr "静的テナント設定の解決"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"When you set multiple tenant configurations in the `application.properties` file, you only need to specify how the tenant identifier gets resolved.\n"
"To configure the resolution of the tenant identifier, use one of the following options:"
msgstr ""
"`application.properties` ファイルで複数のテナント設定を行う場合は、テナント識別子の解決方法を指定するだけで済みます。\n"
"テナント識別子の解決を設定するには、次のいずれかのオプションを使用します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "<<tenant-resolver>>"
msgstr "<<tenant-resolver>>"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "<<configure-tenant-paths>>"
msgstr "<<configure-tenant-paths>>"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "<<default-tenant-resolver>>"
msgstr "<<default-tenant-resolver>>"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "<<issuer-based-tenant-resolver>>"
msgstr "<<issuer-based-tenant-resolver>>"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"These tenant resolution options are tried in the order they are listed until the tenant id gets resolved.\n"
"If the tenant id remains unresolved (`null`), the default (unnamed) tenant configuration is selected."
msgstr ""
"これらのテナント解決オプションは、テナント ID が解決されるまで、リストされている順序で試行されます。\n"
"テナント ID が未解決のまま (`null`) の場合、デフォルト (名前なし) のテナント設定が選択されます。"

#. type: Title ===
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "Resolve with `TenantResolver`"
msgstr "`TenantResolver` で解決する"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "The following `application.properties` example shows how you can resolve the tenant identifier of two tenants named `a` and `b` by using the `TenantResolver` method:"
msgstr "次の `application.properties` の例は、`TenantResolver` メソッドを使用して、`a` および `b` という名前の 2 つのテナントのテナント ID を解決する方法を示しています。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "You can return the tenant id of either `a` or `b` from `io.quarkus.oidc.TenantResolver`:"
msgstr "`io.quarkus.oidc.TenantResolver` から `a` または `b` のテナント ID を返すことができます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "In this example, the value of the last request path segment is a tenant id, but if required, you can implement a more complex tenant identifier resolution logic."
msgstr "この例では、最後のリクエストパスセグメントの値はテナント ID ですが、必要に応じて、より複雑なテナント ID 解決ロジックを実装できます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Configure tenant paths"
msgstr "テナントパスの設定"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"You can use the `quarkus.oidc.tenant-paths` configuration property for resolving the tenant identifier as an alternative to using `io.quarkus.oidc.TenantResolver`.\n"
"Here is how you can select the `hr` tenant for the `sayHello` endpoint of the `HelloResource` resource used in the previous example:"
msgstr ""
"`io.quarkus.oidc.TenantResolver` を使用する代わりに、`quarkus.oidc.tenant-paths` 設定プロパティーを使用してテナント識別子を解決することができます。\n"
"前の例で使用した `HelloResource` リソースの `sayHello` エンドポイントに `hr` テナントを選択する方法は次のとおりです。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Same path-matching rules apply as for the `quarkus.http.auth.permission.authenticated.paths=/api/hello` configuration property from the previous example."
msgstr "前の例の `quarkus.http.auth.permission.authenticated.paths=/api/hello` 設定プロパティーと同じパス一致ルールが適用されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The wildcard placed at the end of the path represents any number of path segments. However the path is less specific than the `/api/hello`, therefore the `hr` tenant will be used to secure the `sayHello` endpoint."
msgstr "パスの末尾に置かれたワイルドカードは、任意の数のパスセグメントを表します。ただし、パスは `/api/hello` よりも具体的ではないため、`sayHello` エンドポイントを保護するために `hr` テナントが使用されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The wildcard in the `/*/hello` represents exactly one path segment. Nevertheless, the wildcard is less specific than the `api`, therefore the `hr` tenant will be used."
msgstr "`/*/hello` のワイルドカードは、1 つのパスセグメントのみを表します。ただし、ワイルドカードは `api` ほど具体的ではないため、`hr` テナントが使用されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Path-matching mechanism works exactly same as in the xref:security-authorize-web-endpoints-reference.adoc#authorization-using-configuration[Authorization using configuration]."
msgstr "パス一致メカニズムは、xref:security-authorize-web-endpoints-reference.adoc#authorization-using-configuration[設定を使用した認可] とまったく同じように動作します。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Use request path segments to find tenant id"
msgstr "リクエスト・パス・セグメントを使用してテナント ID を検索します。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in one of the path segments of the request path."
msgstr "テナント識別子のデフォルトの解決は規約に基づいており、認証リクエストは、リクエストパスのパスセグメントの1つにテナント識別子を含める必要があります。"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "The following `application.properties` example shows how you can configure two tenants named `google` and `github`:"
msgstr "次の `application.properties` の例は、`google` と `github` という名前の 2 つのテナントを設定する方法を示しています。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"In the provided example, both tenants configure OIDC `web-app` applications to use an authorization code flow to authenticate users and require session cookies to be generated after authentication.\n"
"After Google or GitHub authenticates the current user, the user gets returned to the `/signed-in` area for authenticated users, such as a secured resource path on the JAX-RS endpoint."
msgstr ""
"提供された例では、両方のテナントが OIDC `web-app` アプリケーションを設定して、認可コードフローを使用してユーザーを認証し、認証後にセッション Cookie を生成することを要求します。\n"
"Google または GitHub が現在のユーザーを認証すると、ユーザーは、JAX-RS エンドポイント上のセキュアなリソースパスなど、認証されたユーザーの `/signed-in` 領域に戻されます。"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "Finally, to complete the default tenant resolution, set the following configuration property:"
msgstr "最後に、デフォルトのテナント解決を完了するには、次の設定プロパティーを設定します。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific `/google` or `/github` JAX-RS resource paths."
msgstr "エンドポイントが `http://localhost:8080` で実行されている場合、ユーザがどちらかにログインするための UI オプションを提供することもできます。 `http://localhost:8080/google` または `http://localhost:8080/github` `/google` `/github` にログインするための UI オプションを提供することもできます。"

#: _guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Tenant identifiers are also recorded in the session cookie names after the authentication is completed.\n"
"Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL."
msgstr "テナント識別子は、認証完了後にセッションクッキー名にも記録されます。したがって、認証されたユーザーは、 `google` または `github` のパス値をセキュリティで保護された URL に含めることなく、セキュリティで保護されたアプリケーション領域にアクセスできます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"Default resolution can also work for Bearer token authentication.\n"
"Still, it might be less practical because a tenant identifier must always be set as the last path segment value."
msgstr ""
"デフォルトの解決は、ベアラートークン認証にも機能します。\n"
"ただし、テナント識別子は常に最後のパスセグメント値として設定する必要があるため、あまり実用的ではない可能性があります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Resolve tenants with a token issuer claim"
msgstr "トークン issuer のクレームでテナントを解決する"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"OIDC tenants which support Bearer token authentication can be resolved using the access token's issuer.\n"
"The following conditions must be met for the issuer-based resolution to work:"
msgstr ""
"ベアラートークン認証をサポートする OIDC テナントは、アクセストークンの issuer を使用して解決できます。\n"
"issuer ベースの解決が機能するには、次の条件を満たす必要があります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The access token must be in the JWT format and contain an issuer (`iss`) token claim."
msgstr "アクセストークンが JWT 形式で、issuer (`iss`) トークン要求を含んでいる必要があります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Only OIDC tenants with the application type `service` or `hybrid` are considered. These tenants must have a token issuer discovered or configured."
msgstr "アプリケーションタイプが `service` または `hybrid` である OIDC テナントのみが考慮されます。これらのテナントでは、トークン issuer が検出または設定されている必要があります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The issuer-based resolution is enabled with the `quarkus.oidc.resolve-tenants-with-issuer` property. For example:"
msgstr "issuer ベースの解決は、`quarkus.oidc.resolve-tenants-with-issuer` プロパティーで有効になります。例: "

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Tenants `tenant-a` and `tenant-b` are resolved using a JWT access token's issuer `iss` claim value."
msgstr "テナント `tenant-a` と `tenant-b` は、JWT アクセストークンの issuer `iss` クレーム値を使用して解決されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Tenant `tenant-a` discovers the `issuer` from the OIDC provider's well-known configuration endpoint."
msgstr "テナント `tenant-a` は、OIDC プロバイダーの既知の設定エンドポイントから `issuer` を検出します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Tenant `tenant-b` configures the `issuer` because its OIDC provider does not support the discovery."
msgstr "テナント `tenant-b` は、OIDC プロバイダーが検出をサポートしていないため、`issuer` を設定します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Restricting OIDC request and response filters to specific tenants"
msgstr ""

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Both the `io.quarkus.oidc.common.OidcRequestFilter` and the `io.quarkus.oidc.common.OidcResponseFilter` filters can be restricted to specific tenants like in the example below:"
msgstr ""

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Restrict the `CustomOidcRequestFilter` filter to OIDC tenants `tenant-one` and `tenant-two`."
msgstr ""

#: _guides/security-openid-connect-multitenancy.adoc
msgid "An OIDC response filter can be restricted to the specific OIDC endpoint or endpoints with the `quarkus.oidc.common.OidcEndpoint` annotation."
msgstr ""

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Tenant resolution for OIDC web-app applications"
msgstr "OIDC web-app アプリケーションのテナント解決"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Tenant resolution for the OIDC `web-app` applications must be done at least 3 times during an authorization code flow, when the OIDC tenant-specific configuration affects how each of the following steps is run."
msgstr "OIDC `web-app` アプリケーションのテナント解決は、OIDC テナント固有の設定が次の各手順の実行方法に影響する場合、認可コードフロー中に少なくとも 3 回実行する必要があります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Step 1: Unauthenticated user accesses an endpoint and is redirected to OIDC provider"
msgstr "手順 1: 認証されていないユーザーがエンドポイントにアクセスし、OIDC プロバイダーにリダイレクトされます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "When an unauthenticated user accesses a secured path, the user is redirected to the OIDC provider to authenticate and the tenant configuration is used to build the redirect URI."
msgstr "認証されていないユーザーがセキュアなパスにアクセスすると、ユーザーは認証のために OIDC プロバイダーにリダイレクトされ、テナント設定を使用してリダイレクト URI が構築されます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "All the static and dynamic tenant resolution options listed in the <<static-tenant-resolution>> and <<tenant-config-resolver>> sections can be used to resolve a tenant."
msgstr "<<static-tenant-resolution>> と <<tenant-config-resolver>> セクションに記載されているすべての静的および動的テナント解決オプションを使用して、テナントを解決できます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Step 2: The user is redirected back to the endpoint"
msgstr "手順 2: ユーザーはエンドポイントにリダイレクトされます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "After the provider authentication, the user is redirected back to the Quarkus endpoint and the tenant configuration is used to complete the authorization code flow."
msgstr "プロバイダー認証後、ユーザーは Quarkus エンドポイントにリダイレクトされ、テナント設定を使用して認可コードフローが完了します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "All the static and dynamic tenant resolution options listed in the <<static-tenant-resolution>> and <<tenant-config-resolver>> sections can be used to resolve a tenant. Before the tenant resolution begins, the authorization code flow `state cookie` is used to set the already resolved tenant configuration id as a RoutingContext `tenant-id` attribute: both custom dynamic `TenantConfigResolver` and static `TenantResolver` tenant resolvers can check it."
msgstr "静的および動的テナント解決オプションはすべて、<<static-tenant-resolution>> に記載されています。また、<<tenant-config-resolver>> セクションを使用して、テナントを解決できます。テナント解決が始まる前に、認可コードフローの `state cookie` を使用して、すでに解決されたテナント設定 ID を RoutingContext の `tenant-id` 属性として設定します。カスタムの動的 `TenantConfigResolver` テナントリゾルバーと静的 `TenantResolver` テナントリゾルバーの両方でこれを確認できます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Step 3: Authenticated user accesses the secured path using the session cookie"
msgstr "ステップ 3: 認証されたユーザーがセッション Cookie を使用して保護されたパスにアクセスする"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The tenant configuration determines how the session cookie is verified and refreshed. Before the tenant resolution begins, the authorization code flow `session cookie` is used to set the already resolved tenant configuration id as a RoutingContext `tenant-id` attribute: both custom dynamic `TenantConfigResolver` and static `TenantResolver` tenant resolvers can check it."
msgstr "テナント設定によって、セッション Cookie の検証方法と更新方法が決まります。テナント解決が始まる前に、認可コードフロー `session cookie` を使用して、すでに解決されたテナント設定 ID を RoutingContext `tenant-id` 属性として設定します。カスタム動的 `TenantConfigResolver` テナントリゾルバーと静的 `TenantResolver` テナントリゾルバーの両方がこれを確認できます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "For example, here is how a custom `TenantConfigResolver` can avoid creating the already resolved tenant configuration, that may otherwise require blocking reads from the database or other remote sources:"
msgstr "たとえば、カスタム `TenantConfigResolver` が、すでに解決されているテナント設定の作成を回避する方法は以下に示すとおりです。この作成を回避しない場合は、データベースやその他のリモートソースからの読み取りをブロックする必要がある可能性があります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Let Quarkus use the already resolved tenant configuration if it has been resolved earlier."
msgstr "以前に解決されている場合は、すでに解決されたテナント設定を Quarkus が使用するようにします。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Check the request path to create tenant configurations."
msgstr "テナント設定を作成するためのリクエストパスを確認します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The default configuration may look like this:"
msgstr "デフォルトの設定は次のようになります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The preceding example assumes that the `tenant-a`, `tenant-b` and default tenants are all used to protect the same endpoint paths. In other words, after the user has authenticated with the `tenant-a` configuration, this user will not be able to choose to authenticate with the `tenant-b` or default configuration before this user logs out and has a session cookie cleared or expired."
msgstr "上記の例では、`tenant-a`、`tenant-b`、およびデフォルトのテナントがすべて同じエンドポイントパスを保護するために使用されていることを前提としています。つまり、ユーザーが `tenant-a` 設定で認証された後、このユーザーはログアウトしてセッション Cookie がクリアされるか期限切れになるまで、`tenant-b` またはデフォルトの設定で認証することを選択できません。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"The situation where multiple OIDC `web-app` tenants protect the tenant-specific paths is less typical and also requires an extra care.\n"
"When multiple OIDC `web-app` tenants such as `tenant-a`, `tenant-b` and default tenants are used to control access to the tenant specific paths, the users authenticated with one OIDC provider must not be able to access the paths requiring an authentication with another provider, otherwise the results can be unpredictable, most likely causing unexpected authentication failures.\n"
"For example, if the `tenant-a` authentication requires a Keycloak authentication and the `tenant-b` authentication requires an Auth0 authentication, then, if the `tenant-a` authenticated user attempts to access a path secured by the `tenant-b` configuration, then the session cookie will not be verified, since the Auth0 public verification keys can not be used to verify the tokens signed by Keycloak.\n"
"An easy, recommended way to avoid multiple `web-app` tenants conflicting with each other is to set the tenant specific session path as shown in the following example:"
msgstr ""
"複数の OIDC `web-app` テナントがテナント固有のパスを保護する状況はあまり一般的ではなく、特別な注意も必要です。\n"
"`tenant-a`、`tenant-b`、およびデフォルトテナントなどの複数の OIDC `web-app` テナントを使用してテナント固有のパスへのアクセスを制御する場合、1 つの OIDC プロバイダーで認証されたユーザーは、別のプロバイダーによる認証が必要なパスにアクセスできません。アクセスできてしまうと、結果が予測不可能になり、予期しない認証エラーが発生する可能性が高くなります。\n"
"たとえば、`tenant-a` 認証に Keycloak 認証が必要で、`tenant-b` 認証に Auth0 認証が必要な場合、`tenant-a` で認証済みユーザーが `tenant-b` 設定で保護されたパスにアクセスしようとすると、Auth0 公開検証キーを使用して Keycloak によって署名されたトークンを検証できないため、セッション Cookie は検証されません。\n"
"複数の `web-app` テナントが互いに競合するのを回避するための簡単で推奨される方法は、次の例に示すように、テナント固有のセッションパスを設定することです。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Set the tenant-specific cookie paths which makes sure the session cookie is only visible to the tenant which created it."
msgstr "テナント固有の Cookie パスを設定し、セッション Cookie がそれを作成したテナントにのみ表示されるようにします。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The default tenant configuration should be adjusted like this:"
msgstr "デフォルトのテナント設定は、次のように調整する必要があります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid ""
"Having the same session cookie path when multiple OIDC `web-app` tenants protect the tenant-specific paths is not recommended and should be avoided\n"
"as it requires even more care from the custom resolvers, for example:"
msgstr ""
"複数の OIDC `web-app` テナントがテナント固有のパスを保護するときに同じセッション Cookie パスを持つことは推奨されず、避ける必要があります。\n"
"これは、カスタムリゾルバーがさらに注意する必要があるためです。例: "

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Let Quarkus use the already resolved tenant configuration if the already resolved tenant is expected for the current path."
msgstr "現在のパスに対してすでに解決されたテナントが予想される場合は、Quarkus がすでに解決されたテナント設定を使用するようにします。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Remove the `tenant-id` attribute if the already resolved tenant configuration is not expected for the current path."
msgstr "すでに解決されたテナント設定が現在のパスに対して予想されていない場合は、`tenant-id` 属性を削除します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Use the default tenant for all other paths. It is equivalent to removing the `tenant-id` attribute."
msgstr "他のすべてのパスにはデフォルトのテナントを使用します。これは、`tenant-id` 属性を削除するのと同じです。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Disabling tenant configurations"
msgstr "テナント設定を無効にする"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations might return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr "現在のリクエストからテナントを推測できず、デフォルトのテナント設定へのフォールバックが必要な場合、カスタム `TenantResolver` および `TenantConfigResolver` 実装は、`null` を返すことがあります。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "If you expect the custom resolvers always to resolve a tenant, you do not need to configure the default tenant resolution."
msgstr "カスタムリゾルバーが常にテナントを解決することを期待する場合は、デフォルトのテナント解決を設定する必要はありません。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "To turn off the default tenant configuration, set  `quarkus.oidc.tenant-enabled=false`."
msgstr "デフォルトのテナント設定をオフにするには、`quarkus.oidc.tenant-enabled=false` を設定します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The default tenant configuration is automatically disabled when `quarkus.oidc.auth-server-url` is not configured, but either custom tenant configurations are available or `TenantConfigResolver` is registered."
msgstr "`quarkus.oidc.auth-server-url` が設定されていない場合、デフォルトのテナント設定は自動的に無効になりますが、カスタムテナント設定が使用可能であるか、`TenantConfigResolver` が登録されています。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Be aware that tenant-specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr "テナント固有の設定も無効にできる点に注意してください (例: `quarkus.oidc.tenant-a.tenant-enabled=false`)。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Programmatic OIDC start-up for multiple tenants"
msgstr "複数のテナント向けのプログラムによる OIDC の起動"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Static OIDC tenants can be created programmatically like in the example below:"
msgstr "OIDC テナントは、次の例のようにプログラムで作成できます。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Observe OIDC event."
msgstr "OIDC イベントを確認します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Create OIDC tenant 'tenant-one'."
msgstr "OIDC テナント tenant-one を作成します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "Create OIDC tenant 'tenant-two'."
msgstr "OIDC テナント tenant-two を作成します。"

#: _guides/security-openid-connect-multitenancy.adoc
msgid "The code above is a programmatic equivalent to the following configuration in the `application.properties` file:"
msgstr "上記のコードは、`application.properties` ファイル内の次の設定とプログラム的に同等です。"

#. type: Title ==
#: _guides/security-openid-connect-multitenancy.adoc
#, no-wrap
msgid "References"
msgstr "参考資料"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC 設定プロパティー]"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"

#. type: Plain text
#: _guides/security-openid-connect-multitenancy.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Security の概要]"
