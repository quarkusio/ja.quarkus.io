msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#. type: Title =
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "OpenID Connect authorization code flow mechanism for protecting web applications"
msgstr "Web アプリケーションを保護するための OpenID Connect 認可コードフローメカニズム"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "To protect your web applications, you can use the industry-standard OpenID Connect (OIDC) Authorization Code Flow mechanism provided by the Quarkus OIDC extension."
msgstr "Quarkus OIDC エクステンションが提供する業界標準の OpenID Connect (OIDC) 認可コードフローメカニズムを使用して、Web アプリケーションを保護することができます。"

#. type: Title ==
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Overview of the OIDC authorization code flow mechanism"
msgstr "OIDC 認可コードフローメカニズムの概要"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr "Quarkus OpenID Connect (OIDC) エクステンションは、link:https://www.keycloak.org[Keycloak] などの OIDC 準拠の認可サーバーでサポートされている OIDC 認可コードフローメカニズムを使用して、アプリケーション HTTP エンドポイントを保護できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.\n"
"After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful.\n"
"Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr ""
"認可コードフローメカニズムは、Web アプリケーションのユーザーを Keycloak などの OIDC プロバイダーにリダイレクトしてログインさせることで、ユーザーを認証します。\n"
"認証後、OIDC プロバイダーは、認証が成功したことを確認する認可コードを使用してユーザーをアプリケーションにリダイレクトします。\n"
"次に、アプリケーションは、このコードを OIDC プロバイダーと交換して、ID トークン (認証されたユーザーを表す)、アクセストークン、およびリフレッシュトークンを取得し、ユーザーのアプリケーションへのアクセスを認可します。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr "次の図は、Quarkus における認可コードフローメカニズムの概要を示しています。"

#. type: Block title
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Authorization code flow mechanism in Quarkus"
msgstr "Quarkus における認可コードフローメカニズム"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus user requests access to a Quarkus `web-app` application."
msgstr "Quarkus ユーザーは、Quarkus `web-app` アプリケーションへのアクセスをリクエストします。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr "Quarkus web-app は、ユーザーを認可エンドポイント、つまり認証用の OIDC プロバイダーにリダイレクトします。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr "OIDC プロバイダーは、ユーザーをログインと認証のプロンプトにリダイレクトします。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "At the prompt, the user enters their user credentials."
msgstr "プロンプトで、ユーザーは自分のユーザークレデンシャルを入力します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code and redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr "OIDC プロバイダーは、入力されたユーザーのクレデンシャルを認証し、認証に成功すると認可コードを発行し、そのコードをクエリーパラメーターとして含めて Quarkus web-app にユーザーをリダイレクトします。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr "Quarkus web-app は、この認可コードを OIDC プロバイダーと交換し、ID、アクセス、およびリフレッシュの各トークンを取得します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grants the relevant role-based authorization to that user.\n"
"The following tokens are issued:"
msgstr ""
"認可コードフローが完了し、Quarkus web-app は発行されたトークンを使用してユーザーに関する情報にアクセスし、そのユーザーに関連するロールベースの認可を付与します。\n"
"発行されるトークンは以下のとおりです。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "ID token: The Quarkus `web-app` application uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web application."
msgstr "IDトークン: Quarkus `web-app` アプリケーションは、ID トークンのユーザー情報を使用して、認証されたユーザーが安全にログインできるようにし、Web アプリケーションにロールベースのアクセスを提供します。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or to propagate it to another endpoint."
msgstr "アクセストークン: Quarkus web-app は、アクセストークンを使用して UserInfo API にアクセスし、認証されたユーザーに関する追加情報を取得したり、別のエンドポイントに伝播したりすることがあります。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr "リフレッシュトークン: (オプション) ID およびアクセストークンの有効期限が切れた場合、Quarkus web-app はリフレッシュトークンを使用して新しい ID およびアクセストークンを取得できます。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "See also the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC設定プロパティ] のリファレンスガイドもご参照ください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "To learn about how you can protect web applications by using the OIDC Authorization Code Flow mechanism, see xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]."
msgstr "OIDC 認可コードフローメカニズムを使用して Web アプリケーションを保護する方法については、xref:security-oidc-code-flow-authentication-tutorial.adoc[OIDC 認可コードフローを使用した Web アプリケーションの保護] を参照してください。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If you want to protect service applications by using OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]."
msgstr "OIDC ベアラートークン認証を使用してサービスアプリケーションを保護したい場合は、xref:security-oidc-bearer-token-authentication.adoc[OIDC ベアラートークン認証] を参照してください。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr "マルチテナントへの対応方法については、xref:security-openid-connect-multitenancy.adoc[OpenID Connect (OIDC) マルチテナンシーの使用] ガイドをお読みください。"

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "If you are a Vert.x OIDC user, learn about migration options in the xref:security-vertx-oidc-to-quarkus-oidc-migration.adoc[Migrate from Vert.x OIDC to Quarkus OIDC] guide."
msgstr "Vert.x OIDCユーザーの場合は、 xref:security-vertx-oidc-to-quarkus-oidc-migration.adoc[Vert.x OIDCからQuarkus OIDCへの移行] ガイドで移行オプションについてご確認ください。"

#. type: Title ==
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Using the authorization code flow mechanism"
msgstr "認可コードフローメカニズムの利用について"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Configuring Quarkus to support authorization code flow"
msgstr "認証コードフローをサポートするためのQuarkusの設定"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"To enable an authorization code flow authentication, the `quarkus.oidc.application-type` property must be set to `web-app`.\n"
"Usually, the Quarkus OIDC `web-app` application type must be set when your Quarkus application is a frontend application which serves HTML pages and requires an OIDC single sign-on login.\n"
"For the Quarkus OIDC `web-app` application, the authorization code flow is defined as the preferred method for authenticating users.\n"
"When your application serves HTML pages and provides REST API at the same time, and requires both the authorization code flow authentication and xref:security-oidc-bearer-token-authentication.adoc[the bearer access token authentication], the `quarkus.oidc.application-type` property can be set to `hybrid` instead.\n"
"In this case, the authorization code flow is only triggered  when an HTTP `Authorization` request header with a `Bearer` authorization scheme containing a bearer access token is not set."
msgstr ""
"認証コードフロー認証を有効にするには、 `quarkus.oidc.application-type` プロパティを `web-app` に設定する必要があります。\n"
"通常、Quarkus OIDC `web-app` アプリケーションタイプは、Quarkus アプリケーションが HTML ページを提供するフロントエンドアプリケーションで、OIDC シングルサインオンログインが必要な場合に設定する必要があります。\n"
"Quarkus OIDC `web-app` アプリケーションでは、認可コードフローがユーザー認証の優先方法として定義されています。\n"
"アプリケーションが HTML ページを提供すると同時に REST API を提供し、認証コードフロー認証と xref:security-oidc-bearer-token-authentication.adoc[ベアラアクセストークン認証]の 両方が必要な場合、代わりに `quarkus.oidc.application-type` プロパティを `hybrid` に設定できます。この場合、ベアラ・アクセストークンを含む `Bearer` 認証スキームを持つ HTTP `Authorization` リクエスト・ヘッダが設定されていない場合にのみ、認可コード・フローがトリガされます。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Configuring access to the OIDC provider endpoint"
msgstr "OIDC プロバイダーエンドポイントへのアクセス設定"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC `web-app` application requires URLs of the OIDC provider's authorization, token, `JsonWebKey` (JWK) set, and possibly the `UserInfo`, introspection and end-session (RP-initiated logout) endpoints."
msgstr "OIDC `web-app` アプリケーションは、OIDC プロバイダーの認可、トークン、 `JsonWebKey` (JWK) セット、そして場合によっては `UserInfo`、イントロスペクション、セッション終了 (RP-initiated logout) エンドポイントの URL を必要とします。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "By convention, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "規約により、 `quarkus.oidc.auth-server-url` で設定することで `/.well-known/openid-configuration` のパスを追加することで検出されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Alternatively, if the discovery endpoint is not available, or you prefer to reduce the discovery endpoint round-trip, you can disable endpoint discovery and configure relative path values.\n"
"For example:"
msgstr ""
"また、ディスカバリーエンドポイントが利用できない場合や、ディスカバリーエンドポイントのラウンドトリップを減らしたい場合は、エンドポイントのディスカバリーを無効にし、相対パス値を設定することもできます。\n"
"例:"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers support metadata discovery but do not return all the endpoint URL values required for the authorization code flow to complete or to support application functions, for example, user logout.\n"
"To work around this limitation, you can configure the missing endpoint URL values locally, as outlined in the following example:"
msgstr ""
"一部の OIDC プロバイダーは、メタデータディスカバリーをサポートしていますが、認可コードフローを完了したり、ユーザーログアウトなどのアプリケーション機能をサポートしたりするために必要なすべてのエンドポイント URL 値は返しません。\n"
"この制限を回避するには、次の例に示すように、不足しているエンドポイント URL 値をローカルで設定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can use this same configuration to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required.\n"
"For example, a provider that supports both global and application-specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout`.\n"
"This URL will log the user out of all the applications into which the user is currently logged in.\n"
"However, if the requirement is for the current application to log the user out of a specific application only, you can override the global end-session URL, by setting the `quarkus.oidc.end-session-path=logout` parameter."
msgstr ""
"検出されたエンドポイント URL がローカルの Quarkus エンドポイントで機能せず、より具体的な値が必要な場合は、この同じ設定を使用して、エンドポイント URL をオーバーライドできます。\n"
"たとえば、グローバルエンドセッションエンドポイントとアプリケーション固有のエンドセッションエンドポイントの両方をサポートするプロバイダーは、 `http://localhost:8180/oidcprovider/account/global-logout` のようなグローバルエンドセッション URL を返します。\n"
"この URL は、ユーザーが現在ログインしているすべてのアプリケーションからユーザーをログアウトします。\n"
"ただし、現在のアプリケーションで特定のアプリケーションのみからユーザーをログアウトさせる必要がある場合は、 `quarkus.oidc.end-session-path=logout` パラメーターを設定することで、グローバルエンドセッション URL をオーバーライドできます。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "OIDC provider client authentication"
msgstr "OIDC プロバイダーのクライアント認証"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OIDC providers typically require applications to be identified and authenticated when they interact with the OIDC endpoints.\n"
"Quarkus OIDC, specifically the `quarkus.oidc.runtime.OidcProviderClient` class, authenticates to the OIDC provider when the authorization code must be exchanged for the ID, access, and refresh tokens, or when the ID and access tokens must be refreshed or introspected."
msgstr ""
"OIDC プロバイダーは通常、OIDC エンドポイントとやり取りする際に、アプリケーションの識別と認証を行う必要があります。\n"
"Quarkus OIDC、特に `quarkus.oidc.runtime.OidcProviderClient` クラスは、認可コードを ID、アクセス、リフレッシュトークンと交換する必要がある場合、または ID やアクセストークンをリフレッシュまたはイントロスペクトする必要がある場合に、OIDC プロバイダーで認証します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Typically, client id and client secrets are defined for a given application when it enlists to the OIDC provider.\n"
"All https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC client authentication] options are supported.\n"
"For example:"
msgstr ""
"通常、クライアント ID とクライアントシークレットは、アプリケーションが OIDC プロバイダーに登録する際に定義されます。\n"
"すべての link:https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC クライアント認証] オプションがサポートされています。\n"
"例:"

#. type: Block title
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Example of  `client_secret_basic`:"
msgstr "`client_secret_basic` の例:"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Or:"
msgstr "あるいは:"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The following example shows the secret retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr "次の例は、xref:credentials-provider.adoc[クレデンシャルプロバイダー] から取得したシークレットを示しています。"

#. type: Block title
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Example of `client_secret_post`"
msgstr "`client_secret_post` の例"

#. type: Block title
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Example of `client_secret_jwt`, where the signature algorithm is HS256:"
msgstr "`client_secret_jwt` の例。署名アルゴリズムは HS256:"

#. type: Block title
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Example of `client_secret_jwt`, where the secret is retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr "`client_secret_jwt` の例。この場合、シークレットは xref:credentials-provider.adoc[クレデンシャルプロバイダー] から取得されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `private_key_jwt` with the PEM key inlined in application.properties, and where the signature algorithm is `RS256`:"
msgstr "PEM キーが application.properties にインライン化され、署名アルゴリズムが `RS256` である `private_key_jwt` の例:"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `private_key_jwt` with the PEM key file, and where the signature algorithm is RS256:"
msgstr "PEM 鍵ファイルを使用した `private_key_jwt` の例。署名アルゴリズムは RS256:"

#. type: Block title
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Example of `private_key_jwt` with the keystore file, where the signature algorithm is RS256:"
msgstr "keystoreファイルによる `private_key_jwt` の例。署名アルゴリズムはRS256:"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that a client secret does not get sent to the OIDC provider, therefore avoiding the risk of a secret being intercepted by a  'man-in-the-middle' attack."
msgstr "`client_secret_jwt`、または `private_key_jwt` 認証方法を使用することで、クライアントシークレットが OIDC プロバイダーに送信されないため、「中間者」攻撃によってシークレットが傍受されるリスクを回避できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Example how JWT Bearer token can be used to authenticate client"
msgstr "JWT ベアラートークンを使用したクライアント認証方法の例"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Use JWT bearer token to authenticate OIDC provider client, see the link:https://www.rfc-editor.org/rfc/rfc7523#section-2.2[Using JWTs for Client Authentication] section for more information."
msgstr "JWT ベアラートークンを使用して OIDC プロバイダークライアントを認証します。詳細は、link:https://www.rfc-editor.org/rfc/rfc7523#section-2.2[JWT を使用したクライアント認証] セクションを参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Path to a JWT bearer token. Quarkus loads a new token from a filesystem and reloads it when the token has expired."
msgstr "JWT ベアラートークンへのパス。Quarkus はファイルシステムから新しいトークンをロードし、トークンの有効期限が切れると再ロードします。"

#. type: Title =====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Additional JWT authentication options"
msgstr "JWT 認証の追加オプション"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If `client_secret_jwt`, `private_key_jwt`, or an Apple `post_jwt` authentication methods are used, then you can customize the JWT signature algorithm, key identifier, audience, subject and issuer.\n"
"For example:"
msgstr ""
"`client_secret_jwt`、 `private_key_jwt`、または Apple の `post_jwt` 認証方法が使用されている場合、JWT 署名アルゴリズム、キー識別子、audience、subject、および issuer をカスタマイズすることができます。\n"
"例:"

#. type: Title =====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Apple POST JWT"
msgstr "Apple POST JWT"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The Apple OIDC provider uses a `client_secret_post` method whereby a secret is a JWT produced with a `private_key_jwt` authentication method, but with the Apple account-specific issuer and subject claims."
msgstr "Apple OIDC プロバイダーは、 `private_key_jwt` 認証方式で生成された JWT をシークレットとする `client_secret_post` 方式を使用していますが、Apple アカウント固有の issuer と subject のクレームを使用しています。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "In Quarkus Security, `quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method, which you can configure as follows:"
msgstr "Quarkus Security では、 `quarkus-oidc` は、非標準の `client_secret_post_jwt` 認証方法をサポートされています。この認証方法は、以下のように設定できます。"

#. type: Title =====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "mutual TLS (mTLS)"
msgstr "相互 TLS (mTLS)"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Some OIDC providers might require that a client is authenticated as part of the mutual TLS  authentication process."
msgstr "OIDC プロバイダーによっては、相互 TLS 認証プロセスの一部としてクライアントの認証を要求する場合があります。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The following example shows how you can configure `quarkus-oidc` to support `mTLS`:"
msgstr "次の例は、 `mTLS` をサポートするように `quarkus-oidc` を設定する方法を示しています。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "POST query"
msgstr "POST クエリー"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Some providers, such as the xref:security-openid-connect-providers.adoc#strava[Strava OAuth2 provider], require client credentials be posted as HTTP POST query parameters:"
msgstr "xref:security-openid-connect-providers.adoc#strava[Strava OAuth2 プロバイダー] などの一部のプロバイダーでは、クライアントクレデンシャルを HTTP POST クエリーパラメーターとして送信する必要があります。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Introspection endpoint authentication"
msgstr "イントロスペクションエンドポイント認証"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers require authentication to its introspection endpoint by using Basic authentication and with credentials that are different from the `client_id` and `client_secret`.\n"
"If you have previously configured security authentication to support either the `client_secret_basic` or `client_secret_post` client authentication methods as described in the <<oidc-provider-client-authentication,OIDC provider client authentication>> section, you might need to apply the additional configuration as follows."
msgstr ""
"一部の OIDC プロバイダーでは、Basic 認証と `client_id` および `client_secret` とは異なるクレデンシャルを使用して、イントロスペクションエンドポイントへの認証を行う必要があります。\n"
"<<oidc-provider-client-authentication,OIDC provider client authentication>> セクションに記載されているように、以前にセキュリティー認証を設定して、 `client_secret_basic` または `client_secret_post` クライアント認証メソッドをサポートしていた場合は、次のように追加の設定を適用することを推奨します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If the tokens have to be introspected and the introspection endpoint-specific authentication mechanism is required, you can configure `quarkus-oidc` as follows:"
msgstr "トークンをイントロスペクションする必要があり、イントロスペクションエンドポイント固有の認証メカニズムが必要な場合は、 `quarkus-oidc` を以下のように設定できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC request filters"
msgstr "OIDC リクエストフィルター"

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFilter` implementations, which can update or add new request headers, customize a request body and can also log requests."
msgstr "QuarkusからOIDCプロバイダへのOIDCリクエストをフィルタリングするには、1つまたは複数の `OidcRequestFilter` 、リクエストヘッダの更新や追加、リクエストボディのカスタマイズ、リクエストのログ取得が可能な実装を登録します。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For example:"
msgstr "例:"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Get `OidcConfigurationMetadata`, which contains all supported OIDC endpoint addresses."
msgstr "サポートされているすべての OIDC エンドポイントアドレスが含まれる `OidcConfigurationMetadata` を取得します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Use `OidcConfigurationMetadata` to filter requests to the OIDC token endpoint only."
msgstr "`OidcConfigurationMetadata` を使用して、OIDC トークンエンドポイントへのリクエストのみをフィルターします。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Alternatively, you can use an `@OidcEndpoint` annotation to apply this filter to responses from the OIDC discovery endpoint only:"
msgstr "または、 `@OidcEndpoint` アノテーションを使用して、このフィルターを OIDC 検出エンドポイントからのレスポンスにのみ適用することもできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Restrict this filter to requests targeting the OIDC discovery endpoint only."
msgstr "このフィルターを、OIDC 検出エンドポイントのみを対象とするリクエストに制限します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`OidcRequestContextProperties` can be used to access request properties.\n"
"Currently, you can use a `tenand_id` key to access the OIDC tenant id and a `grant_type` key to access the grant type which the OIDC provider uses to acquire tokens.\n"
"The `grant_type` can only be set to either `authorization_code` or `refresh_token` grant type, when requests are made to the token endpoint. It is `null` in all other cases."
msgstr ""
"`OidcRequestContextProperties` を使用して、リクエストプロパティーにアクセスできます。\n"
"現在、 `tenand_id` キーを使用して OIDC テナント ID にアクセスし、 `grant_type` キーを使用して OIDC プロバイダーがトークンを取得するために使用するグラントタイプにアクセスできます。\n"
"トークンエンドポイントにリクエストする場合、 `grant_type` は `authorization_code` または `refresh_token` グラントタイプのいずれかにのみ設定できます。それ以外の場合は `null` になります。"

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"`OidcRequestFilter` can customize a request body by preparing an instance of `io.vertx.mutiny.core.buffer.Buffer`\n"
"and setting it on a request context, for example:"
msgstr "`OidcRequestFilter` は、 のインスタンスを用意してリクエストコンテキストに設定するなどして、リクエストボディをカスタマイズすることができます： `io.vertx.mutiny.core.buffer.Buffer`"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC response filters"
msgstr "OIDC レスポンスフィルター"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can filter responses from the OIDC providers by registering one or more `OidcResponseFilter` implementations, which can check the response status, headers and body in order to log them or perform other actions."
msgstr "1 つ以上の `OidcResponseFilter` 実装を登録することで、OIDC プロバイダーからのレスポンスをフィルタリングできます。これにより、レスポンスのステータス、ヘッダー、本文をチェックして、ログに記録したり、その他のアクションを実行したりできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can have a single filter intercepting all the OIDC responses, or use an `@OidcEndpoint` annotation to apply this filter to the specific endpoint responses only. For example:"
msgstr "すべての OIDC レスポンスをインターセプトする単一のフィルターを使用することも、 `@OidcEndpoint` アノテーションを使用してこのフィルターを特定のエンドポイントレスポンスにのみ適用することもできます。例: "

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Restrict this filter to requests targeting the OIDC token endpoint only."
msgstr "このフィルターを、OIDC トークンエンドポイントのみを対象とするリクエストに制限します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Check the response `Content-Type` header."
msgstr "レスポンスの `Content-Type` ヘッダーを確認します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Use `OidcRequestContextProperties` request properties to check only an `authorization_code` token grant response for the `code-flow-user-info-cached-in-idtoken` tenant."
msgstr "`OidcRequestContextProperties` リクエストプロパティーを使用して、 `code-flow-user-info-cached-in-idtoken` テナントの `authorization_code` トークングラントレスポンスのみをチェックします。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Confirm the response JSON contains an `id_token` property."
msgstr "レスポンス JSON に `id_token` プロパティーが含まれていることを確認します。"

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid ""
"`OidcResponseFilter` can customize a response body by preparing an instance of `io.vertx.mutiny.core.buffer.Buffer`\n"
"and setting it on a response context, for example:"
msgstr "`OidcResponseFilter` は、 のインスタンスを用意してレスポンスコンテキストに設定するなどして、レスポンスボディをカスタマイズすることができます： `io.vertx.mutiny.core.buffer.Buffer`"

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Restricting OIDC request and response filters to authorization code flow"
msgstr "OIDC リクエストおよびレスポンス・フィルタの認可コード・フローへの制限"

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "When you have both the authorization code and xref:security-oidc-bearer-token-authentication.adoc[bearer access token] flows supported by xref:security-openid-connect-multitenancy.adoc[multiple OIDC tenants] and the filters have to deal with a flow specific logic, you can instead have them restricted to the authorization code flow with the `io.quarkus.oidc.AuthorizationCodeFlow` annotation and xref:security-oidc-bearer-token-authentication.adoc#restrict-oidc-filter-to-bearer-auth-flow[the bearer access token flow with the 'io.quarkus.oidc.BearerTokenAuthentication' annotation]."
msgstr "xref:security-openid-connect-multitenancy.adoc[複数の OIDC テナントで] サポートされている認証コードフローと xref:security-oidc-bearer-token-authentication.adoc[ベアラアクセストークンフローの] 両方があり、フィルタがフロー固有のロジックを処理する必要がある場合は、 `io.quarkus.oidc.AuthorizationCodeFlow` アノテーションを使用して認証コードフローに制限し、 xref:security-oidc-bearer-token-authentication.adoc#restrict-oidc-filter-to-bearer-auth-flow[「io.quarkus.oidc.BearerTokenAuthentication」アノテーションを使用してベアラアクセストークンフローに] 制限することができます。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Redirecting to and from the OIDC provider"
msgstr "OIDC プロバイダーへのリダイレクトと OIDC プロバイダーからのリダイレクト"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"When a user is redirected to the OIDC provider to authenticate, the redirect URL includes a `redirect_uri` query parameter, which indicates to the provider where the user has to be redirected to when the authentication is complete.\n"
"In our case, this is the Quarkus application."
msgstr ""
"ユーザーが認証のために OIDC プロバイダーにリダイレクトされる場合、リダイレクト URL には `redirect_uri` クエリーパラメーターが含まれます。このパラメーターは、認証完了後のユーザーのリダイレクト先をプロバイダーに示します。\n"
"ここでのリダイレクト先は Quarkus アプリケーションになります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Quarkus sets this parameter to the current application request URL by default.\n"
"For example, if a user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1`, then the `redirect_uri` parameter is set to `http://localhost:8080/service/1`.\n"
"Similarly, if the request URL is `http://localhost:8080/service/2`, then the `redirect_uri` parameter is set to `http://localhost:8080/service/2`."
msgstr ""
"Quarkus は、デフォルトでこのパラメーターを現在のアプリケーションリクエスト URL に設定します。\n"
"たとえば、ユーザーが `http://localhost:8080/service/1` にある Quarkus サービスエンドポイントにアクセスしようとしている場合、 `redirect_uri` パラメーターは `http://localhost:8080/service/1` に設定されます。\n"
"同様に、リクエスト URL が `http://localhost:8080/service/2` の場合、 `redirect_uri` パラメーターは `http://localhost:8080/service/2` に設定されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers require the `redirect_uri` to have the same value for a given application, for example, `http://localhost:8080/service/callback`, for all the redirect URLs.\n"
"In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set.\n"
"For example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback`, which will be the same regardless of the current request URL."
msgstr ""
"一部の OIDC プロバイダーでは、すべてのリダイレクト URL の特定のアプリケーションに対して、 `redirect_uri` が同じ値 (例: `http://localhost:8080/service/callback`) を持つことが必要です。\n"
"このような場合は、 `quarkus.oidc.authentication.redirect-path` プロパティーを設定する必要があります。\n"
"たとえば、 `quarkus.oidc.authentication.redirect-path=/service/callback` の場合、Quarkus は `redirect_uri` パラメーターを `http://localhost:8080/service/callback` などの絶対 URL に設定します。これは、現在のリクエスト URL に関係なく同じになります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If `quarkus.oidc.authentication.redirect-path` is set, but you need the original request URL to be restored after the user is redirected back to a unique callback URL, for example,  `http://localhost:8080/service/callback`, set `quarkus.oidc.authentication.restore-path-after-redirect` property to `true`.\n"
"This will restore the request URL such as `http://localhost:8080/service/1`."
msgstr ""
"`quarkus.oidc.authentication.redirect-path` が設定されているが、ユーザーが `http://localhost:8080/service/callback` などの一意のコールバック URL にリダイレクトされた後に元のリクエスト URL を復元する必要がある場合は、 `quarkus.oidc.authentication.restore-path-after-redirect` プロパティーを `true` に設定します。\n"
"これにより、 `http://localhost:8080/service/1` などのリクエスト URL が復元されます。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Customizing authentication requests"
msgstr "認証リクエストのカスタマイズ"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "By default, only the `response_type` (set to `code`), `scope` (set to `openid`), `client_id`, `redirect_uri`, and `state` properties are passed as HTTP query parameters to the OIDC provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr "デフォルトでは、ユーザーが認証のために OIDC プロバイダーの認可エンドポイントにリダイレクトされる際に、 `response_type` (`code` に設定)、 `scope` (`openid` に設定)、 `client_id`、 `redirect_uri`、および `state` プロパティーのみが HTTP クエリーパラメーターとして、OIDC プロバイダーの認可エンドポイントに渡されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can add more properties to it with `quarkus.oidc.authentication.extra-params`.\n"
"For example, some OIDC providers might choose to return the authorization code as part of the redirect URI's fragment, which would break the authentication process.\n"
"The following example shows how you can work around this issue:"
msgstr ""
"`quarkus.oidc.authentication.extra-params` を使用して、さらにプロパティーを追加できます。\n"
"たとえば、一部の OIDC プロバイダーは、リダイレクト URI のフラグメントの一部として認可コードを返すことを選択する場合があり、これにより認証プロセスが中断されます。\n"
"次の例は、この問題を回避する方法を示しています。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "See also the <<oidc-redirect-filters>> section explaining how a custom `OidcRedirectFilter` can be used to customize OIDC redirects, including those to the OIDC authorization endpoint."
msgstr "また、カスタムの `OidcRedirectFilter` を使用して、OIDC 認可エンドポイントへのリダイレクトを含む OIDC リダイレクトをカスタマイズする方法については、<<oidc-redirect-filters>> セクションを参照してください。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Customizing the authentication error response"
msgstr "認証エラーレスポンスのカスタマイズ"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"When the user is redirected to the OIDC authorization endpoint to authenticate and, if necessary, authorize the Quarkus application, this redirect request might fail, for example, when an invalid scope is included in the redirect URI.\n"
"In such cases, the provider redirects the user back to Quarkus with `error` and `error_description` parameters instead of the expected `code` parameter."
msgstr ""
"ユーザーが OIDC 認可エンドポイントにリダイレクトされ、Quarkus アプリケーションを認証し、必要に応じて認可する場合、このリダイレクトリクエストは、リダイレクト URI に無効なスコープが含まれている場合などに失敗する可能性があります。\n"
"このような場合、プロバイダーは、想定される `code` パラメーターではなく、 `error` および `error_description` パラメーターを使用してユーザーを Quarkus にリダイレクトします。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For example, this can happen when an invalid scope or other invalid parameters are included in the redirect to the provider."
msgstr "これは、たとえば、プロバイダーへのリダイレクトに無効なスコープまたはその他の無効なパラメーターが含まれている場合に発生する可能性があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In such cases, an HTTP `401` error is returned by default.\n"
"However, you can request that a custom public error endpoint be called to return a more user-friendly HTML error page.\n"
"To do this, set the `quarkus.oidc.authentication.error-path` property, as shown in the following example:"
msgstr ""
"このような場合、デフォルトで HTTP `401` エラーが返されます。\n"
"ただし、ユーザーにわかりやすいエラーメッセージを返すために、カスタムパブリックエラーエンドポイントを呼び出すようにリクエストできます。\n"
"これを行うには、 `quarkus.oidc.authentication.error-path` プロパティーを以下のように設定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Ensure that the property starts with a forward slash (/) character and the path is relative to the base URI of the current endpoint.\n"
"For example, if it is set to '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope`, then a final redirect is made to `https://localhost:8080/error?error=invalid_scope`."
msgstr ""
"プロパティーがフォワードスラッシュ (/) 文字で始まり、パスが現在のエンドポイントのベース URI と相対的であることを確認します。\n"
"たとえば、これが '/error' に設定され、現在のリクエスト URI が `https://localhost:8080/callback?error=invalid_scope` の場合、最終的に `https://localhost:8080/error?error=invalid_scope` へリダイレクトされます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "To prevent the user from being redirected to this page to be re-authenticated, ensure that this error endpoint is a public resource."
msgstr "ユーザーがこのページにリダイレクトされて再認証されないようにするには、このエラーエンドポイントがパブリックリソースであることを確認します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC redirect filters"
msgstr "OIDC リダイレクトフィルター"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can register one or more `io.quarkus.oidc.OidcRedirectFilter` implementations to filter OIDC redirects to OIDC authorization and logout endpoints but also local redirects to custom error and session expired pages. Custom `OidcRedirectFilter` can add additional query parameters, response headers and set new cookies."
msgstr "1 つ以上の `io.quarkus.oidc.OidcRedirectFilter` 実装を登録して、OIDC 認可およびログアウトエンドポイントへの OIDC リダイレクトだけでなく、カスタムエラーおよびセッション期限切れページへのローカルリダイレクトもフィルタリングできます。カスタム `OidcRedirectFilter` は、さらにクエリーパラメーターおよびレスポンスヘッダーを追加して、新しい Cookie を設定できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For example, the following simple custom `OidcRedirectFilter` adds an additional query parameter and a custom response header for all redirect requests that can be done by Quarkus OIDC:"
msgstr "たとえば、次の単純なカスタム `OidcRedirectFilter` は、Quarkus OIDC で実行できるすべてのリダイレクトリクエストに対して追加のクエリーパラメーターとカスタムレスポンスヘッダーを追加します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Add an additional query parameter. Note the queury names and values are URL-encoded by Quarkus OIDC, a `redirect-filtered=true%20C` query parameter is added to the redirect URI in this case."
msgstr "クエリーパラメーターを追加します。クエリーの名前と値は Quarkus OIDC によって URL エンコードされることに注意してください。この場合、リダイレクト URI に `redirect-filtered=true%20C` クエリーパラメーターが追加されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Add a custom HTTP response header."
msgstr "カスタム HTTP レスポンスヘッダーを追加します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "See also the <<customize-authentication-requests>> section how to configure additional query parameters for OIDC authorization point."
msgstr "OIDC 認可ポイントの追加クエリーパラメーターを設定する方法については、<<customize-authentication-requests>> セクションも参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Custom `OidcRedirectFilter` for local error and session expired pages can also create secure cookies to help with generating such pages."
msgstr "ローカルエラーおよびセッション期限切れページ用のカスタム `OidcRedirectFilter` により、そのようなページの生成に役立つセキュアな Cookie を作成することもできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For example, let's assume you need to redirect the current user whose session has expired to a custom session expired page available at `http://localhost:8080/session-expired-page`. The following custom `OidcRedirectFilter` encrypts the user name in a custom `session_expired` cookie using an OIDC tenant client secret:"
msgstr "たとえば、セッションの有効期限が切れた現在のユーザーを、 `http://localhost:8080/session-expired-page` で利用できるカスタムセッション期限切れページにリダイレクトする必要があるとします。次のカスタム `OidcRedirectFilter` は、OIDC テナントクライアントシークレットを使用して、カスタム `session_expired` Cookie 内のユーザー名を暗号化します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Make sure this redirect filter is only called during a redirect to the session expired page."
msgstr "このリダイレクトフィルターは、セッション期限切れページへのリダイレクト中にのみ呼び出されるようにしてください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Access `AuthorizationCodeTokens` tokens associated with the now expired session as a `RoutingContext`  attribute."
msgstr "期限切れになったセッションに関連付けられた `AuthorizationCodeTokens` トークンに、 `RoutingContext` 属性としてアクセスします。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Decode ID token claims and get a user name."
msgstr "ID トークンクレームをデコードし、ユーザー名を取得します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Save the user name in a JWT token encrypted with the current OIDC tenant's client secret."
msgstr "現在の OIDC テナントのクライアントシークレットで暗号化された JWT トークンにユーザー名を保存します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Create a custom `session_expired` cookie valid for 5 seconds which joins the encrypted token and a tenant id using a \"|\" separator. Recording a tenant id in a custom cookie can help to generate correct session expired pages in a multi-tenant OIDC setup."
msgstr "暗号化されたトークンとテナント ID を区切り文字 \"|\" を使用して結合し、5 秒間有効なカスタム `session_expired` Cookie を作成します。カスタム Cookie にテナント ID を記録すると、マルチテナント OIDC セットアップで正しいセッション期限切れページを生成する場合に役立ちます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Next, a public JAX-RS resource which generates session expired pages can use this cookie to create a page tailored for this user and the corresponding OIDC tenant, for example:"
msgstr "次に、この Cookie を、セッション期限切れページを生成するパブリック JAX-RS リソースで使用して、このユーザーと対応する OIDC テナントに合わせたページを作成できます。次に例を示します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Inject `TenantConfigBean` which can be used to access all the current OIDC tenant configurations."
msgstr "現在のすべての OIDC テナント設定にアクセスするために使用できる `TenantConfigBean` を注入します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Split the custom cookie value into 2 parts, first part is the encrypted token, last part is the tenant id."
msgstr "カスタム Cookie 値を 2 つの部分に分割します。最初の部分は暗号化されたトークン、最後の部分はテナント ID です。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Get the OIDC tenant configuration."
msgstr "OIDC テナント設定を取得します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Decrypt the cookie value using the OIDC tenant's client secret."
msgstr "OIDC テナントのクライアントシークレットを使用して Cookie 値を復号化します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Remove the custom cookie."
msgstr "カスタム Cookie を削除します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Use the username in the decrypted token and the tenant id to generate the service expired page response."
msgstr "復号化されたトークン内のユーザー名とテナント ID を使用して、サービス期限切れページのレスポンスを生成します。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Accessing authorization data"
msgstr "認可データへのアクセス"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can access information about authorization in different ways."
msgstr "認可に関する情報には、さまざまな方法でアクセスできます。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Accessing ID and access tokens"
msgstr "ID およびアクセストークンへのアクセス"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC code authentication mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID token], access token, and refresh token."
msgstr "OIDC コード認証メカニズムは、認可コードフロー中に 3 つのトークン https://openid.net/specs/openid-connect-core-1_0.html#IDToken[IDトークン]、アクセストークン、リフレッシュトークンを取得します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The ID token is always a JWT token and represents a user authentication with the JWT claims.\n"
"You can use this to get the issuing OIDC endpoint, the username, and other information called _claims_.\n"
"You can access ID token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr ""
"ID トークンは常に JWT トークンであり、JWT クレームによるユーザー認証を表します。\n"
"これを使って発行元の OIDC エンドポイントやユーザー名、その他 _クレーム_ と呼ばれる情報を取得することができます。\n"
"`JsonWebToken` に `IdToken` という修飾子をつけることで、ID トークンのクレームにアクセスすることができます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC `web-app` application usually uses the access token to access other endpoints on behalf of the currently logged-in user.\n"
"You can access the raw access token as follows:"
msgstr ""
"OIDC `web-app` アプリケーションは通常、アクセストークンを使用して、現在ログインしているユーザーに代わって他のエンドポイントにアクセスします。\n"
"raw アクセストークンには次のようにアクセスできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "When an authorization code flow access token is injected as `JsonWebToken`, its verification is automatically enabled, in addition to the mandatory ID token verification. If really needed, you can disable this code flow access token verification with `quarkus.oidc.authentication.verify-access-token=false`."
msgstr "認可コードフローアクセストークンが `JsonWebToken` として注入されると、必須の ID トークン検証に加えて、その検証が自動的に有効になります。本当に必要な場合は、 `quarkus.oidc.authentication.verify-access-token=false` を使用してこのコードフローアクセストークン検証を無効にできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`AccessTokenCredential` is used if the access token issued to the Quarkus `web-app` application is opaque (binary) and cannot be parsed to a `JsonWebToken` or if the inner content is necessary for the application."
msgstr "`AccessTokenCredential` は、Quarkus `web-app` アプリケーションに発行されたアクセストークンが不透明 (バイナリー) で、 `JsonWebToken` に解析できない場合、または内部コンテンツがアプリケーションに必要な場合に使用されます。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr "`JsonWebToken` と `AccessTokenCredential` の注入は、 `@RequestScoped` と `@ApplicationScoped` の両方のコンテキストでサポートされています。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Quarkus OIDC uses the refresh token to refresh the current ID and access tokens as part of its <<session-management,session management>> process."
msgstr "Quarkus OIDC は、<<session-management,session management>> プロセスの一環として、リフレッシュトークンを使用し、現在の ID とアクセストークンを更新します。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "User info"
msgstr "ユーザー情報"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the ID token does not provide enough information about the currently authenticated user, you can get more information from the `UserInfo` endpoint.\n"
"Set the `quarkus.oidc.authentication.user-info-required=true` property to request a link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC `UserInfo` endpoint."
msgstr ""
"ID トークンが現在認証されているユーザーに関する十分な情報を提供しない場合は、 `UserInfo` エンドポイントから詳細情報を取得できます。\n"
"`quarkus.oidc.authentication.user-info-required=true` プロパティーを設定して、OIDC `UserInfo` エンドポイントから link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON オブジェクトをリクエストします。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"A request is sent to the OIDC provider `UserInfo` endpoint by using the access token returned with the authorization code grant response, and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object is created.\n"
"`io.quarkus.oidc.UserInfo` can be injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr ""
"認可コードの付与応答で返されたアクセストークンを使用して、OIDC プロバイダーの `UserInfo` エンドポイントにリクエストが送信され、 `io.quarkus.oidc.UserInfo` (単純な `jakarta.json.JsonObject` ラッパー) オブジェクトが作成されます。\n"
"`io.quarkus.oidc.UserInfo` は、SecurityIdentity `userinfo` 属性として注入またはアクセスできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.authentication.user-info-required` is automatically enabled if one of these conditions is met:"
msgstr "`quarkus.oidc.authentication.user-info-required` は、次のいずれかの条件が満たされた場合に自動的に有効になります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "if `quarkus.oidc.roles.source` is set to `userinfo` or `quarkus.oidc.token.verify-access-token-with-user-info` is set to `true` or `quarkus.oidc.authentication.id-token-required` is set to `false`, the current OIDC tenant must support a UserInfo endpoint in these cases."
msgstr "`quarkus.oidc.roles.source` が `userinfo` に設定されている場合、または `quarkus.oidc.token.verify-access-token-with-user-info` が `true` に設定されている場合、または `quarkus.oidc.authentication.id-token-required` が `false` に設定されている場合。このような場合、現在の OIDC テナントが UserInfo エンドポイントをサポートしている必要があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "if `io.quarkus.oidc.UserInfo` injection point is detected but only if the current OIDC tenant supports a UserInfo endpoint."
msgstr "`io.quarkus.oidc.UserInfo` インジェクションポイントが検出された場合。ただし、有効になるのは、現在の OIDC テナントが UserInfo エンドポイントをサポートしている場合だけです。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Accessing the OIDC configuration information"
msgstr "OIDC 設定情報へのアクセス"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect configuration metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "現在のテナントの検出された link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect 設定メタデータ] は、 `io.quarkus.oidc.OidcConfigurationMetadata` で表され、 `SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスできます。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "エンドポイントがパブリックの場合、デフォルトのテナントの `OidcConfigurationMetadata` が注入されます。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Mapping token claims and `SecurityIdentity` roles"
msgstr "トークンクレームと `SecurityIdentity` ロールのマッピング"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-token-authentication.adoc[Bearer tokens].\n"
"The only difference is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID token] is used as a source of the roles by default."
msgstr ""
"検証済みトークンから SecurityIdentity ロールにロールをマッピングする方法は、xref:security-oidc-bearer-token-authentication.adoc[ベアラートークン] の方法と同じです。\n"
"唯一の違いは、 https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID トークン] がデフォルトでロールのソースとして使用されることです。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you use Keycloak, set a `microprofile-jwt` client scope for the ID token to contain a `groups` claim.\n"
"For more information, see the link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak server administration guide]."
msgstr ""
"Keycloak を使用する場合は、ID トークンに `groups` クレームが含まれるように `microprofile-jwt` クライアントスコープを設定します。\n"
"詳細は、link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak サーバー管理ガイド] のリンクを参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "However, depending on your OIDC provider, roles might be stored in the access token or the user info."
msgstr "ただし、OIDC プロバイダーによっては、ロールがアクセストークンまたはユーザー情報に保存される場合があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints, then set `quarkus.oidc.roles.source=accesstoken`."
msgstr "アクセストークンにロールが含まれており、このアクセストークンがダウンストリームエンドポイントに伝播されることを意図していない場合は、 `quarkus.oidc.roles.source=accesstoken` を設定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If UserInfo is the source of the roles, then set `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr "UserInfo がロールのソースである場合は、 `quarkus.oidc.roles.source=userinfo` を設定し、必要に応じて `quarkus.oidc.roles.role-claim-path` を設定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Additionally, you can also use a custom `SecurityIdentityAugmentor` to add the roles.\n"
"For more information, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization].\n"
"You can also map `SecurityIdentity` roles created from token claims to deployment-specific roles with the xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP Security policy]."
msgstr ""
"さらに、カスタム `SecurityIdentityAugmentor` を使用してロールを追加することもできます。\n"
"詳細は、xref:security-customization.adoc#security-identity-customization[SecurityIdentity カスタマイズ] を参照してください。\n"
"また、xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP Security ポリシー] を使用して、トークン要求から作成された `SecurityIdentity` ロールをデプロイメント固有のロールにマップすることもできます。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Ensuring validity of tokens and authentication data"
msgstr "トークンと認証データの有効性の確認"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"A core part of the authentication process is ensuring the chain of trust and validity of the information.\n"
"This is done by ensuring tokens can be trusted."
msgstr ""
"認証プロセスの中核となるのは、トラストチェーンと情報の有効性を確認することです。\n"
"これは、トークンが信頼できることを確認することによって行われます。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Token verification and introspection"
msgstr "トークン検証およびイントロスペクション"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The verification process of OIDC authorization code flow tokens follows the Bearer token authentication token verification and introspection logic.\n"
"For more information, see the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-verification-introspection[Token verification and introspection] section of the \"Quarkus OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr ""
"OIDC 認可コードフロートークンの検証プロセスは、ベアラートークン認証トークンの検証とイントロスペクションのロジックに従います。\n"
"詳細は、「Quarkus OpenID Connect (OIDC) ベアラートークン認証」ガイドの xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-verification-introspection[トークンの検証とイントロスペクション] のセクションを参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"With Quarkus `web-app` applications, only the `IdToken` is verified by default because the access token is not used to access the current Quarkus web-app endpoint and is intended to be propagated to the services expecting this access token.\n"
"If you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`), then it will also be verified."
msgstr ""
"Quarkus の `web-app` アプリケーションでは、アクセストークンは現在の Quarkus の web-app エンドポイントへのアクセスには使用されず、このアクセストークンを必要とするサービスに伝播されることが意図されているため、デフォルトでは `IdToken` のみが検証されます。\n"
"アクセストークンに現在の Quarkus エンドポイント (`quarkus.oidc.roles.source=accesstoken`) にアクセスするために必要なロールが含まれていることが予想される場合は、それも検証されます。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Token introspection and UserInfo cache"
msgstr "トークンのイントロスペクションと UserInfo のキャッシュ"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Code flow access tokens are not introspected unless they are expected to be the source of roles.\n"
"However, they will be used to get `UserInfo`.\n"
"There will be one or two remote calls with the code flow access token if the token introspection, `UserInfo`, or both are required."
msgstr ""
"コードフローアクセストークンは、ロールのソースであると予想されない限り、イントロスペクトされません。\n"
"ただし、これらは `UserInfo` を取得するために使用されます。\n"
"トークンイントロスペクション または `UserInfo`、あるいはその両方が必要な場合は、コードフローアクセストークンを使用したリモート呼び出しが 1 回または 2 回発生します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For more information about using the default token cache or registering a custom cache implementation, see xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[Token introspection and UserInfo cache]."
msgstr "デフォルトのトークンキャッシュの使用またはカスタムキャッシュ実装の登録の詳細は、xref:security-oidc-bearer-token-authentication.adoc#token-introspection-userinfo-cachexref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[トークンのイントロスペクションと UserInfo のキャッシュ] を参照してください。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "JSON web token claim verification"
msgstr "JSON Web トークンのクレーム検証"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For information about the claim verification, including the `iss` (issuer) claim, see the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-jwt-claim-verification[JSON Web Token claim verification] section.\n"
"It applies to ID tokens and also to access tokens in a JWT format, if the `web-app` application has requested the access token verification."
msgstr ""
"`iss` (発行者) クレームを含むクレーム検証の詳細は、xref:security-oidc-bearer-token-authentication.adoc#bearer-token-jwt-claim-verification[JSON Web Token クレーム検証] セクションを参照してください。\n"
"これは、ID トークンに適用され、 `web-app` アプリケーションがアクセストークンの検証をリクエストした場合は、JWT 形式のアクセストークンにも適用されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Jose4j Validator"
msgstr "Jose4j Validator"

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can register a custom Jose4j Validator to customize the JWT claim verification process. See the xref:security-oidc-bearer-token-authentication.adoc#jose4j-validator-bearer[Jose4j] section for more information."
msgstr "カスタムJose4j Validatorを登録して、JWTクレーム検証プロセスをカスタマイズできます。詳細は xref:security-oidc-bearer-token-authentication.adoc#jose4j-validator-bearer[Jose4j の] セクションを参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Proof Key for Code Exchange (PKCE)"
msgstr "Proof Key for Code Exchange (PKCE)"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of authorization code interception."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) は、認可コードの傍受のリスクを最小限に抑えます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"While PKCE is of primary importance to public OIDC clients, such as SPA scripts running in a browser, it can also provide extra protection to Quarkus OIDC `web-app` applications.\n"
"With PKCE, Quarkus OIDC `web-app` applications act as confidential OIDC clients that can securely store the client secret and use it to exchange the code for the tokens."
msgstr ""
"PKCE は、ブラウザーで実行される SPA スクリプトなどのパブリック OIDC クライアントにとって最も重要ですが、Quarkus OIDC `web-app` アプリケーションに追加の保護を提供することもできます。\n"
"PKCE を使用すると、Quarkus OIDC `web-app` アプリケーションは、クライアントシークレットを安全に保存し、それを使用してトークンのコードを交換できる機密 OIDC クライアントとして機能します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can enable PKCE for your OIDC web-app endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32-character secret that is required to encrypt the PKCE code verifier in the state cookie, as shown in the following example:"
msgstr "次の例に示すように、 `quarkus.oidc.authentication.pkce-required` プロパティーと、状態クッキーの PKCE コード検証を暗号化するために必要な 32 文字のシークレットを使用して、OIDC web-app エンドポイントの PKCE を有効にすることができます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you already have a 32-character client secret, you do not need to set the  `quarkus.oidc.authentication.pkce-secret` property unless you prefer to use a different secret key.\n"
"This secret will be auto-generated if it is not configured and if the fallback to the client secret is not possible in cases where the client secret is less than 16 characters long."
msgstr ""
"すでに 32 文字のクライアントシークレットがある場合は、別のシークレットキーを使用する場合を除き、 `quarkus.oidc.authentication.pkce-secret` プロパティーを設定する必要はありません。\n"
"このシークレットは、設定されていない場合、およびクライアントシークレットの長さが 16 文字未満でクライアントシークレットへのフォールバックが不可能な場合に、自動生成されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The secret key is required to encrypt a randomly generated PKCE `code_verifier` while the user is redirected with the `code_challenge` query parameter to an OIDC provider to authenticate.\n"
"The `code_verifier` is decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret, and other parameters to complete the code exchange.\n"
"The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` that was provided during the authentication request."
msgstr ""
"秘密鍵は、ランダムに生成された PKCE `code_verifier` を暗号化するために必要です。一方、ユーザーは `code_challenge` クエリーパラメーターを使用して OIDC プロバイダーにリダイレクトされ、認証されます。\n"
"`code_verifier` は、ユーザーが Quarkus にリダイレクトされるときに復号化され、 `code`、クライアントシークレット、およびその他のパラメーターとともにトークンエンドポイントに送信され、コード交換が完了します。\n"
"`code_verifier` の `SHA256` ダイジェストが、認証のリクエスト時に提供された `code_challenge` と一致しない場合、プロバイダーはコード交換に失敗します。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Handling and controlling the lifetime of authentication"
msgstr "認証のライフタイムの処理と制御"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Another important requirement for authentication is to ensure that the data the session is based on is up-to-date without requiring the user to authenticate for every single request.\n"
"There are also situations where a logout event is explicitly requested.\n"
"Use the following key points to find the right balance for securing your Quarkus applications:"
msgstr ""
"認証のもう 1 つの重要な要件は、ユーザーがリクエストのたびに認証をリクエストすることなく、セッションの基となるデータが最新であることを保証することです。\n"
"また、ログアウトイベントが明示的にリクエストされる状況もあります。\n"
"以下のポイントを参考に、Quarkus アプリケーションのセキュリティーを確保するための適切なバランスを見つけます。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Cookies"
msgstr "クッキー"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC adapter uses cookies to keep the session, code flow, and post-logout state.\n"
"This state is a key element controlling the lifetime of authentication data."
msgstr ""
"OIDC アダプターはクッキーを使用して、セッション、コードフロー、ログアウト後の状態を保持します。\n"
"この状態は、認証データの寿命を制御する重要な要素です。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Use the `quarkus.oidc.authentication.cookie-path` property to ensure that the same cookie is visible when you access protected resources with overlapping or different roots.\n"
"For example:"
msgstr ""
"`quarkus.oidc.authentication.cookie-path` プロパティーを使用すると、保護されたリソースに重複または異なるルートでアクセスしたときに、同じクッキーが表示されるようになります。\n"
"例:"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`/index.html` and `/web-app/service`"
msgstr "`/index.html` と `/web-app/service`"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr "`/web-app/service1` と `/web-app/service2`"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr "`/web-app1/service` と `/web-app2/service`"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "By default, `quarkus.oidc.authentication.cookie-path` is set to `/` but you can change this to a more specific path if required, for example, `/web-app`."
msgstr "デフォルトでは、 `quarkus.oidc.authentication.cookie-path` は `/` に設定されていますが、必要に応じてこれを `/web-app` などのより具体的なパスに変更できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"To set the cookie path dynamically, configure the `quarkus.oidc.authentication.cookie-path-header` property.\n"
"For example, to set the cookie path dynamically by using the value of the `X-Forwarded-Prefix` HTTP header, configure the property to `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix`."
msgstr ""
"Cookie パスを動的に設定するには、 `quarkus.oidc.authentication.cookie-path-header` プロパティーを設定します。\n"
"たとえば、 `X-Forwarded-Prefix` HTTP ヘッダーの値を使用して Cookie パスを動的に設定するには、プロパティーを `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix` に設定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request, then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr "`quarkus.oidc.authentication.cookie-path-header` が設定されているが、現在のリクエストで設定された HTTP ヘッダーが利用できない場合は、 `quarkus.oidc.authentication.cookie-path` がチェックされます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If your application is deployed across multiple domains, set the `quarkus.oidc.authentication.cookie-domain` property so that the session cookie is visible to all protected Quarkus services.\n"
"For example, if you have Quarkus services deployed on the following two domains, then you must set the `quarkus.oidc.authentication.cookie-domain` property to `company.net`:"
msgstr ""
"アプリケーションが複数のドメインにまたがってデプロイされている場合は、セッションクッキー がすべての保護された Quarkus サービスに表示されるように、 `quarkus.oidc.authentication.cookie-domain` プロパティーを設定します。\n"
"たとえば、次の 2 つのドメインに Quarkus サービスをデプロイしている場合は、 `quarkus.oidc.authentication.cookie-domain` プロパティーを `company.net` に設定する必要があります。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "\\https://whatever.wherever.company.net/"
msgstr "\\https://whatever.wherever.company.net/"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "\\https://another.address.company.net/"
msgstr "\\https://another.address.company.net/"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "State cookies"
msgstr "状態 Cookie"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"State cookies are used to support authorization code flow completion.\n"
"When an authorization code flow is started, Quarkus creates a state cookie and a matching `state` query parameter, before redirecting the user to the OIDC provider.\n"
"When the user is redirected back to Quarkus to complete the authorization code flow, Quarkus expects that the request URI must contain the `state` query parameter and it must match the current state cookie value."
msgstr ""
"状態 Cookie は、認可コードフローの完了をサポートするために使用されます。\n"
"認可コードフローが開始されると、Quarkus はユーザーを OIDC プロバイダーにリダイレクトする前に、状態 Cookie と一致する `state` クエリーパラメーターを作成します。\n"
"ユーザーが認可コードフローを完了するために Quarkus にリダイレクトされると、Quarkus はリクエスト URI に `state` クエリーパラメーターが含まれており、それが現在の状態 Cookie の値と一致していると想定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The default state cookie age is 5 mins and you can change it with a `quarkus.oidc.authentication.state-cookie-age` Duration property."
msgstr "デフォルトの状態 Cookie の有効期間は 5 分ですが、これは `quarkus.oidc.authentication.state-cookie-age` Duration プロパティーを使用して変更できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Quarkus creates a unique state cookie name every time a new authorization code flow is started to support multi-tab authentication. Many concurrent authentication requests on behalf of the same user may cause a lot of state cookies be created.\n"
"If you do not want to allow your users use multiple browser tabs to authenticate then it is recommended to disable it with `quarkus.oidc.authentication.allow-multiple-code-flows=false`. It also ensures that the same state cookie name is created for every new user authentication."
msgstr ""
"Quarkus は、マルチタブ認証をサポートするために、新しい認可コードフローが開始されるたびに一意の状態 Cookie 名を作成します。同じユーザーによる多数の同時認証リクエストにより、多数の状態 Cookie が作成される場合があります。\n"
"ユーザーに対して、複数のブラウザータブを使用した認証を許可しない場合は、 `quarkus.oidc.authentication.allow-multiple-code-flows=false` で無効にすることが推奨されます。これにより、新しいユーザー認証ごとに同じ状態 Cookie 名が作成されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Session cookie and default TokenStateManager"
msgstr "セッションクッキーとデフォルトの TokenStateManager"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC `CodeAuthenticationMechanism` uses the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access, and refresh tokens returned in the authorization code or refresh grant responses in an encrypted session cookie."
msgstr "OIDC `CodeAuthenticationMechanism` は、デフォルトの `io.quarkus.oidc.TokenStateManager` インターフェイス実装を使用して、認可コードまたはリフレッシュ付与応答で返された ID、アクセストークン、およびリフレッシュトークンを暗号化されたセッションクッキーに保存します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "It makes Quarkus OIDC endpoints completely stateless and it is recommended to follow this strategy to achieve the best scalability results."
msgstr "これにより、Quarkus OIDC エンドポイントは完全にステートレスになり、最高のスケーラビリティー結果を達成するには、このストラテジーに従うことが推奨されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Refer to the <<db-token-state-manager>> section of this guide for information on storing tokens in the database or other server-side storage solutions. This approach is suitable if you prefer and have compelling reasons to store the token state on the server."
msgstr "データベースまたはその他のサーバー側ストレージソリューションにトークンを保存する方法は、このガイドの <<db-token-state-manager>> セクションを参照してください。この方法は、何らかの理由でトークンの状態をサーバー上に保存する必要がある場合に適しています。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "See the <<custom-token-state-manager>> section for alternative methods of token storage. This is ideal for those seeking customized solutions for token state management, especially when standard server-side storage does not meet your specific requirements."
msgstr "トークン保存の代替方法については、<<custom-token-state-manager>> セクションを参照してください。これは特に、標準のサーバー側ストレージが要件を満たしていないなどの理由から、トークン状態管理のカスタマイズソリューションが必要な場合に最適です。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure the default `TokenStateManager` to avoid saving an access token in the session cookie and to only keep ID and refresh tokens or a single ID token only."
msgstr "デフォルトの `TokenStateManager` を設定すると、アクセストークンをセッションクッキーに保存せずに、ID トークンとリフレッシュトークンのみ、または単一の ID トークンのみを保持できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "An access token is only required if the endpoint needs to do the following actions:"
msgstr "アクセストークンは、エンドポイントが次のアクションを実行する必要がある場合にのみ必要です。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Retrieve `UserInfo`"
msgstr "`UserInfo` の取得"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Access the downstream service with this access token"
msgstr "このアクセストークンを使用したダウンストリームサービスへのアクセス"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Use the roles associated with the access token, which are checked by default"
msgstr "デフォルトでチェックされるアクセストークンに関連付けられたロールの使用"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "In such cases, use the `quarkus.oidc.token-state-manager.strategy` property to configure the token state strategy as follows:"
msgstr "このような場合は、 `quarkus.oidc.token-state-manager.strategy` プロパティーを使用して、トークン状態ストラテジーを次のように設定します。"

#. type: Table
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "To..."
msgstr "以下の場合"

#. type: Table
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Set the property to ..."
msgstr "プロパティーを以下に設定する"

#. type: Table
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Keep the ID and refresh tokens only"
msgstr "ID とリフレッシュトークンのみを保存する場合"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.token-state-manager.strategy=id-refresh-tokens`"
msgstr "`quarkus.oidc.token-state-manager.strategy=id-refresh-tokens`"

#. type: Table
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Keep the ID token only"
msgstr "ID トークンのみを保存する場合"

#. type: Table
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "`quarkus.oidc.token-state-manager.strategy=id-token`"
msgstr "`quarkus.oidc.token-state-manager.strategy=id-token`"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If your chosen session cookie strategy combines tokens and generates a large session cookie value that is greater than 4KB, some browsers might not be able to handle such cookie sizes.\n"
"This can occur when the ID, access, and refresh tokens are JWT tokens and the selected strategy is `keep-all-tokens` or with ID and refresh tokens when the strategy is `id-refresh-token`.\n"
"To work around this issue, you can set `quarkus.oidc.token-state-manager.split-tokens=true` to create a unique session token for each token.\n"
"An alternative solution is to have the tokens saved in the database.\n"
"For more information, see <<db-token-state-manager>>."
msgstr ""
"選択したセッションクッキーストラテジーがトークンを組み合わせ、4 KB を超える大きなセッションクッキー値が生成される場合、一部のブラウザーではそのようなクッキーサイズを処理できない可能性があります。\n"
"これは、ID、アクセストークン、およびリフレッシュトークンが JWT トークンで、選択されたストラテジーが `keep-all-tokens` の場合、またはストラテジーが `id-refresh-token` の場合にID トークンとリフレッシュトークンで発生する可能性があります。\n"
"この問題を回避するには、 `quarkus.oidc.token-state-manager.split-tokens=true` を設定して、トークンごとに一意のセッショントークンを作成します。\n"
"別の解決策として、トークンをデータベースに保存することが挙げられます。\n"
"詳細は、<<db-token-state-manager>> を参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The default `TokenStateManager` encrypts the tokens before storing them in the session cookie.\n"
"The following example shows how you configure it to split the tokens and encrypt them:"
msgstr ""
"デフォルトの `TokenStateManager` は、トークンをセッションクッキーに保存する前に暗号化します。\n"
"次の例は、トークンを分割して暗号化するように設定する方法を示しています。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The token encryption secret must be at least 32 characters long.\n"
"If this key is not configured, then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
msgstr ""
"トークンの暗号化シークレットは 32 文字以上である必要があります。\n"
"このキーが設定されていない場合は、 `quarkus.oidc.credentials.secret` または `quarkus.oidc.credentials.jwt.secret` のいずれかがハッシュ化されて暗号化キーが作成されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Configure the `quarkus.oidc.token-state-manager.encryption-secret` property if Quarkus authenticates to the OIDC provider by using one of the following authentication methods:"
msgstr "Quarkus が次のいずれかの認証方法を使用して OIDC プロバイダーに対して認証する場合は、 `quarkus.oidc.token-state-manager.encryption-secret` プロパティーを設定します。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "mTLS"
msgstr "mTLS"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`private_key_jwt`, where a private RSA or EC key is used to sign a JWT token"
msgstr "`private_key_jwt` では、秘密の RSA または EC キーを使用して JWT トークンに署名します。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Otherwise, a random key is generated, which can be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
msgstr "これ以外の場合は、ランダムなキーが生成されますが、Quarkus アプリケーションがクラウドで実行され、複数の Pod がリクエストを管理している場合、問題が発生する可能性があります。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can disable token encryption in the session cookie by setting `quarkus.oidc.token-state-manager.encryption-required=false`."
msgstr "`quarkus.oidc.token-state-manager.encryption-required=false` を設定することで、セッションクッキーでのトークン暗号化を無効にすることができます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Session cookie and custom TokenStateManager"
msgstr "セッションクッキーとカスタムTokenStateManager"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If you want to customize the way the tokens are associated with the session cookie, register a custom `io.quarkus.oidc.TokenStateManager` implementation as an `@ApplicationScoped` CDI bean."
msgstr "トークンをセッションクッキーに関連付ける方法をカスタマイズしたい場合は、カスタム `io.quarkus.oidc.TokenStateManager' 実装を `@ApplicationScoped` CDI Bean として登録します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For example, you might want to keep the tokens in a cache cluster and have only a key stored in a session cookie.\n"
"Note that this approach might introduce some challenges if you need to make the tokens available across multiple microservices nodes."
msgstr ""
"たとえば、トークンをキャッシュクラスターに保持し、キーのみをセッションクッキーに保存することを推奨します。\n"
"トークンを複数のマイクロサービスノードで利用できるようにする必要がある場合、このアプローチではいくつかの課題が生じる可能性があることに注意してください。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Here is a simple example:"
msgstr "簡単な例を挙げてみます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For information about the default `TokenStateManager` storing tokens in an encrypted session cookie, see <<token-state-manager>>."
msgstr "暗号化されたセッションクッキーにトークンを保存するデフォルトの `TokenStateManager` の詳細は、<<token-state-manager>> を参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For information about the custom Quarkus `TokenStateManager` implementation storing tokens in a database, see <<db-token-state-manager>>."
msgstr "トークンをデータベースに保存するカスタム Quarkus `TokenStateManager` 実装の詳細は、<<db-token-state-manager>> を参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Database TokenStateManager"
msgstr "データベース TokenStateManager"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If you prefer to follow a stateful token storage strategy, you can use a custom `TokenStateManager` provided by Quarkus to have your application store tokens in a database, instead of storing them in an encrypted session cookie,  which is done by default as described in the <<token-state-manager>> section."
msgstr "ステートフルなトークンストレージストラテジーを採用したい場合は、Quarkus が提供するカスタムの `TokenStateManager` を使用して、アプリケーションがトークンを暗号化されたセッションクッキーに保存するのではなく、データベースに保存することができます。これは、<<token-state-manager>> セクションに記載されているとおり、デフォルトで設定されています。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "To use this feature, add the following extension to your project:"
msgstr "この機能を使用するには、以下のエクステンションをプロジェクトに追加します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "This extension will replace the default `io.quarkus.oidc.TokenStateManager` with a database-based one."
msgstr "このエクステンションは、デフォルトの `io.quarkus.oidc.TokenStateManager' をデータベースをベースとするものに置き換えます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC Database Token State Manager uses a Reactive SQL client under the hood to avoid blocking because the authentication is likely to happen on an IO thread."
msgstr "OIDC Database Token State Manager は、認証が IO スレッドで行われる可能性が高いため、ブロックを回避するために内部で Reactive SQL クライアントを使用します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Depending on your database, include and configure exactly one xref:reactive-sql-clients.adoc[Reactive SQL client].\n"
"The following Reactive SQL clients are supported:"
msgstr ""
"データベースに応じて、xref:reactive-sql-clients.adoc[Reactive SQL クライアント] を 1 つだけ含めて設定します。\n"
"次の Reactive SQL クライアントがサポートされています。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive Microsoft SQL client"
msgstr "Reactive Microsoft SQL クライアント"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive MySQL client"
msgstr "Reactive MySQL クライアント"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive PostgreSQL client"
msgstr "Reactive PostgreSQL クライアント"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive Oracle client"
msgstr "Reactive Oracle クライアント"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive DB2 client"
msgstr "Reactive DB2 クライアント"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Your application is not required to switch to using the Reactive SQL client if it already uses Hibernate ORM with one of the JDBC driver extensions."
msgstr "アプリケーションがすでにいずれかの JDBC ドライバーエクステンションを備えた Hibernate ORM を使用している場合は、Reactive SQL クライアントを使用するように切り替える必要はありません。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For example, you already have an application that uses the Hibernate ORM extension together with a PostgreSQL JDBC Driver and your datasource is configured like this:"
msgstr "たとえば、Hibernate ORM エクステンションと PostgreSQL JDBC ドライバーを併用するアプリケーションがすでにあり、データソースが次のように設定されているとします。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Now, if you decided to use OIDC Database Token State Manager, you must add the following dependencies and set a reactive driver URL:"
msgstr "ここで、OIDC Database Token State Manager を使用することにした場合は、次の依存関係を追加し、リアクティブドライバー URL を設定する必要があります。"

#. type: Block title
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Now, the tokens are ready to be stored in the database."
msgstr "これで、トークンをデータベースに保存する準備が整いました。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"By default, a database table used for storing tokens is created for you, however, you can disable this option with the `quarkus.oidc.db-token-state-manager.create-database-table-if-not-exists` configuration property.\n"
"Should you want the Hibernate ORM extension to create this table instead, you must just include an Entity, such as the following:"
msgstr ""
"デフォルトでは、トークンの保存に使用されるデータベーステーブルが作成されますが、 `quarkus.oidc.db-token-state-manager.create-database-table-if-not-exists` 設定プロパティーを使用して、このオプションを無効にすることができます。\n"
"代わりに Hibernate ORM エクステンションでこのテーブルを作成する場合は、次のように Entity を含める必要があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The Hibernate ORM extension will only create this table for you when the database schema is generated.\n"
"For more information, refer to the xref:hibernate-orm.adoc[Hibernate ORM] guide."
msgstr ""
"Hibernate ORM エクステンションは、データベーススキーマが生成された場合にのみ、このテーブルを作成します。\n"
"詳細は、xref:hibernate-orm.adoc[Hibernate ORM] ガイドを参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can choose a column length depending on the length of your tokens."
msgstr "トークンの長さに応じて列の長さを選択できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Redis TokenStateManager"
msgstr "Redis TokenStateManager"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Another approach for a stateful token storage strategy is a custom `TokenStateManager` provided by Quarkus to have your application store tokens in a Redis cache.\n"
"If you decided to use the OIDC Redis Token State Manager, you must add the following dependency:"
msgstr ""
"ステートフルトークンストレージストラテジーの別の方法として、、Quarkus が提供するカスタム `TokenStateManager` を使用して、アプリケーションでトークンを Redis キャッシュに保存する方法があります。\n"
"OIDC Redis Token State Manager を使用する場合は、次の依存関係を追加する必要があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Quarkus stores tokens in the default Redis client.\n"
"If you prefer to use different Redis client, you can configure it like in the example below:"
msgstr ""
"Quarkus はトークンをデフォルトの Redis クライアントに保存します。\n"
"別の Redis クライアントを使用する場合は、次の例のように設定できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The `my-redis-client` name must correspond to the Redis client config key specified with `quarkus.redis.my-redis-client.*` configuration properties."
msgstr "`my-redis-client` の名前は、 `quarkus.redis.my-redis-client.*` 設定プロパティーで指定された Redis クライアント設定キーに対応している必要があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Please refer to the xref:redis-reference.adoc[Quarkus Redis Client reference] for information how to configure the Redis client."
msgstr "Redis クライアントの設定方法については、xref:redis-reference.adoc[Quarkus Redis クライアントリファレンス] を参照してください。"

#. SJ: In next iteration, propose to recompose Logout information into a new concept topic
#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Logout and expiration"
msgstr "ログアウトと有効期限"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "There are two main ways for the authentication information to expire: the tokens expired and were not renewed or an explicit logout operation was triggered."
msgstr "認証情報が期限切れになる主な方法は 2 つあります。トークンの有効期限が切れて更新されなかった場合と、明示的なログアウト操作がトリガーされた場合です。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Let's start with explicit logout operations."
msgstr "最初に、明示的なログアウト操作について説明します。"

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can request setting https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Clear-Site-Data[Clear-Site-Data] directives for all of the logout operations with a `quarkus.oidc.logout.clear-site-data` configuration property. For example:"
msgstr "ログアウト操作のすべてに link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Clear-Site-Data[Clear-Site-Data] ディレクティブを設定するには、 `quarkus.oidc.logout.clear-site-data` 設定プロパティを使用します。例えば"

#. type: Title =====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "User-initiated logout"
msgstr "User-initiated logout"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to `/logout`, then the logout request must be sent to `https://application.com/webapp/logout`."
msgstr ""
"ユーザーは、 `quarkus.oidc.logout.path` プロパティーで設定された Quarkus エンドポイントのログアウトパスにリクエストを送信することで、ログアウトをリクエストできます。\n"
"たとえば、エンドポイントアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.path` が `/logout` に設定されている場合、ログアウトリクエストは `https://application.com/webapp/logout` に送信される必要があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"This logout request starts an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout].\n"
"The user will be redirected to the OIDC provider to log out, where they can be asked to confirm the logout is indeed intended."
msgstr ""
"このログアウトリクエストは、 https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated ログアウト] を開始します。\n"
"ユーザはログアウトするために OIDC プロバイダーにリダイレクトされ、そこでログアウトが本当に意図されたものであるか確認されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The user will be returned to the endpoint post-logout page once the logout has been completed and if the `quarkus.oidc.logout.post-logout-path` property is set.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to `/signin`, then the user will be returned to `https://application.com/webapp/signin`.\n"
"Note, this URI must be registered as a valid `post_logout_redirect_uri` in the OIDC provider."
msgstr ""
"ログアウトが完了し、 `quarkus.oidc.logout.post-logout-path` プロパティーが設定されている場合、ユーザーはエンドポイントのログアウト後のページに戻されます。\n"
"たとえば、エンドポイントアドレスが `https://application.com/webapp` で、 `quarkus.oidc.logout.post-logout-path` が `/signin` に設定されている場合、ユーザーは `https://application.com/webapp/signin` に戻されます。\n"
"この URI は、OIDC プロバイダーで有効な `post_logout_redirect_uri` として登録されている必要があることに注意してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the `quarkus.oidc.logout.post-logout-path` is set, then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OIDC provider will return this `state` once the logout has been completed.\n"
"It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie, which can be done, for example, in a Jakarta REST filter."
msgstr ""
"`quarkus.oidc.logout.post-logout-path` が設定されている場合、 `q_post_logout` クッキーが作成され、一致する `state` クエリーパラメーターがログアウトリダイレクト URI に追加され、ログアウトが完了すると OIDC プロバイダーはこの `state` を返します。\n"
"Quarkus の `web-app` アプリケーションでは、 `state` クエリーパラメーターが `q_post_logout` クッキーの値と一致することを確認することを推奨します。これは、たとえば Jakarta REST フィルターで実行できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Note that a cookie name varies when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy].\n"
"For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
msgstr ""
"xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy] を使用する場合、クッキー名が異なることに注意してください。\n"
"たとえば、 `tenant_1` ID を持つテナントの場合は `q_post_logout_tenant_1` という名前になります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Here is an example of how to configure a Quarkus application to initiate a logout flow:"
msgstr "ログアウトフローを開始するように Quarkus アプリケーションを設定する方法の例を次に示します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You might also want to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources, which is `/` in this example.\n"
"For more information, see the <<oidc-cookies,Cookies>> section."
msgstr ""
"また、 `quarkus.oidc.authentication.cookie-path` をすべてのアプリケーションリソースに共通のパス値 (この例では `/`) に設定することも推奨します。\n"
"詳細は、<<oidc-cookies,Cookies>> セクションを参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers do not support a link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification and do not return an OpenID Connect well-known `end_session_endpoint` metadata property.\n"
"However, this is not a problem for Quarkus because the specific logout mechanisms of such OIDC providers only differ in how the logout URL query parameters are named."
msgstr ""
"一部の OIDC プロバイダーは、link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated ログアウト] 仕様をサポートしておらず、OpenID Connect の周知の `end_session_endpoint` メタデータプロパティーを返しません。\n"
"ただし、このような OIDC プロバイダーの特定のログアウトメカニズムは、ログアウト URL クエリーパラメーターの命名方法のみが異なるため、Quarkus にとってはこれは問題ではありません。"

#. type: delimited block =
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter, which is not recognized by the providers that do not support this specification."
msgstr "https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated ログアウト] 仕様によれば、 `quarkus.oidc.logout.post-logout-path` プロパティーは `post_logout_redirect_uri` クエリーパラメーターとして表されますが、この仕様をサポートしていないプロバイダーでは認識されません。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue.\n"
"You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`.\n"
"For example, here is how you can support a logout with `Auth0`:"
msgstr ""
"この問題を回避するには、 `quarkus.oidc.logout.post-logout-url-param` を使用できます。\n"
"`quarkus.oidc.logout.extra-params` で追加されたログアウトクエリーパラメーターをさらにリクエストすることもできます。\n"
"たとえば、 `Auth0` でログアウトをサポートする方法は次のとおりです。"

#. type: Title =====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Back-channel logout"
msgstr "バックチャネルログアウト"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC provider can force the logout of all applications by using the authentication data.\n"
"This is known as back-channel logout.\n"
"In this case, the OIDC will call a specific URL from each application to trigger that logout."
msgstr ""
"OIDC プロバイダーは、認証データを使用して、すべてのアプリケーションを強制的にログアウトさせることができます。\n"
"これはバックチャネルログアウトとして知られています。\n"
"この場合、OIDC は各アプリケーションから特定の URL を呼び出し、ログアウトをトリガーします。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC providers use link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-channel logout] to log out the current user from all the applications into which this user is currently logged in, bypassing the user agent."
msgstr "OIDC プロバイダーは、link:https://openid.net/specs/openid-connect-backchannel-1_0.html[バックチャネルログアウト] を使用して、ユーザエージェントをバイパスして、そのユーザが現在ログインしているすべてのアプリケーションから現在のユーザをログアウトします。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure Quarkus to support Back-channel logout as follows:"
msgstr "バックチャネルログアウトをサポートするように Quarkus を設定するには、次のようにします。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The absolute `back-channel logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`.\n"
"You will need to configure this URL in the admin console of your OIDC provider."
msgstr ""
"絶対的な `back-channel logout` URL は、現在のエンドポイント URL に `quarkus.oidc.back-channel-logout.path` を追加することによって計算されます (例: `http://localhost:8080/back-channel-logout`)。\n"
"この URL は、OIDC プロバイダーの管理コンソールで設定する必要があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You will also need to configure a token age property for the logout token verification to succeed if your OIDC provider does not set an expiry claim in the current logout token.\n"
"For example, set `quarkus.oidc.token.age=10S` to ensure that no more than 10 seconds elapse since the logout token's `iat` (issued at) time."
msgstr ""
"OIDC プロバイダーが、現在のログアウトトークンに有効期限を設定していない場合、ログアウトトークンの検証が成功するようにトークンの有効期間プロパティーを設定する必要もあります。\n"
"たとえば、ログアウトトークンの `iat` (発行時刻) から 10 秒超過しないようにするには、 `quarkus.oidc.token.age=10S` を設定します。"

#. type: Title =====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Front-channel logout"
msgstr "フロントチャネルログアウト"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can use link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-channel logout] to log out the current user directly from the user agent, for example, its browser.\n"
"It is similar to <<back-channel-logout,Back-channel logout>> but the logout steps are executed by the user agent, such as the browser, and not in the background by the OIDC provider.\n"
"This option is rarely used."
msgstr ""
"link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[フロントチャネルログアウト] のリンクを使用すると、ブラウザーなどのユーザーエージェントから現在のユーザーを直接ログアウトできます。\n"
"これは <<back-channel-logout,Back-channel logout>> と似ていますが、ログアウト手順はブラウザーなどのユーザーエージェントによって実行され、OIDC プロバイダーがバックグラウンドで実行することはありません。\n"
"これは、ほとんど使用されないオプションです。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure Quarkus to support Front-channel logout as follows:"
msgstr "Quarkus でフロントチャネルのログアウトをサポートするには、以下のように設定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "This path will be compared to the current request's path, and the user will be logged out if these paths match."
msgstr "このパスは現在のリクエストのパスと比較され、これらのパスがマッチする 場合、ユーザはログアウトします。"

#. type: Title =====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Local logout"
msgstr "ローカルログアウト"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"<<user-initiated-logout,User-initiated logout>> will log the user out of the OIDC provider.\n"
"If it is used as single sign-on, it might not be what you require.\n"
"If, for example, your OIDC provider is Google, you will be logged out from Google and its services.\n"
"Instead, the user might just want to log out of that specific application.\n"
"Another use case might be when the OIDC provider does not have a logout endpoint."
msgstr ""
"<<user-initiated-logout,User-initiated logout>> は、ユーザーを OIDC プロバイダーからログアウトします。\n"
"これをシングルサインオンとして使用する場合は、必要とするものではない可能性があります。\n"
"たとえば、OIDC プロバイダーが Google の場合、Google とそのサービスからログアウトされます。\n"
"代わりに、ユーザーはその特定のアプリケーションからログアウトしたいだけかもしれません。\n"
"もう 1 つのユースケースとしては、OIDC プロバイダーにログアウトエンドポイントがない場合が考えられます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "By using <<oidc-session,OidcSession>>, you can support a local logout, which means that only the local session cookie is cleared, as shown in the following example:"
msgstr "<<oidc-session,OidcSession>> を使用することで、ローカルログアウトをサポートできます。つまり、次の例に示すように、ローカルセッションクッキーのみがクリアされます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Using `OidcSession` for local logout"
msgstr "`OidcSession` をローカルログアウトに使用"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`, which can help to perform a <<local-logout,Local logout>>, retrieve the current session's tenant identifier, and check when the session will expire.\n"
"More useful methods will be added to it over time."
msgstr ""
"`io.quarkus.oidc.OidcSession` は現在の `IdToken` のラッパーで、<<local-logout,Local logout>> の実行、現行セッションのテナント識別子の取得、セッションの有効期限の確認を行う上で役に立ちます。\n"
"今後、より便利なメソッドが追加される予定です。"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Session management"
msgstr "セッション管理"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"By default, logout is based on the expiration time of the ID token issued by the OIDC provider.\n"
"When the ID token expires, the current user session at the Quarkus endpoint is invalidated, and the user is redirected to the OIDC provider again to authenticate.\n"
"If the session at the OIDC provider is still active, users are automatically re-authenticated without needing to provide their credentials again."
msgstr ""
"デフォルトでは、ログアウトは OIDC プロバイダーによって発行された ID トークンの有効期限に基づいて行われます。\n"
"ID トークンの有効期限が切れると、Quarkus エンドポイントでの現在のユーザーセッションは無効になり、ユーザーは認証のために再度 OIDC プロバイダーにリダイレクトされます。\n"
"OIDC プロバイダーのセッションが引き続き有効な場合、ユーザーは再度クレデンシャルを入力することなく、自動的に再認証されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The current user session can be automatically extended by enabling the `quarkus.oidc.token.refresh-expired` property.\n"
"If set to `true`, when the current ID token expires, a refresh token grant will be used to refresh the ID token as well as access and refresh tokens."
msgstr ""
"`quarkus.oidc.token.refresh-expired` プロパティーを有効にすると、現在のユーザーセッションを自動的に延長できます。\n"
"`true` に設定すると、現在の ID トークンの有効期限が切れたときに、リフレッシュトークンの付与を使用して、ID トークンだけでなくアクセストークンとリフレッシュトークンもリフレッシュされます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If you have a xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[single page application for service applications] where your OIDC provider script such as `keycloak.js` is managing an authorization code flow, then that script will also control the SPA authentication session lifespan."
msgstr "`keycloak.js` などの OIDC プロバイダースクリプトが認可コードフローを管理している xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[サービスアプリケーション用のシングルページアプリケーション] がある場合、そのスクリプトは SPA 認証セッションの有効期間も制御します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If you work with a Quarkus OIDC `web-app` application, then the Quarkus OIDC code authentication mechanism manages the user session lifespan."
msgstr "Quarkus OIDC `web-app` アプリケーションを使用する場合、Quarkus OIDC コード認証メカニズムがユーザーセッションの有効期間を管理します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"To use the refresh token, you should carefully configure the session cookie age.\n"
"The session age should be longer than the ID token lifespan and close to or equal to the refresh token lifespan."
msgstr ""
"リフレッシュトークンを使用するには、セッションクッキーの有効期間を慎重に設定する必要があります。\n"
"セッションの有効期間は、ID トークンの有効期間よりも長く、リフレッシュトークンの有効期間と近いか等しい必要があります。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You calculate the session age by adding the lifespan value of the current ID token and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties."
msgstr "セッションの有効期間は、現在の ID トークンの有効期間の値と、 `quarkus.oidc.authentication.session-age-extension` プロパティーおよび `quarkus.oidc.token.lifespan-grace` プロパティーの値を加算して計算します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You use only the `quarkus.oidc.authentication.session-age-extension` property to significantly extend the session lifespan, if required.\n"
"You use the `quarkus.oidc.token.lifespan-grace` property only to consider some small clock skews."
msgstr ""
"必要に応じて、 `quarkus.oidc.authentication.session-age-extension` プロパティーのみを使用して、セッションの有効期間を大幅に延長します。\n"
"`quarkus.oidc.token.lifespan-grace` プロパティーは、小さなクロックスキューを考慮する場合にのみ使用します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"When the current authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired, then, by default, the user is automatically redirected to the OIDC Authorization endpoint to re-authenticate.\n"
"The OIDC provider might challenge the user again if the session between the user and this OIDC provider is still active, which might happen if the session is configured to last longer than the ID token."
msgstr ""
"現在認証されているユーザーが、保護された Quarkus エンドポイントに戻り、セッションクッキーに関連付けられた ID トークンの有効期限が切れると、デフォルトでは、ユーザーは再認証のために OIDC 認可エンドポイントに自動的にリダイレクトされます。\n"
"ユーザーとこの OIDC プロバイダー間のセッションがまだアクティブな場合、OIDC プロバイダーはユーザーに再度チャレンジする可能性があります。これは、セッションが ID トークンよりも長く続くように設定されている場合に発生する可能性があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the `quarkus.oidc.token.refresh-expired` is set to `true`, then the expired ID token (and the access token) is refreshed by using the refresh token returned with the initial authorization code grant response.\n"
"This refresh token might also be recycled (refreshed) itself as part of this process.\n"
"As a result, the new session cookie is created, and the session is extended."
msgstr ""
"`quarkus.oidc.token.refresh-expired` が `true` に設定されている場合、期限切れの ID トークン (およびアクセストークン) は、初期認可コード付与応答で返されたリフレッシュトークンを使用して更新されます。\n"
"このリフレッシュトークンも、このプロセスの一環としてリサイクル (リフレッシュ) される可能性があります。\n"
"その結果、新しいセッションクッキーが作成され、セッションが延長されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In instances where the user is not very active, you can use the `quarkus.oidc.authentication.session-age-extension` property to help handle expired ID tokens.\n"
"If the ID token expires, the session cookie might not be returned to the Quarkus endpoint during the next user request as the cookie lifespan would have elapsed.\n"
"Quarkus assumes that this request is the first authentication request.\n"
"Set `quarkus.oidc.authentication.session-age-extension` to be _reasonably_ long for your barely-active users and in accordance with your security policies."
msgstr ""
"ユーザーがあまりアクティブでない場合は、 `quarkus.oidc.authentication.session-age-extension` プロパティーを使用して、期限切れの ID トークンを処理できます。\n"
"ID トークンの有効期限が切れると、クッキーの有効期間が経過するため、次のユーザーリクエスト時にセッションクッキーが Quarkus エンドポイントに返されない可能性があります。\n"
"Quarkus は、このリクエストが最初の認証リクエストであると想定します。\n"
"`quarkus.oidc.authentication.session-age-extension` を、ほとんどアクティブでないユーザーとセキュリティーポリシーに合わせて、_適度に_ 長い値に設定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can go one step further and proactively refresh ID tokens or access tokens that are about to expire.\n"
"Set `quarkus.oidc.token.refresh-token-time-skew` to the value you want to anticipate the refresh.\n"
"If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew`, then it is refreshed, and the new session cookie is created.\n"
"This property should be set to a value that is less than the ID token lifespan; the closer it is to this lifespan value, the more often the ID token is refreshed."
msgstr ""
"さらに一歩進んで、期限切れが近づいている ID トークンまたはアクセストークンを事前に更新することもできます。\n"
"`quarkus.oidc.token.refresh-token-time-skew` を、更新を予測する値に設定します。\n"
"現在のユーザーリクエスト中に、現在の ID トークンがこの `quarkus.oidc.token.refresh-token-time-skew` 内に期限切れになると計算された場合、トークンは更新され、新しいセッションクッキーが作成されます。\n"
"このプロパティーは、ID トークンの有効期間よりも短い値に設定する必要があります。この有効期間の値に近いほど、ID トークンの更新頻度が高くなります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can further optimize this process by having a simple JavaScript function ping your Quarkus endpoint periodically to emulate the user activity, which minimizes the time frame during which the user might have to be re-authenticated."
msgstr "単純な JavaScript 関数を使用して Quarkus エンドポイントに定期的に ping を送信し、ユーザーアクティビティーをエミュレートすることで、このプロセスをさらに最適化できます。これにより、ユーザーが再認証される必要がある時間枠が最小限に抑えられます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "When the session can not be refreshed, the currently authenticated user is redirected to the OIDC provider to re-authenticate. However, the user experience may not be ideal in such cases, if the user, after an earlier successful authentication, is suddently seeing an OIDC authentication challenge screen when trying to access an application page."
msgstr "セッションを更新できない場合、現在認証されているユーザーが OIDC プロバイダーにリダイレクトされ、再認証が行われます。ただし、ユーザーが以前に認証に成功した後、アプリケーションページにアクセスしようとしたときに突然 OIDC 認証チャレンジ画面が表示されるのは、ユーザーエクスペリエンスとして最適ではない可能性があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Instead, you can request that the user is redirected to a public, application specific session expired page first. This page informs the user that the session has now expired and advise to re-authenticate by following a link to a secured application welcome page. The user clicks on the link and Quarkus OIDC enforces a redirect to the OIDC provider to re-authenticate. Use `quarkus.oidc.authentication.session-expired-page` relative path property, if you'd like to do it."
msgstr "代わりに、まずユーザーをパブリックのアプリケーション固有のセッション期限切れページにリダイレクトするようにリクエストできます。このページで、セッションの有効期限が切れたことをユーザーに通知し、保護されたアプリケーションのウェルカムページへのリンクをたどって再認証するように指示します。ユーザーがリンクをクリックすると、Quarkus OIDC が再認証のために OIDC プロバイダーへのリダイレクトを適用します。必要に応じて、 `quarkus.oidc.authentication.session-expired-page` 相対パスプロパティーを使用します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For example, setting `quarkus.oidc.authentication.session-expired-page=/session-expired-page` will ensure that the user whose session has expired is redirected to  `http://localhost:8080/session-expired-page`, assuming the application is available at `http://localhost:8080`."
msgstr "たとえば、アプリケーションが `http://localhost:8080` で利用できると仮定した場合、 `quarkus.oidc.authentication.session-expired-page=/session-expired-page` を設定すると、セッションの有効期限が切れたユーザーが `http://localhost:8080/session-expired-page` にリダイレクトされるようになります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "See also the <<oidc-redirect-filters>> section explaining how a custom `OidcRedirectFilter` can be used to customize OIDC redirects, including those to the session expired pages."
msgstr "また、カスタムの `OidcRedirectFilter` を使用して、セッション期限切れページへのリダイレクトを含む OIDC リダイレクトをカスタマイズする方法については、<<oidc-redirect-filters>> セクションを参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You cannot extend the user session indefinitely.\n"
"The returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr ""
"このユーザーセッションを無期限に延長することはできません。\n"
"有効期限が切れた ID トークンを持つ復帰ユーザーは、リフレッシュトークンの有効期限が切れると、OIDC プロバイダーエンドポイントで再認証する必要があります。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Integration with GitHub and non-OIDC OAuth2 providers"
msgstr "GitHub および OIDC 以外の OAuth2 プロバイダーとのインテグレーション"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some well-known providers such as GitHub or LinkedIn are not OpenID Connect providers, but OAuth2 providers that support the `authorization code flow`.\n"
"For example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2].\n"
"Remember, OIDC is built on top of OAuth2."
msgstr ""
"GitHub や LinkedIn のような有名なプロバイダーは OpenID Connect プロバイダーではなく、 `authorization code flow` をサポートする OAuth2 プロバイダーです。\n"
"たとえば、link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] や link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2] などです。\n"
"OIDC は OAuth2 の上に構築されていることを思い出してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The main difference between OIDC and OAuth2 providers is that OIDC providers return an `ID Token` that represents a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr "OIDC プロバイダと OAuth2 プロバイダの主な違いは、OIDC プロバイダは `OAuth2` プロバイダが返す標準認可コードフロー `access` および `refresh` トークンに加えて、ユーザ認証を表す `ID Token` を返すことです。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OAuth2 providers such as GitHub do not return `IdToken`, and the user authentication is implicit and indirectly represented by the `access` token.\n"
"This `access` token represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr ""
"GitHub などの OAuth2 プロバイダは `IdToken` を返さないため、ユーザー認証は `access` トークンによって暗黙的かつ間接的に表現されます。\n"
"この `access` トークンは、現在のQuarkus `web-app` アプリケーションが認証されたユーザーに代わってデータにアクセスすることを認可する、認証されたユーザーを表します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For OIDC, you validate the ID token as proof of authentication validity whereas in the case of OAuth2, you validate the access token.\n"
"This is done by subsequently calling an endpoint that requires the access token and that typically returns user information.\n"
"This approach is similar to the OIDC <<code-flow-user-info,UserInfo>> approach, with `UserInfo` fetched by Quarkus OIDC on your behalf."
msgstr ""
"OIDC の場合は、認証の有効性の証明として ID トークンを検証しますが、OAuth2 の場合はアクセストークンを検証します。\n"
"これは、アクセストークンを必要とし、通常はユーザー情報を返すエンドポイントを後で呼び出すことによって実行されます。\n"
"これは、OIDC <<code-flow-user-info,UserInfo>> と同様のアプローチで、ユーザーに代わって Quarkus OIDC が `UserInfo` を取得します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token, which allows the Quarkus endpoint to request a GitHub profile for the current user."
msgstr "たとえば、GitHub と連携する場合、Quarkus エンドポイントは `access` トークンを取得できます。これにより、Quarkus エンドポイントは現在のユーザーの GitHub プロファイルをリクエストできます。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured a bit differently to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr "このような OAuth2 サーバーとのインテグレーションをサポートするには、 `quarkus-oidc` を少し異なる方法で設定して、 `IdToken`: `quarkus.oidc.authentication.id-token-required=false` なしで認可コードフローの応答を許可する必要があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Even though you configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` is generated to standardize the way `quarkus-oidc` operates.\n"
"You use an internal `IdToken` to support the authentication session and to avoid redirecting the user to the provider,  such as GitHub, on every request.\n"
"In this case, the `IdToken` age is set to the value of a standard `expires_in` property in the authorization code flow response.\n"
"You can use a `quarkus.oidc.authentication.internal-id-token-lifespan` property to customize the ID token age.\n"
"The default ID token age is 5 minutes, which you can extend further as described in the <<session-management,session management>> section."
msgstr ""
"`IdToken` なしで認可コードフローをサポートするようにエクステンションを設定しても、 `quarkus-oidc` の動作を標準化するために内部 `IdToken` が生成されます。\n"
"認証セッションをサポートし、リクエストごとにユーザーを GitHub などのプロバイダーにリダイレクトしないようにするには、内部 `IdToken` を使用します。\n"
"この場合、 `IdToken` の有効期間は、認可コードフローのレスポンス内の標準の `expires_in` プロパティーの値に設定されます。\n"
"ID トークンの有効期間をカスタマイズするには、 `quarkus.oidc.authentication.internal-id-token-lifespan` プロパティーを使用できます。\n"
"ID トークンの有効期間はデフォルトで 5 分ですが、<<session-management,session management>> セクションで説明されているとおり延長できます。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "This simplifies how you handle an application that supports multiple OIDC providers."
msgstr "これにより、複数の OIDC プロバイダーをサポートするアプリケーションの取り扱いが簡単になります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The next step is to ensure that the returned access token can be useful and is valid to the current Quarkus endpoint.\n"
"The first way is to call the OAuth2 provider introspection endpoint by configuring `quarkus.oidc.introspection-path`, if the provider offers such an endpoint.\n"
"In this case, you can use the access token as a source of roles using `quarkus.oidc.roles.source=accesstoken`.\n"
"If no introspection endpoint is present, you can attempt instead to request <<code-flow-user-info,UserInfo>> from the provider as it will at least validate the access token.\n"
"To do so, specify `quarkus.oidc.token.verify-access-token-with-user-info=true`.\n"
"You also need to set the `quarkus.oidc.user-info-path` property to a URL endpoint that fetches the user info (or to an endpoint protected by the access token).\n"
"For GitHub, since it does not have an introspection endpoint, requesting the UserInfo is required."
msgstr ""
"次の手順は、返されたアクセストークンが有用であり、現在の Quarkus エンドポイントに対して有効だと確認することです。\n"
"最初の方法は、 `quarkus.oidc.introspection-path` を設定して OAuth2 プロバイダーのイントロスペクションエンドポイントを呼び出すことです (プロバイダーがそのようなエンドポイントを提供している場合)。\n"
"この場合、 `quarkus.oidc.roles.source=accesstoken` を使用して、アクセストークンをロールのソースとして使用できます。\n"
"イントロスペクションエンドポイントが存在しない場合は、代わりに <<code-flow-user-info,UserInfo>> (少なくともアクセストークンを検証するため) をプロバイダーにリクエストすることを試行できます。\n"
"これを行うには、 `quarkus.oidc.token.verify-access-token-with-user-info=true` を指定します。\n"
"また、 `quarkus.oidc.user-info-path` プロパティーを、ユーザー情報を取得する URL エンドポイント (またはアクセストークンによって保護されたエンドポイント) に設定する必要もあります。\n"
"GitHub の場合、イントロスペクションエンドポイントがないため、UserInfo をリクエストする必要があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Requiring <<code-flow-user-info,UserInfo>> involves making a remote call on every request."
msgstr "<<code-flow-user-info,UserInfo>> が必要な場合、リクエストごとにリモート呼び出しが実行されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Therefore, `UserInfo` is embedded in the internal generated `IdToken` and saved in the encrypted session cookie. It can be disabled with `quarkus.oidc.cache-user-info-in-idtoken=false`."
msgstr "したがって、 `UserInfo` は内部で生成された `IdToken` に埋め込まれ、暗号化されたセッション Cookie に保存されます。これは `quarkus.oidc.cache-user-info-in-idtoken=false` で無効にできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Alternatively, you might want to consider caching `UserInfo` using a default or custom UserInfo cache provider.\n"
"For more information, see the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr ""
"デフォルトまたはカスタムの UserInfo キャッシュプロバイダーを使用して `UserInfo` をキャッシュすることも検討してください。\n"
"詳細は、「OpenID Connect (OIDC) ベアラートークン認証」ガイドの xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[トークンイントロスペクションと UserInfo キャッシュ] セクションを参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Most well-known social OAuth2 providers enforce rate-limiting so there is a high chance you will prefer to have UserInfo cached."
msgstr "よく知られているソーシャル OAuth2 プロバイダーのほとんどは帯域制限を実施しているため、UserInfo をキャッシュするのがよい場合が多いでしょう。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OAuth2 servers might not support a well-known configuration endpoint.\n"
"In this case, you must disable the discovery and configure the authorization, token, and introspection and `UserInfo` endpoint paths manually."
msgstr ""
"OAuth2 サーバーは、よく知られた設定エンドポイントをサポートしていない可能性があります。\n"
"この場合、検出を無効にして、認可、トークン、イントロスペクション、および `UserInfo` エンドポイントパスを手動で設定する必要があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For well-known OIDC or OAuth2 providers, such as Apple, Facebook, GitHub, Google, Microsoft, Spotify, and X (formerly Twitter), Quarkus can help significantly simplify your application's configuration with the `quarkus.oidc.provider` property.\n"
"Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application].\n"
"Configure your Quarkus endpoint like this:"
msgstr ""
"Apple、Facebook、GitHub、Google、Microsoft、Spotify、X (旧 Twitter) などのよく知られた OIDC または OAuth2 プロバイダーの場合、Quarkus は `quarkus.oidc.provider` プロパティーを使用して、アプリケーションの設定を大幅に簡素化できます。\n"
"llink:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[GitHub OAuth アプリケーションを作成] した後に、 `quarkus-oidc` を GitHub と統合する方法は次のとおりです。\n"
"Quarkus エンドポイントを次のように設定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For more information about configuring other well-known providers, see xref:security-openid-connect-providers.adoc[OpenID Connect providers]."
msgstr "他のよく知られているプロバイダーの設定に関する詳細は、xref:security-openid-connect-providers.adoc[OpenID Connect プロバイダー] を参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "This is all that is needed for an endpoint like this one to return the currently-authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr "このようなエンドポイントに対して必要なのは、現在認証されているユーザーのプロファイルを `GET http://localhost:8080/github/userinfo` で返し、個々の `UserInfo` のプロパティーとしてアクセスすることです。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google, which is an OIDC provider that returns `IdToken`, and GitHub, which is an OAuth2 provider that does not return `IdToken` and only allows access to `UserInfo`, then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows.\n"
"A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally-generated `IdToken` will be replaced with the `UserInfo`-based principal when the GitHub flow is active:"
msgstr ""
"xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy] を使用して複数のソーシャルプロバイダー (たとえば、 `IdToken` を返す OIDC プロバイダーの Google と、 `IdToken` を返さず `UserInfo` へのアクセスのみを許可する OAuth2 プロバイダーの GitHub) をサポートする場合、Google フローと GitHub フローの両方で、注入された `SecurityIdentity` のみを使用してエンドポイントを動作させることができます。\n"
"GitHub フローがアクティブな場合に、内部で生成された `IdToken` で作成されたプリンシパルが `UserInfo` ベースのプリンシパルに置き換えられる場合は、 `SecurityIdentity` の簡単な拡張が必要になります。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Now, the following code will work when the user signs into your application by using Google or GitHub:"
msgstr "これで、ユーザーが Google または GitHub を使用してアプリケーションにサインインすると、次のコードが機能するようになります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when handling the providers that return `IdToken` and use `UserInfo` with the providers that do not return `IdToken`."
msgstr "おそらく、より簡単な代替案は、 `@IdToken JsonWebToken` と `UserInfo` の両方を注入し、 `IdToken` を返すプロバイダーを処理する際は `JsonWebToken` を使用して、 `IdToken` を返さないプロバイダーの場合は `UserInfo` を使用することです。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You must ensure that the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you want the user to be redirected after a successful GitHub authentication and application authorization.\n"
"In this case, it has to be set to `http://localhost:8080/github/userinfo`."
msgstr ""
"GitHub OAuth アプリケーション設定に入力するコールバックパスが、GitHub 認証とアプリケーション認可が成功した後にユーザーをリダイレクトするエンドポイントパスと一致していることを確認する必要があります。\n"
"この場合は、 `http://localhost:8080/github/userinfo` に設定する必要があります。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Listening to important authentication events"
msgstr "重要な認証イベントのリッスン"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can register the `@ApplicationScoped` bean which will observe important OIDC authentication events.\n"
"When a user logs in for the first time, re-authenticates, or refreshes the session, the listener is updated.\n"
"In the future, more events might be reported.\n"
"For example:"
msgstr ""
"重要な OIDC 認証イベントを監視する `@ApplicationScoped` Bean を登録できます。\n"
"ユーザが初めてログインしたり、再認証したり、セッションをリフレッシュしたりすると、リスナーが更新されます。\n"
"将来的には、さらに多くのイベントが報告されるようになるかもしれません。\n"
"例:"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can listen to other security events as described in the xref:security-customization.adoc#observe-security-events[Observe security events] section of the Security Tips and Tricks guide."
msgstr "「セキュリティのヒントとコツ」ガイドの xref:security-customization.adoc#observe-security-events[セキュリティイベントの監視] セクションで説明されているように、他のセキュリティイベントを聞くことができます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Token revocation"
msgstr "トークンの失効"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Sometimes, you may want to revoke the current authorization code flow access and/or refresh tokens.\n"
"You can revoke tokens with `quarkus.oidc.OidcProviderClient` which provides access to the OIDC provider's UserInfo, token introspection and revocation endpoints."
msgstr ""
"場合によっては、現在の認可コードフローアクセストークンやリフレッシュトークンを取り消す必要があることもあります。\n"
"その場合は、OIDC プロバイダーの UserInfo、トークンイントロスペクション、失効エンドポイントへのアクセスが提供される `quarkus.oidc.OidcProviderClient` を使用してトークンを取り消すことができます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For example, when a local logout with <<oidc-session,OidcSession>> is performed, you can use an injected `OidcProviderClient` to revoke access and refresh tokens associated with the current session:"
msgstr "たとえば、<<oidc-session,OidcSession>> でローカルログアウトが実行されると、注入された `OidcProviderClient` を使用して、現在のセッションに関連付けられているアクセストークンとリフレッシュトークンを取り消すことができます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Do the local logout by clearing the session cookie."
msgstr "セッション Cookie をクリアしてローカルログアウトを実行します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Revoke the authorization code flow access token."
msgstr "認可コードフローのアクセストークンを取り消します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Revoke the authorization code flow refresh token."
msgstr "認可コードフローのリフレッシュトークンを取り消します。"

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "You can also revoke tokens in the security event listeners."
msgstr "セキュリティ・イベント・リスナーでトークンを取り消すこともできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "For example, when your application supports a standard <<user-initiated-logout>>, you can catch a logout event and revoke tokens:"
msgstr "例えば、アプリケーションが標準的な <<user-initiated-logout>> をサポートしている場合、ログアウトイベントをキャッチしてトークンを失効させることができます："

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "Revoke tokens if an RP-initiated logout event is observed."
msgstr "RP主導のログアウト・イベントが発生した場合、トークンを失効させます。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Propagating tokens to downstream services"
msgstr "下流サービスへのトークンの伝播"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For information about Authorization Code Flow access token propagation to downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation-rest[Token Propagation] section."
msgstr "認可コードフローから下流のサービスへのアクセストークンの伝播については、xref:security-openid-connect-client-reference.adoc#token-propagation-rest[トークンの伝播] セクションを参照してください。"

#. type: Title ==
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Integration considerations"
msgstr "インテグレーションに関する考慮事項"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Your application secured by OIDC integrates in an environment where it can be called from single-page applications.\n"
"It must work with well-known OIDC providers, run behind HTTP Reverse Proxy, require external and internal access, and so on."
msgstr ""
"OIDC によって保護されたアプリケーションは、シングルページアプリケーションから呼び出すことができる環境に統合されます。\n"
"これは、よく知られている OIDC プロバイダーと連携し、HTTP リバースプロキシーの背後で実行される必要があるほか、外部および内部アクセスなども必要とされます。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "This section discusses these considerations."
msgstr "このセクションでは、これらの考慮事項について説明します。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Single-page applications"
msgstr "シングルページアプリケーション"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can check if implementing single-page applications (SPAs) the way it is suggested in the xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[Single-page applications] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide meets your requirements."
msgstr "「OpenID Connect (OIDC) ベアラートークン認証」ガイドの xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[シングルページアプリケーション] セクションで提案されている方法でシングルページアプリケーション (SPA) を実装した場合、要件が満たされるか確認できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you prefer to use SPAs and JavaScript APIs such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OIDC providers might not support cross-origin resource sharing (CORS) for authorization endpoints where the users are authenticated after a redirect from Quarkus.\n"
"This will lead to authentication failures if the Quarkus application and the OIDC provider are hosted on different HTTP domains, ports, or both."
msgstr ""
"Quarkus Web アプリケーションで `Fetch` や `XMLHttpRequest`(XHR) などの SPA および JavaScript API を使用する場合は、Quarkus からのリダイレクト後にユーザーが認証される認可エンドポイントに対して、OIDC プロバイダーがクロスオリジンリソース共有 (CORS) をサポートしない可能性があることに注意してください。\n"
"Quarkus アプリケーションと OIDC プロバイダーが異なる HTTP ドメイン、ポート、またはその両方でホストされている場合、認証に失敗します。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false`, which will instruct Quarkus to return a `499` status code and a `WWW-Authenticate` header with the `OIDC` value."
msgstr "このような場合は、 `quarkus.oidc.authentication.java-script-auto-redirect` プロパティーを `false` に設定します。これにより、Quarkus は `499` ステータスコードと `OIDC` 値を含む `WWW-Authenticate` ヘッダーを返すように指示されます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The browser script must set a header to identify the current request as a JavaScript request for a `499` status code to be returned when the `quarkus.oidc.authentication.java-script-auto-redirect` property is set to `false`."
msgstr "`quarkus.oidc.authentication.java-script-auto-redirect` プロパティーが `false` に設定されている場合に `499` ステータスコードが返されるようにするには、ブラウザースクリプトで現在のリクエストを JavaScript リクエストとして識別するためのヘッダーを設定する必要があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If the script engine sets an engine-specific request header itself, then you can register a custom `quarkus.oidc.JavaScriptRequestChecker` bean, which will inform Quarkus if the current request is a JavaScript request. For example, if the JavaScript engine sets a header such as `HX-Request: true`, then you can have it checked like this:"
msgstr "スクリプトエンジンがエンジン固有のリクエストヘッダーを設定する場合は、カスタム `quarkus.oidc.JavaScriptRequestChecker` Bean を登録できます。これにより、現在のリクエストが JavaScript リクエストであるかどうかが Quarkus に通知されます。たとえば、JavaScript エンジンが `HX-Request: true` などのヘッダーを設定する場合は、次のようにチェックできます。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "and reload the last requested page in case of a `499` status code."
msgstr "ステータスコードが `499` の場合は、最後にリクエストされたページを再度読み込みます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Otherwise, you must also update the browser script to set the `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of a `499` status code."
msgstr "それ以外の場合は、ブラウザースクリプトを更新し、 `X-Requested-With` ヘッダーに `JavaScript` 値を設定して、 `499` ステータスコードの場合は最後にリクエストされたページを再度読み込みする必要があります。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Cross-origin resource sharing"
msgstr "クロスオリジンリソース共有"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you plan to consume this application from a single-page application running on a different domain, you need to configure cross-origin resource sharing (CORS).\n"
"For more information, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the \"Cross-origin resource sharing\" guide."
msgstr ""
"別のドメインで実行されているシングルページのアプリケーションからこのアプリケーションを利用する場合は、クロスオリジンリソース共有 (CORS) を設定する必要があります。\n"
"詳細は、「クロスオリジンリソース共有」ガイドの xref:security-cors.adoc#cors-filter[CORSフィルター] のセクションを参照してください。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Calling Cloud provider services"
msgstr "クラウドプロバイダーサービスの呼び出し"

#. type: Title ====
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Google Cloud"
msgstr "Google Cloud"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OIDC authorization code flow permissions to such services in their Google developer consoles."
msgstr "Google Developer Consoles の **BigQuery** などの **Google Cloud Services** に対して OIDC 認可コードフロー権限を有効化している現在認証済みのユーザーに代わり、Quarkus OIDC `web-app` アプリケーションが、それらのサービスにアクセスできるようにすることが可能です。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can do so by using https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services].\n"
"You need only to add\n"
"the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency as shown in the following example:"
msgstr ""
"https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google クラウドサービス] を使用して、これを行うことができます。\n"
"追加する必要があるのは、\n"
"以下の例に示すように、 https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[最新タグ] サービス依存関係のみです。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Then, configure Google OIDC properties:"
msgstr "次に、Google OIDC プロパティーを設定します。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Running Quarkus application behind a reverse proxy"
msgstr "Quarkus アプリケーションのリバースプロキシーの背後での実行"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy, gateway, or firewall when HTTP `Host` header might be reset to the internal IP address and HTTPS connection might be terminated, and so on.\n"
"For example, an authorization code flow `redirect_uri` parameter might be set to the internal host instead of the expected external one."
msgstr ""
"Quarkus アプリケーションがリバースプロキシー、ゲートウェイ、またはファイアウォールの背後で実行されている場合に、HTTP `Host` ヘッダーが内部 IP アドレスにリセットされたり、 https 接続が終了したりするなどして、OIDC 認証メカニズムが影響を受けることがあります。\n"
"たとえば、認可コードフローの `redirect_uri` パラメーターが、予期される外部ホストではなく内部ホストに設定されている場合があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In such cases, configuring Quarkus to recognize the original headers forwarded by the proxy will be required.\n"
"For more information, see the xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section."
msgstr ""
"このような場合、プロキシーによって転送された元のヘッダーを認識するように Quarkus を設定する必要があります。\n"
"詳細は、xref:http-reference.adoc#reverse-proxy[リバースプロキシーの背後での実行] Vert.x のドキュメントセクションを参照してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress, then a redirect from the OIDC provider back to this endpoint might not work because the calculated `redirect_uri` parameter might point to the internal endpoint address.\n"
"You can resolve this problem by using the following configuration, where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address.:"
msgstr ""
"たとえば、Quarkus エンドポイントが Kubernetes Ingress の背後にあるクラスターで実行されている場合、計算された `redirect_uri` パラメーターが内部エンドポイントアドレスを指している可能性があるため、OIDC プロバイダーからこのエンドポイントへのリダイレクトが機能しない可能性があります。\n"
"この問題は、Kubernetes Ingress によって外部エンドポイントアドレスを表すように `X-ORIGINAL-HOST` が設定されている次の設定を使用することで解決できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property can also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr "`quarkus.oidc.authentication.force-redirect-https-scheme` プロパティーは、Quarkus アプリケーションが SSL 終了リバースプロキシーの背後で実行されている場合にも使用できます。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "External and internal access to the OIDC provider"
msgstr "OIDC プロバイダーへの外部および内部アクセス"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC provider externally-accessible authorization, logout, and other endpoints can have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to the `quarkus.oidc.auth-server-url` internal URL.\n"
"In such cases, the endpoint might report an issuer verification failure and redirects to the externally-accessible OIDC provider endpoints might fail."
msgstr ""
"OIDC プロバイダーの外部からアクセス可能な認可、ログアウト、およびその他のエンドポイントは、自動検出された URL や内部 URL `quarkus.oidc.auth-server-url` とは異なる HTTP(S) URL を持つ場合があります。\n"
"このような場合、エンドポイントは発行者の検証の失敗を報告し、外部からアクセス可能な OIDC プロバイダーエンドポイントへのリダイレクトが失敗する可能性があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you work with Keycloak, then start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally-accessible base URL.\n"
"If you work with other OIDC providers, check the documentation of your provider."
msgstr ""
"Keycloak を使用する場合は、 `KEYCLOAK_FRONTEND_URL` システムプロパティーを外部からアクセス可能なベース URL に設定して起動します。\n"
"他の OIDC プロバイダーと連携する場合は、プロバイダーのドキュメントを確認してください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC HTTP client redirects"
msgstr "OIDC HTTP クライアントリダイレクト"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OIDC providers behind a firewall may redirect Quarkus OIDC HTTP client's GET requests to some of its endpoints such as a well-known configuration endpoint.\n"
"By default, Quarkus OIDC HTTP client follows HTTP redirects automatically, excluding cookies which may have been set during the redirect request for security reasons."
msgstr ""
"ファイアウォールの背後にある OIDC プロバイダーは、Quarkus OIDC HTTP クライアントの GET リクエストを、既知の設定エンドポイントなどのエンドポイントにリダイレクトする場合があります。\n"
"デフォルトでは、Quarkus OIDC HTTP クライアントは、セキュリティー上の理由からリダイレクトリクエスト中に設定された Cookie を除外して、自動的に HTTP リダイレクトい従います。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If you would like, you can disable it with `quarkus.oidc.follow-redirects=false`."
msgstr "これは、必要に応じて `quarkus.oidc.follow-redirects=false` で無効にできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "When following redirects automatically is disabled, and Quarkus OIDC HTTP client receives a redirect request, it will attempt to recover only once by following the redirect URI, but only if it is exactly the same as the original request URI, and as long as one or more cookies were set during the redirect request."
msgstr "リダイレクトへの自動対応が無効になっている場合、Quarkus OIDC HTTP クライアントはリダイレクトリクエストを受信すると、リダイレクト URI が元のリクエスト URI とまったく同じで、リダイレクトリクエスト中に 1 つ以上の Cookie が設定されている場合に限り、リダイレクト URI に従って 1 回だけ回復を試みます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC SAML identity broker"
msgstr "OIDC SAML アイデンティティーブローカー"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If your identity provider does not implement OpenID Connect but only the legacy XML-based SAML2.0 SSO protocol, then Quarkus cannot be used as a SAML 2.0 adapter, similarly to how `quarkus-oidc` is used as an OIDC adapter."
msgstr "アイデンティティープロバイダーが OpenID Connect を実装しておらず、従来の XML ベースの SAML2.0 SSO プロトコルのみを実装している場合、 `quarkus-oidc` を OIDC アダプターとして使用する場合と同じように、Quarkus を SAML 2.0 アダプターとして使用することはできません。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"However, many OIDC providers such as Keycloak, Okta, Auth0, and Microsoft ADFS offer OIDC to SAML 2.0 bridges.\n"
"You can create an identity broker connection to a SAML 2.0 provider in your OIDC provider and use `quarkus-oidc` to authenticate your users to this SAML 2.0 provider, with the OIDC provider coordinating OIDC and SAML 2.0 communications.\n"
"As far as Quarkus endpoints are concerned, they can continue using the same Quarkus Security, OIDC API, annotations such as `@Authenticated`, `SecurityIdentity`, and so on."
msgstr ""
"ただし、Keycloak、Okta、Auth0、Microsoft ADFS などの多くの OIDC プロバイダーは、OIDC から SAML 2.0 へのブリッジを提供しています。\n"
"OIDC プロバイダーで SAML 2.0 プロバイダーへのアイデンティティーブローカー接続を作成し、 `quarkus-oidc` を使用してこの SAML 2.0 プロバイダーに対してユーザーを認証し、OIDC プロバイダーが OIDC と SAML 2.0 の通信を調整することができます。\n"
"Quarkus エンドポイントに関しては、同じ Quarkus セキュリティー、OIDC API、 `@Authenticated`、 `SecurityIdentity` などのアノテーションなどを引き続き使用できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For example, assume `Okta` is your SAML 2.0 provider and `Keycloak` is your OIDC provider.\n"
"Here is a typical sequence explaining how to configure `Keycloak` to broker with the `Okta` SAML 2.0 provider."
msgstr ""
"たとえば、 `Okta` が SAML 2.0 プロバイダーで、 `Keycloak` が OIDC プロバイダーだとします。\n"
"ここでは、 `Keycloak` を `Okta` SAML 2.0 プロバイダーと仲介するように設定する方法を説明する一般的なシーケンスを示します。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "First, create a new `SAML2` integration in your `Okta` `Dashboard/Applications`:"
msgstr "まず、 `Okta` `Dashboard/Applications` に新しい `SAML2` インテグレーションを作成します。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For example, name it as `OktaSaml`:"
msgstr "たとえば、 `OktaSaml` と名前を付けます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Next, configure it to point to a Keycloak SAML broker endpoint.\n"
"At this point, you need to know the name of the Keycloak realm, for example, `quarkus`, and, assuming that the Keycloak SAML broker alias is `saml`, enter the endpoint address as `http://localhost:8081/realms/quarkus/broker/saml/endpoint`.\n"
"Enter the service provider (SP) entity ID as `http://localhost:8081/realms/quarkus`, where `http://localhost:8081` is a Keycloak base address and `saml` is a broker alias:"
msgstr ""
"次に、Keycloak SAML ブローカーエンドポイントを指すように設定します。\n"
"この時点で、Keycloak レルムの名前 (例: `quarkus`) を知っておく必要があります。Keycloak SAML ブローカーのエイリアスが `saml` であると仮定して、エンドポイントアドレスを `http://localhost:8081/realms/quarkus/broker/saml/endpoint` と入力します。\n"
"サービスプロバイダー (SP) エンティティー ID を `http://localhost:8081/realms/quarkus` と入力します。ここで、 `http://localhost:8081` は Keycloak ベースアドレスで、 `saml` はブローカーエイリアスです。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Next, save this SAML integration and note its Metadata URL:"
msgstr "次に、この SAML インテグレーションを保存し、その Metadata URL をメモします。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Next, add a SAML provider to Keycloak:"
msgstr "続いて、SAML プロバイダーを Keycloak に追加します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"First, as usual, create a new realm or import the existing realm to `Keycloak`.\n"
"In this case, the realm name has to be `quarkus`."
msgstr ""
"まず、通常どおりに、新しいレルムを作成するか、既存のレルムを `Keycloak` にインポートします。\n"
"この場合、レルム名は `quarkus` にする必要があります。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Now, in the `quarkus` realm properties, navigate to `Identity Providers` and add a new SAML provider:"
msgstr "次に、 `quarkus` レルムのプロパティーで、 `Identity Providers` に移動し、新しい SAML プロバイダーを追加します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Note the alias is set to `saml`, `Redirect URI` is `http://localhost:8081/realms/quarkus/broker/saml/endpoint` and `Service provider entity ID` is `http://localhost:8081/realms/quarkus` - these are the same values you entered when creating the Okta SAML integration in the previous step."
msgstr "エイリアスは `saml` に設定され、 `Redirect URI` は `http://localhost:8081/realms/quarkus/broker/saml/endpoint` で、 `Service provider entity ID` は `http://localhost:8081/realms/quarkus` である点に注意してください。これらは、前の手順で Okta SAML Integration を作成するときに入力した値と同じです。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Finally, set `Service entity descriptor` to point to the Okta SAML Integration Metadata URL you noted at the end of the previous step."
msgstr "最後に、前の手順の最後に書き留めた Okta SAML Integration Metadata URL を指すように `Service entity descriptor` を設定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Next, if you want, you can register this Keycloak SAML provider as a default provider by navigating to `Authentication/browser/Identity Provider Redirector config` and setting both the `Alias` and `Default Identity Provider` properties to `saml`.\n"
"If you do not configure it as a default provider then, at authentication time, Keycloak offers 2 options:"
msgstr ""
"次に、必要に応じて、Authentication/browser/Identity Provider Redirector config` に移動し、 `Alias` プロパティーと `Default Identity Provider` プロパティーの両方を `saml` に設定して、この Keycloak SAML プロバイダーをデフォルトプロバイダーとして登録できます。\n"
"デフォルトのプロバイダーとして設定しない場合は、認証時に Keycloak は次の 2 つのオプションを提供します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Authenticate with the SAML provider"
msgstr "SAML プロバイダーによる認証"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Authenticate directly to Keycloak with the name and password"
msgstr "名前とパスワードを使用した Keycloak への直接認証"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Now, configure the Quarkus OIDC `web-app` application to point to the Keycloak `quarkus` realm, `quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus`.\n"
"Then, you are ready to start authenticating your Quarkus users to the Okta SAML 2.0 provider by using an OIDC to SAML bridge that is provided by Keycloak OIDC and Okta SAML 2.0 providers."
msgstr ""
"ここで、Quarkus OIDC `web-app` アプリケーションを、Keycloak `quarkus` レルム `quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus` を指すように設定します。\n"
"次に、Keycloak OIDC および Okta SAML 2.0 プロバイダーによって提供される OIDC から SAML へのブリッジを使用して、Quarkus ユーザーを Okta SAML 2.0 プロバイダーに認証する準備が整います。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure other OIDC providers to provide a SAML bridge similarly to how it can be done for Keycloak."
msgstr "Keycloak の場合と同様に、他の OIDC プロバイダーを設定して SAML ブリッジを提供することもできます。"

#. type: Title ==
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Testing"
msgstr "テスト"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Testing is often tricky when it comes to authentication to a separate OIDC-like server.\n"
"Quarkus offers several options from mocking to a local run of an OIDC provider."
msgstr ""
"別の OIDC のようなサーバーへの認証に関しては、テストが困難になることがよくあります。\n"
"Quarkus は、モックから OIDC プロバイダーのローカル実行まで、さまざまなオプションを提供します。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加することから始めます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Dev Services for Keycloak"
msgstr "Dev Services for Keycloak"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For integration testing against Keycloak, use xref:security-openid-connect-dev-services.adoc[Dev services for Keycloak].\n"
"This service initializes a test container, creates a `quarkus` realm, and configures a `quarkus-app` client with the secret `secret`.\n"
"It also sets up two users: `alice` with `admin` and `user` roles, and `bob` with the `user` role."
msgstr ""
"Keycloak に対する結合テストの場合は、xref:security-openid-connect-dev-services.adoc[Dev services for Keycloak] を使用します。\n"
"このサービスは、テストコンテナーを初期化し、 `quarkus` レルムを作成し、シークレット `secret` を使用して `quarkus-app` クライアントを設定します。\n"
"また、 `admin` および `user` ロールを持つ `alice` と、 `user` ロールを持つ `bob` の 2 人のユーザーも設定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "First, prepare the `application.properties` file."
msgstr "まず、 `application.properties` ファイルを準備します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "If starting from an empty `application.properties` file, `Dev Services for Keycloak` automatically registers the following properties:"
msgstr "空の `application.properties` ファイルから開始する場合、 `Dev Services for Keycloak` は次のプロパティーを自動的に登録します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.auth-server-url`, which points to the running test container."
msgstr "実行中のテストコンテナーを指す `quarkus.oidc.auth-server-url`"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.client-id=quarkus-app`."
msgstr "`quarkus.oidc.client-id=quarkus-app`"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.credentials.secret=secret`."
msgstr "`quarkus.oidc.credentials.secret=secret`"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you already have the required `quarkus-oidc` properties configured, associate `quarkus.oidc.auth-server-url` with the `prod` profile.\n"
"This ensures that `Dev Services for Keycloak` starts the container as expected.\n"
"For example:"
msgstr ""
"必要な `quarkus-oidc` プロパティーがすでに設定されている場合は、 `quarkus.oidc.auth-server-url` を `prod` プロファイルに関連付けます。\n"
"これにより、 `Dev Services for Keycloak` が期待どおりにコンテナーを起動できるようになります。\n"
"以下はその例です。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "To import a custom realm file into Keycloak before running the tests, configure `Dev services for Keycloak` as shown:"
msgstr "テストを実行する前にカスタムレルムファイルを Keycloak にインポートするには、次のように `Dev services for Keycloak` を設定します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Finally, write the test code as described in the <<code-flow-integration-testing-wiremock,Wiremock>> section.\n"
"The only difference is that `@QuarkusTestResource` is no longer required:"
msgstr ""
"最後に、<<code-flow-integration-testing-wiremock,Wiremock>> セクションで説明されているとおりテストコードを作成します。\n"
"唯一の違いは、 `@QuarkusTestResource` が不要になったことです。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Wiremock"
msgstr "Wiremock"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Add the following dependency:"
msgstr "次の依存関係を追加します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Prepare the REST test endpoints and set `application.properties`.\n"
"For example:"
msgstr ""
"REST テストエンドポイントを準備し、 `application.properties` を設定します。\n"
"以下に例を示します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Finally, write the test code, for example:"
msgstr "最後にテストコードを書きます。例:"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`OidcWiremockTestResource` recognizes `alice` and `admin` users.\n"
"The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property.\n"
"The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr ""
"`OidcWiremockTestResource` は `alice` と `admin` ユーザーを認識します。\n"
"ユーザー `alice` にはデフォルトで `user` ロールしかありませんが、 `quarkus.test.oidc.token.user-roles` システムプロパティーでカスタマイズできます。\n"
"ユーザー `admin` にはデフォルトで `user` と `admin` ロールがありますが、 `quarkus.test.oidc.token.user-roles` システムプロパティーでカスタマイズできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Additionally, `OidcWiremockTestResource` sets the token issuer and audience to `https://service.example.com`,  which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr "さらに、 `OidcWiremockTestResource` はトークンの発行者と対象ユーザーを `https://service.example.com` に設定します。これは、 `quarkus.test.oidc.token.issuer` および `quarkus.test.oidc.token.audience` システムプロパティーを使用してカスタマイズできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`OidcWiremockTestResource` can be used to emulate all OIDC providers."
msgstr "`OidcWiremockTestResource` は、すべての OIDC プロバイダーをエミュレートするために使用できます。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Using KeycloakTestResourceLifecycleManager"
msgstr "KeecycloakTestResourceLifecycleManager の使用"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`.\n"
"If you need to do the integration testing against Keycloak then you are encouraged to do it with <<code-flow-integration-testing-keycloak-devservices,Dev Services for Keycloak>>."
msgstr ""
"`Dev Services for Keycloak` を使用しない正当な理由がある場合にのみ、テストには `KeycloakTestResourceLifecycleManager` を使用してください。\n"
"Keycloak に対する結合テストが必要な場合は、<<code-flow-integration-testing-keycloak-devservices,Dev Services for Keycloak>> を使用してテストすることを推奨します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "First, add the following dependency:"
msgstr "まず、以下の依存関係を追加します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "This provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr "これは、Keycloak コンテナーを起動する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装である `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` を提供します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Then, configure the Maven Surefire plugin as follows (and similarly the Maven Failsafe plugin when testing in native image):"
msgstr "次に、Maven Surefire プラグインを次のように設定します (ネイティブイメージでテストする場合は、Maven Failsafe プラグインを同様に設定します)。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Now, set the configuration and write the test code the same way as it is described in the <<code-flow-integration-testing-wiremock,Wiremock>> section.\n"
"The only difference is the name of `QuarkusTestResource`:"
msgstr ""
"次に、設定を行い、<<code-flow-integration-testing-wiremock,Wiremock>> セクションに説明されているのと同じ方法でテストコードを記述します。\n"
"唯一の違いは `QuarkusTestResource` の名前です。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users.\n"
"The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property.\n"
"The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr ""
"`KeycloakTestResourceLifecycleManager` は `alice` と `admin` ユーザーを登録します。\n"
"ユーザー `alice` にはデフォルトで `user` ロールしかありませんが、 `keycloak.token.user-roles` システムプロパティーでカスタマイズできます。\n"
"ユーザー `admin` にはデフォルトで `user` と `admin` ロールがありますが、 `keycloak.token.admin-roles` システムプロパティーでカスタマイズできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance that can be disabled by specifying `keycloak.use.https=false`.\n"
"The default realm name is `quarkus` and client id is `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr ""
"デフォルトでは、 `KeycloakTestResourceLifecycleManager` が HTTPS を使用して Keycloak インスタンスを初期化します。これは、 `keycloak.use.https=false` を指定することで無効にすることができます。\n"
"デフォルトのレルム名は `quarkus` で、クライアント ID は `quarkus-web-app` です。必要に応じて、 `keycloak.realm`、 `keycloak.web-app.client` システムプロパティーを設定して値をカスタマイズしてください。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity アノテーション"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations to test the `web-app` application endpoint code, which depends on either one of the following injections, or all four:"
msgstr "`@TestSecurity` および `@OidcSecurity` アノテーションを使用して、次の注入のいずれか、または 4 つすべてに依存する `web-app` アプリケーションエンドポイントコードをテストできます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "ID `JsonWebToken`"
msgstr "ID `JsonWebToken`"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Access `JsonWebToken`"
msgstr "Access `JsonWebToken`"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`UserInfo`"
msgstr "`UserInfo`"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "`OidcConfigurationMetadata`"
msgstr "`OidcConfigurationMetadata`"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "For more information, see xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken]."
msgstr "詳細は、xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing-security-annotation[注入された JsonWebToken での TestingSecurityの使用] を参照してください。"

#. type: Title ===
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "Checking errors in the logs"
msgstr "ログでのエラー確認"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "To see details about the token verification errors, you must enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging:"
msgstr "トークン検証エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcProvider` の `TRACE` レベルのロギングを有効にする必要があります。"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "To see details about the OidcProvider client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging:"
msgstr "OidcProvider クライアントの初期化エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcRecorder` の `TRACE` レベルのロギングを有効にしてください。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "From the `quarkus dev` console, type `j` to change the application global log level."
msgstr "アプリケーションのグローバルログレベルを変更するには、 `quarkus dev` コンソールから `j` と入力します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Programmatic OIDC start-up"
msgstr "プログラムによる OIDC のスタートアップ"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC tenants can be created programmatically like in the example below:"
msgstr "OIDC テナントは、次の例のようにプログラムで作成できます。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "The code above is a programmatic equivalent to the following configuration in the `application.properties` file:"
msgstr "上記のコードは、 `application.properties` ファイル内の次の設定とプログラム的に同等です。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "Should you need to configure more OIDC tenant properties, use the `OidcTenantConfig` builder like in the example below:"
msgstr "さらに多くの OIDC テナントプロパティーを設定する必要がある場合は、次の例のように `OidcTenantConfig` ビルダーを使用します。"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For more complex setup involving multiple tenants please see the xref:security-openid-connect-multitenancy.adoc#programmatic-startup[Programmatic OIDC start-up for multitenant application]\n"
"section of the OpenID Connect Multi-Tenancy guide."
msgstr ""
"複数のテナントが関係するより複雑な設定については、OpenID Connect マルチテナンシーガイドの xref:security-openid-connect-multitenancy.adoc#programmatic-startup[マルチテナントアプリケーション用のプログラムによる OIDC の起動] \n"
"セクションを参照してください。"

#. type: Title ==
#: _guides/security-oidc-code-flow-authentication.adoc
#, no-wrap
msgid "References"
msgstr "参考資料"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC 設定プロパティー]"

#: _guides/security-oidc-code-flow-authentication.adoc
#, fuzzy
msgid "xref:security-oidc-expanded-configuration.adoc[Expanded OIDC Configuration Reference]"
msgstr "xref:security-oidc-expanded-configuration.adoc[拡張OIDC構成リファレンス]"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr "xref:security-openid-connect-providers.adoc[よく知られた OpenID Connect プロバイダーの設定]"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 client and filters reference guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect および OAuth2 クライアントとフィルターのリファレンスガイド]"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[OpenID Connect、SmallRye JWT、OAuth2 の認証メカニズムの選択]"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[認証メカニズムの組み合わせ]"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Security の概要]"

#: _guides/security-oidc-code-flow-authentication.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak ドキュメント]"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: _guides/security-oidc-code-flow-authentication.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
