msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Using Hibernate ORM and Jakarta Persistence"
msgstr "Hibernate ORMとJakarta Persistenceの使用"

#: _guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM is the de facto standard Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper.\n"
"It works beautifully in Quarkus."
msgstr ""
"Hibernate ORMは、Jakarta Persistence（旧称JPA）のデファクトスタンダード実装であり、Object Relational Mapperの完全な実装を提供します。\n"
"Quarkusで見事に機能します。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _guides/hibernate-orm.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""
"次の章で紹介する手順に沿って、ステップを踏んでアプリケーションを作成することを推奨します。\n"
"ただし、完成した例にそのまま進むこともできます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "The solution is located in the `hibernate-orm-quickstart` link:{quickstarts-tree-url}/hibernate-orm-quickstart[directory]."
msgstr "解決策は `hibernate-orm-quickstart` link:{quickstarts-tree-url}/hibernate-orm-quickstart[ディレクトリー] にあります。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Setting up and configuring Hibernate ORM"
msgstr "Hibernate ORMのセットアップと設定"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "When using Hibernate ORM in Quarkus, you don't need to have a `persistence.xml` resource to configure it."
msgstr "QuarkusでHibernate ORMを使用する場合は、 設定の為に `persistence.xml` リソースは必要ありません。"

#: _guides/hibernate-orm.adoc
msgid ""
"Using such a classic configuration file is an option, but unnecessary unless you have specific advanced needs;\n"
"so we'll see first how Hibernate ORM can be configured without a `persistence.xml` resource."
msgstr ""
"このような古典的な設定ファイルを使用することは選択しとしてありますが、特定の高度なニーズがない限り不要です。\n"
"そのため、まずはHibernate ORMを `persistence.xml` リソース無しで設定できることをみていきましょう。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "In Quarkus, you only need to:"
msgstr "Quarkusでは、以下の点のみを実行します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "add your configuration settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "annotate your entities with `@Entity` and any other mapping annotation as usual"
msgstr "エンティティーに `@Entity` やその他のマッピングアノテーションを通常どおりにアノテーションします。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Other configuration needs have been automated: Quarkus will make some opinionated choices and educated guesses."
msgstr "その他の設定の必要性は自動化されています。Quarkusは、いくつかの定見に基づいた選択と経験に基づいた推測を行います。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Add the following dependencies to your project:"
msgstr "以下の依存関係をプロジェクトに追加してください:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "the Hibernate ORM extension: `io.quarkus:quarkus-hibernate-orm`"
msgstr "Hibernate ORM エクステンション: `io.quarkus:quarkus-hibernate-orm`"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "your JDBC driver extension; the following options are available:"
msgstr "JDBC ドライバーエクステンション。以下のオプションを使用できます:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-db2` for link:https://www.ibm.com/products/db2-database[IBM DB2]"
msgstr "link:https://www.ibm.com/products/db2-database[IBM DB2] のための `quarkus-jdbc-db2`"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-derby` for link:https://db.apache.org/derby/[Apache Derby]"
msgstr "link:https://db.apache.org/derby/[Apache Derby] のための `quarkus-jdbc-derby`"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-h2` for link:https://www.h2database.com/html/main.html[H2]"
msgstr "link:https://www.h2database.com/html/main.html[H2] のための `quarkus-jdbc-h2`"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-mariadb` for link:https://mariadb.com/[MariaDB]"
msgstr "link:https://mariadb.com/[MariaDB] のための `quarkus-jdbc-mariadb`"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-mssql` for link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server]"
msgstr "link:https://www.microsoft.com/en-gb/sql-server/[Microsoft SQL Server] のための `quarkus-jdbc-mssql`"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-mysql` for link:https://www.mysql.com/[MySQL]"
msgstr "link:https://www.mysql.com/[MySQL] のための `quarkus-jdbc-mysql`"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-oracle` for link:https://www.oracle.com/database/[Oracle Database]"
msgstr "link:https://www.oracle.com/database/[Oracle Database] のための `quarkus-jdbc-oracle`"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`quarkus-jdbc-postgresql` for link:https://www.postgresql.org/[PostgreSQL]"
msgstr "link:https://www.postgresql.org/[PostgreSQL] のための `quarkus-jdbc-postgresql`"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "For instance:"
msgstr "例えば:"

#. type: Block title
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#: _guides/hibernate-orm.adoc
msgid ""
"Annotate your persistent objects with `@Entity`,\n"
"then add the relevant configuration properties in `{config-file}`."
msgstr ""
"`@Entity` で永続オブジェクトにアノテーションを付けてから、\n"
"`{config-file}` で関連する設定プロパティーを追加します。"

#. type: Block title
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Example `{config-file}`"
msgstr "例: `{config-file}`"

#: _guides/hibernate-orm.adoc
msgid "xref:datasource.adoc[Configure the datasource]."
msgstr "xref:datasource.adoc[データソースを設定します]。"

#: _guides/hibernate-orm.adoc
msgid "Drop and create the database at startup (use `update` to only update the schema)."
msgstr "起動時にデータベースを削除して作成します (スキーマのみを更新するには `update` を使用します)。"

#: _guides/hibernate-orm.adoc
msgid ""
"Note that these configuration properties are not the same ones as in your typical Hibernate ORM configuration file.\n"
"They will often map to Hibernate ORM configuration properties but could have different names and don't necessarily map 1:1 to each other."
msgstr ""
"これらの設定プロパティーは、通常のHibernate ORMの設定ファイルにあるものとは異なることに注意してください。\n"
"多くの場合はHibernate ORMの設定のプロパティーに対応していますが、名前が異なる場合もあり、必ずしも1対1で対応しているわけではありません。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Also, Quarkus will set many Hibernate ORM configuration settings automatically, and will often use more modern defaults."
msgstr "また、Quarkusは多くのHibernate ORMの設定を自動的に設定し、多くの場合、より現代的なデフォルト値を使用します。"

#: _guides/hibernate-orm.adoc
msgid "For a list of the items that you can set in `{config-file}`, see <<configuration-reference>>."
msgstr ""

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "An `EntityManagerFactory` will be created based on the Quarkus `datasource` configuration as long as the Hibernate ORM extension is listed among your project dependencies."
msgstr "Hibernate ORM エクステンションがプロジェクトの依存関係の中に入っていればQuarkus の `datasource` の設定に基づいて `EntityManagerFactory` が作成されます。"

#: _guides/hibernate-orm.adoc
msgid ""
"The dialect will be selected and configured automatically based on your datasource;\n"
"you may want to <<hibernate-dialect,configure it to more precisely match your database>>."
msgstr ""
"ダイアレクトはデータソースに基づいて自動的に選択および設定されます。\n"
"<<hibernate-dialect,configure it to more precisely match your database>> (データベースにより正確に一致するように設定) することを推奨します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "You can then happily inject your `EntityManager`:"
msgstr "その後、 `EntityManager` をうまく注入することができます。"

#. type: Block title
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Example application bean using Hibernate"
msgstr "Hibernateを使用したアプリケーションBeanの例"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Inject your entity manager and have fun"
msgstr "エンティティマネージャーを注入して楽しみます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Mark your CDI bean method as `@Transactional` and the `EntityManager` will enlist and flush at commit."
msgstr "CDI Beanメソッドに `@Transactional` を付けると `EntityManager` がトランザクション境界内に入りコミット時にフラッシュします。"

#. type: Block title
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Example Entity"
msgstr "エンティティーの例"

#: _guides/hibernate-orm.adoc
msgid ""
"To load SQL statements when Hibernate ORM starts, add an `import.sql` file to the root of your `resources` directory.\n"
"This script can contain any SQL DML statements.\n"
"Make sure to terminate each statement with a semicolon."
msgstr ""
"Hibernate ORMの起動時にSQL文をロードするには、 `import.sql` ファイルをresourcesディレクトリーのルートに追加します。\n"
"このスクリプトには、任意のSQL DML文を含めることができます。\n"
"各ステートメントは必ずセミコロンで終了させてください。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "This is useful to have a data set ready for your tests or demos."
msgstr "テストやデモ用のデータセットを用意しておくと便利です。"

#: _guides/hibernate-orm.adoc
msgid ""
"Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a\n"
"CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing\n"
"so at your application entry point boundaries like your REST endpoint controllers."
msgstr ""
"データベースを変更するメソッド (例: `entity.persist()`) をトランザクション内でラップするようにしてください。\n"
"CDI Bean メソッド `@Transactional` をマークすることで、それを実現出来、そのメソッドをトランザクションの境界に出来ます。REST エンドポイントコントローラーのように、\n"
"アプリケーションのエントリーポイントの境界でこれを行うことを推奨します。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Dialect"
msgstr "Dialect"

#. type: Title ====
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Supported databases"
msgstr "サポートされるデータベース"

#: _guides/hibernate-orm.adoc
msgid ""
"For xref:datasource.adoc#extensions-and-database-drivers-reference[supported databases],\n"
"the link:{hibernate-orm-docs-url}#database-dialect[Hibernate ORM dialect]\n"
"does not need to be set explicitly:\n"
"it is selected automatically based on the datasource."
msgstr ""
"xref:datasource.adoc#extensions-and-database-drivers-reference[サポートされているデータベース] では、\n"
"link:{hibernate-orm-docs-url}#database-dialect[Hibernate ORM ダイアレクト] は\n"
"明示的に設定する必要はありません。\n"
"データソースに基づいて自動的に選択されます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "By default, the dialect is configured to target the minimum supported version of the database."
msgstr "デフォルトでは、データベースの最小サポートバージョンをターゲットとするようにdialectが設定されています。"

#: _guides/hibernate-orm.adoc
msgid ""
"In order for Hibernate ORM to generate more efficient SQL,\n"
"to avoid workarounds and to take advantage of more database features,\n"
"you can set the database version explicitly:"
msgstr ""
"Hibernate ORMがより効率的なSQLを生成し、\n"
"ワークアラウンドを回避し、より多くのデータベース機能を活用するために、\n"
"データベースバージョンを明示的に設定することができます:"

#. type: Block title
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "`{config-file}` with an explicit `db-version`"
msgstr "明示的な `db-version` を持つ `{config-file}`"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Set the database version. The Hibernate ORM dialect will target that version."
msgstr "データベースのバージョンを設定します。Hibernate ORM dialectはそのバージョンをターゲットにします。"

#: _guides/hibernate-orm.adoc
msgid ""
"As a rule, the version set here should be as high as possible,\n"
"but must be lower than or equal to the version of any database your application will connect to."
msgstr ""
"原則として、ここで設定するバージョンはできるだけ高くする必要がありますが、\n"
"アプリケーションが接続するデータベースのバージョン以下である必要があります。"

#: _guides/hibernate-orm.adoc
msgid ""
"As described above, the version can either be preconfigured explicitly via a `quarkus.datasource.db-version` configuration property,\n"
"or implicitly set by the Quarkus build process to a minimum supported version of the database.\n"
"Quarkus will try to check this preconfigured version against the actual database version on startup,\n"
"leading to a startup failure when the actual version is lower."
msgstr ""
"上述したように、このバージョンは `quarkus.datasource.db-version` 設定プロパティーを介して明示的に事前設定されるか、\n"
"または、Quarkus ビルドプロセスによって、データベースのサポートされている最小バージョンに暗黙的に設定されます。\n"
"Quarkus は起動時にこの事前設定されたバージョンと実際のデータベースバージョンを比較しようとします。\n"
"これにより、実際のバージョンが低い場合に起動に失敗します。"

#: _guides/hibernate-orm.adoc
msgid ""
"This is a safeguard: for versions of the database older than what is configured,\n"
"Hibernate ORM may generate SQL that is invalid which would lead to runtime exceptions."
msgstr ""
"これは安全策です。設定されたバージョンよりも古いデータベースを使用すると、\n"
"Hibernate ORM が無効な SQL を生成し、実行時例外が発生する可能性があります。"

#: _guides/hibernate-orm.adoc
msgid ""
"If the database cannot be reached, a warning will be logged but startup will proceed.\n"
"You can optionally disable the version check if you know the database won't be reachable on startup\n"
"using <<quarkus-hibernate-orm_quarkus-hibernate-orm-database-version-check-enabled,`quarkus.hibernate-orm.database.version-check.enabled=false`>>."
msgstr ""
"データベースにアクセスできない場合は警告が記録されますが、起動は続行されます。\n"
"起動時にデータベースにアクセスできないことがわかっている場合は、\n"
"<<quarkus-hibernate-orm_quarkus-hibernate-orm-database-version-check-enabled,`quarkus.hibernate-orm.database.version-check.enabled=false`>> を使用して、オプションでバージョンチェックを無効化できます。"

#. type: Title ====
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Other databases"
msgstr "その他のデータベース"

#: _guides/hibernate-orm.adoc
msgid ""
"If xref:datasource.adoc#other-databases[your database does not have a corresponding Quarkus extension],\n"
"or if the defaults do not match your needs for some reason,\n"
"you will need to set the link:{hibernate-orm-docs-url}#database-dialect[Hibernate ORM dialect] explicitly:"
msgstr ""
"xref:datasource.adoc#other-databases[データベースに対応する Quarkus エクステンションがない] 場合、\n"
"または何らかの理由でデフォルト設定がニーズに合わない場合は、\n"
"link:{hibernate-orm-docs-url}#database-dialect[Hibernate ORM のダイアレクト] を明示的に設定する必要があります。"

#. type: Block title
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "`{config-file}` with an explicit `dialect`"
msgstr "明示的な `dialect` を持つ `{config-file}`"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Set the Hibernate ORM dialect."
msgstr "Hibernate ORM dialectを設定します。"

#: _guides/hibernate-orm.adoc
msgid ""
"For built-in dialects, the expected value is one of the names\n"
"in the link:{hibernate-orm-dialect-docs-url}[official list of dialects], *without* the `Dialect` suffix,\n"
"for example `Cockroach` for `CockroachDialect`."
msgstr ""
"組み込みダイアレクトの場合、指定できる値は link:{hibernate-orm-dialect-docs-url}[ダイアレクトの公式リスト] \n"
"にある名前のいずれかで、 `Dialect` の接尾辞を *除いた* ものです。\n"
"たとえば、 `CockroachDialect` の場合は `Cockroach` となります。"

#: _guides/hibernate-orm.adoc
msgid ""
"For third-party dialects, the expected value is the fully-qualified class name,\n"
"for example `com.acme.hibernate.AcmeDbDialect`."
msgstr ""
"サードパーティーのダイアレクトの場合、期待される値は完全修飾クラス名です。\n"
"たとえば `com.acme.hibernate.AcmeDbDialect` などです。"

#: _guides/hibernate-orm.adoc
msgid ""
"In that case, keep in mind that the JDBC driver or Hibernate ORM dialect\n"
"may not work properly in GraalVM native executables."
msgstr ""
"この場合、JDBCドライバやHibernate ORM dialectがGraalVMネイティブ実行可能ファイルでは\n"
"正しく動作しない可能性があることに留意してください。"

#: _guides/hibernate-orm.adoc
msgid ""
"As with <<hibernate-dialect-supported-databases,supported databases>>,\n"
"you can configure the DB version explicitly to get the most out of Hibernate ORM:"
msgstr ""
"<<hibernate-dialect-supported-databases,supported databases>> と同様に、\n"
"Hibernate ORM を最大限に活用するために、DB バージョンを明示的に設定できます。"

#. type: Block title
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "`{config-file}` with an explicit `dialect` and `db-version`"
msgstr "明示的な `dialect` と `db-version` を持つ `{config-file}`"

#: _guides/hibernate-orm.adoc
msgid ""
"Set the database version. The Hibernate ORM dialect will target that version.\n"
"Since we're targeting CockroachDB here, we're passing the CockroachDB version, not the PostgreSQL version."
msgstr ""
"データベースのバージョンを設定します。Hibernate ORM dialectはそのバージョンをターゲットにします。\n"
"ここではCockroachDBをターゲットにしているので、PostgreSQLのバージョンではなく、CockroachDBのバージョンを渡しています。"

#: _guides/hibernate-orm.adoc
msgid "Varying database"
msgstr "データベースの切り替え"

#: _guides/hibernate-orm.adoc
msgid ""
"When enabling <<database-approach,database multi-tenancy>>,\n"
"Hibernate ORM will use multiple datasources at runtime for the same persistence unit,\n"
"and by default Quarkus cannot tell which datasource is going to be used,\n"
"so it will not be able to detect a dialect to use in Hibernate ORM."
msgstr ""
"<<database-approach,database multi-tenancy>> を有効にすると、\n"
"Hibernate ORM は実行時に同じ永続化ユニットに対して複数のデータソースを使用します。\n"
"デフォルトでは Quarkus はどのデータソースが使用されるかを判断できません。\n"
"そのため、Hibernate ORM で使用するダイアレクトを検出できなくなります。"

#: _guides/hibernate-orm.adoc
msgid ""
"For that reason, when enabling <<database-approach,database multi-tenancy>>,\n"
"it is recommended to explicitly point the Hibernate ORM configuration to one datasource\n"
"among those that will be used at runtime, e.g. with `quarkus.hibernate-orm.datasource=base`\n"
"(`base` being the name of a datasource)."
msgstr ""
"このような理由から、<<database-approach,database multi-tenancy>> を有効化する場合は、\n"
"実行時に使用されるデータソースの中から 1 つを Hibernate ORM の設定で明示的に\n"
"指定することを推奨します。たとえば、 `quarkus.hibernate-orm.datasource=base` (`base` はデータソースの名前) \n"
"などのように指定します。"

#: _guides/hibernate-orm.adoc
msgid ""
"When doing so, Quarkus will infer the database version and (if possible) dialect from that datasource.\n"
"For unsupported databases, you may still need to set the Hibernate ORM dialect explicitly,\n"
"as explained in <<hibernate-dialect-other-databases,this section>>."
msgstr ""
"これを実行すると、Quarkus はそのデータソースからデータベースのバージョンと (可能な場合) ダイアレクトを推測します。\n"
"サポートされていないデータベースの場合は、<<hibernate-dialect-other-databases,this section>> で説明したように、\n"
"Hibernate ORM ダイアレクトを明示的に設定する必要がある場合があります。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Hibernate ORM configuration properties"
msgstr "Hibernate ORMの設定プロパティー"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "There are various optional properties useful to refine your `EntityManagerFactory` or guide guesses of Quarkus."
msgstr "`EntityManagerFactory` を改良したり、Quarkusの推測を導くのに便利な様々なオプションのプロパティーがあります。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "There are no required properties, as long as a default datasource is configured."
msgstr "デフォルトのデータソースが設定されていれば、それ以外に必須のプロパティーはありません。"

#: _guides/hibernate-orm.adoc
msgid ""
"When no property is set, Quarkus can typically infer everything it needs to set up Hibernate ORM\n"
"and will have it use the default datasource."
msgstr ""
"プロパティーが設定されていない場合、Quarkusは通常はHibernate ORMのセットアップに必要な値を推測し、\n"
"デフォルトのデータソースを使用するようにします。"

#: _guides/hibernate-orm.adoc
msgid "The configuration properties listed in <<configuration-reference>> allow you to override such defaults, and customize and tune various aspects."
msgstr ""

#: _guides/hibernate-orm.adoc
msgid ""
"Do not mix <<persistence-xml,`persistence.xml`>> and `quarkus.hibernate-orm.*` properties in `{config-file}`.\n"
"Quarkus will raise an exception.\n"
"Make up your mind on which approach you want to use."
msgstr ""
"`{config-file}` 内で <<persistence-xml,`persistence.xml`>> と `quarkus.hibernate-orm.*` プロパティーを混在させないでください。\n"
"Quarkus は例外をスローします。\n"
"どちらの方法を採用するか決めてください。"

#: _guides/hibernate-orm.adoc
msgid ""
"If your classpath contains a `persistence.xml` that you want to ignore,\n"
"set the following configuration property:"
msgstr ""
"クラスパスに無視したい `persistence.xml` がある場合は、\n"
"次の設定プロパティーを設定してください:"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Multiple persistence units"
msgstr "複数の永続化ユニット"

#. type: Title ====
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Setting up multiple persistence units"
msgstr "複数の永続化ユニットの設定"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "It is possible to define multiple persistence units using the Quarkus configuration properties."
msgstr "Quarkusの設定プロパティーを使用して複数の永続化ユニットを定義することができます。"

#: _guides/hibernate-orm.adoc
msgid ""
"The properties at the root of the `quarkus.hibernate-orm.` namespace define the default persistence unit.\n"
"For instance, the following snippet defines a default datasource and a default persistence unit:"
msgstr ""
"`quarkus.hibernate-orm.` 名前空間のルートにあるプロパティーで、デフォルトの永続化ユニットを定義します。\n"
"たとえば、次のスニペットではデフォルトのデータソースとデフォルトの永続化ユニットを定義しています:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Using a map based approach, it is possible to define named persistence units:"
msgstr "マップをベースにした方法で名前付きの永続化ユニットを定義することができます:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Define a datasource named `users`."
msgstr "`users` という名前のデータソースを定義します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Define a datasource named `inventory`."
msgstr "`inventory` という名前のデータソースを定義します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Define a persistence unit called `users`."
msgstr "`users` という永続化ユニットを定義します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Define the datasource used by the persistence unit."
msgstr "永続化ユニットが使用するデータソースを定義します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "This configuration property is important, but we will discuss it a bit later."
msgstr "この設定プロパティーは重要ですが、説明は少し後になります。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Define a persistence unit called `inventory` pointing to the `inventory` datasource."
msgstr "`inventory` データソースを指す `inventory` という名前の永続化ユニットを定義します。"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "You can mix the default datasource and named datasources or only have one or the other."
msgstr "デフォルトデータソースと名前付きデータソースを混在させることも、どちらか一方だけにすることもできます。"

#: _guides/hibernate-orm.adoc
msgid ""
"The default persistence unit points to the default datasource by default.\n"
"For named persistence units, the `datasource` property is mandatory.\n"
"You can point your persistence unit to the default datasource by setting it to `<default>`\n"
"(which is the internal name of the default datasource)."
msgstr ""
"デフォルトの永続化ユニットは、デフォルトでデフォルトデータソースを指します。\n"
"名前付きの永続化ユニットの場合は、 `datasource` プロパティーが必須です。\n"
"`<default>` (デフォルトのデータソースの内部名) に設定することで、永続化ユニットをデフォルトデータソースを指すようにすることができます。"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "It is perfectly valid to have several persistence units pointing to the same datasource."
msgstr "複数の永続化ユニットが同じデータソースを使用することもできます。"

#. type: Title ====
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Attaching model classes to persistence units"
msgstr "モデルクラスの永続化ユニットへのアタッチメント"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "There are two ways to attach model classes to persistence units, and they should not be mixed:"
msgstr "モデルクラスを永続化ユニットにアタッチする方法は2つあり、混在できません:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Via the `packages` configuration property;"
msgstr "`packages` 設定プロパティーを使用します;"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Via the `@io.quarkus.hibernate.orm.PersistenceUnit` package-level annotation."
msgstr "`@io.quarkus.hibernate.orm.PersistenceUnit` パッケージレベルのアノテーションを使用します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "If both are mixed, the annotations are ignored and only the `packages` configuration properties are taken into account."
msgstr "両方が混在している場合はアノテーションが無視され、 `packages` の設定プロパティーのみが考慮されます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Using the `packages` configuration property is simple:"
msgstr "`packages` 設定プロパティーは簡単です:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "This configuration snippet will create two persistence units:"
msgstr "この設定スニペットは2つの永続化ユニットを作成します:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "The default one which will contain all the model classes under the `org.acme.model.defaultpu` package, subpackages included."
msgstr "デフォルトでは、 `org.acme.model.defaultpu` パッケージのすべてのモデルクラスが含まれ、サブパッケージも含まれます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "A named `users` persistence unit which will contain all the model classes under the `org.acme.model.user` package, subpackages included."
msgstr "`users` という名前の永続化ユニットで、 `org.acme.model.user` パッケージのすべてのモデルクラスを含み、サブパッケージも含まれています。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "You can attach several packages to a persistence unit:"
msgstr "複数のpackageを永続化ユニットにアタッチできます:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "All the model classes under the `org.acme.model.shared` and `org.acme.model.user` packages will be attached to the `users` persistence unit."
msgstr "`org.acme.model.shared` と `org.acme.model.user` パッケージの下にあるすべてのモデル・クラスは、 `users` 永続化ユニットにアタッチされます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "It is also supported to attach a given model class to several persistence units."
msgstr "モデルクラスを複数の永続化ユニットにアタッチすることもサポートされます。"

#: _guides/hibernate-orm.adoc
msgid ""
"Model classes need to be consistently added to a given persistence unit.\n"
"That meant that all dependent model classes of a given entity (mapped super classes, embeddables...) are required to be attached to the persistence unit.\n"
"As we are dealing with the persistence unit at the package level, it should be simple enough."
msgstr ""
"モデルクラスは与えられた永続化ユニットに一貫して追加される必要があります。\n"
"つまり、与えられたエンティティのすべての依存するモデルクラス（ `@MappedSuperClass` 、 `@Embeddable` ...）はすべて同じ永続化ユニットにアタッチされる必要があります。\n"
"パッケージレベルで永続化ユニットを扱っているので簡単なことでしょう。"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "Panache entities can be attached to only one persistence unit."
msgstr "Panacheエンティティは1つの永続化ユニットにのみアタッチできます。"

#: _guides/hibernate-orm.adoc
msgid ""
"For entities attached to several persistence units, you cannot use Panache.\n"
"You can mix the two approaches though and mix Panache entities and traditional entities where multiple persistence units are required."
msgstr ""
"複数の永続化ユニットに接続されたエンティティではPanacheを使用することはできません。\n"
"しかし、この2つのアプローチを混在させることは可能で、Panacheエンティティと複数の永続化ユニットが必要な従来のエンティティを混在させることはできます。"

#: _guides/hibernate-orm.adoc
msgid ""
"If you have a use case for that and clever ideas about how to implement it without cluttering the simplified Panache approach,\n"
"contact us on the link:{quarkus-mailing-list-index}[quarkus-dev mailing list]."
msgstr ""
"もし、そのようなユースケースがあり、シンプルな Panache のアプローチを乱すことなく実装する方法についてすばらしいアイデアがあれば、\n"
"link:{quarkus-mailing-list-index}[quarkus-dev メーリングリスト]までご連絡ください。"

#: _guides/hibernate-orm.adoc
msgid ""
"The second approach to attach model classes to a persistence unit is to use package-level `@io.quarkus.hibernate.orm.PersistenceUnit` annotations.\n"
"Again, the two approaches cannot be mixed."
msgstr ""
"モデルクラスを永続化ユニットにアタッチする2つ目の方法は、パッケージレベルの `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用することです。\n"
"繰り返しになりますが、この2つのアプローチを混在させることはできません。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "To obtain a configuration similar to the one above with the `packages` configuration property, create a `package-info.java` file with the following content:"
msgstr "上記のような構成を `packages` の設定プロパティーで取得するには、以下の内容の `package-info.java` ファイルを作成します:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Be careful, use the `@io.quarkus.hibernate.orm.PersistenceUnit` annotation, not the Jakarta Persistence one."
msgstr "Jakarta Persistenceのアノテーションではなく、 `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用することに注意してください。"

#: _guides/hibernate-orm.adoc
msgid ""
"We only support defining the `@PersistenceUnit` for model classes at the package level,\n"
"using the `@PersistenceUnit` annotation at the class level is not supported in this case."
msgstr "モデルクラスの `@PersistenceUnit` はパッケージレベルで定義することのみサポートしています。この場合、クラスレベルで `@PersistenceUnit` アノテーションを使用することはサポートされていません。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Note that, similarly to what we do with the configuration property, we take into account the annotated package but also all its subpackages."
msgstr "設定プロパティーで行うのと同様で、アノテーションのつけられたパッケージだけでなく、そのすべてのサブパッケージも入れていることに注意してください。"

#. type: Title ====
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "CDI integration"
msgstr "CDI インテグレーション"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "If you are familiar with using Hibernate ORM in Quarkus, you probably already have injected the `EntityManager` using CDI:"
msgstr "Quarkus で Hibernate ORM を使用することに慣れている場合は、CDI を使用してすでに `EntityManager` を注入しているでしょう。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "This will inject the `EntityManager` of the default persistence unit."
msgstr "これは、デフォルトの永続化ユニットの `EntityManager` を注入します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Injecting the `EntityManager` of a named persistence unit (`users` in our example) is as simple as:"
msgstr "名前付き永続化ユニット (この例では `users`) の `EntityManager` を注入するのは簡単です。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Here again, we use the same `@io.quarkus.hibernate.orm.PersistenceUnit` annotation."
msgstr "ここでも同じ `@io.quarkus.hibernate.orm.PersistenceUnit` アノテーションを使用しています。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "The injected `EntityManager` or `Session` instance is a proxy that requires an active transaction for interaction."
msgstr "注入された `EntityManager` または `Session` インスタンスは、対話のためにアクティブなトランザクションを必要とするプロキシです。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "By default it is also possible to use it for read-only operations without a transaction when in a request scope, but this can be disabled by setting `quarkus.hibernate-orm.request-scoped.enabled` to `false`."
msgstr "デフォルトでは、リクエストスコープにあるとき、トランザクションを伴わない 読み取り専用操作に使用することも可能ですが、 `quarkus.hibernate-orm.request-scoped.enabled` を `false` に設定することで、これを無効にすることができます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "You can inject the `EntityManagerFactory` of a named persistence unit using the exact same mechanism:"
msgstr "まったく同じ仕組みで名前付き永続化ユニットの `EntityManagerFactory` を注入できます。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "In addition to `EntityManager` and `EntityManagerFactory`, Quarkus also supports injecting the following JPA/Hibernate components:"
msgstr "`EntityManager` と `EntityManagerFactory` に加えて、Quarkus は以下の JPA/Hibernate コンポーネントの注入もサポートしています："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "These components can also be injected with a specific persistence unit qualifier:"
msgstr "これらのコンポーネントは、特定の永続化ユニット修飾子で注入することもできます："

#: _guides/hibernate-orm.adoc
msgid "Activate/deactivate persistence units"
msgstr "永続化ユニットのアクティブ化/非アクティブ化"

#: _guides/hibernate-orm.adoc
msgid ""
"If a persistence unit is configured at build time,\n"
"by default it is active at runtime,\n"
"that is Quarkus will start the corresponding Hibernate ORM `SessionFactory` on application startup."
msgstr ""
"ビルド時に永続化ユニットが設定されている場合、\n"
"デフォルトでは実行時にもアクティブになります。\n"
"つまり、Quarkus はアプリケーションの起動時に対応する Hibernate ORM の `SessionFactory` を開始します。"

#: _guides/hibernate-orm.adoc
msgid ""
"To deactivate a persistence unit at runtime, set `quarkus.hibernate-orm[.optional name].active` to `false`.\n"
"If a persistence unit is not active:"
msgstr ""
"実行時に永続化ユニットを非アクティブ化するには、 `quarkus.hibernate-orm[.optional name].active` を `false` に設定します。\n"
"永続化ユニットがアクティブでない場合は、以下のようになります。"

#: _guides/hibernate-orm.adoc
msgid "The `SessionFactory` will not start during application startup."
msgstr "`SessionFactory` はアプリケーションの起動中に起動しません。"

#: _guides/hibernate-orm.adoc
msgid "Accessing the `EntityManagerFactory`/`EntityManager` or `SessionFactory`/`Session` will cause an exception to be thrown."
msgstr "`EntityManagerFactory`/`EntityManager` または `SessionFactory`/`Session` にアクセスすると、例外がスローされます。"

#: _guides/hibernate-orm.adoc
msgid ""
"This is in particular useful when you want an application to be able\n"
"to xref:datasource.adoc#datasource-active[use one of a pre-determined set of datasources at runtime]."
msgstr "これは特に、アプリケーションが xref:datasource.adoc#datasource-active[実行時に事前に決められたデータソースのセットの中から 1 つを使用] できるようにしたい場合に便利です。"

#: _guides/hibernate-orm.adoc
msgid "For example, with the following configuration:"
msgstr "例えば、次のような設定です:"

#: _guides/hibernate-orm.adoc
msgid ""
"xref:config-reference.adoc#configuration-sources[Setting] `quarkus.hibernate-orm.\"pg\".active=true` and `quarkus.datasource.\"pg\".active=true` at runtime\n"
"will make only the PostgreSQL persistence unit and datasource available,\n"
"and setting `quarkus.hibernate-orm.\"oracle\".active=true` and `quarkus.datasource.\"oracle\".active=true` at runtime\n"
"will make only the Oracle persistence unit and datasource available."
msgstr ""
"`quarkus.hibernate-orm.\"pg\".active=true` と `quarkus.datasource.\"pg\".active=true` を実行時に xref:config-reference.adoc#configuration-sources[設定] すると、\n"
"PostgreSQL の永続化ユニットとデータソースのみが利用可能になり、\n"
"`quarkus.hibernate-orm.\"oracle\".active=true` と `quarkus.datasource.\"oracle\".active=true` を実行時に設定すると、\n"
"Oracle の永続化ユニットとデータソースのみが利用可能になります。"

#: _guides/hibernate-orm.adoc
msgid ""
"xref:config-reference.adoc#custom-profiles[Custom configuration profiles] can help simplify such a setup.\n"
"By appending the following profile-specific configuration to the one above,\n"
"you can select a persistence unit/datasource at runtime simply by\n"
"xref:config-reference.adoc#multiple-profiles[setting `quarkus.profile`]:\n"
"`quarkus.profile=prod,pg` or `quarkus.profile=prod,oracle`."
msgstr ""
"xref:config-reference.adoc#custom-profiles[カスタム設定プロファイル] を使用すると、このようなセットアップを簡素化できます。\n"
"上記の設定に以下のプロファイル固有の設定を追加することで、\n"
"`quarkus.profile=prod,pg` または `quarkus.profile=prod,oracle` の \n"
"xref:config-reference.adoc#multiple-profiles[`quarkus.profile` を設定]: して、\n"
"ランタイムに永続化ユニット/データソースを選択できます。"

#: _guides/hibernate-orm.adoc
msgid ""
"With such a setup, you will need to take care to only ever access the _active_ persistence unit.\n"
"To do so, you may define a xref:cdi.adoc#ok-you-said-that-there-are-several-kinds-of-beans[CDI bean producer] for the default `Session` redirecting to the currently active named `Session`, so that it can be injected directly, like this:"
msgstr ""
"このようなセットアップでは、常に _アクティブ_ な永続化ユニットのみをアクセスするように注意する必要があります。\n"
"そのためには、現在アクティブな名前付き `Session` にリダイレクトするデフォルトの `Session` の xref:cdi.adoc#ok-you-said-that-there-are-several-kinds-of-beans[CDI Bean プロデューサー] を定義し、直接インジェクトできるようにすることができます。以下に例を示します。"

#: _guides/hibernate-orm.adoc
msgid ""
"Don't inject a `DataSource` or `AgroalDatasource` directly,\n"
"because that would lead to a failure on startup (can't inject inactive beans).\n"
"Instead, inject `InjectableInstance<DataSource>` or `InjectableInstance<AgroalDataSource>`."
msgstr ""
"`DataSource` または `AgroalDatasource` を直接注入しないでください。\n"
"起動時に失敗する可能性があるためです (非アクティブな Bean を注入できません)。\n"
"代わりに、 `InjectableInstance<DataSource>` または `InjectableInstance<AgroalDataSource>` を注入します。"

#: _guides/hibernate-orm.adoc
msgid ""
"Declare a CDI producer method that will define the default session\n"
"as either PostgreSQL or Oracle, depending on what is active."
msgstr ""
"アクティブなデータソースに応じて、PostgreSQL または Oracle のいずれかを\n"
"デフォルトのセッションとして定義する CDI プロデューサーメソッドを宣言します。"

#: _guides/hibernate-orm.adoc
msgid "Check whether datasource beans are active before retrieving the corresponding session."
msgstr "対応するセッションを取得する前に、データソース Bean がアクティブか確認します。"

#: _guides/hibernate-orm.adoc
msgid "This will get injected with the (only) active session."
msgstr "これには、(唯一の) アクティブなセッションが注入されます。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Setting up and configuring Hibernate ORM with a `persistence.xml`"
msgstr "`persistence.xml` を使用した場合のHibernate ORMのセットアップと設定"

#: _guides/hibernate-orm.adoc
msgid ""
"To set up and configure Hibernate ORM, <<hibernate-configuration-properties,using `application.properties`>> is recommended,\n"
"but you can alternatively use a `META-INF/persistence.xml` file.\n"
"This is mainly useful for migrating existing code to Quarkus."
msgstr ""
"Hibernate ORM をセットアップして設定するには、<<hibernate-configuration-properties,using `application.properties`>> が推奨されます。\n"
"ただし、代わりに `META-INF/persistence.xml` ファイルを使用することもできます。\n"
"これは主に、既存のコードを Quarkus に移行する場合に役立ちます。"

#: _guides/hibernate-orm.adoc
msgid "Using a `persistence.xml` file implies a few constraints:"
msgstr "`persistence.xml` ファイルを使用する場合は、いくつかの制約が伴います。"

#: _guides/hibernate-orm.adoc
msgid "Persistence units defined in `persistence.xml` always use the xref:datasource.adoc#configure-a-single-datasource[default datasource]."
msgstr "`persistence.xml` で定義された永続化ユニットは、常に xref:datasource.adoc#configure-a-single-datasource[デフォルトのデータソース] を使用します。"

#: _guides/hibernate-orm.adoc
msgid ""
"Persistence units defined in `persistence.xml` must be configured explicitly:\n"
"Quarkus will keep injection of environment-related configuration to a minimum."
msgstr ""
"`persistence.xml` で定義された永続化ユニットは明示的に設定する必要があります。\n"
"Quarkus は環境関連の設定の注入を最小限に抑えます。"

#: _guides/hibernate-orm.adoc
msgid ""
"In particular, Quarkus will not configure the dialect or database version automatically based on the datasource,\n"
"so if the default configuration of Hibernate ORM doesn't suit your needs,\n"
"you will need to include in `persistence.xml` configuration such as\n"
"link:{hibernate-orm-docs-url}#settings-hibernate.dialect[`hibernate.dialect`]/link:{hibernate-orm-docs-url}#settings-jakarta.persistence.database-product-name[`jakarta.persistence.database-product-name`]\n"
"and possibly link:{hibernate-orm-docs-url}#settings-jakarta.persistence.database-product-version[`jakarta.persistence.database-product-version`]."
msgstr ""
"特に、Quarkus はデータソースに基づいてダイアレクトやデータベースのバージョンを自動設定しません。\n"
"そのため、Hibernate ORM のデフォルト設定がニーズに合わない場合は、\n"
"`persistence.xml` に\n"
" link:{hibernate-orm-docs-url}#settings-hibernate.dialect[`hibernate.dialect`]/link:{hibernate-orm-docs-url}#settings-jakarta.persistence.database-product-name[`jakarta.persistence.database-product-name`]\n"
" や link:{hibernate-orm-docs-url}#settings-jakarta.persistence.database-product-version[`jakarta.persistence.database-product-version`] などの設定を含める必要があります。"

#: _guides/hibernate-orm.adoc
msgid ""
"Using `persistence.xml` is incompatible with using `quarkus.hibernate-orm.*` properties  in `{config-file}`:\n"
"if you mix them, Quarkus will raise an exception."
msgstr ""
"`persistence.xml` を使用することは、 `{config-file}` における `quarkus.hibernate-orm.*` プロパティーの使用とは互換性がありません。\n"
"これらを混在させると、Quarkus は例外をスローします。"

#: _guides/hibernate-orm.adoc
msgid ""
"Developer experience may be impacted negatively when using `persistence.xml`\n"
"compared to when <<hibernate-configuration-properties,using `application.properties`>>,\n"
"due to unavailable features, limited guidance in the Quarkus documentation,\n"
"and error messages providing resolution hints that cannot be applied (e.g. using `quarkus.hibernate-orm.*` properties)."
msgstr "`persistence.xml` を使用する場合、<<hibernate-configuration-properties,using `application.properties`>> を使用する場合と比較して、利用できない機能、Quarkus ドキュメントでの限られたガイダンス、解決策を提供するエラーメッセージが適用できないこと (例: `quarkus.hibernate-orm.*` プロパティーの使用) などにより、開発者エクスペリエンスが悪影響を受ける可能性があります。"

#: _guides/hibernate-orm.adoc
msgid ""
"Your `pom.xml` dependencies as well as your Java code would be identical to the precedent example. The only\n"
"difference is that you would specify your Hibernate ORM configuration in `META-INF/persistence.xml`:"
msgstr "`pom.xml` の依存関係と Java コードは先の例と同じになります。唯一の違いは `META-INF/persistence.xml` で Hibernate ORM の設定を行うことだけです:"

#. type: Block title
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Example persistence.xml resource"
msgstr "persistence.xml リソースの例"

#: _guides/hibernate-orm.adoc
msgid ""
"When using the `persistence.xml` configuration you are configuring Hibernate ORM directly,\n"
"so in this case the appropriate reference is the link:{hibernate-orm-docs-url}#configurations[documentation on hibernate.org]."
msgstr "`persistence.xml` で設定を使用する場合は、Hibernate ORM を直接設定することになるので、その場合は、link:{hibernate-orm-docs-url}#configurations[hibernate.org のドキュメント] を参照することが適切です。"

#: _guides/hibernate-orm.adoc
msgid ""
"Please remember these are not the same property names as the ones used in the Quarkus `{config-file}`, nor will\n"
"the same defaults be applied."
msgstr "これらは Quarkus の `{config-file}` で使用されるプロパティー名と同じではなく、同じデフォルト値が適用されるわけではありませんのでご注意ください。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "XML mapping"
msgstr "XMLマッピング"

#: _guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM in Quarkus supports XML mapping.\n"
"You can add mapping files following\n"
"the https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0.html#a16944[`orm.xml` format (Jakarta Persistence)]\n"
"or the http://hibernate.org/dtd/hibernate-mapping-3.0.dtd[`hbm.xml` format (specific to Hibernate ORM, deprecated)]:"
msgstr ""
"Quarkus の Hibernate ORM は、XML マッピングを\n"
"サポートしています。 https://jakarta.ee/specifications/persistence/3.0/jakarta-persistence-spec-3.0.html#a16944[`orm.xml` 形式 (Jakarta Persistence)] \n"
"または http://hibernate.org/dtd/hibernate-mapping-3.0.dtd[`hbm.xml` 形式 (Hibernate ORM 固有、非推奨化)] \n"
"に従ってマッピングファイルを追加できます。"

#: _guides/hibernate-orm.adoc
msgid "in `application.properties` through the (build-time) link:#quarkus-hibernate-orm_quarkus-hibernate-orm-mapping-files[`quarkus.hibernate-orm.mapping-files`] property."
msgstr "`application.properties` で (ビルド時に) link:#quarkus-hibernate-orm_quarkus-hibernate-orm-mapping-files[`quarkus.hibernate-orm.mapping-files`] プロパティーを使用して追加する方法。"

#: _guides/hibernate-orm.adoc
msgid "in <<persistence-xml,`persistence.xml`>> through the `<mapping-file>` element."
msgstr "<<persistence-xml,`persistence.xml`>> で `<mapping-file>` 要素を使用して追加する方法。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "XML mapping files are parsed at build time."
msgstr "XML マッピングファイルは、ビルド時に解析されます。"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "The file `META-INF/orm.xml` will always be included by default, if it exists in the classpath."
msgstr "`META-INF/orm.xml` ファイルがクラスパスに存在する場合は、常にデフォルトでインクルードされます。"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "If that is not what you want, use `quarkus.hibernate-orm.mapping-files = no-file` or `<mapping-file>no-file</mapping-file>`."
msgstr "それが望ましくない場合は、 `quarkus.hibernate-orm.mapping-files = no-file` または `<mapping-file>no-file</mapping-file>` を使用します。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#: _guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the\n"
"same project where you build your Quarkus application, everything will work fine."
msgstr "QuarkusのHibernate ORMは、エンティティーに対するコンパイル時のバイトコード強化に依存しています。Quarkusアプリケーションを構築するのと同じプロジェクトでエンティティーを定義すれば、すべてがうまく動作します。"

#: _guides/hibernate-orm.adoc
msgid ""
"If the entities come from external projects\n"
"or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr "エンティティーが外部のプロジェクトやジャーから来ている場合は、空の `META-INF/beans.xml` ファイルを追加することで、jarがQuarkusアプリケーションライブラリのように扱われるようにすることができます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr "これにより、Quarkusは、エンティティが現在のプロジェクトの内部にあるかのようにインデックスを作成し、バイトコード強化をすることができます。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Hibernate ORM in development mode"
msgstr "開発モードでのHibernate ORM"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Quarkus development mode is really useful for applications that mix front end or services and database access."
msgstr "Quarkusの開発モードはフロントエンドやサービス、データベースアクセスが混在するアプリケーションにとても便利です。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "There are a few common approaches to make the best of it."
msgstr "それを生かすためにはいくつかの共通したアプローチがあります。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "The first choice is to use `quarkus.hibernate-orm.schema-management.strategy=drop-and-create` in conjunction with `import.sql`."
msgstr "最初の選択肢は、 `quarkus.hibernate-orm.schema-management.strategy=drop-and-create` と `import.sql` を併用することです。"

#: _guides/hibernate-orm.adoc
msgid ""
"That way for every change to your app and in particular to your entities, the database schema will be properly recreated\n"
"and your data fixture (stored in `import.sql`) will be used to repopulate it from scratch.\n"
"This is best to perfectly control your environment and works magic with Quarkus live reload mode:\n"
"your entity changes or any change to your `import.sql` is immediately picked up and the schema updated without restarting the application!"
msgstr "そうすることで、アプリケーション、特にエンティティに変更があるたびに、データベーススキーマが適切に再作成され、データフィクスチャ（ `import.sql` に保存）がゼロから再投入されます。これは環境を完全にコントロールするための最良の方法であり、Quarkusのライブリロードモードでは魔法のように機能します。エンティティの変更や `import.sql` へのあらゆる変更が即座に反映され、アプリケーションを再起動しなくてもスキーマが更新されます！"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"By default, in `dev` and `test` modes, Hibernate ORM, upon boot, will read and execute the SQL statements in the `/import.sql` file (if present).\n"
"You can change the file name by changing the property `quarkus.hibernate-orm.sql-load-script` in `application.properties`.\n"
"You can also provide a `.zip` file in the same way which should contain only the files containing the SQL statements to be executed."
msgstr "デフォルトでは、 `dev` および `test` モードでは、Hibernate ORM は起動時に `/import.sql` ファイル内の SQL 文を読み込んで実行します (存在する場合)。 `application.properties` の `quarkus.hibernate-orm.sql-load-script` プロパティを変更することで、ファイル名を変更することができます。 同じ方法で、実行する SQL 文を含むファイルのみを含む `.zip` ファイルを指定することもできます。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"The second approach is to use `quarkus.hibernate-orm.schema-management.strategy=update`.\n"
"This approach is best when you do many entity changes but\n"
"still need to work on a copy of the production data\n"
"or if you want to reproduce a bug that is based on specific database entries.\n"
"`update` is a best effort from Hibernate ORM and will fail in specific situations\n"
"including altering your database structure which could lead to data loss.\n"
"For example if you change structures which violate a foreign key constraint, Hibernate ORM might have to bail out.\n"
"But for development, these limitations are acceptable."
msgstr "2番目のアプローチは、 `quarkus.hibernate-orm.schema-management.strategy=update` を使用することです。 `update` は Hibernate ORM のベストエフォートであり、データ損失につながる可能性のあるデータベース構造の変更を含む特定の状況で失敗します。例えば、外部キー制約に違反する構造を変更した場合、Hibernate ORMは救済しなければならないかもしれません。しかし、開発においては、これらの制限は許容範囲内です。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"The third approach is to use `quarkus.hibernate-orm.schema-management.strategy=none`.\n"
"This approach is best when you are working on a copy of the production data but want to fully control the schema evolution.\n"
"Or if you use a database schema migration tool like xref:flyway.adoc[Flyway] or xref:liquibase.adoc[Liquibase]."
msgstr "3つ目のアプローチは、 `quarkus.hibernate-orm.schema-management.strategy=none` 。この方法は、本番データのコピーで作業しているが、スキーマの進化を完全に制御したい場合に最適です。あるいは、 xref:flyway.adoc[Flywayや] xref:liquibase.adoc[Liquibaseの] ようなデータベーススキーマ移行ツールを使用する場合です。"

#: _guides/hibernate-orm.adoc
msgid ""
"With this approach when making changes to an entity, make sure to adapt the database schema accordingly;\n"
"you could also use `validate` to have Hibernate verify the schema matches its expectations."
msgstr "この方法では、エンティティに変更を加える時にデータベーススキーマに確実に適合させる必要があります。また、 `validate` を使用して、Hibernateにスキーマが期待どおりかを確認させることもできます。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "Do not use `quarkus.hibernate-orm.schema-management.strategy` `drop-and-create` and `update` in your production environment."
msgstr "本番環境では `quarkus.hibernate-orm.schema-management.strategy` `drop-and-create` と `update` を使用しないでください。"

#: _guides/hibernate-orm.adoc
msgid ""
"These approaches become really powerful when combined with Quarkus configuration profiles.\n"
"You can define different xref:config-reference.adoc#profiles[configuration profiles]\n"
"to select different behaviors depending on your environment.\n"
"This is great because you can define different combinations of Hibernate ORM properties matching the development style you currently need."
msgstr "これらの方法は、Quarkusの設定プロファイルと組み合わせることで非常に強力になります。異なる xref:config-reference.adoc#profiles[設定プロファイル]を定義して、環境に応じて異なる動作を選択することができます。これは、現在必要としている開発スタイルに合わせて、Hibernate ORMのプロパティーの異なる組み合わせを定義できるという点で素晴らしいことです。"

#. type: Block title
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "application.properties"
msgstr "application.properties"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "You can start dev mode using a custom profile:"
msgstr "カスタムプロファイルを使用して開発モードを開始することができます:"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Hibernate ORM in production mode"
msgstr "本番モードでのHibernate ORM"

#: _guides/hibernate-orm.adoc
msgid ""
"Quarkus comes with default profiles (`dev`, `test` and `prod`).\n"
"And you can add your own custom profiles to describe various environments (`staging`, `prod-us`, etc)."
msgstr "Quarkusにはデフォルトのプロファイルが付属しています ( `dev` , `test` と `prod` )。また、様々な環境を記述するために独自のカスタムプロファイルを追加することができます ( `staging` , `prod-us` , など )。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "The Hibernate ORM Quarkus extension sets some default configurations differently in dev and test modes than in other environments."
msgstr "Hibernate ORM Quarkusエクステンションでは、いくつかのデフォルト設定が、開発モードとテストモードで他の環境とは異なるように設定されています。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`quarkus.hibernate-orm.sql-load-script` is set to `no-file` for all profiles except the `dev` and `test` ones."
msgstr "`dev` と `test` 以外のプロフィールは `quarkus.hibernate-orm.sql-load-script` が `no-file` に設定されています。"

#: _guides/hibernate-orm.adoc
msgid ""
"You can override it in your `application.properties` explicitly\n"
"(e.g. `%prod.quarkus.hibernate-orm.sql-load-script = import.sql`)\n"
"but we wanted you to avoid overriding your database by accident in prod :)"
msgstr ""
"`application.properties` で明示的にオーバーライドできます。\n"
"(例: `%prod.quarkus.hibernate-orm.sql-load-script = import.sql`) ただし、\n"
"実稼働環境で誤ってデータベースをオーバーライドすることは避けたいと考えています :)"

#: _guides/hibernate-orm.adoc
msgid ""
"Speaking of, make sure to not drop your database schema in production!\n"
"Add the following in your properties file."
msgstr ""
"ところで、実稼働環境でデータベーススキーマを削除しないようにしてください。\n"
"プロパティーファイルに以下を追加してください。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Automatically transitioning to Flyway to Manage Schemas"
msgstr "スキーマを管理するためのFlywayへの自動移行"

#: _guides/hibernate-orm.adoc
msgid ""
"If you have the xref:flyway.adoc[Flyway extension] installed when running in development mode,\n"
"Quarkus provides a simple way to initialize your Flyway configuration\n"
"using the schema generated automatically by Hibernate ORM.\n"
"This is intended to ease the move from\n"
"the early development phase, where Hibernate can be used to quickly set up the schema, to the production phase, where\n"
"Flyway is used to manage schema changes."
msgstr ""
"開発モードでで実行している際に xref:flyway.adoc[Flyway エクステンション] をインストールしている場合、\n"
"Quarkus は Hibernate ORM によって自動的に生成されたスキーマを使用して\n"
" Flyway の設定を簡単に初期化する方法を提供します。\n"
"これは、Hibernate を使ってスキーマを迅速にセットアップできる初期開発段階から、\n"
"Flyway を使ってスキーマの変更を管理する実稼働段階への移行を\n"
"容易にすることを目的としています。"

#: _guides/hibernate-orm.adoc
msgid ""
"To use this feature simply open the Dev UI when the `quarkus-flyway` extension is installed and click in the `Datasources`\n"
"link in the Flyway pane. Hit the `Create Initial Migration` button and the following will happen:"
msgstr "この機能を使用するには、 `quarkus-flyway` エクステンションがインストールされている状態で Dev UI を開き、Flyway ペインの `Datasources` リンクをクリックします。 `Create Initial Migration` ボタンを押すと、以下が実行されます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "A `db/migration/V1.0.0__\\{appname\\}.sql` file will be created, containing the SQL Hibernate is running to generate the schema"
msgstr "Hibernate がスキーマを生成するために実行している SQL を含む `db/migration/V1.0.0__\\{appname\\}.sql` ファイルが作成されます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`quarkus.flyway.baseline-on-migrate` will be set, telling Flyway to automatically create its baseline tables"
msgstr "`quarkus.flyway.baseline-on-migrate` が設定され、Flyway がベースラインとなるテーブルを自動的に作成するようになります。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`quarkus.flyway.migrate-at-start` will be set, telling Flyway to automatically apply migrations on application startup"
msgstr "`quarkus.flyway.migrate-at-start` が設定され、アプリケーションの起動時に Flyway が自動的にマイグレーションを適用するようになります。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "`%dev.quarkus.flyway.clean-at-start` and `%test.quarkus.flyway.clean-at-start` will be set, to clean the DB after reload in dev/test mode"
msgstr "`%dev.quarkus.flyway.clean-at-start` と `%test.quarkus.flyway.clean-at-start` が設定され、開発/テストモードでリロードした後に DB をクリーンアップします。"

#: _guides/hibernate-orm.adoc
msgid ""
"This button is simply a convenience to quickly get you started with Flyway, it is up to you to determine how you want to\n"
"manage your database schemas in production. In particular the `migrate-at-start` setting may not be right for all environments."
msgstr "このボタンはFlywayを素早く使い始めるためのものであり、本番環境でデータベーススキーマをどのように管理するかはユーザー次第です。特に `migrate-at-start` の設定はすべての環境に適しているとは限りません。"

#: _guides/hibernate-orm.adoc
msgid "Offline startup"
msgstr "オフライン起動"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "By default, Hibernate attempts to connect to the database at startup to fetch metadata. This is useful, for example, to validate the schema or create some temporary tables, making the startup process smoother and more user-friendly."
msgstr "デフォルトでは、Hibernateは起動時にデータベースに接続してメタデータを取得しようとします。これは、スキーマの検証や一時テーブルの作成などに便利で、起動プロセスをよりスムーズで使いやすくします。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"However, in certain environments, such as when running a Quarkus application in a container within a Kubernetes\n"
"cluster, this connection might not be possible. For example, if the application runs in one pod and the database\n"
"in another, the database may not be reachable at startup time.\n"
"To address this, Quarkus provides an _offline startup_ mode, which allows Hibernate to skip connecting to the database\n"
"during application startup."
msgstr "ただし、Kubernetesクラスタ内のコンテナでQuarkusアプリケーションを実行する場合など、特定の環境ではこの接続ができないことがあります。たとえば、アプリケーションがあるポッドで実行され、データベースが別のポッドで実行される場合、起動時にデータベースに到達できない可能性があります。これに対処するため、Quarkusには _オフラインスタートアップモードが_ 用意されており、アプリケーションの起動時にHibernateがデータベースへの接続をスキップできるようになっています。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"When using offline startup, it's important to ensure that the database schema has already been created correctly before\n"
"the application starts."
msgstr "オフライン起動を使用する場合、アプリケーションの起動前にデータベーススキーマがすでに正しく作成されていることを確認することが重要です。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"You can rely on xref:flyway.adoc[Flyway], xref:liquibase.adoc[Liquibase] or custom setups to create/migrate your database schema,\n"
"though obviously at a time where the database _is_ accessible --\n"
"Flyway's `migrate-at-start` option in particular will just fail at application startup\n"
"if the database is not reachable."
msgstr "xref:flyway.adoc[Flyway] 、 xref:liquibase.adoc[Liquibase] 、またはカスタムセットアップを利用して、データベーススキーマを作成/移行することができます。ただし、データベースにアクセス _できる_ 必要があります。特に Flyway の `migrate-at-start` オプションは、データベースにアクセスできない場合、アプリケーションの起動時に失敗します。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "To enable offline startup, set the following configuration property:"
msgstr "オフライン起動を有効にするには、以下の構成プロパティを設定します："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "You can also fine-tune dialect behavior for specific databases using additional properties, such as:"
msgstr "また、次のような追加プロパティを使用して、特定のデータベースに対する方言の動作を微調整することもできます："

#: _guides/hibernate-orm.adoc
msgid "Refer to the <<configuration-reference>> section for more details on the available properties."
msgstr ""

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Caching"
msgstr "キャッシング"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Applications that frequently read the same entities can see their performance improved when the Hibernate ORM second-level cache is enabled."
msgstr "同じエンティティを頻繁に読み込むアプリケーションでは、Hibernate ORMのL2キャッシュを有効にするとパフォーマンスが向上します。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Caching of entities"
msgstr "エンティティのキャッシュ"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "To enable second-level cache, mark the entities that you want cached with `@jakarta.persistence.Cacheable`:"
msgstr "セカンドレベルキャッシュを有効にするには、キャッシュさせたいエンティティを `@jakarta.persistence.Cacheable` でマークします:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "When an entity is annotated with `@Cacheable`, all its field values are cached except for collections and relations to other entities."
msgstr "エンティティが `@Cacheable` でアノテーションされているときは、コレクションと他のエンティティとの関係を除いて、そのすべてのフィールド値がキャッシュされます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "This means the entity can be loaded without querying the database, but be careful as it implies the loaded entity might not reflect recent changes in the database."
msgstr "これは、データベースに問い合わせることなくエンティティをロードできることを意味しますが、ロードされたエンティティがデータベースの最近の変更を反映していない可能性があることを意味するので注意が必要です。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Caching of collections and relations"
msgstr "コレクションとリレーションのキャッシング"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Collections and relations need to be individually annotated to be cached; in this case the Hibernate specific `@org.hibernate.annotations.Cache` should be used, which requires also to specify the `CacheConcurrencyStrategy`:"
msgstr "コレクションとリレーションはキャッシュするために個別にアノテーションする必要があります。この場合、Hibernate固有の `@org.hibernate.annotations.Cache` を使用する必要があり、さらに `CacheConcurrencyStrategy` を指定する必要があります:"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Caching of queries"
msgstr "クエリのキャッシュ"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Queries can also benefit from second-level caching. Cached query results can be returned immediately to the caller, avoiding to run the query on the database."
msgstr "クエリもL2キャッシュの恩恵を受けることができます。キャッシュされたクエリの結果は即座に呼び出し元に返すことができるので、データベース上でクエリを実行する必要がありません。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Be careful as this implies the results might not reflect recent changes."
msgstr "最近の変化を反映していない可能性があることを含意しているので注意が必要です。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "To cache a query, mark it as cacheable on the `Query` instance:"
msgstr "クエリをキャッシュするには、 `Query` インスタンス上でキャッシュ可能なものとしてマークします:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "If you have a `NamedQuery` then you can enable caching directly on its definition, which will usually be on an entity:"
msgstr "`NamedQuery` があれば、その定義で直接キャッシュを有効にすることができます。これは通常、エンティティ上で行われます:"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "That's all! Caching technology is already integrated and enabled by default in Quarkus, so it's enough to set which ones are safe to be cached."
msgstr "以上です。キャッシュ技術はすでにQuarkusに統合されてデフォルトで有効になってるのでキャッシュしても問題ないものを設定するだけで十分です。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Tuning of Cache Regions"
msgstr "キャッシュ領域の調整"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Caches store the data in separate regions to isolate different portions of data; such regions are assigned a name, which is useful for configuring each region independently, or to monitor their statistics."
msgstr "キャッシュはデータの異なる部分を分離するために別々の領域にデータを保存します。このような領域には名前が付けられ、各領域を独立して設定したり、統計を監視したりするのに役立ちます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "By default, entities are cached in regions named after their fully qualified name, e.g. `org.acme.Country`."
msgstr "デフォルトでは、エンティティは、その完全修飾名を冠した領域（例えば、 `org.acme.Country`）にキャッシュされます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Collections are cached in regions named after the fully qualified name of their owner entity and collection field name, separated by `#` character, e.g. `org.acme.Country#cities`."
msgstr "`org.acme.Country#cities` コレクションは保持するエンティティの完全修飾名とコレクションのフィールド名を `#` 文字で区切った名前の領域にキャッシュされます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "All cached queries are by default kept in a single region dedicated to them called `default-query-results-region`."
msgstr "すべてのキャッシュされたクエリは、デフォルトでは、 `default-query-results-region` と呼ばれる一つの専用の領域に保存されます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "All regions are bounded by size and time by default. The defaults are `10000` max entries, and `100` seconds as maximum idle time."
msgstr "すべてのリージョンは、デフォルトではサイズと時間で制限されています。デフォルトでは、最大で `10000` のエントリ数、最大で `100` 秒のアイドル時間が設定されています。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "The size of each region can be customized via the `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` property (Replace _<region_name>_ with the actual region name)."
msgstr "各リージョンのサイズは、 `quarkus.hibernate-orm.cache.\"<region_name>\".memory.object-count` プロパティーを介してカスタマイズできます (_<region_name>_ は実際のリージョン名に置き換えます)。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "To set the maximum idle time, provide the duration (see note on duration's format below) via the `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` property (Replace _<region_name>_ with the actual region name)."
msgstr "最大アイドル時間を設定するには、 `quarkus.hibernate-orm.cache.\"<region_name>\".expiration.max-idle` プロパティー (_<region_name>_ は実際のリージョン名に置き換えます) を介して時間 (下記の時間のフォーマットに関する注意を参照) を指定します。"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "The double quotes are mandatory if your region name contains a dot. For instance:"
msgstr "領域名にドットが含まれている場合は二重引用符が必須です。次のようになります:"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Limitations of Caching"
msgstr "キャッシュの制限"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "The caching technology provided within Quarkus is currently quite rudimentary and limited."
msgstr "Quarkusで提供されているキャッシュ技術は現在のところ非常に初歩的で制約があります。"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "The team thought it was better to have _some_ caching capability to start with, than having nothing; you can expect better caching solution to be integrated in future releases, and any help and feedback in this area is very welcome."
msgstr "Quarkusの開発チームは最初から _ある程度の_ キャッシュ機能があった方が何もないよりは良いと考えました。将来のリリースではより良いキャッシュソリューションが統合されることを期待しています。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "These caches are kept locally, so they are not invalidated or updated when changes are made to the persistent store by other applications."
msgstr "これらのキャッシュはローカルに保持されているため、他のアプリケーションによって永続ストアに変更が加えられても無効化されたり更新されたりすることはありません。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Also, when running multiple copies of the same application (in a cluster, for example on Kubernetes/OpenShift), caches in separate copies of the application aren't synchronized."
msgstr "また、同じアプリケーションの複数のコピーを（Kubernetes/OpenShiftなどのクラスタで）実行している場合、アプリケーションの別々のコピーのキャッシュは同期されません。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "For these reasons, enabling caching is only suitable when certain assumptions can be made: we strongly recommend that only entities, collections and queries which never change are cached. Or at most, that when indeed such an entity is mutated and allowed to be read out of date (stale) this has no impact on the expectations of the application."
msgstr "これらの理由から、ある種の仮定が成り立つ場合にのみキャッシュを有効にすることが適しています。私たちは、変化しないエンティティ、コレクション、およびクエリのみをキャッシュすることを強く推奨します。あるいは、そのようなエンティティが実際に変更され、古くなった（stale）ものを読み取ったとしても、アプリケーションの期待値に影響を与えないようにする必要があります。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Following this advice guarantees applications get the best performance out of the second-level cache and yet avoid unexpected behaviour."
msgstr "このアドバイスに従うことで、アプリケーションがL2キャッシュから最高のパフォーマンスを引き出し、かつ予期せぬ動作を避けることができます。"

#: _guides/hibernate-orm.adoc
msgid ""
"On top of immutable data, in certain contexts it might be acceptable to enable caching also on mutable data; this could be a necessary tradeoff on selected\n"
" entities which are read frequently and for which some degree of staleness is acceptable; this \" acceptable degree of staleness\" can be tuned by setting eviction properties.\n"
" This is however not recommended and should be done with extreme care, as it might\n"
" produce unexpected and unforeseen effects on the data."
msgstr "不変のデータだけでなく、ある文脈では、可変のデータに対してもキャッシュを有効にすることが許容されるかもしれません。これは、頻繁に読み込まれ、ある程度の陳腐化を許容できるようなエンティティを選択した場合、必要なトレードオフとなり得ます。この「許容される陳腐化の度合い」は、eviction プロパティーを設定することで調整できます。しかし、これは推奨されておらず、データに予期せぬ影響を与える可能性があるため、細心の注意を払って行う必要があります。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Rather than enabling caching on mutable data, ideally a better solution would be to use a clustered cache; however at this time Quarkus doesn't provide any such implementation: feel free to get in touch and let this need known so that the team can take this into account."
msgstr "理想的には、変更可能なデータでキャッシュを有効にするのではなく、クラスタ化されたキャッシュを使用することがより良い解決策です。しかし、現時点では、Quarkusはそのような実装を提供していません：この必要性を知らせれば、チームがこれを考慮することができますので、お気軽にご連絡ください。"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "Finally, the second-level cache can be disabled globally by setting `hibernate.cache.use_second_level_cache` to `false`; this is a setting that needs to be specified in the `persistence.xml` configuration file."
msgstr "最後に、 `hibernate.cache.use_second_level_cache` を `false` に設定することで、L2 キャッシュをグローバルで無効化できます。この設定は、 `persistence.xml` 設定ファイルで指定する必要があります。"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "When second-level cache is disabled, all cache annotations are ignored and all queries are run ignoring caches; this is generally useful only to diagnose issues."
msgstr "L2キャッシュを無効にすると、すべてのキャッシュアノテーションは無視され、すべてのクエリはキャッシュを無視して実行されます。これは通常、問題を診断する場合にのみ有効です。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Hibernate Envers"
msgstr "Hibernate Envers"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "The Envers extension to Hibernate ORM aims to provide an easy auditing / versioning solution for entity classes."
msgstr "Hibernate ORMのEnversエクステンションは、エンティティクラスのための簡単な監査/バージョン管理ソリューションを提供することを目的としています。"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "In Quarkus, Envers has a dedicated Quarkus Extension `io.quarkus:quarkus-hibernate-envers`; you just need to add this to your project to start using it."
msgstr "Quarkusでは、Enversには専用のQuarkus エクステンションがあります。 `io.quarkus:quarkus-hibernate-envers` ; これをプロジェクトに追加して使用を開始する必要があります。"

#. type: Block title
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Additional dependency to enable Hibernate Envers"
msgstr "Hibernate Enversを有効にするための追加の依存関係"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "At this point the extension does not expose additional configuration properties."
msgstr "Quarkusの設定プロパティーを使用して、複数の永続化ユニットを定義することができます。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "For more information about Hibernate Envers, see link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/]."
msgstr "Hibernate Envers の詳細については、link:https://hibernate.org/orm/envers/[hibernate.org/orm/envers/] を参照してください。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Metrics"
msgstr "メトリクス"

#: _guides/hibernate-orm.adoc
msgid ""
"Either xref:telemetry-micrometer.adoc[Micrometer] or xref:smallrye-metrics.adoc[SmallRye Metrics] are\n"
"capable of exposing metrics that Hibernate ORM collects at runtime. To enable exposure of Hibernate metrics\n"
"on the `/q/metrics` endpoint, make sure your project depends on a metrics extension and set the configuration property `quarkus.hibernate-orm.metrics.enabled` to `true`.\n"
"When using xref:smallrye-metrics.adoc[SmallRye Metrics], metrics will be available under the `vendor` scope."
msgstr ""
"xref:telemetry-micrometer.adoc[Micrometer] または xref:smallrye-metrics.adoc[SmallRye Metrics] は、\n"
"Hibernate ORM が実行時に収集するメトリクスを公開できます。Hibernate のメトリクスを `/q/metrics` エンドポイントで公開するには、\n"
"プロジェクトがメトリクスエクステンションに依存しており、設定プロパティー `quarkus.hibernate-orm.metrics.enabled` を `true` に設定していることを確認します。\n"
"xref:smallrye-metrics.adoc[SmallRye Metrics] を使用している場合、メトリクスは `vendor` スコープ内で利用可能になります。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Limitations and other things you should know"
msgstr "制限事項など知っておくべきこと"

#: _guides/hibernate-orm.adoc
msgid ""
"Quarkus does not modify the libraries it uses; this rule applies to Hibernate ORM as well: when using\n"
"this extension you will mostly have the same experience as using the original library."
msgstr "Quarkusは使用するライブラリを変更しません。このルールはHibernate ORMにも適用されます。このエクステンションを使用すると、元のライブラリを使用した場合とほとんど同じエクスペリエンスが得られます。"

#: _guides/hibernate-orm.adoc
msgid ""
"But while they share the same code, Quarkus does configure some components automatically and injects custom implementations\n"
"for some extension points; this should be transparent and useful but if you're an expert of Hibernate you might want to\n"
"know what is being done."
msgstr ""
"ただし、同じコードを共有しているものの、Quarkus は一部のコンポーネントを自動的に設定し、いくつかのエクステンション\n"
"ポイントに対してカスタム実装を注入します。これは透過的で便利なはずですが、Hibernate のエキスパートであれば、\n"
"何が行われているかを知りたいかもしれません。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Automatic build time enhancement"
msgstr "自動ビルド時間の強化"

#: _guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM can use build time enhanced entities; normally this is not mandatory, but it's useful and will have your\n"
"applications perform better."
msgstr "Hibernate ORMでは、ビルド時に拡張されたエンティティを使用できます。通常、これは必須ではありませんが便利でアプリケーションのパフォーマンスを向上させることができます。"

#: _guides/hibernate-orm.adoc
msgid ""
"Typically, you would need to adapt your build scripts to include the Hibernate Enhancement plugins; in Quarkus this is\n"
"not necessary as the enhancement step is integrated in the build and analysis of the Quarkus application."
msgstr "通常は、ビルドスクリプトにHibernate Enhancementプラグインを含める必要がありますが、QuarkusではEnhancementステップがQuarkusアプリケーションのビルドと分析に統合されているため、その必要はありません。"

#: _guides/hibernate-orm.adoc
msgid ""
"Due to the usage of enhancement, using the `clone()` method on entities is currently not supported\n"
"as it will also clone some enhancement-specific fields that are specific to the entity."
msgstr "Enhancement を使用しているため、エンティティで `clone()` メソッドを使用することは現在サポートされていません。これは、エンティティにEnhancement 固有のフィールドもクローンされるためです。"

#. type: delimited block =
#: _guides/hibernate-orm.adoc
msgid "This limitation might be removed in the future."
msgstr "この制限は将来的に削除される可能性があります。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Automatic integration"
msgstr "自動統合"

#. type: Labeled list
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Transaction Manager integration"
msgstr "トランザクションマネージャーの統合"

#: _guides/hibernate-orm.adoc
msgid ""
"You don't need to set this up, Quarkus automatically injects the reference to the Narayana Transaction Manager.\n"
"The dependency is included automatically as a transitive dependency of the Hibernate ORM extension.\n"
"All configuration is optional; for more details see xref:transaction.adoc[Using Transactions in Quarkus]."
msgstr "これを設定する必要はありません。Quarkus は自動的に Narayana Transaction Manager への参照を注入します。この依存関係は、Hibernate ORM エクステンションの推移的依存関係として自動的に含まれます。すべての設定はオプションです。詳細は、xref:transaction.adoc[Quarkusでのトランザクションの使用] を参照してください。"

#. type: Labeled list
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Connection pool"
msgstr "コネクションプール"

#: _guides/hibernate-orm.adoc
msgid ""
"Don't need to choose one either. Quarkus automatically includes the Agroal connection pool;\n"
"configure your datasource as in the above examples and it will set up Hibernate ORM to use Agroal.\n"
"More details about this connection pool can be found in xref:datasource.adoc[Quarkus - Datasources]."
msgstr "どちらかを選択する必要はありません。上記の例のようにデータソースを設定するだけで、Hibernate ORMがAgroalを使用するように設定されます。このコネクションプールの詳細については、 xref:datasource.adoc[Quarkus - データソース]を参照してください。"

#. type: Labeled list
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Second Level Cache"
msgstr "L2キャッシュ"

#: _guides/hibernate-orm.adoc
msgid ""
"As explained earlier in the <<caching,Caching section>>, you don't need to pick an implementation.\n"
"A suitable implementation based on technologies from link:https://infinispan.org/[Infinispan] and link:https://github.com/ben-manes/caffeine[Caffeine] is included as a transitive dependency of the Hibernate ORM extension, and automatically integrated during the build."
msgstr ""
"前述の <<caching,Caching section>> で説明したように、実装を選択する必要はありません。\n"
"link:https://infinispan.org/[Infinispan] と link:https://github.com/ben-manes/caffeine[Caffeine] の技術に基づく適切な実装が Hibernate ORM エクステンションの遷移依存関係として含まれており、ビルド時に自動的に統合されます。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Limitations"
msgstr "制限"

#. type: Labeled list
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "XML mapping with duplicate files in the classpath"
msgstr "クラスパスに重複したファイルがある場合のXMLマッピング"

#: _guides/hibernate-orm.adoc
msgid "<<xml-mapping,XML mapping>> files are expected to have a unique path."
msgstr "<<xml-mapping,XML mapping>> ファイルは一意のパスを持つことが期待されます。"

#: _guides/hibernate-orm.adoc
msgid ""
"In practice, it's only possible to have duplicate XML mapping files in the classpath in very specific scenarios.\n"
"For example, if two JARs include a `META-INF/orm.xml` file (with the exact same path but in different JARs),\n"
"then the mapping file path `META-INF/orm.xml` can only be referenced from a `persistence.xml`\n"
"**in the same JAR as the `META-INF/orm.xml` file**."
msgstr "実際には、クラスパスに XML マッピングファイルを重複して配置するのは、非常に特殊なシナリオの場合のみです。たとえば、2つのJARに（まったく同じパスで異なるJARにある） `META-INF/orm.xml` ファイルが含まれている場合、マッピングファイルのパス `META-INF/orm.xml` は、 *<code>META-INF/orm.xml</code> ファイルと同じJAR* の `persistence.xml` からしか参照できません。"

#. type: Labeled list
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "JMX"
msgstr "JMX"

#: _guides/hibernate-orm.adoc
msgid ""
"Management beans are not working in GraalVM native images;\n"
"therefore, Hibernate's capability to register statistics and management operations with the JMX bean is disabled when compiling into a native image.\n"
"This limitation is likely permanent, as it's not a goal for native images\n"
"to implement support for JMX. All such metrics can be accessed in other ways."
msgstr "管理 Bean は GraalVM ネイティブイメージでは動作しません。したがって、ネイティブイメージにコンパイルすると、JMX Bean に統計と管理操作を登録する Hibernate の機能は無効になります。ネイティブ・イメージがJMXのサポートを実装することは目標ではないので、この制限は永久に続くと思われます。このようなメトリクスはすべて、他の方法でアクセスすることができます。"

#. type: Labeled list
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "JACC Integration"
msgstr "JACCの統合"

#: _guides/hibernate-orm.adoc
msgid ""
"Hibernate ORM's capability to integrate with JACC is disabled when building GraalVM native images,\n"
"as JACC is not available - nor useful - in native mode."
msgstr "GraalVMのネイティブイメージを構築する際には、JACCと統合するHibernate ORMの機能は無効になります。なぜなら、JACCはネイティブ・モードでは利用できず、有用でもないからです。"

#. type: Labeled list
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Binding the Session to ThreadLocal context"
msgstr "セッションをThreadLocalコンテキストにバインドする"

#: _guides/hibernate-orm.adoc
msgid ""
"It is impossible to use the `ThreadLocalSessionContext` helper of Hibernate ORM as support for it is not implemented.\n"
"Since Quarkus provides out-of-the-box CDI support, injection or programmatic CDI lookup is a better approach.\n"
"This feature also didn't integrate well with reactive components and more modern context propagation techniques, making us believe this legacy feature has no future.\n"
"If you badly need to bind it to a ThreadLocal, it should be trivial to implement in your own code."
msgstr ""
"Hibernate ORM の `ThreadLocalSessionContext` ヘルパーは、サポートが実装されていないため使用できません。\n"
"Quarkus は CDI サポートを最初から提供しているので、注入やプログラムによる CDI ルックアップがより良いアプローチとなります。\n"
"この機能は、リアクティブコンポーネントやより最新のコンテキスト伝播技術ともうまく統合されなかったため、このレガシー機能には将来性がないと考えられます。\n"
"どうしても ThreadLocal にバインドする必要がある場合は、独自のコードで簡単に実装できるはずです。"

#. type: Labeled list
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "JNDI"
msgstr "JNDI"

#: _guides/hibernate-orm.adoc
msgid ""
"The JNDI technology is commonly used in other runtimes to integrate different components.\n"
"A common use case is Java Enterprise servers to bind the TransactionManager and the Datasource components to a name and then have Hibernate ORM configured to look these components up by name.\n"
"But in Quarkus, this use case doesn't apply as components are injected directly, making JNDI support an unnecessary legacy.\n"
"To avoid unexpected use of JNDI, full support for JNDI has been disabled in the Hibernate ORM extension for Quarkus.\n"
"This is both a security precaution and an optimization."
msgstr "JNDI技術は、異なるコンポーネントを統合するために他のランタイムで一般的に使用されています。一般的な使用例は、Java EnterpriseサーバーでTransactionManagerとDatasourceコンポーネントを名前にバインドし、Hibernate ORMがこれらのコンポーネントを名前で検索するように設定することです。しかし、Quarkusでは、コンポーネントが直接注入されるため、このユースケースは適用されず、JNDIサポートは不要なレガシーとなります。JNDIの予期せぬ使用を避けるため、QuarkusのHibernate ORMエクステンションでは、JNDIの完全なサポートは無効になっています。これは、セキュリティ上の予防策であり、最適化でもあります。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Other notable differences"
msgstr "その他の特記すべき相違点"

#. type: Labeled list
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Format of `import.sql`"
msgstr "`import.sql` のフォーマット"

#: _guides/hibernate-orm.adoc
msgid ""
"When importing a `import.sql` to set up your database, keep in mind that Quarkus reconfigures Hibernate ORM so to require a semicolon (`;`) to terminate each statement.\n"
"The default in Hibernate is to have a statement per line, without requiring a terminator other than newline: remember to convert your scripts to use the `;` terminator character if you're reusing existing scripts.\n"
"This is useful so to allow multi-line statements and human friendly formatting."
msgstr "データベースをセットアップするために `import.sql` をインポートする際、QuarkusはHibernate ORMを再構成し、各ステートメントの最後にセミコロン（ ';' ）を必要とすることに留意してください。Hibernateのデフォルトでは、改行以外の終端文字を必要とせず、1行に1つのステートメントがあります。既存のスクリプトを再利用する場合は、終端文字として「;」を使用するようにスクリプトを変換することを忘れないでください。これは、複数行のステートメントを可能にし、人間が使いやすいフォーマットにするために役立ちます。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Simplifying Hibernate ORM with Panache"
msgstr "Simplified Hibernate ORM with Panache"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "The xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] extension facilitates the usage of Hibernate ORM by providing active record style entities (and repositories) and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] エクステンションはアクティブレコードスタイルのエンティティ（およびリポジトリ）を提供してHibernate ORMを簡単に使えるようにし、Quarkusでエンティティを簡単に楽しく書けるようにすることに重点を置いています。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Configure your datasource"
msgstr "データソースの設定"

#: _guides/hibernate-orm.adoc
msgid ""
"Datasource configuration is extremely simple, but is covered in a different guide as technically\n"
"it's implemented by the Agroal connection pool extension for Quarkus."
msgstr "データソースの設定は非常にシンプルですが、技術的にはQuarkus用のAgroal接続プールエクステンションによって実装されているため、別のガイドで説明します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Jump over to xref:datasource.adoc[Quarkus - Datasources] for all details."
msgstr "詳細は xref:datasource.adoc[Quarkus - データソース]をご覧ください。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Multitenancy"
msgstr "マルチテナンシー"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "\"The term multitenancy, in general, is applied to software development to indicate an architecture in which a single running instance of an application simultaneously serves multiple clients (tenants). This is highly common in SaaS solutions. Isolating information (data, customizations, etc.) pertaining to the various tenants is a particular challenge in these systems. This includes the data owned by each tenant stored in the database\" (link:{hibernate-orm-docs-url}#multitenacy[Hibernate User Guide])."
msgstr "「マルチテナンシーという用語は、一般的にソフトウェア開発において、1 つの実行中のアプリケーションインスタンスが複数のクライアント (テナント) に同時にサービスを提供するアーキテクチャーを指します。これは SaaS ソリューションにおいて非常に一般的です。こうしたシステムでは、各テナントに関連する情報 (データ、カスタマイズなど) を分離することが特に課題となります。これには、データベースに保存される各テナントが所有するデータの分離も含まれます」 (link:{hibernate-orm-docs-url}#multitenacy[Hibernate ユーザーガイド])"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Quarkus currently supports the link:{hibernate-orm-docs-url}#multitenacy-separate-database[separate database] approach, the link:{hibernate-orm-docs-url}#multitenacy-separate-schema[separate schema] approach and the link:{hibernate-orm-docs-url}#multitenacy-discriminator[discriminator] approach."
msgstr "Quarkus は現在、link:{hibernate-orm-docs-url}#multitenacy-separate-database[別々のデータベース] を使用する方法、link:{hibernate-orm-docs-url}#multitenacy-separate-schema[別々のスキーマ] を使用する方法、および link:{hibernate-orm-docs-url}#multitenacy-discriminator[discriminator] を使用する方法をサポートしています。"

#: _guides/hibernate-orm.adoc
msgid "To see multitenancy in action, you can check out the link:{quickstarts-tree-url}/hibernate-orm-multi-tenancy-schema-quickstart[hibernate-orm-multi-tenancy-schema-quickstart] or link:{quickstarts-tree-url}/hibernate-orm-multi-tenancy-database-quickstart[hibernate-orm-multi-tenancy-database-quickstart]."
msgstr "マルチテナンシーの動作を確認するには、 link:{quickstarts-tree-url}/hibernate-orm-multi-tenancy-schema-quickstart[hibernate-orm-multi-tenancy-schema-quickstart] または link:{quickstarts-tree-url}/hibernate-orm-multi-tenancy-database-quickstart[hibernate-orm-multi-tenancy-database-quickstart] をご覧ください。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Writing the application"
msgstr "アプリケーションの記述"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Let's start by implementing the `/{tenant}` endpoint. As you can see from the source code below it is just a regular Jakarta REST resource:"
msgstr "`/{tenant}` エンドポイントを実装することから始めます。以下のソースコードからわかるように、これは単なる通常の Jakarta REST リソースです。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "In order to resolve the tenant from incoming requests and map it to a specific tenant configuration, you need to create an implementation for the `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` interface."
msgstr "受信したリクエストからテナントを解決し、特定のテナント構成にマッピングするためには、 `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` インターフェースの実装を作成する必要があります。"

#: _guides/hibernate-orm.adoc
msgid ""
"Annotate the TenantResolver implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr "TenantResolverの実装に `@PersistenceUnitExtension` という修飾語を付けて、Quarkusにデフォルトの永続化ユニットで使用することを伝えます。"

#: _guides/hibernate-orm.adoc
msgid "For <<multiple-persistence-units,named persistence units>>, use `@PersistenceUnitExtension(\"nameOfYourPU\")`."
msgstr "<<multiple-persistence-units,named persistence units>> の場合は、 `@PersistenceUnitExtension(\"nameOfYourPU\")` を使用します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr "Beanは、テナントの解決が入ってくるリクエストに依存するため `@RequestScoped` にします。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "From the implementation above, tenants are resolved from the request path so that in case no tenant could be inferred, the default tenant identifier is returned."
msgstr "上記の実装ではテナントはリクエストパスから解決されるので、テナントが推測できない場合はデフォルトのテナント識別子が返されます。"

#: _guides/hibernate-orm.adoc
msgid ""
"If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy] and both OIDC and Hibernate ORM tenant IDs are the same,\n"
"you can get the OIDC tenant id from a `RoutingContext` attribute like in the example below:"
msgstr ""
"xref:security-openid-connect-multitenancy.adoc[OIDC マルチテナンシー] も使用しており、OIDC と Hibernate ORM のテナント ID が同じ場合は、\n"
"以下の例のように `RoutingContext` 属性から OIDC のテナント ID を取得できます。"

#: _guides/hibernate-orm.adoc
msgid ""
"If the Hibernate `TenantResolver` also resolves tenants when there is no active HTTP request,\n"
"for example when you query database from a scheduler, the `RoutingContext` CDI bean will not be available.\n"
"Please inject the `io.quarkus.vertx.http.runtime.CurrentVertxRequest` CDI bean instead and get the `RoutingContext` from this bean."
msgstr ""
"Hibernate の `TenantResolver`がアクティブな HTTP リクエストがない場合でもテナントを解決する場合、\n"
"たとえば、スケジューラーからデータベースをクエリーする場合、 `RoutingContext` CDI Bean は使用できません。\n"
"代わりに `io.quarkus.vertx.http.runtime.CurrentVertxRequest` CDI Bean を注入し、この Bean から `RoutingContext` を取得してください。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#: _guides/hibernate-orm.adoc
msgid ""
"In general, it is not possible to use the Hibernate ORM database generation feature in conjunction with a multitenancy setup.\n"
"Therefore, you have to disable it, and you need to make sure that the tables are created per schema.\n"
"The following setup will use the xref:flyway.adoc[Flyway] extension to achieve this goal."
msgstr "一般的に、Hibernate ORMのデータベース生成機能をマルチテナンシーのセットアップと組み合わせて使用することはできません。そのため、この機能を無効にして、テーブルがスキーマごとに作成されるようにする必要があります。以下のセットアップでは、 xref:flyway.adoc[Flyway] エクステンションを使用してこの目的を達成します。"

#. type: Title ====
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "SCHEMA approach"
msgstr "SCHEMAアプローチ"

#: _guides/hibernate-orm.adoc
msgid "The same data source will be used for all tenants and a schema has to be created for every tenant inside that data source."
msgstr "すべてのテナントに同じデータソースが使用され、そのデータソース内のすべてのテナントに対してスキーマを作成する必要があります。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Some databases like MariaDB/MySQL do not support database schemas by default. In these cases you can either:\n"
"1. Configure the JDBC driver to support schemas.\n"
"Use `quarkus.datasource.jdbc.additional-jdbc-properties.\"databaseTerm\"=SCHEMA`\n"
"or `quarkus.datasource.\"datasource-name\".jdbc.additional-jdbc-properties.\"databaseTerm\"=SCHEMA`\n"
"for https://dev.mysql.com/doc/connector-j/en/connector-j-connp-props-connection.html#cj-conn-prop_databaseTerm[MySQL Connector/J].\n"
"Use `quarkus.datasource.jdbc.additional-jdbc-properties.\"useCatalogTerm\"=SCHEMA`\n"
"or `quarkus.datasource.\"datasource-name\".jdbc.additional-jdbc-properties.\"useCatalogTerm\"=SCHEMA`\n"
"for https://mariadb.com/docs/connectors/mariadb-connector-j/about-mariadb-connector-j[MariaDB Connector/J]."
msgstr "MariaDB/MySQLのように、デフォルトではデータベーススキーマをサポートしていないデータベースもあります。このような場合、以下のどちらかの方法があります：1.スキーマをサポートするように JDBC ドライバを設定します。 link:https://dev.mysql.com/doc/connector-j/en/connector-j-connp-props-connection.html#cj-conn-prop_databaseTerm[MySQL Connector/J] には `quarkus.datasource.jdbc.additional-jdbc-properties.\"databaseTerm\"=SCHEMA` または `quarkus.datasource.\"datasource-name\".jdbc.additional-jdbc-properties.\"databaseTerm\"=SCHEMA` を使用します。 link:https://mariadb.com/docs/connectors/mariadb-connector-j/about-mariadb-connector-j[MariaDB Connector/J] には `quarkus.datasource.jdbc.additional-jdbc-properties.\"useCatalogTerm\"=SCHEMA` または `quarkus.datasource.\"datasource-name\".jdbc.additional-jdbc-properties.\"useCatalogTerm\"=SCHEMA` を使用。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"and\n"
"2. Fall back to the <<database-approach,database approach>>."
msgstr "と2. xref:database-approach[データベースアプローチに] 戻る"

#: _guides/hibernate-orm.adoc
msgid ""
"Disable schema generation, because it is not supported by Hibernate ORM for schema multi-tenancy.\n"
"We'll use Flyway instead, see further down."
msgstr ""
"スキーママルチテナンシーでは Hibernate ORM によってサポートされていないため、スキーマ生成を無効にします。\n"
"代わりに Flyway を使用します。詳細は下記を参照してください。"

#: _guides/hibernate-orm.adoc
msgid "Enable schema multi-tenancy."
msgstr "スキーマのマルチテナンシーを有効にします。"

#: _guides/hibernate-orm.adoc
msgid ""
"We use the default datasource here, but could use a named datasource if we wanted to,\n"
"by following instructions <<multiple-persistence-units,there>>."
msgstr "ここではデフォルトのデータソースを使用していますが、<<multiple-persistence-units,there>> の指示に従って、名前付きのデータソースを使用することもできます。"

#: _guides/hibernate-orm.adoc
msgid ""
"Configure xref:flyway.adoc[Flyway] for database initialization,\n"
"because schema generation by Hibernate ORM is not supported in this case."
msgstr ""
"この場合、Hibernate ORM によるスキーマ生成がサポートされていないため、\n"
"xref:flyway.adoc[Flyway] をデータベースの初期化用に設定します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Here is an example of the Flyway SQL (`V1.0.0__create_fruits.sql`) to be created in the configured folder `src/main/resources/schema`."
msgstr "ここでは、設定されたフォルダー `src/main/resources/schema` に作成される Flyway SQL ( `V1.0.0__create_fruits.sql` ) の例を示します。"

#. type: Title ====
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "DATABASE approach"
msgstr "データベースアプローチ"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "For every tenant you need to create a named data source with the same identifier that is returned by the `TenantResolver`."
msgstr "すべてのテナントに対して、 `TenantResolver` が返すのと同じ識別子を持つ名前付きデータソースを作成する必要があります。"

#: _guides/hibernate-orm.adoc
msgid ""
"With this approach, all datasources used by the same persistence unit\n"
"are assumed to point to a database of the same vendor (same `db-kind`) and version."
msgstr ""
"このアプローチでは、同じ永続化ユニットで使用されるすべてのデータソースが、\n"
"同じベンダー (同じ `db-kind`) およびバージョンのデータベースを指すと仮定されます。"

#: _guides/hibernate-orm.adoc
msgid "Mismatches will not be detected, and may result in unpredictable behavior."
msgstr "不一致は検出されず、予期しない動作が発生する可能性があります。"

#: _guides/hibernate-orm.adoc
msgid ""
"The list of datasources is defined at build time, so with this approach the **list** of tenants is **fixed at build time**.\n"
"If the list of tenants needs to change at runtime, you must <<programmatically-resolving-tenants-connections,resolve the tenant connections programmatically>>."
msgstr ""
"データソースのリストはビルド時に定義されるため、この方法ではテナントの **リスト** は **ビルド時に固定** されます。\n"
"実行時にテナントのリストを変更する必要がある場合は、 xref:programmatically-resolving-tenants-connections[プログラムでテナント接続を解決する] 必要があります。"

#: _guides/hibernate-orm.adoc
msgid ""
"Disable schema generation, because it is not supported by Hibernate ORM for database multi-tenancy.\n"
"We'll use Flyway instead, see further down."
msgstr "データベースのマルチテナンシーには Hibernate ORM によるスキーマ生成がサポートされていないため、スキーマ生成を無効にします。代わりに Flyway を使用します。詳細は下記を参照してください。"

#: _guides/hibernate-orm.adoc
msgid "Enable database multi-tenancy."
msgstr "データベースのマルチテナンシーを有効にします。"

#: _guides/hibernate-orm.adoc
msgid "Select a datasource for the persistence unit."
msgstr "永続化ユニットのデータソースを選択します。"

#: _guides/hibernate-orm.adoc
msgid ""
"This is only to allow Quarkus to determine the Hibernate ORM dialect to use;\n"
"see <<hibernate-dialect-varying-database,this section>> for details."
msgstr ""
"これは、Quarkus が使用する Hibernate ORM のダイアレクトを決定できるようにすることのみを目的としています。\n"
"詳細は、<<hibernate-dialect-varying-database,this section>> を参照してください。"

#: _guides/hibernate-orm.adoc
msgid "xref:datasource.adoc[Configure the datasource] for one tenant, `base`."
msgstr "1 つのテナント、 `base` 用に xref:datasource.adoc[データソースを設定] します。"

#: _guides/hibernate-orm.adoc
msgid ""
"Configure xref:flyway.adoc[Flyway] for database initialization for tenant `base`,\n"
"because schema generation by Hibernate ORM is not supported in this case."
msgstr ""
"この場合、Hibernate ORM によるスキーマ生成はサポートされていないため、\n"
"テナント `base` のデータベース初期化用に xref:flyway.adoc[Flyway] を設定します。"

#: _guides/hibernate-orm.adoc
msgid "xref:datasource.adoc[Configure the datasource] for another tenant."
msgstr "別のテナントの xref:datasource.adoc[データソースを設定します]。"

#: _guides/hibernate-orm.adoc
msgid "There could be more tenants, but here we're stopping at two."
msgstr "他にもテナントがあるかもしれませんが、ここでは 2 つで止めています。"

#: _guides/hibernate-orm.adoc
msgid ""
"Configure xref:flyway.adoc[Flyway] for database initialization for tenant `mycompany`,\n"
"because schema generation by Hibernate ORM is not supported in this case."
msgstr ""
"この場合、Hibernate ORM によるスキーマ生成はサポートされていないため、\n"
"テナント `mycompany` のデータベース初期化用に xref:flyway.adoc[Flyway] を設定します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Following are examples of the Flyway SQL files to be created in the configured folder `src/main/resources/database`."
msgstr "以下は、設定されたフォルダー `src/main/resources/database` に作成する Flyway SQL ファイルの例です。"

#: _guides/hibernate-orm.adoc
msgid "Schema for tenant `base` (`src/main/resources/database/base/V1.0.0__create_fruits.sql`):"
msgstr "テナント `base` のスキーマ (`src/main/resources/database/base/V1.0.0__create_fruits.sql`):"

#: _guides/hibernate-orm.adoc
msgid "Schema for tenant `mycompany` (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"
msgstr "テナント `mycompany` のスキーマ (`src/main/resources/database/mycompany/V1.0.0__create_fruits.sql`):"

#. type: Title ====
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "DISCRIMINATOR approach"
msgstr "DISCRIMINATOR アプローチ"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "The default data source will be used for all tenants. All entities defining a field annotated with `@TenantId` will have that field populated automatically, and will get filtered automatically in queries."
msgstr "デフォルトのデータソースがすべてのテナントに使用されます。 `@TenantId` でアノテーションされたフィールドを定義しているすべてのエンティティには、そのフィールドが自動的に入力され、クエリで自動的にフィルタリングされます。"

#: _guides/hibernate-orm.adoc
msgid "Enable discriminator multi-tenancy."
msgstr "discriminator マルチテナンシーを有効にします。"

#. type: Title ===
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Programmatically Resolving Tenants Connections"
msgstr "テナント接続をプログラムで解決"

#: _guides/hibernate-orm.adoc
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple entries in your configuration file,\n"
"you can use the `io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver` interface to implement your own logic for retrieving a connection.\n"
"Creating an application-scoped bean that implements this interface\n"
"and annotating it with `@PersistenceUnitExtension` (or `@PersistenceUnitExtension(\"nameOfYourPU\")` for a <<multiple-persistence-units,named persistence unit>>)\n"
"will replace the current Quarkus default implementation `io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver`.\n"
"Your custom connection resolver would allow for example to read tenant information from a database and create a connection per tenant at runtime based on it."
msgstr ""
"サポートするテナントごとにより動的な設定が必要で、設定ファイルに複数のエントリーを追加したくない場合は、\n"
"`io.quarkus.hibernate.orm.runtime.tenant.TenantConnectionResolver` インターフェイスを使用して、接続を取得する独自のロジックを実装できます。\n"
"このインターフェースを実装するアプリケーションスコープの Bean を作成し、\n"
"`@PersistenceUnitExtension` (または <<multiple-persistence-units,named persistence unit>> の場合は `@PersistenceUnitExtension(\"nameOfYourPU\")` のアノテーションをを付与すると、\n"
"Quarkus のデフォルト実装 `io.quarkus.hibernate.orm.runtime.tenant.DataSourceTenantConnectionResolver` を置き換えます。\n"
"カスタム接続リゾルバーを使用すると、たとえば、テナント情報をデータベースから読み取り、それに基づいてテナントごとに実行時に接続を作成することが可能になります。"

#: _guides/hibernate-orm.adoc
msgid ""
"<<automatic-integration,Automatic integrations>> will **not** work with programmatically-created `ConnectionProvider`.\n"
"This implies all these integrations, including those from other Quarkus modules (e.g. xref:smallrye-health.adoc[SmallRye Health]) must be done manually."
msgstr ""
"xref:automatic-integration[自動統合] は、プログラムで作成された `ConnectionProvider` では機能 *しません* 。\n"
"このため、他のQuarkusモジュール（ xref:smallrye-health.adoc[SmallRye Health] ）などからの統合を含め、これらの統合はすべて手動で行う必要があります。"

#: _guides/hibernate-orm.adoc
msgid "Here is an implementation example of a `TenantConnectionResolver` implementation using standard Quarkus technologies – Agroal for pooling and Narayana for transactions:"
msgstr "ここでは、Quarkusの標準的なテクノロジーであるプーリング用のAgroalとトランザクション用のNarayanaを使用した、 `TenantConnectionResolver` の実装例を紹介します："

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Interceptors"
msgstr "インターセプター"

#: _guides/hibernate-orm.adoc
msgid ""
"You can assign an link:{hibernate-orm-docs-url}#events-interceptors[`org.hibernate.Interceptor`]\n"
"to your `SessionFactory` by simply defining a CDI bean with the appropriate qualifier:"
msgstr "適切な修飾子を持つ CDI Bean を定義するだけで、link:{hibernate-orm-docs-url}#events-interceptors[`org.hibernate.Interceptor`] を `SessionFactory` に割り当てることができます。"

#: _guides/hibernate-orm.adoc
msgid ""
"Annotate the interceptor implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr "インターセプターの実装に `@PersistenceUnitExtension` の修飾子を付けて、Quarkusにデフォルトの永続化ユニットで使用されるように伝えます。"

#: _guides/hibernate-orm.adoc
msgid "For <<multiple-persistence-units,named persistence units>>, use `@PersistenceUnitExtension(\"nameOfYourPU\")`"
msgstr "<<multiple-persistence-units,named persistence units>> の場合は、 `@PersistenceUnitExtension(\"nameOfYourPU\")` を使用します。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "Implement methods of `org.hibernate.Interceptor` as necessary."
msgstr "必要に応じて `org.hibernate.Interceptor` 。"

#: _guides/hibernate-orm.adoc
msgid ""
"By default, interceptor beans annotated with `@PersistenceUnitExtension` are application-scoped,\n"
"which means only one interceptor instance will be created per application\n"
"and reused across all entity managers.\n"
"For this reason, the interceptor implementation must be thread-safe."
msgstr "デフォルトでは、 `@PersistenceUnitExtension` アノテーションの付けられたインターセプター Beanはアプリケーションスコープになります。つまり、アプリケーションごとにインターセプターのインスタンスが一つのみ作成され、すべてのエンティティマネージャーで再利用されます。このため、インターセプターの実装はスレッドセーフである必要があります。"

#: _guides/hibernate-orm.adoc
msgid ""
"In order to create one interceptor instance per entity manager instead,\n"
"annotate your bean with `@Dependent`.\n"
"In that case, the interceptor implementation doesn't need to be thread-safe."
msgstr "エンティティマネージャーごとに1つのインターセプターのインスタンスを作成するには、Beanに `@Dependent` アノテーションを付けます。この場合はインターセプターの実装はスレッドセーフである必要はありません。"

#: _guides/hibernate-orm.adoc
msgid ""
"Due to a limitation in Hibernate ORM itself,\n"
"`@PreDestroy` methods on `@Dependent`-scoped interceptors will never get called."
msgstr "Hibernate ORM 自体の制限により、 `@Dependent` スコープのインターセプターの `@PreDestroy` メソッドは決して呼び出されません。"

#. type: Title ==
#: _guides/hibernate-orm.adoc
#, no-wrap
msgid "Statement Inspectors"
msgstr "ステートメントインスペクター"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "You can assign a `org.hibernate.engine.jdbc.spi.StatementInspector` to your `SessionFactory` by simply defining a CDI bean with the appropriate qualifier:"
msgstr "適切な修飾子を持つCDI Beanを定義するだけで、 `SessionFactory` に `org.hibernate.engine.jdbc.spi.StatementInspector` を割り当てることができます:"

#: _guides/hibernate-orm.adoc
msgid ""
"Annotate the statement inspector implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr "ステートメントインスペクターの実装に `@PersistenceUnitExtension` という修飾子を付けて、Quarkus にデフォルトの永続化ユニットで使用するように指示します。"

#. type: Plain text
#: _guides/hibernate-orm.adoc
msgid "Implement `org.hibernate.engine.jdbc.spi.StatementInspector`."
msgstr "`org.hibernate.engine.jdbc.spi.StatementInspector` を実装してください。"

#: _guides/hibernate-orm.adoc
msgid "Customizing JSON/XML serialization/deserialization"
msgstr "JSON/XML シリアル化/デシリアル化のカスタマイズ"

#: _guides/hibernate-orm.adoc
msgid ""
"By default, Quarkus will try to automatically configure format mappers depending on available extensions.\n"
"Globally configured `ObjectMapper` (or `Jsonb`) will be used for serialization/deserialization operations when Jackson (or JSON-B) is available.\n"
"Jackson will take precedence if both Jackson and JSON-B are available at the same time."
msgstr ""
"デフォルトでは、Quarkus は利用可能なエクステンションに応じてフォーマットマッパーを自動的に設定しようとします。\n"
"Jackson (または JSON-B) が利用可能な場合、グローバルに設定された `ObjectMapper` (または `Jsonb`) がシリアル化/デシリアル化操作に使用されます。\n"
"Jackson と JSON-B の両方が同時に使用可能な場合は、Jackson が優先されます。"

#: _guides/hibernate-orm.adoc
msgid ""
"JSON and XML serialization/deserialization in Hibernate ORM can be customized by implementing a `org.hibernate.type.format.FormatMapper`\n"
"and annotating the implementation with the appropriate qualifiers:"
msgstr ""
"Hibernate ORM における JSON および XML のシリアル化/デシリアル化は、 `org.hibernate.type.format.FormatMapper` を実装し\n"
"適切な修飾子を使用して実装にアノテーションを付けることでカスタマイズできます。"

#: _guides/hibernate-orm.adoc
msgid ""
"Annotate the format mapper implementation with the `@JsonFormat` qualifier\n"
"to tell Quarkus that this mapper is specific to JSON serialization/deserialization."
msgstr ""
"フォーマットマッパーの実装に `@JsonFormat` 修飾子のアノテーションを付与し、\n"
"このマッパーが JSON のシリアル化/デシリアル化固有であることを Quarkus に知らせます。"

#: _guides/hibernate-orm.adoc
msgid ""
"Make sure the Quarkus-specific `@io.quarkus.hibernate.orm.JsonFormat` annotation is used\n"
"and not the one from Jackson."
msgstr ""
"Jackson のアノテーシではなく、\n"
"Quarkus 固有の `@io.quarkus.hibernate.orm.JsonFormat` アノテーションが使用されていることを確認します。"

#: _guides/hibernate-orm.adoc
msgid ""
"Annotate the format mapper implementation with the `@PersistenceUnitExtension` qualifier\n"
"to tell Quarkus it should be used in the default persistence unit."
msgstr ""
"フォーマットマッパーの実装に `@PersistenceUnitExtension` 修飾子のアノテーションを付与し、\n"
"これがデフォルトの永続化ユニットで使用されるべきものであることを Quarkus に知らせます。"

#: _guides/hibernate-orm.adoc
msgid "Implement `org.hibernate.type.format.FormatMapper`."
msgstr "`org.hibernate.type.format.FormatMapper` を実装します。"

#: _guides/hibernate-orm.adoc
msgid "In case of a custom XML format mapper, a different CDI qualifier must be applied:"
msgstr "カスタム XML 形式マッパーの場合は、別の CDI 修飾子を適用する必要があります。"

#: _guides/hibernate-orm.adoc
msgid ""
"Annotate the format mapper implementation with the `@XmlFormat` qualifier\n"
"to tell Quarkus that this mapper is specific to XML serialization/deserialization."
msgstr "このマッパーが XML のシリアライズ/デシリアライズ専用であることを Quarkus に知らせるために、フォーマットマッパーの実装に `@XmlFormat` 修飾子のアノテーションを付与します。"

#: _guides/hibernate-orm.adoc
msgid "Format mappers *must* have both `@PersistenceUnitExtension` and either `@JsonFormat` or `@XmlFormat` CDI qualifiers applied."
msgstr "フォーマットマッパーには、 `@PersistenceUnitExtension` と、 `@JsonFormat` または `@XmlFormat` CDI 修飾子のいずれかが適用されている *必要* があります。"

#: _guides/hibernate-orm.adoc
msgid "Having multiple JSON (or XML) format mappers registered for the same persistence unit will result in an exception, because of the ambiguity."
msgstr "同じ永続化ユニットに複数の JSON (または XML) 形式マッパーを登録すると、あいまいさのために例外が発生します。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "Validation modes and Hibernate Validator integration"
msgstr "検証モードとHibernate Validatorの統合"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "Hibernate Validator integration into Hibernate ORM opens up the following capabilities:"
msgstr "Hibernate ValidatorをHibernate ORMに統合することで、以下の機能が利用できるようになります："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "performing entity validation on lifecycle events"
msgstr "ライフサイクルイベントでのエンティティ検証の実行"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "applying constraint information from entities to DDL"
msgstr "エンティティからの制約情報をDDLに適用"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"From Quarkus's perspective, this is controlled by the <<quarkus-hibernate-orm_quarkus-hibernate-orm-validation-mode,`quarkus.hibernate-orm.validation.mode` configuration property>>.\n"
"The available validation modes are:"
msgstr "Quarkusの観点からは、これは xref:quarkus-hibernate-orm_quarkus-hibernate-orm-validation-mode[quarkus.hibernate-orm.validation.mode 構成プロパティによって] 制御されます。利用可能な検証モードは以下のとおりです："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"`auto` -- the default option; works the same as `callback` and `ddl` enabled simultaneously\n"
"when the application uses `quarkus-hibernate-validator`,\n"
"and as `none` otherwise."
msgstr "`auto` - アプリケーションが `quarkus-hibernate-validator` を使っているときは `callback` と `ddl` を同時に有効にし、そうでないときは `none` と同じ働きをします。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "`callback` -- Hibernate Validator will perform the lifecycle event validation."
msgstr "`callback` - Hibernate Validator はライフサイクルイベントの検証を行います。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "`ddl` -- Hibernate Validator constraints will be considered for the <<dev-mode,DDL operations>>"
msgstr "`ddl` - Hibernate Validator 制約は xref:dev-mode[DDL 操作で] 考慮されます。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "`none` -- Hibernate Validator integration will be disabled."
msgstr "`none` - Hibernate Validator の統合は無効になります。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"While all constraints with corresponding Jakarta Validation rules will apply during the `callback` validation,\n"
"in the `ddl` mode, only a subset of constraints is used to influence the DDL.\n"
"In the Hibernate Validator documentation, you can find link:{hibernate-validator-docs-url}#section-builtin-constraints[the list of available constraints] and their impact on the DDL generation."
msgstr "対応する Jakarta Validation ルールを持つすべての制約が `callback` の検証中に適用されますが、 `ddl` モードでは、制約のサブセットのみが DDL に影響を与えるために使用されます。Hibernate Validator ドキュメントでは、 link:{hibernate-validator-docs-url}#section-builtin-constraints[利用可能な制約のリストと] DDL 生成への影響を見ることができます。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "Let's consider having a simple entity with some constraints applied to its properties:"
msgstr "プロパティに制約が適用された単純なエンティティを考えてみましょう："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "With the `ddl` mode enabled, the resulting schema would be expected to have the following constraints:"
msgstr "`ddl` モードを有効にすると、結果のスキーマは以下の制約を持つことになります："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"The `name` column has a `not null` constraint because of the `@NotNull` constraint,\n"
"and the length of the values is limited to `50` because of the `@Size(max=50)` constraint."
msgstr "`name` 列には、 `@NotNull` 制約のため、 `not null` 制約があり、 `@Size(max=50)` 制約のため、値の長さは `50` に制限されています。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Since the `value` property in the entity has no constraints, there are no additional constraints in the DDL,\n"
"and the `255` length limit comes from the default `jakarta.persistence.Column#lenght()`."
msgstr "エンティティの `value` プロパティには制約がないため、DDL には追加の制約がなく、 `255` の長さの制限はデフォルトの `jakarta.persistence.Column#lenght()` に由来します。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "With the `callback` mode, expect getting a `jakarta.validation.ConstraintViolationException` thrown:"
msgstr "`callback` 、 `jakarta.validation.ConstraintViolationException` ："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Since Quarkus has built-in exception mappers for `jakarta.validation.ConstraintViolationException`,\n"
"explicitly handling these exceptions might be redundant. See the xref:validation.adoc#rest-end-point-validation[REST end point validation]\n"
"section of the Hibernate Validator guide for more details."
msgstr "Quarkus には `jakarta.validation.ConstraintViolationException` の例外マッパーが組み込まれているため、これらの例外を明示的に処理することは冗長になる可能性があります。詳細については、Hibernate Validator ガイドの xref:validation.adoc#rest-end-point-validation[REST エンドポイントの検証] セクションを参照してください。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "Static metamodel and Jakarta Data"
msgstr "静的メタモデルと Jakarta Data"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Both static metamodel and Jakarta Data capabilities of Hibernate ORM are available in Quarkus\n"
"through the `hibernate-processor` annotation processor. Since it is an annotation processor,\n"
"you must configure it accordingly in your build tool:"
msgstr "Quarkus では、Hibernate ORM の静的メタモデル機能と Jakarta Data 機能の両方を、 `hibernate-processor` 注釈プロセッサで使用できます。注釈プロセッサなので、ビルドツールで適宜設定する必要があります："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "Static metamodel"
msgstr "静的メタモデル"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"The generated static metamodel allows for building queries in a type-safe manner.\n"
"Let's consider having a simple entity:"
msgstr "生成された静的メタモデルによって、型安全な方法でクエリーを構築することができます。単純なエンティティを考えてみましょう："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "A query created with the help of static metamodel may look as:"
msgstr "静的メタモデルを使用して作成されたクエリは以下のようになります："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "For a more detailed overview of static metamodel, please refer to the link:{jakarta-persistence-spec-url}#a6072[Jakarta Persistence specification]."
msgstr "静的メタモデルのより詳細な概要については、 link:{jakarta-persistence-spec-url}#a6072[Jakarta Persistence仕様を] 参照してください。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "Jakarta Data"
msgstr "ジャカルタ・データ"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "Jakarta Data requires, besides having the `hibernate-processor` annotation processor in place, one extra dependency to be added:"
msgstr "Jakarta Dataでは、 `hibernate-processor` アノテーション・プロセッサーを導入する以外に、依存関係を1つ追加する必要があります："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "With this dependency, and the annotation processor in place you could simply create your repositories as follows:"
msgstr "この依存関係とアノテーション・プロセッサーがあれば、以下のようにリポジトリを作成するだけです："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"To skip the boilerplate definition of CRUD operations,\n"
"we can use one of the available interfaces (e.g. `CrudRepository` or `BasicRepository`)."
msgstr "CRUD操作の定型的な定義を省略するには、利用可能なインターフェイスの1つ（例えば `CrudRepository` や `BasicRepository` ）を使用します。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "Adding custom queries with parameters is as easy as providing your query string to the `@Query` annotation."
msgstr "パラメータ付きのカスタムクエリを追加するには、 `@Query` アノテーションにクエリ文字列を指定するだけです。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"If the basic CRUD operations from the Jakarta Data interfaces are not enough,\n"
"we can always add a custom one, in this case a delete operation that removes `MyEntity`s by name."
msgstr "Jakarta Data インターフェイスの基本的な CRUD 操作だけでは不十分な場合は、カスタム操作、この場合は `MyEntity`s を名前で削除する delete 操作を追加することができます。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "And then the repository can be used as any other bean:"
msgstr "そして、リポジトリは他のビーンと同じように使うことができます："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"When working with non-default persistence units, remember to specify the persistence unit name the repository is targeting\n"
"in the `dataStore` attribute of the repository annotation:"
msgstr "デフォルト以外の永続化ユニットを使用する場合は、リポジトリ注釈の `dataStore` 属性で、リポジトリがターゲットとする永続化ユニット名を指定することを忘れないでください："

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid "Pass the name of the non-default persistence unit to the repository annotation (`other` in this example)."
msgstr "デフォルトでない永続ユニットの名前をリポジトリ・アノテーションに渡します ( この例では `other` )。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Review the https://jakarta.ee/specifications/data/1.0/apidocs/jakarta.data/jakarta/data/repository/repository#dataStore()[Javadoc of the `@Repository` annotation]\n"
"to learn more about the `dataStore` attribute."
msgstr "`dataStore` 属性の詳細については、 link:https://jakarta.ee/specifications/data/1.0/apidocs/jakarta.data/jakarta/data/repository/repository#dataStore()[@Repository アノテーションの Javadoc を] 参照してください。"

#: _guides/hibernate-orm.adoc
#, fuzzy
msgid ""
"Please refer to the corresponding https://hibernate.org/repositories/[Hibernate Data Repositories]\n"
"and https://jakarta.ee/specifications/data/1.0/jakarta-data-1.0[Jakarta Data]\n"
"guides to learn what else they have to offer."
msgstr "対応する link:https://hibernate.org/repositories/[Hibernate Data Repositoriesと] link:https://jakarta.ee/specifications/data/1.0/jakarta-data-1.0[Jakarta Dataの] ガイドを参照してください。"

#: _guides/hibernate-orm.adoc
msgid "Configuration Reference for Hibernate ORM"
msgstr ""

#: _guides/hibernate-orm.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> ビルド時に固定された設定プロパティー。その他の設定プロパティーは、すべて実行時にオーバーライド可能です。<input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
