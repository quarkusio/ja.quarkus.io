msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#: _guides/observability-devservices-lgtm.adoc
msgid "Observability Dev Services with Grafana OTel LGTM"
msgstr "Observability Dev Services と Grafana OTel LGTM"

#: _guides/observability-devservices-lgtm.adoc
msgid ""
"This Dev Service provides the https://github.com/grafana/docker-otel-lgtm[Grafana OTel-LGTM], an `all-in-one` Docker image containing an https://opentelemetry.io/docs/collector[OpenTelemetry Collector] receiving and then forwarding telemetry data to Prometheus (metrics), Tempo (traces) and Loki (logs).\n"
"This data can then be visualized by https://github.com/grafana/grafana[Grafana]. The LGTM abbreviation stands for:"
msgstr ""
"この Dev Service は、 https://github.com/grafana/docker-otel-lgtm[Grafana OTel-LGTM] を提供します。これは、テレメトリーデータを受信して Prometheus (メトリクス)、Tempo (トレース)、および Loki (ログ) に転送する https://opentelemetry.io/docs/collector[OpenTelemetry Collector] を含む `all-in-one` Docker イメージです。\n"
"このデータは、 https://github.com/grafana/grafana[Grafana] で視覚化できます。LGTM という略語は次の意味です。"

#: _guides/observability-devservices-lgtm.adoc
msgid "L -> https://github.com/grafana/loki[Loki] (logs)"
msgstr "L -> https://github.com/grafana/loki[Loki] (ログ)"

#: _guides/observability-devservices-lgtm.adoc
msgid "G -> https://github.com/grafana/grafana[Grafana] (metrics visualization)"
msgstr "G -> https://github.com/grafana/grafana[Grafana] (メトリクスの可視化)"

#: _guides/observability-devservices-lgtm.adoc
msgid "T -> https://github.com/grafana/tempo[Tempo] (traces)"
msgstr "T -> https://github.com/grafana/tempo[Tempo] (トレース)"

#: _guides/observability-devservices-lgtm.adoc
msgid "M -> https://grafana.com/oss/mimir[Mimir] (long term storage for Prometheus)"
msgstr "M -> https://grafana.com/oss/mimir[Mimir] (Prometheus の長期保存)"

#: _guides/observability-devservices-lgtm.adoc
msgid "Configuring your project"
msgstr "プロジェクトの設定"

#: _guides/observability-devservices-lgtm.adoc
msgid "Add the Quarkus Grafana OTel LGTM sink (where data goes) extension to your build file:"
msgstr "Quarkus Grafana OTel LGTM シンク (データが送信される場所) エクステンションをビルドファイルに追加します。"

#: _guides/observability-devservices-lgtm.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _guides/observability-devservices-lgtm.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _guides/observability-devservices-lgtm.adoc
msgid "Micrometer"
msgstr "Micrometer"

#: _guides/observability-devservices-lgtm.adoc
msgid "The https://quarkus.io/guides/telemetry-micrometer[Micrometer Quarkus extension] provides metrics from automatic instrumentation implemented in Quarkus and its extensions."
msgstr "https://quarkus.io/guides/telemetry-micrometer[Micrometer Quarkus エクステンション] は、Quarkus とそのエクステンションに実装された自動計装からのメトリクスを提供します。"

#: _guides/observability-devservices-lgtm.adoc
msgid "There are multiple ways to output Micrometer metrics. Next there are some examples:"
msgstr "Micrometer メトリクスを出力する方法は複数あります。次にいくつか例を示します。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Using the Micrometer Prometheus registry"
msgstr "Micrometer Prometheus レジストリーの使用"

#: _guides/observability-devservices-lgtm.adoc
msgid "This is the most common way to output metrics from Micrometer and the default way in Quarkus. The Micrometer Prometheus registry will publish data in the `/q/metrics` endpoint and a scraper inside the Grafana LGTM Dev Service will grab it (*pull* data from the service)."
msgstr "これは、Micrometer からメトリクスを出力する最も一般的な方法であり、Quarkus のデフォルトの方法です。Micrometer Prometheus レジストリーは、 `/q/metrics` エンドポイントでデータを公開し、Grafana LGTM Dev Service 内のスクレイパーがデータを取得します (サービスからデータを *プル* します)。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Using the Micrometer OTLP registry"
msgstr "Micrometer OTLP レジストリーの使用"

#: _guides/observability-devservices-lgtm.adoc
msgid "The https://docs.quarkiverse.io/quarkus-micrometer-registry/dev/micrometer-registry-otlp.html[Quarkiverse Micrometer OTLP registry] will output data using the OpenTelemetry OTLP protocol to the Grafana LGTM Dev Service. This will *push* data out of the service:"
msgstr "https://docs.quarkiverse.io/quarkus-micrometer-registry/dev/micrometer-registry-otlp.html[Quarkiverse Micrometer OTLP レジストリー] は、OpenTelemetry OTLP プロトコルを使用してデータを Grafana LGTM Dev Service に出力します。これにより、データがサービスから *プッシュ* されます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "When using the https://micrometer.io/[Micrometer's] Quarkiverse OTLP registry to push metrics to Grafana OTel LGTM, the `quarkus.micrometer.export.otlp.url` property is automatically set to OTel collector endpoint as seen from the outside of the Docker container."
msgstr "https://micrometer.io/[Micrometer] の Quarkiverse OTLP レジストリーを使用してメトリクスを Grafana OTel LGTM にプッシュする場合、Docker コンテナーの外部から見える OTel コレクターエンドポイントに `quarkus.micrometer.export.otlp.url` プロパティーが自動的に設定されます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "OpenTelemetry"
msgstr "OpenTelemetry"

#: _guides/observability-devservices-lgtm.adoc
msgid "With OpenTelemetry, metrics, traces and logs can be created and sent to the Grafana LGTM Dev Service."
msgstr "OpenTelemetry を使用すると、メトリクス、トレース、ログを作成し、Grafana LGTM Dev Service に送信できます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "By default, the https://quarkus.io/guides/opentelemetry[OpenTelemetry extension] will produce https://quarkus.io/guides/opentelemetry-tracing[traces]. https://quarkus.io/guides/opentelemetry-metrics[Metrics] and https://quarkus.io/guides/opentelemetry-logging[logs] must be enabled separately."
msgstr "デフォルトでは、 https://quarkus.io/guides/opentelemetry[OpenTelemetry エクステンション] は https://quarkus.io/guides/opentelemetry-tracing[トレース] を生成します。 https://quarkus.io/guides/opentelemetry-metrics[メトリクス] と https://quarkus.io/guides/opentelemetry-logging[ログ] は個別に有効にする必要があります。"

#: _guides/observability-devservices-lgtm.adoc
msgid "The `quarkus-opentelemetry` extension can be added to your build file like this:"
msgstr "`quarkus-opentelemetry` エクステンションは、次のようにビルドファイルに追加できます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "The `quarkus.otel.exporter.otlp.endpoint` property is automatically set to the OTel collector endpoint as seen from the outside of the Docker container."
msgstr "`quarkus.otel.exporter.otlp.endpoint` プロパティーは、Docker コンテナーの外部から見える OTel コレクターエンドポイントに自動的に設定されます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "The `quarkus.otel.exporter.otlp.protocol` is set to `http/protobuf`."
msgstr "`quarkus.otel.exporter.otlp.protocol` は `http/protobuf` に設定されています。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Micrometer to OpenTelemetry bridge"
msgstr "Micrometer から OpenTelemetry へのブリッジ"

#: _guides/observability-devservices-lgtm.adoc
msgid "This extension provides Micrometer metrics and OpenTelemetry metrics, traces and logs. All data is managed and sent out by the OpenTelemetry extension."
msgstr "このエクステンションは、Micrometer メトリクスと OpenTelemetry メトリクス、トレース、およびログを提供します。データはすべて OpenTelemetry エクステンションによって管理され、送信されます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "**All signals are enabled by default.**"
msgstr "**すべてのシグナルがデフォルトで有効になります。**"

#: _guides/observability-devservices-lgtm.adoc
msgid "The extension can be added to your build file like this:"
msgstr "エクステンションは次のようにビルドファイルに追加できます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Grafana"
msgstr "Grafana"

#: _guides/observability-devservices-lgtm.adoc
msgid "Grafana UI access"
msgstr "Grafana UI へのアクセス"

#: _guides/observability-devservices-lgtm.adoc
msgid "Once you start your app in dev mode:"
msgstr "アプリケーションを開発モードで起動します。"

#: _guides/observability-devservices-lgtm.adoc
msgid "You will see a log entry like this:"
msgstr "次のようなログエントリーが表示されます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Remember that Grafana is accessible in an ephemeral port, so you need to check the logs to see which port is being used. In this example, the grafana endpoint is `grafana.endpoint=http://localhost:42797`."
msgstr "Grafana はエフェメラルポートでアクセス可能であるため、どのポートが使用されているかを確認するにはログを確認する必要があります。この例では、Grafana エンドポイントは `grafana.endpoint=http://localhost:42797` です。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Another option is to use the *Dev UI* (http://localhost:8080/q/dev-ui/extensions) as the Grafana URL link will be available and if selected it will open a new browser tab directly to the running Grafana instance:"
msgstr "もう 1 つの方法は、*Dev UI* (http://localhost:8080/q/dev-ui/extensions) を使用することです。Grafana URL リンクが使用可能になり、選択すると、実行中の Grafana インスタンスに直接新しいブラウザータブが開きます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Explore"
msgstr "探索"

#: _guides/observability-devservices-lgtm.adoc
msgid "In the explore section, you can query the data for all the data sources."
msgstr "Explore セクションでは、すべてのデータソースのデータをクエリーできます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "To see traces, select the `tempo` data source and query for data:"
msgstr "トレースを表示するには、 `tempo` データソースを選択し、データをクエリーします。"

#: _guides/observability-devservices-lgtm.adoc
msgid "For logs, select the `loki` data source and query for data:"
msgstr "ログの場合は、 `loki` データソースを選択し、データをクエリーします。"

#: _guides/observability-devservices-lgtm.adoc
msgid "The dashboards"
msgstr "ダッシュボード"

#: _guides/observability-devservices-lgtm.adoc
msgid "The Dev Service includes a set of dashboards."
msgstr "Dev Service にはダッシュボードのセットが含まれています。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Each dashboard is tuned for the specific application setup. The available dashboards are:"
msgstr "各ダッシュボードは、特定のアプリケーション設定に合わせて調整されています。使用可能なダッシュボードは次のとおりです。"

#: _guides/observability-devservices-lgtm.adoc
msgid "*Quarkus Micrometer OpenTelemetry*: to be used with the Micrometer and OpenTelemetry extension."
msgstr "*Quarkus Micrometer OpenTelemetry*: Micrometer および OpenTelemetry エクステンションで使用されます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "*Quarkus Micrometer OTLP registry*: to be used with the Micrometer OTLP registry extension."
msgstr "*Quarkus Micrometer OTLP registry*: Micrometer OTLP レジストリーエクステンションで使用されます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "*Quarkus Micrometer Prometheus registry*: to be used with the Micrometer Prometheus registry extension."
msgstr "*Quarkus Micrometer Prometheus registry*: Micrometer Prometheus レジストリーエクステンションで使用されます。"

#: _guides/observability-devservices-lgtm.adoc
msgid "*Quarkus OpenTelemetry Logging*: to view logs coming from the OpenTelemetry extension."
msgstr "*Quarkus OpenTelemetry Logging*: OpenTelemetry エクステンションからのログを表示します。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Some panels in the dashboards might take a few minutes to show accurate data when their values are calculated over a sliding  time window."
msgstr "ダッシュボードの一部のパネルでは、値がスライディングタイムウィンドウにわたって計算される場合、正確なデータが表示されるまでに数分かかることがあります。"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Custom dashboards"
msgstr "カスタムダッシュボード"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Users can add their own Grafana dashboards aka their configuration. All you need to do is to place a `grafana-dashboard-[your name].json` into a `META-INF/grafana` directory in your application, and LGTM DevResource will pick this up automatically, and include this dashboard configuration in the overall Grafana dashboards yaml configuration."
msgstr "ユーザーは、独自のGrafanaダッシュボードの別名設定を追加することができます。必要なのは、アプリケーションの `META-INF/grafana` ディレクトリに `grafana-dashboard-[your name].json` を配置することだけです。LGTM DevResource はこれを自動的にピックアップし、このダッシュボード設定を Grafana ダッシュボード全体の yaml 設定に含めます。"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "e.g. /META-INF/grafana/grafana-dashboard-my-simple-prometheus-dashboard.json configuration file creates `My Simple Promeheus Dashboard` titled dashboard"
msgstr "例：/META-INF/grafana/grafana-dashboard-my-simple-prometheus-dashboard.json 設定ファイルは `My Simple Promeheus Dashboard` というタイトルのダッシュボードを作成します。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Additional configuration"
msgstr "追加設定"

#: _guides/observability-devservices-lgtm.adoc
msgid "This extension will configure your `quarkus-opentelemetry` and `quarkus-micrometer-registry-otlp` extensions to send data to the OTel Collector bundled with the Grafana OTel LGTM image."
msgstr "このエクステンションは、Grafana OTel LGTM イメージにバンドルされている OTel Collector にデータを送信するために、 `quarkus-opentelemetry` および `quarkus-micrometer-registry-otlp` エクステンションを設定します。"

#: _guides/observability-devservices-lgtm.adoc
msgid "If you don't want all the hassle with Dev Services (e.g. lookup and re-use of existing running containers, etc) you can simply disable Dev Services and enable just Dev Resource usage:"
msgstr "Dev Services に関する面倒な作業 (既存の実行中のコンテナーの検索や再利用など) を避ける場合は、Dev Services を無効にして、Dev Resource の使用のみを有効にすることができます。"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "By default Quarkus lets Testcontainers expose random ports for Grafana and OTel, but you can force the usage of user-side fixed ports via setting the ports yourself - but then be aware of port conflicts."
msgstr "Quarkusのデフォルトでは、TestcontainersはGrafanaとOTel用にランダムなポートを公開しますが、自分でポートを設定することで、ユーザー側の固定ポートを強制的に使用することができます。"

#: _guides/observability-devservices-lgtm.adoc
#, fuzzy
msgid "Internal container ports stay the same; e.g. 3000 for Grafana, 4317 for OTel gRPC, 4318 for OTel HTTP, etc"
msgstr "内部コンテナ・ポートは変わりません。例えば、Grafanaは3000、OTel gRPCは4317、OTel HTTPは4318など。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Tests"
msgstr "テスト"

#: _guides/observability-devservices-lgtm.adoc
msgid "And for the least 'auto-magical' usage in the tests, simply disable both (Dev Resources are already disabled by default):"
msgstr "テストにおいて '魔法のような自動処理' の使用を最小限に抑えるには、両方を無効します (Dev Resources はデフォルトですでに無効になっています)。"

#: _guides/observability-devservices-lgtm.adoc
msgid "And then explicitly list LGTM Dev Resource in the test as a `@QuarkusTestResource` resource:"
msgstr "そして、テスト内の LGTM Dev Resource を `@QuarkusTestResource` リソースとして明示的にリストします。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Testing full Grafana OTel LGTM stack - example"
msgstr "完全な Grafana OTel LGTM スタックのテスト - 例"

#: _guides/observability-devservices-lgtm.adoc
msgid "Use existing Quarkus MicroMeter OTLP registry"
msgstr "既存の Quarkus MicroMeter OTLP レジストリーの使用"

#: _guides/observability-devservices-lgtm.adoc
msgid "Simply inject the Meter registry into your code -- it will periodically push metrics to Grafana LGTM's OTLP HTTP endpoint."
msgstr "Meter レジストリーをコードに注入するだけで、メトリクスが Grafana LGTM の OTLP HTTP エンドポイントに定期的にプッシュされるようになります。"

#: _guides/observability-devservices-lgtm.adoc
msgid "Where you can then check Grafana's datasource API for existing metrics data."
msgstr "その後、Grafana のデータソース API で既存のメトリクスデータを確認できます。"
