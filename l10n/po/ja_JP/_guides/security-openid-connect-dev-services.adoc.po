msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Dev Services and Dev UI for OpenID Connect (OIDC)"
msgstr "OpenID Connect (OIDC)のDev ServicesとDev UI"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"You can use Dev Services for Keycloak and the Dev UI for the OpenID Connect (OIDC) Keycloak provider and adapt these services for other OpenID Connect providers.\n"
"You can also use the Dev UI with OpenID Connect providers that have already been started before you run Quarkus in development mode."
msgstr ""
"Dev Services for Keycloak と OpenID Connect (OIDC) Keycloak プロバイダー用の Dev UI を使用して、これらのサービスを他の OpenID Connect プロバイダーに適応させることができます。\n"
"Quarkus を開発モードで実行する前に、すでに起動している OpenID Connect プロバイダーで Dev UI を使用することもできます。"

#. type: Title ==
#: _guides/security-openid-connect-dev-services.adoc
#, no-wrap
msgid "Introduction"
msgstr "はじめに"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Quarkus provides the Dev Services for Keycloak feature, which is enabled by default when the `quarkus-oidc` extension is started in dev mode, the integration tests are running in test mode, and when no `quarkus.oidc.auth-server-url` property is configured.\n"
"The Dev Services for Keycloak feature starts a Keycloak container for both the dev and test modes.\n"
"It initializes them by registering the existing Keycloak realm or creating a new realm with the client and users required for you to start developing your Quarkus application secured by Keycloak immediately.\n"
"The container restarts when the `application.properties` or the realm file changes have been detected."
msgstr ""
"Quarkus には、Dev Services for Keycloak 機能があります。この機能は、`quarkus-oidc` エクステンションが開発モードで起動され、結合テストがテストモードで実行され、 `quarkus.oidc.auth-server-url` プロパティーが設定されていない場合にデフォルトで有効になります。\n"
"Dev Services for Keycloak 機能は、開発モードとテストモードの両方で Keycloak コンテナーを起動します。\n"
"Keycloak で保護された Quarkus アプリケーションの開発をすぐに開始するために必要なクライアントとユーザーを含む既存の Keycloak レルムを登録するか、新しいレルムを作成することで、コンテナーを初期化します。\n"
"`application.properties` またはレルムファイルの変更が検出されると、コンテナーが再起動します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Additionally, xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-ui/extensions[/q/dev-ui/extensions] complements this feature with a Dev UI page, which helps to acquire the tokens from Keycloak and test your Quarkus application."
msgstr "さらに、http://localhost:8080/q/dev-ui/extensions[/q/dev-ui/extensions] で入手可能な xref:dev-ui.adoc[Dev UI] は、Keycloak からトークンを取得して Quarkus アプリケーションをテストするのに役立つ Dev UI ページでこの機能を補完します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"If `quarkus.oidc.auth-server-url` is already set, then a generic OpenID Connect Dev Console, which can be used with all OpenID Connect providers, is activated.\n"
"For more information, see <<dev-ui-all-oidc-providers,Dev UI for all OpenID Connect providers>>."
msgstr ""
"`quarkus.oidc.auth-server-url` がすでに設定されている場合、すべての OpenID Connect プロバイダーで使用できる汎用の OpenID Connect Dev Console がアクティブになります。\n"
"詳細は、<<dev-ui-all-oidc-providers,Dev UI for all OpenID Connect providers>> を参照してください。"

#. type: Title ==
#: _guides/security-openid-connect-dev-services.adoc
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr "Dev Services for Keycloak"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Start your application without configuring `quarkus.oidc` properties in the `application.properties` file:"
msgstr "`application.properties` ファイルで `quarkus.oidc` プロパティーを設定せずにアプリケーションを起動します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "The console displays output similar to this:"
msgstr "コンソールに次のような出力が表示されます。"

#: _guides/security-openid-connect-dev-services.adoc
#, fuzzy
msgid "Adding the `quarkus.keycloak.devservices.java-opts=-XX:UseSVE=0` configuration property may help to workaround Keycloak Dev Services startup problems on some Mac OS systems."
msgstr "`quarkus.keycloak.devservices.java-opts=-XX:UseSVE=0` 設定プロパティを追加すると、一部のMac OSシステムでKeycloak Dev Servicesの起動時の問題を回避できる場合があります。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "When logging in to the Keycloak admin console, the username is `admin`, and the password is `admin`."
msgstr "Keycloak 管理コンソールにログインする場合、ユーザー名は `admin`、パスワードは `admin` です。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Be aware that Dev Services for Keycloak defaults to not initiating a new container if it detects an existing container labeled `quarkus-dev-service-keycloak`.\n"
"It connects to this container provided the value of the `quarkus.keycloak.devservices.service-name` property matches the label's value (default `quarkus`).\n"
"In such cases, expect a slightly altered output when you run the following:"
msgstr ""
"Dev Services for Keycloak は、`quarkus-dev-service-keycloak` というラベルの付いた既存のコンテナーを検出した場合、デフォルトで新しいコンテナーを起動しないことに注意してください。\n"
"`quarkus.keycloak.devservices.service-name` プロパティーの値がラベルの値 (デフォルトは `quarkus`) と一致する場合、このコンテナーに接続します。\n"
"このような場合、以下を実行すると出力が若干変更されることがあります。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"If the Keycloak container is not ready within the default 60-second timeout, you can resolve this by extending the timeout period.\n"
"For instance, set it to 2 minutes with `quarkus.devservices.timeout=2M`."
msgstr ""
"Keycloak コンテナーがデフォルトの 60 秒のタイムアウト内に準備できない場合は、タイムアウト期間を延長することで解決できます。\n"
"たとえば、`quarkus.devservices.timeout=2M` で 2 分に設定します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "You can turn off sharing of the containers by specifying `quarkus.keycloak.devservices.shared=false`."
msgstr "`quarkus.keycloak.devservices.shared=false` を指定すると、コンテナーの共有をオフにすることができます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Now, open the main link:http://localhost:8080/q/dev[Dev UI page] and observe the *OpenID Connect* card linking to a Keycloak page.\n"
"For example:"
msgstr ""
"次に、メインの link:http://localhost:8080/q/dev[Dev UI ページ] を開き、Keycloak ページにリンクしている *OpenID Connect* カードを確認します。\n"
"次に例を示します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Click the *Keycloak provider* link.\n"
"This action opens a Keycloak page whose appearance varies depending on how the Dev Services for Keycloak feature is configured."
msgstr ""
"*Keycloak provider* リンクをクリックします。\n"
"このアクションにより、Dev Services for Keycloak 機能の設定に応じて外観が異なる Keycloak ページが開きます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Developing service applications"
msgstr "サービスアプリケーションの開発"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "By default, the Keycloak page can be used to support the development of a xref:security-oidc-bearer-token-authentication.adoc[Quarkus OIDC service application]."
msgstr "デフォルトでは、Keycloak ページを使用して、xref:security-oidc-bearer-token-authentication.adoc[Quarkus OIDC サービスアプリケーション] の開発をサポートできます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Authorization code grant"
msgstr "認可コードグラント"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"If you set `quarkus.oidc.devui.grant.type=code` in the `application.properties` file (this is a default value), then an `authorization_code` grant is used to acquire both access and ID tokens.\n"
"Using this grant is recommended to emulate a typical flow where a single page application (SPA) acquires the tokens and uses them to access Quarkus services."
msgstr ""
"`application.properties` ファイルで `quarkus.oidc.devui.grant.type=code` を設定すると (これがデフォルト値です)、アクセストークンと ID トークンの両方を取得するために `authorization_code` グラントが使用されます。\n"
"シングルページアプリケーション (SPA) でトークンを取得し、それを使用して Quarkus サービスにアクセスする一般的なフローをエミュレートするには、このグラントを使用することを推奨します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"First, you see an option to *Log into Single Page Application*.\n"
"For example:"
msgstr ""
"まず、*Log into Single Page Application* オプションが表示されます。\n"
"次に例を示します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Choose the Keycloak realm and client ID to use during the authentication process."
msgstr "認証プロセス中に使用する Keycloak レルムとクライアント ID を選択します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"This SPA represents a public OpenID Connect client; therefore, the client IDs you enter must identify public Keycloak clients that have no secrets.\n"
"This is because SPA is not a web application and cannot securely handle the secrets it needs to complete the authorization code flow if the client secret is also expected to complete the authorization code flow."
msgstr ""
"この SPA は、OpenId Connect の public クライアントを表します。したがって、入力するクライアント ID は、シークレットのない Keycloak の public クライアントを指す必要があります。\n"
"これは、SPA が Web アプリケーションではないため、クライアントシークレットも認可コードフローを完了することが予想される場合、認可コードフローを完了するために必要なクライアントシークレットを安全に扱うことができないためです。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"The clients requiring secrets can only be supported with this SPA if a default realm has been created or if `quarkus.oidc.credentials.secret` is configured and a single custom realm is used.\n"
"In both cases, the SPA can figure out the client secret it might need to complete the authorization code flow after Keycloak redirects the user back to it."
msgstr ""
"シークレットが必要なクライアントは、デフォルトのレルムが作成されている場合、または `quarkus.oidc.credentials.secret` が設定されていて単一のカスタムレルムが使用されている場合にのみ、この SPA でサポートできます。\n"
"どちらの場合も、Keycloak がユーザーを SPA にリダイレクトした後、SPA は認可コードフローを完了するために必要なクライアントシークレットを把握できます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Next, after selecting *Log into Single Page Application*, you are redirected to Keycloak to authenticate, for example, as `alice:alice`.\n"
"Then, you are returned to the page representing the SPA:"
msgstr ""
"次に、*Log into Single Page Application* を選択すると、Keycloak にリダイレクトされ、たとえば `alice:alice` として認証されます。\n"
"次に、SPA を表すページに戻ります。"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "You can view the acquired access and ID tokens, for example:"
msgstr "取得したアクセストークンやIDトークンなどを確認することができます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"This view shows the encoded JSON Web Token (JWT) token on the left side and highlights the headers in red, payload or claims in green, and signature in blue.\n"
"It also shows the decoded JWT token on the right side, where you can see the header, claim names, and their values."
msgstr ""
"このビューでは、エンコードされた JSON Web Token (JWT) トークンが左側に表示され、ヘッダーが赤で、ペイロードまたはクレームが緑で、署名が青で強調表示されます。\n"
"また、右側にはデコードされた JWT トークンが表示され、ヘッダー、クレーム名、およびそれらの値を確認できます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Next, test the service by entering a relative service path and sending a token.\n"
"SPA usually sends access tokens to the application endpoint, so choose the *With Access Token* option, for example:"
msgstr ""
"次に、相対サービスパスを入力し、トークンを送信してサービスをテストします。\n"
"SPAは通常、アプリケーションのエンドポイントにアクセストークンを送信するので、たとえば *With Access Token* オプションを選択します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "To clear the test results area, use the eraser icon in the lower right corner."
msgstr "テスト結果領域を消去するには、右下隅にある消しゴムアイコンを使用します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Sometimes, ID tokens are forwarded to application frontends as bearer tokens.\n"
"This helps endpoints identify the user logged into SPA or perform out-of-band token verification.\n"
"Choose the *With ID Token* option in such cases."
msgstr ""
"場合によっては、ID トークンがベアラートークンとしてアプリケーションフロントエンドに転送されることがあります。\n"
"これにより、エンドポイントが SPA にログインしているユーザーを識別したり、帯域外のトークン検証を実行したりできるようになります。\n"
"このような場合は、*With ID Token* オプションを選択してください。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"When you import custom Keycloak realms, you may find, after inspecting both the access and ID tokens in Dev UI, that only the access token contains the list of roles in its `groups` claim.\n"
"This information is important for accessing endpoints that are secured with the `@RolesAllowed` annotation.\n"
"To tell Keycloak to include this information in the ID token, add the `microprofile-jwt` scope to the list of client scopes in the Keycloak admin console.\n"
"Alternatively, add the `microprofile-jwt` scope to the list of required scopes using the `quarkus.oidc.authentication.scopes` property."
msgstr ""
"カスタム Keycloak レルムをインポートする場合、Dev UI でアクセストークンと ID トークンの両方を検査した後、アクセストークンのみに `groups` クレームのロールのリストが含まれていることがわかります。\n"
"この情報は、`@RolesAllowed` アノテーションで保護されたエンドポイントにアクセスする際に重要です。\n"
"Keycloak にこの情報を ID トークンに含めるように指示するには、Keycloak 管理コンソールのクライアントスコープのリストに `microprofile-jwt` スコープを追加します。\n"
"または、`quarkus.oidc.authentication.scopes` プロパティーを使用して、必要なスコープのリストに `microprofile-jwt` スコープを追加します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "For more information, see the https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak server administration guide]."
msgstr "詳細は、https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak サーバー管理ガイド] を参照してください。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Manually entering the service paths is not ideal.\n"
"For information about enabling Swagger or GraphQL UI for testing the service with the access token already acquired by the OIDC Dev UI, see the <<test-with-swagger-graphql,Test with Swagger UI or GraphQL UI>> section."
msgstr ""
"サービスパスを手動で入力するのは理想的ではありません。\n"
"OIDC Dev UI ですでに取得済みのアクセストークンを使用してサービスをテストするために Swagger または GraphQL UI を有効にする方法については、<<test-with-swagger-graphql,Test with Swagger UI or GraphQL UI>> セクションを参照してください。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Finally, you can click *Log Out* image::dev-ui-keycloak-logout.png[alt=Dev UI Keycloak - Log Out,role=\"center\"] so you can authenticate to Keycloak as a different user."
msgstr "最後に、*Log Out* image::dev-ui-keycloak-logout.png[alt=Dev UI Keycloak - Log Out,role=\"center\"] をクリックすると、別のユーザーとして Keycloak に認証できるようになります。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Keycloak might return an error when you try to *Log into Single Page Application*.\n"
"For example, `quarkus.oidc.client-id` might not match the client ID in the realm imported to Keycloak, or the client in this realm might not be configured correctly to support the authorization code flow.\n"
"In such cases, Keycloak returns an `error_description` query parameter, and the Dev UI also shows this error description.\n"
"For example:"
msgstr ""
"*Log into Single Page Application* を選択しすると、Keycloak からエラーが返される場合があります。\n"
"たとえば、`quarkus.oidc.client-id` が Keycloak にインポートされたレルム内のクライアント ID と一致しない可能性があります。または、このレルム内のクライアントが認可コードフローをサポートするように正しく設定されていない可能性があります。\n"
"このような場合、Keycloak は `error_description` クエリーパラメーターを返し、Dev UI にもこのエラーの説明が表示されます。\n"
"次に例を示します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "If the error occurs, log in to Keycloak by using the *Keycloak Admin* option, update the realm configuration as necessary, and check the `application.properties`."
msgstr "エラーが発生した場合は、*Keycloak Admin* オプションを使用して Keycloak にログインし、必要に応じてレルム設定を更新し、`application.properties` を確認してください。"

#. type: Title =====
#: _guides/security-openid-connect-dev-services.adoc
#, no-wrap
msgid "Test with Swagger UI or GraphQL UI"
msgstr "Swagger UI または GraphQL UI を使用したテスト"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"You can avoid manually entering the service paths and test your service with Swagger UI or GraphQL UI if `quarkus-smallrye-openapi` or `quarkus-smallrye-graphql` are used in your project.\n"
"For example, start Quarkus in dev mode with both `quarkus-smallrye-openapi` and `quarkus-smallrye-graphql` dependencies.\n"
"You can see the following options after logging in to Keycloak:"
msgstr ""
"プロジェクトで `quarkus-smallrye-openapi` または `quarkus-smallrye-graphql` が使用されている場合は、サービスパスを手動で入力する必要がなくなり、Swagger UI または GraphQL UI を使用してサービスをテストできます。\n"
"たとえば、`quarkus-smallrye-openapi` と `quarkus-smallrye-graphql` の両方の依存関係を使用して Quarkus を開発モードで起動します。\n"
"Keycloak にログインすると、次のオプションが表示されます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"For example, clicking *Swagger UI* opens the Swagger UI in a new browser tab where you can test the service by using the token acquired by Dev UI for Keycloak.\n"
"The Swagger UI does not try to re-authenticate again.\n"
"In the Swagger UI, do not choose a Swagger UI `Authorize` option; the OIDC Dev UI has authorized and provided the access token for Swagger UI to use for testing."
msgstr ""
"たとえば、*Swagger UI* をクリックすると、新しいブラウザータブで Swagger UI が開き、Keycloak 用の Dev UI によって取得されたトークンを使用してサービスをテストできます。\n"
"Swagger UI は再度認証を試行しません。\n"
"Swagger UI で、Swagger UI の `Authorize` オプションを選択しないでください。OIDC Dev UI が Swagger UI を認可し、テストに使用するアクセストークンを提供しているためです。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Integration with GraphQL UI works similarly; the access token acquired by Dev UI for Keycloak is used."
msgstr "`GraphQL UI` とのインテグレーションも同様に機能し、Keycloak 用の Dev UI によって取得されたアクセストークンが使用されます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"You might need to register a redirect URI for the authorization code flow initiated by Dev UI for Keycloak to work.\n"
"This is because Keycloak might enforce that the authenticated users are redirected only to the configured redirect URI.\n"
"It is recommended to do this in production to avoid the users being redirected to the wrong endpoints, which might happen if the correct `redirect_uri` parameter in the authentication request URI has been manipulated."
msgstr ""
"Keycloak 用の Dev UI によって開始される認可コードフローを機能させるには、リダイレクト URI を登録する必要がある場合があります。\n"
"Keycloak は、認証されたユーザーが設定されたリダイレクト URI にのみリダイレクトされるように強制する場合があるためです。\n"
"認証リクエスト内の正しい `redirect_uri` パラメーターが操作されると、ユーザーが間違ったエンドポイントにリダイレクトされる可能性があるため、本番環境ではこれを行うことを推奨します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "If Keycloak enforces it, you see an authentication error informing you that the `redirect_uri` value is wrong."
msgstr "Keycloak がそれを強制する場合、`redirect_uri` 値が間違っていることを通知する認証エラーが表示されます。"

#: _guides/security-openid-connect-dev-services.adoc
#, fuzzy
msgid ""
"In this case, select the *Keycloak Admin* option in the top right corner, login as `admin:admin`, select the test realm and the client which Dev UI for Keycloak is configured with, and add `http://localhost:8080/q/dev-ui/quarkus-oidc/keycloak-provider` to `Valid Redirect URIs`.\n"
"If you used `-Dquarkus.http.port` when starting Quarkus, then change `8080` to the value of `quarkus.http.port`"
msgstr "この場合、右上の *Keycloak Admin* オプションを選択し、 `admin:admin` 、テスト領域とDev UI for Keycloakが設定されているクライアントを選択して、 。 `http://localhost:8080/q/dev-ui/quarkus-oidc/keycloak-provider` を `Valid Redirect URIs` に追加します。Quarkusの起動時に `-Dquarkus.http.port` を使用した場合は、 `8080` を `quarkus.http.port`"

#: _guides/security-openid-connect-dev-services.adoc
msgid "If the container is shared between multiple applications running on different ports, you must register `redirect_uri` values for each application."
msgstr "異なるポートで実行されている複数のアプリケーション間でコンテナーを共有する場合は、アプリケーションごとに `redirect_uri` 値を登録する必要があります。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "You can set the `redirect_uri` value to `*` only for test purposes, especially when the containers are shared between multiple applications."
msgstr "特にコンテナーが複数のアプリケーション間で共有されている場合は、テスト目的でのみ `redirect_uri` 値を `*` に設定できます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "If no custom realm is imported, Dev Services for Keycloak sets the `redirect_uri` value to `*` when it creates a default realm."
msgstr "カスタムレルムがインポートされていない場合、Dev Services for Keycloak はデフォルトのレルムを作成するときに `redirect_uri` 値を `*` に設定します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Implicit grant"
msgstr "インプリシット・グラント"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"If you set `quarkus.oidc.devui.grant.type=implicit` in the `application.properties` file, then an `implicit` grant is used to acquire both access and ID tokens.\n"
"Use this grant to emulate a single page application only if the authorization code grant does not work; for example, when a client is configured in Keycloak to support an implicit grant."
msgstr ""
"`application.properties` ファイルで `quarkus.oidc.devui.grant.type=implicit` を設定すると、アクセストークンと ID トークンの両方を取得するために `implicit` グラントが使用されます。\n"
"認可コードグラントが機能しない場合 (インプリシットグラントをサポートするためにクライントが Keycloak に設定されている場合) に限り、このグラントを使用してシングルページアプリケーションをエミュレートします。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Password grant"
msgstr "パスワード・グラント"

#: _guides/security-openid-connect-dev-services.adoc
msgid "If you set `quarkus.oidc.devui.grant.type=password` in the `application.properties` file, then you see a screen similar to this one:"
msgstr "`application.properties` ファイルで `quarkus.oidc.devui.grant.type=password` を設定すると、次のような画面が表示されます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Select a realm, enter a client ID and secret, user name and password, a relative service endpoint path, and click *Test service*.\n"
"It returns a status code, such as `200`, `403`, `401`, or `404`.\n"
"If the username is also set in the `quarkus.keycloak.devservices.users` map property containing usernames and passwords, then you do not have to set a password when testing the service.\n"
"Be aware that you do not have to initialize `quarkus.keycloak.devservices.users` to test the service by using the `password` grant."
msgstr ""
"レルムを選択し、クライアント ID とシークレット、ユーザー名とパスワード、相対サービスエンドポイントパスを入力して、*Test service* をクリックします。\n"
"`200`、`403`、`401`、`404` などのステータスコードが返されます。\n"
"ユーザー名とパスワードを含む `quarkus.keycloak.devservices.users` マッププロパティーにもユーザー名が設定されている場合は、サービスをテストするときにパスワードを設定する必要はありません。\n"
"`password` グラントを使用してサービスをテストするために、`quarkus.keycloak.devservices.users` を初期化する必要はないことに注意してください。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "In the Dev UI console, you can also see output similar to the following:"
msgstr "Dev UI コンソールでは、次のような出力も表示されます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "A token is acquired from Keycloak by using a `password` grant and is sent to the service endpoint."
msgstr "トークンは `password` グラントを使用して Keycloak から取得され、サービスエンドポイントに送信されます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Client credentials grant"
msgstr "クライアントクレデンシャル・グラント"

#: _guides/security-openid-connect-dev-services.adoc
msgid "If you set `quarkus.oidc.devui.grant.type=client`, then a `client_credentials` grant is used to acquire a token, with the page showing no *User* field in this case:"
msgstr "`quarkus.oidc.devui.grant.type=client` を設定すると、トークンの取得に `client_credentials` グラントが使用されます。この場合、ページに *User* フィールドは表示されません。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Select a realm, enter the client ID and secret, a relative service endpoint path, and click *Test service*.\n"
"It returns a status code, such as `200`, `403`, `401`, or `404`."
msgstr ""
"レルムを選択し、クライアント ID とシークレット、相対サービスエンドポイントパスを入力して、*Test service* をクリックします。\n"
"`200`、`403`、`401`、`404` などのステータスコードが返されます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Developing OpenID Connect web-app applications"
msgstr "OpenID Connectウェブアプリケーション開発"

#: _guides/security-openid-connect-dev-services.adoc
msgid "To develop a xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC web application], set `quarkus.oidc.application-type=web-app` in the `application.properties` file before starting the application."
msgstr "xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDCウェブアプリケーション] を開発するには、アプリケーションを開始する前に、 `application.properties` ファイルで `quarkus.oidc.application-type=web-app` を設定します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Starting the application displays a screen similar to this one:"
msgstr "アプリケーションを起動すると、このような画面が表示されます："

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Set a relative service endpoint path and click *Log in to your web application*.\n"
"You are redirected to Keycloak to enter a username and password in a new browser tab before you get a response from the Quarkus application."
msgstr ""
"相対的なサービスエンドポイントパスを設定し、*Log in to your web application* をクリックします。\n"
"Quarkus アプリケーションからのレスポンスを受け取る前に、新しいブラウザータブでユーザー名とパスワードを入力するために Keycloak にリダイレクトされます。"

#. type: Title ===
#: _guides/security-openid-connect-dev-services.adoc
#, no-wrap
msgid "Running the tests"
msgstr "テストの実行"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "You can run the tests against a Keycloak container started in a test mode in a xref:continuous-testing.adoc[Continuous Testing] mode."
msgstr "テストモードで起動した Keycloak コンテナーに対して、xref:continuous-testing.adoc[継続的テスト] モードでテストを実行できます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"It is also recommended to run the integration tests against Keycloak by using Dev Services for Keycloak.\n"
"For more information, see xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing-keycloak-devservices[Testing OpenID Connect Service Applications with Dev Services] and xref:security-oidc-code-flow-authentication.adoc#code-flow-integration-testing-keycloak-devservices[Testing OpenID Connect WebApp Applications with Dev Services]."
msgstr ""
"また、Dev Services for Keycloak を使用して、Keycloak に対して結合テストを実行することを推奨します。\n"
"詳細は、xref:security-oidc-bearer-token-authentication.adoc#integration-testing-keycloak-devservices[Dev Services を使用した OpenID Connect サービスアプリケーションのテスト] および xref:security-oidc-code-flow-authentication.adoc#integration-testing-keycloak-devservices[Dev Services を使用した OpenID Connect WebApp アプリケーションのテスト] を参照してください。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Keycloak initialization"
msgstr "Keycloak 初期化"

#: _guides/security-openid-connect-dev-services.adoc
#, fuzzy
msgid ""
"The `quay.io/keycloak/keycloak:26.3.4` image which contains a Keycloak distribution powered by Quarkus is used to start a container by default.\n"
"`quarkus.keycloak.devservices.image-name` can be used to change the Keycloak image name.\n"
"For example, set it to `quay.io/keycloak/keycloak:19.0.3-legacy` to use a Keycloak distribution powered by WildFly.\n"
"Be aware that a Quarkus-based Keycloak distribution is only available starting from Keycloak `20.0.0`."
msgstr "デフォルトでは、Quarkusが提供するKeycloakディストリビューションを含む `quay.io/keycloak/keycloak:26.3.4` イメージがコンテナの起動に使用されます。 `quarkus.keycloak.devservices.image-name` 、Keycloakイメージ名を変更することができます。たとえば、WildFlyが提供するKeycloakディストリビューションを使用するには、 `quay.io/keycloak/keycloak:19.0.3-legacy` 。QuarkusベースのKeycloakディストリビューションは、Keycloak `20.0.0` からしか利用できないことに注意してください。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Dev Services for Keycloak initializes a launched Keycloak server next."
msgstr "Dev Services for Keycloakは、起動したKeycloakサーバーを次に初期化します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "By default, the `quarkus` and `quarkus-app` client with a `secret` password, `alice` and `bob` users (with the passwords matching the names), and `user` and `admin` roles are created, with `alice` given both `admin` and `user` roles and `bob` - the `user` role."
msgstr "デフォルトでは、パスワードが `secret` の `quarkus` および `quarkus-app` クライアント、`alice` および `bob` ユーザー (パスワードは名前と同じ)、`user` および `admin` ロールが作成されます。このとき、`alice` には `admin` と `user` の両方のロールが与えられ、`bob` には `user` ロールが与えられます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Usernames, secrets, and their roles can be customized with `quarkus.keycloak.devservices.users` (the map which contains usernames and secrets) and `quarkus.keycloak.devservices.roles` (the map which contains usernames and comma-separated role values)."
msgstr "ユーザー名、シークレット、およびそれらのロールは、`quarkus.keycloak.devservices.users` (ユーザー名とシークレットを含むマップ) および `quarkus.keycloak.devservices.roles` (ユーザー名とコンマ区切りのロール値を含むマップ) でカスタマイズできます。"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "For example:"
msgstr "例:"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"This configuration creates two users:\n"
" * `duke` with a `dukePassword` password and a `reader` role\n"
" * `john` with a `johnPassword` password and `reader` and `writer` roles"
msgstr ""
"この設定により、2人のユーザーが作成されます:\n"
"* `dukePassword` パスワードと `reader` ロールを持つ `duke` \n"
"* `johnPassword` パスワードと `reader` および `writer` ロールを持つ `john`"

#: _guides/security-openid-connect-dev-services.adoc
msgid "To customize the client ID and secret, you can use the `quarkus.oidc.client-id` and `quarkus.oidc.credentials.secret` properties."
msgstr "クライアント ID とシークレットをカスタマイズするには、`quarkus.oidc.client-id` プロパティーと `quarkus.oidc.credentials.secret` プロパティーを使用できます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "However, it is likely that your Keycloak configuration is more complex and requires setting more properties."
msgstr "ただし、Keycloak の設定がより複雑になり、より多くのプロパティーの設定が必要になる可能性があります。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"This is why `quarkus.keycloak.devservices.realm-path` is always checked before initializing Keycloak with the default or configured realm, client, user, and roles properties.\n"
"If the realm file exists on the file system or classpath, then only this realm is used to initialize Keycloak, for example:"
msgstr ""
"このため、Keycloak をデフォルトまたは設定されたレルム、クライアント、ユーザー、およびロールのプロパティーで初期化する前に、常に `quarkus.keycloak.devservices.realm-path` がチェックされます。\n"
"realm ファイルがファイルシステムまたはクラスパス上に存在する場合、この realm だけが Keycloak を初期化するために使用されます。次に例を示します。"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "You can use `quarkus.keycloak.devservices.realm-path` to initialize Keycloak with multiple realm files by providing a comma-separated list of files:"
msgstr "`quarkus.keycloak.devservices.realm-path` を使って、カンマで区切られたファイルのリストを提供することで、複数のレルムファイルでKeycloakを初期化することができます:"

#: _guides/security-openid-connect-dev-services.adoc
msgid "quarkus.keycloak.devservices.realm-path=quarkus-realm1.json,quarkus-realm2.json"
msgstr "quarkus.keycloak.devservices.realm-path=quarkus-realm1.json,quarkus-realm2.json"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Also, the Keycloak page offers an option to `Sign In To Keycloak To Configure Realms` by using a *Keycloak Admin* option in the right top corner:"
msgstr "また、Keycloak ページには、右上隅にある *Keycloak Admin* オプションを使用して、Keycloak にサインインしてレルムを設定するオプション (`Sign In To Keycloak To Configure Realms`) があります。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Sign in to Keycloak as `admin:admin` to further customize the realm properties, create or import a new realm, or export the realm."
msgstr "レルムのプロパティーのカスタマイズ、新規レルムの作成またはインポート、レルムのエクスポートを実行するには、Keycloak に `admin:admin` としてサインインします。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"You can also copy classpath and file system resources to the container.\n"
"For example, if your application configures Keycloak authorization with link:https://www.keycloak.org/docs/latest/authorization_services/index.html#_policy_js[JavaScript policies] that are deployed to Keycloak in a jar file, then you can configure `Dev Services for Keycloak` to copy this jar to the Keycloak container as follows:"
msgstr ""
"クラスパスとファイルシステムリソースをコンテナーにコピーすることもできます。\n"
"たとえば、jar ファイルで Keycloak にデプロイされる link:https://www.keycloak.org/docs/latest/authorization_services/index.html#_policy_js[JavaScript ポリシー] を使用してアプリケーションが Keycloak 認証を設定する場合、次のようにしてこの jar を Keycloak コンテナーにコピーするように `Dev Services for Keycloak` を設定できます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "`policies` alias is created for the classpath `/policies.jar` resource."
msgstr "クラスパス `/policies.jar` リソースに対して `policies` エイリアスが作成されます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Policy jars can also be located in the file system.\n"
"<2> The policies jar is mapped to the `/opt/keycloak/providers/policies.jar` container location."
msgstr ""
"ポリシー jar はファイルシステム内に配置することもできます。\n"
"<2> ポリシー jar は、`/opt/keycloak/providers/policies.jar` コンテナーの場所にマップされます。"

#. type: Title ==
#: _guides/security-openid-connect-dev-services.adoc
#, no-wrap
msgid "Disable Dev Services for Keycloak"
msgstr "Dev Services for Keycloak を無効にする"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Dev Services for Keycloak is not activated if either `quarkus.oidc.auth-server-url` is already initialized or the default OIDC tenant is disabled with `quarkus.oidc.tenant.enabled=false`, regardless of whether you work with Keycloak or not."
msgstr "`quarkus.oidc.auth-server-url` がすでに初期化されているか、デフォルトの OIDC テナントが `quarkus.oidc.tenant.enabled=false` で無効になっている場合、Keycloak を使用するかどうかにかかわらず、`Dev Services For Keycloak` はアクティブ化されません。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "If you prefer not to have a Dev Services for Keycloak container started or do not work with Keycloak, then you can also disable this feature with `quarkus.keycloak.devservices.enabled=false` - it is only necessary if you expect to start `quarkus:dev` without `quarkus.oidc.auth-server-url`."
msgstr "Dev Services for Keycloak コンテナーを起動させない、または使用しない場合も、`quarkus.keycloak.devservices.enabled=false` を使用してこの機能を無効化できます。これは、`quarkus.oidc.auth-server-url` なしで `quarkus:dev` を起動する予定がある場合にのみ必要です。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "The main Dev UI page includes an empty *OpenID Connect* card when Dev Services for Keycloak is disabled and the `quarkus.oidc.auth-server-url` property has not been initialized:"
msgstr "Dev Services for Keycloak が無効になっていて、`quarkus.oidc.auth-server-url` プロパティーが初期化されていない場合、メインの Dev UI ページに空の *OpenID Connect* カードが表示されます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"If `quarkus.oidc.auth-server-url` is already set, then a generic OpenID Connect Dev Console, which can be used with all OpenID Connect providers, can be activated.\n"
"For more information, see the <<dev-ui-all-oidc-providers,Dev UI for all OpenID Connect providers>> section."
msgstr "`quarkus.oidc.auth-server-url` がすでに設定されている場合は、すべての OpenID Connect プロバイダーで使用できる汎用の OpenID Connect Dev Console をアクティブ化できます。詳細は、<<dev-ui-all-oidc-providers,Dev UI for all OpenID Connect providers>> セクションを参照してください。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Dev UI for all OpenID Connect providers"
msgstr "すべてのOpenID ConnectプロバイダーのためのDev UI"

#: _guides/security-openid-connect-dev-services.adoc
msgid "The Dev UI for all OpenID Connect providers is activated if the following conditions are met:"
msgstr "以下の条件を満たす場合、すべての OpenID Connect プロバイダーの Dev UI が有効になります："

#: _guides/security-openid-connect-dev-services.adoc
msgid "The `quarkus.oidc.auth-server-url` points to an already started OpenID Connect provider, which can be Keycloak or other provider."
msgstr "`quarkus.oidc.auth-server-url` が、すでに起動している OpenID Connect プロバイダー (Keycloak またはその他のプロバイダー) を指している。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "The `quarkus.oidc.application-type` is set to `service`, the default value, or `hybrid`."
msgstr "`quarkus.oidc.application-type` が、デフォルト値の `service` または `hybrid` に設定されている。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "The `quarkus.oidc.client-id` is set."
msgstr "`quarkus.oidc.client-id` が設定されている。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Setting `quarkus.oidc.credentials.secret` is most likely required for Keycloak and other providers for the authorization code flow initiated from Dev UI to complete unless the client identified with `quarkus.oidc.client-id` is configured as a public client in your OpenID Connect provider's administration console."
msgstr "`quarkus.oidc.client-id` で識別されるクライアントが OpenID Connect プロバイダーの管理コンソールで public クライアントとして設定されていない限り、Dev UI から開始された認可コードフローを完了するには、おそらく Keycloak やその他のプロバイダーで `quarkus.oidc.credentials.secret` を設定する必要があります。"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "For example, you can use Dev UI to test Google authentication with this configuration:"
msgstr "たとえば、Dev UI を使用して、次の設定で Google 認証をテストできます。"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "Run:"
msgstr "以下を実行します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "This command outputs a message similar to the following example:"
msgstr "このコマンドは、次の例のようなメッセージを出力します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "If the provider metadata discovery has been successful, then after you open the main link:http://localhost:8080/q/dev[Dev UI page], you can see the following *OpenID Connect* card referencing a `Google` provider:"
msgstr "プロバイダーメタデータの検出が成功した場合、メインの link:http://localhost:8080/q/dev[Dev UI ページ] を開くと、`Google` プロバイダーを参照する次の *OpenID Connect* カードが表示されます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Follow the link to log in to your provider, get the tokens, and test the application.\n"
"The experience is the same as described in the <<keycloak-authorization-code-grant,Authorization code grant for Keycloak>> section, where the Dev Services for Keycloak container has been started, especially if you work with Keycloak."
msgstr ""
"リンクをたどってプロバイダーにログインし、トークンを取得して、アプリケーションをテストします。\n"
"特に Keycloakを使用している場合、これは `Dev Services for Keycloak` コンテナーを起動した <<keycloak-authorization-code-grant,Authorization code grant for Keycloak>> セクションの説明のとおりです。"

#: _guides/security-openid-connect-dev-services.adoc
#, fuzzy
msgid ""
"You likely need to configure your OpenID Connect provider to support redirecting back to the `Dev Console`.\n"
"You add `http://localhost:8080/q/dev-ui/quarkus-oidc/<providerName>-provider` as one of the supported redirect and logout URLs, where `<providerName>` must be replaced by the name of the provider shown in the Dev UI, for example, `auth0`."
msgstr "`Dev Console` へのリダイレクトをサポートするように OpenID Connect プロバイダを設定する必要があります。 `http://localhost:8080/q/dev-ui/quarkus-oidc/<providerName>-provider` をサポートされるリダイレクトおよびログアウトURLの1つとして追加します。 `<providerName>` は、Dev UIに表示されるプロバイダの名前に置き換える必要があります。例えば、 `auth0` 。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"The Dev UI experience described in the <<keycloak-authorization-code-grant,Authorization code grant for Keycloak>> section might differ slightly if you work with other providers.\n"
"For example, an access token might not be in JWT format, so it would not be possible to show its internal content.\n"
"However, all providers should return ID tokens in the JWT format."
msgstr ""
"他のプロバイダーを使用している場合、<<keycloak-authorization-code-grant,Authorization code grant for Keycloak>> で説明されている Dev UI のエクスペリエンスが若干異なる場合があります。\n"
"たとえば、アクセストークンが JWT 形式でない場合、その内部コンテンツを表示できません。\n"
"ただし、すべてのプロバイダーが JWT 形式で ID トークンを返すはずです。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"The current access token is used by default to test the service with Swagger UI or GrapghQL UI.\n"
"If the provider (other than Keycloak) returns a binary access token, then it is used with Swagger UI or GrapghQL UI only if this provider has a token introspection endpoint; otherwise, an `IdToken`, which is always in a JWT format is passed to Swagger UI or GrapghQL UI.\n"
"In such cases, you can verify with the manual Dev UI test that `401` is always returned for the current binary access token.\n"
"Also, note that using `IdToken` as a fallback with either of these user interfaces is only possible with the authorization code flow."
msgstr ""
"現在のアクセストークンは、Swagger UI または GrapghQL UI でサービスをテストするためにデフォルトで使用されます。\n"
"プロバイダー (Keycloak 以外) がバイナリーアクセストークンを返す場合、このプロバイダーにトークンイントロスペクションエンドポイントがある場合にのみ、Swagger UI または GrapghQL UI で使用されます。それ以外の場合は、常に JWT 形式の `IdToken` が Swagger UI または GrapghQL UI に渡されます。\n"
"このような場合、手動の Dev UI テストを使用して、現在のバイナリーアクセストークンに対して常に `401` が返されることを確認できます。\n"
"また、これらのいずれかのユーザーインターフェイスで `IdToken` をフォールバックとして使用することは、認可コードフローでのみ可能であることに注意してください。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Some providers, such as `Auth0` do not support a standard RP-initiated logout, so the provider-specific logout properties must be configured for a logout option to be visible.\n"
"For more information, see xref:security-oidc-code-flow-authentication.adoc#user-initiated-logout[User-initiated logout] section in the \"OpenID Connect authorization code flow mechanism for protecting web applications\" guide."
msgstr ""
"`Auth0` などの一部のプロバイダーは、標準の RP 起点のログアウトをサポートしていないため、ログアウトオプションを表示するには、プロバイダー固有のログアウトプロパティーを設定する必要があります。\n"
"詳細は、「Web アプリケーションを保護するための OpenID Connect 認可コードフローメカニズム」ガイドの xref:security-oidc-code-flow-authentication.adoc#user-initiated-logout[ユーザー起点のログアウト] セクションを参照してください。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Similarly, if you want to use a `password` or `client_credentials` grant for Dev UI to acquire the tokens, then you might need to configure some extra provider-specific properties, for example:"
msgstr "同様に、Dev UI に `password` または `client_credentials` グラントを使用してトークンを取得する場合は、プロバイダー固有の追加のプロパティーを設定する必要がある場合があります。次に例を示します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Non-application root path considerations"
msgstr "アプリケーション以外のルートパスに関する考慮事項"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"This document refers to the `http://localhost:8080/q/dev-ui` Dev UI URL in several places where `q` is a default non-application root path.\n"
"If you customize `quarkus.http.root-path` or `quarkus.http.non-application-root-path` properties, then replace `q` accordingly.\n"
"For more information, see the https://quarkus.io/blog/path-resolution-in-quarkus/[Path resolution in Quarkus] blog post."
msgstr ""
"このドキュメントでは、いくつかの場所で Dev UI URL を `http://localhost:8080/q/dev-ui` と表記しています。`q` は、デフォルトのアプリケーション以外のルートパスです。\n"
"`quarkus.http.root-path` または `quarkus.http.non-application-root-path` プロパティーをカスタマイズする場合は、それに応じて `q` を置き換えてください。\n"
"詳細は、ブログ記事の https://quarkus.io/blog/path-resolution-in-quarkus/[Path resolution in Quarkus] を参照してください。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Dev Services for OIDC"
msgstr "Dev Services for OIDC"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"When you work with Keycloak in production, <<dev-services-for-keycloak>> provides the best dev mode experience.\n"
"For other OpenID Connect providers, it is recommended to enable the Dev Services for OIDC like in the example below:"
msgstr ""
"Keycloak を実稼働環境で使用する場合、<<dev-services-for-keycloak>> 最高の開発モードエクスペリエンスを提供します。\n"
"他の OpenID Connect プロバイダーの場合は、次の例のように OIDC の Dev Services を有効にすることを推奨します。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "the Dev Services for OIDC are enabled by default if Docker and Podman are not available."
msgstr "Docker と Podman が利用できない場合は、OIDC の開発サービスがデフォルトで有効になります。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"Once enabled, Quarkus starts a new OIDC server that supports most common OpenID Connect operations.\n"
"You can confirm in your console that the OIDC server started, you will see output similar to the following:"
msgstr ""
"有効にすると、Quarkus は最も一般的な OpenID Connect 操作をサポートする新しい OIDC サーバーを起動します。\n"
"OIDC サーバーが起動したことをコンソールで確認すると、次のような出力が表示されます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "If you navigate to the <<dev-ui-all-oidc-providers>>, you can log into the OIDC server as builtin users `alice` or `bob`:"
msgstr "<<dev-ui-all-oidc-providers>> に移動すると、組み込みユーザー `alice` または `bob` として OIDC サーバーにログインできます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid ""
"This login page is also displayed if you navigate to authenticated request path during the development of the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC web application].\n"
"As always, the default roles for `alice` are `admin` and `user`, while the roles for `bob` are just `user`.\n"
"You can configure those built-in roles if required:"
msgstr ""
"このログインページは、xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC Web アプリケーション] の開発中に認証されたリクエストパスに移動した場合にも表示されます。\n"
"いつものように、`alice` のデフォルトのロールは `admin` と `user` ですが、`bob` のロールは `user` のみです。\n"
"必要に応じて、これらの組み込みロールを設定できます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Assign a `root` role to the user `alice`."
msgstr "ユーザー `alice` に `root` ロールを割り当てます。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Another option is log in as a custom user with the username and roles of your choice:"
msgstr "もう 1 つのオプションとして、選択したユーザー名とロールを持つカスタムユーザーとしてログインします。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Whichever user you choose, no password is required."
msgstr "どちらのユーザーを選択しても、パスワードは必要ありません。"

#: _guides/security-openid-connect-dev-services.adoc
msgid "Configuration reference"
msgstr "設定リファレンス"

#: _guides/security-openid-connect-dev-services.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> ビルド時に固定された設定プロパティー。その他の設定プロパティーは、すべて実行時にオーバーライド可能です。<input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#. type: Title ==
#: _guides/security-openid-connect-dev-services.adoc
#, no-wrap
msgid "References"
msgstr "参考資料"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "xref:dev-ui.adoc[Dev UI]"
msgstr "xref:dev-ui.adoc[Dev UI]"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "https://www.keycloak.org/documentation.html[Keycloak Documentation]"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "https://openid.net/connect/[OpenID Connect]"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDC ベアラートークン認証]"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[ウェブアプリケーションを保護する OIDC コードフローメカニズム]"

#. type: Plain text
#: _guides/security-openid-connect-dev-services.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Security の概要]"
