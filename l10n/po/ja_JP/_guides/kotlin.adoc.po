msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/kotlin.adoc
#, no-wrap
msgid "Using Kotlin"
msgstr "Kotlinの使用"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "https://kotlinlang.org/[Kotlin] is a very popular programming language that targets the JVM (amongst other environments). Kotlin has experienced a surge in popularity the last few years making it the most popular JVM language, except for Java of course."
msgstr "link:https://kotlinlang.org/[Kotlin] は、JVMをターゲットにした(他の環境を含めても)非常に人気のあるプログラミング言語です。Kotlinはここ数年で人気が急上昇し、Javaを除いて最も人気のあるJVM言語となっています。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "Quarkus provides first class support for using Kotlin as will be explained in this guide."
msgstr "このガイドで説明するように、QuarkusはKotlinを使用するためのファーストクラスのサポートを提供しています。"

#. type: Title ==
#: _guides/kotlin.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "NB: For Gradle project setup please see below, and for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page]."
msgstr "注：Gradleプロジェクトのセットアップについては、以下を参照してください。また、詳細については、 link:gradle-tooling.html[Gradleセットアップページ]のガイドを参照してください。"

#. type: Title ==
#: _guides/kotlin.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "First, we need a new Kotlin project. This can be done using the following command:"
msgstr "まず、新しいKotlinプロジェクトが必要です。これは以下のコマンドで行うことができます。"

#: _guides/kotlin.adoc
msgid ""
"When adding `kotlin` to the extensions list, the Maven plugin will generate a project that is properly\n"
"configured to work with Kotlin. Furthermore, the `org.acme.ReactiveGreetingResource` class is implemented as Kotlin source code (as is the case with the generated tests).\n"
"The addition of `rest-jackson` in the extension list results in importing the Quarkus REST (formerly RESTEasy Reactive) and Jackson extensions."
msgstr "`kotlin` をエクステンションリストに追加すると、Maven プラグインは Kotlin で動作するように適切に設定されたプロジェクトを生成します。さらに、 `org.acme.ReactiveGreetingResource` クラスは Kotlin ソースコードとして実装されます (生成されるテストも同様)。エクステンションリストに `rest-jackson` を追加すると、Quarkus REST (旧 RESTEasy Reactive) および Jackson エクステンションがインポートされます。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "`ReactiveGreetingResource` looks like this:"
msgstr "`ReactiveGreetingResource` は次のようになります:"

#. type: Block title
#: _guides/kotlin.adoc
#, no-wrap
msgid "ReactiveGreetingResource.kt"
msgstr "ReactiveGreetingResource.kt"

#. type: Title ===
#: _guides/kotlin.adoc
#, no-wrap
msgid "Update code"
msgstr "コードの更新"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "In order to show a more practical example of Kotlin usage we will add a simple link:https://kotlinlang.org/docs/reference/data-classes.html[data class] called `Greeting` like so:"
msgstr "Kotlin のより実用的な使用例を示すために、 `Greeting` というシンプルな link:https://kotlinlang.org/docs/reference/data-classes.html[データクラス] を追加してみましょう:"

#. type: Block title
#: _guides/kotlin.adoc
#, no-wrap
msgid "Greeting.kt"
msgstr "Greeting.kt"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "We also update the `ReactiveGreetingResource` class like so:"
msgstr "また、 `ReactiveGreetingResource` を次のように更新します:"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "With these changes in place the `/hello` endpoint will reply with a JSON object instead of a simple String."
msgstr "これらの変更により、 `/hello` エンドポイントは、単純な文字列ではなくJSONオブジェクトで応答するようになりました。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "To make the test pass, we also need to update `ReactiveGreetingResourceTest` like so:"
msgstr "テストをパスするためには、 `ReactiveGreetingResourceTest` を次のように更新します:"

#. type: Title ==
#: _guides/kotlin.adoc
#, no-wrap
msgid "Kotlin version"
msgstr "Kotlin バージョン"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "The Quarkus Kotlin extension already declares a dependency on some base Kotlin libraries like `kotlin-stdlib-jdk8` and `kotlin-reflect`. The Kotlin version of these dependencies is declared in the Quarkus BOM and is currently at {kotlin-version}. It is therefore recommended to use the same Kotlin version for other Kotlin libraries. When adding a dependency to another base Kotlin library (e.g. `kotlin-test-junit5`) you don't need to specify the version, since the Quarkus BOM includes the link:https://search.maven.org/artifact/org.jetbrains.kotlin/kotlin-bom[Kotlin BOM]."
msgstr "QuarkusのKotlinエクステンションは、すでに `kotlin-stdlib-jdk8` や `kotlin-reflect` などの一部のKotlinベースライブラリへの依存を宣言しています。これらの依存関係のKotlinバージョンは、Quarkus BOMで宣言されており、現在のバージョンは{kotlin-version}です。したがって、他のKotlinライブラリには、同じKotlinバージョンを使用することをお勧めします。他のベースKotlinライブラリに依存性を追加する場合（たとえば、 `kotlin-test-junit5` ）、Quarkus BOMに link:https://search.maven.org/artifact/org.jetbrains.kotlin/kotlin-bom[Kotlin BOM] が含まれているため、バージョンを指定する必要はありません。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "This being said, you still need to specify the version of the Kotlin compiler to use. Again, it is recommended to use the same version which Quarkus uses for the Kotlin libraries."
msgstr "そうは言っても、使用する Kotlin コンパイラのバージョンを指定する必要があります。 繰り返しになりますが、Quarkus が Kotlin ライブラリに使用するのと同じバージョンを使用することをお勧めします。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "Using a different Kotlin version in a Quarkus application is typically not recommended. But in order to do so, you must import the Kotlin BOM *before* the Quarkus BOM."
msgstr "通常、Quarkus アプリケーションで別の Kotlin バージョンを使用することはお勧めしません。 ただしそうする必要がある場合は、Quarkus BOM の *前に* Kotlin BOM をインポートする必要があります。"

#. type: Title ==
#: _guides/kotlin.adoc
#, no-wrap
msgid "Important Maven configuration points"
msgstr "重要なMavenの設定ポイント"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "The generated `pom.xml` contains the following modifications compared to its counterpart when Kotlin is not selected:"
msgstr "生成された `pom.xml` には、Kotlin が選択されていない場合と比較して、以下の修正が含まれています。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "The `quarkus-kotlin` artifact is added to the dependencies. This artifact provides support for Kotlin in the live reload mode (more about this later on)"
msgstr "`quarkus-kotlin` アーティファクトが依存関係に追加されています。このアーティファクトはライブリロードモードでの Kotlin のサポートを提供します (これについては後ほど説明します)。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "The `kotlin-stdlib-jdk8` is also added as a dependency."
msgstr "`kotlin-stdlib-jdk8` も依存関係として追加されています。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "Maven's `sourceDirectory` and `testSourceDirectory` build properties are configured to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr "Maven の `sourceDirectory` と `testSourceDirectory` ビルドプロパティーは、Kotlin ソースを指すように設定されています (それぞれ `src/main/kotlin` と `src/test/kotlin` )。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "The `kotlin-maven-plugin` is configured as follows:"
msgstr "`kotlin-maven-plugin` は以下のように設定されています。"

#. type: Block title
#: _guides/kotlin.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "Enables the `all-open` annotation plugin (see discussion below)"
msgstr "`all-open` アノテーションプラグインの有効化（以下の議論を参照）"

#: _guides/kotlin.adoc
msgid ""
"The important thing to note is the use of the https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[all-open] Kotlin compiler plugin.\n"
"In order to understand why this plugin is needed, first we need to note that by default all the classes generated from the Kotlin compiler are marked as `final`."
msgstr "注意すべき重要なこととして、 link:https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[all-open] Kotlinコンパイラーのプラグインを使用していることです。なぜこのプラグインが必要なのかを理解するためには、まず、Kotlin コンパイラから生成されるクラスはデフォルトで `final` でマークされていることに注目してください。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "Having `final` classes however does not work well with various frameworks that need to create https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[Dynamic Proxies]."
msgstr "しかし、 `final` クラスであることは、 link:https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[ダイナミックプロキシー] を作成する必要がある様々なフレームワークではうまく機能しません。"

#: _guides/kotlin.adoc
msgid ""
"Thus, the `all-open` Kotlin compiler plugin allows us to configure the compiler to *not* mark as `final` classes that have certain annotations. In the snippet above,\n"
"we have specified that classes annotated with `jakarta.ws.rs.Path` should not be `final`."
msgstr "そのため、 `all-open` Kotlinコンパイラ・プラグインでは、特定のアノテーションを持つクラスを `final` としてマーク *しない * ようにコンパイラを設定することができます。上記のスニペットでは、 `jakarta.ws.rs.Path` のアノテーションを持つクラスは `final` としないように指定しています。"

#: _guides/kotlin.adoc
msgid ""
"If your application contains Kotlin classes annotated with `jakarta.enterprise.context.ApplicationScoped`\n"
"for example, then `<option>all-open:annotation=jakarta.enterprise.context.ApplicationScoped</option>` needs to be added as well. Same goes for any class that needs to have a dynamic proxy created at runtime, like a JPA Entity class."
msgstr "例えば、 `jakarta.enterprise.context.ApplicationScoped` でアノテーションされた Kotlin クラスがアプリケーションに含まれている場合、 `<option>all-open:annotation=jakarta.enterprise.context.ApplicationScoped</option>` も追加する必要があります。JPAエンティティクラスのように、実行時に動的プロキシを作成する必要があるクラスも同様です。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "Future versions of Quarkus will configure the Kotlin compiler plugin in a way that will make it unnecessary to alter this configuration."
msgstr "Quarkusの将来のバージョンでは、この設定を変更する必要がないようにKotlinコンパイラプラグインを設定するようになる予定です。"

#. type: Title ==
#: _guides/kotlin.adoc
#, no-wrap
msgid "Important Gradle configuration points"
msgstr "重要なGradle設定ポイント"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "Similar to the Maven configuration, when using Gradle, the following modifications are required when Kotlin is selected:"
msgstr "Mavenの設定と同様、Gradleを使用する場合、Kotlinを選択すると以下のような修正が必要になります:"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "The Kotlin plugin is activated, which implicitly adds `sourceDirectory` and `testSourceDirectory` build properties to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr "Kotlin プラグインが有効になり、暗黙のうちに `sourceDirectory` と `testSourceDirectory` のビルドプロパティーが追加され、Kotlin ソース (それぞれ `src/main/kotlin` と `src/test/kotlin` ) を指すようになります。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "The all-open Kotlin plugin tells the compiler not to mark as final, those classes with the annotations highlighted (customize as required)"
msgstr "all-open Kotlinプラグインは、アノテーションがハイライトされているクラスを最終的なものとしてマークしないようにコンパイラに指示します (必要に応じてカスタマイズしてください)"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "When using native-image, the use of http (or https) protocol(s) must be declared"
msgstr "ネイティブイメージを使用する場合は、http (または https) プロトコルの使用を宣言しなければなりません。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "An example configuration follows:"
msgstr "以下に設定例を示します:"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "The Kotlin plugin version needs to be specified."
msgstr "Kotlinプラグインのバージョンを指定する必要があります。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "The all-open configuration required, as per Maven guide above"
msgstr "上記のMavenガイドにあるように、all-open設定が必要です。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "or, if you use the Gradle Kotlin DSL:"
msgstr "または、GradleのKotlin DSLを使用している場合:"

#. type: Title ===
#: _guides/kotlin.adoc
#, no-wrap
msgid "Overriding the Quarkus BOM Kotlin version (Gradle)"
msgstr "Quarkus BOMのKotlin versionをオーバーライドする（Gradle）"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "If you want to use a different version than the one specified by Quarkus' BOM in your application (for example, to try pre-release features or for compatibility reasons), you can do so by using the `strictly {}` version modifier in your Gradle dependencies. For instance:"
msgstr "アプリケーションで Quarkus の BOM で指定されているものとは異なるバージョンを使用する場合 (たとえば、プレリリース機能を試すため、または互換性の理由から)、Gradle の依存関係で `strictly {}` バージョン修飾子を使用してこれを行うことができます 。 例:"

#. type: Title ==
#: _guides/kotlin.adoc
#, no-wrap
msgid "Live reload"
msgstr "ライブ・リロード"

#: _guides/kotlin.adoc
msgid ""
"Quarkus provides support for live reloading changes made to source code. This support is also available to Kotlin, meaning that developers can update their Kotlin source\n"
"code and immediately see their changes reflected."
msgstr "Quarkusは、ソースコードに加えられた変更をライブでリロードする機能をサポートしています。このサポートはKotlinでも利用できます。つまり、開発者はKotlinのソースコードを更新して、変更が反映されたことをすぐに確認することができます。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "To see this feature in action, first execute:"
msgstr "この機能の動作を確認するには、まず次のコマンドを実行します:"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "When executing an HTTP GET request against `http://localhost:8080/hello`, you see a JSON message with the value `hello` as its `message` field."
msgstr "`http://localhost:8080/hello` に対してHTTP GETリクエストを実行すると、 `message` フィールドに `hello` という値を持つJSONメッセージが表示されます。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "Now using your favorite editor or IDE, update `ReactiveGreetingResource.kt` and change the `hello` method to the following:"
msgstr "ここで、お好きなエディタやIDEを使って、 `ReactiveGreetingResource.kt` をアップデートし、 `hello` のメソッドを以下のように変更します:"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "When you now execute an HTTP GET request against `http://localhost:8080/hello`, you should see a JSON message with the value `hi` as its `message` field."
msgstr "`http://localhost:8080/hello` に対してHTTP GETリクエストを実行すると、 `message` フィールドに `hi` という値を持つJSONメッセージが表示されるはずです。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "One thing to note is that the live reload feature is not available when making changes to both Java and Kotlin source that have dependencies on each other. We hope to alleviate this limitation in the future."
msgstr "注意点としては、お互いに依存関係にあるJavaとKotlinの両方のソースに変更を加えた場合、ライブリロード機能が利用できないということです。将来的にはこの制限を緩和したいと考えています。"

#. type: Title ===
#: _guides/kotlin.adoc
#, no-wrap
msgid "Configuring live reload compiler"
msgstr "ライブリロードコンパイラーの設定"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "If you need to customize the compiler flags used by `kotlinc` in development mode, you can configure them in the quarkus plugin:"
msgstr "開発モードで `kotlinc` によって使用されるコンパイラ フラグをカスタマイズする必要がある場合は、それらを quarkus プラグインで設定できます。"

#. type: Block title
#: _guides/kotlin.adoc
#, no-wrap
msgid "Maven"
msgstr "Maven"

#. type: Block title
#: _guides/kotlin.adoc
#, no-wrap
msgid "Gradle (Groovy DSL)"
msgstr "Gradle (Groovy DSL)"

#. type: Block title
#: _guides/kotlin.adoc
#, no-wrap
msgid "Gradle (Kotlin DSL)"
msgstr "Gradle (Kotlin DSL)"

#. type: Title ==
#: _guides/kotlin.adoc
#, no-wrap
msgid "Packaging the application"
msgstr "アプリケーションのパッケージング"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます:"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "and executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして次のコマンドで実行できます。 `java -jar target/quarkus-app/quarkus-run.jar`."

#. type: Plain text
#: _guides/kotlin.adoc
msgid "You can also build the native executable using:"
msgstr "ネイティブ実行可能ファイルを次のようにビルドすることもできます:"

#. type: Title ==
#: _guides/kotlin.adoc
#, no-wrap
msgid "Kotlin and Jackson"
msgstr "Kotlin と Jackson"

#: _guides/kotlin.adoc
msgid ""
"If the `com.fasterxml.jackson.module:jackson-module-kotlin` dependency and the `quarkus-jackson` extension (or one of the `quarkus-resteasy-jackson` or `quarkus-rest-jackson` extensions) have been added to the project,\n"
"then Quarkus automatically registers the `KotlinModule` to the `ObjectMapper` bean (see xref:rest-json.adoc#jackson[this] guide for more details)."
msgstr "`com.fasterxml.jackson.module:jackson-module-kotlin` 依存関係と `quarkus-jackson` エクステンション（または `quarkus-resteasy-jackson` または `quarkus-rest-jackson` エクステンションのいずれか）がプロジェクトに追加されている場合、Quarkus は自動的に `KotlinModule` を `ObjectMapper` Bean に登録します（詳細は xref:rest-json.adoc#jackson[この] ガイドを参照）。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "When using Kotlin data classes with `native-image` you may experience serialization errors that do not occur with the `JVM` version, despite the Kotlin Jackson Module being registered. This is especially so if you have a more complex JSON hierarchy, where an issue on a lower node causes a serialization failure. The error message displayed is a catch-all and typically displays an issue with the root object, which may not necessarily be the case."
msgstr "Kotlin のデータクラスを `native-image` で使用すると、Kotlin Jackson Module が登録されているにもかかわらず、 `JVM` バージョンでは発生しないシリアライズエラーが発生することがあります。これは、より複雑なJSON階層を持っている場合に特に見られる現象で、下位のノードで問題が発生するとシリアライズに失敗します。表示されるエラーメッセージはキャッチオールで、通常はルートオブジェクトの問題を表示しますが、必ずしもそうではない場合もあります。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "To ensure full-compatibility with `native-image`, it is recommended to apply the Jackson `@field:JsonProperty(\"fieldName\")` annotation, and set a nullable default, as illustrated below. You can automate the generation of Kotlin data classes for your sample JSON using IntelliJ IDEA plugins (such as JSON to Kotlin Class), and easily enable the Jackson annotation and select nullable parameters as part of the auto-code generation."
msgstr "`native-image` との完全な互換性を確保するためには、Jackson `@field:JsonProperty(\"fieldName\")` アノテーションを適用し、以下の図のように nullable のデフォルトを設定することをお勧めします。Intellijのプラグイン（JSON to Kotlin Classなど）を使用して、サンプルのJSONに対するKotlinデータクラスの生成を自動化し、Jacksonアノテーションを有効にして、自動コード生成の一部としてnullableパラメータを選択することができます。"

#: _guides/kotlin.adoc
msgid "When using Kotlin with Quarkus REST, it is worth considering the use of `quarkus-rest-kotlin-serialization` which leverages the Kotlin Serialization framework instead of Jackson."
msgstr "Quarkus RESTでKotlinを使用する場合、Jacksonの代わりにKotlin Serializationフレームワークを活用する `quarkus-rest-kotlin-serialization` を使用することは考慮に値します。"

#. type: Title ==
#: _guides/kotlin.adoc
#, no-wrap
msgid "Kotlin and the Kubernetes Client"
msgstr "KotlinとKubernetesクライアント"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "When working with the `quarkus-kubernetes` extension and have Kotlin classes bound to CustomResource definitions (like you do for building operators), you need to be aware that the underlying Fabric8 Kubernetes Client uses its own static Jackson `ObjectMapper` s, which can be configured as follows with the `KotlinModule`:"
msgstr "`quarkus-kubernetes` エクステンションを使用して、Kotlin クラスを CustomResource 定義にバインドする場合（オペレーターを構築する場合など）、基盤となる Fabric8 Kubernetes Client が独自の静的な Jackson `ObjectMapper` を使用することに注意する必要があります。これは `KotlinModule` を使用して以下のように設定できます:"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "_Please test this carefully on compilation to native images and fallback to Java-compatible Jackson bindings if you experience problems._"
msgstr "_ネイティブイメージへのコンパイル時には慎重にテストし、問題が発生した場合はJava互換のJacksonバインディングにフォールバックしてください。_"

#. type: Title ==
#: _guides/kotlin.adoc
#, no-wrap
msgid "Coroutines support"
msgstr "コルーチンのサポート"

#. type: Title ===
#: _guides/kotlin.adoc
#, no-wrap
msgid "Extensions"
msgstr "エクステンション"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "The following extensions provide support for Kotlin Coroutines by allowing the use of Kotlin's `suspend` keyword on method signatures."
msgstr "以下のエクステンションは、Kotlinのコルーチンをサポートするために、メソッドシグネチャでKotlinの `suspend` キーワードを使用できるようにするものです。"

#. type: Table
#: _guides/kotlin.adoc
#, no-wrap
msgid "Extension"
msgstr "エクステンション"

#. type: Table
#: _guides/kotlin.adoc
#, no-wrap
msgid "Comments"
msgstr "Comments"

#: _guides/kotlin.adoc
msgid "`quarkus-rest`"
msgstr "`quarkus-rest`"

#. type: Table
#: _guides/kotlin.adoc
#, no-wrap
msgid "Support is provided for Jakarta REST Resource Methods"
msgstr "Jakarta REST Resource Methodsへのサポートが提供されます"

#: _guides/kotlin.adoc
msgid "`quarkus-rest-client`"
msgstr "`quarkus-rest-client`"

#. type: Table
#: _guides/kotlin.adoc
#, no-wrap
msgid "Support is provided for REST Client interface methods"
msgstr "RESTクライアントインタフェースメソッドへのサポートが提供されます"

#: _guides/kotlin.adoc
msgid "`quarkus-messaging`"
msgstr "`quarkus-messaging`"

#. type: Table
#: _guides/kotlin.adoc
#, no-wrap
msgid "Support is provided for Reactive messaging methods"
msgstr "Reactiveメッセージングメソッドへのサポートが提供されます"

#. type: Table
#: _guides/kotlin.adoc
#, no-wrap
msgid "`quarkus-scheduler`"
msgstr "`quarkus-scheduler`"

#. type: Table
#: _guides/kotlin.adoc
#, no-wrap
msgid "Support is provided for scheduler methods"
msgstr "スケジューラーメソッドへのサポートが提供されます"

#. type: Table
#: _guides/kotlin.adoc
#, no-wrap
msgid "`quarkus-smallrye-fault-tolerance`"
msgstr "`quarkus-smallrye-fault-tolerance`"

#. type: Table
#: _guides/kotlin.adoc
#, no-wrap
msgid "Support is provided for the declarative annotation-based API"
msgstr "宣言型アノテーションベースAPIへのサポートが提供されます"

#: _guides/kotlin.adoc
msgid "`quarkus-vertx`"
msgstr "`quarkus-vertx`"

#: _guides/kotlin.adoc
msgid "Support is provided for `@ConsumeEvent` methods"
msgstr "`@ConsumeEvent` メソッドへのサポートが提供されます"

#: _guides/kotlin.adoc
msgid "`quarkus-websockets-next`"
msgstr "`quarkus-websockets-next`"

#: _guides/kotlin.adoc
msgid "Support is provided for server-side and client-side endpoint methods"
msgstr "サーバーサイドおよびクライアントサイドのエンドポイントメソッドのサポートが提供されます"

#. type: Title ===
#: _guides/kotlin.adoc
#, no-wrap
msgid "Kotlin coroutines and Mutiny"
msgstr "Kotlin coroutines と Mutiny"

#: _guides/kotlin.adoc
msgid ""
"Kotlin coroutines provide an imperative programming model that actually gets executed in an asynchronous, reactive manner.\n"
"To simplify the interoperability between Mutiny and Kotlin there is the module `io.smallrye.reactive:mutiny-kotlin`, described link:https://smallrye.io/smallrye-mutiny/latest/guides/kotlin/[here]."
msgstr "Kotlinのコルーチンは、非同期でリアクティブな方法で実際に実行される命令型プログラミングモデルを提供します。MutinyとKotlinの相互運用を簡単にするために、モジュール `io.smallrye.reactive:mutiny-kotlin` が存在し、 link:https://smallrye.io/smallrye-mutiny/latest/guides/kotlin/[ここ] で解説されています。"

#. type: Title ==
#: _guides/kotlin.adoc
#, no-wrap
msgid "CDI @Inject with Kotlin"
msgstr "Kotlinでの CDI @Inject"

#: _guides/kotlin.adoc
msgid ""
"Kotlin reflection annotation processing differs from Java.  You may experience an error when using CDI @Inject such as:\n"
"\"kotlin.UninitializedPropertyAccessException: lateinit property xxx has not been initialized\""
msgstr "Kotlinのリフレクションアノテーション処理はJavaとは異なります。CDIの@Injectを使用していると、以下のようなエラーが発生することがあります。\"kotlin.UninitializedPropertyAccessException: lateinitプロパティーxxxが初期化されていません\""

#. type: Plain text
#: _guides/kotlin.adoc
msgid "In the example below, this can be easily solved by adapting the annotation, adding @field: Default, to handle the lack of a @Target on the Kotlin reflection annotation definition."
msgstr "以下の例では、アノテーションに @field を追加することで、Kotlin のリフレクションアノテーション定義に @Target がない場合に対応し、問題を簡単に解決できます。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "Kotlin requires a @field: xxx qualifier as it has no @Target on the annotation definition. Add @field: xxx in this example. @Default is used as the qualifier, explicitly specifying the use of the default bean."
msgstr "Kotlinでは、アノテーション定義に@Targetがないため、@field: xxx修飾子が必要です。この例では @field: xxx を追加します。@Defaultが修飾子として使用され、デフォルトBeanの使用を明示的に指定します。"

#. type: Plain text
#: _guides/kotlin.adoc
msgid "Alternatively, prefer the use of constructor injection which works without modification of the Java examples, increases testability and complies best to a Kotlin programming style."
msgstr "あるいは、Javaの例を変更せずに動作し、テスト性が高く、Kotlinのプログラミングスタイルに最も適しているコンストラクタ・インジェクションの使用をお勧めします。"
