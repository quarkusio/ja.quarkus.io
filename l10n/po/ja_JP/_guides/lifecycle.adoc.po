msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Application Initialization and Termination"
msgstr "アプリケーションの初期化と終了"

#: _guides/lifecycle.adoc
msgid ""
"You often need to execute custom actions when the application starts and clean up everything when the application stops.\n"
"This guide explains how to:"
msgstr "アプリケーションの起動時にカスタムアクションを実行し、アプリケーションの停止時にすべてをクリーンアップする必要があることがよくあります。このガイドでは、以下の方法を説明します:"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "Write a Quarkus application with a main method"
msgstr "メインメソッドでQuarkusアプリケーションを書く"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "Write command mode applications that run a task and then terminate"
msgstr "タスクを実行して終了するコマンドモードのアプリケーションを書く"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "Be notified when the application starts"
msgstr "アプリケーションの開始時に通知される"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "Be notified when the application stops"
msgstr "アプリケーションが停止したときに通知される"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _guides/lifecycle.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "The solution is located in the `lifecycle-quickstart` link:{quickstarts-tree-url}/lifecycle-quickstart[directory]."
msgstr "ソリューションは `lifecycle-quickstart` link:{quickstarts-tree-url}/lifecycle-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _guides/lifecycle.adoc
msgid ""
"First, we need a new project.\n"
"Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "It generates:"
msgstr "以下が生成されます:"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "the Maven structure"
msgstr "Mavenの構造"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr "`native`  と `jvm`  の両方のモードに対応した `Dockerfile`  ファイルの例"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "the application configuration file"
msgstr "アプリケーション設定ファイル"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "The main method"
msgstr "メインメソッド"

#: _guides/lifecycle.adoc
msgid ""
"By default, Quarkus will automatically generate a main method, that will bootstrap Quarkus and then just wait for shutdown to be initiated.\n"
"Let's provide our own main method:"
msgstr "デフォルトでは、Quarkusは自動的にメインメソッドを生成し、Quarkusをブートストラップして、シャットダウンが開始されるのを待ちます。独自のメインメソッドを用意しましょう:"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "This annotation tells Quarkus to use this as the main method, unless it is overridden in the config"
msgstr "このアノテーションは、設定でオーバーライドされない限り、これをメインのメソッドとして使用するようQuarkusに指示します。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "This launches Quarkus"
msgstr "これによりQuarkusが起動します。"

#: _guides/lifecycle.adoc
msgid ""
"This main class will bootstrap Quarkus and run it until it stops.\n"
"This is no different to the automatically generated main class, but has the advantage that you can just launch it directly from the IDE without needing to run a Maven or Gradle command."
msgstr "このメインクラスはQuarkusを起動し、停止するまで実行します。これは自動生成されたメインクラスと変わりませんが、MavenやGradleのコマンドを実行する必要がなく、IDEから直接起動するだけで済むという利点があります。"

#: _guides/lifecycle.adoc
msgid ""
"It is not recommenced to do any business logic in this main method, as Quarkus has not been set up yet, and Quarkus may run in a different ClassLoader.\n"
"If you want to perform logic on startup use an `io.quarkus.runtime.QuarkusApplication` as described below."
msgstr "まだQuarkusが設定されておらず、Quarkusは別のClassLoaderで動作する可能性があるため、このメインメソッドでビジネスロジックを行うことは推奨されていません。起動時にロジックを実行したい場合は、以下のように `io.quarkus.runtime.QuarkusApplication`  を使用してください。"

#: _guides/lifecycle.adoc
msgid ""
"If we want to actually perform business logic on startup (or write applications that complete a task and then exit) we need to supply a `io.quarkus.runtime.QuarkusApplication` class to the run method.\n"
"After Quarkus has been started the `run` method of the application will be invoked.\n"
"When this method returns the Quarkus application will exit."
msgstr "起動時に実際にビジネスロジックを実行したい場合(またはタスクを完了してから終了するアプリケーションを書きたい場合)、runメソッドに `io.quarkus.runtime.QuarkusApplication`  クラスを指定する必要があります。Quarkusが起動すると、アプリケーションの `run`  メソッドが呼び出されます。このメソッドが返されると、Quarkusアプリケーションは終了します。"

#: _guides/lifecycle.adoc
msgid ""
"If you want to perform logic on startup you should call `Quarkus.waitForExit()`, this method will wait until a shutdown\n"
"is requested (either from an external signal like when you press `Ctrl+C` or because a thread has called `Quarkus.asyncExit()`)."
msgstr "起動時にロジックを実行したい場合は、 `Quarkus.waitForExit()`  を呼び出す必要があります。このメソッドは、シャットダウンが要求されるまで待機します( `Ctrl+C`  を押したときのような外部シグナルや、スレッドが `Quarkus.asyncExit()`  を呼び出したときのような外部シグナルのいずれか)。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "An example of what this looks like is below:"
msgstr "その一例が以下のようなものです:"

#: _guides/lifecycle.adoc
msgid ""
"`Quarkus.run` also provides a version that allows the code to handle errors.\n"
"For example:"
msgstr "`Quarkus.run` はコードがエラーを処理できるようにするバージョンも提供します。例:"

#. type: Title ===
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Injecting the command line arguments"
msgstr "コマンドライン引数の注入"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "It is possible to inject the arguments that were passed in on the command line:"
msgstr "コマンドラインで渡された引数を注入することができます:"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "Command line arguments can be passed to the application through the `-D` flag with the property `quarkus.args`:"
msgstr "コマンドライン引数は、プロパティ `quarkus.args` で `-D` フラグを介してアプリケーションに渡すことができます。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "For Quarkus dev mode:"
msgstr "Quarkus開発モードの場合:"

#: _guides/lifecycle.adoc
msgid "CLI"
msgstr "コマンドラインインタフェース"

#: _guides/lifecycle.adoc
msgid "Maven"
msgstr "Maven"

#: _guides/lifecycle.adoc
msgid "Gradle"
msgstr "Gradle"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "For a runner jar: `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar`"
msgstr "runner jarの場合: `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar`"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "For a native executable: `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>`"
msgstr "ネイティブ実行可能ファイルの場合: `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>`"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Listening for startup and shutdown events"
msgstr "スタートアップとシャットダウンのイベントをリッスンする"

#: _guides/lifecycle.adoc
msgid ""
"Create a new class named `AppLifecycleBean` (or pick another name) in the `org.acme.lifecycle` package, and copy the\n"
"following content:"
msgstr "`org.acme.lifecycle`  パッケージ内に `AppLifecycleBean`  という名前の新しいクラスを作成し(または別の名前を選び)、以下の内容をコピーします。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "Method called when the application is starting"
msgstr "アプリケーションの起動時に呼び出されるメソッド"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "Method called when the application is terminating"
msgstr "アプリケーションの終了時に呼び出されるメソッド"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "The events are also called in _dev mode_ between each redeployment."
msgstr "また、各再配置の間に _開発モード_ でイベントが呼び出されます。"

#: _guides/lifecycle.adoc
msgid ""
"The methods can access injected beans.\n"
"Check the link:{quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java] class for details."
msgstr "メソッドは，注入されたBeanにアクセスできます。詳細は link:{quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java] クラスを確認してください。"

#. type: Title ===
#: _guides/lifecycle.adoc
#, no-wrap
msgid "What is the difference from `@Initialized(ApplicationScoped.class)` and `@Destroyed(ApplicationScoped.class)`"
msgstr "`@Initialized(ApplicationScoped.class)` と `@Destroyed(ApplicationScoped.class)` との違いは?"

#: _guides/lifecycle.adoc
msgid ""
"In the JVM mode, there is no real difference, except that `StartupEvent` is always fired *after* `@Initialized(ApplicationScoped.class)` and `ShutdownEvent` is fired *before* `@Destroyed(ApplicationScoped.class)`.\n"
"For a native executable build, however, `@Initialized(ApplicationScoped.class)` is fired as *part of the native build process*, whereas `StartupEvent` is fired when the native image is executed.\n"
"See xref:writing-extensions.adoc#bootstrap-three-phases[Three Phases of Bootstrap and Quarkus Philosophy] for more details."
msgstr "JVMモードでは、 `StartupEvent` が常に `@Initialized(ApplicationScoped.class)` の *後に* 起動され、 `ShutdownEvent` が `@Destroyed(ApplicationScoped.class)` の *前に* 起動されることを除けば、実質的な違いはありません。しかし、ネイティブの実行形式のビルドでは、 `@Initialized(ApplicationScoped.class)` は *ネイティブのビルドプロセスの一部* として起動され、 `StartupEvent` はネイティブイメージが実行されるときに起動されます。詳細は、link:writing-extensions.html#bootstrap-three-phases[Bootstrapの3つのフェーズとQuarkus Philosophy] を参照してください。"

#: _guides/lifecycle.adoc
msgid "In CDI applications, an event with qualifier `@Initialized(ApplicationScoped.class)` is fired when the application context is initialized. See https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#application_context[the spec, window=\"_blank\"] for more info."
msgstr "CDIアプリケーションでは、アプリケーションコンテキストが初期化されると、 `@Initialized(ApplicationScoped.class)` の修飾子を持つイベントが発生します。詳細は link:https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#application_context[仕様] を参照してください。"

#. type: Title ===
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Using `@Startup` to initialize a CDI bean at application startup"
msgstr "`@Startup`  を使用して、アプリケーション起動時に CDI Bean を初期化する"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "A bean represented by a class, producer method or field annotated with `@Startup` is initialized at application startup:"
msgstr "`@Startup`  でアノテーションされたクラス、プロデューサメソッド、フィールドで表現されたBeanは、アプリケーションの起動時に初期化されます。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr "`@Startup`  でアノテーションされた各Beanに対して、 `StartupEvent`  の合成オブザーバが生成されます。デフォルトの優先度が使用されます。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr "Beanのコンストラクタは、アプリケーションの起動時に呼び出され、結果として得られるコンテキストインスタンスがアプリケーションのコンテキストに格納されます。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "`@Dependent` beans are destroyed immediately afterwards to follow the behavior of observers declared on `@Dependent` beans."
msgstr "`@Dependent` Beanは、 `@Dependent`  Beanに宣言されたオブザーバーの行動に従うために、その後すぐに破壊されます。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "If a class is annotated with `@Startup` but with no scope annotation then `@ApplicationScoped` is added automatically."
msgstr "クラスが `@Startup`  でアノテーションされていて、スコープのアノテーションがない場合は、 `@ApplicationScoped`  が自動的に追加されます。"

#: _guides/lifecycle.adoc
msgid "The `@Startup` annotation can be also declared on a non-static non-producer no-args method:"
msgstr "`@Startup` アノテーションは、非static、非producer、argsなしメソッドでも宣言できます："

#: _guides/lifecycle.adoc
msgid "The bean is created and the `init()` method is invoked upon the contextual instance when the application starts."
msgstr "アプリケーションが起動すると、Bean が作成され、コンテキストインスタンスに対して `init()` メソッドが呼び出されます。"

#: _guides/lifecycle.adoc
msgid "Using `@Shutdown` to execute a business method of a CDI bean during application shutdown"
msgstr "`@Shutdown` を使用して、アプリケーションのシャットダウン中に CDI Bean のビジネスメソッドを実行します。"

#: _guides/lifecycle.adoc
msgid ""
"The `@io.quarkus.runtime.Shutdown` annotation is used to mark a business method of a CDI bean that should be executed during application shutdown.\n"
"The annotated method must be non-private and non-static and declare no arguments.\n"
"The behavior is similar to a declaration of a `ShutdownEvent` observer.\n"
"The following examples are functionally equivalent."
msgstr "`@io.quarkus.runtime.Shutdown` アノテーションは、アプリケーションのシャットダウン中に実行されるべき CDI Bean のビジネスメソッドをマークするために使用されます。アノテーションされたメソッドは、非プライベートかつ非静的で、引数を宣言しない必要があります。動作は、 `ShutdownEvent` オブザーバの宣言に似ています。以下の例は、機能的に同等です。"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "Run the application with:"
msgstr "アプリケーションを次のように実行します:"

#: _guides/lifecycle.adoc
msgid ""
"The logged message is printed.\n"
"When the application is stopped, the second log message is printed."
msgstr "ログメッセージが表示されます。アプリケーションが停止すると、2つ目のログメッセージが印刷されます。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化できます:"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして次のように実行します `java -jar target/quarkus-app/quarkus-run.jar` 。"

#. type: Plain text
#: _guides/lifecycle.adoc
msgid "You can also generate the native executable using:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます:"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Launch Modes"
msgstr "起動モード"

#: _guides/lifecycle.adoc
msgid ""
"Quarkus has 3 different launch modes, `NORMAL` (i.e. production), `DEVELOPMENT` and `TEST`.\n"
"If you are running `quarkus:dev` then the mode will be `DEVELOPMENT`, if you are running a JUnit test it will be `TEST`, otherwise it will be `NORMAL`."
msgstr "Quarkusには3種類の起動モードがあります。 `NORMAL`  (つまりプロダクション)、 `DEVELOPMENT`  、 `TEST`  です。 `quarkus:dev`  を実行している場合は `DEVELOPMENT`  、JUnit テストを実行している場合は `TEST`  、それ以外の場合は `NORMAL`  となります。"

#: _guides/lifecycle.adoc
msgid ""
"Your application can get the launch mode by injecting the `io.quarkus.runtime.LaunchMode` enum into a CDI bean,\n"
"or by invoking the static method `io.quarkus.runtime.LaunchMode.current()`."
msgstr "アプリケーションは、 `io.quarkus.runtime.LaunchMode`  enum を CDI Beanに注入するか、静的メソッド `io.quarkus.runtime.LaunchMode.current()`  を呼び出すことで起動モードを取得できます。"

#. type: Title ==
#: _guides/lifecycle.adoc
#, no-wrap
msgid "Graceful Shutdown"
msgstr "グレースフルシャットダウン"

#: _guides/lifecycle.adoc
msgid ""
"Quarkus includes support for graceful shutdown, this allows Quarkus to wait for running requests to finish, up till a set timeout.\n"
"By default, this is disabled, however you can configure this by setting the `quarkus.shutdown.timeout` config property.\n"
"When this is set shutdown will not happen until all running requests have completed, or until this timeout has elapsed."
msgstr ""
"Quarkusがグレースフルシャットダウンのサポートを追加しました。これにより、Quarkusは実行中のリクエストが終了するまで、設定されたタイムアウトまで待機することができます。\n"
"デフォルトでは無効になっていますが、 `quarkus.shutdown.timeout` コンフィグプロパティを設定することで設定できます。\n"
"これを設定すると、実行中のリクエストがすべて完了するか、タイムアウトが経過するまでシャットダウンは行われません。"

#: _guides/lifecycle.adoc
msgid ""
"Extensions that accept requests need to add support for this on an individual basis.\n"
"At the moment only the HTTP extension supports this, so shutdown may still happen when messaging requests are active."
msgstr ""
"リクエストを受け付けるエクステンションは、個別にサポートを追加する必要があります。\n"
"現時点では HTTP エクステンションだけがこれをサポートしているので、メッセージングリクエストがアクティブなときにシャットダウンが発生する可能性があります。"

#: _guides/lifecycle.adoc
msgid ""
"Quarkus supports a delay time, where the application instance still responds to requests, but the readiness probe fails.\n"
"This gives the infrastructure time to recognize that the instance is shutting down and stop routing traffic to the instance.\n"
"This feature can be enabled by setting the build-time property `quarkus.shutdown.delay-enabled` to `true`.\n"
"The delay can then be configured by setting the runtime property `quarkus.shutdown.delay`.\n"
"It is not set by default, thus no delay is applied."
msgstr ""
"Quarkusは遅延時間をサポートしており、アプリケーションインスタンスは依然としてリクエストに応答しますが、readinessプローブは失敗します。\n"
"これにより、インフラストラクチャはインスタンスがシャットダウンしていることを認識し、インスタンスへのトラフィックのルーティングを停止する時間が得られます。\n"
"この機能は、ビルド時プロパティ `quarkus.shutdown.delay-enabled` を `true` に設定することで有効にできます。\n"
"遅延は、実行時プロパティ `quarkus.shutdown.delay` を設定することで設定できます。\n"
"デフォルトでは設定されていないため、遅延は適用されません。"

#: _guides/lifecycle.adoc
#, fuzzy
msgid "Using `@ShutdownDelayInitiated` to execute a business method of a CDI bean when Quarkus shutdown delay initiates"
msgstr "`@ShutdownDelayInitiated` を使用して、Quarkus のシャットダウン遅延が開始したときに、CDI Bean のビジネスメソッドを実行します。"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"The `@io.quarkus.runtime.ShutdownDelayInitiated` annotation is used to mark a business method of a CDI bean that should be executed when the shutdown delay initiates.\n"
"The annotated method must be non-private and non-static and declare no arguments. Furthermore, `quarkus.shutdown.delay-enabled` configuration needs to be set to `true`."
msgstr "`@io.quarkus.runtime.ShutdownDelayInitiated` アノテーションは、シャットダウン遅延が開始したときに実行されるべき CDI Bean のビジネスメソッドをマークするために使用されます。アノテーションされたメソッドは、非プライベートかつ非静的で、引数を宣言しない必要があります。さらに、 `quarkus.shutdown.delay-enabled` 構成を `true` に設定する必要があります。"

#: _guides/lifecycle.adoc
#, fuzzy
msgid ""
"The behavior is similar to a declaration of a `ShutdownDelayInitiatedEvent` observer.\n"
"The following examples are functionally equivalent."
msgstr "動作は `ShutdownDelayInitiatedEvent` オブザーバーの宣言に似ています。以下の例は機能的に同等です。"
