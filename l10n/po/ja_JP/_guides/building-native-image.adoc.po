msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Building a Native Executable"
msgstr "ネイティブ実行可能ファイルのビルド"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "This guide covers:"
msgstr "このガイドでは以下をカバーしています。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Compiling the application to a native executable"
msgstr "アプリケーションをネイティブ実行可能ファイルにコンパイル"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Packaging the native executable in a container"
msgstr "ネイティブ実行可能ファイルのコンテナーへのパッケージング"

#. type: Title ==
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Debugging native executable"
msgstr "ネイティブ実行可能ファイルのデバッグ"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "This guide takes as input the application developed in the xref:getting-started.adoc[Getting Started Guide]."
msgstr "このガイドは、xref:getting-started.adoc[入門ガイド] で開発されたアプリケーションを入力としています。"

#. type: Title ==
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "要件"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "A xref:configuring-c-development[working C development environment]"
msgstr "xref:configuring-c-development[動作するC言語の開発環境]"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "The code of the application developed in the xref:getting-started.adoc[Getting Started Guide]."
msgstr "xref:getting-started.adoc[入門ガイド] で開発したアプリケーションのコード。"

#. type: Block title
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Supporting native compilation in C"
msgstr "C言語でのネイティブコンパイルのサポート"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "What does having a working C developer environment mean?"
msgstr "動作するC言語の開発環境があるとはどういう意味でしょうか?"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "On Linux, you will need GCC, and the glibc and zlib headers. Examples for common distributions:"
msgstr "Linuxでは、GCC、glibc、zlibヘッダが必要です。一般的なディストリビューションでは次の通りです:"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "XCode provides the required dependencies on macOS:"
msgstr "macOS では、XCode が必要な依存関係を提供します:"

#: _guides/building-native-image.adoc
#, fuzzy
msgid "On Windows, you will need to install the https://aka.ms/vs/17/release/vs_buildtools.exe[Visual Studio 2022 Visual C++ Build Tools]"
msgstr "Windows では、 link:https://aka.ms/vs/17/release/vs_buildtools.exe[Visual Studio 2022 Visual C++ Build Tools を] インストールする必要があります。"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Background"
msgstr "背景"

#: _guides/building-native-image.adoc
msgid ""
"Building a native executable requires using a distribution of GraalVM.\n"
"There are three distributions:\n"
"Oracle GraalVM Community Edition (CE), Oracle GraalVM Enterprise Edition (EE) and Mandrel.\n"
"The differences between the Oracle and Mandrel distributions are as follows:"
msgstr ""
"ネイティブな実行可能ファイルをビルドするには、GraalVM のディストリビューションを使用する必要があります。ディストリビューションは3つあります。\n"
"Oracle GraalVM Community Edition (CE)、Oracle GraalVM Enterprise Edition (EE)、そして Mandrel です。Oracle ディストリビューションと Mandrel ディストリビューションの違いは以下の通りです。"

#: _guides/building-native-image.adoc
msgid ""
"Mandrel is a downstream distribution of the Oracle GraalVM CE.\n"
"Mandrel's main goal is to provide a way to build native executables specifically designed to support Quarkus."
msgstr "Mandrelは、Oracle GraalVM CEのダウンストリームディストリビューションです。Mandrelの主な目的は、Quarkusをサポートするために特別に設計されたネイティブ実行可能ファイルを構築する方法を提供することです。"

#: _guides/building-native-image.adoc
msgid ""
"Mandrel releases are built from a code base derived from the upstream Oracle GraalVM CE code base,\n"
"with only minor changes but some significant exclusions that are not necessary for Quarkus native apps.\n"
"They support the same capabilities to build native executables as Oracle GraalVM CE,\n"
"with no significant changes to functionality.\n"
"Notably, they do not include support for polyglot programming.\n"
"The reason for these exclusions is to provide a better level of support for the majority of Quarkus users.\n"
"These exclusions also mean Mandrel offers a considerable reduction in its distribution size\n"
"when compared with Oracle GraalVM CE/EE."
msgstr "Mandrel のリリースは、アップストリームのOracle GraalVM CEコードベースから派生したコードベースから構築されており、わずかな変更しか行われていませんが、Quarkusネイティブアプリには必要ない重要な除外事項がいくつかあります。これらのリリースは、Oracle GraalVM CEと同じ機能をサポートしており、機能に大きな変更はありません。特筆すべきは、多言語プログラミングのサポートが含まれていないことです。これらの除外の理由は、大多数のQuarkusユーザーにより良いレベルのサポートを提供するためです。また、これらの除外は、Oracle GraalVM CE/EEと比較して、Mandrelの配布サイズが大幅に縮小されていることを意味しています。"

#: _guides/building-native-image.adoc
msgid ""
"Mandrel is built slightly differently to Oracle GraalVM CE, using the standard OpenJDK project.\n"
"This means that it does not profit from a few small enhancements that Oracle have added to the version of OpenJDK used to build their own GraalVM downloads.\n"
"These enhancements are omitted because upstream OpenJDK does not manage them, and cannot vouch for.\n"
"This is particularly important when it comes to conformance and security."
msgstr "Mandrelは、標準のOpenJDKプロジェクトを使用して、Oracle GraalVM CEとは少し違った形で構築されています。これは、Oracleが独自のGraalVMダウンロードを構築するために使用するOpenJDKのバージョンに追加したいくつかの小さな機能強化から利益を得られないことを意味します。アップストリームのOpenJDKはそれらを管理しておらず、保証することができないため、このような機能強化は省略されています。これは、規格適合性とセキュリティーに関しては特に重要です。"

#: _guides/building-native-image.adoc
#, fuzzy
msgid ""
"Mandrel is recommended for building native executables that target Linux containerized environments.\n"
"This means that Mandrel users are encouraged to use containers to build their native executables.\n"
"If you are building native executables for macOS on amd64/x86,\n"
"you should consider using Oracle GraalVM instead,\n"
"because Mandrel does not currently target this platform.\n"
"Building native executables directly on bare metal Linux, macOS (on M processors), or Windows is possible,\n"
"with details available in the https://github.com/graalvm/mandrel/blob/default/README.md[Mandrel README]\n"
"and https://github.com/graalvm/mandrel/releases[Mandrel releases]."
msgstr "Mandrel は、Linux コンテナ環境をターゲットとするネイティブ実行可能ファイルのビルドに推奨されています。つまり、Mandrel ユーザーは、ネイティブ実行可能ファイルをビルドするためにコンテナを使用することが推奨されます。amd64/x86 上の macOS 向けにネイティブ実行可能ファイルをビルドする場合、Mandrel は現在このプラットフォームをターゲットにしていないため、代わりに Oracle GraalVM の使用を検討する必要があります。ベアメタル Linux、macOS (M プロセッサ上)、または Windows 上でネイティブ実行可能ファイルを直接構築することは可能です。"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Configuring GraalVM"
msgstr "GraalVMの設定"

#: _guides/building-native-image.adoc
msgid ""
"This step is only required for generating native executables targeting non-Linux operating systems.\n"
"For generating native executables targeting Linux, you can optionally skip this section and <<#container-runtime,use a builder image>> instead."
msgstr ""
"このステップは、Linux 以外のオペレーティングシステムをターゲットとしたネイティブ実行可能ファイルを生成する場合にのみ必要です。\n"
"Linux をターゲットとしたネイティブ実行可能ファイルを生成する場合は、このセクションを省略して代わりに <<#container-runtime,use a builder image>>。"

#: _guides/building-native-image.adoc
msgid ""
"If you cannot install GraalVM, you can use a multi-stage Docker build to run Maven inside a Docker container that embeds GraalVM.\n"
"There is an explanation of how to do this at <<#multistage-docker,the end of this guide>>."
msgstr ""
"GraalVM をインストールできない場合は、マルチステージの Docker ビルドを使用して、GraalVM が組み込まれた Docker コンテナー内で Maven を実行できます。\n"
"これを行う方法については、<<#multistage-docker,the end of this guide>> で説明しています。"

#: _guides/building-native-image.adoc
msgid "GraalVM {graalvm-version} is required."
msgstr "GraalVM {graalvm-version} が必要です。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "Install GraalVM if you haven't already. You have a few options for this:"
msgstr "まだの場合は、GraalVM をインストールします。これにはいくつかのオプションがあります:"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "Download the appropriate archive from <https://github.com/graalvm/mandrel/releases> or <https://github.com/graalvm/graalvm-ce-builds/releases>, and unpack it like you would any other JDK."
msgstr "<https://github.com/graalvm/mandrel/releases> または <https://github.com/graalvm/graalvm-ce-builds/releases> から適切なアーカイブをダウンロードし、他の JDK と同じように展開します。"

#: _guides/building-native-image.adoc
msgid ""
"Use platform-specific installer tools like https://sdkman.io/jdks#graalce[sdkman], https://github.com/graalvm/homebrew-tap[homebrew], or https://github.com/ScoopInstaller/Java[scoop].\n"
"We recommend the _community edition_ of GraalVM. For example, install it with `sdk install java 21-graalce`."
msgstr ""
"https://sdkman.io/jdks#graalce[sdkman]、 https://github.com/graalvm/homebrew-tap[homebrew]、 https://github.com/ScoopInstaller/Java[scoop] などのプラットフォーム固有のインストーラーツールを使用します。\n"
"GraalVM の _コミュニティーエディション_ が推奨されます。たとえば、 `sdk install java 21-graalce` でインストールします。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "Configure the runtime environment. Set `GRAALVM_HOME` environment variable to the GraalVM installation directory, for example:"
msgstr "ランタイム環境を構成します。 `GRAALVM_HOME` 環境変数をGraalVMインストールディレクトリに設定します。例えば:"

#: _guides/building-native-image.adoc
#, fuzzy
msgid "On macOS (amd64/x86 based Macs not supported), point the variable to the `Home` sub-directory:"
msgstr "macOS（amd64/x86ベースのMacはサポートされていません）では、この変数を `Home` サブディレクトリに指定してください："

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "On Windows, you will have to go through the Control Panel to set your environment variables."
msgstr "Windowsでは、コントロールパネルから環境変数を設定する必要があります。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "Installing via scoop will do this for you."
msgstr "scoop でインストールすれば自動的に設定されます。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "(Optional) Set the `JAVA_HOME` environment variable to the GraalVM installation directory."
msgstr "(オプション) 環境変数 `JAVA_HOME` を GraalVM のインストールディレクトリに設定します。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "(Optional) Add the GraalVM `bin` directory to the path"
msgstr "(オプション) GraalVM `bin` ディレクトリをパスに追加します"

#. type: Block title
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Issues using GraalVM with macOS"
msgstr "macOS で GraalVM を使用する場合の問題"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "GraalVM binaries are not (yet) notarized for macOS as reported in this https://github.com/oracle/graal/issues/1724[GraalVM issue]. This means that you may see the following error when using `native-image`:"
msgstr "この https://github.com/Oracle/graal/issues/1724[GraalVM の問題] で報告されているように、GraalVM バイナリーは (まだ) macOS に対して認証されていません。つまり、 `native-image` を使用すると次のエラーが表示される可能性があります。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Use the following command to recursively delete the `com.apple.quarantine` extended attribute on the GraalVM install directory as a workaround:"
msgstr "回避策として、次のコマンドを使用して、GraalVMインストールディレクトリ上の `com.apple.quarantine` 拡張属性を再帰的に削除します:"

#. type: Title ==
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "We recommend that you follow the instructions in the next sections and package the application step by step. However, you can go right to the completed example."
msgstr "次のセクションの手順に従って、アプリケーションを段階的にパッケージ化することをお勧めします。しかしながら、完成したサンプルに直接進むこともできます。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "`git clone {quickstarts-clone-url}` で Git リポジトリーをクローンします。または、{quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "The solution is located in the `getting-started` directory."
msgstr "ソリューションは `getting-started` ディレクトリに存在します。"

#. type: Title ==
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Producing a native executable"
msgstr "ネイティブ実行可能ファイルの生成"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "The native executable for our application will contain the application code, required libraries, Java APIs, and a reduced version of a VM. The smaller VM base improves the startup time of the application and produces a minimal disk footprint."
msgstr "アプリケーションのネイティブ実行可能ファイルには、アプリケーション・コード、必要なライブラリ、Java API、および VM の縮小版が含まれます。VM ベースが小さくなることで、アプリケーションの起動時間が改善され、ディスクフットプリントが最小限に抑えられます。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "image:native-executable-process.png[Creating a native executable]"
msgstr "image:native-executable-process.png[ネイティブ実行可能ファイルの生成]"

#: _guides/building-native-image.adoc
msgid "If you have generated the application from the previous tutorial, you can find in the `pom.xml` the following Maven profile section:"
msgstr "前回のチュートリアルでアプリケーションを生成した場合は、 `pom.xml` に以下の Maven プロファイルセクションがあります。"

#: _guides/building-native-image.adoc
#, fuzzy
msgid ""
"You can provide custom options for the `native-image` command using the `quarkus.native.additional-build-args` and `quarkus.native.additional-build-args-append` properties.\n"
"Multiple options may be separated by a comma."
msgstr "`quarkus.native.additional-build-args` と `quarkus.native.additional-build-args-append` プロパティを使用して、 `native-image` コマンドにカスタム・オプションを指定できます。複数のオプションをコンマで区切って指定できます。"

#: _guides/building-native-image.adoc
#, fuzzy
msgid "By convention `quarkus.native.additional-build-args-append` is meant to be defined at the command line (e.g. `-Dquarkus.native.additional-build-args-append=--verbose`), while `quarkus.native.additional-build-args` may be defined either at the command line or in your `application.properties`. Note that, any arguments included in `quarkus.native.additional-build-args-append` may override those included in `quarkus.native.additional-build-args`."
msgstr "慣例として、 `quarkus.native.additional-build-args-append` はコマンドラインで定義されます（例： `-Dquarkus.native.additional-build-args-append=--verbose` ）。一方、 `quarkus.native.additional-build-args` はコマンドラインで定義しても、 `application.properties` で定義してもかまいません。 `quarkus.native.additional-build-args-append` に含まれる引数は、 `quarkus.native.additional-build-args` に含まれる引数を上書きする可能性があることに注意してください。"

#: _guides/building-native-image.adoc
msgid "You can find more information about how to configure the native image building process in the <<configuration-reference>> section below."
msgstr "ネイティブイメージ構築プロセスの設定方法の詳細は、以下の <<configuration-reference>> セクション参照してください。"

#: _guides/building-native-image.adoc
msgid ""
"We use a profile because, you will see very soon, packaging the native executable takes a _few_ minutes. You could\n"
"just pass -Dquarkus.native.enabled=true as a property on the command line, however it is better to use a profile as\n"
"this allows native image tests to also be run."
msgstr ""
"すぐにわかると思いますが、ネイティブ実行可能ファイルのパッケージ化には _数分_ かかるため、プロファイルを使用しています。\n"
"コマンドラインでプロパティーとして -Dquarkus.native.enabled=true を渡すこともできますが、プロファイルを使用するとネイティブイメージテストも実行できるようになるため、プロファイルを使用することをお勧めします。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Create a native executable using:"
msgstr "次のようにネイティブ実行可能ファイルの作成します:"

#. type: Block title
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Issues with packaging on Windows"
msgstr "Windows でのパッケージ化に関する問題"

#: _guides/building-native-image.adoc
msgid ""
"The Microsoft Native Tools for Visual Studio must first be initialized before packaging.\n"
"You can do this by starting the `x64 Native Tools Command Prompt` that was installed with the Visual Studio Build Tools.\n"
"At the `x64 Native Tools Command Prompt`, you can navigate to your project folder and run `./mvnw package -Dnative`."
msgstr ""
"Visual Studio の Microsoft Native Tools はパッケージ化する前に初期化する必要があります。\n"
"これは、Visual Studio ビルドツールと一緒にインストールされた `x64 Native Tools Command Prompt` を起動することで行うことができます。\n"
"`x64 Native Tools Command Prompt` で、プロジェクトフォルダーに移動して `./mvnw package -Dnative` を実行してください。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "Another solution is to write a script to do this for you:"
msgstr "もう一つのソリューションは、これを行うためのスクリプトを書くことです:"

#: _guides/building-native-image.adoc
msgid ""
"In addition to the regular files, the build also produces `target/getting-started-1.0.0-SNAPSHOT-runner`.\n"
"You can run it using: `./target/getting-started-1.0.0-SNAPSHOT-runner`."
msgstr "通常のファイルに加えて、このビルドでは `target/getting-started-1.0.0-SNAPSHOT-runner` を生成します。これを実行するには、次のようにします: `./target/getting-started-1.0.0-SNAPSHOT-runner` ."

#. type: Block title
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Java preview features"
msgstr "Java プレビュー機能"

#: _guides/building-native-image.adoc
msgid ""
"Java code that relies on preview features requires special attention.\n"
"To produce a native executable, this means that the `--enable-preview` flag needs to be passed to the underlying native image invocation.\n"
"You can do so by prepending the flag with `-J` and passing it as additional native build argument: `-Dquarkus.native.additional-build-args=-J--enable-preview`."
msgstr "プレビュー機能に依存する Java コードには、特別な注意が必要です。これは、ネイティブ実行可能ファイルを生成する場合、 `--enable-preview` フラグを基になるネイティブイメージ呼び出しに渡す必要があることを意味します。そのためには、フラグの前に `-J` を付け、それを追加のネイティブビルド引数として渡します: `-Dquarkus.native.additional-build-args=-J--enable-preview` 。"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Build fully static native executables"
msgstr "完全に静的なネイティブ実行可能ファイルの作成"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "Fully static native executables support is experimental."
msgstr "完全に静的なネイティブ実行可能ファイルのサポートは実験的なものです。"

#: _guides/building-native-image.adoc
msgid ""
"On Linux it's possible to package a native executable that doesn't depend on any system shared library.\n"
"There are link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/guides/build-static-executables/#prerequisites-and-preparation[some system requirements] to be fulfilled and additional build arguments to be used along with the `native-image` invocation, a minimum is `-Dquarkus.native.additional-build-args=\"--static\",\"--libc=musl\"`."
msgstr ""
"Linux では、システムの共有ライブラリに依存しないネイティブ実行可能ファイルをパッケー ジ化できます。\n"
"満たすべき link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/guides/build-static-executables/#prerequisites-and-preparation[いくつかのシステム要件] と、 `native-image` の呼び出しとともに使用する追加のビルド引数がありますが、最低限必要なのは `-Dquarkus.native.additional-build-args=\"--static\",\"--libc=musl\"` です。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "Compiling fully static binaries is done by statically linking https://musl.libc.org/[musl] instead of `glibc` and should not be used in production without rigorous testing."
msgstr "完全な静的バイナリのコンパイルは、 `glibc` の代わりに link:https://musl.libc.org/[musl] を静的にリンクすることで行われます。厳密なテストなしに実運用で使用するべきではありません。"

#. type: Title ==
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Testing the native executable"
msgstr "ネイティブ実行可能ファイルのテスト"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "Producing a native executable can lead to a few issues, and so it's also a good idea to run some tests against the application running in the native file. The reasoning is explained in the link:getting-started-testing#quarkus-integration-test[Testing Guide]."
msgstr "ネイティブ実行可能ファイルを生成することはいくつかの問題を引き起こす可能性があるので、ネイティブファイルで実行されているアプリケーションに対していくつかのテストを実行することをお勧めします。その理由は link:getting-started-testing#quarkus-integration-test[テストのガイド] で説明されています。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "To see the `GreetingResourceIT` run against the native executable, use `./mvnw verify -Dnative`:"
msgstr "`GreetingResourceIT` がネイティブ実行可能ファイルに対して実行されることを確認するには、 `./mvnw verify -Pnative` を使用します。"

#: _guides/building-native-image.adoc
msgid ""
"By default, Quarkus waits for 60 seconds for the native image to start before automatically failing the native tests. This\n"
"duration can be changed using the `quarkus.test.wait-time` system property. For example, to increase the duration\n"
"to 300 seconds, use: `./mvnw verify -Dnative -Dquarkus.test.wait-time=300`."
msgstr ""
"Quarkus では、デフォルトでネイティブイメージの起動を 60 秒間待機した後、自動的にネイティブテストが失敗します。\n"
"この時間は、 `quarkus.test.wait-time` システムプロパティーを使用して変更できます。\n"
"たとえば待機時間を 300 秒に増やす場合、 `./mvnw verify -Dnative -Dquarkus.test.wait-time=300` となります。"

#: _guides/building-native-image.adoc
msgid ""
"This procedure was formerly accomplished using the `@NativeImageTest` annotation. `@NativeImageTest` was replaced by `@QuarkusIntegrationTest` which provides a superset of the testing\n"
"capabilities of `@NativeImageTest`. More information about `@QuarkusIntegrationTest` can be found in the xref:getting-started-testing.adoc#quarkus-integration-test[Testing Guide]."
msgstr "この手順は、以前は `@NativeImageTest` のアノテーションを使用していました。 `@NativeImageTest` は `@QuarkusIntegrationTest` に置き換えられ、 `@NativeImageTest` のテスト機能のスーパーセットを提供します。 `@QuarkusIntegrationTest` の詳細については、 xref:getting-started-testing.adoc#quarkus-integration-test[テストガイド] を参照してください。"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Profiles"
msgstr "プロファイル"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "By default, integration tests both *build* and *run* the native executable using the `prod` profile."
msgstr "デフォルトでは、インテグレーションテストは `prod` プロファイルを使用して、ネイティブ実行可能ファイルに対して *build* と *run* の両方を行います。"

#: _guides/building-native-image.adoc
#, fuzzy
msgid ""
"You can override the profile the executable *runs* with during the test using the `quarkus.test.integration-test-profile` property.\n"
"Either by adding it to `application.properties` or by appending it to the command line:\n"
"`./mvnw verify -Dnative -Dquarkus.test.integration-test-profile=test`.\n"
"Your `%test.` prefixed properties will be used at the test runtime."
msgstr "`quarkus.test.integration-test-profile` プロパティを使用して、テスト中に実行ファイルが *実行する* プロファイルを上書きできます。 `application.properties` に追加するか、コマンドラインに `./mvnw verify -Dnative -Dquarkus.test.integration-test-profile=test` を追加してください。 `%test.` に接頭辞を付けたプロパティは、テストの実行時に使用されます。"

#: _guides/building-native-image.adoc
msgid ""
"You can override the profile the executable is *built* with and *runs* with using the `quarkus.profile=test` property, e.g.\n"
"`./mvnw clean verify -Dnative -Dquarkus.profile=test`. This might come handy if there are test specific resources to be processed,\n"
"such as importing test data into the database."
msgstr ""
"`quarkus-profile=test` プロパティーを使用すると、実行可能ファイルが *ビルド* されて *実行さ* れるプロファイルをオーバーライドできます \n"
"(例: `./mvnw clean verify -Dnative -Dquarkus.profile=test`）。これは、データベースへのテストデータのインポートなど、テスト固有のリソースを処理する場合に便利です。"

#: _guides/building-native-image.adoc
msgid ""
"With the aforementioned example in your `application.properties`, your Hibernate ORM managed database will be populated with test\n"
"data both during the JVM mode test run and during the native mode test run. The production\n"
"executable will contain only the `version.txt` resource, no superfluous test data."
msgstr "上記の例を `application.properties` に記述すると、Hibernate ORM が管理するデータベースには、JVM モードのテスト実行中とネイティブモードのテスト実行中の両方でテストデータが入力されることになります。本番用の実行ファイルには `version.txt` リソースのみが含まれ、余分なテストデータは含まれません。"

#: _guides/building-native-image.adoc
msgid ""
"The executable built with `-Dquarkus.profile=test` is not suitable for production deployment.\n"
"It contains your test resources files and settings. Once the testing is done, the executable would have to be built again,\n"
"using the default, `prod` profile."
msgstr ""
"`-Dquarkus.profile=test` でビルドされた実行可能ファイルは、実稼働環境でのデプロイメントには適していません。\n"
"なぜなら、テスト用のリソースファイルや設定が含まれているからです。\n"
"テストが終了したら、デフォルトの `prod` プロファイルを使用して、実行可能ファイルを再度ビルドする必要があります。"

#: _guides/building-native-image.adoc
msgid ""
"Alternatively, if you need to specify specific properties when running tests against the native executable\n"
"built using the `prod` profile, an option is to put those properties in file `src/test/resources/application-nativeit.yaml`, and refer to it from the `failsafe` plugin configuration using the `QUARKUS_CONFIG_LOCATIONS` environment variable. For instance:"
msgstr "または、ネイティブ実行可能ファイルに対してテストを実行するときに、 `prod` プロファイルを使用してビルドされた特定のプロパティーを指定する必要があれば、オプションとして、これらのプロパティーを `src/test/resources/application-nativeit.yaml` ファイルに配置し、 `QUARKUS_CONFIG_LOCATIONS` 環境変数を使用して `failsafe` プラグイン設定から参照できます。以下はその例です。"

#: _guides/building-native-image.adoc
msgid ""
"Java code that relies on preview features requires special attention.\n"
"To test a native executable, this means that the `--enable-preview` flag needs to be passed to the Surefire plugin.\n"
"Adding `<argLine>--enable-preview</argLine>` to its `configuration` section is one way to do so."
msgstr ""
"プレビュー機能に依存する Java コードには、特別な注意が必要です。\n"
"ネイティブ実行可能ファイルをテストする場合は、 `--enable-preview` フラグを Surefire プラグインに渡す必要があります。\n"
"その方法の 1 つとして、 `<argLine>--enable-preview</argLine>` をその `configuration` セクションに追加することが挙げられます。"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Excluding tests when running as a native executable"
msgstr "ネイティブ実行可能ファイルとして実行している場合のテストの除外"

#: _guides/building-native-image.adoc
msgid ""
"When running tests this way, the only things that actually run natively are your application endpoints, which\n"
"you can only test via HTTP calls. Your test code does not actually run natively, so if you are testing code\n"
"that does not call your HTTP endpoints, it's probably not a good idea to run them as part of native tests."
msgstr "この方法でテストを実行する場合、実際にネイティブで実行されるのはアプリケーションのエンドポイントのみで、HTTP 呼び出しでしかテストできません。テストコードは実際にはネイティブには実行されないので、HTTP エンドポイントを呼び出さないコードをテストしている場合は、それらをネイティブテストの一部として実行するのは良い考えではないでしょう。"

#: _guides/building-native-image.adoc
msgid ""
"If you share your test class between JVM and native executions like we advise above, you can mark certain tests\n"
"with the `@DisabledOnIntegrationTest` annotation in order to skip them when testing against a native image."
msgstr "上記のようにJVMとネイティブ実行でテストクラスを共有している場合、特定のテストをネイティブイメージに対してテストをするときに、 `@DisabledOnNativeImage` アノテーションを付けてそれらをスキップできます。"

#: _guides/building-native-image.adoc
msgid ""
"Using `@DisabledOnIntegrationTest` will also disable the test in all integration test instances, including\n"
"testing the application in JVM mode, in a container image, and native image."
msgstr "`@DisabledOnIntegrationTest` を使用すると、JVM モード、コンテナーイメージ、ネイティブイメージでのアプリケーションのテストを含む、すべての統合テストインスタンスでのテストも無効になります。"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Testing an existing native executable"
msgstr "既存のネイティブ実行可能ファイルのテスト"

#: _guides/building-native-image.adoc
msgid ""
"It is also possible to re-run the tests against a native executable that has already been built. To do this run\n"
"`./mvnw test-compile failsafe:integration-test -Dnative`. This will discover the existing native image and run the tests against it using failsafe."
msgstr ""
"すでにビルドされているネイティブ実行可能ファイルに対してテストを再実行することも可能です。\n"
"その場合は `./mvnw test-compile failsafe:integration-test` を実行します。これにより、既存のネイティブイメージが検出され、フェイルセーフを使用してそれに対してテストが実行されます。"

#: _guides/building-native-image.adoc
msgid ""
"If the process cannot find the native image for some reason, or you want to test a native image that is no longer in the\n"
"target directory you can specify the executable with the `-Dnative.image.path=` system property."
msgstr "何らかの理由でプロセスがネイティブイメージを見つけられない場合や、ターゲットディレクトリーにないネイティブイメージをテストしたい場合は、 `-Dnative.image.path=` システムプロパティーで実行ファイルを指定することができます。"

#. type: Title ==
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Creating a Linux executable without GraalVM installed"
msgstr "GraalVM をインストールせずに Linux 実行可能ファイルを作成する方法"

#: _guides/building-native-image.adoc
msgid ""
"Before going further, be sure to have a working container runtime (Docker, podman) environment. If you use Docker\n"
"on Windows you should share your project's drive at Docker Desktop file share settings and restart Docker Desktop."
msgstr "先に進む前に、コンテナーランタイム(Docker、podman)の動作環境が整っていることを確認しておきましょう。WindowsでDockerを使用している場合は、Docker Desktopのファイル共有設定でプロジェクトのドライブを共有し、Docker Desktopを再起動する必要があります。"

#: _guides/building-native-image.adoc
msgid ""
"Quite often one only needs to create a native Linux executable for their Quarkus application (for example in order to run in a containerized environment) and would like to avoid\n"
"the trouble of installing the proper GraalVM version in order to accomplish this task (for example, in CI environments it's common practice\n"
"to install as little software as possible)."
msgstr "多くの場合、Quarkusアプリケーション用のネイティブLinux実行ファイルを作成する必要があります(例えば、コンテナー化された環境で実行するためなど)、このタスクを達成するために適切なGraalVMバージョンをインストールする手間を省きたいと考えています(例えば、CI環境では、できるだけ少ないソフトウェアをインストールするのが一般的です)。"

#: _guides/building-native-image.adoc
msgid ""
"To this end, Quarkus provides a very convenient way of creating a native Linux executable by leveraging a container runtime such as Docker or podman.\n"
"The easiest way of accomplishing this task is to execute:"
msgstr "このため、Quarkusでは、Dockerやpodmanなどのコンテナーランタイムを利用して、ネイティブのLinux実行ファイルを作成する非常に便利な方法を提供しています。このタスクを達成する最も簡単な方法は、次を実行することです:"

#: _guides/building-native-image.adoc
msgid ""
"By default, Quarkus automatically detects the container runtime.\n"
"If you want to explicitly select the container runtime, you can do it with:"
msgstr ""
"デフォルトでは、Quarkus はコンテナーランタイムを自動的に検出します。\n"
"コンテナーランタイムを明示的に選択したい場合は、次のようにします:"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "For Docker:"
msgstr "Docker の場合:"

#: _guides/building-native-image.adoc
msgid "CLI"
msgstr "CLI"

#: _guides/building-native-image.adoc
msgid "Maven"
msgstr "Maven"

#: _guides/building-native-image.adoc
msgid "Gradle"
msgstr "Gradle"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "For podman:"
msgstr "podman の場合:"

#: _guides/building-native-image.adoc
msgid ""
"These are regular Quarkus config properties, so if you always want to build in a container\n"
"it is recommended you add these to your `application.properties` in order to avoid specifying them every time."
msgstr ""
"これらは通常の Quarkus 設定プロパティーであるため、常にコンテナーでビルドしたい場合は、\n"
"毎回指定しなくて済むように `application.properties` に追加することが推奨されます。"

#: _guides/building-native-image.adoc
msgid "Executable built that way with the container runtime will be a 64-bit Linux executable, so depending on your operating system it may no longer be runnable."
msgstr "コンテナ・ランタイムを使用してこの方法でビルドされた実行可能ファイルは、64ビットLinux実行可能ファイルとなるため、オペレーティング・システムによっては実行できなくなる可能性があります。"

#: _guides/building-native-image.adoc
msgid ""
"Starting with Quarkus 3.19+, the _builder_ image used to build the native executable is based on UBI 9.\n"
"It means that the native executable produced by the container build will be based on UBI 9 as well.\n"
"So, if you plan to build a container, make sure that the base image in your `Dockerfile` is compatible with UBI 9.\n"
"The native executable will not run on UBI 8 base images."
msgstr "Quarkus 3.19以降では、ネイティブ実行可能ファイルのビルドに使用される _ビルダー_ イメージはUBI 9に基づいています。つまり、コンテナのビルドによって生成されるネイティブ実行可能ファイルもUBI 9に基づいています。したがって、コンテナのビルドを計画している場合は、 `Dockerfile` のベースイメージが UBI 9 と互換性があることを確認してください。ネイティブ実行可能ファイルはUBI 8ベースイメージでは実行できません。"

#: _guides/building-native-image.adoc
msgid ""
"You can configure the builder image used for the container build by setting the `quarkus.native.builder-image` property.\n"
"For example to switch back to an UBI8 _builder image_ you can use:"
msgstr "`quarkus.native.builder-image` プロパティを設定することで、コンテナのビルドに使用するビルダー・イメージを設定できます。例えば、UBI8 _ビルダーイメージ_ に切り替えるには、次のようにします："

#: _guides/building-native-image.adoc
msgid "`quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}`"
msgstr "`quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}`"

#: _guides/building-native-image.adoc
msgid ""
"You can see the available tags for UBI8 https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[here]\n"
"and for UBI9 https://quay.io/repository/quarkus/ubi9-quarkus-mandrel-builder-image?tab=tags[here (UBI 9)])"
msgstr "UBI8で使用可能なタグは link:https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[こちら] 、UBI9で使用可能なタグは link:https://quay.io/repository/quarkus/ubi9-quarkus-mandrel-builder-image?tab=tags[こちら(UBI 9)] )"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "If you see the following invalid path error for your application JAR when trying to create a native executable using a container build, even though your JAR was built successfully, you're most likely using a remote daemon for your container runtime."
msgstr "JARが正常にビルドされているにもかかわらず、コンテナービルドでネイティブ実行可能ファイルを作成しようとすると、アプリケーションJARに対して以下のようなinvalid pathエラーが表示される場合は、コンテナーランタイムにリモートデーモンを使用している可能性があります。"

#: _guides/building-native-image.adoc
msgid ""
"Error: Invalid Path entry getting-started-1.0.0-SNAPSHOT-runner.jar\n"
"Caused by: java.nio.file.NoSuchFileException: /project/getting-started-1.0.0-SNAPSHOT-runner.jar"
msgstr ""
"Error: Invalid Path entry getting-started-1.0.0-SNAPSHOT-runner.jar\n"
"Caused by: java.nio.file.NoSuchFileException: /project/getting-started-1.0.0-SNAPSHOT-runner.jar"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "In this case, use the parameter `-Dquarkus.native.remote-container-build=true` instead of `-Dquarkus.native.container-build=true`."
msgstr "この場合、パラメータ `-Dquarkus.native.container-build=true` の代わりに `-Dquarkus.native.remote-container-build=true` を使用してください。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "The reason for this is that the local build driver invoked through `-Dquarkus.native.container-build=true` uses volume mounts to make the JAR available in the build container, but volume mounts do not work with remote daemons. The remote container build driver copies the necessary files instead of mounting them. Note that even though the remote driver also works with local daemons, the local driver should be preferred in the local case because mounting is usually more performant than copying."
msgstr "その理由は、 `-Dquarkus.native.container-build=true` を通して起動されるローカルビルドドライバは、ビルドコンテナーで JAR を利用できるようにするためにボリュームマウントを使用しますが、ボリュームマウントはリモートデーモンでは機能しません。リモートコンテナーのビルドドライバは、必要なファイルをマウントするのではなく、コピーします。リモートドライバはローカルデーモンでも動作しますが、ローカルの場合はローカルドライバを使用した方が良いことに注意してください。なぜなら、マウントの方がコピーよりもパフォーマンスが高いからです。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Building with GraalVM instead of Mandrel requires a custom builder image parameter to be passed additionally:"
msgstr "Mandrel の代わりに GraalVM を使用してビルドする場合は、カスタムビルダーイメージパラメーターを追加で渡す必要があります。"

#: _guides/building-native-image.adoc
msgid ""
"Please note that the above command points to a floating tag.\n"
"It is highly recommended to use the floating tag,\n"
"so that your builder image remains up-to-date and secure.\n"
"If you absolutely must, you may hard-code to a specific tag\n"
"(see https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[here (UBI 8)]\n"
"and  https://quay.io/repository/quarkus/ubi9-quarkus-mandrel-builder-image?tab=tags[here (UBI 9)] for available tags),\n"
"but be aware that you won't get security updates that way and it's unsupported."
msgstr ""
"上記のコマンドはフローティング・タグを指すことに注意してください。\n"
"ビルダーイメージを最新かつ安全に保つために、フローティングタグを使用することを強く推奨します。\n"
"どうしても必要な場合は、特定のタグにハードコードすることもできます（利用可能なタグについては link:https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[ここ（UBI 8] ）と link:https://quay.io/repository/quarkus/ubi9-quarkus-mandrel-builder-image?tab=tags[ここ（UBI 9）] を参照してください）が、その方法ではセキュリティアップデートを受けることができず、サポートされていないことに注意してください。"

#. type: Title ==
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Creating a container"
msgstr "コンテナーの作成"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Using the container-image extensions"
msgstr "コンテナーイメージのエクステンションの使用"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "By far the easiest way to create a container-image from your Quarkus application is to leverage one of the container-image extensions."
msgstr "Quarkusアプリケーションからコンテナーイメージを作成する最も簡単な方法は、コンテナーイメージ エクステンションの1つを利用することです。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "If one of those extensions is present, then creating a container image for the native executable is essentially a matter of executing a single command:"
msgstr "これらのエクステンションのいずれかが存在する場合、ネイティブ実行可能ファイル用のコンテナーイメージを作成することは、基本的には単一のコマンドを実行することになります:"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "`quarkus.native.container-build=true` allows for creating a Linux executable without GraalVM being installed (and is only necessary if you don't have GraalVM installed locally or your local operating system is not Linux)"
msgstr "`quarkus.native.container-build=true` では GraalVM がインストールされていなくても Linux の実行可能ファイルを作成することができます(ローカルに GraalVM がインストールされていない場合や、ローカルのオペレーティングシステムが Linux ではない場合にのみ必要です)。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "If you're running a remote Docker daemon, you need to replace `quarkus.native.container-build=true` with `quarkus.native.remote-container-build=true`."
msgstr "リモートDockerデーモンを実行している場合、 `-Dquarkus.native.container-build=true` を `-Dquarkus.native.remote-container-build=true` で置換する必要があります。"

#: _guides/building-native-image.adoc
msgid "See <<tip-quarkus-native-remote-container-build,Creating a Linux executable without GraalVM installed>> for more details."
msgstr "詳細は、<<tip-quarkus-native-remote-container-build,Creating a Linux executable without GraalVM installed>> を参照してください。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "`quarkus.container-image.build=true` instructs Quarkus to create a container-image using the final application artifact (which is the native executable in this case)"
msgstr "`quarkus.container-image.build=true` 最終的なアプリケーションアーティファクト(この場合はネイティブ実行可能ファイル)を使用してコンテナーイメージを作成するようにQuarkusに指示します。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "See the xref:container-image.adoc[Container Image guide] for more details."
msgstr "詳細については、 xref:container-image.adoc[コンテナーイメージガイド] を参照してください。"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Manually using the micro base image"
msgstr "マイクロベースイメージを手動で使用する方法"

#: _guides/building-native-image.adoc
msgid ""
"You can run the application in a container using the JAR produced by the Quarkus Maven Plugin.\n"
"However, in this section we focus on creating a container image using the produced native executable."
msgstr "Quarkus Mavenプラグインで生成されたJARを使用して、コンテナー内でアプリケーションを実行することができます。ただし、このセクションでは、生成されたネイティブ実行可能ファイルを使用してコンテナーイメージを作成することに焦点を当てます。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "image:containerization-process.png[Containerization Process]"
msgstr "image:containerization-process.png[alt=\"Containerization Process\"]"

#: _guides/building-native-image.adoc
msgid ""
"When using a local GraalVM installation, the native executable targets your local operating system (Linux, macOS, Windows etc).\n"
"However, as a container may not use the same _executable_ format as the one produced by your operating system,\n"
"we will instruct the Maven build to produce an executable by leveraging a container runtime (as described in <<#container-runtime,this section>>):"
msgstr ""
"ローカルの GraalVM インストール環境を使用する場合、ネイティブ実行可能ファイルは、ローカルのオペレーティングシステム (Linux、macOS、Windows など) をターゲットにします。\n"
"しかし、コンテナーはオペレーティングシステムによって生成されたものと同じ _実行可能ファイル_ 形式を使用しない場合があるため、\n"
"(<<#container-runtime,this section>> セクションで説明されているように) コンテナーランタイムを活用して実行可能ファイルを生成するように Maven ビルドに指示します。"

#: _guides/building-native-image.adoc
msgid ""
"The produced executable will be a 64-bit Linux executable, so depending on your operating system it may no longer be runnable.\n"
"However, it's not an issue as we are going to copy it to a container.\n"
"The project generation has provided a `Dockerfile.native-micro` in the `src/main/docker` directory with the following content:"
msgstr "生成される実行ファイルは 64 ビットの Linux 実行ファイルになるので、お使いの OS によっては実行できなくなる可能性があります。しかし、コンテナーにコピーするので問題ありません。プロジェクト生成では、 `src/main/docker` ディレクトリに `Dockerfile.native-micro` を用意し、以下のような内容にしています:"

#. type: Block title
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Quarkus Micro Image?"
msgstr "Quarkus マイクロイメージとは？"

#: _guides/building-native-image.adoc
msgid ""
"The Quarkus Micro Image is a small container image providing the right set of dependencies to run your native application.\n"
"It is based on https://catalog.redhat.com/software/containers/ubi9-micro/61832b36dd607bfc82e66399?container-tabs=overview[UBI Micro].\n"
"This base image has been tailored to work perfectly in containers."
msgstr ""
"Quarkus Micro Imageは、ネイティブアプリケーションを実行するための依存関係を提供する小さなコンテナイメージです。 \n"
"link:https://catalog.redhat.com/software/containers/ubi9-micro/61832b36dd607bfc82e66399?container-tabs=overview[UBI Micro] がベースになっています。\n"
"このベースイメージは、コンテナで完全に動作するように調整されています。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "You can read more about UBI images on:"
msgstr "UBI イメージの詳細については、以下をご覧ください:"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image[Introduction to Universal Base Image]"
msgstr "https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image[Introduction to Universal Base Image]"

#: _guides/building-native-image.adoc
msgid "https://catalog.redhat.com/software/containers/ubi9/ubi/615bcf606feffc5384e8452e[Red Hat Universal Base Image 9]"
msgstr "https://catalog.redhat.com/software/containers/ubi9/ubi/615bcf606feffc5384e8452e[Red Hat Universal Base Image 9]"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "UBI images can be used without any limitations."
msgstr "UBI イメージは制限なく使用できます。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "xref:quarkus-runtime-base-image.adoc[This page] explains how to extend the `quarkus-micro` image when your application has specific requirements."
msgstr "xref:quarkus-runtime-base-image.adoc[このページ] では、アプリケーションに特定の要件がある場合に、 `quarkus-micro` イメージを拡張する方法について説明しています。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Then, if you didn't delete the generated native executable, you can build the docker image with:"
msgstr "あとは、生成されたネイティブ実行可能ファイルを削除していなければ、dockerイメージを使ってビルドします:"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "And finally, run it with:"
msgstr "そして最後に、以下を実行します:"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Manually using the minimal base image"
msgstr "最小限のベースイメージを手動で使用する方法"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "The project generation has also provided a `Dockerfile.native` in the `src/main/docker` directory with the following content:"
msgstr "プロジェクト生成では、以下の内容の `src/main/docker docker` ディレクトリも提供されます:"

#: _guides/building-native-image.adoc
msgid ""
"The UBI minimal image is bigger than the micro one mentioned above.\n"
"It contains more utilities such as the `microdnf` package manager."
msgstr "UBI の最小イメージは、上記のマイクロイメージよりも大きくなっています。これには、 `microdnf` パッケージマネージャーなどのユーティリティーが含まれています。"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Using a multi-stage Docker build"
msgstr "マルチステージDockerビルドの使用"

#: _guides/building-native-image.adoc
msgid ""
"The previous section showed you how to build a native executable using Maven or Gradle, but it requires you to have created the native executable first.\n"
"In addition, this native executable must be a Linux 64 bits executable."
msgstr "前のセクションでは、Maven または Gradle を使用してネイティブ実行可能ファイルをビルドする方法を示しましたが、その場合は最初にネイティブ実行可能ファイルを作成しておく必要があります。さらに、このネイティブ実行可能ファイルは Linux64 ビットの実行可能ファイルである必要があります。"

#: _guides/building-native-image.adoc
msgid ""
"You may want to build the native executable directly in a container without having a final container containing the build tools.\n"
"That approach is possible with a multi-stage Docker build:"
msgstr "ビルドツールを含む最終的なコンテナーを用意せずに、ネイティブ実行可能ファイルをコンテナーに直接ビルドする必要がある場合もあるはずです。このアプローチは、マルチステージの Docker ビルドで使用可能です:"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "The first stage builds the native executable using Maven or Gradle"
msgstr "最初の段階では、Maven または Gradle を使用してネイティブ実行可能ファイルをビルドします"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "The second stage is a minimal image copying the produced native executable"
msgstr "第 2 段階は、生成されたネイティブ実行可能ファイルをコピーする最小限のイメージです"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "Before building a container image from the Dockerfiles shown below, you need to update the default `.dockerignore` file, as it filters everything except the `target` directory. In order to build inside a container, you need to copy the `src` directory. Thus, edit your `.dockerignore` and remove the `*` line."
msgstr "以下のDockerファイルからコンテナーイメージをビルドする前に、デフォルトの `.dockerignore` ファイルを更新する必要があります。これは、 `target` ディレクトリ以のすべてがフィルタリングされるためです。コンテナー内でビルドするため、 `src` ディレクトリをコピーする必要があります。そのために、 `.dockerignore` を編集し、その内容を更新し、 `*` の行を削除します。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Such a multi-stage build can be achieved as follows:"
msgstr "このような多段階を用いたビルドは、次のように実現できます:"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Sample Dockerfile for building with Maven:"
msgstr "MavenでビルドするためのサンプルDockerfileです:"

#: _guides/building-native-image.adoc
msgid ""
"This multi-stage Docker build copies the Maven wrapper from the host machine.\n"
"The Maven wrapper (or the Gradle wrapper) is a convenient way to provide a specific version of Maven/Gradle.\n"
"It avoids having to create a base image with Maven and Gradle.\n"
"To provision the Maven Wrapper in your project, use: `mvn wrapper:wrapper`."
msgstr ""
"このマルチステージ Docker ビルドは、ホストマシンから Maven ラッパーをコピーします。\n"
"Maven ラッパー (または Gradle ラッパー) は、特定のバージョンの Maven/Gradle を提供するための便利な方法です。\n"
"これにより、Maven と Gradle を使用してベースイメージを作成する必要がなくなります。\n"
"プロジェクトで Maven ラッパーをプロビジョニングするには、 `mvn wrapper:wrapper` を使用します。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Save this file in `src/main/docker/Dockerfile.multistage` as it is not included in the getting started quickstart."
msgstr "このファイルは、Getting started quickstartには含まれていないので、 `src/main/docker/Dockerfile.multistage` に保存してください。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Sample Dockerfile for building with Gradle:"
msgstr "GradleでビルドするためのサンプルDockerfileです:"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "If you are using Gradle in your project, you can use this sample Dockerfile.  Save it in `src/main/docker/Dockerfile.multistage`."
msgstr "プロジェクトでGradleを使用している場合は、このサンプルDockerfileを使用することができます。 `src/main/docker/Dockerfile.multistage`  に保存してください。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "And, finally, run it with:"
msgstr "最後に、以下を実行します:"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "If you need SSL support in your native executable, you can easily include the necessary libraries in your Docker image."
msgstr "ネイティブ実行可能ファイルにSSLサポートが必要な場合は、Dockerイメージに必要なライブラリを簡単に含めることができます。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "Please see xref:native-and-ssl.adoc#working-with-containers[our Using SSL With Native Executables guide] for more information."
msgstr "詳しくは xref:native-and-ssl.adoc#working-with-containers[ネイティブ実行可能ファイルでのSSL利用ガイド] を参照してください。"

#: _guides/building-native-image.adoc
msgid "To use GraalVM CE instead of Mandrel, update the `FROM` clause to: `FROM quay.io/quarkus/ubi9-quarkus-graalvmce-builder-image:{graalvm-flavor} AS build`."
msgstr "Mandrel の代わりに GraalVM CE を使用するには、 `FROM` 節を更新してください： `FROM quay.io/quarkus/ubi9-quarkus-graalvmce-builder-image:{graalvm-flavor} AS build` ."

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Using a Distroless base image"
msgstr "Distroless ベースイメージの使用"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Distroless image support is experimental."
msgstr "Distroless イメージのサポートは実験的なものです。"

#: _guides/building-native-image.adoc
msgid ""
"If you are looking for small container images, the https://github.com/GoogleContainerTools/distroless[distroless] approach reduces the size of the base layer.\n"
"The idea behind _distroless_ is the usage of a single and minimal base image containing all the requirements, and sometimes even the application itself."
msgstr "小さなコンテナーイメージを探している場合は、 https://github.com/GoogleContainerTools/distroless[distroless] アプローチでベースレイヤーのサイズが縮小されます。 _distroless_ の背後には、すべての要件 (場合によってはアプリケーション自体) を含む単一の最小限のベースイメージを使用するという考え方があります。"

#: _guides/building-native-image.adoc
msgid ""
"Quarkus provides a distroless base image that you can use in your `Dockerfile`.\n"
"You only need to copy your application, and you are done:"
msgstr "Quarkus は、 `Dockerfile` で使用できる distroless ベースイメージを提供します。ユーザーは、アプリケーションをコピーするだけです:"

#: _guides/building-native-image.adoc
msgid ""
"Quarkus provides the `quay.io/quarkus/quarkus-distroless-image:2.0` image.\n"
"It contains the required packages to run a native executable and is only **9Mb**.\n"
"Just add your application on top of this image, and you will get a tiny container image."
msgstr "Quarkus は、 `quay.io/quarkus/quarkus-distroless-image:2.0` イメージを提供します。ネイティブ実行可能ファイルを実行するために必要なパッケージが含まれており、サイズはほんの **9Mb** です。このイメージの上にアプリケーションを追加するだけで、小さなコンテナーイメージを得られます。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Distroless images should not be used in production without rigorous testing."
msgstr "Distroless イメージを本番環境で使用する場合は、必ず厳密なテストを実施してください。"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Build a container image from scratch"
msgstr "コンテナーイメージをゼロから構築する"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Scratch image support is experimental."
msgstr "スクラッチベースイメージのサポートは実験的なものです。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Building fully statically linked binaries enables the usage of a https://hub.docker.com/_/scratch[scratch image] containing solely the resulting native executable."
msgstr "完全に静的にリンクされたバイナリをビルドすることで、ビルド結果のネイティブ実行可能ファイルのみを含む https://hub.docker.com/_/scratch[スクラッチイメージ] を使用することができます。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Sample multistage Dockerfile for building an image from `scratch`:"
msgstr "`Scratch` からイメージを構築するためのサンプルのマルチステージのDockerfileです:"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Scratch images should not be used in production without rigorous testing."
msgstr "スクラッチイメージを本番環境で使用する場合は、必ず厳密なテストを実施してください。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "The versions of musl and zlib may need to be updated to meet the native-image executable requirements (and UPX if you use native image compression)."
msgstr "ネイティブイメージの実行可能ファイルの要件に合わせて、muslとzlibのバージョンを更新する必要があるかもしれません（ネイティブイメージ圧縮を使用する場合はUPXも）。"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Compress native images"
msgstr "ネイティブイメージの圧縮"

#: _guides/building-native-image.adoc
msgid ""
"Quarkus can compress the produced native executable using UPX.\n"
"More details on xref:./upx.adoc[UPX Compression documentation]."
msgstr "Quarkus は、UPX を使用して生成されたネイティブ実行可能ファイルを圧縮できます。詳細については、xref:./upx.adoc[UPX 圧縮のドキュメント] を参照してください。"

#. type: Title ===
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Separating Java and native image compilation"
msgstr "Java とネイティブイメージのコンパイルの分離"

#: _guides/building-native-image.adoc
msgid ""
"In certain circumstances, you may want to build the native image in a separate step.\n"
"For example, in a CI/CD pipeline, you may want to have one step to generate the source that will be used for the native image generation and another step to use these sources to actually build the native executable.\n"
"For this use case, you can set the additional flag `quarkus.native.sources-only=true`.\n"
"This will execute the java compilation as if you had started native compilation (`-Dnative`), but stops before triggering the actual call to GraalVM's `native-image`."
msgstr ""
"特定の状況では、別のステップでネイティブイメージをビルドする必要がある場合もあります。\n"
"たとえば、CI/CD パイプラインで、ネイティブイメージの生成に使用するソースを生成するステップと、これらのソースを使用して実際にネイティブ実行可能ファイルをビルドするステップを分けたい場合などです。\n"
"このようなユースケースでは、追加フラグとして `quarkus.native.sources-only=true` を設定できます。\n"
"そうすることで、ネイティブコンパイル (`-Dnative`) を開始するように Java コンパイルを実行できますが、GraalVM の `native-image` の実際の呼び出しをトリガーする前に停止します。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "After compilation has finished, you find the build artifact in `target/native-sources`:"
msgstr "コンパイルが完了すると、ビルドアーティファクトが `target/native-sources` に表示されます:"

#: _guides/building-native-image.adoc
msgid ""
"From the output above one can see that, in addition to the produced jar file and the associated lib directory, a text file named `native-image.args` was created.\n"
"This file holds all parameters (including the name of the JAR to compile) to pass along to GraalVM's `native-image` command.\n"
"A text file named `graalvm.version` was also created and holds the GraalVM version that should be used.\n"
"If you have GraalVM installed and it matches this version, you can start the native compilation by executing:"
msgstr ""
"上記の出力から、生成された jar ファイルと関連する lib ディレクトリーに加えて、 `native-image.args` という名前のテキストファイルが作成されたことがわかります。\n"
"このファイルには、GraalVM の `native-image` コマンドに渡すすべてのパラメーター (コンパイルする JAR の名前を含む) が保持されます。\n"
"`graalvm.version` という名前のテキストファイルも作成され、使用する GraalVM のバージョンが保持されます。\n"
"GraalVM がインストールされていて、このバージョンと一致する場合は、次のコマンドを実行してネイティブコンパイルを開始できます。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "The process for Gradle is analogous."
msgstr "Gradle のプロセスも同様です。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Running the build process in a container is also possible:"
msgstr "コンテナーでビルドプロセスを実行することも可能です:"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "`-Dquarkus.native.container-build=true` will produce an additional text file named `native-builder.image` holding the docker image name to be used to build the native image."
msgstr "`-Dquarkus.native.container-build=true` は、ネイティブイメージのビルドに使用するDockerイメージ名を保持する `native-builder.image` という名前の追加のテキストファイルを生成します。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Mount the host's directory `target/native-image` to the container's `/work`. Thus, the generated binary will also be written to this directory."
msgstr "ホストのディレクトリ `target/native-image` をコンテナーの `/work` にマウントします。したがって、生成されたバイナリーもこのディレクトリに書き込まれます。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Switch the working directory to `/work`, which we have mounted in <1>."
msgstr "作業ディレクトリーを、<1> でマウントした `/work` に切り替えます。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Use the docker image from the file `native-builder.image`."
msgstr "ファイル `native-builder.image` からDocker イメージを使用します。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Call `native-image` with the content of file `native-image.args` as arguments. We also supply an additional argument to limit the process's maximum memory to 4 Gigabytes (this may vary depending on the project being built and the machine building it)."
msgstr "ファイル `native-image.args` の内容を引数として `native-image` を呼び出します。また、プロセスの最大メモリーを 4 ギガバイトに制限するための追加の引数も提供します (これは、ビルドするプロジェクトとそれをビルドしているマシンにより異なります)。"

#: _guides/building-native-image.adoc
msgid ""
"If you are running on a Windows machine, please keep in mind that the binary was created within a Linux docker container.\n"
"Hence, the binary will not be executable on the host Windows machine."
msgstr "Windows マシンで実行している場合は、バイナリーが Linux docker コンテナー内で作成されていることに注意してください。つまり、バイナリーはホスト Windows マシンでは実行できません。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "A high level overview of what the various steps of a CI/CD pipeline would look is the following:"
msgstr "CI/CD パイプラインのさまざまなステップがどのように見えるかについて、以下に概要を示しています。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Register the output of the step executing `./mvnw ...` command (i.e. directory `target/native-image`) as a build artifact,"
msgstr "`./mvnw ...` コマンドを実行するステップの出力 (つまり、ディレクトリ `target/native-image`) をビルドアーティファクトとして登録します。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Require this artifact in the step executing the `native-image ...` command, and"
msgstr "`native-image ...` コマンドを実行するステップでこのアーティファクトを要求し、"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Register the output of the step executing the `native-image ...` command (i.e. files matching `target/*runner`) as build artifact."
msgstr "`native-image ...` コマンドを実行するステップの出力 (つまり、 `target/*runner` に一致するファイル) をビルドアーティファクトとして登録します。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "The environment executing step `1` only needs Java and Maven (or Gradle) installed, while the environment executing step `3` only needs a GraalVM installation (including the `native-image` feature)."
msgstr "ステップ `1` を実行する環境には、Java と Maven (または Gradle) のみインストールされている必要がありますが、ステップ `3` を実行する環境には GraalVM のインストール (`native-image` 機能を含む) のみが必要です。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Depending on what the final desired output of the CI/CD pipeline is, the generated binary might then be used to create a container image."
msgstr "CI/CD パイプラインの最終的な出力に応じて、生成されたバイナリーがコンテナーイメージの作成に使用されます。"

#: _guides/building-native-image.adoc
msgid ""
"Native executables can be debugged using tools such as `gdb`.\n"
"For this to be possible native executables need to be generated with debug symbols."
msgstr ""
"ネイティブ実行可能ファイルは、 `gdb` などのツールを使用してデバッグできます。\n"
"これを可能にするには、ネイティブ実行可能ファイルをデバッグシンボルとともに生成する必要があります。"

#: _guides/building-native-image.adoc
msgid ""
"Debug symbol generation is only supported on Linux.\n"
"Windows support is still under development, while macOS is not supported."
msgstr ""
"デバッグシンボルの生成は Linux でのみサポートされています。\n"
"windows は開発中です。macOS はサポートされていません。"

#: _guides/building-native-image.adoc
msgid ""
"To generate debug symbols,\n"
"add `-Dquarkus.native.debug.enabled=true` flag when generating the native executable.\n"
"You will find the debug symbols for the native executable in a `.debug` file next to the native executable."
msgstr "デバッグシンボルを生成するには、ネイティブ実行可能ファイルの生成時に `-Dquarkus.native.debug.enabled=true` フラグを追加してください。ネイティブ実行可能ファイルのデバッグシンボルは、ネイティブ実行可能ファイルの隣にある `.debug` ファイルにあります。"

#: _guides/building-native-image.adoc
msgid ""
"The generation of the `.debug` file depends on `objcopy`.\n"
"As a result, when using a local GraalVM installation on common Linux distributions you will need to install the `binutils` package:"
msgstr ""
"`.debug` ファイルの生成は `objcopy` に依存します。\n"
"その結果、一般的な Linux ディストリビューションでローカル GraalVM インストールを使用する場合は、 `binutils` パッケージをインストールする必要があります。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "When `objcopy` is not available debug symbols are embedded in the executable."
msgstr "`objcopy` が利用できない場合、デバッグシンボルが実行可能ファイルに埋め込まれています。"

#: _guides/building-native-image.adoc
msgid ""
"Aside from debug symbols,\n"
"setting `-Dquarkus.native.debug.enabled=true` flag generates a cache of source files\n"
"for any JDK runtime classes, GraalVM classes and application classes resolved during native executable generation.\n"
"This source cache is useful for native debugging tools,\n"
"to establish the link between the symbols and matching source code.\n"
"It provides a convenient way of making just the necessary sources available to the debugger/IDE when debugging a native executable."
msgstr "デバッグシンボルとは別に、 `-Dquarkus.native.debug.enabled=true` フラグを設定すると、ネイティブ実行可能ファイル生成時に解決された JDK ランタイムクラス、GraalVM クラス、アプリケーションクラスのソースファイルのキャッシュが生成されます。このソースキャッシュは、シンボルと一致するソースコード間のリンクを確立するために、ネイティブデバッグツールにとって有用です。ネイティブ実行可能ファイルをデバッグする際に、必要なソースだけをデバッガー/IDEが利用できるようにする便利な方法を提供します。"

#: _guides/building-native-image.adoc
msgid ""
"Sources for third party jar dependencies, including Quarkus source code,\n"
"are not added to the source cache by default.\n"
"To include those, make sure you invoke `mvn dependency:sources` first.\n"
"This step is required in order to pull the sources for these dependencies,\n"
"and get them included in the source cache."
msgstr "Quarkusのソースコードを含むサードパーティのjar依存関係のソースは、デフォルトではソースキャッシュに追加されません。これらを含めるには、まず `mvn dependency:sources` を起動してください。このステップは、これらの依存関係のソースを引き出し、ソースキャッシュに含めるために必要です。"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "The source cache is located in the `target/sources` folder."
msgstr "ソースキャッシュは `target/sources` フォルダーにあります。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "If running `gdb` from a different directory than `target`, then the sources can be loaded by running:"
msgstr "`gdb` を `target` とは異なるディレクトリから実行している場合、ソースは以下を"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "in the `gdb` prompt."
msgstr "`gdb` プロンプトで実行することで読み込まれます。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Or start `gdb` with:"
msgstr "または、 `gdb` を以下のように起動してください:"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "e.g.,"
msgstr "例えば、"

#. type: delimited block =
#: _guides/building-native-image.adoc
msgid "For a more detailed guide about debugging native images please refer to the xref:native-reference.adoc[Native Reference Guide]."
msgstr "ネイティブイメージのデバッグに関する詳細なガイドについては、xref:native-reference.adoc[ネイティブリファレンスガイド] を参照してください。"

#. type: Title ==
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Using Monitoring Options"
msgstr "監視オプションの使用"

#: _guides/building-native-image.adoc
msgid ""
"Monitoring options such as JDK flight recorder, jvmstat, heap dumps, NMT (starting with Mandrel 24.1 for JDK 23), and remote JMX\n"
"can be added to the native executable build. Simply supply a comma separated list of the monitoring options you wish to\n"
"include at build time."
msgstr ""
"JDK Flight Recorder、jvmstat、ヒープダンプ、NMT (JDK 23 の Mandrel 24.1 以降)、リモート JMX などの監視オプションをネイティブ実行可能ビルドに追加できます。\n"
"ビルド時に追加するには、監視オプションのコンマ区切りリストを提供します。"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Monitoring Option"
msgstr "監視オプション"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Availability As Of"
msgstr "現時点での可用性"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "jfr"
msgstr "jfr"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Include JDK Flight Recorder support"
msgstr "JDK Flight Recorder のサポートを含む"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "GraalVM CE 21.3 Mandrel 21.3"
msgstr "GraalVM CE 21.3 Mandrel 21.3"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "jvmstat"
msgstr "jvmstat"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Adds jvmstat support"
msgstr "jvmstat のサポートを追加"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "GraalVM 22.3, GraalVM CE 17.0.7 Mandrel 22.3 Mandrel 23.0 (17.0.7)"
msgstr "GraalVM 22.3、GraalVM CE 17.0.7 Mandrel 22.3 Mandrel 23.0 (17.0.7)"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "heapdump"
msgstr "heapdump"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Adds support for generating heap dumps"
msgstr "ヒープダンプ生成のサポートを追加"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "jmxclient"
msgstr "jmxclient"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Adds support for connections to JMX servers."
msgstr "JMX サーバーへの接続のサポートを追加"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "GraalVM for JDK 17/20 Mandrel 23.0"
msgstr "GraalVM for JDK 17/20 Mandrel 23.0"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "jmxserver"
msgstr "jmxserver"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Adds support for accepting connections from JMX clients."
msgstr "JMX クライアントからの接続を受け入れるためのサポートを追加"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "GraalVM for JDK 17/20 Mandrel 23.0 (17.0.7)"
msgstr "GraalVM for JDK 17/20 Mandrel 23.0 (17.0.7)"

#: _guides/building-native-image.adoc
msgid "nmt"
msgstr "nmt"

#: _guides/building-native-image.adoc
msgid "Adds support for native memory tracking."
msgstr "ネイティブメモリートラッキングのサポートを追加"

#: _guides/building-native-image.adoc
msgid "GraalVM for JDK 23 Mandrel 24.1"
msgstr "GraalVM for JDK 23 Mandrel 24.1"

#: _guides/building-native-image.adoc
msgid "none"
msgstr "none"

#: _guides/building-native-image.adoc
#, fuzzy
msgid "Disables support for all monitoring options that would be enabled by default in Quarkus"
msgstr "Quarkusのデフォルトで有効になっているすべての監視オプションのサポートを無効にします。"

#: _guides/building-native-image.adoc
#, fuzzy
msgid "Pseudo option used by Quarkus"
msgstr "Quarkusが使用する擬似オプション"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "all"
msgstr "all"

#. type: Table
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Adds all monitoring options."
msgstr "すべての監視オプションを追加"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "Please see the Quarkus Native Reference Guide for more detailed information on these monitoring options."
msgstr "これらの監視オプションの詳細は、Quarkus ネイティブリファレンスガイドを参照してください。"

#. type: Title ==
#: _guides/building-native-image.adoc
#, no-wrap
msgid "Configuring the Native Executable"
msgstr "ネイティブ実行可能ファイルの設定"

#: _guides/building-native-image.adoc
msgid ""
"There are a lot of different configuration options that can affect how the native executable is generated.\n"
"These are provided in `application.properties` the same as any other config property."
msgstr "ネイティブ実行可能ファイルの生成方法に影響を与える設定オプションがたくさんあります。これらは他の設定プロパティーと同じように `application.properties` で提供されています。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "The properties are shown below:"
msgstr "プロパティーは以下の通りです:"

#: _guides/building-native-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> ビルド時に固定された設定プロパティー。その他の設定プロパティーは、すべて実行時にオーバーライド可能です。<input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#. type: Title ==
#: _guides/building-native-image.adoc
#, no-wrap
msgid "What's next?"
msgstr "次のステップ"

#: _guides/building-native-image.adoc
msgid ""
"This guide covered the creation of a native (binary) executable for your application.\n"
"It provides an application exhibiting a swift startup time and consuming less memory.\n"
"However, there is much more."
msgstr ""
"このガイドでは、アプリケーション用のネイティブ (バイナリー) 実行ファイルの作成について説明しました。\n"
"これにより、迅速な起動時間と少ないメモリー消費を示すアプリケーションを提供します。しかし、それだけではありません。"

#. type: Plain text
#: _guides/building-native-image.adoc
msgid "We recommend continuing the journey with the xref:deploying-to-kubernetes.adoc[deployment to Kubernetes and OpenShift]."
msgstr "xref:deploying-to-kubernetes.adoc[Kubernetes と OpenShift へのデプロイメント] で探検を続けることをお勧めします。"
