msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#. type: Title =
#: _guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "OpenID Connect (OIDC) Bearer token authentication"
msgstr "OpenID Connect (OIDC) ベアラートークン認証"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Secure HTTP access to Jakarta REST (formerly known as JAX-RS) endpoints in your application with Bearer token authentication by using the Quarkus OpenID Connect (OIDC) extension."
msgstr "Quarkus OpenID Connect（OIDC）エクステンションを使用することで、ベアラートークン認証を使って、アプリケーション内のJakarta REST（旧称JAX-RS）エンドポイントへのHTTPアクセスを保護できます。"

#. type: Title ==
#: _guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Overview of the Bearer token authentication mechanism in Quarkus"
msgstr "Quarkusのベアラートークン認証メカニズムの概要"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Quarkus supports the Bearer token authentication mechanism through the Quarkus OpenID Connect (OIDC) extension."
msgstr "Quarkusは、Quarkus OpenID Connect（OIDC）エクステンションを通じて、ベアラートークン認証メカニズムをサポートしています。"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The bearer tokens are issued by OIDC and OAuth 2.0 compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr "ベアラートークンは、 link:https://www.keycloak.org[Keycloak] などのOIDCやOAuth2.0に準拠した認可サーバーで発行されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Bearer token authentication is the process of authorizing HTTP requests based on the existence and validity of a bearer token.\n"
"The bearer token provides information about the subject of the call, which is used to determine whether or not an HTTP resource can be accessed."
msgstr ""
"ベアラートークン認証は、ベアラートークンの存在と有効性に基づいて HTTP リクエストを認可するプロセスです。\n"
"ベアラートークンは、呼び出しの主体に関する情報を提供します。この情報は、HTTP リソースにアクセスできるかどうかを判断するために使用されます。"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The following diagrams outline the Bearer token authentication mechanism in Quarkus:"
msgstr "以下の図に、Quarkusのベアラートークン認証メカニズムの概要を示します："

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Bearer token authentication mechanism in Quarkus with single-page application"
msgstr "Quarkus のベアラー認証メカニズムとシングルページアプリケーション"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The Quarkus service retrieves verification keys from the OIDC provider.\n"
"The verification keys are used to verify the bearer access token signatures."
msgstr ""
"Quarkus サービスが、OIDC プロバイダーから検証キーを取得します。\n"
"検証キーは、ベアラーアクセストークンの署名を検証するために使用されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The Quarkus user accesses the single-page application (SPA)."
msgstr "Quarkus ユーザーが、シングルページアプリケーション (SPA) にアクセスします。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The single-page application uses Authorization Code Flow to authenticate the user and retrieve tokens from the OIDC provider."
msgstr "シングルページアプリケーションが、認可コードフローを使用してユーザーを認証し、OIDC プロバイダーからトークンを取得します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The single-page application uses the access token to retrieve the service data from the Quarkus service."
msgstr "シングルページアプリケーションが、アクセストークンを使用して、Quarkus サービスからサービスデータを取得します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The Quarkus service verifies the bearer access token signature by using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the single-page application."
msgstr "Quarkus サービスが、検証キーを使用してベアラーアクセストークンの署名を検証し、トークンの有効期限やその他のクレームをチェックします。トークンが有効であればリクエストの続行を許可し、シングルページアプリケーションにサービスレスポンスを返します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The single-page application returns the same data to the Quarkus user."
msgstr "シングルページアプリケーションが、Quarkus ユーザーに同じデータを返します。"

#. type: Block title
#: _guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Bearer token authentication mechanism in Quarkus with Java or command line client"
msgstr "Quarkus のベアラートークン認証メカニズムとJava またはコマンドラインクライアント"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The client uses `client_credentials` that requires client id and secret or password grant, which requires client id, secret, username, and password to retrieve the access token from the OIDC provider."
msgstr "クライアントが、 `client_credentials` かパスワードグラントを使用して、OIDC プロバイダーからアクセストークンを取得します。client_credentials には、クライアント ID とシークレットが必要です。パスワードグラントには、クライアント ID、シークレット、ユーザー名、およびパスワードが必要です。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The client uses the access token to retrieve the service data from the Quarkus service."
msgstr "クライアントがアクセストークンを使用して、Quarkus サービスからサービスデータを取得します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The Quarkus service verifies the bearer access token signature by using the verification keys, checks the token expiry date and other claims, allows the request to proceed if the token is valid, and returns the service response to the client."
msgstr "Quarkus サービスが、検証キーを使用してベアラーアクセストークンの署名を検証し、トークンの有効期限やその他のクレームをチェックします。トークンが有効であればリクエストの続行を許可し、サービスレスポンスをクライアントに返します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If you need to authenticate and authorize users by using OIDC authorization code flow, see the Quarkus xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow mechanism for protecting web applications] guide.\n"
"Also, if you use Keycloak and bearer tokens, see the Quarkus xref:security-keycloak-authorization.adoc[Using Keycloak to centralize authorization] guide."
msgstr ""
"OIDC 認可コードフローを使用してユーザーを認証および認可する必要がある場合は、Quarkus の xref:security-oidc-code-flow-authentication.adoc[Web アプリケーションを保護するための OpenID Connect 認可コードフローメカニズム] ガイドを参照してください。\n"
"また、Keycloak とベアラートークンを使用する場合は、Quarkus xref:security-keycloak-authorization.adoc[Keycloak を使用した認可の一元化] ガイドを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "To learn about how you can protect service applications by using OIDC Bearer token authentication, see the following tutorial:"
msgstr "OIDC ベアラートークン認証を使用してサービスアプリケーションを保護する方法については、次のチュートリアルを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a service application by using OpenID Connect (OIDC) Bearer token authentication]."
msgstr "xref:security-oidc-bearer-token-authentication-tutorial.adoc[OpenID Connect（OIDC）ベアラートークン認証によるサービスアプリケーションの保護]"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For information about how to support multiple tenants, see the Quarkus xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] guide."
msgstr "マルチテナントをサポートする方法については、Quarkus xref:security-openid-connect-multitenancy.adoc[OpenID Connect マルチテナンシーの使用] ガイドを参照してください。"

#. type: Title ===
#: _guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Accessing JWT claims"
msgstr "JWT クレームへのアクセス"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If you need to access JWT token claims, you can inject `JsonWebToken`:"
msgstr "JWT トークンクレームにアクセスする必要がある場合は、 `JsonWebToken` を注入できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Injection of `JsonWebToken` is supported in `@ApplicationScoped`, `@Singleton`, and `@RequestScoped` scopes.\n"
"However, the use of `@RequestScoped` is required if the individual claims are injected as simple types.\n"
"For more information, see the xref:security-jwt.adoc#supported-injection-scopes[Supported injection scopes] section of the Quarkus \"Using JWT RBAC\" guide."
msgstr ""
"`JsonWebToken` の注入は、 `@ApplicationScoped`、 `@Singleton`、および `@RequestScoped` スコープでサポートされています。\n"
"ただし、個々のクレームが単純型として挿入される場合は、 `@RequestScoped` を使用する必要があります。\n"
"詳細は、Quarkus の「JWT RBAC の使用」ガイドの xref:security-jwt.adoc#supported-injection-scopes[サポートされている注入スコープ] セクションを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "`UserInfo`"
msgstr "`UserInfo`"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If you must request a UserInfo JSON object from the OIDC `UserInfo` endpoint, set `quarkus.oidc.authentication.user-info-required=true`.\n"
"A request is sent to the OIDC provider `UserInfo` endpoint, and an `io.quarkus.oidc.UserInfo` (a simple `javax.json.JsonObject` wrapper) object is created.\n"
"`io.quarkus.oidc.UserInfo` can be injected or accessed as a `SecurityIdentity` `userinfo` attribute."
msgstr ""
"OIDC `UserInfo` エンドポイントから UserInfo JSON オブジェクトをリクエストする必要がある場合は、 `quarkus.oidc.authentication.user-info-required=true` を設定します。\n"
"OIDC プロバイダーの `UserInfo` エンドポイントにリクエストが送信され、 `io.quarkus.oidc.UserInfo` (単純な `javax.json.JsonObject` ラッパー) オブジェクトが作成されます。\n"
"`io.quarkus.oidc.UserInfo` は、 `SecurityIdentity` `userinfo` 属性として注入またはアクセスできます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "`quarkus.oidc.authentication.user-info-required` is automatically enabled if one of these conditions is met:"
msgstr "`quarkus.oidc.authentication.user-info-required` は、次のいずれかの条件が満たされた場合に自動的に有効になります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "if `quarkus.oidc.roles.source` is set to `userinfo` or `quarkus.oidc.token.verify-access-token-with-user-info` is set to `true` or `quarkus.oidc.authentication.id-token-required` is set to `false`, the current OIDC tenant must support a UserInfo endpoint in these cases."
msgstr "`quarkus.oidc.roles.source` が `userinfo` に設定されている場合、または `quarkus.oidc.token.verify-access-token-with-user-info` が `true` に設定されている場合、または `quarkus.oidc.authentication.id-token-required` が `false` に設定されている場合。このような場合、現在の OIDC テナントが UserInfo エンドポイントをサポートしている必要があります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "if `io.quarkus.oidc.UserInfo` injection point is detected but only if the current OIDC tenant supports a UserInfo endpoint."
msgstr "`io.quarkus.oidc.UserInfo` インジェクションポイントが検出された場合。ただし、有効になるのは、現在の OIDC テナントが UserInfo エンドポイントをサポートしている場合だけです。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Configuration metadata"
msgstr "設定メタデータ"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect Configuration Metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr "現在のテナントの検出された link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect 設定メタデータ] は、 `io.quarkus.oidc.OidcConfigurationMetadata` で表され、 `SecurityIdentity` `configuration-metadata` 属性として注入またはアクセスできます。"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr "エンドポイントがパブリックの場合、デフォルトのテナントの `OidcConfigurationMetadata` が注入されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Token claims and SecurityIdentity roles"
msgstr "トークンクレームと SecurityIdentity ロール"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You can map `SecurityIdentity` roles from the verified JWT access tokens as follows:"
msgstr "`SecurityIdentity` ロールは、次のように、検証済みの JWT アクセストークンからマッピングすることができます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If the `quarkus.oidc.roles.role-claim-path` property is set, and matching array or string claims are found, then the roles are extracted from these claims.\n"
"For example, `customroles`, `customroles/array`, `scope`, `\"http://namespace-qualified-custom-claim\"/roles`, `\"http://namespace-qualified-roles\"`."
msgstr ""
"`quarkus.oidc.roles.role-claim-path` プロパティーが設定されており、一致する配列または文字列のクレームが見つかった場合、そのクレームからロールが抽出されます。\n"
"たとえば、 `customroles`、 `customroles/array`、 `scope`、 `\"http://namespace-qualified-custom-claim\"/roles`、 `\"http://namespace-qualified-roles\"` などです。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If a `groups` claim is available, then its value is used."
msgstr "`groups` クレームが利用可能な場合は、その値が使用されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If a `realm_access/roles` or `resource_access/client_id/roles` (where `client_id` is the value of the `quarkus.oidc.client-id` property) claim is available, then its value is used.\n"
"This check supports the tokens issued by Keycloak."
msgstr ""
"`realm_access/roles` または `resource_access/client_id/roles` (`client_id` は `quarkus.oidc.client-id` プロパティーの値) クレームが利用可能な場合は、その値が使用されます。\n"
"このチェックは、Keycloak が発行するトークンをサポートします。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, the following JWT token has a complex `groups` claim that contains a `roles` array that includes roles:"
msgstr "たとえば、次の JWT トークンには、ロールが含まれている `roles` 配列を含む複雑な `groups` クレームがあります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You must map the `microprofile_jwt_user` role to `SecurityIdentity` roles, and you can do so with this configuration: `quarkus.oidc.roles.role-claim-path=groups/roles`."
msgstr "`microprofile_jwt_user` ロールは、 `SecurityIdentity` ロールにマップする必要があります。これは、 `quarkus.oidc.roles.role-claim-path=groups/roles` 設定で実行できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If the token is opaque (binary), then a `scope` property from the remote token introspection response is used."
msgstr "トークンが不透明 (バイナリー) の場合は、リモートトークンイントロスペクションレスポンスの `scope` プロパティーが使用されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If `UserInfo` is the source of the roles, then set `quarkus.oidc.authentication.user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if needed, set `quarkus.oidc.roles.role-claim-path`."
msgstr "`UserInfo` がロールのソースである場合は、 `quarkus.oidc.authentication.user-info-required=true` および `quarkus.oidc.roles.source=userinfo` を設定し、必要に応じて `quarkus.oidc.roles.role-claim-path` を設定します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Additionally, a custom `SecurityIdentityAugmentor` can also be used to add the roles.\n"
"For more information, see the xref:security-customization.adoc#security-identity-customization[Security identity customization] section of the Quarkus \"Security tips and tricks\" guide."
msgstr ""
"さらに、カスタムの `SecurityIdentityAugmentor` を使用してロールを追加することもできます。\n"
"詳細は、Quarkus の「セキュリティーに関するヒントとコツ」ガイドの xref:security-customization.adoc#security-identity-customization[セキュリティーアイデンティティーのカスタマイズ] セクションを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You can also map `SecurityIdentity` roles created from token claims to deployment-specific roles by using the xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP Security policy]."
msgstr "また、xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP セキュリティーポリシー] を使用して、トークンクレームから作成された `SecurityIdentity` ロールをデプロイメント固有のロールにマップすることもできます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Token scopes and SecurityIdentity permissions"
msgstr "トークンのスコープと SecurityIdentity の権限"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "`SecurityIdentity` permissions are mapped in the form of `io.quarkus.security.StringPermission` from the scope parameter of the <<token-claims-and-security-identity-roles,source of the roles>> and using the same claim separator."
msgstr "`SecurityIdentity` 権限は、 `io.quarkus.security.StringPermission` の形式で、<<token-claims-and-security-identity-roles,source of the roles>> のスコープパラメーターから、同じクレームセパレーターを使用してマッピングされます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Only requests with OpenID Connect scope `email` will be granted access."
msgstr "OpenID Connect スコープ `email` を持つリクエストのみにアクセスが許可されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The read access is limited to the client requests with the `orders_read` scope."
msgstr "読み取りアクセスは、 `orders_read` スコープを持つクライアントリクエストに制限されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For more information about the `io.quarkus.security.PermissionsAllowed` annotation, see the xref:security-authorize-web-endpoints-reference.adoc#permission-annotation[Permission annotation] section of the \"Authorization of web endpoints\" guide."
msgstr "`io.quarkus.security.PermissionsAllowed` アノテーションの詳細は、「Web エンドポイントの認可」ガイドの xref:security-authorize-web-endpoints-reference.adoc#permission-annotation[権限アノテーション] セクションを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Token verification and introspection"
msgstr "トークン検証およびイントロスペクション"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If the token is a JWT token, then, by default, it is verified with a `JsonWebKey` (JWK) key from a local `JsonWebKeySet`, retrieved from the OIDC provider's JWK endpoint.\n"
"The token's key identifier (`kid`) header value is used to find the matching JWK key.\n"
"If no matching `JWK` is available locally, then `JsonWebKeySet` is refreshed by fetching the current key set from the JWK endpoint.\n"
"The `JsonWebKeySet` refresh can be repeated only after the `quarkus.oidc.token.forced-jwk-refresh-interval` expires.\n"
"The default expiry time is 10 minutes.\n"
"If no matching `JWK` is available after the refresh, the JWT token is sent to the OIDC provider's token introspection endpoint."
msgstr ""
"トークンが JWT トークンの場合、デフォルトでは、OIDC プロバイダーの JWK エンドポイントから取得されたローカルの `JsonWebKeySet` の `JsonWebKey` (JWK) キーを使用してトークンが検証されます。\n"
"トークンのキー識別子 (`kid`) ヘッダー値は、一致する JWK キーを検出するために使用されます。\n"
"一致する `JWK` がローカルで利用できない場合は、JWK エンドポイントから現在のキーセットが取得され、 `JsonWebKeySet` が更新されます。\n"
"`JsonWebKeySet` の更新は、 `quarkus.oidc.token.forced-jwk-refresh-interval` の有効期限が切れた後にのみ繰り返すことができます。\n"
"デフォルトの有効期限は 10 分です。\n"
"一致する `JWK` が更新後に利用できない場合は、JWT トークンが OIDC プロバイダーのトークンイントロスペクションエンドポイントに送信されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If the token is opaque, which means it can be a binary token or an encrypted JWT token, then it is always sent to the OIDC provider's token introspection endpoint."
msgstr "トークンが不透明である場合、つまりバイナリートークンまたは暗号化された JWT トークンである場合、そのトークンは常に OIDC プロバイダーのトークンイントロスペクションエンドポイントに送信されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If you work only with JWT tokens and expect a matching `JsonWebKey` to always be available, for example, after refreshing a key set, you must disable token introspection, as shown in the following example:"
msgstr "JWT トークンのみを使用しており、一致する `JsonWebKey` が常に使用可能であることが予想される場合 (たとえば、キーセットを更新した後)、次の例に示すように、トークンイントロスペクションを無効にする必要があります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"There might be cases where JWT tokens must be verified through introspection only, which can be forced by configuring an introspection endpoint address only.\n"
"The following properties configuration shows you an example of how you can achieve this with Keycloak:"
msgstr ""
"場合によっては、JWT トークンをイントロスペクションのみで検証しなければならないことがあります。これは、イントロスペクションエンドポイントアドレスのみを設定することで強制できます。\n"
"次のプロパティー設定は、これを Keycloak を使用して実現する方法の例を示しています。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"There are advantages and disadvantages to indirectly enforcing the introspection of JWT tokens remotely.\n"
"An advantage is that you eliminate the need for two remote calls: a remote OIDC metadata discovery call followed by another remote call to fetch the verification keys that will not be used.\n"
"A disadvantage is that you need to know the introspection endpoint address and configure it manually."
msgstr ""
"JWT トークンのイントロスペクションをリモートで間接的に実施することには、利点と欠点があります。\n"
"利点は、2 つのリモート呼び出し (リモート OIDC メタデータ検出呼び出しと、それに続く使用されない検証キーを取得するための別のリモート呼び出し) が不要になることです。\n"
"欠点は、ユーザーがイントロスペクションエンドポイントアドレスを確認して、手動で設定する必要があることです。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The alternative approach is to allow the default option of OIDC metadata discovery but also require that only the remote JWT introspection is performed, as shown in the following example:"
msgstr "別の方法としては、デフォルトオプションである OIDC メタデータ検出を許可しながら、リモート JWT イントロスペクションのみを実行するよう要求する方法があります。次の例を参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"An advantage of this approach is that the configuration is simpler and easier to understand.\n"
"A disadvantage is that a remote OIDC metadata discovery call is required to discover an introspection endpoint address, even though the verification keys will not be fetched."
msgstr ""
"この方法の利点は、設定がよりシンプルで理解しやすいことです。\n"
"欠点は、検証キーが取得されない場合でも、イントロスペクションエンドポイントアドレスを検出するためにリモート OIDC メタデータ検出呼び出しが必要になることです。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The `io.quarkus.oidc.TokenIntrospection`, a simple `jakarta.json.JsonObject` wrapper object, will be created.\n"
"It can be injected or accessed as a `SecurityIdentity` `introspection` attribute, providing either the JWT or opaque token has been successfully introspected."
msgstr ""
"`io.quarkus.oidc.TokenIntrospection` (シンプルな `jakarta.json.JsonObject` ラッパーオブジェクト) が作成されます。\n"
"このオブジェクトは、JWT または不透明トークンどちらかのイントロスペクションが成功した場合、 `SecurityIdentity` `introspection` 属性として注入またはアクセスできます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Token introspection and `UserInfo` cache"
msgstr "トークンのイントロスペクションと `UserInfo` キャッシュ"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"All opaque access tokens must be remotely introspected.\n"
"Sometimes, JWT access tokens might also have to be introspected.\n"
"If `UserInfo` is also required, the same access token is used in a subsequent remote call to the OIDC provider.\n"
"So, if `UserInfo` is required, and the current access token is opaque, two remote calls are made for every such token; one remote call to introspect the token and another to get `UserInfo`.\n"
"If the token is JWT, only a single remote call to get `UserInfo` is needed, unless it also has to be introspected."
msgstr ""
"不透明アクセストークンは、すべてリモートでイントロスペクトする必要があります。\n"
"場合によっては、JWT アクセストークンをイントロスペクトする必要もあります。\n"
"`UserInfo` も必要な場合は、OIDC プロバイダーへの後続のリモート呼び出しで同じアクセストークンが使用されます。\n"
"したがって、 `UserInfo` が必要で、現在のアクセストークンが不透明トークンである場合、そのトークンごとに 2 つのリモート呼び出しが行われます。1 つのリモート呼び出しはトークンをイントロスペクトするためのもので、もう 1 つは `UserInfo` を取得するためのものです。\n"
"トークンが JWT の場合は、トークンをイントロスペクトする必要がなければ、 `UserInfo` を取得するための 1 つのリモート呼び出しだけで済みます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The cost of making up to two remote calls for every incoming bearer or code flow access token can sometimes be problematic."
msgstr "場合によっては、着信ベアラーまたはコードフローアクセストークンごとに最大 2 つのリモート呼び出しを行うコストが問題になります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If this is the case in production, consider caching the token introspection and `UserInfo` data for a short period, for example, 3 or 5 minutes."
msgstr "これが本番環境に当てはまる場合は、トークンイントロスペクションと `UserInfo` データを短期間 (たとえば 3 分から 5 分) キャッシュすることを検討してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"`quarkus-oidc` provides `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces, usable for `@ApplicationScoped` cache implementation.\n"
"Use `@ApplicationScoped` cache implementation to store and retrieve `quarkus.oidc.TokenIntrospection` and/or `quarkus.oidc.UserInfo` objects, as outlined in the following example:"
msgstr ""
"`quarkus-oidc` は、 `quarkus.oidc.TokenIntrospectionCache` および `quarkus.oidc.UserInfoCache` インターフェイスを提供します。\n"
"これらは `@ApplicationScoped` キャッシュ実装に使用できます。次の例に示すように、 `@ApplicationScoped` キャッシュ実装を使用して、 `quarkus.oidc.TokenIntrospection` オブジェクトや `quarkus.oidc.UserInfo` オブジェクトを保存および取得します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Each OIDC tenant can either permit or deny the storing of its `quarkus.oidc.TokenIntrospection` data, `quarkus.oidc.UserInfo` data, or both with boolean `quarkus.oidc.\"tenant\".allow-token-introspection-cache` and `quarkus.oidc.\"tenant\".allow-user-info-cache` properties."
msgstr "各 OIDC テナントは、 `quarkus.oidc.TokenIntrospection` データ、 `quarkus.oidc.UserInfo` データ、またはその両方の保存を許可または拒否できます。これには、ブール値の `quarkus.oidc.\"tenant\".allow-token-introspection-cache` プロパティーと `quarkus.oidc.\"tenant\".allow-user-info-cache` プロパティーを使用します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Additionally, `quarkus-oidc` provides a simple default memory-based token cache, which implements both `quarkus.oidc.TokenIntrospectionCache` and `quarkus.oidc.UserInfoCache` interfaces."
msgstr "さらに、 `quarkus-oidc` は、 `quarkus.oidc.TokenIntrospectionCache` と `quarkus.oidc.UserInfoCache` の両方のインターフェイスを実装する、シンプルなデフォルトのメモリーベースのトークンキャッシュを提供します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You can configure and activate the default OIDC token cache as follows:"
msgstr "デフォルトの OIDC トークンキャッシュは、次のように設定すると、有効にできます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The default cache uses a token as a key, and each entry can have `TokenIntrospection`, `UserInfo`, or both.\n"
"It will only keep up to a `max-size` number of entries.\n"
"If the cache is already full when a new entry is to be added, an attempt is made to find a space by removing a single expired entry.\n"
"Additionally, the cleanup timer, if activated, periodically checks for expired entries and removes them."
msgstr ""
"デフォルトのキャッシュは、トークンをキーとして使用します。各エントリーには、 `TokenIntrospection`、 `UserInfo`、またはその両方が含まれます。\n"
"最大で `max-size` 個のエントリーのみが保持されます。\n"
"新しいエントリーを追加するときにキャッシュがすでにいっぱいになっている場合は、期限切れのエントリーを 1 つ削除して領域を確保する試みが行われます。\n"
"さらに、クリーンアップタイマーを有効にすると、期限切れのエントリーが定期的にチェックされ、削除されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You can experiment with the default cache implementation or register a custom one."
msgstr "デフォルトのキャッシュ実装を試すことも、カスタムのキャッシュ実装を登録することもできます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "JSON Web Token claim verification"
msgstr "JSON Web トークンのクレーム検証"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "After the bearer JWT token's signature has been verified and its `expires at` (`exp`) claim has been checked, the `iss` (`issuer`) claim value is verified next."
msgstr "ベアラーの JWT トークンの署名が検証され、その `expires at` (`exp`) クレームがチェックされると、次に `iss` (`issuer`) クレーム値が検証されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"By default, the `iss` claim value is compared to the `issuer` property, which might have been discovered in the well-known provider configuration.\n"
"However, if the `quarkus.oidc.token.issuer` property is set, then the `iss` claim value is compared to it instead."
msgstr ""
"デフォルトでは、 `iss` クレーム値は、既知のプロバイダー設定で検出された `issuer` プロパティーと比較されます。\n"
"ただし、 `quarkus.oidc.token.issuer` プロパティーが設定されている場合は、代わりにそのプロパティーと `iss` クレーム値が比較されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"In some cases, this `iss` claim verification might not work.\n"
"For example, if the discovered `issuer` property contains an internal HTTP/IP address while the token `iss` claim value contains an external HTTP/IP address.\n"
"Or when a discovered `issuer` property contains the template tenant variable, but the token `iss` claim value has the complete tenant-specific issuer value."
msgstr ""
"場合によっては、この `iss` クレーム検証がうまくいかないことがあります。\n"
"たとえば、検出された `issuer` プロパティーには内部の HTTP/IP アドレスが含まれているのに、トークン `iss` クレーム値には外部の HTTP/IP アドレスが含まれている場合などです。\n"
"または、検出された `issuer` プロパティーにはテンプレートテナント変数が含まれているのに、トークン `iss` クレーム値には完全なテナント固有の発行者の値が含まれている場合などです。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"In such cases, consider skipping the issuer verification by setting `quarkus.oidc.token.issuer=any`.\n"
"Only skip the issuer verification if no other options are available:"
msgstr ""
"このような場合は、 `quarkus.oidc.token.issuer=any` を設定して発行者の検証をスキップすることを検討してください。\n"
"発行者の検証のスキップは、他の方法を利用できない場合にのみ行ってください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If you are using Keycloak and observe the issuer verification errors caused by the different host addresses, configure Keycloak with a `KEYCLOAK_FRONTEND_URL` property to ensure the same host address is used."
msgstr "Keycloak を使用していて、ホストアドレスが異なるために発行者検証エラーが発生する場合は、Keycloak に `KEYCLOAK_FRONTEND_URL` プロパティーを設定して、同じホストアドレスを使用してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If the `iss` property is tenant-specific in a multitenant deployment, use the `SecurityIdentity` `tenant-id` attribute to check that the issuer is correct in the endpoint or the custom Jakarta filter.\n"
"For example:"
msgstr ""
"マルチテナントデプロイメントで `iss` プロパティーがテナント固有のものである場合は、 `SecurityIdentity` `tenant-id` 属性を使用して、エンドポイントまたはカスタム Jakarta フィルターで発行者が正しいことを確認します。\n"
"以下に例を示します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Consider using the `quarkus.oidc.token.audience` property to verify the token `aud` (`audience`) claim value."
msgstr "トークンの `aud` (`audience`) クレーム値を検証するために、 `quarkus.oidc.token.audience` プロパティーを使用することを検討してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Jose4j Validator"
msgstr "Jose4j Validator"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"You can register a custom https://www.javadoc.io/doc/org.bitbucket.b_c/jose4j/latest/org/jose4j/jwt/consumer/class-use/Validator.html[Jose4j Validator] to customize the JWT claim verification process, before `org.eclipse.microprofile.jwt.JsonWebToken` is initialized.\n"
"For example:"
msgstr ""
"`org.eclipse.microprofile.jwt.JsonWebToken` が初期化される前に、カスタム https://www.javadoc.io/doc/org.bitbucket.b_c/jose4j/latest/org/jose4j/jwt/consumer/class-use/Validator.html[Jose4j Validator] を登録して、JWT クレーム検証プロセスをカスタマイズできます。\n"
"以下に例を示します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Register Jose4j Validator to verify JWT tokens for all OIDC tenants."
msgstr "すべての OIDC テナントの JWT トークンを検証するために、Jose4j Validator を登録します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Return the claim verification error description."
msgstr "クレーム検証エラーの説明を返します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Return `null` to confirm that this Validator has successfully verified the token."
msgstr "この Validator がトークンを正常に検証したことを確認するために、 `null` を返します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Use a `@quarkus.oidc.TenantFeature` annotation to bind a custom Validator to a specific OIDC tenant only."
msgstr "カスタム Validator を特定の OIDC テナントにのみバインドするには、 `@quarkus.oidc.TenantFeature` アノテーションを使用します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Single-page applications"
msgstr "シングルページアプリケーション"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "A single-page application (SPA) typically uses `XMLHttpRequest`(XHR) and the JavaScript utility code provided by the OIDC provider to acquire a bearer token to access Quarkus `service` applications."
msgstr "シングルページアプリケーション (SPA) は、通常、 `XMLHttpRequest` (XHR) と OIDC プロバイダーが提供する JavaScript ユーティリティーコードを使用してベアラートークンを取得し、Quarkus `service` アプリケーションにアクセスします。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, if you work with Keycloak, you can use `keycloak.js` to authenticate users and refresh the expired tokens from the SPA:"
msgstr "たとえば、Keycloak を使用する場合は、 `keycloak.js` を使用してユーザーを認証し、SPA から期限切れのトークンを更新できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"To enable authentication for this SPA Keycloak example, disable *Client authentication* and set *Web origins* to `http://localhost:8080`. These settings allow Keycloak's CORS policy to communicate with your Quarkus application.\n"
"The code provides an example of building Quarkus single-page applications integrated with Keycloak. For more details about creating single-page applications integrating Keycloak, refer to the official link:https://www.keycloak.org/securing-apps/javascript-adapter[Keycloak JavaScript adapter documentation]."
msgstr "この SPA Keycloak の例で認証を有効にするには、 *クライアント認証* を無効にし、 *Web origins* を次のように設定します。 `http://localhost:8080` .これらの設定により、KeycloakのCORSポリシーがQuarkusアプリケーションと通信できるようになります。このコードでは、Keycloakと統合されたQuarkusのシングルページアプリケーションを構築する例を示します。Keycloakを統合したシングルページアプリケーションの作成の詳細については、 link:https://www.keycloak.org/securing-apps/javascript-adapter[Keycloak JavaScriptアダプター]の 公式 link:https://www.keycloak.org/securing-apps/javascript-adapter[ドキュメント]を 参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Cross-origin resource sharing"
msgstr "クロスオリジンリソース共有"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"If you plan to use your OIDC `service` application from a single-page application running on a different domain, you must configure cross-origin resource sharing (CORS).\n"
"For more information, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the \"Cross-origin resource sharing\" guide."
msgstr ""
"別のドメインで実行されているシングルページアプリケーションから OIDC `service` アプリケーションを使用する予定の場合は、クロスオリジンリソース共有 (CORS) を設定する必要があります。\n"
"詳細は、「クロスオリジンリソース共有」ガイドの xref:security-cors.adoc#cors-filter[CORS フィルター] セクションを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Provider endpoint configuration"
msgstr "プロバイダーエンドポイント設定"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "An OIDC `service` application needs to know the OIDC provider's token, `JsonWebKey` (JWK) set, and possibly `UserInfo` and introspection endpoint addresses."
msgstr "OIDC `service` アプリケーションは、OIDC プロバイダーのトークン、 `JsonWebKey` (JWK) セット、場合によっては `UserInfo` やイントロスペクションのエンドポイントアドレスを確認する必要があります。"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "By default, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr "デフォルトでは、これらのエンドポイントアドレスは、設定された `quarkus.oidc.auth-server-url` に `/.well-known/openid-configuration` パスを追加することで検出されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Alternatively, if the discovery endpoint is not available, or if you want to save on the discovery endpoint round-trip, you can disable the discovery and configure them with relative path values.\n"
"For example:"
msgstr ""
"検出エンドポイントが利用できない場合や、検出エンドポイントのラウンドトリップのコストを節約する場合は、検出を無効にして、エンドポイントアドレスを相対パス値で設定することができます。\n"
"以下に例を示します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Token propagation"
msgstr "トークンの伝播"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For information about bearer access token propagation to the downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation-rest[Token propagation] section of the Quarkus \"OpenID Connect (OIDC) and OAuth2 client and filters reference\" guide."
msgstr "ダウンストリームサービスへのベアラーアクセストークンの伝播については、Quarkus の「OpenID Connect (OIDC) および OAuth2 クライアントとフィルターのリファレンス」ガイドの xref:security-openid-connect-client-reference.adoc#token-propagation-rest[トークンの伝播] セクションを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "JWT token certificate chain"
msgstr "JWT トークン証明書チェーン"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"In some cases, JWT bearer tokens have an `x5c` header which represents an X509 certificate chain whose leaf certificate contains a public key that must be used to verify this token's signature.\n"
"Before this public key can be accepted to verify the signature, the certificate chain must be validated first.\n"
"The certificate chain validation involves several steps:"
msgstr ""
"場合によっては、JWT ベアラートークンに `x5c` ヘッダーがあり、このヘッダーは X509 証明書チェーンを表します。この証明書チェーンのリーフ証明書には、トークンの署名の検証に使用する必要がある公開鍵が含まれています。\n"
"まず証明書チェーンを検証してから、この公開鍵を受け入れて署名を検証する必要があります。\n"
"証明書チェーンの検証にはいくつかの手順が含まれます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Confirm that every certificate but the root one is signed by the parent certificate."
msgstr "ルート証明書以外のすべての証明書が親証明書によって署名されていることを確認します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Confirm the chain's root certificate is also imported in the truststore."
msgstr "チェーンのルート証明書もトラストストアにインポートされていることを確認します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Validate the chain's leaf certificate. If a common name of the leaf certificate is configured then a common name of the chain's leaf certificate must match it. Otherwise the chain's leaf certificate must also be avaiable in the truststore, unless one or more custom `TokenCertificateValidator` implementations are registered."
msgstr "チェーンのリーフ証明書を検証します。リーフ証明書の共通名が設定されている場合は、チェーンのリーフ証明書の共通名がその共通名に一致する必要があります。それ以外の場合は、1 つ以上のカスタム `TokenCertificateValidator` 実装が登録されていない限り、チェーンのリーフ証明書もトラストストアで使用可能である必要があります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "`quarkus.oidc.TokenCertificateValidator` can be used to add a custom certificate chain validation step. It can be used by all tenants expecting tokens with the certificate chain or bound to specific OIDC tenants with the `@quarkus.oidc.TenantFeature` annotation."
msgstr "`quarkus.oidc.TokenCertificateValidator` を使用すると、カスタム証明書チェーン検証手順を追加できます。これは、証明書チェーンを持つトークンを要求するすべてのテナント、または `@quarkus.oidc.TenantFeature` アノテーションを使用して特定の OIDC テナントにバインドされたすべてのテナントで使用できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, here is how you can configure Quarkus OIDC to verify the token's certificate chain, without using `quarkus.oidc.TokenCertificateValidator`:"
msgstr "たとえば、 `quarkus.oidc.TokenCertificateValidator` を使用せずにトークンの証明書チェーンを検証するように Quarkus OIDC を設定する方法は次のとおりです。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The truststore must contain the certificate chain's root certificate."
msgstr "トラストストアに証明書チェーンのルート証明書が含まれている必要があります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The certificate chain's leaf certificate must have a common name equal to `www.quarkusio.com`. If this property is not configured then the truststore must contain the certificate chain's leaf certificate unless one or more custom `TokenCertificateValidator` implementations are registered."
msgstr "証明書チェーンのリーフ証明書の共通名は `www.quarkusio.com` にする必要があります。このプロパティーが設定されていない場合は、1 つ以上のカスタム `TokenCertificateValidator` 実装が登録されていない限り、トラストストアに証明書チェーンのリーフ証明書が含まれている必要があります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You can add a custom certificate chain validation step by registering a custom `quarkus.oidc.TokenCertificateValidator`, for example:"
msgstr "カスタムの `quarkus.oidc.TokenCertificateValidator` を登録することで、カスタムの証明書チェーン検証ステップを追加できます。次に例を示します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Confirm that the certificate chain's root certificate is bound to the custom JWT token's claim."
msgstr "証明書チェーンのルート証明書がカスタム JWT トークンのクレームにバインドされていることを確認します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "OIDC provider client authentication"
msgstr "OIDC プロバイダーのクライアント認証"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"`quarkus.oidc.runtime.OidcProviderClient` is used when a remote request to an OIDC provider is required.\n"
"If introspection of the Bearer token is necessary, then `OidcProviderClient` must authenticate to the OIDC provider.\n"
"For more information about supported authentication options, see the  xref:security-oidc-code-flow-authentication.adoc#oidc-provider-client-authentication[OIDC provider client authentication] section in the Quarkus \"OpenID Connect authorization code flow mechanism for protecting web applications\" guide."
msgstr ""
"`quarkus.oidc.runtime.OidcProviderClient` は、OIDC プロバイダーへのリモートリクエストが必要な場合に使用されます。\n"
"ベアラートークンのイントロスペクションが必要な場合は、 `OidcProviderClient` が OIDC プロバイダーに対して認証する必要があります。\n"
"サポートされている認証オプションの詳細は、Quarkus の「Web アプリケーションを保護するための OpenID Connect 認可コードフローメカニズム」ガイドの xref:security-oidc-code-flow-authentication.adoc#oidc-provider-client-authentication[OIDC プロバイダーのクライアント認証] セクションを参照してください。"

#. type: Title ===
#: _guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Testing"
msgstr "テスト"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If you have to test Quarkus OIDC service endpoints that require xref:security-keycloak-authorization.adoc[Keycloak authorization], follow the xref:security-keycloak-authorization.adoc#testing[Test Keycloak authorization] section."
msgstr "xref:security-keycloak-authorization.adoc[Keycloak 認証] を必要とする Quarkus OIDC サービスエンドポイントをテストする必要がある場合は、xref:security-keycloak-authorization.adoc#testing[Keycloak 認証のテスト] セクションに従ってください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You can begin testing by adding the following dependencies to your test project:"
msgstr "次の依存関係をテストプロジェクトに追加することで、テストを開始できます。"

#. type: Block title
#: _guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#. type: Title ====
#: _guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "Dev Services for Keycloak"
msgstr "Dev Services for Keycloak"

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"The preferred approach for integration testing against Keycloak is xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak].\n"
"`Dev Services for Keycloak` will start and initialize a test container.\n"
"Then, it will create a `quarkus` realm and a `quarkus-app` client with `secret` as the client secret. It will also add two users: `alice` with both `admin` and `user` roles, and `bob` with the `user` role. All of these properties can be customized."
msgstr "Keycloakに対する統合テストには、 xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloakを] 使用するのが好ましい方法です。 `Dev Services for Keycloak` 、テスト・コンテナを起動して初期化します。そして、 `quarkus` レルムと、 `secret` をクライアント・シークレットとする `quarkus-app` クライアントを作成します。また、 `admin` と `user` の両方のロールを持つ `alice` と、 `user` のロールを持つ `bob` の2人のユーザーが追加されます。これらのプロパティはすべてカスタマイズ可能です。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "First, add the following dependency, which provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` that you can use in tests for acquiring the access tokens:"
msgstr "まず、次の依存関係を追加します。この依存関係は、アクセストークンを取得するテストで使用できるユーティリティークラス `io.quarkus.test.keycloak.client.KeycloakTestClient` を提供します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Next, prepare your `application.properties` configuration file.\n"
"You can start with an empty `application.properties` file because `Dev Services for Keycloak` registers `quarkus.oidc.auth-server-url` and points it to the running test container, `quarkus.oidc.client-id=quarkus-app`, and `quarkus.oidc.credentials.secret=secret`."
msgstr ""
"次に、 `application.properties` 設定ファイルを準備します。\n"
"空の `application.properties` ファイルから開始できます。 `Dev Services for Keycloak` が `quarkus.oidc.auth-server-url` を登録し、その参照先として実行中のテストコンテナー、 `quarkus.oidc.client-id=quarkus-app`、および `quarkus.oidc.credentials.secret=secret` を設定するためです。"

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "However, if you have already configured the required `quarkus-oidc` properties, then you only need to associate `quarkus.oidc.auth-server-url` with the `prod` profile for `Dev Services for Keycloak` to start a container, as shown in the following example:"
msgstr "ただし、必要な `quarkus-oidc` プロパティがすでに構成されている場合は、次の例に示すように、 `Dev Services for Keycloak` でコンテナを起動するために、 `quarkus.oidc.auth-server-url` を `prod` プロファイルと関連付けるだけでよいことになります："

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If a custom realm file has to be imported into Keycloak before running the tests, configure `Dev Services for Keycloak` as follows:"
msgstr "テストを実行する前にカスタムレルムファイルを Keycloak にインポートする必要がある場合は、次のように `Dev Services for Keycloak` を設定します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Finally, write your test, which will be executed in JVM mode, as shown in the following examples:"
msgstr "最後に、次の例に示すようにテストを記述します。このテストは JVM モードで実行されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Example of a test executed in JVM mode:"
msgstr "JVM モードで実行されるテストの例:"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Example of a test executed in native mode:"
msgstr "ネイティブモードで実行されるテストの例:"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For more information about initializing and configuring Dev Services for Keycloak, see the xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] guide."
msgstr "Dev Services for Keycloak の初期化と設定の詳細は、xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] ガイドを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "WireMock"
msgstr "WireMock"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Add the following dependencies to your test project:"
msgstr "テストプロジェクトに以下の依存関係を追加します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Prepare the REST test endpoint and set `application.properties`.\n"
"For example:"
msgstr ""
"REST テストエンドポイントを準備し、 `application.properties` を設定します。\n"
"以下に例を示します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Finally, write the test code.\n"
"For example:"
msgstr ""
"最後にテストコードを記述します。\n"
"以下に例を示します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The `quarkus-test-oidc-server` extension includes a signing RSA private key file in a `JSON Web Key` (`JWK`) format and points to it with a `smallrye.jwt.sign.key.location` configuration property.\n"
"It allows you to sign the token by using a no-argument `sign()` operation."
msgstr ""
"`quarkus-test-oidc-server` エクステンションは、 `JSON Web Key` (`JWK`) フォーマットの署名 RSA 秘密鍵ファイルを含んでおり、 `smallrye.jwt.sign.key.location` 設定プロパティーでそのファイルを参照します。\n"
"このエクステンションを使用すると、引数なしの `sign()` 操作を使用してトークンに署名できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Testing your `quarkus-oidc` `service` application with `OidcWiremockTestResource` provides the best coverage because even the communication channel is tested against the WireMock HTTP stubs.\n"
"If you need to run a test with WireMock stubs that are not yet supported by `OidcWiremockTestResource`, you can inject a `WireMockServer` instance into the test class, as shown in the following example:"
msgstr ""
"`OidcWiremockTestResource` を使用して `quarkus-oidc` `service` アプリケーションをテストすると、通信チャネルも WireMock HTTP スタブに対してテストされるため、最大のカバレッジを得ることができます。\n"
"`OidcWiremockTestResource` でまだサポートされていない WireMock スタブを使用してテストを実行する必要がある場合は、次の例に示すように、テストクラスに `WireMockServer` インスタンスを挿入できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "`OidcWiremockTestResource` does not work with `@QuarkusIntegrationTest` against Docker containers because the WireMock server runs in the JVM that runs the test, which is inaccessible from the Docker container that runs the Quarkus application."
msgstr "`OidcWiremockTestResource` は、Docker コンテナーに対する `@QuarkusIntegrationTest` では機能しません。WireMock サーバーが、テストを実行する JVM で実行されるためです。その JVM には、Quarkus アプリケーションを実行する Docker コンテナーからはアクセスできません。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "`OidcTestClient`"
msgstr "`OidcTestClient`"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If you use SaaS OIDC providers, such as `Auth0`, and want to run tests against the test (development) domain or to run tests against a remote Keycloak test realm, if you already have `quarkus.oidc.auth-server-url` configured, you can use `OidcTestClient`."
msgstr "SaaS OIDC プロバイダー (`Auth0` など) を使用していて、テスト (開発) ドメインに対してテストを実行したり、リモート Keycloak テストレルムに対してテストを実行したりする場合、 `quarkus.oidc.auth-server-url` がすでに設定されていれば、 `OidcTestClient` を使用できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, you have the following configuration:"
msgstr "たとえば、次のような設定があるとします。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "To start, add the same dependency, `quarkus-test-oidc-server`, as described in the <<bearer-token-integration-testing-wiremock>> section."
msgstr "まず、<<bearer-token-integration-testing-wiremock>> セクションの説明に従って、同じ依存関係 `quarkus-test-oidc-server` を追加します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Next, write the test code as follows:"
msgstr "次に、以下のようにテストコードを記述します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"This test code acquires a token by using a `password` grant from the test `Auth0` domain, which has registered an application with the client id `test-auth0-client`, and created the user `alice` with password `alice`.\n"
"For a test like this to work, the test `Auth0` application must have the `password` grant enabled.\n"
"This example code also shows how to pass additional parameters.\n"
"For `Auth0`, these are the `audience` and `scope` parameters."
msgstr ""
"このテストコードは、クライアント ID が `test-auth0-client` のアプリケーションを登録し、パスワードが `alice` のユーザー `alice` を作成したテスト `Auth0` ドメインから `password` 許可を使用してトークンを取得します。\n"
"このようなテストを機能させるには、テスト `Auth0` アプリケーションで `password` グラントが有効になっている必要があります。\n"
"このサンプルコードでは、追加のパラメーターを渡す方法も示しています。 `Auth0` の場合、これらは `audience` および `scope` パラメーターです。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Test OIDC DevService"
msgstr "OIDC DevService のテスト"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"You can also use `OidcTestClient` to test Quarkus endpoints supported by xref:security-openid-connect-dev-services.adoc#dev-services-for-oidc[Dev Services for OIDC].\n"
"No configuration in the `application.properties` file is needed, Quarkus will configure `OidcTestClient` for you:"
msgstr ""
"また、 `OidcTestClient` を使用して、xref:security-openid-connect-dev-services.adoc#dev-services-for-oidc[OIDC 用 Dev Services] でサポートされている Quarkus エンドポイントをテストすることもできます。\n"
"`application.properties` ファイルでの設定は必要ありません。Quarkus が `OidcTestClient` を設定します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "`KeycloakTestResourceLifecycleManager`"
msgstr "`KeycloakTestResourceLifecycleManager`"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You can also use `KeycloakTestResourceLifecycleManager` for integration testing with Keycloak."
msgstr "Keycloak との結合テストには `KeycloakTestResourceLifecycleManager` を使用することもできます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Use <<bearer-token-integration-testing-keycloak-devservices,Dev Services for Keycloak>> instead of `KeycloakTestResourceLifecycleManager` for integration testing with Keycloak, unless you have specific requirements for using `KeycloakTestResourceLifecycleManager`."
msgstr "`KeycloakTestResourceLifecycleManager` を使用する特別な要件がない限り、Keycloak との結合テストには、 `KeycloakTestResourceLifecycleManager` ではなく <<bearer-token-integration-testing-keycloak-devservices,Dev Services for Keycloak>> を使用してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "First, add the following dependency:"
msgstr "まず、以下の依存関係を追加します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "It provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager`, which is an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` that starts a Keycloak container."
msgstr "これは、Keycloak コンテナーを起動する `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` の実装である`io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` を提供します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Configure the Maven Surefire plugin as follows, or similarly with `maven.failsafe.plugin` for native image testing:"
msgstr "Maven Surefire プラグインを次のように設定します。または、ネイティブイメージテストの `maven.failsafe.plugin` と同様に設定します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Prepare the REST test endpoint and set `application.properties` as outlined in the following example:"
msgstr "REST テストエンドポイントを準備し、次の例に示すように `application.properties` を設定します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Summary"
msgstr "概要"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"In the provided example, `KeycloakTestResourceLifecycleManager` registers two users: `alice` and `admin`.\n"
"By default:\n"
"* The user `alice` has the `user` role, which you can customize by using a `keycloak.token.user-roles` system property.\n"
"* The user `admin` has both the `user` and `admin` roles, which you can customize by using the `keycloak.token.admin-roles` system property."
msgstr ""
"上記の例では、 `KeycloakTestResourceLifecycleManager` が `alice` と `admin` の 2 人のユーザーを登録します。\n"
"デフォルトでは、* ユーザー `alice` には `user` ロールがあります。このロールは、 `keycloak.token.user-roles` システムプロパティーを使用してカスタマイズできます。\n"
"* ユーザー `admin` には `user` と `admin` の両方のロールがあります。これらのロールは、 `keycloak.token.admin-roles` システムプロパティーを使用してカスタマイズできます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance, and this can be disabled by using `keycloak.use.https=false`.\n"
"The default realm name is `quarkus`, and the client id is `quarkus-service-app`.\n"
"If you want to customize these values, set the `keycloak.realm` and `keycloak.service.client` system properties."
msgstr ""
"デフォルトでは、 `KeycloakTestResourceLifecycleManager` は HTTPS を使用して Keycloak インスタンスを初期化します。これは `keycloak.use.https=false` を使用して無効にできます。\n"
"デフォルトのレルム名は `quarkus` で、クライアント ID は `quarkus-service-app` です。\n"
"これらの値をカスタマイズする場合は、 `keycloak.realm` および `keycloak.service.client` システムプロパティーを設定します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Local public key"
msgstr "ローカル公開鍵"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You can use a local inlined public key for testing your `quarkus-oidc` `service` applications, as shown in the following example:"
msgstr "次の例に示すように、 `quarkus-oidc` `service` アプリケーションをテストするために、ローカルのインライン公開鍵を使用できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"To generate JWT tokens, copy `privateKey.pem` from the `integration-tests/oidc-tenancy` in the `main` Quarkus repository and use a test code similar to the one in the preceding <<bearer-token-integration-testing-wiremock>> section.\n"
"You can use your own test keys, if preferred."
msgstr ""
"JWT トークンを生成するには、 `main` Quarkus リポジトリーの `integration-tests/oidc-tenancy` から `privateKey.pem` をコピーし、前述の <<bearer-token-integration-testing-wiremock>> セクションと同様のテストコードを使用します。\n"
"必要に応じて、独自のテストキーを使用することもできます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"This approach provides limited coverage compared to the WireMock approach.\n"
"For example, the remote communication code is not covered."
msgstr ""
"この方法では、WireMock 方法と比較してカバレッジが制限されます。\n"
"たとえば、リモート通信コードはカバーされません。"

#. type: Title ====
#: _guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "TestSecurity annotation"
msgstr "TestSecurity アノテーション"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations to test the `service` application endpoint code, which depends on either one, or all three, of the following injections:"
msgstr "`@TestSecurity` および `@OidcSecurity` アノテーションを使用して、 `service` アプリケーションエンドポイントのコードをテストできます。このコードは、次の注入のいずれか 1 つまたは 3 つすべてに依存します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "`JsonWebToken`"
msgstr "`JsonWebToken`"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "`OidcConfigurationMetadata`"
msgstr "`OidcConfigurationMetadata`"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Write a test code as outlined in the following example:"
msgstr "次の例に示すようにテストコードを記述します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The `ProtectedResource` class, which is used in this code example, might look like this:"
msgstr "このコード例で使用されている `ProtectedResource` クラスは次のようになります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"You must always use the `@TestSecurity` annotation.\n"
"Its `user` property is returned as `JsonWebToken.getName()` and its `roles` property is returned as `JsonWebToken.getGroups()`.\n"
"The `@OidcSecurity` annotation is optional and you can use it to set the additional token claims and the `UserInfo` and `OidcConfigurationMetadata` properties.\n"
"Additionally, if the `quarkus.oidc.token.issuer` property is configured, it is used as an `OidcConfigurationMetadata` `issuer` property value."
msgstr ""
"`@TestSecurity` アノテーションは常に使用する必要があります。\n"
"その `user` プロパティーは `JsonWebToken.getName()` として返され、その `roles` プロパティーは `JsonWebToken.getGroups()` として返されます。\n"
"`@OidcSecurity` アノテーションは任意です。これを使用すると、追加のトークンクレームと `UserInfo` および `OidcConfigurationMetadata` プロパティーを設定できます。\n"
"さらに、 `quarkus.oidc.token.issuer` プロパティーが設定されている場合、 `OidcConfigurationMetadata` `issuer` プロパティー値として使用されます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If you work with opaque tokens, you can test them as shown in the following code example:"
msgstr "不透明トークンを使用する場合は、次のコード例に示す方法でトークンをテストできます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The  `ProtectedResource` class, which is used in this code example, might look like this:"
msgstr "このコード例で使用されている `ProtectedResource` クラスは次のようになります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The `@TestSecurity`, `user`, and `roles` attributes are available as `TokenIntrospection`, `username`, and `scope` properties.\n"
"Use `io.quarkus.test.security.oidc.TokenIntrospection` to add the additional introspection response properties, such as an `email`, and so on."
msgstr ""
"`@TestSecurity`、 `user`、および `roles` 属性は、 `TokenIntrospection`、 `username`、および `scope` プロパティーとして使用できます。\n"
"`io.quarkus.test.security.oidc.TokenIntrospection` を使用して、 `email` などの追加のイントロスペクションレスポンスプロパティーを追加します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "`@TestSecurity` and `@OidcSecurity` can be combined in a meta-annotation, as outlined in the following example:"
msgstr "`@TestSecurity` と `@OidcSecurity` は、メタアノテーションで組み合わせることができます。次の例を参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "This is particularly useful if multiple test methods must use the same set of security settings."
msgstr "これは、複数のテスト方法で同じセキュリティー設定セットを使用する必要がある場合に特に便利です。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Check errors in the logs"
msgstr "ログでのエラーの確認"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "To see more details about token verification errors, enable `io.quarkus.oidc.runtime.OidcProvider` and `TRACE` level logging:"
msgstr "トークン検証エラーの詳細を確認するには、 `io.quarkus.oidc.runtime.OidcProvider` および `TRACE` レベルのロギングを有効にします。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "To see more details about `OidcProvider` client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` and `TRACE` level logging as follows:"
msgstr "`OidcProvider` クライアント初期化エラーの詳細を確認するには、次のように `io.quarkus.oidc.runtime.OidcRecorder` および `TRACE` レベルのロギングを有効にします。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "External and internal access to OIDC providers"
msgstr "OIDC プロバイダーへの外部および内部アクセス"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The externally-accessible token of the OIDC provider and other endpoints might have different HTTP(S) URLs compared to the URLs that are auto-discovered or configured relative to the `quarkus.oidc.auth-server-url` internal URL.\n"
"For example, suppose your SPA acquires a token from an external token endpoint address and sends it to Quarkus as a bearer token.\n"
"In that case, the endpoint might report an issuer verification failure."
msgstr ""
"OIDC プロバイダーおよびその他のエンドポイントの外部からアクセス可能なトークンは、自動検出された URL や `quarkus.oidc.auth-server-url` 内部 URL を基準に設定された URL とは異なる HTTP(S) URL を持っている可能性があります。\n"
"たとえば、SPA が外部トークンエンドポイントアドレスからトークンを取得し、それをベアラートークンとして Quarkus に送信するとします。\n"
"その場合、エンドポイントから発行者の検証の失敗が報告される可能性があります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"In such cases, if you work with Keycloak, start it with the `KEYCLOAK_FRONTEND_URL` system property set to the externally accessible base URL.\n"
"If you work with other OIDC providers, refer to your provider's documentation."
msgstr ""
"このような場合に Keycloak を使用する場合は、 `KEYCLOAK_FRONTEND_URL` システムプロパティーを外部からアクセス可能なベース URL に設定して Keycloak を起動してください。\n"
"他の OIDC プロバイダーを使用する場合は、プロバイダーのドキュメントを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Using the `client-id` property"
msgstr "`client-id`プロパティーの使用"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"The `quarkus.oidc.client-id` property identifies the OIDC client that requested the current bearer token.\n"
"The OIDC client can be an SPA application running in a browser or a Quarkus `web-app` confidential client application propagating the access token to the Quarkus `service` application."
msgstr ""
"`quarkus.oidc.client-id` プロパティーは、現在のベアラートークンをリクエストした OIDC クライアントを特定します。\n"
"OIDC クライアントは、ブラウザーで実行される SPA アプリケーション、または Quarkus `service` アプリケーションにアクセストークンを伝播する Quarkus `web-app` 機密クライアントアプリケーションです。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"This property is required if the `service` application is expected to introspect the tokens remotely, which is always the case for the opaque tokens.\n"
"This property is optional for local JSON Web Token (JWT) verification only."
msgstr ""
"このプロパティーは、 `service` アプリケーションがトークンをリモートでイントロスペクトすることが予想される場合に必要です。これは、不透明トークンの場合は常に当てはまります。\n"
"このプロパティーは、ローカル JSON Web Token (JWT) 検証の場合にのみ省略可能です。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Setting the `quarkus.oidc.client-id` property is encouraged even if the endpoint does not require access to the remote introspection endpoint.\n"
"This is because when `client-id` is set, it can be used to verify the token audience.\n"
"It will also be included in logs when the token verification fails, enabling better traceability of tokens issued to specific clients and analysis over a longer period."
msgstr ""
"エンドポイントがリモートイントロスペクションエンドポイントへのアクセスを必要としない場合でも、 `quarkus.oidc.client-id` プロパティーを設定することを推奨します。\n"
"これは、 `client-id` が設定されている場合、それを使用してトークンオーディエンスを検証できるためです。\n"
"また、トークンの検証が失敗した場合にも client-id がログに含まれるため、特定のクライアントに発行されたトークンのトレーサビリティーが向上し、より長い期間にわたる分析が可能になります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, if your OIDC provider sets a token audience, consider the following configuration pattern:"
msgstr "たとえば、OIDC プロバイダーでトークンオーディエンスを設定する場合は、次の設定パターンを検討してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "If you set `quarkus.oidc.client-id`, but your endpoint does not require remote access to one of the OIDC provider endpoints (introspection, token acquisition, and so on), do not set a client secret with `quarkus.oidc.credentials` or similar properties because it will not be used."
msgstr "`quarkus.oidc.client-id` を設定したが、いずれかの OIDC プロバイダーエンドポイントへのリモートアクセスがエンドポイントに必要ない場合 (イントロスペクション、トークンの取得など)、 `quarkus.oidc.credentials` または同様のプロパティーを使用してクライアントシークレットを設定しないでください。その場合、クライアントシークレットは使用されないためです。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Quarkus `web-app` applications always require the `quarkus.oidc.client-id` property."
msgstr "Quarkus `web-app` アプリケーションには、常に `quarkus.oidc.client-id` プロパティーが必要です。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Sender-constraining access tokens"
msgstr "送信者制限アクセストークン"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Demonstrating Proof of Possession (DPoP)"
msgstr "Demonstrating Proof of Possession (DPoP)"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "https://datatracker.ietf.org/doc/html/rfc9449[RFC9449] describes a Demonstrating Proof of Possession (DPoP) mechanism for cryprographically binding an access token to the current client, preventing the access token loss and replay."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc9449[RFC9449]は 、アクセストークンを現在のクライアントに暗号的にバインドし、アクセストークンの紛失やリプレイを防ぐためのDemonstrating Proof of Possession（DPoP）メカニズムについて記述しています。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Single page application (SPA) public clients generate DPoP proof tokens and use them to acquire and submit access tokens which are cryptograhically bound to DPoP proofs."
msgstr "シングル・ページ・アプリケーション（SPA）のパブリック・クライアントはDPoPプルーフ・トークンを生成し、DPoPプルーフに暗号学的にバインドされたアクセストークンの取得と提出に使用します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Enabling DPoP support in Quarkus requires a single property."
msgstr "QuarkusでDPoPサポートを有効にするには、1つのプロパティが必要です。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For example:"
msgstr "例:"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Require that the access tokens are provided using HTTP `Authorization DPoP` scheme value."
msgstr "HTTP `Authorization DPoP` スキーム値を使用してアクセストークンが提供されることを要求します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "After accepting such tokens, Quarkus will go through the full https://datatracker.ietf.org/doc/html/rfc9449#name-checking-dpop-proofs[DPoP token verification process]."
msgstr "このようなトークンを受け入れた後、Quarkusは link:https://datatracker.ietf.org/doc/html/rfc9449#name-checking-dpop-proofs[DPoPトークン]の 完全な link:https://datatracker.ietf.org/doc/html/rfc9449#name-checking-dpop-proofs[検証プロセス]を 行います。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Support for custom DPoP nonce providers may be offered in the future."
msgstr "カスタムDPoP nonceプロバイダのサポートは将来提供されるかもしれません。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Mutual TLS token binding"
msgstr "相互 TLS トークンバインディング"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"https://datatracker.ietf.org/doc/html/rfc8705[RFC8705] describes a mechanism for binding access tokens to Mutual TLS (mTLS) client authentication certificates.\n"
"It requires that a client certificate's SHA256 thumbprint matches a JWT token or token introspection confirmation `x5t#S256` certificate thumbprint."
msgstr ""
"https://datatracker.ietf.org/doc/html/rfc8705[RFC8705] では、アクセストークンを Mutual TLS (mTLS) クライアント認証証明書にバインドするメカニズムについて説明しています。\n"
"クライアント証明書の SHA256 サムプリントが JWT トークンまたはトークンイントロスペクション確認 `x5t#S256` 証明書サムプリントと一致する必要があります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For example, see https://datatracker.ietf.org/doc/html/rfc8705#section-3.1[JWT Certificate Thumbprint Confirmation Method] and https://datatracker.ietf.org/doc/html/rfc8705#section-3.2[Confirmation Method for Token Introspection] sections of https://datatracker.ietf.org/doc/html/rfc8705[RFC8705]."
msgstr "たとえば、 https://datatracker.ietf.org/doc/html/rfc8705[RFC8705] の https://datatracker.ietf.org/doc/html/rfc8705#section-3.1[JWT 証明書のサムプリントの確認方法] および https://datatracker.ietf.org/doc/html/rfc8705#section-3.2[トークンイントロスペクションの確認方法] セクションを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "MTLS token binding supports a `holder of key` concept, and can be used to confirm that the current access token was issued to the current authenticated client who presents this token."
msgstr "MTLS トークンバインディングは `キーの所有者` の概念をサポートしており、現在のアクセストークンがこのトークンを提示する現在の認証済みクライアントに発行されたことを確認するために使用できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "When you use both mTLS and OIDC bearer authentication mechanisms, you can enforce that the access tokens must be certificate bound with a single property, after configuring your Quarkus endpoint and Quarkus OIDC to require the use of mTLS."
msgstr "mTLS と OIDC ベアラー認証メカニズムの両方を使用する場合、Quarkus エンドポイントと Quarkus OIDC で mTLS の使用を要求するように設定した後、強制的にアクセストークンが単一のプロパティーで証明書にバインドされるように指定できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Require that bearer access tokens must be bound to the client certificates."
msgstr "ベアラーアクセストークンをクライアント証明書にバインドする必要があることを必須にします。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "TLS registry configuration for Quarkus OIDC be able to communicate with the OIDC provider over MTLS"
msgstr "Quarkus OIDC の TLS レジストリー設定により、MTLS 経由で OIDC プロバイダーと通信できるようになります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "TLS registry configuration requiring external clients to authenticate to the Quarkus endpoint over MTLS"
msgstr "外部クライアントが MTLS 経由での Quarkus エンドポイントの認証を必須にする TLS レジストリー設定"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The above configuration is sufficient to require that OIDC bearer tokens are bound to the client certificates."
msgstr "上記の設定を使用すると、OIDC ベアラートークンをクライアント証明書にバインドすることが必須にできます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Next, if you need to access both mTLS and OIDC bearer security identities, consider enabling xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Inclusive authentication] with `quarkus.http.auth.inclusive=true`."
msgstr "次に、mTLS と OIDC ベアラーセキュリティーアイデンティティーの両方にアクセスする必要がある場合は、 `quarkus.http.auth.inclusive=true` を使用して xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[統合認証] を有効にすることを検討してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Now you can access both MTLS and OIDC security identities as follows:"
msgstr "次のようにして、MTLS と OIDC の両方のセキュリティーアイデンティティーにアクセスできるようになりました。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "`SecurityIdentity` always represents the primary mTLS authentication when mTLS is used and an inclusive authentication is enabled."
msgstr "mTLS が使用され、統合認証が有効になっている場合、 `SecurityIdentity` は常にプライマリー mTLS 認証を表します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "OIDC security identity is also available because enabling an inclusive authentication requires all registered mechanisms to produce the security identity."
msgstr "統合認証を有効にするには、登録されているすべてのメカニズムでセキュリティーアイデンティティーを生成する必要があるため、OIDC セキュリティーアイデンティティーも利用できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Authentication after an HTTP request has completed"
msgstr "HTTP リクエストが完了した後の認証"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"Sometimes, `SecurityIdentity` for a given token must be created when there is no active HTTP request context.\n"
"The `quarkus-oidc` extension provides `io.quarkus.oidc.TenantIdentityProvider` to convert a token to a `SecurityIdentity` instance.\n"
"For example, one situation when you must verify the token after the HTTP request has completed is when you are processing messages with xref:vertx.adoc#event-bus[Vert.x event bus].\n"
"The example below uses the 'product-order' message within different CDI request contexts.\n"
"Therefore, an injected `SecurityIdentity` would not correctly represent the verified identity and be anonymous."
msgstr ""
"場合によっては、アクティブな HTTP リクエストコンテキストが存在しない場合に、特定のトークンの `SecurityIdentity` を作成する必要があります。\n"
"`quarkus-oidc` エクステンションは、トークンを `SecurityIdentity` インスタンスに変換するための `io.quarkus.oidc.TenantIdentityProvider` を提供します。\n"
"たとえば、HTTP リクエストが完了した後にトークンを検証する必要がある状況の 1 つとして、xref:vertx.adoc#event-bus[Vert.x イベントバス] を使用してメッセージを処理する場合があります。\n"
"以下の例では、さまざまな CDI リクエストコンテキスト内で 'product-order' メッセージを使用しています。\n"
"したがって、注入された `SecurityIdentity` は、検証されたアイデンティティーを正しく表さず、匿名になります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "At this point, the token is not verified when proactive authentication is disabled."
msgstr "この時点では、プロアクティブ認証が無効な場合、トークンは検証されません。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "For the default tenant, the `Tenant` qualifier is optional."
msgstr "デフォルトのテナントの場合、 `Tenant` 修飾子は任意です。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Executes token verification and converts the token to a `SecurityIdentity`."
msgstr "トークンの検証を実行し、トークンを `SecurityIdentity` に変換します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"When the provider is used during an HTTP request, the tenant configuration can be resolved as described in\n"
"the xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy] guide.\n"
"However, when there is no active HTTP request, you must select the tenant explicitly with the `io.quarkus.oidc.Tenant` qualifier."
msgstr ""
"HTTP リクエスト中にプロバイダーが使用される場合、テナント設定を解決できます。\n"
"xref:security-openid-connect-multitenancy.adoc[OpenID Connect マルチテナンシーの使用] ガイドの説明を参照してください。\n"
"ただし、アクティブな HTTP リクエストがない場合は、 `io.quarkus.oidc.Tenant` 修飾子を使用してテナントを明示的に選択する必要があります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"xref:security-openid-connect-multitenancy.adoc#tenant-config-resolver[Dynamic tenant configuration resolution] is currently not supported.\n"
"Authentication that requires a dynamic tenant will fail."
msgstr ""
"xref:security-openid-connect-multitenancy.adoc#tenant-config-resolver[動的テナント設定解決] は現在サポートされていません。\n"
"動的テナントを必要とする認証は失敗します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "OIDC request filters"
msgstr "OIDC リクエストフィルター"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFilter` implementations, which can update or add new request headers, and log requests.\n"
"For more information, see xref:security-oidc-code-flow-authentication.adoc#code-flow-oidc-request-filters[OIDC request filters]."
msgstr ""
"1 つ以上の `OidcRequestFilter` 実装を登録すると、Quarkus から OIDC プロバイダーに対して行われた OIDC リクエストをフィルタリングできます。この実装により、新しいリクエストヘッダーを更新または追加したり、リクエストをログに記録したりできます。\n"
"詳細は、xref:security-oidc-code-flow-authentication.adoc#code-flow-oidc-request-filters[OIDC リクエストフィルター] を参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "OIDC response filters"
msgstr "OIDC レスポンスフィルター"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You can filter responses from the OIDC providers by registering one or more `OidcResponseFilter` implementations, which can check the response status, headers and body in order to log them or perform other actions."
msgstr "1 つ以上の `OidcResponseFilter` 実装を登録することで、OIDC プロバイダーからのレスポンスをフィルタリングできます。これにより、レスポンスのステータス、ヘッダー、本文をチェックして、ログに記録したり、その他のアクションを実行したりできます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "You can have a single filter intercepting all the OIDC responses, or use an `@OidcEndpoint` annotation to apply this filter to the specific endpoint responses only. For example:"
msgstr "すべての OIDC レスポンスをインターセプトする単一のフィルターを使用することも、 `@OidcEndpoint` アノテーションを使用してこのフィルターを特定のエンドポイントレスポンスにのみ適用することもできます。例: "

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Restrict this filter to requests targeting the OIDC discovery endpoint only."
msgstr "このフィルターを、OIDC 検出エンドポイントのみを対象とするリクエストに制限します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Check the response `Content-Type` header."
msgstr "レスポンスの `Content-Type` ヘッダーを確認します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Use `OidcRequestContextProperties` request properties to get the tenant id."
msgstr "テナント ID を取得するには、 `OidcRequestContextProperties` リクエストプロパティーを使用します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Get the response data as String."
msgstr "レスポンスデータを文字列として取得します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Restricting OIDC request and response filters to bearer token flow"
msgstr ""

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "When you have both the bearer access token and xref:security-oidc-code-flow-authentication.adoc[authorization code] flows supported by xref:security-openid-connect-multitenancy.adoc[multiple OIDC tenants] and the filters have to deal with a flow specific logic, you can instead have them restricted to the bearer token flow with the `io.quarkus.oidc.BearerTokenAuthentication` annotation and xref:security-oidc-code-flow-authentication.adoc#restrict-oidc-filter-to-code-flow[the authorization code flow with the 'io.quarkus.oidc.AuthorizationCodeFlow' annotation]."
msgstr ""

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Programmatic OIDC start-up"
msgstr "プログラムによる OIDC のスタートアップ"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "OIDC tenants can be created programmatically like in the example below:"
msgstr "OIDC テナントは、次の例のようにプログラムで作成できます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "The code above is a programmatic equivalent to the following configuration in the `application.properties` file:"
msgstr "上記のコードは、 `application.properties` ファイル内の次の設定とプログラム的に同等です。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "Should you need to configure more OIDC tenant properties, use the `OidcTenantConfig` builder like in the example below:"
msgstr "さらに多くの OIDC テナントプロパティーを設定する必要がある場合は、次の例のように `OidcTenantConfig` ビルダーを使用します。"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid ""
"For more complex setup involving multiple tenants please see the xref:security-openid-connect-multitenancy.adoc#programmatic-startup[Programmatic OIDC start-up for multitenant application]\n"
"section of the OpenID Connect Multi-Tenancy guide."
msgstr ""
"複数のテナントが関係するより複雑な設定については、OpenID Connect マルチテナンシーガイドの xref:security-openid-connect-multitenancy.adoc#programmatic-startup[マルチテナントアプリケーション用のプログラムによる OIDC の起動] \n"
"セクションを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Step Up Authentication"
msgstr "ステップアップ認証"

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"The `io.quarkus.oidc.AuthenticationContext` annotation can be used to list one or more Authentication Context Class Reference (ACR) values to enforce a required authentication level for the Jakarta REST resource classes and methods.\n"
"The https://datatracker.ietf.org/doc/rfc9470/[OAuth 2.0 Step Up Authentication Challenge Protocol] introduces a mechanism for resource servers to request stronger authentication methods when the token does not have expected Authentication Context Class Reference (ACR) values.\n"
"Consider the following example:"
msgstr "`io.quarkus.oidc.AuthenticationContext` アノテーションを使用して、1 つ以上の Authentication Context Class Reference (ACR) 値を列挙し、Jakarta REST リソース・クラスおよびメソッドに必要な認証レベルを強制することができます。 link:https://datatracker.ietf.org/doc/rfc9470/[OAuth 2.0 ステップアップ認証チャレンジ・プロトコルは] 、トークンが期待される認証コンテキスト・クラス・リファレンス（ACR）値を持たない場合に、リソース・サーバがより強力な認証方法を要求するメカニズムを導入します。次の例を考えてみましょう："

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Bearer access token must have an `acr` claim with the `myACR` ACR value."
msgstr "ベアラアクセストークンは、 `myACR` ACR値を持つ `acr` クレームを持つ必要があります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Bearer access token must have an `acr` claim with the `myACR` ACR value and be in use for no longer than 120 minutes since the authentication time."
msgstr "ベアラアクセストークンは、 `myACR` ACR値を持つ `acr` クレームを持ち、認証時刻から120分以内に使用されなければなりません。"

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Disable proactive authentication so that the `@AuthenticationContext` annotation can be matched with the endpoint before Quarkus authenticates incoming requests."
msgstr "プロアクティブ認証を無効にすることで、Quarkusが受信リクエストを認証する前に、 `@AuthenticationContext` アノテーションをエンドポイントと一致させることができます。"

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "If the bearer access token claim `acr` does not contain `myACR`, Quarkus returns an authentication requirements challenge indicating required `acr_values`:"
msgstr "ベアラアクセストークンクレーム（ `acr` ）に `myACR` が含まれていない場合、Quarkus は必要な `acr_values` を示す認証要件チャレンジを返します："

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"HTTP/1.1 401 Unauthorized\n"
"WWW-Authenticate: Bearer error=\"insufficient_user_authentication\",\n"
" error_description=\"A different authentication level is required\",\n"
" acr_values=\"myACR\""
msgstr "HTTP/1.1 401 Unauthorized WWW-Authenticate：Bearer error=\"insufficient_user_authentication\", error_description=\"別の認証レベルが必要です\", acr_values=\"myACR\""

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "When a client such as Single-page application (SPA) receives a challenge with the `insufficient_user_authentication` error code, it must parse `acr_values`, request a new user login which must meet the `acr_values` constraints, and use a new access token to access Quarkus."
msgstr "シングルページアプリケーション（SPA）などのクライアントは、 `insufficient_user_authentication` のエラーコードを含むチャレンジを受信すると、 `acr_values` を解析し、 `acr_values` の制約を満たす新しいユーザーログインを要求し、新しいアクセストークンを使用してQuarkusにアクセスする必要があります。"

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid ""
"The `io.quarkus.oidc.AuthenticationContext` annotation can also be used to enforce required authentication level for a WebSockets Next server endpoint.\n"
"The annotation must be placed on the endpoint class, because the `SecurityIdentity` is created before the HTTP connection is upgraded to a WebSocket connection.\n"
"For more information about the HTTP upgrade security, see the xref:websockets-next-reference.adoc#secure-http-upgrade[Secure HTTP upgrade] section of the Quarkus \"WebSockets Next reference\" guide."
msgstr "`io.quarkus.oidc.AuthenticationContext` アノテーションを使用して、WebSockets Next サーバー・エンドポイントに必要な認証レベルを強制することもできます。 `SecurityIdentity` は、HTTP 接続が WebSocket 接続にアップグレードされる前に作成されるため、アノテーションはエンドポイント・クラスに配置する必要があります。HTTP アップグレードのセキュリティの詳細については、Quarkus \"WebSockets Next reference\" ガイドの xref:websockets-next-reference.adoc#secure-http-upgrade[Secure HTTP upgrade] のセクションを参照してください。"

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "It is also possible to enforce the required authentication level for an OIDC tenant:"
msgstr "また、OIDCテナントに必要な認証レベルを強制することも可能です："

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "Or, if you need more flexibility, write a <<jose4j-validator-bearer>>:"
msgstr "また、より柔軟性が必要な場合は、 <<jose4j-validator-bearer>> ："

#. type: Title ==
#: _guides/security-oidc-bearer-token-authentication.adoc
#, no-wrap
msgid "References"
msgstr "参考資料"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr "xref:security-oidc-configuration-properties-reference.adoc[OIDC 設定プロパティー]"

#: _guides/security-oidc-bearer-token-authentication.adoc
#, fuzzy
msgid "xref:security-oidc-expanded-configuration.adoc[Expanded OIDC Configuration Reference]"
msgstr "xref:security-oidc-expanded-configuration.adoc[拡張OIDC構成リファレンス]"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-oidc-bearer-token-authentication-tutorial.adoc[Protect a service application by using OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication-tutorial.adoc[OIDCベアラートークン認証によるサービスアプリケーションの保護]"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 client and filters reference guide]"
msgstr "xref:security-openid-connect-client-reference.adoc[OpenID Connect および OAuth2 クライアントとフィルターのリファレンスガイド]"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-jwt-build.adoc[Sign and encrypt JWT tokens with SmallRye JWT Build]"
msgstr "xref:security-jwt-build.adoc[JSONウェブトークン (JWT) のビルド、署名、暗号化]"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[OpenID Connect、SmallRye JWT、OAuth2 の認証メカニズムの選択]"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[認証メカニズムの組み合わせ]"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Security の概要]"

#. type: Plain text
#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Admin Client]"
msgstr "xref:security-keycloak-admin-client.adoc[Quarkus Keycloak Adminクライアント]"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]"
msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connect マルチテナンシーの使用]"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "link:https://www.keycloak.org/documentation.html[Keycloak documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[Keycloak ドキュメント]"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "link:https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[OpenID Connect]"

#: _guides/security-oidc-bearer-token-authentication.adoc
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
