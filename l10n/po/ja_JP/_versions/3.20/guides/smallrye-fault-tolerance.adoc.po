msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "SmallRye Fault Tolerance"
msgstr "SmallRyeのフォールト・トレランス"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"One of the challenges brought by the distributed nature of microservices is that communication with external systems is\n"
"inherently unreliable. This increases demand on resiliency of applications. To simplify making more resilient\n"
"applications, Quarkus provides https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance], an\n"
"implementation of the https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance]\n"
"specification."
msgstr "マイクロサービスの分散した性質がもたらす課題の1つは、外部システムとの通信が本質的に信頼できないことです。これにより、アプリケーションの耐障害性に対する要求が高まります。より耐障害性の高いアプリケーションを簡単に作るために、Quarkusは link:https://github.com/eclipse/microprofile-fault-tolerance/[MicroProfile Fault Tolerance]仕様の実装である link:https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance]を提供します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"In this guide, we demonstrate usage of MicroProfile Fault Tolerance annotations such as `@Timeout`, `@Fallback`,\n"
"`@Retry`, `@CircuitBreaker`, and `@RateLimit`."
msgstr "このガイドでは、MicroProfile Fault Tolerance アノテーションである`@Timeout`、`@Fallback`、`@Retry`、`@CircuitBreaker`および `@RateLimit` の使用方法を説明します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "The Scenario"
msgstr "シナリオ"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"The application built in this guide simulates a simple backend for a gourmet coffee e-shop. It implements a REST\n"
"endpoint providing information about coffee samples we have on store."
msgstr "このガイドで構築されたアプリケーションは、グルメコーヒーのeショップのためのシンプルなバックエンドをシミュレートします。これは、店舗にあるコーヒーサンプルに関する情報を提供する REST エンドポイントを実装しています。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Let's imagine, although it's not implemented as such, that some methods in our endpoint require communication\n"
"to external services like a database or an external microservice, which introduces a factor of unreliability."
msgstr "そのような実装はされていませんが、エンドポイントのいくつかのメソッドが、データベースや外部のマイクロサービスなどの外部サービスとの通信を必要とし、信頼性の低い要素を導入することを想像してみましょう。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "The solution is located in the `microprofile-fault-tolerance-quickstart` link:{quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[directory]."
msgstr "ソリューションは `microprofile-fault-tolerance-quickstart` link:{quickstarts-tree-url}/microprofile-fault-tolerance-quickstart[ディレクトリ] にあります。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "This command generates a project, importing the extensions for Quarkus REST (formerly RESTEasy Reactive)/Jakarta REST and SmallRye Fault Tolerance."
msgstr "このコマンドはプロジェクトを生成し、Quarkus REST（旧RESTEasy Reactive）/Jakarta RESTおよびSmallRye Fault Toleranceのエクステンションをインポートします。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-fault-tolerance` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `smallrye-fault-tolerance` エクステンションを追加することができます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Preparing an Application: REST Endpoint and CDI Bean"
msgstr "アプリケーションの準備: RESTエンドポイントとCDI Bean"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"In this section we create a skeleton of our application, so that we have something that we can extend and to which\n"
"we can add fault tolerance features later on."
msgstr "このセクションでは、後でフォールトトレランス機能を追加できるよう、拡張可能なようにアプリケーションの骨組を作成します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "First, create a simple entity representing a coffee sample in our store:"
msgstr "まず、お店のコーヒーサンプルを表すシンプルなエンティティを作成します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Let's continue with a simple CDI bean, that would work as a repository of our coffee samples."
msgstr "続いて、コーヒーのサンプルのrepositoryとして動作するシンプルなCDIビーンです。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Finally, create the `org.acme.microprofile.faulttolerance.CoffeeResource` class as follows:"
msgstr "最後に、 `org.acme.microprofile.faulttolerance.CoffeeResource` クラスを以下のように作成します。 :"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"At this point, we expose a single REST method that will show a list of coffee samples in a JSON format. Note\n"
"that we introduced some fault making code in our `CoffeeResource#maybeFail()` method, which is going to cause failures\n"
"in the `CoffeeResource#coffees()` endpoint method in about 50 % of requests."
msgstr "この時点で、コーヒーサンプルのリストを JSON 形式で表示する単一の REST メソッドを公開しています。 `CoffeeResource#maybeFail()` メソッドにいくつかの障害を発生させるコードを導入したことに注意してください。これにより、リクエストの約 50 % で `CoffeeResource#coffees()` エンドポイントメソッドに障害が発生します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Why not check that our application works? Run the Quarkus development server with:"
msgstr "アプリケーションが動作することを確認してみましょう。次のようにQuarkusの開発サーバーを起動してください。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"and open `http://localhost:8080/coffee` in your browser. Make a couple of requests (remember, some of them are expected\n"
"to fail). At least some requests should show us the list of our coffee samples in JSON, the rest will fail\n"
"with a `RuntimeException` thrown in `CoffeeResource#maybeFail()`."
msgstr "`http://localhost:8080/coffee` をブラウザで開きます。いくつかのリクエストを行います（いくつかのリクエストは失敗することを想定しています）。少なくともいくつかのリクエストは、コーヒーサンプルのリストをJSONで表示してくれるはずです。残りのリクエストは、  `CoffeeResource#maybeFail()` 内で `RuntimeException` をスローして失敗します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Congratulations, you've just made a working (although somewhat unreliable) Quarkus application!"
msgstr "おめでとうございます！（多少信頼性に欠けるものの）Quarkusアプリケーションが完成しました。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Adding Resiliency: Retries"
msgstr "レジリエンスの追加: リトライ"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Let the Quarkus development server running and in your IDE add the `@Retry` annotation to the `CoffeeResource#coffees()`\n"
"method as follows and save the file:"
msgstr "Quarkusの開発サーバーを稼働させ、IDEで以下のように `CoffeeResource#coffees()` メソッドに `@Retry` アノテーションを追加し、ファイルを保存します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Hit refresh in your browser. The Quarkus development server will automatically detect the changes\n"
"and recompile the app for you, so there's no need to restart it."
msgstr "ブラウザの更新を実行します。Quarkusの開発サーバーが自動的に変更を検出してアプリを再コンパイルしてくれるので、再起動する必要はありません。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"You can hit refresh couple more times. Practically all requests should now be succeeding. The `CoffeeResource#coffees()`\n"
"method is still in fact failing in about 50 % of time, but every time it happens, the platform will automatically retry\n"
"the call!"
msgstr "もう何度か更新ボタンを押してください。実質的にすべてのリクエストが成功しているはずです。 `CoffeeResource#coffees()` メソッドは、実際にはまだ約 50% の時間で失敗していますが、そのたびにプラットフォームは自動的に呼び出しを再試行します!"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"To see that the failures still happen, check the output of the development server. The log messages should be\n"
"similar to these:"
msgstr "障害がまだ発生していることを確認するには、開発サーバーの出力をチェックします。ログメッセージは以下のようになっているはずです。 :"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"You can see that every time an invocation fails, it's immediately followed by another invocation, until one succeeds.\n"
"Since we allowed 4 retries, it would require 5 invocations to fail in a row, in order for the user to be actually exposed\n"
"to a failure. Which is fairly unlikely to happen."
msgstr "呼び出しが失敗するたびに、すぐに別の呼び出しが成功するまで続いていることがわかります。4回のリトライを許可しているので、ユーザーが実際に失敗にさらされるためには、5回の呼び出しが連続して失敗する必要があります。これは起こりそうもないことです。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Adding Resiliency: Timeouts"
msgstr "レジリエンスの追加: タイムアウト"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "So what else have we got in MicroProfile Fault Tolerance? Let's look into timeouts."
msgstr "では、MicroProfile Fault Toleranceには他に何があるのでしょうか。タイムアウトについて見てみましょう。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Add following two methods to our `CoffeeResource` endpoint. Again, no need to restart the server, just paste the code\n"
"and save the file."
msgstr "`CoffeeResource` エンドポイントに以下の 2 つのメソッドを追加します。ここでもサーバーを再起動する必要はなく、コードを貼り付けてファイルを保存するだけです。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"We added some new functionality. We want to be able to recommend some related coffees based on a coffee that a user\n"
"is currently looking at. It's not a critical functionality, it's a nice-to-have. When the system is overloaded and the\n"
"logic behind obtaining recommendations takes too long to execute, we would rather time out and render the UI without\n"
"recommendations."
msgstr "いくつかの新しい機能を追加しました。ユーザーが現在見ているコーヒーに基づいて、関連するコーヒーをお勧めできるようにしたいのです。これは重要な機能ではなく、あれば望ましい機能です。システムに負荷がかかり、おすすめ情報を得るためのロジックの実行に時間がかかりすぎる場合は、むしろタイムアウトしておすすめ情報のないUIを表示したいと考えています。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Note that the timeout was configured to 250 ms, and a random artificial delay between 0 and 500 ms was introduced\n"
"into the `CoffeeResource#recommendations()` method."
msgstr "なお、タイムアウトは250msに設定し、0～500msのランダムな人工的な遅延が `CoffeeResource#recommendations()` メソッドに導入されたことに注意してください。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "In your browser, go to `http://localhost:8080/coffee/2/recommendations` and hit refresh a couple of times."
msgstr "お使いのブラウザで `http://localhost:8080/coffee/2/recommendations` にアクセスして、2、3回更新してください。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"You should see some requests time out with `org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException`.\n"
"Requests that do not time out should show two recommended coffee samples in JSON."
msgstr "`org.eclipse.microprofile.faulttolerance.exceptions.TimeoutException` でいくつかのリクエストがタイムアウトになるはずです。タイムアウトにならなかったリクエストでは、JSONに2つのおすすめコーヒーサンプルが表示されます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Adding Resiliency: Fallbacks"
msgstr "レジリエンスの追加: フォールバック"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Let's make our recommendations feature even better by providing a fallback (and presumably faster) way of getting related\n"
"coffees."
msgstr "関連するコーヒーを入手するための代替手段（おそらくより迅速な方法）を提供することで、おすすめ機能をさらに改善しましょう。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Add a fallback method to `CoffeeResource` and a `@Fallback` annotation to `CoffeeResource#recommendations()` method\n"
"as follows:"
msgstr "`CoffeeResource` にフォールバック・メソッドを、 `CoffeeResource#recommendations()` メソッドに `@Fallback` アノテーションを以下のように追加します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Hit refresh several times on `http://localhost:8080/coffee/2/recommendations`.\n"
"The `TimeoutException` should not appear anymore. Instead, in case of a timeout, the page will\n"
"display a single recommendation that we hardcoded in our fallback method `fallbackRecommendations()`, rather than\n"
"two recommendations returned by the original method."
msgstr "`http://localhost:8080/coffee/2/recommendations` を何回も更新してください。 `TimeoutException` はもう表示されないはずです。代わりに、タイムアウトが発生した場合、元のメソッドが返す2つのレコメンデーションではなく、フォールバックメソッド `fallbackRecommendations()` にハードコードされた1つのレコメンデーションが表示されます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Check the server output to see that fallback is really happening:"
msgstr "フォールバックが本当に行われているかどうか、サーバーの出力を確認してください。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "The fallback method is required to have the same parameters as the original method."
msgstr "フォールバックメソッドには、元のメソッドと同じパラメータが必要です。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Adding Resiliency: Circuit Breaker"
msgstr "レジリエンスの追加: サーキットブレーカー"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"A circuit breaker is useful for limiting number of failures happening in the system, when part of the system becomes\n"
"temporarily unstable. The circuit breaker records successful and failed invocations of a method, and when the ratio\n"
"of failed invocations reaches the specified threshold, the circuit breaker _opens_ and blocks all further invocations\n"
"of that method for a given time."
msgstr "サーキットブレーカーは，システムの一部が一時的に不安定になったときに，システム内で発生する障害の数を制限するのに有効です。サーキットブレーカーは、あるメソッドの成功と失敗を記録し、失敗したメソッドの割合が指定された閾値に達すると、サーキットブレーカーが _開き_、それ以降のメソッドの呼び出しを一定時間ブロックします。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Add the following code into the `CoffeeRepositoryService` bean, so that we can demonstrate a circuit breaker in action:"
msgstr "次のコードを `CoffeeRepositoryService` ビーンに追加して、サーキットブレーカーの動作をデモできるようにします。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "And inject the code below into the `CoffeeResource` endpoint:"
msgstr "そして、以下のコードを `CoffeeResource` のエンドポイントに注入します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"We added another functionality - the application can return the amount of remaining packages of given coffee on our store\n"
"(just a random number)."
msgstr "もう一つの機能を追加しました。このアプリケーションは、私たちの店における、指定されたコーヒーの残りのパッケージの量を返すことができます（単なる乱数です）。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"This time an artificial failure was introduced in the CDI bean: the `CoffeeRepositoryService#getAvailability()` method is\n"
"going to alternate between two successful and two failed invocations."
msgstr "今回は、CDIビーンに人工的な失敗を導入しました。 `CoffeeRepositoryService#getAvailability()` メソッドは、2回の成功と2回の失敗の呼び出しを交互に行うことになります。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"We also added a `@CircuitBreaker` annotation with `requestVolumeThreshold = 4`. `CircuitBreaker.failureRatio` is\n"
"by default 0.5, and `CircuitBreaker.delay` is by default 5 seconds. That means that a circuit breaker will open\n"
"when 2 of the last 4 invocations failed, and it will stay open for 5 seconds."
msgstr "また、 `@CircuitBreaker`アノテーションを追加し、 `requestVolumeThreshold = 4`としました。 `CircuitBreaker.failureRatio` はデフォルトで 0.5 で、 `CircuitBreaker.delay` はデフォルトで 5 秒です。つまり、過去4回の起動のうち2回が失敗した場合にサーキットブレーカーが開き、5秒間その状態のままになります。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "To test this out, do the following:"
msgstr "これを試すには、次のようにします。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Go to `http://localhost:8080/coffee/2/availability` in your browser. You should see a number being returned."
msgstr " `http://localhost:8080/coffee/2/availability` をブラウザで開いて下さい。数字が返ってくるのが見えるでしょう。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Hit refresh, this second request should again be successful and return a number."
msgstr "リフレッシュすると、この2回目のリクエストが再び成功し、数字が返ってくるはずです。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Refresh two more times. Both times you should see text \"RuntimeException: Service failed.\", which is the exception\n"
"thrown by `CoffeeRepositoryService#getAvailability()`."
msgstr "さらに2回リフレッシュします。2回とも、\"RuntimeException:Service failed.\" というテキストが表示されます。これは、 `CoffeeRepositoryService#getAvailability()` によってスローされる例外です。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Refresh a couple more times. Unless you waited too long, you should again see exception, but this time it's\n"
"\"CircuitBreakerOpenException: getAvailability\". This exception indicates that the circuit breaker opened\n"
"and the `CoffeeRepositoryService#getAvailability()` method is not being called anymore."
msgstr "さらに数回更新します。長く待ちすぎていなければ、再び例外が表示されるはずですが、今回は \"CircuitBreakerOpenException: getAvailability\" となっています。この例外は、サーキットブレーカーが開き、 `CoffeeRepositoryService#getAvailability()` メソッドが呼び出されなくなったことを示しています。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Give it 5 seconds during which circuit breaker should close, and you should be able to make two successful requests\n"
"again."
msgstr "5秒後にサーキットブレーカーが閉じて、再び2回のリクエストを成功させるようになります。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Adding Resiliency: Rate Limits"
msgstr "レジリエンスの追加: 流量制御"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "This is an additional feature of https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance] and is not specified by MicroProfile Fault Tolerance."
msgstr "これは https://github.com/smallrye/smallrye-fault-tolerance/[SmallRye Fault Tolerance] の追加機能であり、MicroProfile Fault Tolerance では指定されていません。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "It is possible to prevent an operation from being executed too often using a _rate limit_. Rate limits enforce a maximum number of permitted invocations in a time window of some length. For example, with a rate limit, one can make sure that a method may only be called 50 times per minute. Invocations that would exceed the limit are rejected with an exception of type `RateLimitException`."
msgstr "ある操作が過剰に実行されるのを防ぐために、_流量制御_ を使用できます。流量制御は、一定の時間枠内で許可される最大呼び出し回数を制限します。たとえば、流量制御を使用すると、あるメソッドが 1分間に最大 50 回までしか呼び出されないように制御できます。制限を超える呼び出しは拒否され、`RateLimitException` 型の例外がスローされます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Additionally, it is possible to define minimum spacing between invocations. For example, with a minimum spacing of 1 second, if a second invocation happens 500 millis after the first, it is rejected even if the limit would not be exceeded yet."
msgstr "さらに、呼び出しと呼び出しの間の最小間隔を定義することもできます。たとえば、最小間隔が 1 秒の場合、最初の呼び出しから 500 ミリ秒後に 2 番目の呼び出しが行われた場合、制限を超えていなくても拒否されます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Rate limit is superficially similar to a bulkhead (concurrency limit), but is in fact quite different. Bulkhead limits the number of executions happening concurrently at any point in time. Rate limit limits the number of executions in a time window of some length, without considering concurrency."
msgstr "流量制御は表面的にはバルクヘッド (同時実行制限) に似ていますが、実際はまったく異なります。バルクヘッドは、任意の時点で同時に発生する実行数を制限します。流量制御は、同時実行を考慮せずに、一定の時間枠内での実行数を制限します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Rate limits need to maintain some state between invocations: the number of recent invocations, the time stamp of last invocation, and so on. This state is a singleton, irrespective of the lifecycle of the bean that uses the `@RateLimit` annotation."
msgstr "流量制御では、呼び出しと呼び出しの間で何らかの状態を維持する必要があります。たとえば、最近の呼び出し回数、最後の呼び出しのタイムスタンプなどです。この状態はシングルトンで、`@RateLimit` アノテーションを使用する Bean のライフサイクルは関係ありません。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "More specifically, the rate limit state is uniquely identified by the combination of the bean class (`java.lang.Class`) and the method object (`java.lang.reflect.Method`) representing the guarded method."
msgstr "具体的には、流量制御の状態は、Bean クラス (`java.lang.Class`) と、保護されたメソッドを表すメソッドオブジェクト (`java.lang.reflect.Method`) の組み合わせによって一意に識別されます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Let the Quarkus development mode run and in your IDE add the `@RateLimit` annotation to the `CoffeeResource#coffees()` method as follows and save the file:"
msgstr "Quarkus 開発モードを実行し、IDE で次のように `CoffeeResource#coffees()` メソッドに `@RateLimit` アノテーションを追加してファイルを保存します。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Hit refresh in your browser. The Quarkus development server will automatically detect the changes and recompile the app for you, so there’s no need to restart it."
msgstr "ブラウザーで更新を押してください。Quarkus 開発サーバーは自動的に変更を検出し、アプリケーションを再コンパイルするので、再起動する必要はありません。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "You can hit refresh a couple more times. After 2 requests within a 10 second interval you should start seeing errors in the logs, similar to these:"
msgstr "さらに数回更新を押すことができます。10 秒間隔で 2 回のリクエストを実行すると、ログに次のようなエラーが表示されるようになります。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "If `@Fallback` is used with `@RateLimit`, the fallback method or handler may be invoked if a `RateLimitException` is thrown, depending on the fallback configuration."
msgstr "`@Fallback` が `@RateLimit` とともに使用される場合、フォールバック設定に応じて、`RateLimitException` が出力されると、フォールバックメソッドまたはハンドラーが呼び出されることがあります。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "If `@Retry` is used with `@RateLimit`, each retry attempt is processed by the rate limit as an independent invocation. If `RateLimitException` is thrown, the execution may be retried, depending on how the retry is configured."
msgstr "`@Retry` を `@RateLimit` と一緒に使用すると、各再試行はレート制限によって独立した呼び出しとして処理されます。`RateLimitException` が出力された場合、再試行の設定方法に応じて実行が再試行されることがあります。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "If `@CircuitBreaker` is used with `@RateLimit`, the circuit breaker is checked before enforcing the rate limit. If rate limiting results in `RateLimitException`, this may be counted as a failure, depending on how the circuit breaker is configured."
msgstr "`@CircuitBreaker` を `@RateLimit` と一緒に使用すると、流量制御を適用する前にサーキットブレーカーがチェックされます。レート制限によって `RateLimitException` が発生した場合、サーキットブレーカーの設定によっては、失敗としてカウントされることがあります。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Runtime configuration"
msgstr "実行時設定"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "You can override the annotations parameters at runtime inside your `application.properties` file."
msgstr "`application.properties` ファイルの中で、実行時にアノテーションパラメータをオーバーライドすることができます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "If we take the retry example that we already saw:"
msgstr "先ほどのリトライの例で言えば"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "We can override the `maxRetries` parameter with 6 retries instead of 4 by the following configuration item:"
msgstr "以下の設定項目により、 `maxRetries` パラメータをオーバーライドして、リトライ回数を4回から6回に変更することができます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"The full set of Quarkus-native configuration properties is detailed in the <<configuration-reference>>.\n"
"The specification-defined configuration properties are still supported, but the Quarkus-native configuration takes priority."
msgstr ""
"Quarkus ネイティブの設定プロパティーの完全なセットについては、<<configuration-reference>> で説明されています。\n"
"仕様定義の設定プロパティーは引き続きサポートされますが、Quarkus ネイティブ設定が優先されます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"SmallRye Fault Tolerance allows to improve resiliency of your application, without having an impact on the complexity\n"
"of our business logic."
msgstr "SmallRye Fault Toleranceは、ビジネスロジックの複雑さに影響を与えることなく、アプリケーションの耐障害性を向上させます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "All that is needed to enable the fault tolerance features in Quarkus is:"
msgstr "Quarkusのフォールトトレランス機能を有効にするために必要なのは"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "adding the `smallrye-fault-tolerance` Quarkus extension to your project using the `quarkus-maven-plugin`:"
msgstr "`quarkus-maven-plugin` で `smallrye-fault-tolerance` Quarkus エクステンションをプロジェクトに追加することです :"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "CLI"
msgstr "コマンドラインインタフェース"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Gradle"
msgstr "Gradle"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "or simply adding the following Maven dependency:"
msgstr "または、単に以下のMaven依存関係を追加するだけです:"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Additional resources"
msgstr "追加リソース"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"SmallRye Fault Tolerance has more features than shown here.\n"
"Please check the link:https://smallrye.io/docs/smallrye-fault-tolerance/6.9.2/index.html[SmallRye Fault Tolerance documentation] to learn about them."
msgstr ""

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "In Quarkus, you can use the SmallRye Fault Tolerance optional features out of the box."
msgstr "Quarkusでは、SmallRye Fault Toleranceのオプション機能をすぐに使用することができます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Support for Mutiny is present, so your asynchronous methods can return `Uni` in addition to `CompletionStage`."
msgstr "Mutinyがサポートされているので、非同期のメソッドは `CompletionStage` だけでなく `Uni` を返すことができます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "MicroProfile Context Propagation is integrated with Fault Tolerance, so existing contexts are automatically propagated to your asynchronous methods."
msgstr "MicroProfile Context PropagationはFault Toleranceと統合されているので、既存のコンテキストは自動的に非同期メソッドに伝搬されます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"This also applies to the CDI request context: if it is active on the original thread, it is propagated to the new thread, but if it's not, then the new thread won't have it either.\n"
"This is contrary to MicroProfile Fault Tolerance specification, which states that the request context must be active during the `@Asynchronous` method invocation."
msgstr "これは CDI リクエストコンテキストにも当てはまります。もしオリジナルのスレッドでアクティブであれば、新しいスレッドに伝搬されますが、もしそうでなければ、新しいスレッドはそれを持ちません。 これは MicroProfile Fault Tolerance 仕様に反しており、  `@Asynchronous`  メソッド呼び出しの間はリクエストコンテキストがアクティブでなければならないとされています。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"We believe that in presence of MicroProfile Context Propagation, this requirement should not apply.\n"
"The entire point of context propagation is to make sure the new thread has the same contexts as the original thread."
msgstr "MicroProfile Context Propagationがある場合、この要件は適用されるべきではないと考えています。コンテキスト伝搬の主な目的は、新しいスレッドが元のスレッドと同じコンテキストを持っていることを確認することにあります。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Non-compatible mode is enabled by default.\n"
"This means that methods that return `CompletionStage` (or `Uni`) have asynchronous fault tolerance applied without the `@Asynchronous` or `@AsynchronousNonBlocking` annotation.\n"
"It also means that circuit breaker, fallback and retry automatically inspect the exception cause chain if the exception itself is insufficient to decide what should happen."
msgstr ""
"非互換モードはデフォルトで有効に指定されています。\n"
"この設定では、`CompletionStage` (または `Uni`) を返すメソッドに、`@Asynchronous` または `@AsynchronousNonBlocking` アノテーションなしで非同期フォールトトレランスが適用されます。\n"
"また、例外自体が何が起こるかを決定するのに不十分な場合、サーキットブレーカー、フォールバック、再試行によって例外原因チェーンが自動的に検査されることになります。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"This mode is not compatible with the MicroProfile Fault Tolerance specification, albeit the incompatibility is very small.\n"
"To restore full compatibility, add this configuration property:"
msgstr "このモードは、非互換性は非常に小さいものの、MicroProfile Fault Tolerance仕様と互換性がありません。 完全な互換性を回復するには、このコンフィギュレーションプロパティを追加してください。 :"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"The link:https://smallrye.io/docs/smallrye-fault-tolerance/6.9.2/reference/programmatic-api.html[programmatic API] is present and integrated with the declarative, annotation-based API.\n"
"You can use the `Guard`, `TypedGuard` and `@ApplyGuard` APIs out of the box."
msgstr ""

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Support for Kotlin is present (assuming you use the Quarkus extension for Kotlin), so you can guard your `suspend` functions with fault tolerance annotations."
msgstr "Kotlinのサポートがあるため（Kotlin用のQuarkusエクステンションを使用することが前提）、フォールトトレランスのアノテーションで `suspend` 関数を保護することができます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"Metrics are automatically discovered and integrated.\n"
"If your application uses the Quarkus extension for Micrometer, SmallRye Fault Tolerance will emit metrics to Micrometer.\n"
"If your application uses the Quarkus extension for SmallRye Metrics, SmallRye Fault Tolerance will emit metrics to MicroProfile Metrics.\n"
"Otherwise, SmallRye Fault Tolerance metrics will be disabled."
msgstr "メトリクスは自動的に検出され、統合されます。 アプリケーションでQuarkus Extension for Micrometerを使用している場合、SmallRye Fault ToleranceからMicrometerにメトリクスが送信されます。 アプリケーションがSmallRye Metrics用のQuarkusエクステンションを使用している場合、SmallRye Fault ToleranceはMicroProfile Metricsにメトリクスを送信します。 そうでない場合は、SmallRye Fault Toleranceのメトリクスは無効になります。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Configuration reference"
msgstr "設定リファレンス"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "The `\"<identifier>\"` below is:"
msgstr "以下の `\"<identifier>\"`:"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`\"<classname>/<methodname>\"` for per method configuration"
msgstr "`\"<classname>/<methodname>\"`: メソッドごとの設定"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`\"<classname>\"` for per class configuration"
msgstr "`\"<classname>\"`: クラスごとの設定"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`global` for global configuration"
msgstr "`global`: グローバル設定"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"It may also be an `@Identifier` value for configuring a programmatically constructed `Guard` or `TypedGuard` that is used declaratively through `@ApplyGuard`.\n"
"Note that in this case, the `Guard`/`TypedGuard` should *NEVER* be used programmatically, because configuration is applied on creation, which happens lazily, on the first use.\n"
"This first use must be through `@ApplyGuard`, otherwise configuration would be ignored."
msgstr ""
"また、`@ApplyGuard` を通じて宣言的に使用される、プログラムで構築された `Guard` または `TypedGuard` を設定するための `@Identifier` 値になる場合もあります。\n"
"この場合、設定は作成時に適用され、最初の使用時に遅延実行されるため、`Guard`/`TypedGuard` はプログラムで *決して* 使用してはならないことに注意してください。\n"
"この最初の使用は `@ApplyGuard` を介して行う必要があります。そうでない場合、設定は無視されます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "This is how the specification-defined properties are mapped to the Quarkus-native configuration:"
msgstr "仕様定義のプロパティーが Quarkus ネイティブ設定にマッピングされる方法は次のとおりです。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Specification-defined config property"
msgstr "仕様定義の設定プロパティー"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "Quarkus-native config property"
msgstr "Quarkus ネイティブ設定プロパティー"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`<classname>/<methodname>/<annotation>/<member>`"
msgstr "`<classname>/<methodname>/<annotation>/<member>`"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`quarkus.fault-tolerance.\"<classname>/<methodname>\".<annotation>.<member>`"
msgstr "`quarkus.fault-tolerance.\"<classname>/<methodname>\".<annotation>.<member>`"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`<classname>/<annotation>/<member>`"
msgstr "`<classname>/<annotation>/<member>`"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`quarkus.fault-tolerance.\"<classname>\".<annotation>.<member>`"
msgstr "`quarkus.fault-tolerance.\"<classname>\".<annotation>.<member>`"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`<annotation>/<member>`"
msgstr "`<annotation>/<member>`"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`quarkus.fault-tolerance.global.<annotation>.<member>`"
msgstr "`quarkus.fault-tolerance.global.<annotation>.<member>`"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`MP_Fault_Tolerance_NonFallback_Enabled`"
msgstr "`MP_Fault_Tolerance_NonFallback_Enabled`"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`quarkus.fault-tolerance.enabled`"
msgstr "`quarkus.fault-tolerance.enabled`"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`MP_Fault_Tolerance_Metrics_Enabled`"
msgstr "`MP_Fault_Tolerance_Metrics_Enabled`"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`quarkus.fault-tolerance.metrics.enabled`"
msgstr "`quarkus.fault-tolerance.metrics.enabled`"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid ""
"All the `<annotation>` and `<member>` parts are changed from camel case (`BeforeRetry`, `methodName`) to kebab case (`before-retry`, `method-name`).\n"
"Two annotation members are special cased to improve consistency:"
msgstr ""
"すべての `<annotation> ` および `<member> ` の部分は、キャメルケース (`BeforeRetry`、`methodName`) からケバブケース (`before-retry`、`method-name`) に変更されます。\n"
"一貫性を向上させるために、2 つのアノテーションメンバーが特別に処理されます。"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`Retry/durationUnit` moves to `retry.max-duration-unit`"
msgstr "`Retry/durationUnit` は `retry.max-duration-unit` に"

#: _versions/3.20/guides/smallrye-fault-tolerance.adoc
msgid "`Retry/jitterDelayUnit` moves to `retry.jitter-unit`"
msgstr "`Retry/jitterDelayUnit` は `retry.jitter-unit` に変更されます。"
