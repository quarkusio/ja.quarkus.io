msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.20/guides/container-image.adoc
msgid "Container Images"
msgstr "コンテナーイメージ"

#: _versions/3.20/guides/container-image.adoc
msgid "Quarkus provides extensions for building (and pushing) container images. Currently, it supports:"
msgstr "Quarkus は、コンテナーイメージをビルド (およびプッシュ) するためのエクステンションを提供しています。現在は以下をサポートしています。"

#: _versions/3.20/guides/container-image.adoc
msgid "<<#jib,Jib>>"
msgstr "<<#jib,Jib>>"

#: _versions/3.20/guides/container-image.adoc
msgid "<<#docker,Docker>>"
msgstr "<<#docker,Docker>>"

#: _versions/3.20/guides/container-image.adoc
msgid "<<#podman,Podman>>"
msgstr "xref:podman[Podman]"

#: _versions/3.20/guides/container-image.adoc
msgid "<<#openshift,OpenShift>>"
msgstr "<<#openshift,OpenShift>>"

#: _versions/3.20/guides/container-image.adoc
msgid "<<#buildpack,Buildpack>>"
msgstr "<<#buildpack,Buildpack>>"

#: _versions/3.20/guides/container-image.adoc
msgid "Container Image extensions"
msgstr "コンテナーイメージのエクステンション"

#: _versions/3.20/guides/container-image.adoc
msgid "Jib"
msgstr "Jib"

#: _versions/3.20/guides/container-image.adoc
msgid ""
"The extension `quarkus-container-image-jib` is powered by https://github.com/GoogleContainerTools/jib[Jib] for performing container image builds.\n"
"The major benefit of using Jib with Quarkus is that all the dependencies (everything found under `target/lib`) are cached in a different layer than the actual application making rebuilds really fast and small (when it comes to pushing).\n"
"Another important benefit of using this extension is that it provides the ability to create a container image without having to have any dedicated client side tooling (like Docker) or running daemon processes (like the Docker daemon)\n"
"when all that is needed is the ability to push to a container image registry."
msgstr "エクステンション `quarkus-container-image-jib` は、コンテナーイメージのビルドを実行するために link:https://github.com/GoogleContainerTools/jib[Jib] を使用しています。Jib を Quarkus で使用する主な利点は、すべての依存関係 (`target/lib` の下にあるすべてのもの) が実際のアプリケーションとは別のレイヤーにキャッシュされるため、リビルドが非常に高速かつ小規模に (プッシュする場合) 行えることです。このエクステンションを使用するもう 1 つの重要な利点は、コンテナーイメージレジストリーにプッシュする機能さえあれば、専用のクライアントサイドツール (Docker など) やデーモンプロセス (Docker デーモンなど) を実行しなくてもコンテナーイーメージを作成できることです。"

#: _versions/3.20/guides/container-image.adoc
msgid "To use this feature, add the following extension to your project:"
msgstr "この機能を使用するには、以下のエクステンションをプロジェクトに追加します。"

#: _versions/3.20/guides/container-image.adoc
msgid ""
"In situations where all that is needed to build a container image and no push to a registry is necessary (essentially by having set `quarkus.container-image.build=true` and left `quarkus.container-image.push` unset - it defaults to `false`), then this extension creates a container image and registers\n"
"it with the Docker daemon. This means that although Docker isn't used to build the image, it is nevertheless necessary. Also note that using this mode, the built container image *will*\n"
"show up when executing `docker images`."
msgstr "必要なことがコンテナーイメージを構築するだけで、レジストリーへのプッシュが不要な場合 (基本的には `quarkus.container-image.build=true` を設定して `quarkus.container-image.push` のままにしておくことで、デフォルトは `false` になります)、このエクステンションはコンテナーイメージを作成し、Docker デーモンに登録します。これは、Docker がイメージのビルドには使われなくても必要であることを意味します。また、このモードを使用すると、 `docker images` を実行するとコンテナーイメージが表示されます。"

#: _versions/3.20/guides/container-image.adoc
msgid "Including extra files"
msgstr "追加ファイルの追加"

#: _versions/3.20/guides/container-image.adoc
msgid ""
"There are cases when additional files (other than ones produced by the Quarkus build) need to be added to a container image.\n"
"To support these cases, Quarkus copies any file under `src/main/jib` into the built container image (which is essentially the same\n"
"idea that the Jib Maven and Gradle plugins support).\n"
"For example, the presence of `src/main/jib/foo/bar` would result in  `/foo/bar` being added into the container filesystem."
msgstr "コンテナーイメージに追加のファイル(Quarkus のビルドで作成されたもの以外)を追加する必要がある場合があります。このような場合に対応するため、Quarkus は、 `src/main/jib` 以下のファイルをすべてビルドされたコンテナーイメージにコピーします (これは、Jib Maven や Gradle プラグインがサポートしているのと基本的に同じ考え方です)。例えば、 `src/main/jib/foo/bar` が存在すると、 `/foo/bar` がコンテナファイルシステムに追加されます。"

#: _versions/3.20/guides/container-image.adoc
msgid "JVM Debugging"
msgstr "JVM デバッグ"

#: _versions/3.20/guides/container-image.adoc
msgid "There are cases where the built container image may need to have Java debugging conditionally enabled at runtime."
msgstr "ビルドしたコンテナイメージでは、実行時に条件付きでJavaデバッグを有効にする必要がある場合があります。"

#: _versions/3.20/guides/container-image.adoc
msgid ""
"When the base image has not been changed (and therefore `ubi9/openjdk-17-runtime`, or `ubi9/openjdk-21-runtime` is used), then the `quarkus.jib.jvm-additional-arguments` configuration property can be used in order to\n"
"make the JVM listen on the debug port at startup."
msgstr "ベース・イメージが変更されていない場合（したがって `ubi9/openjdk-17-runtime` 、または `ubi9/openjdk-21-runtime` ）、起動時にJVMにデバッグ・ポートをリッスンさせるために、 `quarkus.jib.jvm-additional-arguments` 設定プロパティを使用できます。"

#: _versions/3.20/guides/container-image.adoc
msgid "The exact configuration is:"
msgstr "具体的な構成例:"

#: _versions/3.20/guides/container-image.adoc
msgid "Other base images might provide launch scripts that enable debugging when an environment variable is set, in which case you would set than environment variable when launching the container."
msgstr "他のベースイメージでは、環境変数の設定によりデバッグが可能になる起動スクリプトが提供されている場合があり、その場合はコンテナの起動時に環境変数を設定します。"

#: _versions/3.20/guides/container-image.adoc
msgid "Custom Entrypoint"
msgstr "カスタムエントリーポイント"

#: _versions/3.20/guides/container-image.adoc
msgid "The `quarkus.jib.jvm-entrypoint` configuration property can be used to completely override the container entry point and can thus be used to either hard code the JVM debug configuration or point to a script that handles the details."
msgstr "最後に、 `quarkus.jib.jvm-entrypoint` 設定プロパティを使用すると、コンテナのエントリポイントを完全にオーバーライドすることができるため、JVMのデバッグ構成をハードコードするか、詳細を処理するスクリプトを指定することができます。"

#: _versions/3.20/guides/container-image.adoc
msgid "For example, if the base images `ubi9/openjdk-17-runtime` or  `ubi9/openjdk-21-runtime` are used to build the container, the entry point can be hard-coded on the application properties file."
msgstr "たとえば、コンテナのビルドにベースイメージ `ubi9/openjdk-17-runtime` または `ubi9/openjdk-21-runtime` を使用する場合、アプリケーションのプロパティファイルにエントリポイントをハードコードすることができます。"

#: _versions/3.20/guides/container-image.adoc
msgid "Example application.properties"
msgstr "application.properties の例"

#: _versions/3.20/guides/container-image.adoc
msgid "Or a custom start-up script can be created and referenced on the properties file. This approach works better if there's a need to set application params using environment variables:"
msgstr "または、カスタムスタートアップスクリプトを作成し、プロパティファイルで参照することもできます。この方法は、環境変数を使用してアプリケーションのパラメータを設定する必要がある場合に有効です。"

#: _versions/3.20/guides/container-image.adoc
msgid "Example src/main/jib/home/jboss/run-java.sh"
msgstr "例 src/main/jib/home/jboss/run-java.sh"

#: _versions/3.20/guides/container-image.adoc
msgid "`/home/jboss` is the WORKDIR for all quarkus binaries in the base images `ubi9/openjdk-17-runtime` and `ubi9/openjdk-21-runtime` (https://catalog.redhat.com/software/containers/ubi9/openjdk-21-runtime/6501ce769a0d86945c422d5f?container-tabs=dockerfile[Dockerfile for ubi9/openjdk-17-runtime, window=\"_blank\"])"
msgstr "`/home/jboss` は、ベースイメージ `ubi9/openjdk-17-runtime` および `ubi9/openjdk-21-runtime` 内のすべての quarkus バイナリの WORKDIR です (https://catalog.redhat.com/software/containers/ubi9/openjdk-21-runtime/6501ce769a0d86945c422d5f?container-tabs=dockerfile[ubi9/openjdk-17-runtime の Dockerfile、window=\"_blank\"])"

#: _versions/3.20/guides/container-image.adoc
msgid "Multi-module projects and layering"
msgstr "マルチモジュールプロジェクトとレイヤリング"

#: _versions/3.20/guides/container-image.adoc
msgid ""
"When building a multi-module project containing a Quarkus application as one module and various supporting project dependencies as other modules,\n"
"Quarkus supports placing these supporting modules in a separate container image layer from the rest of the application dependencies, with the expectation\n"
"that these supporting modules will change more frequently than the regular application dependencies - thus making a rebuild faster if the\n"
"application dependencies have not changed."
msgstr "Quarkusアプリケーションを1つのモジュールとし、さらにさまざまなサポートプロジェクトの依存関係を他のモジュールとして含むマルチモジュールプロジェクトを構築する場合、Quarkusでは、サポートモジュールが通常のアプリケーション依存関係よりも頻繁に変更されることを想定して、それらのサポートモジュールを他のアプリケーション依存関係とは別のコンテナイメージレイヤーに配置することをサポートしています。このため、アプリケーションの依存関係に変更がない場合は、リビルドを高速に行うことができます。"

#: _versions/3.20/guides/container-image.adoc
msgid ""
"To enable this feature, the property `quarkus.bootstrap.workspace-discovery` needs to be set to `true` either as a system property\n"
"when invoking the build tool, either as a build tool property. Setting this property in `application.properties` will **not** work because\n"
"this property needs to be known very early on in the build process."
msgstr "この機能を有効にするには、ビルドツール起動時にシステムプロパティとして、またはビルドツールプロパティとして、プロパティ `quarkus.bootstrap.workspace-discovery` を `true` に設定する必要があります。このプロパティは、ビルドプロセスの非常に早い段階で認識される必要があるため、 `application.properties` で設定しても正しく *機能しません* 。"

#: _versions/3.20/guides/container-image.adoc
msgid "AppCDS"
msgstr "AppCDS"

#: _versions/3.20/guides/container-image.adoc
msgid ""
"Quarkus supports generating and including an link:https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html#application-class-data-sharing[Application Class Data Sharing] archive when generating a container image using Jib.\n"
"See the xref:appcds.adoc[AppCDS documentation] for more details."
msgstr "Quarkusは、Jibを使用したコンテナイメージの生成時に、 link:https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html#application-class-data-sharing[アプリケーションクラスデータ共有] アーカイブを生成して含めることをサポートしています。詳細については、 link:appcds.html[AppCDSのドキュメント] を参照してください。"

#: _versions/3.20/guides/container-image.adoc
msgid "Docker"
msgstr "Docker"

#: _versions/3.20/guides/container-image.adoc
msgid "The extension `quarkus-container-image-docker` is using the Docker binary and the generated Dockerfiles under `src/main/docker` in order to perform Docker builds."
msgstr "エクステンション `quarkus-container-image-docker` は、Docker ビルドを実行するために `src/main/docker` 下で Docker バイナリーと生成された Dockerfiles を使用しています。"

#: _versions/3.20/guides/container-image.adoc
msgid "To use this feature, add the following extension to your project."
msgstr "この機能を使用するには、以下のエクステンションをプロジェクトに追加します。"

#: _versions/3.20/guides/container-image.adoc
msgid "The `quarkus-container-image-docker` extension is capable of https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images/[creating multi-platform (or multi-arch)] images using https://docs.docker.com/engine/reference/commandline/buildx_build/[`docker buildx build`]. See the `quarkus.docker.buildx.*` configuration items in the <<#DockerOptions,Docker Options>> section below."
msgstr "`quarkus-container-image-docker` エクスンテンションは、link:https://docs.docker.com/engine/reference/commandline/buildx_build/[`docker buildx build`] を使って、 link:https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images/[マルチプラットフォーム (またはマルチアーキ]) イメージを作成することができます。以下の link:#DockerOptions[Dockerオプション] のセクションにある `quarkus.docker.buildx.*` の設定項目を参照してください。"

#: _versions/3.20/guides/container-image.adoc
msgid "`docker buildx build` ONLY supports https://docs.docker.com/engine/reference/commandline/buildx_build/#load[loading the result of a build] to `docker images` when building for a single platform. Therefore, if you specify more than one argument in the `quarkus.docker.buildx.platform` property, the resulting images will not be loaded into `docker images`. If `quarkus.docker.buildx.platform` is omitted or if only a single platform is specified, it will then be loaded into `docker images`."
msgstr "`docker buildx build` は、単一のプラットフォーム向けにビルドする場合のみ、link:https://docs.docker.com/engine/reference/commandline/buildx_build/#load[ビルド結果の `docker images` への読み込み] をサポートします。したがって、 `quarkus.docker.buildx.platform` プロパティに複数の引数を指定した場合、結果のイメージは `docker images` にロードされません。  `quarkus.docker.buildx.platform` が省略された場合、または単一のプラットフォームのみが指定された場合は、その後 `docker images` にロードされるようになります。"

#: _versions/3.20/guides/container-image.adoc
msgid "This means that if you want to build images for more than one platform at a time (i.e. `quarkus.docker.buildx.platform=linux/amd64,linux/arm64`), you need to push the images (`quarkus.container-image.push=true`) directly as part of the build process. Docker buildx does not support loading into the local registry when building multi-platform images."
msgstr "つまり、一度に複数のプラットフォーム用のイメージをビルドしたい場合（例： `quarkus.docker.buildx.platform=linux/amd64,linux/arm64` ）、ビルドプロセスの一部としてイメージ（ `quarkus.container-image.push=true` ）を直接プッシュする必要があります。Docker buildxはマルチプラットフォームイメージのビルド時にローカルレジストリへのロードをサポートしていません。"

#: _versions/3.20/guides/container-image.adoc
msgid "Podman"
msgstr "Podman"

#: _versions/3.20/guides/container-image.adoc
msgid "The extension `quarkus-container-image-podman` uses https://podman.io/[Podman] and the generated `Dockerfiles` under `src/main/docker` in order to perform container builds."
msgstr "エクステンション `quarkus-container-image-podman` は、コンテナビルドを実行するために link:https://podman.io/[Podman] と `src/main/docker` の下に生成された `Dockerfiles` を使用します。"

#: _versions/3.20/guides/container-image.adoc
msgid "When to use Docker vs Podman extension"
msgstr "DockerとPodmanエクステンションの使い分け"

#: _versions/3.20/guides/container-image.adoc
msgid "The <<#docker,Docker extension>> is and has always been backwards-compatible with Podman because Podman exposes a https://podman.io/docs/installation[Docker-compatible API]. You can build container images with Podman using the Docker extension (see the https://quarkus.io/guides/podman[Using Podman with Quarkus guide])."
msgstr "Podmanは link:https://podman.io/docs/installation[Docker互換のAPIを] 公開しているため、 xref:docker[Docker拡張] 機能はPodmanと常に下位互換性があります。Dockerエクステンションを使用して、Podmanでコンテナイメージを構築できます（ link:https://quarkus.io/guides/podman[QuarkusでPodmanを使用するガイド] を参照してください）。"

#: _versions/3.20/guides/container-image.adoc
msgid "Use either the `quarkus-container-image-docker` or `quarkus-container-image-podman` extension when doing things specific to either Docker or Podman, respectively."
msgstr "DockerとPodmanのどちらかに特化した処理を行う場合は、それぞれ `quarkus-container-image-docker` または `quarkus-container-image-podman` エクステンションを使用してください。"

#: _versions/3.20/guides/container-image.adoc
msgid "For example, building multi-platform images is implemented differently for Docker and Podman. Docker uses https://docs.docker.com/engine/reference/commandline/buildx_build/[the buildx plugin] whereas Podman can build multi-platform images https://docs.podman.io/en/latest/markdown/podman-build.1.html#platform-os-arch-variant[natively]. Because of this, you would need to use the specific extension to perform that function."
msgstr "例えば、マルチプラットフォームイメージのビルドはDockerとPodmanで実装が異なります。Dockerは link:https://docs.docker.com/engine/reference/commandline/buildx_build/[buildxプラグイン] を使用しますが、Podmanはマルチプラットフォームイメージを link:https://docs.podman.io/en/latest/markdown/podman-build.1.html#platform-os-arch-variant[ネイティブに] ビルドできます。このため、その機能を実行するには特定のエクステンションを使用する必要があります。"

#: _versions/3.20/guides/container-image.adoc
msgid "OpenShift"
msgstr "OpenShift"

#: _versions/3.20/guides/container-image.adoc
#, fuzzy
msgid ""
"The extension `quarkus-container-image-openshift` is using OpenShift binary builds in order to perform container builds inside the OpenShift cluster.\n"
"The idea behind the binary build is that you just upload the artifact and its dependencies to the cluster and during the build they will be merged to a builder image (defaults to `ubi9/openjdk-17` or `ubi9/openjdk-21`)."
msgstr "`quarkus-container-image-openshift` という拡張は、OpenShift クラスタ内でコンテナのビルドを実行するために OpenShift のバイナリビルドを使用しています。バイナリビルドの背後にある考え方は、アーティファクトとその依存関係をクラスタにアップロードするだけで、ビルド中にそれらがビルダーイメージ（デフォルトは `ubi9/openjdk-17` または `ubi9/openjdk-21` ）にマージされるということです。"

#: _versions/3.20/guides/container-image.adoc
msgid "The benefit of this approach, is that it can be combined with OpenShift's `DeploymentConfig` that makes it easy to roll out changes to the cluster."
msgstr "このアプローチの利点は、クラスターへの変更を簡単にロールアウトできる OpenShift の `DeploymentConfig` と組み合わせることができることです。"

#: _versions/3.20/guides/container-image.adoc
msgid ""
"OpenShift builds require creating a `BuildConfig` and two `ImageStream` resources, one for the builder image and one for the output image.\n"
"The creation of such objects is being taken care of by the Quarkus Kubernetes extension."
msgstr "OpenShiftのビルドでは、 `BuildConfig` 、ビルダーイメージ用と出力イメージ用の2つの `ImageStream` リソースを作成する必要があります。このようなオブジェクトの作成は、Quarkus Kubernetesエクステンションによって行われます。"

#: _versions/3.20/guides/container-image.adoc
msgid "Buildpack"
msgstr "Buildpack"

#: _versions/3.20/guides/container-image.adoc
msgid ""
"The extension `quarkus-container-image-buildpack` is using buildpacks in order to perform container image builds.\n"
"Under the hood buildpacks will use a Docker daemon for the actual build.\n"
"While buildpacks support alternatives to Docker, this extension will only work with Docker."
msgstr "`quarkus-container-image-buildpack` は、コンテナイメージのビルドを行うために buildpacks を使用しています。buildpacksは、実際のビルドにDockerデーモンを使用します。buildpacksはDockerの代替品をサポートしていますが、このエクステンションはDockerでのみ動作します。"

#: _versions/3.20/guides/container-image.adoc
msgid "Additionally, the user will have to configure which build image to use (no default image is provided). For example:"
msgstr "さらに、ユーザーはどのビルドイメージを使用するかを設定する必要があります（デフォルトのイメージは提供されていません）。例えば、以下のようになります。"

#: _versions/3.20/guides/container-image.adoc
msgid "or for native:"
msgstr "またはネイティブの場合、"

#: _versions/3.20/guides/container-image.adoc
msgid "When using the buildpack container image extension it is strongly advised to avoid adding `quarkus.container-image.build=true` in your properties configuration as it might trigger nesting builds within builds. It's preferable to pass it as an option to the build command instead."
msgstr "buildpack コンテナイメージエクステンションを使用する際には、プロパティ設定に `quarkus.container-image.build=true` を追加しないことを強くお勧めします。代わりにビルドコマンドのオプションとして渡すことをお勧めします。"

#: _versions/3.20/guides/container-image.adoc
msgid "Building"
msgstr "ビルド"

#: _versions/3.20/guides/container-image.adoc
msgid "To build a container image for your project, `quarkus.container-image.build=true` needs to be set using any of the ways that Quarkus supports."
msgstr "プロジェクト用のコンテナーイメージを作成するには、Quarkus がサポートしている方法のいずれかで、 `quarkus.container-image.build=true` を設定する必要があります。"

#: _versions/3.20/guides/container-image.adoc
msgid "If you ever want to build a native container image and already have an existing native image you can set `-Dquarkus.native.reuse-existing=true` and the native image build will not be re-run."
msgstr "ネイティブコンテナイメージをビルドしたいときに、すでに既存のネイティブイメージがある場合は、 `-Dquarkus.native.reuse-existing=true` を設定すれば、ネイティブイメージのビルドは再実行されません。"

#: _versions/3.20/guides/container-image.adoc
msgid "Using @QuarkusIntegrationTest"
msgstr "@QuarkusIntegrationTest の利用"

#: _versions/3.20/guides/container-image.adoc
msgid "To run tests on the resulting image, `quarkus.container-image.build=true` needs to be set using any of the ways that Quarkus supports."
msgstr "作成されたイメージでテストを実行するためには、Quarkus がサポートしている方法のいずれかで、 `quarkus.container-image.build=true` を設定する必要があります。"

#: _versions/3.20/guides/container-image.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/3.20/guides/container-image.adoc
msgid "Gradle"
msgstr "Gradle"

#: _versions/3.20/guides/container-image.adoc
msgid "Pushing"
msgstr "プッシュ"

#: _versions/3.20/guides/container-image.adoc
msgid "To push a container image for your project, `quarkus.container-image.push=true` needs to be set using any of the ways that Quarkus supports."
msgstr "プロジェクトにコンテナーイメージをプッシュするには、Quarkus がサポートしている方法のいずれかで、 `quarkus.container-image.push=true` を設定する必要があります。"

#: _versions/3.20/guides/container-image.adoc
msgid "If no registry is set (using `quarkus.container-image.registry`) then `docker.io` will be used as the default."
msgstr "レジストリーが設定されていない場合 (`quarkus.container-image.registry` を使用) は、 `docker.io` がデフォルトとして使用されます。"

#: _versions/3.20/guides/container-image.adoc
msgid "Selecting among multiple extensions"
msgstr "複数のエクステンションから選択する"

#: _versions/3.20/guides/container-image.adoc
msgid "It does not make sense to use multiple extension as part of the same build. When multiple container image extensions are present, an error will be raised to inform the user. The user can either remove the unneeded extensions or select one using `application.properties`."
msgstr "複数のエクステンションを同じビルドの一部として使用することは意味がありません。複数のコンテナイメージエクステンションが存在する場合は、エラーが発生してユーザーに通知されます。ユーザーは、不要なエクステンションを削除するか、 `application.properties` を使用してエクステンションを選択することができます。"

#: _versions/3.20/guides/container-image.adoc
msgid "For example, if both `container-image-docker` and `container-image-podman` are present and the user needs to use `container-image-docker`:"
msgstr "例えば、 `container-image-docker` と `container-image-podman` の両方が存在し、ユーザーが `container-image-docker` を使用する必要がある場合："

#: _versions/3.20/guides/container-image.adoc
msgid "Integrating with `systemd-notify`"
msgstr "`systemd-notify` との統合"

#: _versions/3.20/guides/container-image.adoc
msgid "If you are building a container image in order to deploy your Quarkus application as a Linux service with Podman and Systemd, you might want to consider including the https://docs.quarkiverse.io/quarkus-systemd-notify/dev/index.html[Quarkus Systemd Notify Extension] as part of your application, with:"
msgstr "PodmanとSystemdを使用してQuarkusアプリケーションをLinuxサービスとしてデプロイするためにコンテナイメージをビルドする場合、 link:https://docs.quarkiverse.io/quarkus-systemd-notify/dev/index.html[Quarkus Systemd Notify Extension] をアプリケーションの一部として含めることを検討するとよいでしょう："

#: _versions/3.20/guides/container-image.adoc
msgid "Customizing"
msgstr "カスタマイズ"

#: _versions/3.20/guides/container-image.adoc
msgid "The following properties can be used to customize the container image build process."
msgstr "以下のプロパティーを使用して、コンテナーイメージのビルドプロセスをカスタマイズすることができます。"

#: _versions/3.20/guides/container-image.adoc
msgid "Container Image Options"
msgstr "コンテナーイメージオプション"

#: _versions/3.20/guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.20/guides/container-image.adoc
msgid "Using CI Environments"
msgstr "CI 環境の利用"

#: _versions/3.20/guides/container-image.adoc
msgid ""
"Various CI environments provide a ready to use container-image registry which can be combined with the container-image Quarkus extensions in order to\n"
"effortlessly create and push a Quarkus application to said registry."
msgstr "さまざまな CI 環境では、Quarkus アプリケーションを作成してレジストリーをプッシュするために、コンテナーイメージ Quarkus エクステンションと組み合わせることで、すぐに使えるコンテナーイメージレジストリ-を利用できます。"

#: _versions/3.20/guides/container-image.adoc
msgid ""
"For example, https://gitlab.com/[GitLab] provides such a registry and in the provided CI environment,\n"
"makes available the `CI_REGISTRY_IMAGE` environment variable\n"
"(see GitLab's https://docs.gitlab.com/ee/ci/variables/[documentation]) for more information), which can be used in Quarkus like so:"
msgstr "例えば、 link:https://gitlab.com/[GitLab] はこのようなレジストリーを提供しており、提供されている CI 環境では、環境変数 `CI_REGISTRY_IMAGE` (詳しくは GitLab の link:https://docs.gitlab.com/ee/ci/variables/[ドキュメント] を参照) を利用できるようになっています。なお、Quarkus ではこのように利用できます。"

#: _versions/3.20/guides/container-image.adoc
msgid "See xref:config-reference.adoc#with-environment-variables[this] for more information on how to combine properties with environment variables."
msgstr "プロパティと環境変数を組み合わせる方法については、 link:config.html#combine-property-env-var[こちら]をご覧ください。"

#: _versions/3.20/guides/container-image.adoc
msgid "Jib Options"
msgstr "Jib オプション"

#: _versions/3.20/guides/container-image.adoc
msgid "In addition to the generic container image options, the `container-image-jib` also provides the following options:"
msgstr "一般的なコンテナーイメージのオプションに加えて、 `container-image-jib` では以下のオプションも用意されています。"

#: _versions/3.20/guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span> ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは、実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.20/guides/container-image.adoc
msgid "Docker Options"
msgstr "Docker オプション"

#: _versions/3.20/guides/container-image.adoc
msgid "In addition to the generic container image options, the `container-image-docker` also provides the following options:"
msgstr "一般的なコンテナーイメージのオプションに加えて、 `container-image-docker` では以下のオプションも用意されています。"

#: _versions/3.20/guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-2\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span> ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは、実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-2\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.20/guides/container-image.adoc
msgid "Podman Options"
msgstr "Podman オプション"

#: _versions/3.20/guides/container-image.adoc
msgid "In addition to the generic container image options, the `container-image-podman` also provides the following options:"
msgstr "一般的なコンテナ・イメージ・オプションに加えて、 `container-image-podman` には以下のオプションもあります："

#: _versions/3.20/guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-3\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span> ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは、実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-3\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.20/guides/container-image.adoc
msgid "OpenShift  Options"
msgstr "OpenShift オプション"

#: _versions/3.20/guides/container-image.adoc
msgid "In addition to the generic container image options, the `container-image-openshift` also provides the following options:"
msgstr "一般的なコンテナ・イメージ・オプションに加えて、 `container-image-openshift` は以下のオプションも用意されています。"

#: _versions/3.20/guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-4\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span> ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは、実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-4\" placeholder=\"FILTER CONFIGURATION\" disabled>"
