msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#: _versions/main/guides/testing-components.adoc
msgid "Testing components"
msgstr "コンポーネントのテスト"

#: _versions/main/guides/testing-components.adoc
msgid ""
"The component model of Quarkus is built on top xref:cdi-reference.adoc[CDI].\n"
"Therefore, Quarkus provides `QuarkusComponentTestExtension` - a JUnit extension that makes it easy to test the components/CDI beans and mock their dependencies.\n"
"Unlike `@QuarkusTest` this extension does not start a full Quarkus application but merely the CDI container and the configuration service.\n"
"You can find more details in the <<lifecycle>> section."
msgstr ""
"Quarkus のコンポーネントモデルは xref:cdi-reference.adoc[CDI] 上に構築されています。\n"
"そのため、Quarkus は、コンポーネント/CDI Bean を簡単にテストし、それらの依存関係をモック化できる JUnit エクステンションである `QuarkusComponentTestExtension` を提供します。\n"
"`@QuarkusTest` とは異なり、このエクステンションは完全な Quarkus アプリケーションを起動せず、CDI コンテナーと設定サービスのみを起動します。\n"
"詳細は、<<lifecycle>> セクションを参照してください。"

#: _versions/main/guides/testing-components.adoc
msgid "This JUnit extension is available in the `quarkus-junit5-component` dependency."
msgstr ""

#: _versions/main/guides/testing-components.adoc
msgid "Basic example"
msgstr "基本例"

#: _versions/main/guides/testing-components.adoc
msgid "Let's have a component `Foo` - a CDI bean with two injection points."
msgstr "2 つの注入ポイントを持つ CDI Bean であるコンポーネント `Foo` があるとします。"

#: _versions/main/guides/testing-components.adoc
msgid "`Foo` component"
msgstr "`Foo` コンポーネント"

#: _versions/main/guides/testing-components.adoc
msgid "`Foo` is an `@ApplicationScoped` CDI bean."
msgstr "`Foo` は `@ApplicationScoped` CDI Bean です。"

#: _versions/main/guides/testing-components.adoc
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr "`Foo` は、メソッド `ping()` を宣言する `Charlie` に依存します。"

#: _versions/main/guides/testing-components.adoc
msgid "`Foo` depends on the config property `bar`. `@Inject` is not needed for this injection point because it also declares a CDI qualifier - this is a Quarkus-specific feature."
msgstr "`Foo` は設定プロパティー `bar` に依存します。 `@Inject` は CDI 修飾子も宣言するため、この注入ポイントには必要ありません。これは Quarkus 固有の機能です。"

#: _versions/main/guides/testing-components.adoc
msgid "Then a component test could look like:"
msgstr "この場合、コンポーネントテストは次のようになります。"

#: _versions/main/guides/testing-components.adoc
msgid "Simple component test"
msgstr "シンプルなコンポーネントテスト"

#: _versions/main/guides/testing-components.adoc
msgid "The `QuarkusComponentTest` annotation registers the JUnit extension."
msgstr "`QuarkusComponentTest` アノテーションは JUnit エクステンションを登録します。"

#: _versions/main/guides/testing-components.adoc
msgid "Sets a configuration property for the test."
msgstr "テストの設定プロパティーを設定します。"

#: _versions/main/guides/testing-components.adoc
msgid "The test injects the component under the test. The types of all fields annotated with `@Inject` are considered the component types under test. You can also specify additional component classes via `@QuarkusComponentTest#value()`. Furthermore, the static nested classes declared on the test class are components too."
msgstr "このテストはテスト対象のコンポーネントを注入します。 `@Inject` でアノテーションが付けられたすべてのフィールドの型が、テスト対象のコンポーネント型とみなされます。 `@QuarkusComponentTest#value()` を使用して追加のコンポーネントクラスを指定することもできます。さらに、テストクラスで宣言された静的ネストクラスもコンポーネントです。"

#: _versions/main/guides/testing-components.adoc
msgid "The test also injects a mock for `Charlie`. `Charlie` is an _unsatisfied_ dependency for which a synthetic `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "このテストは `Charlie` のモックも挿入します。 `Charlie` は、 `@Singleton` 合成 Bean が自動的に登録される、_満たされていない_ 依存関係です。挿入される参照は、\"未設定\" の Mockito モックです。"

#: _versions/main/guides/testing-components.adoc
msgid "We can leverage the Mockito API in a test method to configure the behavior."
msgstr "テストメソッドで Mockito API を活用して動作を設定できます。"

#: _versions/main/guides/testing-components.adoc
msgid "`QuarkusComponentTestExtension` also resolves parameters of test methods and injects matching beans."
msgstr "また、 `QuarkusComponentTestExtension` は、テストメソッドのパラメーターを解決し、一致する Bean を注入します。"

#: _versions/main/guides/testing-components.adoc
msgid "So the code snippet above can be rewritten as:"
msgstr "したがって、上記のコードスニペットは次のように書き直すことができます。"

#: _versions/main/guides/testing-components.adoc
msgid "Simple component test with test method parameters"
msgstr "テストメソッドパラメーターを使用したシンプルなコンポーネントテスト"

#: _versions/main/guides/testing-components.adoc
msgid "Parameters annotated with `@io.quarkus.test.component.SkipInject` are never resolved by this extension."
msgstr "`@io.quarkus.test.component.SkipInject` でアノテーションが付けられたパラメーターは、このエクステンションによって解決されることはありません。"

#: _versions/main/guides/testing-components.adoc
msgid "Furthermore, if you need the full control over the `QuarkusComponentTestExtension` configuration then you can use the `@RegisterExtension` annotation and configure the extension programmatically."
msgstr "さらに、 `QuarkusComponentTestExtension` 設定を完全に制御する必要がある場合は、 `@RegisterExtension` アノテーションを使用して、プログラムによってエクステンションを設定できます。"

#: _versions/main/guides/testing-components.adoc
msgid "The original test could be rewritten like:"
msgstr "元のテストを次のように書き直すことができます。"

#: _versions/main/guides/testing-components.adoc
msgid "Simple component test with programmatic configuration"
msgstr "プログラムによる設定を使用したシンプルなコンポーネントテスト"

#: _versions/main/guides/testing-components.adoc
msgid "The `QuarkusComponentTestExtension` is configured in a static field of the test class."
msgstr "`QuarkusComponentTestExtension` は、テストクラスの静的フィールドで設定します。"

#: _versions/main/guides/testing-components.adoc
msgid "Lifecycle"
msgstr "ライフサイクル"

#: _versions/main/guides/testing-components.adoc
msgid ""
"So what exactly does the `QuarkusComponentTest` do?\n"
"It starts the CDI container and registers a dedicated xref:config-reference.adoc[configuration object]."
msgstr ""
"では、 `QuarkusComponentTest` は実際には何を実行するのでしょうか。\n"
"これは、CDI コンテナーを起動し、専用の xref:config-reference.adoc[設定オブジェクト] を登録します。"

#: _versions/main/guides/testing-components.adoc
msgid ""
"If the test instance lifecycle is `Lifecycle#PER_METHOD` (default) then the container is started during the `before each` test phase and stopped during the `after each` test phase.\n"
"However, if  the test instance lifecycle is `Lifecycle#PER_CLASS` then the container is started during the `before all` test phase and stopped during the `after all` test phase."
msgstr ""
"テストインスタンスのライフサイクルが `Lifecycle#PER_METHOD` (デフォルト) の場合、コンテナーは `before each` テストフェーズ中に起動し、 `after each` テストフェーズ中に停止します。\n"
"一方、テストインスタンスのライフサイクルが `Lifecycle#PER_CLASS` の場合、コンテナーは `before all` テストフェーズ中に起動し、 `after all` テストフェーズ中に停止します。"

#: _versions/main/guides/testing-components.adoc
msgid ""
"The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.\n"
"The parameters of a test method for which a matching bean exists are resolved (unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`) when a test method is executed.\n"
"Finally, the CDI request context is activated and terminated per each test method."
msgstr ""
"`@Inject` および `@InjectMock` でアノテーションが付けられたフィールドは、テストインスタンスが作成された後に注入されます。\n"
"一致する Bean が存在するテストメソッドのパラメーターは、テストメソッドの実行時に解決されます (`@io.quarkus.test.component.SkipInject` または `@org.mockito.Mock` でアノテーションが付けられている場合を除く)。\n"
"最後に、CDI リクエストコンテキストが各テストメソッドごとにアクティブ化され、終了します。"

#: _versions/main/guides/testing-components.adoc
msgid "Injection"
msgstr "インジェクション"

#: _versions/main/guides/testing-components.adoc
msgid ""
"Fields of the test class that are annotated with `@jakarta.inject.Inject` and `@io.quarkus.test.InjectMock` are injected after a test instance is created.\n"
"Furthermore, the parameters of a test method for which a matching bean exists are resolved unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`.\n"
"There are also some JUnit built-in parameters, such as `RepetitionInfo` and `TestInfo`, which are skipped automatically."
msgstr ""
"`@jakarta.inject.Inject` および `@io.quarkus.test.InjectMock` でアノテーションが付けられたテストクラスのフィールドは、テストインスタンスが作成された後に注入されます。\n"
"さらに、一致する Bean が存在するテストメソッドのパラメーターが解決されます (`@io.quarkus.test.component.SkipInject` または `@org.mockito.Mock` でアノテーションが付けられている場合を除く)。\n"
"また、 `RepetitionInfo` や `TestInfo` など、自動的にスキップされる JUnit 組み込みパラメーターもいくつかあります。"

#: _versions/main/guides/testing-components.adoc
msgid ""
"An `@Inject` injection point receives the contextual instance of a CDI bean - the real component under test.\n"
"An `@InjectMock` injection point receives an \"unconfigured\" Mockito mock that was created for an <<auto_mocking,unsatisfied dependency automatically>>."
msgstr ""
"`@Inject` インジェクションポイントは、CDI Bean のコンテキストインスタンス (テスト対象の実際のコンポーネント) を受け取ります。\n"
"`@InjectMock` インジェクションポイントは、満たされていない依存関係に対して自動的に作成 (<<auto_mocking,unsatisfied dependency automatically>> を参照) された \"未設定\" の Mockito モックを受け取ります。"

#: _versions/main/guides/testing-components.adoc
msgid "Dependent beans injected into the fields and test method arguments are correctly destroyed before a test instance is destroyed and after the test method completes, respectively."
msgstr "フィールドに注入された依存 Bean とテストメソッド引数は、それぞれテストインスタンスが破棄される前とテストメソッドが完了した後に正しく破棄されます。"

#: _versions/main/guides/testing-components.adoc
msgid "Arguments of a `@ParameterizedTest` method that are provided by an `ArgumentsProvider`, for example with `@org.junit.jupiter.params.provider.ValueArgumentsProvider`, must be annotated with `@SkipInject`."
msgstr "`ArgumentsProvider` によって提供される `@ParameterizedTest` メソッドの引数 (たとえば `@org.junit.jupiter.params.provider.ValueArgumentsProvider`) には、 `@SkipInject` アノテーションを付ける必要があります。"

#: _versions/main/guides/testing-components.adoc
msgid "Tested components"
msgstr "テスト対象コンポーネント"

#: _versions/main/guides/testing-components.adoc
msgid "The initial set of tested components is derived from the test class:"
msgstr "テスト対象コンポーネントの初期セットは、テストクラスから派生します。"

#: _versions/main/guides/testing-components.adoc
msgid "The types of all fields annotated with `@jakarta.inject.Inject` are considered the component types."
msgstr "`@jakarta.inject.Inject` でアノテーションが付けられたすべてのフィールドの型は、コンポーネント型と見なされます。"

#: _versions/main/guides/testing-components.adoc
msgid "The types of test methods parameters that are not annotated with `@InjectMock`, `@SkipInject`, or `@org.mockito.Mock` are also considered the component types."
msgstr "`@InjectMock`、 `@SkipInject`、または `@org.mockito.Mock` でアノテーションが付けられていないテストメソッドパラメーターの型も、コンポーネント型と見なされます。"

#: _versions/main/guides/testing-components.adoc
msgid "If `@QuarkusComponentTest#addNestedClassesAsComponents()` is set to `true` (default) then all static nested classes declared on the test class are components too."
msgstr "`@QuarkusComponentTest#addNestedClassesAsComponents()` が `true` (デフォルト) に設定されている場合、テストクラスで宣言されたすべてのネストされた静的クラスもコンポーネントになります。"

#: _versions/main/guides/testing-components.adoc
msgid "`@Inject Instance<T>` and `@Inject @All List<T>` injection points are handled specifically. The actual type argument is registered as a component. However, if the type argument is an interface the implementations _are not registered_ automatically."
msgstr "`@Inject Instance<T>` および `@Inject @All List<T>`インジェクションポイントは、特別に処理されます。実際の型引数はコンポーネントとして登録されます。ただし、型引数がインターフェイスの場合、実装は自動的に _登録されません_ 。"

#: _versions/main/guides/testing-components.adoc
msgid "Additional component classes can be set using `@QuarkusComponentTest#value()` or `QuarkusComponentTestExtensionBuilder#addComponentClasses()`."
msgstr "追加のコンポーネントクラスは、 `@QuarkusComponentTest#value()` または `QuarkusComponentTestExtensionBuilder#addComponentClasses()` を使用して設定できます。"

#: _versions/main/guides/testing-components.adoc
msgid "Auto Mocking Unsatisfied Dependencies"
msgstr "満たされていない依存関係の自動モック化"

#: _versions/main/guides/testing-components.adoc
msgid ""
"Unlike in regular CDI environments the test does not fail if a component injects an unsatisfied dependency.\n"
"Instead, a synthetic bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.\n"
"The bean has the `@Singleton` scope so it's shared across all injection points with the same required type and qualifiers.\n"
"The injected reference is an _unconfigured_ Mockito mock.\n"
"You can inject the mock in your test using the `io.quarkus.test.InjectMock` annotation and leverage the Mockito API to configure the behavior."
msgstr ""
"通常の CDI 環境とは異なり、コンポーネントが満たされていない依存関係を注入してもテストは失敗しません。\n"
"代わりに、満たされていない依存関係に解決されるインジェクションポイントの必要なタイプと修飾子の組み合わせごとに、合成 Bean が自動的に登録されます。\n"
"Bean には `@Singleton` スコープがあるため、Bean は必要な同じタイプと修飾子を持つすべてのインジェクションポイント間で共有されます。\n"
"注入される参照は _未設定_ の Mockito モックです。\n"
"`io.quarkus.test.InjectMock` アノテーションを使用してテストにモックを注入し、Mockito API を活用して動作を設定できます。"

#: _versions/main/guides/testing-components.adoc
msgid ""
"`@InjectMock` is not intended as a universal replacement for functionality provided by the Mockito JUnit extension.\n"
"It's meant to be used for configuration of unsatisfied dependencies of CDI beans.\n"
"You can use the `QuarkusComponentTest` and `MockitoExtension` side by side."
msgstr ""
"`@InjectMock` は、Mockito JUnit エクステンションによって提供される機能すべてに代わるものではありません。\n"
"これは、CDI Bean の満たされていない依存関係の設定に使用することを目的としたものです。\n"
"`QuarkusComponentTest` は `MockitoExtension` と並行して使用できます。"

#: _versions/main/guides/testing-components.adoc
msgid "Custom Mocks For Unsatisfied Dependencies"
msgstr "満たされていない依存関係のカスタムモック"

#: _versions/main/guides/testing-components.adoc
msgid ""
"Sometimes you need the full control over the bean attributes and maybe even configure the default mock behavior.\n"
"You can use the mock configurator API via the `QuarkusComponentTestExtensionBuilder#mock()` method."
msgstr ""
"場合によっては、Bean 属性を完全に制御し、デフォルトのモック動作を設定する必要があることもあります。\n"
"`QuarkusComponentTestExtensionBuilder#mock()` メソッドを介して、モックコンフィギュレーター API を使用できます。"

#: _versions/main/guides/testing-components.adoc
msgid "Nested Tests"
msgstr "ネストしたテスト"

#: _versions/main/guides/testing-components.adoc
msgid ""
"JUnit 5 https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested[@Nested tests] may help to structure more complex test scenarios.\n"
"However, only basic use cases are tested with `@QuarkusComponentTest`."
msgstr ""
"JUnit 5 link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested[@Nested テスト] は、より複雑なテストシナリオを構成するのに役立つかもしれません。\n"
"しかし、 `@QuarkusComponentTest` を使ってテストできるのは基本的なユースケースだけです。"

#: _versions/main/guides/testing-components.adoc
msgid "Nested test"
msgstr "ネストされたテスト"

#: _versions/main/guides/testing-components.adoc
msgid "The test injects the component under the test. `Foo` injects `Charlie`."
msgstr "テストはテスト対象のコンポーネントを挿入します。`Foo` は `Charlie` を挿入します。"

#: _versions/main/guides/testing-components.adoc
msgid "The test also injects a mock for `Charlie`. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "このテストは `Charlie` のモックも注入します。注入された参照は「未設定」のMockitoモックです。"

#: _versions/main/guides/testing-components.adoc
msgid "Configuration"
msgstr "設定"

#: _versions/main/guides/testing-components.adoc
msgid ""
"You can set the configuration properties for a test with the `@io.quarkus.test.component.TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method.\n"
"If you only need to use the default values for missing config properties, then the `@QuarkusComponentTest#useDefaultConfigProperties()` or `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` might come in useful."
msgstr ""
"`@io.quarkus.test.component.TestConfigProperty` アノテーションまたは `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` メソッドを使用して、テストの設定プロパティーを設定できます。\n"
"不足している設定プロパティーに対してデフォルト値を使用する必要があるだけの場合は、 `@QuarkusComponentTest#useDefaultConfigProperties()` または `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` が役立つ場合があります。"

#: _versions/main/guides/testing-components.adoc
msgid ""
"It is also possible to set configuration properties for a test method with the `@io.quarkus.test.component.TestConfigProperty` annotation.\n"
"However, if the test instance lifecycle is `Lifecycle#_PER_CLASS` this annotation can only be used on the test class and is ignored on test methods."
msgstr ""
"`@io.quarkus.test.component.TestConfigProperty` アノテーションを使用して、テストメソッドの設定プロパティーを設定することもできます。\n"
"ただし、テストインスタンスのライフサイクルが `Lifecycle#_PER_CLASS` の場合、このアノテーションはテストクラスでのみ使用でき、テストメソッドでは無視されます。"

#: _versions/main/guides/testing-components.adoc
msgid "`@io.quarkus.test.component.TestConfigProperty` declared on a `@Nested` test class is always ignored."
msgstr "`@Nested` テスト クラスで宣言された `@io.quarkus.test.component.TestConfigProperty` は常に無視されます。"

#: _versions/main/guides/testing-components.adoc
msgid "CDI beans are also automatically registered for all injected https://smallrye.io/smallrye-config/Main/config/mappings/[Config Mappings]. The mappings are populated with the test configuration properties."
msgstr "また、CDI Bean は、注入されたすべての https://smallrye.io/smallrye-config/Main/config/mappings/[Config Mappings] に対して自動的に登録されます。マッピングには、テスト設定プロパティーが入力されます。"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid "Config sources"
msgstr "設定ソース"

#: _versions/main/guides/testing-components.adoc
#, fuzzy
msgid ""
"By default, only the config properties from `application.properties` and properties set by the `@TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method are included in the test config.\n"
"System properties and ENV variables are _not_ included in the test config by default.\n"
"However, you can use `@QuarkusComponentTest#useSystemConfigSources()` or `QuarkusComponentTestExtensionBuilder#useSystemConfigSources()` to configure this behavior."
msgstr "デフォルトでは、 `application.properties` からの config プロパティと、 `@TestConfigProperty` アノテーションまたは `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` メソッドで設定されたプロパティのみがテスト config に含まれます。システムプロパティと ENV 変数は、デフォルトではテスト config に含ま _れません_ 。ただし、 `@QuarkusComponentTest#useSystemConfigSources()` または `QuarkusComponentTestExtensionBuilder#useSystemConfigSources()` を使用して、この動作を設定することができます。"

#: _versions/main/guides/testing-components.adoc
msgid "Panache entities using the active record pattern"
msgstr ""

#: _versions/main/guides/testing-components.adoc
msgid ""
"If you are using the active record pattern you cannot easily leverage `Mockito#mockStatic()` to mock static methods declared on `PanacheEntityBase`.\n"
"In a normal Quarkus app, these static methods are automatically overridden in subclasses.\n"
"However, `QuarkusComponentTest` does not start a full Quarkus application.\n"
"Nevertheless, you can use the `quarkus-panache-mock` module which integrates seamlessly with `QuarkusComponentTest`."
msgstr ""

#: _versions/main/guides/testing-components.adoc
msgid "Add this dependency to your `pom.xml`:"
msgstr "この依存関係を `pom.xml` に追加してください。"

#: _versions/main/guides/testing-components.adoc
msgid "Given this simple entity:"
msgstr "このシンプルなエンティティがある場合に"

#: _versions/main/guides/testing-components.adoc
msgid "That is used in a simple bean:"
msgstr ""

#: _versions/main/guides/testing-components.adoc
msgid "You can write your component test like:"
msgstr ""

#: _versions/main/guides/testing-components.adoc
msgid "`@MockPanacheEntities` installs mocks for the given entity classes."
msgstr ""

#: _versions/main/guides/testing-components.adoc
msgid "The test injects the component under the test - `PersonService`."
msgstr ""

#: _versions/main/guides/testing-components.adoc
msgid "See also xref:hibernate-orm-panache.adoc#mocking_active_record[Simplified Hibernate ORM with Panache - Using the active record pattern] for more information."
msgstr ""

#: _versions/main/guides/testing-components.adoc
msgid "Currently, only the integration with Hibernate ORM is supported. Other variants of the Panache API, such as MongoDB and Hibernate Reactive, are not supported yet."
msgstr ""

#: _versions/main/guides/testing-components.adoc
msgid "Mocking CDI Interceptors"
msgstr "CDI インターセプターのモック化"

#: _versions/main/guides/testing-components.adoc
msgid ""
"If a tested component class declares an interceptor binding then you might need to mock the interception too.\n"
"There are two ways to accomplish this task.\n"
"First, you can define an interceptor class as a static nested class of the test class."
msgstr ""
"テスト対象のコンポーネントクラスがインターセプターバインディングを宣言している場合は、インターセプションもモック化する必要があるかもしれません。\n"
"このタスクを達成するには 2 つの方法があります。\n"
"まず、テストクラスのネストされた静的クラスとしてインターセプタークラスを定義できます。"

#: _versions/main/guides/testing-components.adoc
msgid "`@SimpleBinding` is an interceptor binding."
msgstr "`@SimpleBinding` はインターセプターバインディングです。"

#: _versions/main/guides/testing-components.adoc
msgid "The interceptor class is automatically considered a tested component."
msgstr "インターセプタークラスは自動的にテスト対象コンポーネントと見なされます。"

#: _versions/main/guides/testing-components.adoc
msgid "Static nested classes declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr "`@QuarkusComponentTest` でアノテーションが付けられたテストクラスで宣言された静的ネストクラスは、意図しない CDI 競合を防ぐために、 `@QuarkusTest` の実行時に Bean 検出から除外されます。"

#: _versions/main/guides/testing-components.adoc
msgid "The second option is to declare an interceptor method directly in the test class; the method is then invoked in the relevant interception phase."
msgstr "もう 1 つの方法は、テストクラスでインターセプターメソッドを直接宣言することです。この場合、メソッドが関連するインターセプションフェーズで呼び出されます。"

#: _versions/main/guides/testing-components.adoc
msgid "The interceptor bindings of the resulting interceptor are specified by annotating the method with the interceptor binding types."
msgstr "結果として得られるインターセプターのインターセプターバインディングは、メソッドにインターセプターバインディングタイプをアノテーション付けすることによって指定されます。"

#: _versions/main/guides/testing-components.adoc
msgid "Defines the interception type."
msgstr "インターセプトの種類を定義します。"
