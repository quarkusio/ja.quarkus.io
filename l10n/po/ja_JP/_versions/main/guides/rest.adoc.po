msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: \n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 3.5\n"

#: _versions/main/guides/rest.adoc
msgid "Writing REST Services with Quarkus REST (formerly RESTEasy Reactive)"
msgstr "Quarkus REST（旧RESTEasy Reactive）によるRESTサービスの作成"

#: _versions/main/guides/rest.adoc
msgid "This guide explains how to write REST Services with Quarkus REST in Quarkus."
msgstr "このガイドでは、QuarkusでQuarkus RESTを使用してRESTサービスを記述する方法を説明します。"

#: _versions/main/guides/rest.adoc
msgid ""
"This is the reference guide for Quarkus REST.\n"
"For a more lightweight introduction, please refer to the xref:rest-json.adoc[Writing JSON REST services guides]."
msgstr "Quarkus RESTのリファレンスガイドです。より軽量な紹介については、 xref:rest-json.adoc[JSON RESTサービスの作成ガイドを] 参照してください。"

#: _versions/main/guides/rest.adoc
msgid "What is Quarkus REST?"
msgstr "Quarkus RESTとは何ですか？"

#: _versions/main/guides/rest.adoc
msgid ""
"Quarkus REST is a new link:{jaxrsspec}[Jakarta REST (formerly known as JAX-RS)]\n"
"implementation written from the ground up to work on our\n"
"common https://vertx.io/[Vert.x] layer and is thus fully reactive, while also being very tightly integrated with\n"
"Quarkus and consequently moving a lot of work to build time."
msgstr ""
"Quarkus RESTは、共通の link:https://vertx.io/[Vert.x] レイヤーで動作するようにゼロから書かれた新しい link:{jaxrsspec}[Jakarta REST（以前はJAX-RSとして知られていました）] の実装で、完全にリアクティブです。\n"
"Quarkusと非常に緊密に統合されており、その結果、多くの作業をビルド時に移行することができます。"

#: _versions/main/guides/rest.adoc
msgid ""
"You should be able to use it in place of any Jakarta REST implementation, but on top of that it has\n"
"great performance for both blocking and non-blocking endpoints, and a lot of new features on top\n"
"of what Jakarta REST provides."
msgstr "Jakarta RESTの実装として使えるはずですが、その上、ブロッキングとノンブロッキングの両方のエンドポイントに対して素晴らしいパフォーマンスを発揮し、Jakarta RESTが提供する機能の上に多くの新機能を備えています。"

#: _versions/main/guides/rest.adoc
msgid "Writing endpoints"
msgstr "エンドポイントの作成"

#: _versions/main/guides/rest.adoc
msgid "Getting started"
msgstr "はじめに"

#: _versions/main/guides/rest.adoc
msgid "Add the following import to your build file:"
msgstr "次のインポートをビルドファイルに追加します:"

#: _versions/main/guides/rest.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/main/guides/rest.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/main/guides/rest.adoc
msgid "You can now write your first endpoint in the `org.acme.rest.Endpoint` class:"
msgstr "これで、 `org.acme.rest.Endpoint` クラスで最初のエンドポイントを書くことができます:"

#: _versions/main/guides/rest.adoc
msgid "Terminology"
msgstr "用語解説"

#: _versions/main/guides/rest.adoc
msgid "REST"
msgstr "REST"

#: _versions/main/guides/rest.adoc
msgid "https://en.wikipedia.org/wiki/Representational_state_transfer[REpresentational State Transfer]"
msgstr "https://en.wikipedia.org/wiki/Representational_state_transfer[REpresentational State Transfer]"

#: _versions/main/guides/rest.adoc
msgid "Endpoint"
msgstr "エンドポイント"

#: _versions/main/guides/rest.adoc
msgid "Java method which is called to serve a REST call"
msgstr "REST 呼び出しを処理するために呼び出される Java メソッド"

#: _versions/main/guides/rest.adoc
msgid "URL / URI (Uniform Resource Locator / Identifier)"
msgstr "URL / URI (Uniform Resource Locator / Identifier)"

#: _versions/main/guides/rest.adoc
msgid "Used to identify the location of REST resources (https://tools.ietf.org/html/rfc7230#section-2.7[specification])"
msgstr "REST リソースの場所を特定するために使用 (https://tools.ietf.org/html/rfc7230#section-2.7[仕様])"

#: _versions/main/guides/rest.adoc
msgid "Resource"
msgstr "リソース"

#: _versions/main/guides/rest.adoc
msgid "Represents your domain object. This is what your API serves and modifies. Also called an `entity` in Jakarta REST."
msgstr "ドメインオブジェクトを表します。これは、APIが提供し、変更するものです。Jakarta RESTでは `entity` とも呼ばれます。"

#: _versions/main/guides/rest.adoc
msgid "Representation"
msgstr "表現"

#: _versions/main/guides/rest.adoc
msgid "How your resource is represented on the wire, can vary depending on content types"
msgstr "通信上でのリソースの表現方法は、Content typeによって異なります。"

#: _versions/main/guides/rest.adoc
msgid "Content type"
msgstr "Content type"

#: _versions/main/guides/rest.adoc
msgid "Designates a particular representation (also called a media type), for example `text/plain` or `application/json`"
msgstr "text/plain や application/json などの特定の表現 (メディアタイプとも呼ばれます) を指定します"

#: _versions/main/guides/rest.adoc
msgid "HTTP"
msgstr "HTTP"

#: _versions/main/guides/rest.adoc
msgid "Underlying wire protocol for routing REST calls (see https://tools.ietf.org/html/rfc7230[HTTP specifications])"
msgstr "REST 呼び出しをルーティングするための基本的なワイヤープロトコル (https://tools.ietf.org/html/rfc7230[HTTP 仕様] を参照)"

#: _versions/main/guides/rest.adoc
msgid "HTTP request"
msgstr "HTTP リクエスト"

#: _versions/main/guides/rest.adoc
msgid "The request part of the HTTP call, consisting of an HTTP method, a target URI, headers and an optional message body"
msgstr "HTTP メソッド、ターゲット URI、ヘッダー、およびオプションのメッセージ・ボディで構成される HTTP 呼び出しのリクエスト部分。"

#: _versions/main/guides/rest.adoc
msgid "HTTP response"
msgstr "HTTP レスポンス"

#: _versions/main/guides/rest.adoc
msgid "The response part of the HTTP call, consisting of an HTTP response status, headers and an optional message body"
msgstr "HTTP レスポンス・ステータス、ヘッダー、およびオプションのメッセージ・ボディで構成される、HTTP 呼び出しのレスポンス部分。"

#: _versions/main/guides/rest.adoc
msgid "Declaring endpoints: URI mapping"
msgstr "エンドポイントの宣言:URI マッピング"

#: _versions/main/guides/rest.adoc
msgid ""
"Any class annotated with a link:{jaxrsapi}/jakarta/ws/rs/Path.html[`@Path`] annotation can have its methods exposed as REST endpoints,\n"
"provided they have an HTTP method annotation (see below)."
msgstr "link:{jaxrsapi}/jakarta/ws/rs/Path.html[@Path] アノテーションでアノテーションされたクラスは、HTTPメソッドアノテーション（下記参照）が付与されている限り、RESTエンドポイントとして公開されるメソッドを持つことができます。"

#: _versions/main/guides/rest.adoc
msgid ""
"That link:{jaxrsapi}/jakarta/ws/rs/Path.html[`@Path`] annotation defines the URI prefix under which those methods will be exposed. It can\n"
"be empty, or contain a prefix such as `rest` or `rest/V1`."
msgstr "その link:{jaxrsapi}/jakarta/ws/rs/Path.html[@Path] アノテーションは、これらのメソッドを公開するためのURIプレフィックスを定義します。これは、空であるか、または `rest` や `rest/V1` のような接頭辞を含むことができます。"

#: _versions/main/guides/rest.adoc
msgid ""
"Each exposed endpoint method can in turn have another link:{jaxrsapi}/jakarta/ws/rs/Path.html[`@Path`] annotation which adds to its containing\n"
"class annotation. For example, this defines a `rest/hello` endpoint:"
msgstr "公開された各エンドポイント メソッドは、そのメソッドを含むクラス アノテーションに追加する別の link:{jaxrsapi}/jakarta/ws/rs/Path.html[`@Path`] アノテーションを持つことができます。 たとえば、これは `rest/hello` エンドポイントを定義します。"

#: _versions/main/guides/rest.adoc
msgid "See <<uri-parameters,URI parameters>> for more information about URI mapping."
msgstr "URI マッピングの詳細は、<<uri-parameters,URI parameters>> を参照してください。"

#: _versions/main/guides/rest.adoc
msgid "You can set the root path for all rest endpoints using the `@ApplicationPath` annotation, as shown below."
msgstr "以下に示すように、 `@ApplicationPath` アノテーションを使用して、すべての REST エンドポイントのルートパスを設定できます。"

#: _versions/main/guides/rest.adoc
#, fuzzy
msgid ""
"This will cause all rest endpoints to be resolve relative to `/api`, so the endpoint above with `@Path(\"rest\")` would\n"
"be accessible at `/api/rest/`. You can also set the <<quarkus-rest-common_quarkus-rest-path,`quarkus.rest.path`>> build time property to set the root path if you\n"
"don't want to use an annotation."
msgstr "これにより、残りのエンドポイントはすべて `/api` からの相対パスで解決されるようになり、 上記の `@Path(\"rest\")` のエンドポイントは `/api/rest/` でアクセスできるようになります。また、アノテーションを使用しない場合は xref:quarkus-rest-common_quarkus-rest-path[quarkus.rest.path] アノテーションを使用したくない場合は、ルート・パスを設定するために build time プロパティを設定することもできます。"

#: _versions/main/guides/rest.adoc
msgid "Declaring endpoints: HTTP methods"
msgstr "エンドポイントの宣言: HTTP メソッド"

#: _versions/main/guides/rest.adoc
msgid ""
"Each endpoint method must be annotated with one of the following annotations, which defines which HTTP\n"
"method will be mapped to the method:"
msgstr "各エンドポイントメソッドには、次のいずれかのアノテーションを付ける必要があります。これにより、どの HTTP メソッドがそのメソッドにマップされるかが定義されます。"

#: _versions/main/guides/rest.adoc
msgid "HTTP method annotations"
msgstr "HTTPメソッドアノテーション"

#: _versions/main/guides/rest.adoc
msgid "Annotation"
msgstr "アノテーション"

#: _versions/main/guides/rest.adoc
msgid "Usage"
msgstr "使用方法"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/GET.html[`@GET`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/GET.html[`@GET`]"

#: _versions/main/guides/rest.adoc
msgid "Obtain a resource representation, should not modify state, link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.1[HTTP docs])"
msgstr "リソース表現を取得します。状態を変更しないでください。link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.1[HTTP docs])"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/HEAD.html[`@HEAD`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/HEAD.html[`@HEAD`]"

#: _versions/main/guides/rest.adoc
msgid "Obtain metadata about a resource, similar to `GET` with no body (link:{httpspec}#section-4.3.2[HTTP docs])"
msgstr "ボディのない `GET` と同様に、リソースに関するメタデータを取得します (link:{httpspec}#section-4.3.2[HTTP docs])"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/POST.html[`@POST`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/POST.html[`@POST`]"

#: _versions/main/guides/rest.adoc
msgid "Create a resource and obtain a link to it (link:{httpspec}#section-4.3.3[HTTP docs])"
msgstr "リソースを作成し、そのリソースへのリンクを取得します (link:{httpspec}#section-4.3.3[HTTP docs])"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/PUT.html[`@PUT`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/PUT.html[`@PUT`]"

#: _versions/main/guides/rest.adoc
msgid "Replace a resource or create one, should be link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.4[HTTP docs])"
msgstr "リソースを置き換えるか作成します。link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.4[HTTP docs]) であるべきです。"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/DELETE.html[`@DELETE`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/DELETE.html[`@DELETE`]"

#: _versions/main/guides/rest.adoc
msgid "Delete an existing resource, link:{httpspec}#section-4.2.2[idempotent]  (link:{httpspec}#section-4.3.5[HTTP docs])"
msgstr "既存のリソースを削除します。link:{httpspec}#section-4.2.2[idempotent]  (link:{httpspec}#section-4.3.5[HTTP docs])"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/OPTIONS.html[`@OPTIONS`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/OPTIONS.html[`@OPTIONS`]"

#: _versions/main/guides/rest.adoc
msgid "Obtain information about a resource, link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.7[HTTP docs])"
msgstr "リソースに関する情報を取得します。link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.7[HTTP docs]) です。"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/PATCH.html[`@PATCH`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/PATCH.html[`@PATCH`]"

#: _versions/main/guides/rest.adoc
msgid "Update a resource, or create one, not link:{httpspec}#section-4.2.2[idempotent] (https://tools.ietf.org/html/rfc5789#section-2[HTTP docs])"
msgstr "リソースを更新するか、作成します。link:{httpspec}#section-4.2.2[idempotent] (https://tools.ietf.org/html/rfc5789#section-2[HTTP docs]) ではありません。"

#: _versions/main/guides/rest.adoc
msgid ""
"You can also declare other HTTP methods by declaring them as an annotation with the\n"
"link:{jaxrsapi}/jakarta/ws/rs/HttpMethod.html[`@HttpMethod`] annotation:"
msgstr "また、他のメソッドを link:{jaxrsapi}/jakarta/ws/rs/HttpMethod.html[@HttpMethod] アノテーションを使用して宣言することで宣言することも出来ます。"

#: _versions/main/guides/rest.adoc
msgid "Declaring endpoints: representation / content types"
msgstr "エンドポイントの宣言: 表現/コンテンツタイプ"

#: _versions/main/guides/rest.adoc
msgid ""
"Each endpoint method may consume or produce specific resource representations, which are indicated by\n"
"the HTTP link:{httpspec}#section-3.1.1.5[`Content-Type`] header, which in turn contains\n"
"link:{httpspec}#section-3.1.1.1[MIME (Media Type)] values, such as the following:"
msgstr "各エンドポイントメソッドは、特定のリソース表現を消費したり生成したりすることがあり、それは HTTP link:{httpspec}#section-3.1.1.5[`Content-Type`] header で示され、その中に次のような link:{httpspec}#section-3.1.1.1[MIME (Media Type)] 値が含まれています。"

#: _versions/main/guides/rest.adoc
msgid "`text/plain` which is the default for any endpoint returning a `String`."
msgstr "`String` を返すエンドポイントのデフォルトである `text/plain`。"

#: _versions/main/guides/rest.adoc
msgid "`text/html` for HTML (such as with xref:qute.adoc[Qute templating])"
msgstr "HTML の `text/html` (xref:qute.adoc[Qute テンプレート] と同様)"

#: _versions/main/guides/rest.adoc
msgid "`application/json` for a <<json,JSON REST endpoint>>"
msgstr "<<json,JSON REST endpoint>> の `application/json`"

#: _versions/main/guides/rest.adoc
msgid "`text/*` which is a sub-type wildcard for any text media type"
msgstr "任意のテキストメディアタイプのサブタイプワイルドカードである `text/*`"

#: _versions/main/guides/rest.adoc
msgid "`\\*/*` which is a wildcard for any media type"
msgstr "任意のメディアタイプのワイルドカードである `\\*/*`"

#: _versions/main/guides/rest.adoc
msgid ""
"You may annotate your endpoint class with the link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`@Produces`]\n"
"or link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[`@Consumes`] annotations, which\n"
"allow you to specify one or more media types that your endpoint may accept as HTTP request body\n"
"or produce as HTTP response body. Those class annotations apply to each method."
msgstr "エンドポイントクラスにlink:{jaxrsapi}/jakarta/ws/rs/Produces.html[@Produces] または link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[@Consumes] アノテーションをつけることができます。 これらを使用し、エンドポイントが HTTP リクエストボディとして受け入れ、HTTP レスポンスボディとして生成するメディアタイプを 1 つまたは複数指定できます。これらのクラスアノテーションは、各メソッドに適用されます。"

#: _versions/main/guides/rest.adoc
msgid ""
"Any method may also be annotated with the link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`@Produces`]\n"
"or link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[`@Consumes`] annotations, in which\n"
"case they override any eventual class annotation."
msgstr "また、link:{jaxrsapi}/jakarta/ws/rs/Produces.html[@Produces] や link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[@Consumes] アノテーションをメソッドにつけることもできます。そのアノテーションは最終的にクラスアノテーションをオーバーライドします。"

#: _versions/main/guides/rest.adoc
msgid ""
"The link:{jaxrsapi}/jakarta/ws/rs/core/MediaType.html[`MediaType`] class has many constants you\n"
"can use to point to specific pre-defined media types."
msgstr "link:{jaxrsapi}/jakarta/ws/rs/core/MediaType.html[MediaType] クラスには、あらかじめ定義された特定のメディアタイプを指し示すために使用できる多くの定数があります。"

#: _versions/main/guides/rest.adoc
msgid "See the <<negotiation>> section for more information."
msgstr "詳細は、<<negotiation>> セクションを参照してください。"

#: _versions/main/guides/rest.adoc
msgid "Accessing request parameters"
msgstr "リクエストパラメーターへのアクセス"

#: _versions/main/guides/rest.adoc
msgid ""
"don't forget to configure your compiler to generate parameter name information with `-parameters` (javac)\n"
"or `<parameters>` or `<maven.compiler.parameters>` (https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#parameters[Maven])."
msgstr "パラメーター名の情報を生成するために、 `-parameters` (javac) または `<parameters>` または `<maven.compiler.parameters>` (https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#parameters[Maven]) を使ってコンパイラーを設定することを忘れないでください。"

#: _versions/main/guides/rest.adoc
msgid "The following HTTP request elements may be obtained by your endpoint method:"
msgstr "次の HTTP リクエスト要素は、エンドポイントメソッドによって取得される可能性があります。"

#: _versions/main/guides/rest.adoc
msgid "HTTP request parameter annotations"
msgstr "テーブル HTTP リクエストパラメーターアノテーション"

#: _versions/main/guides/rest.adoc
msgid "HTTP element"
msgstr "HTTP 要素"

#: _versions/main/guides/rest.adoc
msgid "[[path-parameter]]Path parameter"
msgstr "[[path-parameter]]パスパラメーター"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`] (or nothing)"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`] (あるいは無指定)"

#: _versions/main/guides/rest.adoc
msgid ""
"URI template parameter (simplified version of the https://tools.ietf.org/html/rfc6570[URI Template specification]),\n"
"see <<uri-parameters,URI parameters>> for more information."
msgstr ""
"URI テンプレートパラメーター (https://tools.ietf.org/html/rfc6570[URI Template specification] の簡易バージョン)。\n"
"詳細は、<<uri-parameters,URI パラメーター>> を参照してください。"

#: _versions/main/guides/rest.adoc
msgid "Query parameter"
msgstr "クエリーパラメーター"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestQuery.html[`@RestQuery`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestQuery.html[`@RestQuery`]"

#: _versions/main/guides/rest.adoc
msgid "The value of a https://tools.ietf.org/html/rfc3986#section-3.4[URI query parameter]"
msgstr "https://tools.ietf.org/html/rfc3986#section-3.4[URI クエリーパラメーター] の値"

#: _versions/main/guides/rest.adoc
msgid "Header"
msgstr "ヘッダ"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestHeader.html[`@RestHeader`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestHeader.html[`@RestHeader`]"

#: _versions/main/guides/rest.adoc
msgid "The value of an https://tools.ietf.org/html/rfc7230#section-3.2[HTTP header]"
msgstr "https://tools.ietf.org/html/rfc7230#section-3.2[HTTP ヘッダ] の値"

#: _versions/main/guides/rest.adoc
msgid "Cookie"
msgstr "Cookie"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestCookie.html[`@RestCookie`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestCookie.html[`@RestCookie`]"

#: _versions/main/guides/rest.adoc
msgid "The value of an https://tools.ietf.org/html/rfc6265#section-4.2[HTTP cookie]"
msgstr "https://tools.ietf.org/html/rfc6265#section-4.2[HTTP cookie] の値"

#: _versions/main/guides/rest.adoc
msgid "Form parameter"
msgstr "フォームパラメーター"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`]"

#: _versions/main/guides/rest.adoc
msgid "The value of an https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST[HTTP URL-encoded FORM]"
msgstr "https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST[HTTP URL-encoded FORM] の値"

#: _versions/main/guides/rest.adoc
msgid "Matrix parameter"
msgstr "マトリックスパラメーター"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestMatrix.html[`@RestMatrix`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestMatrix.html[`@RestMatrix`]"

#: _versions/main/guides/rest.adoc
msgid "The value of an https://tools.ietf.org/html/rfc3986#section-3.3[URI path segment parameter]"
msgstr "https://tools.ietf.org/html/rfc3986#section-3.3[URI パスセグメントパラメーター] の値"

#: _versions/main/guides/rest.adoc
msgid ""
"For each of those annotations, you may specify the name of the element they refer to,\n"
"otherwise, they will use the name of the annotated method parameter."
msgstr "これらのアノテーションはそれぞれ、参照する要素の名前を指定することができ、指定していない場合は、アノテーションされたメソッドのパラメーターの名前が使用されます。"

#: _versions/main/guides/rest.adoc
msgid "If a client made the following HTTP call:"
msgstr "クライアントが次の HTTP 呼び出しを行った場合:"

#: _versions/main/guides/rest.adoc
msgid "Then you could obtain all the various parameters with this endpoint method:"
msgstr "次に、このエンドポイントメソッドを使用してさまざまなパラメーターをすべて取得できます。"

#: _versions/main/guides/rest.adoc
msgid ""
"The link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`]\n"
"annotation is optional: any parameter whose name matches an existing URI\n"
"template variable will be automatically assumed to have link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`]."
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`] アノテーションはオプションです。名前が既存のURIテンプレート変数と一致するパラメータは、自動的に link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`] を持つと想定されます。"

#: _versions/main/guides/rest.adoc
msgid ""
"You can also use any of the Jakarta REST annotations link:{jaxrsapi}/jakarta/ws/rs/PathParam.html[`@PathParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/QueryParam.html[`@QueryParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/HeaderParam.html[`@HeaderParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/CookieParam.html[`@CookieParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/FormParam.html[`@FormParam`] or\n"
"link:{jaxrsapi}/jakarta/ws/rs/MatrixParam.html[`@MatrixParam`] for this,\n"
"but they require you to specify the parameter name."
msgstr "また、これに対してJakarta RESTアノテーション link:{jaxrsapi}/jakarta/ws/rs/PathParam.html[@PathParam] または link:{jaxrsapi}/jakarta/ws/rs/QueryParam.html[@QueryParam] , link:{jaxrsapi}/jakarta/ws/rs/HeaderParam.html[@HeaderParam] , link:{jaxrsapi}/jakarta/ws/rs/CookieParam.html[@CookieParam] , link:{jaxrsapi}/jakarta/ws/rs/FormParam.html[@FormParam] ,link:{jaxrsapi}/jakarta/ws/rs/MatrixParam.html[@MatrixParam] のいずれかを使用することができます。ただし、パラメータ名を指定する必要があります。"

#: _versions/main/guides/rest.adoc
msgid "See <<parameter-mapping>> for more advanced use-cases."
msgstr "より詳細なユースケースは、 <<parameter-mapping>> を参照してください。"

#: _versions/main/guides/rest.adoc
msgid ""
"When an exception occurs in Quarkus REST request parameter handling code, the exception is not printed by default to the log (for security reasons).\n"
"This can sometimes make it hard to understand why certain HTTP status codes are returned (as the Jakarta REST mandates the use of non-intuitive error codes in various cases).\n"
"In such cases, users are encouraged to set the logging level for the `org.jboss.resteasy.reactive.server.handlers.ParameterHandler` category to `DEBUG` like so:"
msgstr "Quarkus RESTリクエストパラメータ処理コードで例外が発生した場合、例外はデフォルトでログに出力されません（セキュリティ上の理由から）。このため、特定のHTTPステータスコードが返される理由を理解するのが難しい場合があります（jakarta RESTでは、さまざまなケースで直感的でないエラーコードの使用が義務付けられているため）。このような場合、 `org.jboss.resteasy.reactive.server.handlers.ParameterHandler` カテゴリーのログレベルを `DEBUG` のように設定するとよいでしょう。"

#: _versions/main/guides/rest.adoc
msgid "Grouping parameters in a custom class"
msgstr "カスタムクラスでパラメータをグループ化"

#: _versions/main/guides/rest.adoc
msgid ""
"You can group your request parameters in a container class instead of declaring them as method parameters to you endpoint,\n"
"so we can rewrite the previous example like this:"
msgstr "リクエストパラメータをメソッドパラメータとしてエンドポイントに宣言する代わりに、コンテナクラスでまとめることができます。したがって、前の例を次のように書き換えることができます。"

#: _versions/main/guides/rest.adoc
msgid "`BeanParam` is required to comply with the Jakarta REST specification so that libraries like OpenAPI can introspect the parameters."
msgstr "`BeanParam` は、OpenAPIのようなライブラリがパラメータを確認できるように、Jakarta REST仕様に準拠する必要があります。"

#: _versions/main/guides/rest.adoc
msgid "Record classes are also supported, so you could rewrite the previous example as a record:"
msgstr "レコードクラスもサポートされているため、前の例をレコードとして書き直すことができます。"

#: _versions/main/guides/rest.adoc
msgid "[[declaring-uri-parameters]] Declaring URI parameters"
msgstr "[[declaring-uri-parameters]] URI パラメーターの宣言"

#: _versions/main/guides/rest.adoc
msgid ""
"You can declare URI parameters and use regular expressions in your path, so for instance\n"
"the following endpoint will serve requests for `/hello/stef/23` and `/hello` but not\n"
"`/hello/stef/0x23`:"
msgstr "URI パラメーターを宣言し、パスで正規表現を使用できるため、たとえば、次のエンドポイントは `/hello/stef/23` と `/hello` のリクエストを処理しますが、 `/hello/stef/0x23` は処理しません。"

#: _versions/main/guides/rest.adoc
msgid "Accessing the request body"
msgstr "リクエストボディへのアクセス"

#: _versions/main/guides/rest.adoc
msgid ""
"Any method parameter with no annotation will receive the method body.footnote:[Unless it is a\n"
"<<path-parameter,URI template parameter>> or a <<context-objects,context object>>.], after it has been mapped from\n"
"its HTTP representation to the Java type of the parameter."
msgstr "アノテーションのないメソッドパラメーターは、HTTP 表現からパラメーターの Java タイプにマッピングされた後、それが <<path-parameter,URI template parameter>> または <<context-objects,context object>> でない限り、メソッド本文の脚注を受け取ります。"

#: _versions/main/guides/rest.adoc
msgid "The following parameter types will be supported out of the box:"
msgstr "次のパラメーター型は、そのままでサポートされます。"

#: _versions/main/guides/rest.adoc
msgid "Request body parameter types"
msgstr "リクエストボディパラメータータイプ"

#: _versions/main/guides/rest.adoc
msgid "Type"
msgstr "タイプ"

#: _versions/main/guides/rest.adoc
msgid "link:{jdkapi}/java/io/File.html[`File`]"
msgstr "link:{jdkapi}/java/io/File.html[`File`]"

#: _versions/main/guides/rest.adoc
msgid "The entire request body in a temporary file"
msgstr "一時ファイル内のリクエストボディ全体"

#: _versions/main/guides/rest.adoc
msgid "`byte[]`"
msgstr "`byte[]`"

#: _versions/main/guides/rest.adoc
msgid "The entire request body, not decoded"
msgstr "デコードされていないリクエストボディ全体"

#: _versions/main/guides/rest.adoc
msgid "`char[]`"
msgstr "`char[]`"

#: _versions/main/guides/rest.adoc
msgid "The entire request body, decoded"
msgstr "デコードされたリクエストボディ全体"

#: _versions/main/guides/rest.adoc
msgid "link:{jdkapi}/java/lang/String.html[`String`]"
msgstr "link:{jdkapi}/java/lang/String.html[`String`]"

#: _versions/main/guides/rest.adoc
msgid "link:{jdkapi}/java/io/InputStream.html[`InputStream`]"
msgstr "link:{jdkapi}/java/io/InputStream.html[`InputStream`]"

#: _versions/main/guides/rest.adoc
msgid "The request body in a blocking stream"
msgstr "ブロッキングストリームのリクエストボディ"

#: _versions/main/guides/rest.adoc
msgid "link:{jdkapi}/java/io/Reader.html[`Reader`]"
msgstr "link:{jdkapi}/java/io/Reader.html[`Reader`]"

#: _versions/main/guides/rest.adoc
msgid "All Java primitives and their wrapper classes"
msgstr "すべての Java プリミティブとそのラッパークラス"

#: _versions/main/guides/rest.adoc
msgid "Java primitive types"
msgstr "Java プリミティブ型"

#: _versions/main/guides/rest.adoc
msgid "link:{jdkapi}/java/math/BigDecimal.html[`BigDecimal`], link:{jdkapi}/java/math/BigInteger.html[`BigInteger`]"
msgstr "link:{jdkapi}/java/math/BigDecimal.html[`BigDecimal`], link:{jdkapi}/java/math/BigInteger.html[`BigInteger`]"

#: _versions/main/guides/rest.adoc
msgid "Large integers and decimals."
msgstr "大きな整数と小数"

#: _versions/main/guides/rest.adoc
msgid ""
"link:{jsonpapi}/jakarta/json/JsonArray.html[`JsonArray`], link:{jsonpapi}/jakarta/json/JsonObject.html[`JsonObject`],\n"
"link:{jsonpapi}/jakarta/json/JsonStructure.html[`JsonStructure`], link:{jsonpapi}/jakarta/json/JsonValue.html[`JsonValue`]"
msgstr ""
"link:{jsonpapi}/jakarta/json/JsonArray.html[`JsonArray`], link:{jsonpapi}/jakarta/json/JsonObject.html[`JsonObject`],\n"
"link:{jsonpapi}/jakarta/json/JsonStructure.html[`JsonStructure`], link:{jsonpapi}/jakarta/json/JsonValue.html[`JsonValue`]"

#: _versions/main/guides/rest.adoc
msgid "JSON value types"
msgstr "JSON 値の型"

#: _versions/main/guides/rest.adoc
msgid "link:{vertxapi}/io/vertx/core/buffer/Buffer.html[`Buffer`]"
msgstr "link:{vertxapi}/io/vertx/core/buffer/Buffer.html[`Buffer`]"

#: _versions/main/guides/rest.adoc
msgid "Vert.x Buffer"
msgstr "Vert.x Buffer"

#: _versions/main/guides/rest.adoc
msgid "any other type"
msgstr "他の型"

#: _versions/main/guides/rest.adoc
msgid "Will be <<json,mapped from JSON to that type>>"
msgstr "<<json,mapped from JSON to that type>> になります"

#: _versions/main/guides/rest.adoc
msgid "You can add support for more <<readers-writers,body parameter types>>."
msgstr "さらに<<readers-writers,body parameter types>> のサポートを追加することができます。"

#: _versions/main/guides/rest.adoc
msgid "Handling Multipart Form data"
msgstr "マルチパートフォームデータの処理"

#: _versions/main/guides/rest.adoc
msgid ""
"To handle HTTP requests that have `multipart/form-data` as their content type, you can use the regular\n"
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] annotation, but we have special types\n"
"that allow you to access the parts as files or as entities.\n"
"Let us look at an example of its use."
msgstr "コンテンツタイプとして `multipart/form-data` を持つ HTTP リクエストを処理するために、通常の link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] というアノテーションを使うことが出来ますが、パーツをファイルとして、あるいはエンティティとしてアクセスできる特別な型があります。その使用例を見てみましょう。"

#: _versions/main/guides/rest.adoc
msgid ""
"Assuming an HTTP request containing a file upload, a JSON entity and a form value containing a string description, we could write\n"
"the following endpoint:"
msgstr "ファイルアップロード、JSONエンティティ、文字列の説明を含むフォーム値を含むHTTPリクエストを想定すると、次のようなエンドポイントを書くことができます："

#: _versions/main/guides/rest.adoc
msgid ""
"The `description` parameter will contain the data contained in the part of HTTP request called `description` (because\n"
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] does not define a value, the field name is used),\n"
"while the `file` parameter will contain data about the uploaded file in the `image` part of HTTP request, and\n"
"the `person` parameter will read the `Person` entity using the `JSON` <<json,body reader>>."
msgstr "`description` パラメーターには、HTTP リクエストの `description` という部分に含まれるデータが格納されます（link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] が値を定義していない場合は、フィールド名が使用されるため）。一方、 `file` パラメータは、HTTP リクエストの `image` 部分にアップロードされたファイルに関するデータを含み、 `person` パラメーターは、 `JSON` xref:json[ボディーリーダー] を使用して `Person` エンティティーを読み込みます。"

#: _versions/main/guides/rest.adoc
msgid ""
"The size of every part in a multipart request must conform to the value of `quarkus.http.limits.max-form-attribute-size`, for which the default is 2048 bytes.\n"
"Any request with a part of a size exceeding this configuration will result in HTTP status code 413."
msgstr "マルチパートリクエストの各パートのサイズは、 `quarkus.http.limits.max-form-attribute-size` の値に準拠する必要があり、そのデフォルトは 2048 バイトです。この設定を超えるサイズのパートを持つリクエストは、HTTPステータスコード413となります。"

#: _versions/main/guides/rest.adoc
msgid ""
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/multipart/FileUpload.html[`FileUpload`]\n"
"provides access to various metadata of the uploaded file. If however all you need is a handle to the uploaded file, `java.nio.file.Path` or `java.io.File` could be used."
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/multipart/FileUpload.html[`FileUpload`] はアップロードされたファイルの様々なメタデータにアクセスすることができます。しかし、アップロードされたファイルへの処理が必要なだけなら、 `java.nio.file.Path` や `java.io.File` を使用することができます。"

#: _versions/main/guides/rest.adoc
msgid "If you need access to all uploaded files for all parts regardless of their names, you can do it with `@RestForm(FileUpload.ALL) List<FileUpload>`."
msgstr "名前に関係なく、アップロードされたすべてのファイルのすべてのパーツにアクセスする必要がある場合は、 `@RestForm(FileUpload.ALL) List<FileUpload>` で実現出来ます。"

#: _versions/main/guides/rest.adoc
msgid ""
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PartType.html[`@PartType`] is used to aid\n"
"in deserialization of the corresponding part of the request into the desired Java type. It is only required if\n"
"you need to use a <<readers-writers,special body parameter type>> for that particular parameter."
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PartType.html[`@PartType`] を使用して、任意の Javav の型にリクエストの対応部分をデシリアライズする際の補助とします。特定のパラメーターに <<readers-writers,special body parameter type>> を使用する必要がある場合にのみ必要です。"

#: _versions/main/guides/rest.adoc
msgid "Just like for any other request parameter type, you can also group them into a <<parameter-grouping,container class>>."
msgstr "他のリクエストパラメータータイプと同様に、これらを <<parameter-grouping,container class>> にまとめるることもできます。"

#: _versions/main/guides/rest.adoc
msgid ""
"When handling file uploads, it is very important to move the file to permanent storage (like a database, a dedicated file system or a cloud storage) in your code that handles the POJO.\n"
"Otherwise, the file will no longer be accessible when the request terminates.\n"
"Moreover, if `quarkus.http.body.delete-uploaded-files-on-end` is set to true, Quarkus will delete the uploaded file when the HTTP response is sent. If the setting is disabled,\n"
"the file will reside on the file system of the server (in the directory defined by the `quarkus.http.body.uploads-directory` configuration option), but as the uploaded files are saved\n"
"with a UUID file name and no additional metadata is saved, these files are essentially a random dump of files."
msgstr "ファイルのアップロードを処理する場合、POJO を処理するコード内でファイルを永続的なストレージ (データベース、専用ファイルシステム、クラウドストレージなど) に移動させることが非常に重要です。そうしないと、リクエストが終了したときに、ファイルにアクセスできなくなります。さらに、 `quarkus.http.body.delete-uploaded-files-on-end` を true に設定すると、HTTP レスポンスの送信時に、アップロードされたファイルが削除されます。この設定を無効にすると、ファイルはサーバーのファイルシステム上 (`quarkus.http.body.uploads-directory` 設定オプションで定義したディレクトリー) に存在しますが、アップロードされたファイルは UUID ファイル名で保存されて追加のメタデータが保存されないため、これらのファイルは本質的にファイルのランダムダンプとなります。"

#: _versions/main/guides/rest.adoc
msgid "When a Resource method needs to handle various types of multipart requests, then the `org.jboss.resteasy.reactive.server.multipart.MultipartFormDataInput` method type can be used as provides access to all the parts of the request."
msgstr "Resourceメソッドが様々なタイプのマルチパートリクエストを処理する必要がある場合、リクエストのすべてのパートにアクセスできるように、 `org.jboss.resteasy.reactive.server.multipart.MultipartFormDataInput` メソッドタイプを使用することができます。"

#: _versions/main/guides/rest.adoc
msgid "The following code shows a simple example where we iterate over the parts and return a list of aggregated data:"
msgstr "次のコードは、パートに対して反復処理を行い、集約されたデータのリストを返すという簡単な例です:"

#: _versions/main/guides/rest.adoc
msgid "Handling malformed input"
msgstr "不正な入力の処理"

#: _versions/main/guides/rest.adoc
msgid ""
"As part of reading the multipart body, Quarkus REST invokes the proper MessageBodyReaderlink:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`] for each part of the request.\n"
"If an `IOException` occurs for one of these parts (for example if Jackson was unable to deserialize a JSON part), then a `org.jboss.resteasy.reactive.server.multipart.MultipartPartReadingException` is thrown.\n"
"If this exception is not handled by the application as mentioned in <<exception-mapping>>, an HTTP 400 response is returned by default."
msgstr ""
"マルチパートボディの読み取りの一環として、Quarkus REST はリクエストの各部分に対して適切な MessageBodyReaderlink:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`] を呼び出します。\n"
"これらのパーツのいずれかで `IOException` が発生した場合 (たとえば、Jackson が JSON パーツをデシリアライズできなかった場合)、 `org.jboss.resteasy.reactive.server.multipart.MultipartPartReadingException` が出力されます。\n"
"<<exception-mapping>> に記載されているように、この例外がアプリケーションによって処理されない場合、デフォルトで HTTP 400 応答が返されます。"

#: _versions/main/guides/rest.adoc
msgid "Multipart output"
msgstr "マルチパート出力"

#: _versions/main/guides/rest.adoc
msgid ""
"Similarly, Quarkus REST can produce Multipart Form data to allow users download files from the server. For example, we could write a POJO\n"
"that will hold the information we want to expose as:"
msgstr "同様に、Quarkus REST は、ユーザーがサーバーからファイルをダウンロードできるようにするための Multipart Form データを生成できます。たとえば、公開する情報を保持する POJO を、次のように記述できます。"

#: _versions/main/guides/rest.adoc
msgid "And then expose this POJO via a Resource like so:"
msgstr "そして、次のようなリソースを介してこの POJO を公開します。"

#: _versions/main/guides/rest.adoc
msgid "Additionally, you can also manually append the parts of the form using the class `MultipartFormDataOutput` as:"
msgstr "さらに、クラス `MultipartFormDataOutput` を使用して、フォームのパーツを手動で追加することも可能です:"

#: _versions/main/guides/rest.adoc
msgid "This last approach allows you adding extra headers to the output part."
msgstr "この最後の方法は、出力のパーツに追加のヘッダーを追加することができます。"

#: _versions/main/guides/rest.adoc
msgid "For the time being, returning Multipart data is limited to be blocking endpoints."
msgstr "当面、マルチパートデータを返すことはエンドポイントをブロックすることに限定されます。"

#: _versions/main/guides/rest.adoc
msgid "Returning a response body"
msgstr "レスポンスボディを返す"

#: _versions/main/guides/rest.adoc
msgid ""
"In order to return an HTTP response, simply return the resource you want from your method. The method\n"
"return type and its optional content type will be used to decide how to serialise it to the HTTP\n"
"response (see the <<negotiation>> section for more advanced information)."
msgstr "HTTP レスポンスを返すには、単にメソッドから必要なリソースを返します。メソッドの戻り値の型とオプションのコンテントタイプをもとに、HTTP レスポンスへのシリアライズ方法を決定します (より詳細な情報については <<negotiation>> を参照ください)。"

#: _versions/main/guides/rest.adoc
msgid ""
"You can return any of the pre-defined types that you can read from the <<resource-types,HTTP response>>,\n"
"and any other type will be mapped <<json,from that type to JSON>>."
msgstr "<<resource-types,HTTP レスポンス>> から読み取れる、あらかじめ定義された任意の型を返すことができ、それ以外の型は<<json,型からJSON>> にマッピングされます。"

#: _versions/main/guides/rest.adoc
msgid "In addition, the following return types are also supported:"
msgstr "さらに、次の戻り値の型もサポートされています。"

#: _versions/main/guides/rest.adoc
msgid "Additional response body parameter types"
msgstr "追加のレスポンス本文パラメータータイプ"

#: _versions/main/guides/rest.adoc
msgid "link:{jdkapi}/java/nio/file/Path.html[`Path`]"
msgstr "link:{jdkapi}/java/nio/file/Path.html[`Path`]"

#: _versions/main/guides/rest.adoc
msgid "The contents of the file specified by the given path"
msgstr "指定されたパスで指定されたファイルの内容"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PathPart.html[`PathPart`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PathPart.html[`PathPart`]"

#: _versions/main/guides/rest.adoc
msgid "The partial contents of the file specified by the given path"
msgstr "指定されたパスで指定されたファイルの部分的な内容"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/FilePart.html[`FilePart`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/FilePart.html[`FilePart`]"

#: _versions/main/guides/rest.adoc
msgid "The partial contents of a file"
msgstr "ファイルの部分的な内容"

#: _versions/main/guides/rest.adoc
msgid "link:{vertxapi}/io/vertx/core/file/AsyncFile.html[`AsyncFile`]"
msgstr "link:{vertxapi}/io/vertx/core/file/AsyncFile.html[`AsyncFile`]"

#: _versions/main/guides/rest.adoc
msgid "Vert.x AsyncFile, which can be in full, or partial"
msgstr "Vert.x AsyncFile (完全または部分的)"

#: _versions/main/guides/rest.adoc
msgid ""
"Alternately, you can also return a <<reactive,reactive type>> such as link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`],\n"
"link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] or\n"
"link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`]\n"
"that resolve to one of the mentioned return types."
msgstr "あるいは、 link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] 、link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] または link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`] など、前述の戻り値の型に解決して、<<reactive,リアクティブ型>> を返すことも可能です。"

#: _versions/main/guides/rest.adoc
msgid "Setting other response properties"
msgstr "他のレスポンスプロパティーの設定"

#: _versions/main/guides/rest.adoc
msgid "Manually setting the response"
msgstr "手動でレスポンスを設定する"

#: _versions/main/guides/rest.adoc
msgid ""
"If you need to set more properties on the HTTP response than just the body, such as the status code\n"
"or headers, you can make your method return `org.jboss.resteasy.reactive.RestResponse` from a resource method.\n"
"An example of this could look like:"
msgstr "ステータスコードやヘッダーなど、本文だけでなく HTTP レスポンスに多くのプロパティーを設定する必要がある場合は、リソースメソッドからメソッドに `org.jboss.resteasy.reactive.RestResponse` を返すようにすることができます。この例は次のようになります。"

#: _versions/main/guides/rest.adoc
msgid ""
"You can also use the Jakarta REST type link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`] but it is\n"
"not strongly typed to your entity."
msgstr "また、Jakarta REST型 link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[Response] を使用することが出来ますが、それはあなたのエンティティに強く型付けされていません。"

#: _versions/main/guides/rest.adoc
msgid "Responding with files"
msgstr ""

#: _versions/main/guides/rest.adoc
msgid "When a file needs to be returned, the following code ensures that Quarkus properly streams the file contents to the client."
msgstr ""

#: _versions/main/guides/rest.adoc
msgid "Using annotations"
msgstr "アノテーションの使用"

#: _versions/main/guides/rest.adoc
msgid ""
"Alternatively, if you only need to set the status code and / or HTTP headers with static values, you can use `@org.jboss.resteasy.reactive.ResponseStatus` and /or `ResponseHeader` respectively.\n"
"An example of this could look like:"
msgstr "または、静的な値でステータスコードや HTTP ヘッダーのみを設定する必要がある場合は、それぞれ `@org.jboss.resteasy.reactive.ResponseStatus` および/または  `ResponseHeader` を使用できます。この例は次のようになります。"

#: _versions/main/guides/rest.adoc
msgid "Redirect support"
msgstr "リダイレクトサポート"

#: _versions/main/guides/rest.adoc
msgid ""
"When handling a `@POST`, `@PUT` or `@DELETE` endpoint, it is common practice to redirect to a `@GET` endpoint after the action has been performed to allow the user to reload the page without triggering the action a second time.\n"
"There are multiple ways to achieve this."
msgstr "`@POST` 、 `@PUT` 、 `@DELETE` のエンドポイントを処理する場合、アクションの実行後に `@GET` のエンドポイントにリダイレクトするのが一般的で、ユーザーが2回目のアクションをトリガーせずにページを再読み込みできるようにします。これを実現するには、複数の方法があります。"

#: _versions/main/guides/rest.adoc
msgid "Using RestResponse"
msgstr "RestResponseの使用"

#: _versions/main/guides/rest.adoc
msgid "Using `RestResponse` as the return type while making sure the proper redirection URI is created can be done as in the following example:"
msgstr "`RestResponse` を戻り値の型として使用し、適切なリダイレクトURIを作成することは、以下の例のように可能です:"

#: _versions/main/guides/rest.adoc
msgid "Using RedirectException"
msgstr "RedirectExceptionの使用"

#: _versions/main/guides/rest.adoc
msgid "Users can also throw `jakarta.ws.rs.RedirectionException` from a method body to get Quarkus REST to perform the desired redirect."
msgstr "ユーザーは、メソッド本体から `jakarta.ws.rs.RedirectionException` を出力して、Quarkus REST に目的のリダイレクトを実行させることもできます。"

#: _versions/main/guides/rest.adoc
msgid "Async/reactive support"
msgstr "非同期/リアクティブサポート"

#: _versions/main/guides/rest.adoc
msgid ""
"If your endpoint method needs to accomplish an asynchronous or reactive task before\n"
"being able to answer, you can declare your method to return the\n"
"link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] type (from https://smallrye.io/smallrye-mutiny/[Mutiny]), in which\n"
"case the current HTTP request will be automatically suspended after your method, until\n"
"the returned link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] instance resolves to a value,\n"
"which will be mapped to a response exactly according to the previously described rules:"
msgstr "エンドポイントメソッドがレスポンスする前に非同期またはリアクティブタスクを実行する必要がある場合は、メソッドを宣言して( https://smallrye.io/smallrye-mutiny/[Mutiny] の) link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] 型を返すことができます 。この場合、現在の HTTP リクエストはメソッドの後で、返されたlink:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] インスタンスが値に解決され、前述のルールに従って正確にレスポンスにマッピングされるまで自動的に一時停止されます。"

#: _versions/main/guides/rest.adoc
msgid ""
"This allows you to not block the event-loop thread while the book is being fetched from the\n"
"database, and allows Quarkus to serve more requests until your book is ready to\n"
"be sent to the client and terminate this request.\n"
"See <<execution-model,Execution Model documentation>> for more information."
msgstr "これにより、書籍がデータベースから取得されている間はイベントループスレッドをブロックせず、書籍がクライアントに送信される準備が整うまでQuarkusがより多くのリクエストに対応し、このリクエストを終了させることができるようになります。詳細は、<<execution-model,Execution Model documentation>> を参照してください。"

#: _versions/main/guides/rest.adoc
msgid ""
"The link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`] return\n"
"type is also supported."
msgstr "link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`] 戻り値の型もサポートされています。"

#: _versions/main/guides/rest.adoc
#, fuzzy
msgid "Request cancellation"
msgstr "キャンセルのお願い"

#: _versions/main/guides/rest.adoc
#, fuzzy
msgid ""
"Async endpoints that return `Uni` support request cancellation, which means that if the underlying HTTP connection is closed for whatever reason,\n"
"the request pipeline defined by the returned `Uni` is also cancelled. This can be very useful in avoiding unnecessary work on the server\n"
"when the client isn't going to use the response anyway."
msgstr "`Uni` を返す非同期エンドポイントはリクエストキャンセルをサポートしており、何らかの理由で HTTP 接続が切断されると、返された `Uni` で定義されたリクエストパイプラインもキャンセルされます。これは、クライアントがレスポンスを使用しない場合に、サーバーでの不要な作業を避けるために非常に便利です。"

#: _versions/main/guides/rest.adoc
#, fuzzy
msgid ""
"If instead of cancelling the pipeline, it should be completed regardless of the state of the HTTP connection, Quarkus REST provides the `org.jboss.resteasy.reactive.server.Cancellable` annotation\n"
"which can be applied to REST classes or methods to control the cancellation behavior."
msgstr "パイプラインをキャンセルする代わりに、HTTP接続の状態に関係なくパイプラインを完了する必要がある場合、Quarkus RESTには `org.jboss.resteasy.reactive.server.Cancellable` アノテーションが用意されています。このアノテーションをRESTクラスまたはメソッドに適用して、キャンセル動作を制御できます。"

#: _versions/main/guides/rest.adoc
msgid "Streaming support"
msgstr "ストリーミングサポート"

#: _versions/main/guides/rest.adoc
msgid ""
"If you want to stream your response element by element, you can make your endpoint method return a\n"
"link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] type (from https://smallrye.io/smallrye-mutiny/[Mutiny]).\n"
"This is especially useful for streaming text or binary data."
msgstr "レスポンスを要素ごとにストリーミングする場合は、エンドポイントメソッドに( https://smallrye.io/smallrye-mutiny/[Mutiny] の) link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] 型を返すようにすることができます。これは、テキストまたはバイナリーデータのストリーミングに特に役立ちます。"

#: _versions/main/guides/rest.adoc
msgid ""
"This example, using https://github.com/quarkiverse/quarkus-reactive-messaging-http[Reactive Messaging HTTP] shows how to stream\n"
"text data:"
msgstr "この例では、 https://github.com/quarkiverse/quarkus-reactive-messaging-http[Reactive Messaging HTTP] を使用して、テキストデータをストリーミングする方法を示しています。"

#: _versions/main/guides/rest.adoc
msgid ""
"Response filters are **not** invoked on streamed responses, because they would give a false\n"
"impression that you can set headers or HTTP status codes, which is not true after the initial\n"
"response.\n"
"Exception mappers are also not invoked because part of the response may already have been written."
msgstr "レスポンスフィルターは、ストリーミングされたレスポンスでは呼び出されません。これは、ヘッダーまたは HTTP ステータスコードを設定できるという誤った印象を与えるためです。これは、最初のレスポンスの後では当てはまりません。レスポンスの一部がすでに書き込まれている可能性があるため、例外マッパーも呼び出されません。"

#: _versions/main/guides/rest.adoc
msgid "Customizing headers and status"
msgstr "ヘッダーとステータスのカスタマイズ"

#: _versions/main/guides/rest.adoc
msgid "If you need to set custom HTTP headers and / or the HTTP response, then you can return `org.jboss.resteasy.reactive.RestMulti` instead, like this:"
msgstr "カスタムHTTPヘッダーやHTTPレスポンスを設定する必要がある場合は、代わりに次のように `org.jboss.resteasy.reactive.RestMulti` を返却します ："

#: _versions/main/guides/rest.adoc
msgid ""
"In more advanced cases where the headers and / or status can only be obtained from the results of an async call, the `RestMulti.fromUniResponse` needs to be used.\n"
"Here is an example of such a use case:"
msgstr ""
"ヘッダーやステータスを非同期呼び出しの結果からのみ取得できるようなより高度なケースでは、 `RestMulti.fromUniResponse` を使用する必要があります。\n"
"このような使用例を次に示します。"

#: _versions/main/guides/rest.adoc
msgid "Concurrent stream element processing"
msgstr "同時ストリーム要素処理"

#: _versions/main/guides/rest.adoc
msgid ""
"By default, `RestMulti` ensures serial/sequential order of the items/elements produced by the wrapped\n"
"`Multi` by using a value of 1 for the demand signaled to the publishers. To enable concurrent\n"
"processing/generation of multiple items, use `withDemand(long demand)`."
msgstr ""
"デフォルトでは、パブリッシャーに通知される需要に 1 の値を使用して、 `RestMulti`はラップされた `Multi` 要素によって生成されたアイテム/要素のシリアル/連続順序を確保します。\n"
"複数のアイテムを同時処理/生成できるようにするには、 `withDemand (long demand)` を使用します。"

#: _versions/main/guides/rest.adoc
msgid ""
"Using a demand higher than 1 is useful when multiple items shall be returned and the production of each\n"
"item takes some time, i.e. when parallel/concurrent production improves the service response time. Be\n"
"aware the concurrent processing also requires more resources and puts a higher load on services or\n"
"resources that are needed to produce the items. Also consider using `Multi.capDemandsTo(long)` and\n"
"`Multi.capDemandsUsing(LongFunction)`."
msgstr "1 より大きい demand を使用すると、複数のアイテムを返す必要があり、各アイテムの生成に時間がかかる場合に有用です。つまり、並列/並行処理によってサービスの応答時間が向上する場合に役立ちます。ただし、並行処理はより多くのリソースを必要とし、アイテムの生成に必要なサービスやリソースに対する負荷が上昇することに注意してください。また、 `Multi.capDemandsTo(long)` および `Multi.capDemandsUsing(LongFunction)` の使用も検討してください。"

#: _versions/main/guides/rest.adoc
msgid ""
"The example below produces 5 (JSON) strings, but the _order_ of the strings in the returned JSON array\n"
"is not guaranteed. The below example also works for JSON objects and not just simple types."
msgstr ""
"以下の例では 5 つの (JSON) 文字列が生成されますが、返される JSON 配列内の文字列の _順序_ は\n"
"確保されません。以下の例は、単純な型だけでなく、JSON オブジェクトでも機能します。"

#: _versions/main/guides/rest.adoc
msgid "Example response, the order is non-deterministic."
msgstr "応答例、順序は非決定的です。"

#: _versions/main/guides/rest.adoc
msgid "Returning multiple JSON objects"
msgstr "複数のJSONオブジェクトの返却"

#: _versions/main/guides/rest.adoc
msgid ""
"By default, `RestMulti` returns items/elements produced by the wrapped `Multi` as a JSON array, if the\n"
"media-type is `application/json`. To return separate JSON objects that are not wrapped in a JSON array,\n"
"use `encodeAsArray(false)` (`encodeAsArray(true)` is the default). Note that streaming multiple\n"
"objects this way requires a slightly different parsing on the client side, but objects can be parsed and\n"
"consumed as they appear without having to deserialize a possibly huge result at once."
msgstr "デフォルトでは、 `RestMulti` は、メディアタイプが `application/json` の場合、ラップされた`Multi` によって生成されたアイテム/要素を JSON 配列として返します。JSON 配列にラップされていない個別の JSON オブジェクトを返すには、 `encodeAsArray(false)` を使用してください（デフォルトは `encodeAsArray(true` です）。この方法で複数のオブジェクトをストリーミングするには、クライアント側で若干異なるパース処理が必要になりますが、オブジェクトは順次パースおよび消費できるため、巨大な結果を一括でデシリアライズする必要はありません。"

#: _versions/main/guides/rest.adoc
msgid "The example below produces 5 (JSON) strings, that are not wrapped in an array, like this:"
msgstr "以下の例では、このように配列にラップされていない5つの（JSON）文字列を生成します："

#: _versions/main/guides/rest.adoc
msgid "Server-Sent Event (SSE) support"
msgstr "サーバー送信イベント (SSE) のサポート"

#: _versions/main/guides/rest.adoc
msgid ""
"If you want to stream JSON objects in your response, you can use\n"
"https://html.spec.whatwg.org/multipage/server-sent-events.html[Server-Sent Events]\n"
"by just annotating your endpoint method with\n"
"link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`@Produces(MediaType.SERVER_SENT_EVENTS)`]\n"
"and specifying that each element should be <<json,serialised to JSON>> with\n"
"`@RestStreamElementType(MediaType.APPLICATION_JSON)`."
msgstr "レスポンスにJSONオブジェクトをストリーミングしたい場合は、エンドポイントメソッドに link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`@Produces(MediaType.SERVER_SENT_EVENTS)`] アノテーションを付けるだけで、link:https://html.spec.whatwg.org/multipage/server-sent-events.html[Server-Sent Events] を使用することができます。 そして各要素に `@RestStreamElementType(MediaType.APPLICATION_JSON)` を指定することで、<<json,serialised to JSON>> されます。"

#: _versions/main/guides/rest.adoc
msgid ""
"Sometimes it's useful to create a customized SSE message, for example if you need to specify the `event` field of a SSE message to distinguish various event types.\n"
"A resource method may return `Multi<jakarta.ws.rs.sse.OutboundSseEvent>` and an injected `jakarta.ws.rs.sse.Sse` can be used to create `OutboundSseEvent` instances."
msgstr ""
"さまざまなイベントタイプを区別するために SSE メッセージの `event` フィールドを指定する必要がある場合など、カスタマイズされた SSE メッセージを作成すると便利な場合があります。\n"
"リソースメソッドは `Multi<jakarta.ws.rs.sse.OutboundSseEvent>` を返します。また、挿入された `jakarta.ws.rs.sse.Sse` を使用して `OutboundSseEvent` インスタンスを作成できます。"

#: _versions/main/guides/rest.adoc
msgid "Inject the server-side entry point for creating ``OutboundSseEvent``s."
msgstr "``OutboundSseEvent`` を作成するためのサーバー側エントリーポイントを挿入します。"

#: _versions/main/guides/rest.adoc
msgid "Create a new outbound event builder."
msgstr "新しい送信イベントビルダーを作成します。"

#: _versions/main/guides/rest.adoc
msgid "Set the event name, i.e. the value of the `event` field of a SSE message."
msgstr "イベント名、つまり SSE メッセージの `event` フィールドの値を設定します。"

#: _versions/main/guides/rest.adoc
msgid "Set the data, i.e. the value of the `data` field of a SSE message."
msgstr "データ、つまり SSE メッセージの `data` フィールドの値を設定します。"

#: _versions/main/guides/rest.adoc
msgid "Manipulation of the returned HTTP headers and status code is not possible via `RestMulti.fromUniResponse` because when returning SSE responses the headers and status code cannot be delayed until the response becomes available."
msgstr "SSE 応答を返す場合、応答が利用可能になるまでヘッダーとステータスコードを遅延させることはできないため、返された HTTP ヘッダーとステータスコードを `RestMulti.fromUniResponse` 経由で操作できません。"

#: _versions/main/guides/rest.adoc
msgid "Controlling HTTP Caching features"
msgstr "HTTP キャッシング機能の制御"

#: _versions/main/guides/rest.adoc
msgid ""
"Quarkus REST provides the link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`]\n"
"and link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`] annotations to facilitate\n"
"handling HTTP caching semantics, i.e. setting the 'Cache-Control' HTTP header."
msgstr ""
"Quarkus REST は link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`]\n"
"および link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`] アノテーションを提供し、\n"
"HTTP キャッシュセマンティクス ('Cache-Control' HTTP ヘッダーの設定) を容易にします。"

#: _versions/main/guides/rest.adoc
msgid ""
"These annotations can be placed either on a Resource Method or a Resource Class (in which case it applies to all Resource Methods of the class that do *not* contain the same annotation) and allow users\n"
"to return domain objects and not have to deal with building up the `Cache-Control` HTTP header explicitly."
msgstr "これらのアノテーションはリソースメソッドまたはリソースクラス (この場合、同じアノテーションを *含まない* クラスのすべてのリソースメソッドに適用されます) に配置することができ、ユーザーがドメインオブジェクトを返すことができ、明示的に `Cache-Control` HTTP ヘッダーを構築することに対処する必要はありません。"

#: _versions/main/guides/rest.adoc
msgid ""
"While link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`]\n"
"builds a complex `Cache-Control` header, link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`]\n"
"is a simplified notation to say that you don't want anything cached; i.e. `Cache-Control: nocache`."
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`] が複雑な `Cache-Control` ヘッダーを構築するのに対し、link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`] は何もキャッシュさせたくない、つまり `Cache-Control: nocache` というシンプルな表記法になっています。"

#: _versions/main/guides/rest.adoc
msgid "More information on the `Cache-Control` header and be found in link:https://datatracker.ietf.org/doc/html/rfc7234[RFC 7234]"
msgstr "`Cache-Control` ヘッダーの詳細は、 link:https://datatracker.ietf.org/doc/html/rfc7234[RFC 7234] を参照してください"

#: _versions/main/guides/rest.adoc
msgid "Accessing context objects"
msgstr "コンテキストオブジェクトへのアクセス"

#: _versions/main/guides/rest.adoc
msgid ""
"There are a number of contextual objects that the framework will give you, if your endpoint\n"
"method takes parameters of the following type:"
msgstr "エンドポイントメソッドが次のタイプのパラメーターを受け取る場合、フレームワークが提供するコンテキストオブジェクトは多数あります。"

#: _versions/main/guides/rest.adoc
msgid "Contextual objects"
msgstr "コンテキスト・オブジェクト"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/HttpHeaders.html[`HttpHeaders`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/core/HttpHeaders.html[`HttpHeaders`]"

#: _versions/main/guides/rest.adoc
msgid "All the request headers"
msgstr "すべてのリクエストヘッダー"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/container/ResourceInfo.html[`ResourceInfo`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/container/ResourceInfo.html[`ResourceInfo`]"

#: _versions/main/guides/rest.adoc
msgid "Information about the current endpoint method and class (requires reflection)"
msgstr "現在のエンドポイントメソッドとクラスに関する情報 (リフレクションが必要)"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/SecurityContext.html[`SecurityContext`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/core/SecurityContext.html[`SecurityContext`]"

#: _versions/main/guides/rest.adoc
msgid "Access to the current user and roles"
msgstr "現在のユーザーとロールへのアクセス"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/SimpleResourceInfo.html[`SimpleResourceInfo`]"
msgstr "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/SimpleResourceInfo.html[`SimpleResourceInfo`]"

#: _versions/main/guides/rest.adoc
msgid "Information about the current endpoint method and class (no reflection required)"
msgstr "現在のエンドポイントメソッドとクラスに関する情報 (反映は不要)"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/UriInfo.html[`UriInfo`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/core/UriInfo.html[`UriInfo`]"

#: _versions/main/guides/rest.adoc
msgid "Provides information about the current endpoint and application URI"
msgstr "現在のエンドポイントとアプリケーション URI に関する情報を提供します"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/Application.html[`Application`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/core/Application.html[`Application`]"

#: _versions/main/guides/rest.adoc
msgid "Advanced: Current Jakarta REST application class"
msgstr "高度: 現在のJakarta RESTのアプリケーションクラス"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/Configuration.html[`Configuration`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/core/Configuration.html[`Configuration`]"

#: _versions/main/guides/rest.adoc
msgid "Advanced: Configuration about the deployed Jakarta REST application"
msgstr "高度: デプロイされたJakarta RESTアプリケーションに関する設定"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/ext/Providers.html[`Providers`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/ext/Providers.html[`Providers`]"

#: _versions/main/guides/rest.adoc
msgid "Advanced: Runtime access to Jakarta REST providers"
msgstr "高度: Jakarta RESTプロバイダへの実行時アクセス"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/Request.html[`Request`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/core/Request.html[`Request`]"

#: _versions/main/guides/rest.adoc
msgid "Advanced: Access to the current HTTP method and <<preconditions>>"
msgstr "詳細: 現在の HTTP メソッドへのアクセスと <<preconditions,条件>>"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/ResourceContext.html[`ResourceContext`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/core/ResourceContext.html[`ResourceContext`]"

#: _versions/main/guides/rest.adoc
msgid "Advanced: access to instances of endpoints"
msgstr "詳細: エンドポイントのインスタンスへのアクセス"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerRequestContext.html[`ServerRequestContext`]"
msgstr "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerRequestContext.html[`ServerRequestContext`]"

#: _versions/main/guides/rest.adoc
msgid "Advanced: Quarkus REST access to the current request/response"
msgstr "上級: 現在のリクエスト/レスポンスへの Quarkus REST アクセス"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/sse/Sse.html[`Sse`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/sse/Sse.html[`Sse`]"

#: _versions/main/guides/rest.adoc
msgid "Advanced: Complex SSE use-cases"
msgstr "詳細: 複雑な SSE のユースケース"

#: _versions/main/guides/rest.adoc
msgid "link:{vertxapi}/io/vertx/core/http/HttpServerRequest.html[`HttpServerRequest`]"
msgstr "link:{vertxapi}/io/vertx/core/http/HttpServerRequest.html[`HttpServerRequest`]"

#: _versions/main/guides/rest.adoc
msgid "Advanced: Vert.x HTTP Request"
msgstr "詳細: Vert.xHTTP リクエスト"

#: _versions/main/guides/rest.adoc
msgid "link:{vertxapi}/io/vertx/core/http/HttpServerResponse.html[`HttpServerResponse`]"
msgstr "link:{vertxapi}/io/vertx/core/http/HttpServerResponse.html[`HttpServerResponse`]"

#: _versions/main/guides/rest.adoc
msgid "Advanced: Vert.x HTTP Response"
msgstr "詳細: Vert..x HTTP レスポンス"

#: _versions/main/guides/rest.adoc
msgid "For example, here is how you can return the name of the currently logged-in user:"
msgstr "たとえば、現在ログインしているユーザーの名前を返す方法は次のとおりです。"

#: _versions/main/guides/rest.adoc
msgid ""
"You can also inject those context objects using\n"
"{injectapi}/jakarta/inject/Inject.html[`@Inject`] on fields of the same\n"
"type:"
msgstr "これらのコンテキスト・オブジェクトは、{injectapi}/jakarta/inject/Inject.html[ `@Inject` ] を使って、同じ型のフィールドに注入することもできます："

#: _versions/main/guides/rest.adoc
msgid "Or even on your endpoint constructor:"
msgstr "または、エンドポイントコンストラクターでも:"

#: _versions/main/guides/rest.adoc
msgid "JSON serialisation"
msgstr "JSON シリアライゼーション"

#: _versions/main/guides/rest.adoc
msgid "Instead of importing `io.quarkus:quarkus-rest`, you can import either of the following modules to get support for JSON:"
msgstr "`io.quarkus:quarkus-rest` をインポートする代わりに、以下のモジュールのいずれかをインポートして、JSON のサポートを受けることができます。"

#: _versions/main/guides/rest.adoc
msgid "GAV"
msgstr "GAV"

#: _versions/main/guides/rest.adoc
msgid "`io.quarkus:quarkus-rest-jackson`"
msgstr "`io.quarkus:quarkus-rest-jackson`"

#: _versions/main/guides/rest.adoc
msgid "https://github.com/FasterXML/jackson[Jackson support]"
msgstr "https://github.com/FasterXML/jackson[Jackson サポート]"

#: _versions/main/guides/rest.adoc
msgid "`io.quarkus:quarkus-rest-jsonb`"
msgstr "`io.quarkus:quarkus-rest-jsonb`"

#: _versions/main/guides/rest.adoc
msgid "https://github.com/jakartaee/jsonb-api/[JSON-B support]"
msgstr "link:https://github.com/jakartaee/jsonb-api/[JSON-B サポート]"

#: _versions/main/guides/rest.adoc
msgid ""
"In both cases, importing those modules will allow HTTP message bodies to be read from JSON\n"
"and serialised to JSON, for <<resource-types,all the types not already registered with a more specific\n"
"serialisation>>."
msgstr "いずれの場合も、これらのモジュールをインポートすることで、HTTPメッセージボディをJSONから読み取ったり、<<resource-types,より具体的なシリアライズ方法が登録されていない型>> に JSONをシリアライズできるようになります。"

#: _versions/main/guides/rest.adoc
msgid "Jackson-specific features"
msgstr "Jackson 固有の機能"

#: _versions/main/guides/rest.adoc
msgid "Exception handling"
msgstr "例外処理"

#: _versions/main/guides/rest.adoc
msgid ""
"By default, Quarkus provides a built-in `ExceptionMapper` for `MismatchedInputException` which returns an HTTP 400 status code\n"
"along with a good error message in Dev and Test modes, about what went wrong during serialization of an entity."
msgstr ""
"デフォルトでは、Quarkus は `MismatchedInputException` には、組み込みの `ExceptionMapper` を提供し、HTTP 400 ステータスコードを返します。\n"
"エンティティーのシリアル化中の問題について、開発モードとテストモードで適切なエラーメッセージが表示されます。"

#: _versions/main/guides/rest.adoc
msgid ""
"There are situations where various Jackson related exceptions need to handled in a uniform way.For example, the application may need to handle all `JsonMappingException` the same way.\n"
"This becomes a problem when taking JAX-RS / Jakarta REST rules into account, because the exception mapper `ExceptionMapper` for `MismatchedInputException` would be used instead of the user provide\n"
"`ExceptionMapper` for `JsonMappingException` (as `MismatchedInputException` is a subtype of `JsonMappingException`)."
msgstr ""
"Jackson に関連するさまざまな例外を一律に処理する必要がある状況があります。たとえば、アプリケーションがすべての `JsonMappingException` を同じ方法で処理する必要がある場合です。\n"
"しかし、JAX-RS / Jakarta REST のルールを考慮すると、この処理が問題になります。これは、 `MismatchedInputException` は `JsonMappingException` のサブタイプであるため、ユーザーが提供した `JsonMappingException` 用の `ExceptionMapper` ではなく、 `MismatchedInputException` 用の `ExceptionMapper` が使用されてしまうからです。"

#: _versions/main/guides/rest.adoc
msgid "One solution for this case is to configure the following:"
msgstr "この場合の解決策の 1 つとして、次のように設定してください。"

#: _versions/main/guides/rest.adoc
msgid "which essentially makes Quarkus ignore the `ExceptionMapper` for `MismatchedInputException` completely."
msgstr "これにより、Quarkus は基本的に `MismatchedInputException` の `ExceptionMapper` を完全に無視するようになります。"

#: _versions/main/guides/rest.adoc
msgid "Secure serialization"
msgstr "セキュア・シリアライゼーション"

#: _versions/main/guides/rest.adoc
msgid ""
"When used with Jackson to perform JSON serialization, Quarkus REST provides the ability to limit the set of fields that are serialized based on the roles of the current user.\n"
"This is achieved by simply annotating the fields (or getters) of the POJO being returned with `@io.quarkus.resteasy.reactive.jackson.SecureField`."
msgstr "JSON をシリアライズするために Jackson を使用する場合、Quarkus REST は、現在のユーザのroleに基づいてシリアライズされるフィールドのセットを制限する機能を提供します。これは、返されるPOJOのフィールド（またはゲッター）を `@io.quarkus.resteasy.reactive.jackson.SecureField` でアノテーションするだけで実現できます。"

#: _versions/main/guides/rest.adoc
msgid "A simple example could be the following:"
msgstr "簡単な例を挙げると、次のようになります:"

#: _versions/main/guides/rest.adoc
msgid "Assume we have a POJO named `Person` which looks like so:"
msgstr "`Person` という名前のPOJOがあり、以下のようになっているとします:"

#: _versions/main/guides/rest.adoc
msgid ""
"The `io.quarkus.resteasy.reactive.jackson.SecureField.rolesAllowed` property supports xref:config-reference.adoc#property-expressions[property expressions]\n"
"exactly in the same fashion the `jakarta.annotation.security.RolesAllowed` annotation does. For more information, please\n"
"refer to the xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[Standard security annotations]\n"
"section of the Authorization of web endpoints guide."
msgstr ""
"`io.quarkus.resteasy.reactive.jackson.SecureField.rolesAllowed` プロパティは、 `jakarta.annotation.security.RolesAllowed` アノテーションと同じ方法で、xref:config-reference.adoc#property-expressions[プロパティ式] をサポートします。\n"
"詳細は、xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[Web エンドポイントの認可ガイド] の「標準セキュリティアノテーション」セクションを参照してください。"

#: _versions/main/guides/rest.adoc
msgid "A very simple Jakarta REST Resource that uses `Person` could be:"
msgstr "`Person` を使用する非常にシンプルな Jakarta REST Resource は次のようになります:"

#: _versions/main/guides/rest.adoc
msgid "The `@SecureField` annotation is only effective when Quarkus recognizes that produced content type is the 'application/json' type."
msgstr "`@SecureField` アノテーションは、生成されたコンテンツタイプが 'application/json' タイプであることを Quarkus が認識した場合にのみ有効です。"

#: _versions/main/guides/rest.adoc
msgid "Currently you cannot use the `@SecureField` annotation to secure your data returned from resource methods returning the `io.smallrye.mutiny.Multi` reactive type."
msgstr "現在、 `io.smallrye.mutiny.Multi` リアクティブ型を返すリソースメソッドから返されるデータを保護するために `@SecureField` アノテーションを使用できません。"

#: _versions/main/guides/rest.adoc
msgid ""
"All resource methods returning data secured with the `@SecureField` annotation should be tested.\n"
"Please make sure data are secured as you intended.\n"
"Quarkus always attempts to detect fields annotated with the `@SecureField` annotation,\n"
"however it may fail to infer returned type and miss the `@SecureField` annotation instance.\n"
"If that happens, please explicitly enable secure serialization on the resource endpoint with the `@EnableSecureSerialization` annotation."
msgstr ""
"`@SecureField` アノテーションで保護されたデータを返すすべてのリソースメソッドはテストする必要があります。\n"
"意図したとおりにデータが保護されていることを確認してください。\n"
"\n"
"Quarkus は常に `@SecureField` アノテーションが付与されたフィールドを検出しようとしますが、返される型を推論できず、 `@SecureField` アノテーションのインスタンスを見落とす可能性があります。\n"
"その場合は、 `@EnableSecureSerialization` アノテーションをリソースエンドポイントに明示的に適用し、セキュアなシリアライズを有効にしてください。"

#: _versions/main/guides/rest.adoc
msgid ""
"Assuming security has been set up for the application (see our xref:security-overview.adoc[guide] for more details), when a user with the `admin` role\n"
"performs an HTTP GET on `/person/1` they will receive:"
msgstr "アプリケーションのセキュリティーが設定されていると仮定すると (詳細は xref:security-overview.adoc[ガイド] を参照)、 `admin` ロールを持つユーザーが `/person/1` に対して HTTP GET を実行すると、次のようなメッセージが表示されます。"

#: _versions/main/guides/rest.adoc
msgid "as the response."
msgstr "レスポンスを閉じます。"

#: _versions/main/guides/rest.adoc
msgid "Any user however that does not have the `admin` role will receive:"
msgstr "ただし、 `admin` ロールを持たないユーザーは次のものを受け取ります。"

#: _versions/main/guides/rest.adoc
msgid ""
"No additional configuration needs to be applied for this secure serialization to take place. However, users can use the `@io.quarkus.resteasy.reactive.jackson.EnableSecureSerialization` and `@io.quarkus.resteasy.reactive.jackson.DisableSecureSerialization`\n"
"annotation to opt in or out for specific Jakarta REST Resource classes or methods."
msgstr "この安全なシリアライズを行うために、追加の設定を適用する必要はありません。ただし、ユーザーは `@io.quarkus.resteasy.reactive.jackson.EnableSecureSerialization` および `@io.quarkus.resteasy.reactive.jackson.DisableSecureSerialization` アノテーションを使用して、特定の Jakarta REST Resource クラスまたはメソッドに対するオプトインまたはオプトアウトを行うことができます。"

#: _versions/main/guides/rest.adoc
msgid "Configuration expressions set with the `SecureField.rolesAllowed` property are validated during application startup even when the `@io.quarkus.resteasy.reactive.jackson.DisableSecureSerialization` annotation is used."
msgstr "`SecureField.rolesAllowed` プロパティーで設定された設定式は、 `@io.quarkus.resteasy.reactive.jackson.DisableSecureSerialization` アノテーションが使用されている場合でも、アプリケーションの起動時に検証されます。"

#: _versions/main/guides/rest.adoc
msgid "@JsonView support"
msgstr "@JsonView support"

#: _versions/main/guides/rest.adoc
msgid ""
"Jakarta REST methods can be annotated with https://fasterxml.github.io/jackson-annotations/javadoc/2.10/com/fasterxml/jackson/annotation/JsonView.html[@JsonView]\n"
"in order to customize the serialization of the returned POJO, on a per method-basis. This is best explained with an example."
msgstr "Jakarta RESTメソッドに link:https://fasterxml.github.io/jackson-annotations/javadoc/2.10/com/fasterxml/jackson/annotation/JsonView.html[@JsonView] のアノテーションを付けると、メソッドごとに、返されるPOJOのシリアライズをカスタマイズすることができます。これは、例で説明するのが一番わかりやすいでしょう。"

#: _versions/main/guides/rest.adoc
msgid "A typical use of `@JsonView` is to hide certain fields on certain methods. In that vein, let's define two views:"
msgstr "`@JsonView` の一般的な使用法は、特定のメソッドの特定のフィールドを非表示にすることです。その流れの中で、2 つのビューを定義しましょう。"

#: _versions/main/guides/rest.adoc
msgid "Let's assume we have the `User` POJO on which we want to hide some field during serialization. A simple example of this is:"
msgstr "シリアル化中にフィールドを非表示にする `User` POJO があると仮定します。この簡単な例は次のとおりです。"

#: _versions/main/guides/rest.adoc
msgid ""
"Depending on the Jakarta REST method that returns this user, we might want to exclude the `id` field from serialization.\n"
"For example, you might want an insecure method to not expose this field.\n"
"The way we can achieve that in Quarkus REST is shown in the following example:"
msgstr "このユーザーを返す Jakarta REST メソッドによっては、 `id` フィールドをシリアライズから除外したい場合があります。たとえば、安全でないメソッドでは、このフィールドを公開しないようにする場合があります。Quarkus REST で実現する方法は、次の例のとおりです。"

#: _versions/main/guides/rest.adoc
msgid ""
"When the result of the `userPublic` method is serialized, the `id` field will not be contained in the response as the `Public` view does not include it.\n"
"The result of `userPrivate` however will include the `id` as expected when serialized."
msgstr ""
"`userPublic` メソッドの結果がシリアライズされるとき、 `Public` ビューには `id` フィールドが含まれていないため、レスポンスには フィールドは含まれません。\n"
"しかし、 `userPrivate` の結果は、シリアライズされたときに期待されるように `id` を含みます。"

#: _versions/main/guides/rest.adoc
msgid "`@JsonView` is also supported for deserializing the request body. So for example in the following code:"
msgstr "`@JsonView` はリクエストボディのデシリアライズにも対応しています。例えば以下のコードでは"

#: _versions/main/guides/rest.adoc
msgid "inside the `create` method, `user` would only contain the value of `name` while `id` would always be `null` (regardless if the JSON request contained it)"
msgstr "`create` メソッドの内部では、 `user` は `name` の値のみを含み、 `id` は常に `null` になります（JSON リクエストにそれが含まれているかどうかに関係なく）。"

#: _versions/main/guides/rest.adoc
msgid "Reflection-free Jackson serialization and deserialization"
msgstr "リフレクションのないJacksonのシリアライズとデシリアライズ"

#: _versions/main/guides/rest.adoc
msgid ""
"By default, Jackson uses reflection to convert objects to and from JSON.\n"
"However, {project-name} follows a build-time optimization philosophy.\n"
"To align with this approach, configure your application to minimize reflection by using the link:https://quarkus.io/extensions/io.quarkus/quarkus-rest-jackson[`quarkus-rest-jackson`] extension."
msgstr ""
"デフォルトでは、Jacksonはリフレクションを使用してオブジェクトをJSONに変換します。\n"
"ただし、{project-name}はビルド時間の最適化という考え方に従っています。\n"
"このアプローチに合わせるには、 link:https://quarkus.io/extensions/io.quarkus/quarkus-rest-jackson[quarkus-rest-jackson] エクステンションを使用してリフレクションを最小化するようにアプリケーションを構成します。"

#: _versions/main/guides/rest.adoc
msgid "This feature is introduced as a Technology Preview and is disabled by default."
msgstr "この機能はTechnology Previewとして導入され、デフォルトでは無効になっています。"

#: _versions/main/guides/rest.adoc
msgid ""
"By eliminating reliance on reflection during deserialization, applications can achieve better performance and reduced memory consumption, particularly for native applications where reflection can introduce overhead.\n"
"If you implement this feature, run tests to assess its effect on your applications."
msgstr "デシリアライズ中のリフレクションへの依存を排除することで、アプリケーションは、特にリフレクションがオーバーヘッドをもたらす可能性のあるネイティブ・アプリケーションにおいて、より良いパフォーマンスとメモリ消費の削減を達成することができます。この機能を実装する場合は、テストを実行してアプリケーションへの影響を評価してください。"

#: _versions/main/guides/rest.adoc
#, fuzzy
msgid "To enable this feature, set the <<quarkus-rest-jackson_quarkus-rest-jackson-optimization-enable-reflection-free-serializers,`quarkus.rest.jackson.optimization.enable-reflection-free-serializers`>> configuration property to `true`:"
msgstr "この機能を有効にするには xref:quarkus-rest-jackson_quarkus-rest-jackson-optimization-enable-reflection-free-serializers[quarkus.rest.jackson.optimization.enable-reflection-free-serializers] 設定プロパティを `true` に設定します："

#: _versions/main/guides/rest.adoc
msgid "`quarkus.rest.jackson.optimization.enable-reflection-free-serializers=true`."
msgstr "`quarkus.rest.jackson.optimization.enable-reflection-free-serializers=true`."

#: _versions/main/guides/rest.adoc
msgid "Setting this property applies reflection-free optimization to deserialization and serialization."
msgstr "このプロパティを設定すると、デシリアライズとシリアライズにリフレクションフリーの最適化が適用されます。"

#: _versions/main/guides/rest.adoc
msgid "When enabled, {project-name} generates `StdSerializer` and `StdDeserializer` implementations at build time for each class requiring JSON conversion. The application then processes objects returned by REST endpoints using these generated serializers and deserializers, eliminating reliance on reflection and improving performance."
msgstr ""
"有効にすると、{project-name} は、JSON 変換を必要とする各クラスのビルド時に `StdSerializer` と `StdDeserializer` の実装を生成します。\n"
"アプリケーションはこれらの生成されたシリアライザーとデシリアライザーを使用してRESTエンドポイントから返されたオブジェクトを処理します。"

#: _versions/main/guides/rest.adoc
msgid "Developers can further customize JSON processing by implementing the `ObjectMapperCustomizer` interface. This interface allows fine-grained control over the `ObjectMapper`, enabling the registration of custom serializers and deserializers while ensuring compatibility with the reflection-free optimization. If additional configuration is needed, implement an `ObjectMapperCustomizer` bean and register any necessary modules or settings."
msgstr ""
"開発者は、 `ObjectMapperCustomizer` インタフェースを実装することで、JSON処理をさらにカスタマイズできます。\n"
"このインターフェースは、 `ObjectMapper` に対するきめ細かい制御を可能にし、リフレクションフリーの最適化との互換性を確保しながら、カスタムのシリアライザーとデシリアライザーの登録を可能にします。追加の設定が必要な場合は、 `ObjectMapperCustomizer` Bean を実装し、必要なモジュールや設定を登録します。"

#: _versions/main/guides/rest.adoc
msgid "Completely customized per method serialization/deserialization"
msgstr "メソッドごとに完全にカスタマイズされたシリアル化/デシリアル化"

#: _versions/main/guides/rest.adoc
msgid "There are times when you need to completely customize the serialization/deserialization of a POJO on a per Jakarta REST method basis or on a per Jakarta REST resource basis. For such use cases, you can use the `@io.quarkus.resteasy.reactive.jackson.CustomSerialization` and `@io.quarkus.resteasy.reactive.jackson.CustomDeserialization` annotations in the REST method or in the REST resource at class level. These annotations allow you to fully configure the `com.fasterxml.jackson.databind.ObjectWriter`/`com.fasterxml.jackson.databind.ObjectReader`."
msgstr ""
"Jakarta REST の各メソッド単位、または各リソース単位で、POJO のシリアライズ/デシリアライズを完全にカスタマイズする必要がある場合があります。\n"
"そのようなユースケースでは、REST メソッドやリソースのクラスレベルで `@io.quarkus.resteasy.reactive.jackson.CustomSerialization` および `@io.quarkus.resteasy.reactive.jackson.CustomDeserialization` アノテーションを使用できます。\n"
"これらのアノテーションを利用することで、 `com.fasterxml.jackson.databind.ObjectWriter` や `com.fasterxml.jackson.databind.ObjectReader` を完全に設定できます。"

#: _versions/main/guides/rest.adoc
msgid "Here is an example use case to customize the `com.fasterxml.jackson.databind.ObjectWriter`:"
msgstr "以下は、 `com.fasterxml.jackson.databind.ObjectWriter` をカスタマイズするユースケースです。"

#: _versions/main/guides/rest.adoc
msgid "where `UnquotedFields` is a `BiFunction` defined as so:"
msgstr "ここで、 `UnquotedFields` は次のように定義された `BiFunction` です。"

#: _versions/main/guides/rest.adoc
msgid "Essentially what this class does is force Jackson to not include quotes in the field names."
msgstr "基本的にこのクラスが行うことは、フィールド名に引用符を含めないよう Jackson に強制することです。"

#: _versions/main/guides/rest.adoc
msgid "It is important to note that this customization is only performed for the serialization of the Jakarta REST methods that use `@CustomSerialization(UnquotedFields.class)`."
msgstr "このカスタマイズは、 `@CustomSerialization(UnquotedFields.class)` を使用する Jakarta REST メソッドのシリアライズに対してのみ実行されることに注意する必要があります。"

#: _versions/main/guides/rest.adoc
msgid "Following the previous example, let's now customize the `com.fasterxml.jackson.databind.ObjectReader` to read JSON requests with unquoted field names:"
msgstr "前の例に従って、フィールド名が引用符で囲まれていない JSON リクエストを読み取るように `com.fasterxml.jackson.databind.ObjectReader` をカスタマイズしてみましょう。"

#: _versions/main/guides/rest.adoc
msgid "where `SupportUnquotedFields` is a `BiFunction` defined as so:"
msgstr "ここで、 `SupportUnquotedFields` は次のように定義された `BiFunction` です。"

#: _versions/main/guides/rest.adoc
msgid "XML serialisation"
msgstr "XML シリアライゼーション"

#: _versions/main/guides/rest.adoc
msgid "To enable XML support, add the `quarkus-rest-jaxb` extension to your project."
msgstr "XML サポートを有効にするには、プロジェクトに `quarkus-rest-jaxb` エクステンションを追加します。"

#: _versions/main/guides/rest.adoc
msgid "`io.quarkus:quarkus-rest-jaxb`"
msgstr "`io.quarkus:quarkus-rest-jaxb`"

#: _versions/main/guides/rest.adoc
msgid "https://javaee.github.io/jaxb-v2/[XML support]"
msgstr "https://javaee.github.io/jaxb-v2/[XML サポート]"

#: _versions/main/guides/rest.adoc
msgid ""
"Importing this module will allow HTTP message bodies to be read from XML\n"
"and serialised to XML, for <<resource-types,all the types not already registered with a more specific\n"
"serialisation>>."
msgstr "このモジュールをインポートすると、HTTP メッセージ本文を XML から読み込み、XML にシリアル化することができます (<<resource-types,all the types not already registered with a more specific serialisation>>)。"

#: _versions/main/guides/rest.adoc
msgid "The JAXB Quarkus REST extension will automatically detect the classes that are used in the resources and require JAXB serialization. Then, it will register these classes into the default `JAXBContext` which is internally used by the JAXB message reader and writer."
msgstr "JAXB Quarkus REST エクステンションは、リソースで使用され、JAXB シリアル化を必要とするクラスを自動的に検出します。次に、これらのクラスを、JAXB メッセージリーダーとライターによって内部的に使用されるデフォルトの `JAXBContext` に登録します。"

#: _versions/main/guides/rest.adoc
msgid "However, in some situations, these classes cause the `JAXBContext` to fail: for example, when you're using the same class name in different java packages. In these cases, the application will fail at build time and print the JAXB exception that caused the issue, so you can properly fix it. Alternatively, you can also exclude the classes that cause the issue by using the property `quarkus.jaxb.exclude-classes`. When excluding classes that are required by any resource, the JAXB Quarkus REST extension will create and cache a custom `JAXBContext` that will include the excluded class, causing a minimal performance degradance."
msgstr "しかし、状況によっては、これらのクラスが原因で `JAXBContext` が失敗することがあります。例えば、異なる Java パッケージで同じクラス名を使用している場合などです。このような場合、アプリケーションはビルド時に失敗し、問題の原因となったJAXB例外が出力されるので、適切に修正することができます。また、 `quarkus.jaxb.exclude-classes` というプロパティを使用して、問題の原因となるクラスを除外することもできます。任意のリソースで必要とされるクラスを除外する場合、JAXB Quarkus REST エクステンションは、除外されたクラスを含むカスタム `JAXBContext` を作成およびキャッシュするため、パフォーマンスの低下は最小限に抑えられます。"

#: _versions/main/guides/rest.adoc
msgid ""
"The property `quarkus.jaxb.exclude-classes` accepts a comma separated list of either fully qualified class names\n"
"or package names. Package names must be suffixed by `.*` and all classes in the specified package and its subpackages will be excluded."
msgstr ""
"`quarkus.jaxb.exclude-classes` プロパティは、完全修飾クラス名またはパッケージ名 のコンマ区切りリスト を使用できます。\n"
"パッケージ名を指定する場合は、末尾に `.*` を付ける必要があり、指定されたパッケージおよびそのサブパッケージ内のすべてのクラスが除外されます。"

#: _versions/main/guides/rest.adoc
msgid "For instance, when setting `quarkus.jaxb.exclude-classes=org.acme.one.Model,org.acme.two.Model,org.acme.somemodel.*`, the following elements are excluded:"
msgstr "たとえば、 `quarkus.jaxb.exclude-classes=org.acme.one.Model,org.acme.two.Model,org.acme.somemodel.*` を設定すると、次の要素が除外されます。"

#: _versions/main/guides/rest.adoc
msgid "The class `org.acme.one.Model`"
msgstr "クラス `org.acme.one.Model`"

#: _versions/main/guides/rest.adoc
msgid "The class `org.acme.two.Model`"
msgstr "クラス `org.acme.two.Model`"

#: _versions/main/guides/rest.adoc
msgid "All the classes in the `org.acme.somemodel` package and its subpackages"
msgstr "`org.acme.somemodel` パッケージとそのサブパッケージ内のすべてのクラス"

#: _versions/main/guides/rest.adoc
msgid "Advanced JAXB-specific features"
msgstr "高度な JAXB 固有の機能"

#: _versions/main/guides/rest.adoc
msgid "When using the `quarkus-resteasy-reactive-jaxb` extension there are some advanced features that Quarkus REST supports."
msgstr "`quarkus-resteasy-reactive-jaxb` エクステンションを使用する場合、Quarkus REST がサポートする高度な機能がいくつかあります。"

#: _versions/main/guides/rest.adoc
msgid "Inject JAXB components"
msgstr "JAXB コンポーネントを注入する"

#: _versions/main/guides/rest.adoc
msgid "The JAXB Quarkus REST extension will serialize and unserialize requests and responses transparently for users. However, if you need finer grain control over JAXB components, you can inject either the JAXBContext, Marshaller, or Unmarshaller components into your beans:"
msgstr "JAXB Quarkus REST エクステンションは、ユーザーに対して透過的にリクエストとレスポンスをシリアライズおよびアンシリアライズします。ただし、JAXB コンポーネントをより細かく制御する必要がある場合は、JAXBContext、Marshaller、または Unmarshaller コンポーネントのいずれかを Bean に注入できます。"

#: _versions/main/guides/rest.adoc
msgid "Quarkus will automatically find all the classes annotated with `@XmlRootElement` and then bound them to the JAXB context."
msgstr "Quarkus は、 `@XmlRootElement` でアノテーションが付けられたすべてのクラスを自動的に検出し、それらを JAXB コンテキストにバインドします。"

#: _versions/main/guides/rest.adoc
msgid "Customize the JAXB configuration"
msgstr "JAXB 設定をカスタマイズする"

#: _versions/main/guides/rest.adoc
msgid "To customize the JAXB configuration for either the JAXB context, and/or the Marshaller/Unmarshaller components, the suggested approach is to define a CDI bean of type `io.quarkus.jaxb.runtime.JaxbContextCustomizer`."
msgstr "JAXB コンテキスト、および/または Marshaller/Unmarshaller コンポーネントの JAXB 設定をカスタマイズするには、型 `io.quarkus.jaxb.runtime.JaxbContextCustomizer` の CDI Bean を定義することをお勧めします。"

#: _versions/main/guides/rest.adoc
msgid "An example where a custom module needs to be registered would look like so:"
msgstr "カスタムモジュールを登録する必要がある場合の例は次のようになります。"

#: _versions/main/guides/rest.adoc
msgid "It's not necessary to implement all three methods, but only the want you need."
msgstr "3 つのメソッドすべてを実装する必要はありませんが、必要なものだけを実装する必要があります。"

#: _versions/main/guides/rest.adoc
msgid "Alternatively, you can provide your own `JAXBContext` bean by doing:"
msgstr "または、次のようにして、独自の `JAXBContext` Bean を提供できます。"

#: _versions/main/guides/rest.adoc
msgid "Note that if you provide your custom JAXB context instance, you will need to register the classes you want to use for the XML serialization. This means that Quarkus will not update your custom JAXB context instance with the auto-discovered classes."
msgstr "カスタム JAXB コンテキストインスタンスを提供する場合は、XML シリアル化に使用するクラスを登録する必要があることに注意してください。これは、Quarkus がカスタム JAXB コンテキストインスタンスを自動検出されたクラスで更新しないことを意味します。"

#: _versions/main/guides/rest.adoc
msgid "Web Links support"
msgstr "Web リンクのサポート"

#: _versions/main/guides/rest.adoc
msgid "To enable Web Links support, add the `quarkus-rest-links` extension to your project."
msgstr "Web リンクのサポートを有効にするには、プロジェクトに `quarkus-rest-links` エクステンションを追加します。"

#: _versions/main/guides/rest.adoc
msgid "`io.quarkus:quarkus-rest-links`"
msgstr "`io.quarkus:quarkus-rest-links`"

#: _versions/main/guides/rest.adoc
msgid "https://www.w3.org/wiki/LinkHeader[Web Links support]"
msgstr "https://www.w3.org/wiki/LinkHeader[Web リンクのサポート]"

#: _versions/main/guides/rest.adoc
msgid ""
"Importing this module will allow injecting web links into the response HTTP headers by just annotating your endpoint resources with the `@InjectRestLinks` annotation. To declare the web links that will be returned, you must use the `@RestLink` annotation in the linked methods.\n"
"Assuming a `Record` looks like:"
msgstr ""
"このモジュールをインポートすると、エンドポイントのリソースに `@InjectRestLinks` アノテーションを付与するだけで、HTTP レスポンスヘッダーに Web リンクを挿入できるようになります。\n"
"返される Web リンクを宣言するには、リンク先となるメソッドに `@RestLink` アノテーションを使用する必要があります。\n"
"\n"
"`Record` の場合は以下のようになります。"

#: _versions/main/guides/rest.adoc
msgid "An example of enabling Web Links support would look like:"
msgstr "Web リンクのサポートを有効にする例は次のようになります。"

#: _versions/main/guides/rest.adoc
msgid "When calling the endpoint `/records` which is defined by the method `getAll` within the above resource using curl, you would get the web links header:"
msgstr "上記のリソース内でメソッド `getAll` によって定義されたエンドポイント `/records` を curl を使用して呼び出すと、Web リンクヘッダーが取得されます。"

#: _versions/main/guides/rest.adoc
msgid "As this resource does not return a single instance of type `Record`, the links for the methods `get`, `update`, and `delete` are not injected. Now, when calling the endpoint `/records/1`, you would get the following web links:"
msgstr "このリソースは型 `Record` の単一のインスタンスを返さないため、メソッド `get`、 `update`、および `delete` のリンクは挿入されません。これで、エンドポイント `/records/1` を呼び出すと、次の Web リンクが表示されます。"

#: _versions/main/guides/rest.adoc
msgid "The `get`, `update`, and `delete` methods use the path param \"id\" and as the field \"id\" exists in the entity type \"Record\", the web link properly populates the value \"1\" in the returned links. In addition to this, we can also generate web links with path params that do not match with any field of the entity type. For example, the following method is using a path param \"text\" and the entity Record does not have any field named \"text\":"
msgstr "`get `, `update `, `delete` の各メソッドでは、パスパラメータ \"id\" を使用しており、エンティティタイプ \"Record\" にフィールド \"id\" が存在するため、Web リンクは返されるリンクに適切に値 \"1\" を入力します。これに加えて、エンティティ・タイプのどのフィールドとも一致しないパス・パラメータを持つウェブ・リンクを生成することも可能です。たとえば、次のメソッドでは、パスパラメータ \"text\" を使用していますが、エンティティRecordには \"text\" という名前のフィールドがありません:"

#: _versions/main/guides/rest.adoc
msgid "The generated web link for this resource is `Link: <http://localhost:8080/search/{text}>; rel=\"search records by free text\"`."
msgstr "このリソースの生成されたウェブリンクは次のようになります `Link: <http://localhost:8080/search/{text}>; rel=\"search records by free text\"` 。"

#: _versions/main/guides/rest.adoc
msgid "Finally, when calling the `delete` resource, you should not see any web links as the method `delete` is not annotated with the `@InjectRestLinks` annotation."
msgstr "最後に、 `delete` リソースを呼び出すと、 `delete` メソッドに `@InjectRestLinks` アノテーションが付いていないため、ウェブリンクが表示されないはずです。"

#: _versions/main/guides/rest.adoc
msgid "Programmatically access to the web links registry"
msgstr "Web リンクレジストリーへのプログラムによるアクセス"

#: _versions/main/guides/rest.adoc
msgid "You can programmatically have access to the web links registry just by injecting the `RestLinksProvider` bean:"
msgstr "`RestLinksProvider` Bean を挿入するだけで、プログラムで Web リンクレジストリーにアクセスできます。"

#: _versions/main/guides/rest.adoc
msgid "Using this injected bean of type `RestLinksProvider`, you can get the links by type using the method `RestLinksProvider.getTypeLinks` or get the links by a concrete instance using the method `RestLinksProvider.getInstanceLinks`."
msgstr "型 `RestLinksProvider` の挿入された Bean を使用すると、メソッド `RestLinksProvider.getTypeLinks` を使用して型ごとにリンクを取得するか、メソッド `RestLinksProvider.getInstanceLinks` を使用して具象インスタンスによってリンクを取得できます。"

#: _versions/main/guides/rest.adoc
msgid "JSON Hypertext Application Language (HAL) support"
msgstr "JSON ハイパーテキストアプリケーション言語 (HAL) のサポート"

#: _versions/main/guides/rest.adoc
msgid "The https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] standard is a simple format to represent web links."
msgstr "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] 標準は、Web リンクを表す単純な形式です。"

#: _versions/main/guides/rest.adoc
msgid "To enable the HAL support, add the `quarkus-hal` extension to your project. Also, as HAL needs JSON support, you need to add either the `quarkus-rest-jsonb` or the `quarkus-rest-jackson` extension."
msgstr "HAL のサポートを有効にするには、 `quarkus-hal` エクステンションをプロジェクトに追加します。また、 HAL は JSON サポートを必要とするため、 `quarkus-rest-jsonb` または `quarkus-rest-jackson` のいずれかのエクステンションモジュールを追加する必要があります。"

#: _versions/main/guides/rest.adoc
msgid "`io.quarkus:quarkus-hal`"
msgstr "`io.quarkus:quarkus-hal`"

#: _versions/main/guides/rest.adoc
msgid "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"
msgstr "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"

#: _versions/main/guides/rest.adoc
msgid "After adding the extensions, we can now annotate the REST resources to produce the media type `application/hal+json` (or use RestMediaType.APPLICATION_HAL_JSON). For example:"
msgstr "エクステンションを追加した後、REST リソースにアノテーションを付けて、メディアタイプ `application/hal+json` を生成できます (または RestMediaType.APPLICATION_HAL_JSON を使用します)。例えば:"

#: _versions/main/guides/rest.adoc
msgid "Now, the endpoints `/records` and `/records/{id}` will accept the media type both `json` and `hal+json` to print the records in Hal format."
msgstr "ここで、エンドポイント `/records` と `/records/{id}` は、 `json` と `hal + json` の両方のメディアタイプを受け入れて、Hal 形式でレコードを出力します。"

#: _versions/main/guides/rest.adoc
msgid "For example, if we invoke the `/records` endpoint using curl to return a list of records, the HAL format will look like as follows:"
msgstr "たとえば、curl を使用して `/records` エンドポイントを呼び出してレコードのリストを返す場合、HAL 形式は次のようになります。"

#: _versions/main/guides/rest.adoc
msgid "When we call a resource `/records/1` that returns only one instance, then the output is:"
msgstr "1 つのインスタンスのみを返すリソース `/records/1` を呼び出すと、出力は次のようになります。"

#: _versions/main/guides/rest.adoc
msgid "Finally, you can also provide additional HAL links programmatically in your resource just by returning either `HalCollectionWrapper<T>` (to return a list of entities) or `HalEntityWrapper<T>` (to return a single object) as described in the following example:"
msgstr "最後に、次の例で説明するように、 `HalCollectionWrapper<T>` (エンティティのリスト) または `HalEntityWrapper<T>` (単一オブジェクト) を返すことで、リソースにプログラム的に追加の HAL リンクを提供することも可能です。"

#: _versions/main/guides/rest.adoc
msgid "CORS filter"
msgstr "CORS フィルター"

#: _versions/main/guides/rest.adoc
msgid ""
"link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that\n"
"allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource\n"
"was served."
msgstr "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[クロスオリジンリソース共有] (CORS)は、ウェブページ上の制限されたリソースを、最初のリソースが提供されたドメイン以外の別のドメインから要求できるようにするメカニズムです。"

#: _versions/main/guides/rest.adoc
msgid ""
"Quarkus includes a CORS filter at the HTTP layer level.\n"
"For more information about the CORS filters and their usage, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the Quarkus \"Cross-origin resource sharing\" guide."
msgstr ""
"Quarkus には、HTTP レイヤーレベルの CORS フィルターが含まれています。\n"
"CORS フィルターとその使用方法の詳細は、Quarkus のクロスオリジンリソース共有ガイドの xref:security-cors.adoc#cors-filter[CORS フィルター] セクションを参照してください。"

#: _versions/main/guides/rest.adoc
msgid "More advanced usage"
msgstr "より高度な使用法"

#: _versions/main/guides/rest.adoc
msgid ""
"Here are some more advanced topics that you may not need to know about initially, but\n"
"could prove useful for more complex use cases."
msgstr "ここでは、最初は知る必要がないかもしれませんが、より複雑なユースケースに役立つ可能性のある、より詳細なトピックをいくつか紹介します。"

#: _versions/main/guides/rest.adoc
msgid "Execution model, blocking, non-blocking"
msgstr "実行モデル、ブロッキング、ノンブロッキング"

#: _versions/main/guides/rest.adoc
msgid "Quarkus REST is implemented using two main thread types:"
msgstr "Quarkus REST は、主に 2 つのスレッドタイプを使用して実装されます。"

#: _versions/main/guides/rest.adoc
msgid ""
"Event-loop threads: which are responsible, among other things, for reading bytes from the HTTP request and\n"
"writing bytes back to the HTTP response"
msgstr "イベントループスレッド: HTTPリクエストからのバイトの読み込みとHTTPレスポンスへのバイトの書き戻しを担当します。"

#: _versions/main/guides/rest.adoc
msgid "Worker threads: they are pooled and can be used to offload long-running operations"
msgstr "ワーカースレッド: プールされ、長時間実行される操作の負荷を軽減するために使用できます"

#: _versions/main/guides/rest.adoc
msgid ""
"The event-loop threads (also called IO threads) are responsible for actually performing all the IO\n"
"operations in an asynchronous way, and to trigger any listener interested in the completion of those\n"
"IO operations."
msgstr "イベントループスレッド (IO スレッドとも呼ばれます) は、すべての IO 操作を非同期で実際に実行し、それらの IO 操作の完了に関心のあるリスナーをトリガーする役割を果たします。"

#: _versions/main/guides/rest.adoc
msgid ""
"By default, the thread Quarkus REST will run endpoint methods on depends on the signature of the method.\n"
"If a method returns one of the following types then it is considered non-blocking, and will be run on the IO thread\n"
"by default:"
msgstr "デフォルトでは、Quarkus REST スレッドは、メソッドのシグネチャーに応じてエンドポイントメソッドを実行します。メソッドが次のタイプのいずれかを返す場合、それは非ブロッキングと見なされ、デフォルトで IO スレッドで実行されます。"

#: _versions/main/guides/rest.adoc
msgid "`io.smallrye.mutiny.Uni`"
msgstr "`io.smallrye.mutiny.Uni`"

#: _versions/main/guides/rest.adoc
msgid "`io.smallrye.mutiny.Multi`"
msgstr "`io.smallrye.mutiny.Multi`"

#: _versions/main/guides/rest.adoc
msgid "`java.util.concurrent.CompletionStage`"
msgstr "`java.util.concurrent.CompletionStage`"

#: _versions/main/guides/rest.adoc
msgid "`org.reactivestreams.Publisher`"
msgstr "`org.reactivestreams.Publisher`"

#: _versions/main/guides/rest.adoc
msgid "Kotlin `suspended` methods"
msgstr "Kotlin の `suspended` メソッド"

#: _versions/main/guides/rest.adoc
msgid ""
"This 'best guess' approach means most operations will run on the correct thread by default.\n"
"If you are writing reactive code, your method will generally return one of these types and will be executed on the IO thread.\n"
"If you are writing blocking code, your methods will usually return the result directly, and these will be run on a worker thread."
msgstr "この「最善の推測」アプローチは、ほとんどの操作がデフォルトで正しいスレッドで実行されることを意味します。リアクティブなコードを書いている場合、メソッドは通常これらの型のいずれかを返し、IOスレッドで実行されます。ブロッキングコードを書いている場合、メソッドは通常、結果を直接返し、これらはワーカースレッドで実行されます。"

#: _versions/main/guides/rest.adoc
msgid ""
"You can override this behaviour using the\n"
"https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/Blocking.html[`@Blocking`]\n"
"and\n"
"https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/NonBlocking.html[`@NonBlocking`]\n"
"annotations. This can be applied at the method, class or `jakarta.ws.rs.core.Application` level."
msgstr "link:https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/Blocking.html[@Blocking] と link:https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/NonBlocking.html[@NonBlocking] アノテーションを使用してこの動作をオーバーライドすることができます。これは、メソッド、クラス、 `jakarta.ws.rs.core.Application` の各レベルで適用することができます。"

#: _versions/main/guides/rest.adoc
msgid "The example below will override the default behaviour and always run on a worker thread, even though it returns a `Uni`."
msgstr "以下の例は、デフォルトの動作をオーバーライドし、 `Uni` を返しても、常にワーカースレッドで実行されます。"

#: _versions/main/guides/rest.adoc
msgid ""
"Most of the time, there are ways to achieve the same blocking operations in an asynchronous/reactive\n"
"way, using https://smallrye.io/smallrye-mutiny/[Mutiny], https://hibernate.org/reactive/[Hibernate Reactive]\n"
"or any of the xref:quarkus-reactive-architecture.adoc#quarkus-extensions-enabling-reactive[Quarkus Reactive extensions] for example:"
msgstr "ほとんどの場合、 https://smallrye.io/smallrye-mutiny/[Mutiny] 、 https://hibernate.org/reactive/[Hibernate Reactive] 、または xref:quarkus-reactive-architecture.adoc#quarkus-extensions-enabling-reactive[Quarkusリアクティブエクステンション] などを使って、同じブロック操作を非同期/リアクティブに実現する方法があります。"

#: _versions/main/guides/rest.adoc
msgid ""
"If a method or class is annotated with `jakarta.transaction.Transactional` then it will also be treated as a blocking\n"
"method. This is because JTA is a blocking technology, and is generally used with other blocking technology such as\n"
"Hibernate and JDBC. An explicit `@Blocking` or `@NonBlocking` on the class will override this behaviour."
msgstr "メソッドやクラスに `jakarta.transaction.Transactional` のアノテーションを付けると、そのメソッドもブロッキングメソッドとして扱われます。これは、JTAがブロッキング技術であり、一般的にHibernateやJDBCなどの他のブロッキング技術と共に使用されるためです。クラスに明示的に `@Blocking` または `@NonBlocking` を付けると、この動作は上書きされます。"

#: _versions/main/guides/rest.adoc
msgid "Overriding the default behaviour"
msgstr "デフォルトの動作のオーバーライド"

#: _versions/main/guides/rest.adoc
msgid ""
"If you want to override the default behavior, you can annotate a `jakarta.ws.rs.core.Application` subclass in your application with `@Blocking` or `@NonBlocking`,\n"
"and this will set the default for every method that does not have an explicit annotation."
msgstr "デフォルトの動作をオーバーライドしたい場合は、アプリケーション内の `jakarta.ws.rs.core.Application` サブクラスに `@Blocking` または `@NonBlocking` のアノテーションを付けると、明示的なアノテーションを持たないすべてのメソッドのデフォルトが設定されます。"

#: _versions/main/guides/rest.adoc
msgid ""
"Behavior can still be overridden on a class or method level by annotating them directly, however,\n"
"all endpoints without an annotation will now follow the default, no matter their method signature."
msgstr "クラスやメソッドに直接アノテーションを付けることで動作をオーバーライドすることは可能ですが、アノテーションのないエンドポイントは、メソッドのシグネチャに関係なくデフォルトに従うようになりました。"

#: _versions/main/guides/rest.adoc
msgid "Exception mapping"
msgstr "例外のマッピング"

#: _versions/main/guides/rest.adoc
msgid ""
"If your application needs to return non-nominal HTTP codes in error cases, the best is\n"
"to throw exceptions that will result in the proper HTTP response being sent by the\n"
"framework using link:{jaxrsapi}/jakarta/ws/rs/WebApplicationException.html[`WebApplicationException`] or any of its subtypes:"
msgstr "もしアプリケーションがエラー時に正規の HTTP コード以外を返す必要がある場合、最善の方法は、フレームワークが link:{jaxrsapi}/jakarta/ws/rs/WebApplicationException.html[`WebApplicationException`] またはその継承型を使用して適切な HTTP レスポンスを送信する結果となる例外を投げることです。"

#: _versions/main/guides/rest.adoc
msgid "You can change the log level of the thrown `WebApplicationException` exceptions by configuring the following property `quarkus.log.category.\"WebApplicationException\".level` like so:"
msgstr "出力された ` WebApplicationException ` 例外のログレベルを変更するには、次のようにプロパティー `quarkus.log.category.\"WebApplicationException\".level` を設定します。"

#: _versions/main/guides/rest.adoc
msgid ""
"If your endpoint method is delegating calls to another service layer which\n"
"does not know of Jakarta REST, you need a way to turn service exceptions to an\n"
"HTTP response, and you can do that using the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerExceptionMapper.html[`@ServerExceptionMapper`]\n"
"annotation on a method, with one parameter of the exception type you want to handle, and turning\n"
"that exception into a link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse`] (or a\n"
"link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`]):"
msgstr ""
"エンドポイントメソッドが、Jakarta REST を認識していない、別のサービスレイヤーに呼び出しを移譲する場合、HTTP レスポンスにサービスの例外を変換する手段が必要です。また、メソッドに\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerExceptionMapper.html[`@ServerExceptionMapper`]\n"
"アノテーションを付けて、処理する例外タイプのパラメーターを 1 つ指定し、その例外を link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse`] (または\n"
"link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`]) に変換します。"

#: _versions/main/guides/rest.adoc
msgid "By default, methods annotated with `@ServerExceptionMapper` do **not** run CDI interceptors that apply to the other methods of the class (like ones needed for implementing security method level security)."
msgstr "デフォルトでは、 `@ServerExceptionMapper` アノテーションが付与されたメソッドは、クラス内の他のメソッドに適用される CDI インターセプターを **実行しません** (セキュリティのメソッドレベルの保護を実装するために必要なものなど)。"

#: _versions/main/guides/rest.adoc
msgid "Users however can opt into interceptors by adding the corresponding annotations to the method."
msgstr "ただし、ユーザーはメソッドに対応するアノテーションを追加することでインターセプターを選択できます。"

#: _versions/main/guides/rest.adoc
msgid "When mapping an exception to a `@ServerExceptionMapper` method, the cause of the exception normally does not come into play."
msgstr "例外を `@ServerExceptionMapper` メソッドにマッピングする場合、例外の原因は通常は考慮されません。"

#: _versions/main/guides/rest.adoc
msgid ""
"However, some exception types in Java only serve as wrappers for other exceptions. Often, checked exceptions are wrapped into `RuntimeException` just to not have them declared in method `throws` parameters.\n"
"Working with `CompletionStage` for example, will require `CompletionException`. There are many such exception types that are just wrappers around the real cause of the exception."
msgstr ""
"ただし、Java の一部の例外タイプは、他の例外のラッパーとしてのみ機能します。多くの場合、チェック済み例外は、メソッドの `throws` パラメーターで宣言されないようにするために `RuntimeException` にラップされます。\n"
"たとえば、 `CompletionStage` を操作するには、 `CompletionException` が必要になります。このような例外タイプは、例外の実際の原因をラップするだけのものが多数あります。"

#: _versions/main/guides/rest.adoc
msgid "If you wish to make sure your exception mapper is called for your exception type even when it is wrapped by one of those wrapper exceptions, you can use `@UnwrapException` on the exception wrapper type:"
msgstr "例外マッパーがラッパー例外のいずれかによってラップされている場合でも、例外タイプに対して例外マッパーが呼び出されるようにする場合は、例外ラッパータイプで `@UnwrapException` を使用できます。"

#: _versions/main/guides/rest.adoc
msgid "If you don't control that exception wrapper type, you can place the annotation on any class and specify the exception wrapper types it applies to as annotation parameter:"
msgstr "その例外ラッパータイプを制御しない場合は、任意のクラスにアノテーションを配置し、適用される例外ラッパータイプをアノテーションパラメーターとして指定できます。"

#: _versions/main/guides/rest.adoc
msgid ""
"Εxception mappers defined in REST endpoint classes will only be called if the  exception is thrown in the same class. If you want to define global exception mappers,\n"
"simply define them outside a REST endpoint class:"
msgstr "REST エンドポイントクラスで定義された例外マッパーは、例外が同じクラスで出力された場合にのみ呼び出されます。グローバル例外マッパーを定義する場合は、REST エンドポイントクラスの外部で定義するだけです。"

#: _versions/main/guides/rest.adoc
msgid "You can also declare link:{jaxrsspec}#exceptionmapper[exception mappers in the Jakarta REST way]."
msgstr "また、 link:{jaxrsspec}#exceptionmapper[例外マッパー] を、Jakarta RESTの方法で宣言することができます。"

#: _versions/main/guides/rest.adoc
msgid "Your exception mapper may declare any of the following parameter types:"
msgstr "例外マッパーは、次のパラメーター型のいずれかを宣言できます。"

#: _versions/main/guides/rest.adoc
msgid "Exception mapper parameters"
msgstr "例外マッパーパラメーター"

#: _versions/main/guides/rest.adoc
msgid "An exception type"
msgstr "例外型"

#: _versions/main/guides/rest.adoc
msgid "Defines the exception type you want to handle"
msgstr "処理する例外型を定義します"

#: _versions/main/guides/rest.adoc
msgid "Any of the <<context-objects,Context objects>>"
msgstr "<<context-objects,Context objects>>> のいずれか"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/container/ContainerRequestContext.html[`ContainerRequestContext`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/container/ContainerRequestContext.html[`ContainerRequestContext`]"

#: _versions/main/guides/rest.adoc
msgid "A context object to access the current request"
msgstr "現在のリクエストにアクセスするためのコンテキストオブジェクト"

#: _versions/main/guides/rest.adoc
msgid "It may declare any of the following return types:"
msgstr "次の戻り値の型のいずれかを宣言できます。"

#: _versions/main/guides/rest.adoc
msgid "Exception mapper return types"
msgstr "例外マッパーの戻り値の型"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse`] or link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[RestResponse] または link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[Response]"

#: _versions/main/guides/rest.adoc
msgid "The response to send to the client when the exception occurs"
msgstr "例外が発生したときにクライアントに送信するレスポンス"

#: _versions/main/guides/rest.adoc
msgid "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse>`] or link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"
msgstr "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse>`] または link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"

#: _versions/main/guides/rest.adoc
msgid "An asynchronous response to send to the client when the exception occurs"
msgstr "例外が発生したときにクライアントに送信する非同期レスポンス"

#: _versions/main/guides/rest.adoc
msgid ""
"When an exception occurs, Quarkus REST does not log it by default (for security reasons).\n"
"This can sometimes make it hard to understand why certain exception handling code was invoked (or not invoked).\n"
"To make Quarkus REST log the actual exception before an exception mapping code is run the `org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext` log category can be set to `DEBUG` like so:"
msgstr "例外が発生した場合、Quarkus REST はデフォルトでログを記録しません (セキュリティー上の理由による)。このため、特定の例外処理コードが呼び出された (または呼び出されなかった) 理由を理解するのが難しい場合があります。Quarkus REST が例外マッピングコードを実行する前に実際の例外をログ記録するには、次のように `org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext` ログカテゴリーを `DEBUG` に設定します。"

#: _versions/main/guides/rest.adoc
msgid "Request or response filters"
msgstr "リクエストまたはレスポンスフィルター"

#: _versions/main/guides/rest.adoc
msgid "Via annotations"
msgstr "アノテーション経由"

#: _versions/main/guides/rest.adoc
msgid "You can declare functions that are invoked in the following phases of the request processing:"
msgstr "リクエスト処理の次のフェーズで呼び出される関数を宣言できます。"

#: _versions/main/guides/rest.adoc
msgid "Before the endpoint method is identified: pre-matching request filter"
msgstr "エンドポイントメソッドが識別される前: 事前マッチングリクエストフィルター"

#: _versions/main/guides/rest.adoc
msgid "After routing, but before the endpoint method is called: normal request filter"
msgstr "ルーティング後、エンドポイントメソッドが呼び出される前: 通常のリクエストフィルター"

#: _versions/main/guides/rest.adoc
msgid "After the endpoint method is called: response filter"
msgstr "エンドポイントメソッドが呼び出された後: レスポンスフィルター"

#: _versions/main/guides/rest.adoc
msgid ""
"These filters allow you to do various things such as examine the request URI,\n"
"HTTP method, influence routing, look or change request headers, abort the request,\n"
"or modify the response."
msgstr "これらのフィルターを使用すると、リクエスト URI、HTTP メソッドの調査、ルーティングへの影響、リクエストヘッダーの検索または変更、リクエストの中止、レスポンスの変更など、さまざまなことができます。"

#: _versions/main/guides/rest.adoc
msgid ""
"Request filters can be declared with the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerRequestFilter.html[`@ServerRequestFilter`]\n"
"annotation:"
msgstr "リクエストフィルターは、 link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerRequestFilter.html[`@ServerRequestFilter`] アノテーションで宣言することが出来ます:"

#: _versions/main/guides/rest.adoc
msgid ""
"Request filters are usually executed on the same thread that the method that handles the request will be executed.\n"
"That means that if the method servicing the request is annotated with `@Blocking`, then the filters will also be run\n"
"on the worker thread.\n"
"If the method is annotated with `@NonBlocking` (or is not annotated at all), then the filters will also be run\n"
"on the same event-loop thread."
msgstr "リクエストフィルターは通常、リクエストを処理するメソッドが実行されるのと同じスレッドで実行されます。つまり、リクエストを処理するメソッドが `@Blocking` でアノテーションされている場合は、フィルターもワーカスレッドで実行されます。メソッドに `@NonBlocking` のアノテーションがある場合 (あるいは全くアノテーションがない場合)、フィルターは同じイベントループのスレッドで実行されます。"

#: _versions/main/guides/rest.adoc
msgid ""
"If however a filter needs to be run on the event-loop despite the fact that the method servicing the request will be\n"
"run on a worker thread, then `@ServerRequestFilter(nonBlocking=true)` can be used.\n"
"Note however, that these filters need to be run before **any** filter that does not use that setting and would run on a worker thread."
msgstr "しかし、リクエストを処理するメソッドがワーカスレッドで実行されるにも関わらず、フィルターをイベントループで実行する必要がある場合、 `@ServerRequestFilter (nonBlocking=true)` を使用することができます。しかし、これらのフィルターはこの設定を使わず、ワーカースレッドで実行される **どんな** フィルターよりも前に実行される必要があることに注意してください。"

#: _versions/main/guides/rest.adoc
msgid ""
"Keep in mind however that the information above does **not** apply to pre-matching filters (`@ServerRequestFilter(preMatching = true)`).\n"
"These filters are *always* run on an event-loop thread."
msgstr ""
"ただし、上記の情報は事前一致フィルター (`@ServerRequestFilter (preMatching = true)`) には **適用されない** ことに注意してください。\n"
"これらのフィルターは、*常に* イベントループスレッドで実行されます。"

#: _versions/main/guides/rest.adoc
msgid ""
"Similarly, response filters can be declared with the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerResponseFilter.html[`@ServerResponseFilter`]\n"
"annotation:"
msgstr "同様に、レスポンスフィルターは link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerResponseFilter.html[`@ServerResponseFilter`] アノテーションで宣言することが可能です。"

#: _versions/main/guides/rest.adoc
msgid "Such a response filter will also be called for <<exception-mapping, handled>> exceptions."
msgstr "このような応答フィルターは、<<exception-mapping, handled>> 例外でも呼び出されます。"

#: _versions/main/guides/rest.adoc
msgid "Your filters may declare any of the following parameter types:"
msgstr "フィルターは、次のパラメーター型のいずれかを宣言できます。"

#: _versions/main/guides/rest.adoc
msgid "Filter parameters"
msgstr "パラメーターをフィルター"

#: _versions/main/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/container/ContainerResponseContext.html[`ContainerResponseContext`]"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/container/ContainerResponseContext.html[`ContainerResponseContext`]"

#: _versions/main/guides/rest.adoc
msgid "A context object to access the current response"
msgstr "現在のレスポンスにアクセスするためのコンテキストオブジェクト"

#: _versions/main/guides/rest.adoc
msgid "link:{jdkapi}/java/lang/Throwable.html[`Throwable`]"
msgstr "link:{jdkapi}/java/lang/Throwable.html[`Throwable`]"

#: _versions/main/guides/rest.adoc
msgid "Any thrown and <<exception-mapping, handled>> exception, or `null` (only for response filters)."
msgstr "出力例外および <<exception-mapping, handled>> の例外または `null` (レスポンスフィルターのみ)。"

#: _versions/main/guides/rest.adoc
msgid "Filter return types"
msgstr "戻り値の型のフィルター"

#: _versions/main/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`] or link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`]"
msgstr "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`] または link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`]"

#: _versions/main/guides/rest.adoc
msgid "The response to send to the client instead of continuing the filter chain, or `null` if the filter chain should proceed"
msgstr "フィルターチェーンを続行する代わりにクライアントに送信するレスポンス、またはフィルターチェーンを続行する必要がある場合は null"

#: _versions/main/guides/rest.adoc
msgid "link:{jdkapi}/java/util/Optional.html[`Optional<RestResponse<?>>`] or link:{jdkapi}/java/util/Optional.html[`Optional<Response>`]"
msgstr "link:{jdkapi}/java/util/Optional.html[`Optional<RestResponse<?>>`] または link:{jdkapi}/java/util/Optional.html[`Optional<Response>`]"

#: _versions/main/guides/rest.adoc
msgid "An optional response to send to the client instead of continuing the filter chain, or an empty value if the filter chain should proceed"
msgstr "フィルターチェーンを続行する代わりにクライアントに送信するオプションのレスポンス、またはフィルターチェーンを続行する必要がある場合は空の値"

#: _versions/main/guides/rest.adoc
msgid "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`] or link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"
msgstr "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`] または link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"

#: _versions/main/guides/rest.adoc
msgid "An asynchronous response to send to the client instead of continuing the filter chain, or `null` if the filter chain should proceed"
msgstr "フィルターチェーンを続行する代わりにクライアントに送信する非同期レスポンス、またはフィルターチェーンを続行する必要がある場合は null"

#: _versions/main/guides/rest.adoc
msgid "You can restrict the Resource methods for which a filter runs, by using link:{jaxrsapi}/jakarta/ws/rs/NameBinding.html[`@NameBinding`] meta-annotations."
msgstr "link:{jaxrsapi}/jakarta/ws/rs/NameBinding.html[`@NameBinding`] メタアノテーションを使用して、フィルターが実行されるリソースメソッドを制限できます。"

#: _versions/main/guides/rest.adoc
msgid "The Jakarta REST way"
msgstr "ジャカルタRESTの方式"

#: _versions/main/guides/rest.adoc
msgid "You can also link:{jaxrsspec}#filters[declare request and response filters in the Jakarta REST way]."
msgstr "link:{jaxrsspec}#filters[JAX-RS方式でリクエストフィルタ、レスポンスフィルタを宣言する]こともできます。"

#: _versions/main/guides/rest.adoc
msgid ""
"Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter`\n"
"implementations respectively. These filters are suitable for processing the metadata associated with a message: HTTP\n"
"headers, query parameters, media type, and other metadata. They also have the capability to abort the request\n"
"processing, for instance when the user does not have the permissions to access the endpoint."
msgstr "HTTP リクエストとレスポンスの両方とも、それぞれ `ContainerRequestFilter` または `ContainerResponseFilter` の実装を提供することで、 インターセプトすることができます。これらのフィルタは、メッセージに関連付けられたメタデータを処理するのに適しています。HTTP ヘッダ、クエリパラメーター、メディアタイプ、その他のメタデータです。また、ユーザーがエンドポイントにアクセスする権限を持っていない場合など、リクエスト処理を中止する機能も持っています。"

#: _versions/main/guides/rest.adoc
msgid ""
"Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing\n"
"`ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr "`ContainerRequestFilter` を使用して、サービスにロギング機能を追加してみましょう。 `ContainerRequestFilter` を実装して、 `@Provider` アノテーションをつけることで実現できます。"

#: _versions/main/guides/rest.adoc
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr "これで、RESTメソッドが呼び出されるたびに、リクエストがコンソールにログとして記録されるようになりました。"

#: _versions/main/guides/rest.adoc
msgid "A `ContainerResponseFilter` will also be called for <<exception-mapping, handled>> exceptions."
msgstr "`ContainerResponseFilter` は <<exception-mapping, handled>> 例外でも呼び出されます。"

#: _versions/main/guides/rest.adoc
msgid "Readers and Writers: mapping entities and HTTP bodies"
msgstr "リーダーとライター: マッピングエンティティーと HTTP ボディ"

#: _versions/main/guides/rest.adoc
msgid ""
"Whenever your endpoint methods return an object (or when they return a\n"
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`]\n"
"or link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`] with\n"
"an entity), Quarkus REST will look for a way to map that into an HTTP response body."
msgstr ""
"エンドポイントメソッドがオブジェクトを返すとき (または\n"
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`]\n"
"またはエンティティー付きの link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`] を返す場合)、Quarkus REST は、オブジェクトなどを HTTP レスポンス本文にマッピングする方法を探します。"

#: _versions/main/guides/rest.adoc
msgid ""
"Similarly, whenever your endpoint method takes an object as parameter, we will look for\n"
"a way to map the HTTP request body into that object."
msgstr "同様に、エンドポイントメソッドがオブジェクトをパラメーターとして受け取る場合は常に、HTTP リクエストの本文をそのオブジェクトにマッピングする方法を探します。"

#: _versions/main/guides/rest.adoc
msgid ""
"This is done via a pluggable system of link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`]\n"
"and link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`] interfaces,\n"
"which are responsible for defining which Java type they map from/to, for which media types,\n"
"and how they turn HTTP bodies to/from Java instances of that type."
msgstr "これは、link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`] と link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`] インターフェイスのプラグインシステムによって行われ、どの Java 型からどのメディアタイプへマッピングするか、またその型の Java インスタンスとどのように HTTP ボディをやり取りするかを定義する役割を持っています。"

#: _versions/main/guides/rest.adoc
msgid "For example, if we have our own `Cheese` type on our endpoint:"
msgstr "たとえば、エンドポイントに独自の `Cheese` 型がある場合:"

#: _versions/main/guides/rest.adoc
msgid ""
"Then we can define how to read and write it with our body reader/writers, annotated\n"
"with link:{jaxrsapi}/jakarta/ws/rs/ext/Provider.html[`@Provider`]:"
msgstr "次に、 link:{jaxrsapi}/jakarta/ws/rs/ext/Provider.html[`@Provider`] でアノテーションを付けたボディリーダー/ライターを使用して読み取りと書き込みの方法を定義できます:"

#: _versions/main/guides/rest.adoc
msgid ""
"If you want to get the most performance out of your writer, you can extend the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerMessageBodyWriter.html[`ServerMessageBodyWriter`]\n"
"instead of link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`]\n"
"where you will be able to use less reflection and bypass the blocking IO layer:"
msgstr ""
"ライターのパフォーマンスを最大限に高める場合は、link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`] ではなく\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerMessageBodyWriter.html[`ServerMessageBodyWriter`]\n"
"を拡張できます。こちらでは、リフレクションの使用を減らし、ブロッキング IO レイヤーをバイパスできます。"

#: _versions/main/guides/rest.adoc
msgid ""
"You can restrict which content-types your reader/writer apply to by adding\n"
"link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[`Consumes`]/link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`Produces`] annotations\n"
"on your provider class."
msgstr "プロバイダークラスに link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[`Consumes`]/link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`Produces`] アノテーションを追加すると、リーダー/ライターが適用するコンテンツタイプを制限することができます。"

#: _versions/main/guides/rest.adoc
msgid "Reader and Writer interceptors"
msgstr "リーダーおよびライターインターセプター"

#: _versions/main/guides/rest.adoc
msgid ""
"Just as you can intercept requests and responses, you can also intercept readers and writers, by\n"
"extending the link:{jaxrsapi}/jakarta/ws/rs/ext/ReaderInterceptor.html[`ReaderInterceptor`] or\n"
"link:{jaxrsapi}/jakarta/ws/rs/ext/WriterInterceptor.html[`WriterInterceptor`] on a class annotated with\n"
"link:{jaxrsapi}/jakarta/ws/rs/ext/Provider.html[`@Provider`]."
msgstr "リクエストとレスポンスをインターセプトするのと同様に、 link:{jaxrsapi}/jakarta/ws/rs/ext/ReaderInterceptor.html[ReaderInterceptor] または link:{jaxrsapi}/jakarta/ws/rs/ext/WriterInterceptor.html[WriterInterceptor] を拡張し、 link:{jaxrsapi}/jakarta/ws/rs/ext/Provider.html[@Provider] でアノテーションすることで、リーダーとライターもインターセプトすることができます。"

#: _versions/main/guides/rest.adoc
msgid "If we look at this endpoint:"
msgstr "このエンドポイントを見ると、次のようになります。"

#: _versions/main/guides/rest.adoc
msgid "We can add reader and writer interceptors like this:"
msgstr "次のようなリーダーとライターのインターセプターを追加できます。"

#: _versions/main/guides/rest.adoc
msgid "Quarkus REST and REST Client interactions"
msgstr "Quarkus REST と REST クライアントのインタラクション"

#: _versions/main/guides/rest.adoc
msgid ""
"In Quarkus, the Quarkus REST extension and xref:rest-client.adoc[the REST Client extension] share the same infrastructure.\n"
"One important consequence of this consideration is that they share the same list of providers (in the Jakarta REST meaning of the word)."
msgstr "Quarkusでは、Quarkus REST エクステンションと xref:rest-client.adoc[REST Clientエクステンション] は、同じインフラストラクチャを共有しています。この考慮の重要な結果 の1 つは、（Jakarta REST の意味での）プロバイダーのリストを共有することです。"

#: _versions/main/guides/rest.adoc
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls,\n"
"which might not be the desired behavior."
msgstr "例えば、 `WriterInterceptor` を宣言した場合、デフォルトではサーバーの呼び出しとクライアントの呼び出しの両方をインターセプトしますが、これは望ましい動作ではないかもしれません。"

#: _versions/main/guides/rest.adoc
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr "しかし、このデフォルトの動作を変更してプロバイダを制約することができます。"

#: _versions/main/guides/rest.adoc
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.SERVER)` アノテーションを追加することで、 *サーバー* コールのみを考慮します。"

#: _versions/main/guides/rest.adoc
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.CLIENT)` アノテーションを追加することで、 *クライアント* コールのみを考慮します。"

#: _versions/main/guides/rest.adoc
msgid "Parameter mapping"
msgstr "パラメーターマッピング"

#: _versions/main/guides/rest.adoc
#, fuzzy
msgid ""
"All <<request-parameters,Request Parameters>> can be declared as link:{jdkapi}/java/lang/String.html[`String`],\n"
"but also as any of the following types:"
msgstr "すべての xref:request-parameters[リクエストパラメータは] link:{jdkapi}/java/lang/String.html[String] として宣言することもできますが、 以下の型のいずれかとして宣言することもできます："

#: _versions/main/guides/rest.adoc
msgid ""
"Types for which a link:{jaxrsapi}/jakarta/ws/rs/ext/ParamConverter.html[`ParamConverter`] is available via a registered\n"
"link:{jaxrsapi}/jakarta/ws/rs/ext/ParamConverterProvider.html[`ParamConverterProvider`]."
msgstr "リンク先のタイプ: {jaxrsapi}/jakarta/ws/rs/ext/ParamConverter.html[`ParamConverter`] は、登録済みの link:{jaxrsapi}/jakarta/ws/rs/ext/ParamConverterProvider.html[`ParamConverterProvider`] から入手できます。"

#: _versions/main/guides/rest.adoc
msgid "Primitive types."
msgstr "プリミティブ型"

#: _versions/main/guides/rest.adoc
msgid "Types that have a constructor that accepts a single link:{jdkapi}/java/lang/String.html[`String`] argument."
msgstr "単一の link:{jdkapi}/java/lang/String.html[`String`] 引数を受け入れるコンストラクターを持つ型。"

#: _versions/main/guides/rest.adoc
msgid ""
"Types that have a static method named `valueOf` or `fromString` with a single link:{jdkapi}/java/lang/String.html[`String`] argument\n"
"that return an instance of the type. If both methods are present then `valueOf` will be used unless\n"
"the type is an `enum` in which case `fromString` will be used."
msgstr "link:{jdkapi}/java/lang/String.html[`String`] という引数を持ち、その型のインスタンスを返す `valueOf` または `fromString` という名前の静的メソッドを持っている型。もし両方のメソッドが存在する場合は、 `valueOf` が使用されます。ただし、その型が `enum` の場合は `fromString` が使用されます。"

#: _versions/main/guides/rest.adoc
#, fuzzy
msgid ""
"link:{jdkapi}/java/util/List.html[`List<T>`], link:{jdkapi}/java/util/Set.html[`Set<T>`], or\n"
"link:{jdkapi}/java/util/SortedSet.html[`SortedSet<T>`], where `T` satisfies 1, 3 or 4 above."
msgstr "link:{jdkapi}/java/util/List.html[List<T>] , link:{jdkapi}/java/util/Set.html[Set<T>] または link:{jdkapi}/java/util/SortedSet.html[SortedSet<T>] ここで、 `T` は上記1、3または4を満たします。"

#: _versions/main/guides/rest.adoc
#, fuzzy
msgid "For 3 and 4, constructor instantiation is prioritesed above method instantiation. Public, protected, and package private constructors and methods are supported for instantiation."
msgstr "3 と 4 では、コンストラクタのインスタンス化がメソッドのインスタンス化よりも優先されます。public、protected、package private のコンストラクタとメソッドのインスタンス化がサポートされています。"

#: _versions/main/guides/rest.adoc
msgid "The following example illustrates all those possibilities:"
msgstr "次の例は、これらすべての可能性を示しています。"

#: _versions/main/guides/rest.adoc
msgid "Separating Query parameter values"
msgstr "クエリーパラメーター値の分離"

#: _versions/main/guides/rest.adoc
msgid ""
"Normally a collection of `String` values is used to capture the values used in multiple occurrences of the same query parameter.\n"
"For example, for the following resource method:"
msgstr ""
"通常、 `String` 値のコレクションは、同じクエリーパラメーターが複数回出現する際に使用される値を取得するために使用されます。\n"
"たとえば、次のリソースメソッドの場合:"

#: _versions/main/guides/rest.adoc
msgid "and the following request:"
msgstr "以下のリクエストの場合:"

#: _versions/main/guides/rest.adoc
msgid "the `names` variable will contain both `foo` and `bar` and the response will be `hello foo bar`."
msgstr "`names` 変数には `foo` と `bar` の両方が含まれ、応答は `hello foo bar` になります。"

#: _versions/main/guides/rest.adoc
msgid "It is not uncommon however to need to convert a single query parameter into a collection of values based on some delimiting character. That is where the `@org.jboss.resteasy.reactive.Separator` annotation comes into play."
msgstr "ただし、何らかの区切り文字に基づいて、単一のクエリーパラメーターを、値のコレクションに変換する必要があることは珍しくありません。このような場合に、 `@org.jboss.resteasy.reactive.Separator` アノテーションが役立ちます。"

#: _versions/main/guides/rest.adoc
msgid "If we update the resource method to:"
msgstr "リソースメソッドを次のように更新します。"

#: _versions/main/guides/rest.adoc
msgid "and use the following request:"
msgstr "次のリクエストを使用します。"

#: _versions/main/guides/rest.adoc
msgid "then the response will be `hello foo bar`."
msgstr "応答は `hello foo bar` になります。"

#: _versions/main/guides/rest.adoc
msgid "Handling dates"
msgstr "日付の取り扱い"

#: _versions/main/guides/rest.adoc
msgid ""
"Quarkus REST supports the use of the implementations of `java.time.Temporal` (like `java.time.LocalDateTime`) as query, path, or form params.\n"
"Furthermore, it provides the `@org.jboss.resteasy.reactive.DateFormat` annotation, which can be used to set a custom expected pattern.\n"
"Otherwise, the JDK's default format for each type is used implicitly."
msgstr "Quarkus REST は、（ `java.time.LocalDateTime` のような） `java.time.Temporal` の実装をクエリー、パス、またはフォームのパラメーターとして使用することをサポートしています。さらに、 `@org.jboss.resteasy.reactive.DateFormat` アノテーションを提供し、これを使用してカスタムの期待パターンを設定することができます。指定しない場合は、JDKの各型のデフォルトフォーマットが暗黙的に使用されます。"

#: _versions/main/guides/rest.adoc
msgid "Preconditions"
msgstr "前提条件"

#: _versions/main/guides/rest.adoc
msgid ""
"https://tools.ietf.org/html/rfc7232[HTTP allows requests to be conditional], based on a number of\n"
"conditions, such as:"
msgstr "以下のようないくつかの条件の下で、link:https://tools.ietf.org/html/rfc7232[HTTPでは条件付きのリクエストが可能です] :"

#: _versions/main/guides/rest.adoc
msgid "Date of last resource modification"
msgstr "リソースの最終変更日"

#: _versions/main/guides/rest.adoc
msgid "A resource tag, similar to a hash code of the resource to designate its state or version"
msgstr "リソースの状態またはバージョンを指定するためのリソースのハッシュコードに似たリソースタグ"

#: _versions/main/guides/rest.adoc
msgid ""
"Let's see how you can do conditional request validation using the\n"
"link:{jaxrsapi}/jakarta/ws/rs/core/Request.html[`Request`] context object:"
msgstr "link:{jaxrsapi}/jakarta/ws/rs/core/Request.html[`Request`] コンテキストオブジェクトを使用して、条件付きリクエスト検証を行う方法を見てみましょう。"

#: _versions/main/guides/rest.adoc
msgid "When we call `GET /conditional` the first time, we will get this response:"
msgstr "`GET /conditional` を初めて呼び出すと、このようなレスポンスが返ってきます。"

#: _versions/main/guides/rest.adoc
msgid "So now if we want to check if we need to fetch a new version, we can make the following request:"
msgstr "これで、新しいバージョンを取得する必要があるかどうかを確認したい場合は、次のようなリクエストを行うことができます:"

#: _versions/main/guides/rest.adoc
msgid "And we would get the following response:"
msgstr "そして、次のようなレスポンスが返ってきます:"

#: _versions/main/guides/rest.adoc
msgid ""
"Because the resource has not been modified since that date, this saves on sending the resource but can also help your users detect the concurrent modification.\n"
"For example, one client wants to update the resource, but another user has modified it since.\n"
"You can follow the previous `GET` request with this update:"
msgstr "なぜなら、そのリソースはその日以降に変更されていないからです。これはリソースを送信する手間を省くだけでなく、ユーザーが同時に変更されたことを検出するのにも役立ちます。たとえば、あるクライアントがリソースを更新したいが、別のユーザーがその後にリソースを変更したとしましょう。この場合、前の `GET` リクエストに続いて、この更新を行うことができます。"

#: _versions/main/guides/rest.adoc
msgid ""
"And if some other user has modified the resource between your `GET` and your `PUT` you would\n"
"get this answer back:"
msgstr "また、他のユーザーが GET と PUT の間のリソースを変更した場合は、次の回答が返されます。"

#: _versions/main/guides/rest.adoc
msgid "Negotiation"
msgstr "ネゴシエーション"

#: _versions/main/guides/rest.adoc
msgid ""
"One of the main ideas of REST (https://tools.ietf.org/html/rfc7231#section-3.4[and HTTP]) is that\n"
"your resource is independent of its representation, and\n"
"that both the client and server are free to represent their resources in as many media types as\n"
"they want. This allows the server to declare support for multiple representations and let the\n"
"client declare which ones it supports and get served something appropriate."
msgstr "REST (https://tools.ietf.org/html/rfc7231#section-3.4[および HTTP]) の主な考え方の 1 つは、リソースはその表現に依存せず、クライアントとサーバーの両方が、望むだけ多くのメディアタイプでリソースを自由に表現できることです。これにより、サーバーは複数の表現のサポートを宣言し、クライアントはどの表現をサポートするかを宣言し、適切なものを提供されるようにすることができます。"

#: _versions/main/guides/rest.adoc
msgid "The following endpoint supports serving cheese in plain text or JSON:"
msgstr "次のエンドポイントは、プレーンテキストまたは JSON での cheese の提供をサポートしています。"

#: _versions/main/guides/rest.adoc
msgid ""
"The user will be able to select which representation it gets with the\n"
"link:{httpspec}#section-5.3.2[`Accept`] header, in the case of JSON:"
msgstr "JSON の場合、ユーザーは link:{httpspec}#section-5.3.2[`Accept`] ヘッダーでどの表現を取得するかを選択することができます。"

#: _versions/main/guides/rest.adoc
msgid "And for text:"
msgstr "そしてテキストの場合:"

#: _versions/main/guides/rest.adoc
msgid "Similarly, you can `PUT` two different representations. JSON:"
msgstr "同様に、2 つの異なる表現を PUT することができます。JSON:"

#: _versions/main/guides/rest.adoc
msgid "Or plain text:"
msgstr "またはプレーンテキスト:"

#: _versions/main/guides/rest.adoc
msgid "HTTP Compression"
msgstr "HTTP 圧縮"

#: _versions/main/guides/rest.adoc
msgid ""
"The body of an HTTP response is not compressed by default.\n"
"You can enable the HTTP compression support by means of `quarkus.http.enable-compression=true`."
msgstr "HTTP レスポンスのボディは、デフォルトでは圧縮されていません。 `quarkus.http.enable-compression=true` を使用して HTTP 圧縮サポートを有効にできます。"

#: _versions/main/guides/rest.adoc
msgid "If compression support is enabled then the response body is compressed if:"
msgstr "圧縮サポートが有効であれば、以下の場合にレスポンスボディが圧縮されます。"

#: _versions/main/guides/rest.adoc
msgid "the resource method is annotated with `@io.quarkus.vertx.http.Compressed`, or"
msgstr "ルートメソッドが `@io.quarkus.vertx.http.Compressed` でアノテーションされている、または"

#: _versions/main/guides/rest.adoc
msgid "the `Content-Type` header is set and the value is a compressed media type as configured via `quarkus.http.compress-media-types`."
msgstr "`Content-Type` ヘッダーが設定されており、その値は `quarkus.http.compress-media-types` を介して設定された圧縮メディアタイプである。"

#: _versions/main/guides/rest.adoc
msgid "The response body is never compressed if:"
msgstr "次の場合、レスポンスボディは圧縮されません。"

#: _versions/main/guides/rest.adoc
msgid "the resource method is annotated with `@io.quarkus.vertx.http.Uncompressed`, or"
msgstr "ルートメソッドが `@io.quarkus.vertx.http.Uncompressed` でアノテーションされている、または"

#: _versions/main/guides/rest.adoc
msgid "the `Content-Type` header is not set."
msgstr "`Content-Type` ヘッダーが設定されていない。"

#: _versions/main/guides/rest.adoc
msgid "By default, the following list of media types is compressed: `text/html`, `text/plain`, `text/xml`, `text/css`, `text/javascript`, `application/javascript`, `application/json`, `application/graphql+json` and `application/xhtml+xml`."
msgstr "デフォルトでは、以下のメディアタイプのリストが圧縮されます： `text/html` `text/plain` , `text/xml` , `text/css` , `text/javascript` , `application/javascript` , `application/json` , `application/graphql+json` および `application/xhtml+xml` 。"

#: _versions/main/guides/rest.adoc
msgid "If the client does not support HTTP compression then the response body is not compressed."
msgstr "クライアントが HTTP 圧縮をサポートしていない場合、レスポンスボディは圧縮されません。"

#: _versions/main/guides/rest.adoc
msgid "Include/Exclude Jakarta REST classes"
msgstr "Jakarta RESTクラスのインクルード／エクスクルード"

#: _versions/main/guides/rest.adoc
msgid "Using Build time conditions"
msgstr "ビルドタイム条件の使用"

#: _versions/main/guides/rest.adoc
msgid ""
"Quarkus enables the inclusion or exclusion of Jakarta REST Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.\n"
"Thus, the various Jakarta REST classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these Jakarta REST classes should be included."
msgstr "Quarkusでは、CDI Beanと同様に、ビルド時の条件によって、Jakarta RESTリソース、プロバイダ、フィーチャーを直接取り込んだり除外したりすることができます。したがって、さまざまなJakarta RESTクラスにプロファイル条件（ `@io.quarkus.arc.profile.IfBuildProfile` または `@io.quarkus.arc.profile.UnlessBuildProfile` ）やプロパティ条件（ `io.quarkus.arc.properties.IfBuildProperty` または `io.quarkus.arc.properties.UnlessBuildProperty` ）をアノテーションして、ビルド時にQuarkusに対して、どのような条件の下でJakarta RESTクラスを含めるべきかを示すことができます。"

#: _versions/main/guides/rest.adoc
msgid "In the following example, Quarkus includes the `ResourceForApp1Only` Resource class if and only if the build profile `app1` has been enabled."
msgstr "次の例では、Quarkusは、ビルドプロファイル `app1` が有効になっている場合に限り、 `ResourceForApp1Only` リソースを含めます。"

#: _versions/main/guides/rest.adoc
msgid "Please note that if a Jakarta REST Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the Jakarta REST Application."
msgstr "Jakarta REST Applicationが検出され、メソッド `getClasses()` 、 `getSingletons()` がオーバーライドされている場合、Quarkusはビルド時の条件を無視し、Jakarta REST Applicationで定義されているもののみを考慮することに注意してください。"

#: _versions/main/guides/rest.adoc
msgid "Using a runtime property"
msgstr "実行時プロパティの使用"

#: _versions/main/guides/rest.adoc
msgid "Quarkus can also conditionally disable Jakarta REST Resources based on the value of runtime properties using the `@io.quarkus.resteasy.reactive.server.EndpointDisabled` annotation."
msgstr "Quarkusでは、 `@io.quarkus.resteasy.reactive.server.EndpointDisabled` アノテーションを使用して、実行時プロパティの値に基づいてjakarta RESTリソースを条件付きで無効化することもできます。"

#: _versions/main/guides/rest.adoc
msgid "In the following example, Quarkus will exclude `RuntimeResource` at runtime if the application has `some.property` configured to `\"disable\"`."
msgstr "次の例では、アプリケーションで `some.property` が `\"disable\"` に設定されている場合、Quarkus は実行時に `RuntimeResource` を除外します。"

#: _versions/main/guides/rest.adoc
msgid "This feature does not work when using native build."
msgstr "この機能はネイティブビルドでは動作しません。"

#: _versions/main/guides/rest.adoc
msgid "REST Client"
msgstr "RESTクライアント"

#: _versions/main/guides/rest.adoc
msgid "In addition to the Server side, Quarkus REST comes with a new MicroProfile REST Client implementation that is non-blocking at its core."
msgstr "Quarkus RESTには、サーバー側だけでなく、新しいMicroProfile RESTクライアントの実装も含まれています。"

#: _versions/main/guides/rest.adoc
msgid "Please note that the `quarkus-resteasy-client` extension may not be used with Quarkus REST, use `quarkus-rest-client` instead."
msgstr "`quarkus-resteasy-client` エクステンションモジュールは Quarkus REST では使用できませんので、代わりに `quarkus-rest-client` を使用してください。"

#: _versions/main/guides/rest.adoc
msgid "See the xref:rest-client.adoc[REST Client Guide] for more information about the REST client."
msgstr "REST クライアントの詳細については、 xref:rest-client.adoc[REST クライアントガイド] を参照してください。"

#: _versions/main/guides/rest.adoc
#, fuzzy
msgid "Quarkus REST Configuration Reference"
msgstr "Quarkus REST 設定リファレンス"

#: _versions/main/guides/rest.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/main/guides/rest.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span> ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは、実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
