msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: doc-l10n-kit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/main/docs/src/main/asciidoc
#. type: Title =
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "Getting Started with SmallRye Stork"
msgstr "SmallRye Stork入門"

#: _versions/main/guides/stork.adoc
msgid ""
"The essence of distributed systems resides in the interaction between services.\n"
"In modern architecture, you often have multiple instances of your service to share the load or improve the resilience by redundancy.\n"
"But how do you select the best instance of your service?\n"
"That's where https://smallrye.io/smallrye-stork[SmallRye Stork] helps.\n"
"Stork is going to choose the most appropriate instance.\n"
"It offers:"
msgstr "分散システムの本質は、サービス間の相互作用にあります。現代のアーキテクチャでは、負荷を共有したり、冗長性によって回復力を高めたりするために、サービスの複数のインスタンスを持つことがよくあります。しかし、サービスの最適なインスタンスをどのように選択すればよいのでしょうか？そこで、 link:https://smallrye.io/smallrye-stork[SmallRye Stork]がお役に立ちます。Storkが最適なインスタンスを選択してくれます。次の機能を提供します:"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Extensible service discovery mechanisms"
msgstr "拡張可能なサービスディスカバリーメカニズム"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Built-in support for Consul and Kubernetes"
msgstr "ConsulとKubernetesの組込サポート"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Customizable client load-balancing strategies"
msgstr "カスタマイズ可能なクライアントロードバランシング戦略"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "In this guide, we will build an application composed of:"
msgstr "このガイドでは、次のような構成のアプリケーションを構築します。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "A simple blue service exposed on port 9000"
msgstr "9000番ポートで公開されるシンプルなブルーサービス"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "A simple red service exposed on port 9001"
msgstr "9001番ポートで公開されるシンプルなレッドサービス"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "A REST Client calling the blue or red service (the selection is delegated to Stork)"
msgstr "ブルーまたはレッドのサービスを呼び出すRESTクライアント（選択はStorkに委ねられている）"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "A REST endpoint using the REST client and calling the services"
msgstr "RESTクライアントを使用し、サービスを呼び出すRESTエンドポイント"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "The blue and red services are registered in https://www.consul.io/[Consul]."
msgstr "ブルーとレッドのサービスは link:https://www.consul.io/[Consul]に登録されています。"

#: _versions/main/guides/stork.adoc
msgid ""
"For the sake of simplicity, everything (except Consul) will be running in the same Quarkus application.\n"
"Of course, each component will run in its own process in the real world."
msgstr "簡略化のため、（Consulを除く）すべてのコンポーネントは、同じQuarkusアプリケーション内で実行されます。もちろん、実際には各コンポーネントはそれぞれのプロセスで実行されます。"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#: _versions/main/guides/stork.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the applications step by step.\n"
"However, you can go right to the completed example."
msgstr "次のセクションの指示に従って、段階的にアプリケーションを作成することをお勧めします。しかし、完成した例をすぐに見ることもできます。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "The solution is located in the `stork-quickstart` link:{quickstarts-tree-url}/stork-quickstart[directory]."
msgstr "ソリューションは `stork-quickstart` link:{quickstarts-tree-url}/stork-quickstart[ディレクトリ] にあります。"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "Discovery and selection"
msgstr "ディスカバリーとセレクション"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Before going further, we need to discuss discovery vs. selection."
msgstr "その前に、ディスカバリーとセレクションについて説明する必要があります。"

#: _versions/main/guides/stork.adoc
msgid ""
"Service discovery is the process of locating service instances.\n"
"It produces a list of service instances that is potentially empty (if no service matches the request) or contains multiple service instances."
msgstr "サービスディスカバリーとは、サービスインスタンスを探すプロセスのことです。サービス・ディスカバリーでは、サービス・インスタンスのリストが作成されます。このリストは、（リクエストにマッチするサービスがない場合）空の可能性もあれば、複数のサービス・インスタンスを含む可能性もあります。"

#: _versions/main/guides/stork.adoc
msgid ""
"Service selection, also called load-balancing, chooses the best instance from the list returned by the discovery process.\n"
"The result is a single service instance or an exception when no suitable instance can be found."
msgstr "サービスセレクションはロードバランスとも呼ばれ、ディスカバリープロセスから返されたリストの中から最適なインスタンスを選択します。その結果、1つのサービスインスタンスになるか、適切なインスタンスが見つからない場合は例外となります。"

#: _versions/main/guides/stork.adoc
msgid ""
"Stork handles both discovery and selection.\n"
"However, it does not handle the communication with the service but only provides a service instance.\n"
"The various integrations in Quarkus extract the location of the service from that service instance."
msgstr "Storkはディスカバリーとセレクションの両方を扱います。しかし、サービスとの通信は処理せず、サービスインスタンスを提供するだけです。Quarkusの様々な統合機能は、そのサービスインスタンスからサービスの場所を抽出します。"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "Bootstrapping the project"
msgstr "プロジェクトのブートストラップ"

#: _versions/main/guides/stork.adoc
msgid "Create a Quarkus project importing the quarkus-rest-client, quarkus-rest, and quarkus-smallrye-stork extensions using your favorite approach:"
msgstr "quarkus-rest-client、quarkus-rest、quarkus-smallrye-storkの各エクステンションをインポートして、Quarkusプロジェクトを作成します："

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "In the generated project, also add the following dependencies:"
msgstr "生成されたプロジェクトに、以下の依存関係を追加します:"

#. type: Block title
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "pom.xml"
msgstr "pom.xml"

#. type: Block title
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/main/guides/stork.adoc
msgid ""
"`stork-service-discovery-consul` provides an implementation of service discovery for Consul.\n"
"`smallrye-mutiny-vertx-consul-client` is a Consul client which we will use to register our services in Consul."
msgstr "`stork-service-discovery-consul` はConsulのサービスディスカバリーの実装を提供しています。 `smallrye-mutiny-vertx-consul-client` はConsulのクライアントで、Consulにサービスを登録するために使用します。"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "The Blue and Red services"
msgstr "ブルーサービスとレッドサービス"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Let's start with the very beginning: the service we will discover, select and call."
msgstr "一番最初から始めましょう:私たちが発見（ディスカバリー）し、選択（セレクション）し、呼び出すサービスです。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Create the `src/main/java/org/acme/services/BlueService.java` with the following content:"
msgstr "以下の内容で `src/main/java/org/acme/services/BlueService.java` を作成してください。"

#: _versions/main/guides/stork.adoc
msgid ""
"It creates a new HTTP server (using Vert.x) and implements our simple service when the application starts.\n"
"For each HTTP request, it sends a response with \"Hello from Blue!\" as the body."
msgstr "アプリケーションの起動時に、新しいHTTPサーバー（Vert.xを使用）を作成し、シンプルなサービスを実装します。各HTTPリクエストに対して、\"Hello from Blue!\"をボディとするレスポンスを送信します。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Following the same logic, create the `src/main/java/org/acme/services/RedService.java` with the following content:"
msgstr "同じ要領で、以下の内容の `src/main/java/org/acme/services/RedService.java` を作成します。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "This time, it writes \"Hello from Red!\"."
msgstr "今回は\"Hello from Red!\"と書かれています。"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "Service registration in Consul"
msgstr "Consulでのサービス登録"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Now that we have implemented our services, we need to register them into Consul."
msgstr "サービスの実装が完了したので、Consulに登録する必要があります。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Stork is not limited to Consul and integrates with other service discovery mechanisms."
msgstr "StorkはConsulに限らず、他のサービスディスカバリーメカニズムとも統合されています。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Create the `src/main/java/org/acme/services/Registration.java` file with the following content:"
msgstr "`src/main/java/org/acme/services/Registration.java` ファイルを以下の内容で作成します。"

#: _versions/main/guides/stork.adoc
msgid ""
"When the application starts, it connects to Consul using the Vert.x Consul Client and registers our two instances.\n"
"Both registration uses the same name (`my-service`), but different ids to indicate that it's two instances of the same _service_."
msgstr "アプリケーションが起動すると、Vert.x Consul Clientを使ってConsulに接続し、2つのインスタンスを登録します。どちらの登録も同じ名前( `my-service` )を使用していますが、同じ _サービス_ の2つのインスタンスであることを示すために異なるIDを使用しています。"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "The REST Client interface and the front end API"
msgstr "RESTクライアントインターフェースとフロントエンドAPI"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "So far, we didn't use Stork; we just scaffolded the services we will be discovering, selecting, and calling."
msgstr "ここまでは、Storkを使わずに、これから発見するサービス、選択するサービス、呼び出すサービスの骨組を構築してきました。"

#: _versions/main/guides/stork.adoc
msgid ""
"We will call the services using the REST Client.\n"
"Create the `src/main/java/org/acme/MyService.java` file with the following content:"
msgstr ""
"REST Clientを使ってサービスを呼び出します。\n"
"以下の内容で `src/main/java/org/acme/MyService.java` ファイルを作成します："

#: _versions/main/guides/stork.adoc
msgid ""
"It's a straightforward REST client interface containing a single method. However, note the `baseUri` attribute.\n"
"It starts with `stork://`.\n"
"It instructs the REST client to delegate the discovery and selection of the service instances to Stork.\n"
"Notice the `my-service` part in the URL.\n"
"It is the service name we will be using in the application configuration."
msgstr "これは、1つのメソッドを含む単純なRESTクライアントインターフェイスです。ただし、 `baseUri` 属性に注意してください。 `stork://` で始まっています。これは、RESTクライアントがサービスインスタンスのディスカバリーとセレクションをStorkに委ねることを指示しています。また、URLの `my-service` にもご注目ください。これは、アプリケーションの設定で使用するサービス名です。"

#: _versions/main/guides/stork.adoc
msgid ""
"It does not change how the REST client is used.\n"
"Create the `src/main/java/org/acme/FrontendApi.java` file with the following content:"
msgstr "RESTクライアントの使用方法を変更するものではありません。以下の内容で `src/main/java/org/acme/FrontendApi.java` ファイルを作成します。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "It injects and uses the REST client as usual."
msgstr "通常通り、RESTクライアントを注入して使用します。"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "Stork Filter"
msgstr "Stork Filter"

#: _versions/main/guides/stork.adoc
msgid ""
"The `baseUri` configured in the REST client will be processed by `StorkClientRequestFilter` class, this is a https://quarkus.io/specs/jaxrs/2.1/index.html#filters[Jakarta REST filter].\n"
"If you need to process the metadata associated with a message: HTTP headers, query parameters, media type, and other metadata, you can implement another filter to configure what you need.\n"
"Let’s implement a custom filter to add logging capability to our service. We create `CustomLoggingFilter` and annotating it with the @Provider annotation:"
msgstr "RESTクライアントで設定された `baseUri` は、 `StorkClientRequestFilter` クラスで処理されます。これは link:https://quarkus.io/specs/jaxrs/2.1/index.html#filters[Jakarta REST フィルタ] です。メッセージに関連するメタデータを処理する必要がある場合：HTTPヘッダー、クエリパラメーター、メディアタイプ、その他のメタデータなど、メッセージに関連するメタデータを処理する必要がある場合は、別のフィルターを実装して必要なものを構成することができます。それでは、サービスにロギング機能を追加するために、カスタムフィルターを実装してみましょう。 `CustomLoggingFilter` を作成し、@Provider アノテーションを付けます："

#: _versions/main/guides/stork.adoc
msgid ""
"The order in which filters are executed is defined by https://quarkus.io/specs/jaxrs/2.1/index.html#priorities[Priorities].\n"
"Note that `CustomLoggingFilter` is using a default value, so the user-level priority and the `StorkClientRequestFilter` uses the security authentication filter priority. This means that `StorkClientRequestFilter` will be executed before our `CustomLoggingFilter`.\n"
"Use `@Priority` annotation to change this behaviour."
msgstr "フィルタの実行順序は、 https://quarkus.io/specs/jaxrs/2.1/index.html#priorities[プロパティ] で定義されます。 `CustomLoggingFilter` はデフォルト値を使用しているので、ユーザーレベルの優先順位、 `StorkClientRequestFilter` はセキュリティ認証フィルタの優先順位を使用していることに注意してください。これは、 `StorkClientRequestFilter` が `CustomLoggingFilter` の前に実行されることを意味します。この挙動を変更するには、 `@Priority` アノテーションを使用します。"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "Stork configuration"
msgstr "Stork設定"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "The system is almost complete. We only need to configure Stork and the `Registration` bean."
msgstr "システムはほぼ完成です。あとはStorkと `Registration` Beanを設定するだけです。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "In the `src/main/resources/application.properties`, add:"
msgstr "`src/main/resources/application.properties` に以下を追加します:"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "The first two lines provide the Consul location used by the `Registration` bean."
msgstr "最初の2行は、 `Registration` Beanが使用するConsulのロケーションを提供します。"

#: _versions/main/guides/stork.adoc
msgid ""
"The other properties are related to Stork.\n"
"`stork.my-service.service-discovery` indicates which type of service discovery we will be using to locate the `my-service` service.\n"
"In our case, it's `consul`.\n"
"`quarkus.stork.my-service.service-discovery.consul-host` and `quarkus.stork.my-service.service-discovery.consul-port` configures the access to Consul.\n"
"Finally, `quarkus.stork.my-service.load-balancer.type` configures the service selection.\n"
"In our case, we use a `round-robin`."
msgstr "`stork.my-service.service-discovery` は、 `my-service` サービスの検索に使用するサービスディスカバリーのタイプを示しています。 `consul` `stork.my-service.service-discovery.consul-host` と `stork.my-service.service-discovery.consul-port` は Consul へのアクセスを設定します。最後に、 `stork.my-service.load-balancer` は、サービスのセレクションを設定します。今回のケースでは、 `round-robin` を使用します。"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "Running the application"
msgstr "アプリケーションの実行"

#: _versions/main/guides/stork.adoc
msgid ""
"We're done!\n"
"So, let's see if it works."
msgstr "できました！では、実際に動くかどうか見てみましょう。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "First, start Consul:"
msgstr "まず、Consulを起動します:"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "If you start Consul differently, do not forget to edit the application configuration."
msgstr "Consulを別の方法で起動する場合は、アプリケーションの設定を編集することを忘れないでください。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "Then, package the application:"
msgstr "次に、アプリケーションをパッケージ化します:"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "And run it:"
msgstr "そして実行します:"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "In another terminal, run:"
msgstr "別の端末で、次を実行します。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "The responses alternate between `Hello from Red!` and `Hello from Blue!`."
msgstr "応答は `Hello from Red!` と `Hello from Blue!` の間で交互に行われます。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "You can compile this application into a native executable:"
msgstr "このアプリケーションをネイティブ実行可能ファイルにコンパイルして、起動することができます。"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "And start it with:"
msgstr "次のように起動します:"

#. type: Title ==
#: _versions/main/guides/stork.adoc
#, no-wrap
msgid "Going further"
msgstr "さらに詳しく"

#: _versions/main/guides/stork.adoc
msgid ""
"This guide has shown how to use SmallRye Stork to discover and select your services.\n"
"You can find more about Stork in:"
msgstr "このガイドでは、SmallRye Storkを使ってサービスを発見し、選択する方法を紹介しました。Storkについては、以下のページで詳しく紹介しています:"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "the xref:stork-reference.adoc[Stork reference guide],"
msgstr "xref:stork-reference.adoc[Stork リファレンスガイド],"

#. type: Plain text
#: _versions/main/guides/stork.adoc
msgid "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."
msgstr "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."
