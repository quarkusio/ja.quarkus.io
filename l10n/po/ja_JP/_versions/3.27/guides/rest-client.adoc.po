msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/rest-client.adoc
msgid "Using the REST Client"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"This guide explains how to use the REST Client in order to interact with REST APIs.\n"
"REST Client is the REST Client implementation compatible with Quarkus REST (formerly RESTEasy Reactive)."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"If your application uses a client and exposes REST endpoints, please use xref:rest.adoc[Quarkus REST]\n"
"for the server part."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The solution is located in the `rest-client-quickstart` link:{quickstarts-tree-url}/rest-client-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "the `rest-jackson` extension for the REST server support. Use `rest` instead if you do not wish to use Jackson;"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "the `rest-client-jackson` extension for the REST client support. Use `rest-client` instead if you do not wish to use Jackson"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `rest-client-jackson` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Setting up the model"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.\n"
"Our first order of business is to set up the model we will be using, in the form of a `Extension` POJO."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Create the interface"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Using the REST Client is as simple as creating an interface using the proper Jakarta REST and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The purpose of the annotations in the code above is the following:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for\n"
"CDI injection as a REST Client"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`@Path`, `@GET` and `@QueryParam` are the standard Jakarta REST annotations used to define how to access the service"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"When the `quarkus-rest-client-jackson` extension is installed, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via `@Produces` or `@Consumes` annotations."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of Jakarta REST providers (which can be seen as converters) included in the native executable."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"The `getById` method above is a blocking call. It should not be invoked on the event loop.\n"
"The <<async-support>> section describes how to make non-blocking calls."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Query Parameters"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"The easiest way to specify a query parameter is to annotate a client method parameter with the `@QueryParam` or the `@RestQuery`.\n"
"The `@RestQuery` is equivalent of the `@QueryParam`, but with optional name. Additionally, it can be also used to pass query parameters\n"
"as a `Map`, which is convenient if parameters are not known in advance."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
#, fuzzy
msgid "@RestQuery will include parameter with key `name`"
msgstr "RestQueryには、キーとなるパラメータが含まれます。 `name`"

#: _versions/3.27/guides/rest-client.adoc
msgid "Each `Map` entry represents exactly one query parameter"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`MultivaluedMap` allows you to send array values"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Using @ClientQueryParam"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"Another way to add query parameters to a request is to use `@io.quarkus.rest.client.reactive.ClientQueryParam` on either the REST client interface or a specific method of the interface.\n"
"The annotation can specify the query parameter name while the value can either be a constant, a configuration property or it can be determined by invoking a method."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The following example shows the various possible usages:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"By placing `@ClientQueryParam` on the interface, we ensure that `my-param` will be added to all requests of the client.\n"
"Because we used the `${...}` syntax, the actual value of the parameter will be obtained using the `my.property-value` configuration property."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "When `getWithOtherParam` is called, in addition to the `my-param` query parameter, `some-other-param` with the value of `other` will also be added."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "when `getFromMethod` is called, in addition to the `my-param` query parameter, `param-from-method` with the value of `test` (because that's what the `withParam` method returns when invoked with `param-from-method`) will also be added."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"Note that if an interface method contains an argument annotated with `@QueryParam`, that argument will take\n"
"priority over anything specified in any `@ClientQueryParam` annotation."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientQueryParam.html[`@ClientQueryParam`]."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Form Parameters"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Form parameters can be specified using `@RestForm` (or `@FormParam`) annotations:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Using @ClientFormParam"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Form parameters can also be specified using `@ClientFormParam`, similar to `@ClientQueryParam`:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "More information about this annotation can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus/quarkus-rest-client/latest/io/quarkus/rest/client/reactive/ClientFormParam.html[`@ClientFormParam`]."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Path Parameters"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of\n"
"(or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in the example below."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Dynamic base URLs"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The REST client allows for a per invocation override of the base URL using the `io.quarkus.rest.client.reactive.Url` annotation."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Here is a simple example:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "When the `url` parameter is non-null, it will override the base URL that is configured for the client (the default base URL configuration is still mandatory)."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Sending large payloads"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The REST Client is capable of sending arbitrarily large HTTP bodies without buffering the contents in memory, if one of the following types is used:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`InputStream`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`Multi<io.vertx.mutiny.core.buffer.Buffer>`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Furthermore, the client can also send arbitrarily large files if one of the following types is used:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`File`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`Path`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Getting other response properties"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Using RestResponse"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"If you need to get more properties of the HTTP response than just the body, such as the status code\n"
"or headers, you can make your method return `org.jboss.resteasy.reactive.RestResponse` from a method.\n"
"An example of this could look like:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"You can also use the Jakarta REST type link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`] but it is\n"
"not strongly typed to your entity."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Create the Jakarta REST resource"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "There are two interesting parts in this listing:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "the client stub is injected with the `@RestClient` annotation instead of the usual CDI `@Inject`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"`org.jboss.resteasy.reactive.RestResponse` used as effective way of getting response properties via RestResponse directly from RestClient,\n"
"as described in <<Using RestResponse>>"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Create the configuration"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.\n"
"The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"Having this configuration means that all requests performed using `org.acme.rest.client.ExtensionsService` will use `https://stage.code.quarkus.io/api` as the base URL.\n"
"Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-rest-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use different configuration root than the fully qualified name of your interface."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Setting the base URL of the client is **mandatory**, however the REST Client supports per-invocation overrides of the base URL using the `@io.quarkus.rest.client.reactive.Url` annotation."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Trusting all certificates and Disabling SSL hostname verification"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "This properties set should not be used in production."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"You can configure TLS connection of specific REST client to trust all certificates and disable the hostname verification using tls extension.\n"
"First of all, you should configure tls configuration bucket."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "To trust all certificates:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "To disable SSL hostname verification:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Finally, lets configure our REST client with apropriate tls configuration name:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "HTTP/2 Support"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "HTTP/2 is disabled by default in REST Client. If you want to enable it, you can set:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Alternatively, you can enable the Application-Layer Protocol Negotiation (alpn) TLS extension and the client will negotiate which HTTP version to use over the ones compatible by the server. By default, it will try to use HTTP/2 first and if it's not enabled, it will use HTTP/1.1. If you want to enable it, you can set:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Programmatic client creation with QuarkusRestClientBuilder"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"Instead of annotating the client with `@RegisterRestClient`, and injecting\n"
"a client with `@RestClient`, you can also create REST Client programmatically.\n"
"You do that with the `QuarkusRestClientBuilder`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "With this approach the client interface could look as follows:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "And the service as follows:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The `QuarkusRestClientBuilder` interface is a Quarkus-specific API to programmatically create clients with additional configuration options. Otherwise, you can also use the `RestClientBuilder` interface from the Microprofile API:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Use Custom HTTP Options"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The REST Client internally uses https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClient.html[the Vert.x HTTP Client] to make the network connections. The REST Client extensions allows configuring some settings via properties, for example:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`quarkus.rest-client.client-prefix.connect-timeout` to configure the connect timeout in milliseconds."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`quarkus.rest-client.client-prefix.max-redirects` to limit the number of redirects."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "However, there are many more options within the Vert.x HTTP Client to configure the connections. See all the options in the Vert.x HTTP Client Options API in https://vertx.io/docs/apidocs/io/vertx/core/http/HttpClientOptions.html[this link]."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "To fully customize the Vert.x HTTP Client instance that the REST Client is internally using, you can provide your custom HTTP Client Options instance via CDI or when programmatically creating your client."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Let's see an example about how to provide the HTTP Client Options via CDI:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Now, all the REST Clients will be using your custom HTTP Client Options."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Another approach is to provide the custom HTTP Client options when creating the client programmatically:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "the client will use the registered HTTP Client options over the HTTP Client options provided via CDI if any."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Redirection"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A HTTP server can redirect a response to another location by sending a response with a status code that starts with \"3\" and a HTTP header \"Location\" holding the URL to be redirected to. When the REST Client receives a redirection response from a HTTP server, it won't automatically perform another request to the new location. We can enable the automatic redirection in REST Client by adding the \"follow-redirects\" property:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`quarkus.rest-client.follow-redirects` to enable redirection for all REST clients."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`quarkus.rest-client.<client-prefix>.follow-redirects` to enable redirection for a specific REST client."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "If this property is true, then REST Client will perform a new request that it receives a redirection response from the HTTP server."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Additionally, we can limit the number of redirections using the property \"max-redirects\"."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "One important note is that according to the https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] specs, by default the redirection will only happen for GET or HEAD methods. However, in REST Client, you can provide your custom redirect handler to enable redirection on POST or PUT methods, or to follow a more complex logic, via either using the `@ClientRedirectHandler` annotation, CDI or programmatically when creating your client."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Let's see an example about how to register your own custom redirect handler using the `@ClientRedirectHandler` annotation:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The \"alwaysRedirect\" redirect handler will only be used by the specified REST Client which in this example is the \"ExtensionsService\" client."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Alternatively, you can also provide a custom redirect handler for all your REST Clients via CDI:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Now, all the REST Clients will be using your custom redirect handler."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Another approach is to provide it programmatically when creating the client:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "the client will use the registered redirect handler over the redirect handler provided via CDI if any."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Update the test"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"Next, we need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the test to:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Async Support"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"To get the full power of the reactive nature of the client, you can use the non-blocking flavor of REST Client extension,\n"
"which comes with support for `CompletionStage` and `Uni`.\n"
"Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"Please note that since the invocation is now non-blocking, the `idAsync` method will be invoked on the event loop,\n"
"i.e. will not get offloaded to a worker pool thread and thus reducing hardware resource utilization.\n"
"See xref:rest.adoc#execution-model[Quarkus REST execution model] for more details."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The `Uni` version is very similar:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The `ExtensionsResource` becomes:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Mutiny"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"The previous snippet uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"When returning a `Uni`, every _subscription_ invokes the remote service.\n"
"It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"If you use a `CompletionStage`, you would need to call the service's method to retry.\n"
"This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n"
"More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Server-Sent Event (SSE) support"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Consuming SSE events is possible simply by declaring the result type as a `io.smallrye.mutiny.Multi`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The simplest example is:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "All the IO involved in streaming the SSE results is done in a non-blocking manner."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Results are not limited to strings - for example when the server returns JSON payload for each event, Quarkus automatically deserializes it into the generic type used in the `Multi`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Users can also access the entire SSE event by using the `org.jboss.resteasy.reactive.client.SseEvent` type."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A simple example where the event payloads are `Long` values is the following:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Filtering out events"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"On occasion, the stream of SSE events may contain some events that should not be returned by the client - an example of this is having the server send heartbeat events in order to keep the underlying TCP connection open.\n"
"The REST Client supports filtering out such events by providing the `@org.jboss.resteasy.reactive.client.SseEventFilter`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Here is an example of filtering out heartbeat events:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Custom headers support"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "There are a few ways in which you can specify custom headers for your REST calls:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "by registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `@RegisterClientHeaders` annotation"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "by programmatically registering a `ClientHeadersFactory` or a `ReactiveClientHeadersFactory` with the `QuarkusRestClientBuilder.clientHeadersFactory(factory)` method"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "by specifying the value of the header with `@ClientHeaderParam`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "by specifying the value of the header by `@HeaderParam`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The code below demonstrates how to use each of these techniques:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "There can be only one `ClientHeadersFactory` per class. With it, you can not only add custom headers, but you can also transform existing ones. See the `RequestUUIDHeaderFactory` class below for an example of the factory."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`@ClientHeaderParam` can be used on the client interface and on methods. It can specify a constant header value..."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "... and a name of a method that should compute the value of the header. It can either be a static method or a default method in this interface. The method can take either no parameters, a single String parameter or a single `io.quarkus.rest.client.reactive.ComputedParamContext` parameter (which is very useful for code that needs to compute headers based on method parameters and naturally complements `@io.quarkus.rest.client.reactive.NotBody`)."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "... as well as a value from your application's configuration"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "... or even any mixture of verbatim text, method parameters (referenced by name), a configuration value (as mentioned previously) and method invocations (as mentioned before)"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "... or as a normal Jakarta REST `@HeaderParam` annotated argument"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"When using Kotlin, if default methods are going to be leveraged, then the Kotlin compiler needs to be configured to use Java's default interface capabilities.\n"
"See link:https://kotlinlang.org/docs/java-to-kotlin-interop.html#default-methods-in-interfaces[this] for more details."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A `ClientHeadersFactory` can look as follows:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by\n"
"annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "To specify a value for `${header.value}`, simply put the following in your `application.properties`:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Also, there is a reactive flavor of `ClientHeadersFactory` that allows doing blocking operations. For example:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"When using HTTP Basic Auth, the `@io.quarkus.rest.client.reactive.ClientBasicAuth` annotation provides a much simpler way of configuring\n"
"the necessary `Authorization` header."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A very simple example is:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "where `service.username` and `service.password` are configuration properties that must be set at runtime to the username and password that allow access to the service being called."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Default header factory"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"The `@RegisterClientHeaders` annotation can also be used without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used.\n"
"If you make a REST client call from a REST resource, this factory will propagate all the headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property from the resource request to the client request. Individual header names are comma-separated."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Customizing the request"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The REST Client supports further customization of the final request to be sent to the server via filters. The filters must implement either the interface `ClientRequestFilter` or `ResteasyReactiveClientRequestFilter`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A simple example of customizing the request would be to add a custom header:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Next, you can register your filter using the `@RegisterProvider` annotation:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Or programmatically using the `.register()` method:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Injecting the `jakarta.ws.rs.ext.Providers` instance in filters"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The `jakarta.ws.rs.ext.Providers` is useful when we need to lookup the provider instances of the current client."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "We can get the `Providers` instance in our filters from the request context as follows:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Alternatively, you can implement the `ResteasyReactiveClientRequestFilter` interface instead of the `ClientRequestFilter` interface that will directly provide the `ResteasyReactiveClientRequestContext` context:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Customizing the ObjectMapper in REST Client Jackson"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The REST Client supports adding a custom ObjectMapper to be used only the Client using the annotation `@ClientObjectMapper`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A simple example is to provide a custom ObjectMapper to the REST Client Jackson extension by doing:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The method must be annotated with `@ClientObjectMapper`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "It's must be a static method. Also, the parameter `defaultObjectMapper` will be resolved via CDI. If not found, it will throw an exception at runtime."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "In this example, we're creating a copy of the default object mapper. You should *NEVER* modify the default object mapper, but create a copy instead."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Exception handling"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The MicroProfile REST Client specification introduces the `org.eclipse.microprofile.rest.client.ext.ResponseExceptionMapper` whose purpose is to convert an HTTP response to an exception."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A simple example of implementing such a `ResponseExceptionMapper` for the `ExtensionsService` discussed above, could be:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"`ResponseExceptionMapper` also defines the `getPriority` method which is used in order to determine the priority with which `ResponseExceptionMapper` implementations will be called (implementations with a lower value for `getPriority` will be invoked first).\n"
"If `toThrowable` returns an exception, then that exception will be thrown. If `null` is returned, the next implementation of `ResponseExceptionMapper` in the chain will be called (if there is any)."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
#, fuzzy
msgid ""
"The class as written above, would not be automatically used by any REST Client. To make it available to every REST Client of the application, the class needs to be annotated with `@Provider` (as long as `quarkus.rest-client.provider-autodiscovery` is not set to `false`).\n"
"Alternatively, if the exception handling class should only apply to specific REST Client interfaces, you can either annotate the interfaces with `@RegisterProvider(MyResponseExceptionMapper.class)`, or register it using configuration using the `providers` property of the proper `quarkus.rest-client` configuration group."
msgstr "上記のように書かれたクラスは、どの REST Client でも自動的に使用されることはありません。アプリケーションのすべての REST クライアントで利用できるようにするには、 クラスに `@Provider` のアノテーションを付ける必要があります ( `quarkus.rest-client.provider-autodiscovery` が `false` に設定されていない限り)。あるいは、例外処理クラスが特定の REST クライアントインタフェースにのみ適用されるようにするには、 `@RegisterProvider(MyResponseExceptionMapper.class)` でインタフェースをアノテートするか、適切な `quarkus.rest-client` 構成グループの `providers` プロパティを使用して構成で登録します。"

#: _versions/3.27/guides/rest-client.adoc
msgid "Using @ClientExceptionMapper"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A simpler way to convert HTTP response codes of 400 or above is to use the `@ClientExceptionMapper` annotation."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "For the `ExtensionsService` REST Client interface defined above, an example use of `@ClientExceptionMapper` would be:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Naturally this handling is per REST Client. `@ClientExceptionMapper` uses the default priority if the `priority` attribute is not set and the normal rules of invoking all handlers in turn apply."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Methods annotated with `@ClientExceptionMapper` can also take a `java.lang.reflect.Method` parameter which is useful if the exception mapping code needs to know the REST Client method that was invoked and caused the exception mapping code to engage."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Using @Blocking annotation in exception mappers"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "In cases that warrant using `InputStream` as the return type of REST Client method (such as when large amounts of data need to be read):"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "This will work as expected, but if you try to read this InputStream object in a custom exception mapper, you will receive a `BlockingNotAllowedException` exception. This is because `ResponseExceptionMapper` classes are run on the Event Loop thread executor by default - which does not allow to perform IO operations."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "To make your exception mapper blocking, you can annotate the exception mapper with the `@Blocking` annotation:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "With the `@Blocking` annotation, the MyResponseExceptionMapper exception mapper will be executed in the worker thread pool."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Reading the entity is now allowed because we're executing the mapper on the worker thread pool."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Note that you can also use the `@Blocking` annotation when using @ClientExceptionMapper:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Disabling the default mapper"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"As mandated by the REST Client specification, a default exception mapper is included, that throws an exception when HTTP status code is higher than 400.\n"
"While this behavior is fine when the client returns a regular object, it is however very unintuitive when the client needs to return a `jakarta.ws.rs.core.Response`\n"
"(with the intention of allowing the caller to decide how to handle the HTTP status code)."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "For this reason, the REST Client includes a property named `disable-default-mapper` which can be used to disable the default mapper when using a REST client in a declarative manner."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "For example, with a client like so:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The default exception mapper can be disabled by setting `quarkus.rest-client.bar.disable-default-mapper=true` to disable the exception mapper for the REST Client configured with the key `bar`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"When using the programmatic approach for creating a REST Client, `QuarkusRestClientBuilder` provides a method named `disableDefaultMapper`\n"
"that provides the same feature."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Multipart Form support"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Sending Multipart messages"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"REST Client allows sending data as multipart forms. This way you can for example\n"
"send files efficiently."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "To send data as a multipart form, you can just use the regular `@RestForm` (or `@FormParam`) annotations:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"Parameters specified as `File`, `Path`, `byte[]`, `Buffer` or `FileUpload` are sent as files and default to the\n"
"`application/octet-stream` MIME type. Other `@RestForm` parameter types default to the `text/plain`\n"
"MIME type. You can override these defaults with the `@PartType` annotation."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Naturally, you can also group these parameters into a containing class:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"Any `@RestForm` parameter of the type `File`, `Path`, `byte[]`, `Buffer` or `FileUpload`, as well as any\n"
"annotated with `@PartType` automatically imply a `@Consumes(MediaType.MULTIPART_FORM_DATA)`\n"
"on the method if there is no `@Consumes` present."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"If there are `@RestForm` parameters that are not multipart-implying, then\n"
"`@Consumes(MediaType.APPLICATION_FORM_URLENCODED)` is implied."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"There are a few modes in which the form data can be encoded. By default,\n"
"REST Client uses RFC1738.\n"
"You can override it by specifying the mode either on the client level,\n"
"by setting `io.quarkus.rest.client.multipart-post-encoder-mode` RestBuilder property\n"
"to the selected value of `HttpPostRequestEncoder.EncoderMode` or\n"
"by specifying `quarkus.rest-client.multipart-post-encoder-mode` in your\n"
"`application.properties`. Please note that the latter works only for\n"
"clients created with the `@RegisterRestClient` annotation.\n"
"All the available modes are described in the link:https://netty.io/4.1/api/io/netty/handler/codec/http/multipart/HttpPostRequestEncoder.EncoderMode.html[Netty documentation]"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "You can also send JSON multiparts by specifying the `@PartType` annotation:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Programmatically creating the Multipart form"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "In cases where the multipart content needs to be built up programmatically, the REST Client provides `ClientMultipartForm` which can be used in the REST Client like so:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "More information about this class and supported methods can be found on the javadoc of link:https://javadoc.io/doc/io.quarkus.resteasy.reactive/resteasy-reactive-client/latest/org/jboss/resteasy/reactive/client/api/ClientMultipartForm.html[`ClientMultipartForm`]."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Converting a received multipart object into a client request"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A good example of creating `ClientMultipartForm` is one where it is created from the server's `MultipartFormDataInput` (which represents a multipart request received by xref:rest.adoc#multipart[Quarkus REST]) - the purpose being to propagate the request downstream while allowing for arbitrary modifications:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`MultipartFormDataInput` is a Quarkus REST (Server) type representing a received multipart request."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A `ClientMultipartForm` is created."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`FileItem` attribute is created for the request attribute that represented an in memory file attribute"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`FileItem` attribute is created for the request attribute that represented a file attribute saved on the file system"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Non-file attributes added directly to `ClientMultipartForm` if not `FileItem`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "In a similar fashion if the received server multipart request is known and looks something like:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "the `ClientMultipartForm` can be created easily as follows:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`Request` representing the request the server parts accepts"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A `jsonPayload` attribute is added directly to `ClientMultipartForm`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "A `fileUpload` is created from the request's `FileUpload`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"When sending multipart data that uses the same name, problems can arise if the client and server do not use the same multipart encoder mode.\n"
"By default, the REST Client uses `RFC1738`, but depending on the situation, clients may need to be configured with `HTML5` or `RFC3986` mode."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "This configuration can be achieved via the `quarkus.rest-client.multipart-post-encoder-mode` property."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Receiving Multipart Messages"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"REST Client also supports receiving multipart messages.\n"
"As with sending, to parse a multipart response, you need to create a class that describes the response data, e.g."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "uses the shorthand `@RestForm` annotation to make a field as a part of a multipart form"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "the standard `@FormParam` can also be used. It allows to override the name of the multipart part."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Then, create an interface method that corresponds to the call and make it return the `FormDto`:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "At the moment, multipart response support is subject to the following limitations:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "files sent in multipart responses can only be parsed to `File`, `Path` and `FileDownload`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "each field of the response type has to be annotated with `@PartType` - fields without this annotation are ignored"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "REST Client needs to know the classes used as multipart return types upfront. If you have an interface method that produces `multipart/form-data`, the return type will be discovered automatically. However, if you intend to use the `ClientBuilder` API to parse a response as multipart, you need to annotate your DTO class with `@MultipartForm`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The files you download are not automatically removed and can take up a lot of disk space. Consider removing the files when you are done working with them."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Multipart mixed / OData usage"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"It is not uncommon that an application has to interact with enterprise systems (like CRM systems) using a special protocol called https://www.odata.org/documentation/odata-version-3-0/batch-processing/[OData].\n"
"This protocol essentially uses a custom HTTP `Content-Type` which needs some glue code to work with the REST Client (creating the body is entirely up to the application - the REST Client can't do much to help)."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "An example looks like the following:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The code uses the following pieces:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`@ClientHeaderParam(name = \"Content-Type\", value = \"{calculateContentType}\")` which ensures that the `Content-Type` header is created by calling the interface's `calculateContentType` default method."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The aforementioned parameter needs to be annotated with `@NotBody` because it is only used to aid the construction of HTTP headers."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`context.methodParameters().get(1).value()` which allows the `calculateContentType` method to obtain the proper method parameter passed to the REST Client method."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "As previously mentioned, the body parameter needs to be properly crafted by the application code to conform to the service's requirements."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Receiving compressed messages"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"REST Client also supports receiving compressed messages using GZIP and can be enabled via configuration.\n"
"When this feature is enabled and a server returns a response that includes the header `Content-Encoding: gzip`, REST Client will automatically decode the content and proceed with the message handling."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "An example configuration could be:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The REST Client falls back onto the Quarkus wide `quarkus.http.enable-compression` configuration property (which defaults to `false`) if no REST Client specific property is set."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Proxy support"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"REST Client supports sending requests through a proxy.\n"
"It honors the JVM settings for it but also allows to specify both:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "global client proxy settings, with `quarkus.rest-client.proxy-address`, `quarkus.rest-client.proxy-user`, `quarkus.rest-client.proxy-password`, `quarkus.rest-client.non-proxy-hosts`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "per-client proxy settings, with `quarkus.rest-client.<my-client>.proxy-address`, etc. These are applied only to clients injected with CDI, that is the ones created with `@RegisterRestClient`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "If `proxy-address` is set on the client level, the client uses its specific proxy settings. No proxy settings are propagated from the global configuration or JVM properties."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"If `proxy-address` is not set for the client but is set on the global level, the client uses the global settings.\n"
"Otherwise, the client uses the JVM settings."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "An example configuration for setting proxy:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "MicroProfile REST Client specification does not allow setting proxy credentials. In order to specify proxy user and proxy password programmatically, you need to cast your `RestClientBuilder` to `RestClientBuilderImpl`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Local proxy for dev mode"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"When using the REST Client in dev mode, Quarkus has the ability to stand up a pass-through proxy which can be used as a target for Wireshark (or similar tools)\n"
"in order to capture all the traffic originating from the REST Client (this really makes sense when the REST Client is used against HTTPS services)"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"To enable this feature, all that needs to be done is set the `enable-local-proxy` configuration option for the configKey corresponding to the client for which proxying is desired.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"When a REST Client does not use a config key (for example when it is created programmatically via `QuarkusRestClientBuilder`) then the class name can be used instead.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The port the proxy is listening can be found in startup logs. An example entry is:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Package and run the application"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Run the application with:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "You should see a JSON object containing some basic information about this extension."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "As usual, the application can be packaged using:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "You can also generate the native executable with:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Logging traffic"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"REST Client can log the requests it sends and the responses it receives.\n"
"To enable logging, add the `quarkus.rest-client.logging.scope` property to your `application.properties` and set it to:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`request-response` to log the request and response contents, or"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`all` to also enable low level logging of the underlying libraries."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "As HTTP messages can have large bodies, we limit the amount of body characters logged. The default limit is `100`, you can change it by specifying `quarkus.rest-client.logging.body-limit`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"These configuration properties work globally for all clients injected by CDI.\n"
"If you want configure logging for a specific declarative client, you should do it by specifying named \"client\" properties, also known as `quarkus.rest-client.\"client\".logging.*` properties."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "An example logging configuration:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "REST Client uses a default `ClientLogger` implementation, which can be swapped out for a custom implementation."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "When setting up the client programmatically using the `QuarkusRestClientBuilder`, the `ClientLogger` is set via the `clientLogger` method."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "For declarative clients using `@RegisterRestClient`, simply providing a CDI bean that implements `ClientLogger` is enough for that logger to be used by said clients."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Mocking the client for tests"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"If you use a client injected with the `@RestClient` annotation, you can easily mock it for tests.\n"
"You can do it with Mockito's `@InjectMock` or with `QuarkusMock`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "This section shows how to replace your client with a mock. If you would like to get a more in-depth understanding of how mocking works in Quarkus, see the blog post on https://quarkus.io/blog/mocking/[Mocking CDI beans]."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Mocking does not work when using `@QuarkusIntegrationTest`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Let's assume you have the following client:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Mocking with InjectMock"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The simplest approach to mock a client for tests is to use Mockito and `@InjectMock`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "First, add the following dependency to your application:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Then, in your test you can simply use `@InjectMock` to create and inject a mock:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Mocking with QuarkusMock"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "If Mockito doesn't meet your needs, you can create a mock programmatically using `QuarkusMock`, e.g.:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "here we use a manually created implementation of the client interface to replace the actual Client"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "note that `RestClient.LITERAL` has to be passed as the last argument of the `installMockForType` method"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Using a Mock HTTP Server for tests"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"Setting up a mock HTTP server, against which tests are run, is a common testing pattern.\n"
"Examples of such servers are link:https://wiremock.org/[Wiremock] and link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].\n"
"In this section we'll demonstrate how Wiremock can be leveraged for testing the `ExtensionsService` which was developed above."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "First, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/org.wiremock/wiremock[here]."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n"
"annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n"
"values that Quarkus will use."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "For more details about `@QuarkusTestResource` refer to  xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `WiremockExtensions` like so:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Statically importing the methods in the Wiremock package makes it easier to read the test."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Launch Wiremock."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Configure Wiremock to stub the calls to `/extensions?id=io.quarkus:quarkus-rest-client` by returning a specific canned response."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "All HTTP calls that have not been stubbed are handled by calling the real service. This is done for demonstration purposes, as it is not something that would usually happen in a real test."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"As the `start` method returns configuration that applies for tests, we set the rest-client property that controls the base URL which is used by the implementation\n"
"of `ExtensionsService` to the base URL where Wiremock is listening for incoming requests."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "When all tests have finished, shutdown Wiremock."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "The `ExtensionsResourceTest` test class needs to be annotated like so:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "`@QuarkusTestResource` applies to all tests, not just `ExtensionsResourceTest`."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Known limitations"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"While the REST Client extension aims to be a drop-in replacement for the RESTEasy Client extension, there are some differences\n"
"and limitations:"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid ""
"the default scope of the client for the new extension is `@ApplicationScoped` while the `quarkus-resteasy-client` defaults to `@Dependent`\n"
"To change this behavior, set the `quarkus.rest-client.scope` property to the fully qualified scope name."
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "it is not possible to set `SSLContext`"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "a few things that don't make sense for a non-blocking implementations, such as setting the `ExecutorService`, don't work"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Further reading"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-4.0/microprofile-rest-client-spec-4.0.html[MicroProfile Rest Client specification]"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "Configuration Reference"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/rest-client.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
