msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Protect Quarkus web application by using an Auth0 OpenID Connect provider"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "xref:security-architecture.adoc[Quarkus Security] provides comprehensive OpenId Connect (OIDC) and OAuth2 support with its `quarkus-oidc` extension, supporting both xref:security-oidc-code-flow-authentication.adoc[Authorization code flow] and xref:security-oidc-bearer-token-authentication.adoc[Bearer token] authentication mechanisms."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "With Quarkus, you can easily configure OIDC providers such as link:https://www.keycloak.org/documentation[Keycloak], link:https://developer.okta.com/[Okta], link:https://auth0.com/docs/[Auth0], and other xref:security-openid-connect-providers.adoc[well-known social OIDC and OAuth2 providers]."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Learn how to use the Quarkus OpenID Connect extension (`quarkus-oidc`) together with the https://auth0.com/docs/[Auth0] OIDC provider to protect your API endpoints."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Review the following documentation before you begin:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "link:https://auth0.com/docs/[Auth0 docs site]"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[Quarkus OpenID Connect Authorization code flow mechanism for protecting web applications]"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[Quarkus OpenID Connect (OIDC) Bearer token authentication]"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Create an Auth0 application"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Go to the Auth0 dashboard and create a regular web application.\n"
"For example, create an Auth0 application called `QuarkusAuth0`."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Result"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Your Auth0 application gets created with a client ID, secret, and HTTPS-based domain.\n"
"Make a note of these properties because you will need them to complete the Quarkus configuration in the next step."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Next, while still in the Auth0 dashboard, add some users to your application."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Now that you have successfully created and configured your Auth0 application, you are ready to start creating and configuring a Quarkus endpoint.\n"
"In the steps that follow, you will continue to configure and update the Auth0 application as well."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Create a Quarkus application"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Use the following Maven command to create a Quarkus REST (formerly RESTEasy Reactive) application that can be secured with the Quarkus OIDC extension."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Create the application workspace and import it into your favorite IDE.\n"
"Let's add a Jakarta REST endpoint that can only be accessed by authenticated users:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"The injected `JsonWebToken` (JWT) bean has an `@IdToken` qualifier, which means it represents not an access token but OIDC `ID token`.\n"
"`IdToken` provides information in the form of claims about the current user authenticated during the OIDC authorization code flow and you can use `JsonWebToken` API to access these claims."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "The `io.quarkus.security.Authenticated` annotation is added to the `hello()` method, which means that only authenticated users can access it."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"The access token acquired during the authorization code flow, alongside the ID token, is not used directly by the endpoint but is used only to access downstream services on behalf of the currently authenticated user.\n"
"More to come on the topic of \"access tokens\", later in this tutorial."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Configure OIDC in the Quarkus `application.properties` file  by using the properties from the Auth0 application that you created earlier."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"In completing this step, you have just configured Quarkus to use the domain, client ID, and secret of your Auth0 application.\n"
"Setting the property `quarkus.oidc.application-type=web-app` instructs Quarkus to use the OIDC authorization code flow, but there are also other methods, which are discussed later on in the tutorial."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "The endpoint address will be  \\http://localhost:8080/hello, which must also be registered as an allowed callback URL in your Auth0 application."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "After completing this step, when you access the Quarkus \\http://localhost:8080/hello endpoint from a browser, Auth0 redirects you back to the same address after the authentication is completed."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"By default, Quarkus automatically uses the current request path as the callback path.\n"
"But you can override the default behavior and configure a specific callback path by setting the Quarkus `quarkus.oidc.authentication.redirect-path` property."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"In production, your application will most likely have a larger URL space, with multiple endpoint addresses available.\n"
"In such cases, you can set a dedicated callback (redirect) path and register this URL in the provider's dashboard, as outlined in the following configuration example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "`quarkus.oidc.authentication.redirect-path=/authenticated-welcome`"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"In the example scenario, Quarkus calls `/authenticated-welcome` after accepting a redirect from Auth0, completing the authorization code flow,  and creating the session cookie.\n"
"Successfully authenticated users are also allowed to access other parts of the secured application space, without needing to authenticate again. For example, the endpoint callback method can use a JAX-RS API to redirect users to other parts of the secured application where a session cookie will be verified."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Now you are ready to start testing the endpoint."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Test the Quarkus endpoint"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Start Quarkus in dev mode:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"This is the only time during this tutorial when you are expected to manually start Quarkus in dev mode.\n"
"The configuration and code update steps in the remaining sections of this tutorial are automatically observed and processed by Quarkus without you needing to restart the application manually."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Open the browser and access http://localhost:8080/hello."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "You will be redirected to Auth0 and prompted to log in:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "and authorize the `QuarkusAuth0` application to access your account:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Finally, you will be redirected back to the Quarkus endpoint which will return the following response:\n"
"`Hello, auth0|60e5a305e8da5a006aef5471`"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Notice that the current username does not get returned.\n"
"To learn more about why this behavior occurs, you can use OIDC Dev UI as explained in the xref:security-openid-connect-dev-services.adoc#dev-ui-all-oidc-providers[Dev UI for all OpenID Connect Providers] section of the \"Dev Services and UI for OpenID Connect (OIDC)\" guide and the following section."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Looking at Auth0 tokens in the OIDC Dev UI"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Quarkus provides a great xref:dev-ui.adoc[Dev UI] experience.\n"
"Specifically, Quarkus offers built-in support for developing and testing OIDC endpoints with a Keycloak container.\n"
"xref:security-openid-connect-dev-services.adoc#dev-services-for-keycloak[DevService for Keycloak] is automatically started and used if the address of the OIDC provider is not specified for the Quarkus `quarkus.oidc.auth-server-url` configuration property."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You can continue using the Quarkus OIDC Dev UI when the provider is already configured.\n"
"Use the following instructions to update your configuration:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "First, change your Quarkus application type from `web-app` to `hybrid`, as follows:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Application type is changed to `hybrid` because OIDC Dev UI currently supports `SPA` (single-page application) mode only.\n"
"OIDC Dev UI single-page application, using its own Java Script, authenticates users to the OIDC provider and uses the access token as a Bearer token to access the Quarkus endpoint as a service."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Typically, Quarkus must be configured with `quarkus.oidc.application-type=service` to support `Bearer` token authentication, but it also supports a `hybrid` application type, which means it can support both the authorization code and bearer token flows at the same time."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You also need to configure the Auth0 application to allow the callbacks to the OIDC Dev UI.\n"
"Use the following URL format:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
#, fuzzy
msgid "`http://localhost:8080/q/dev-ui/quarkus-oidc/${provider-name}-provider`"
msgstr "`http://localhost:8080/q/dev-ui/quarkus-oidc/${provider-name}-provider`"

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Where in this example, the `${provider-name}` is `auth0`"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Now you are ready to use OIDC Dev UI with Auth0."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Open http://localhost:8080/q/dev/ in a browser session. An OpenId Connect card that links to an Auth0 provider SPA displays, as follows:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Click *Auth0 provider* followed by *Login into Single Page Application*:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You will be redirected to Auth0 to log in.\n"
"You will then be redirected to the OIDC Dev UI dashboard, as follows:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Here, you can look at both ID and access tokens in the encoded and decoded formats, copy them to the clipboard or use them to test the service endpoint. We will test the endpoint later but for now let's check the ID token:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "As you can see it does not have any claim representing a user name but if you check its `sub` (subject) claim you will see its value matches what you got in the response when you accessed the Quarkus endpoint directly from the browser, `auth0|60e5a305e8da5a006aef5471`."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Fix it by configuring Quarkus to request a standard OIDC `profile` scope during the authentication process which should result in the ID token including more information:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Request `profile` scope in addition to the default `openid` scope."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Go back to http://localhost:8080/q/dev/, repeat the process of logging in to `Auth0` and check the ID token again, now you should see the ID token containing the `name` claim:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "You should get the name when you access the Quarkus endpoint directly from the browser. Clear the browser cookie cache, access http://localhost:8080/hello and yet again, you get `Hello, auth0|60e5a305e8da5a006aef5471` returned. Hmm, what is wrong ?"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "The answer lies with the specifics of the `org.eclipse.microprofile.jwt.JsonWebToken#getName()` implementation, which, according to the https://github.com/eclipse/microprofile-jwt-auth[MicroProfile MP JWT RBAC  specification], checks an MP JWT specific `upn` claim, trying `preferred_username` next and finally `sub` which explains why you get the `Hello, auth0|60e5a305e8da5a006aef5471` answer even with the ID token containing the `name` claim. We can fix it easily by changing the endpoint `hello()` method's implementation to return a specific claim value:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Now clear the browser cache, access http://localhost:8080/hello and finally the user name is returned."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Logout support"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Now that you have the users signing in to Quarkus with the help of Auth0, you probably want to support a user-initiated logout. Quarkus supports https://quarkus.io/guides/security-oidc-code-flow-authentication#logout-and-expiration[RP-initiated and other standard OIDC logout mechanisms, as well as the local session logout]."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Currently, Auth0 does not support the standard OIDC RP-initiated logout and does not provide an end session endpoint URL in its discoverable metadata, but it provides its own logout mechanism which works nearly exactly the same as the standard one."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "It is easy to support it with Quarkus OIDC. You must configure an Auth0 end session endpoint URL and have Quarkus include both the `client-id` query parameter and the post logout URL as the `returnTo` query parameter in the RP-initated logout redirect request to Auth0:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Auth0 does not include the end session URL in its metadata, so complement it with manually configuring the Auth0 end session endpoint URL."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Auth0 will not recognize a standard `post_logout_redirect_uri` query parameter and expects a parameter `returnTo` instead."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Auth0 expects `client-id` in the logout request."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Authenticated requests to `/logout` path will be treated as RP-inititated logout requests."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "This is a public resource to where the logged out user should be returned to."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Make sure the `/logout` path is protected."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Here we have customized the Auth0 end session endpoint URL and indicated to Quarkus that an `http://localhost:8080/logout` request must trigger a logout of the currently authenticated user. An interesting thing about the `/logout` path is that it is `virtual`, it is not supported by any method in the JAX-RS endpoint, so for Quarkus OIDC to be able to react to `/logout` requests we attach an `authenticated` https://quarkus.io/guides/security-authorize-web-endpoints-reference#authorization-using-configuration[HTTP security policy] to this path directly in the configuration."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "We also have configured Quarkus to return the logged out user to the public `/hello/post-logout` resource, and this path is included in the logout request as the Auth0 specific `returnTo` query parameter. Finally, the Quarkus application's `client-id` is included in the logout URL as well."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Update the endpoint to accept the post logout redirects:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Note the addition of the public `/hello/post-logout` resource method."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Before we test the logout, make sure the `Auth0` application is configured to allow this post logout redirect back to Quarkus after the user has been logged out:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Now, clear the browser cookie cache, access http://localhost:8080/hello, login to Quarkus with Auth0, get the user name returned, and go to `http://localhost:8080/logout`. You'll see the `You were logged out` message displayed in the browser."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Next, go to the http://localhost:8080/q/dev/, login to Auth0 from the Dev UI SPA and notice you can now logout from the OIDC Dev UI too, see the symbol representing the logout next to the `Logged in as Sergey Beryozkin` text:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "For the logout to work from OIDC DevUI, the Auth0 application's list of allowed logout callbacks has to be updated to include the OIDC DevUI endpoint:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Now logout directly from OIDC Dev UI and login as a new user - add more users to the registered Auth0 application if required."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Role-based access control"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "We have confirmed that the Quarkus endpoint can be accessed by users who have authenticated with the help of `Auth0`."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "The next step is to introduce role-based access control (RBAC) to have users in a specific role only, such as `admin`, be able to access the endpoint."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "See also the <<permission-based-access-control>> section below."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Auth0 tokens do not include any claims containing roles by default, so, first, you must customize the `Login` flow of the `Auth0` application with a custom action which will add the roles to tokens. Select `Actions/Flows/Login` in the `Auth0` dashboard, choose `Add Action/Build Custom`, name it as `AddRoleClaim`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Add the following action script to it:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Note a custom Auth0 claim has to be namespace qualified, so the claim which will contain roles will be named as \"https://quarkus-security.com/roles\". Have a look at the ID token content we analyzed in the previous sections and you will see how this claim is represented, for example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "The `Auth0` Login Flow diagram should look like this now:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "You must add a role such as `admin` to the users registered in the `Auth0` application."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Create an `admin` role:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "and add it to the registered user:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Next, update the Quarkus endpoint to require that only users with the `admin` role can access the endpoint:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Open http://localhost:8080/hello, authenticate to Auth0 and get `403`. The reason you get `403` is because Quarkus OIDC does not know which claim in the `Auth0` tokens represents the roles information, by default a `groups` claim is checked, while Auth0 tokens are now expected to have an \"https://quarkus-security.com/roles\" claim."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Fix it by telling Quarkus OIDC which claim must be checked to enforce RBAC:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Point to the custom roles claim. The path to the roles claim is in double quotes because the claim is namespace qualified."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Now, clear the browser cookie cache, access http://localhost:8080/hello again, authenticate to Auth0 and get an expected user name."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Access Quarkus with opaque Auth0 access tokens"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "The main goal of this section is to explain how Quarkus can be tuned to accept `opaque` bearer Auth0 access tokens as opposed to Auth0 JWT access tokens because Auth0 access tokens issued during the authorization code flow are opaque by default and they can only be used to request `UserInfo` in addition to the information about the current user which is already available in ID token. Learning how to verify opaque tokens can be useful because many OIDC and OAuth2 providers will issue opaque access tokens only."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "For more information on how to configure Auth0 and Quarkus to have authorization code access tokens issued in the JWT format and propagated to service endpoints, see the following <<token-propagation>> and <<jwt-access-tokens>> sections."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "So far we have only tested the Quarkus endpoint using OIDC authorization code flow. In this flow you use the browser to access the Quarkus endpoint, Quarkus itself manages the authorization code flow, a user is redirected to Auth0, logs in, is redirected back to Quarkus, Quarkus completes the flow by exchanging the code for the ID, access, and refresh tokens, and works with the ID token representing the successful user authentication. The access token is not relevant at the moment. As mentioned earlier, in the authorization code flow, Quarkus will only use the access token to access downstream services on behalf of the currently authenticated user."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Let's imagine though that the Quarkus endpoint we have developed has to accept `Bearer` access tokens too: it may be that the other Quarkus endpoint which is propagating it to this endpoint or it can be SPA which uses the access token to access the Quarkus endpoint. And Quarkus OIDC DevUI SPA which we already used to analyze the ID token fits perfectly for using the access token available to SPA to test the Quarkus endpoint."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Let's go again to http://localhost:8080/q/dev-ui, select the `OpenId Connect` card, login to Auth0, and check the Access token content:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "This access token, as opposed to the ID token we looked at earlier, cannot be verified by Quarkus directly. This is because the access token is in `JWE` (encrypted) as opposed to `JWS` (signed) format. You can see from the decoded token headers that it has been encrypted directly with a secret key known to Auth0 only, and therefore its content cannot be decrypted by Quarkus. From the Quarkus's perspective this access token is an `opaque` one, Quarkus cannot use public Auth0 asymmetric verification keys to verify it."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "To confirm it, enter `/hello` as the `Service Address` in the `Test Service` area and press `With Access Token` and you will get the HTTP `401` status:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"For Quarkus be able to accept such access tokens, one of the two options should be available.\n"
"The first option is to introspect the opaque token remotely using a provider's introspection endpoint. Token introspection is typically supported at the `OAuth2` level, and since `OIDC` is built on top of `OAuth2`, some OIDC providers such as Keycloak support the token introspection as well. However, Auth0 does not support the token introspection, you can check it by looking at the publicly available Auth0 metadata, add `/.well-known/openid-configuration` to the address of your configured Auth0 provider, and open the resulting URL, `https://dev-3ve0cgn7.us.auth0.com/.well-known/openid-configuration`. You will see that Auth0 does not have an introspection endpoint:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Therefore the other option, indirect access token verification, where the access token is used to acquire `UserInfo` from Auth0 can be used to accept and verify opaque Auth0 tokens. This option works because OIDC providers have to verify access tokens before they can issue `UserInfo` and Auth0 has a `UserInfo` endpoint."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "So lets configure Quarkus to request that the access tokens must be verified by using them to acquire `UserInfo`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Verify access tokens indirectly by using them to request `UserInfo`."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Update the endpoint code to expect `UserInfo` as opposed to `ID token`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "This code will now work both for the authorization code and bearer access token flows."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Let's go to the OIDC Dev UI where we looked at the access token, enter `/hello` as the `Service Address` in the `Test Service` area and press `With Access Token` and you will get `200`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "To confirm that it really does work, update the test endpoint to allow a `user` role only with `@RolesAllowed(\"user\")`. Try to access the endpoint from OIDC Dev UI again, and you will get the HTTP `403` error. Revert the code back to `@RolesAllowed(\"admin\")` to get the reassuring HTTP `200` status again."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "When verifying the opaque access token indirectly, by using it to request `UserInfo`, Quarkus will use `UserInfo` as the source of the roles information, if any. As it happens, Auth0 includes the custom role claim which was created earlier in the `UserInfo` response as well."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "As has already been mentioned in the introduction to this section, the main goal of this section is to explain how Quarkus can verify opaque access tokens. In general, propagating access tokens whose only purpose is to allow retrieving `UserInfo` to services should be avoided unless the front-end JAX-RS endpoint or SPA prefers to delegate UserInfo retrieval to the trusted service."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "For a recommended approach of working with Auth0 access tokens, see the following <<token-propagation>> and <<jwt-access-tokens>> sections."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Typically one uses access tokens to access remote services but OIDC DevUI SPA dashboard also offers an option to test with the ID token. This option is only available to emulate the cases where SPA delegates to the endpoint to verify and retrieve some information from the ID token for SPA to use - but ID token will still be sent to the endpoint as Bearer token by OIDC DevUI. Prefer testing with the access token in most cases."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You can use SwaggerUI or GraphQL from OIDC DevUI for testing the service, instead of manually entering the service path to test.\n"
"For example, if you add"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "to your application's pom then you will see a Swagger link in OIDC Dev UI:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Click the Swagger link and start testing the service."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Propagate access tokens to microservices"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Now that we have managed to use OIDC authorization code flow and used both ID token and UserInfo to access the user information, the next typical task is to propagate the current Auth0 access token to access the downstream service on behalf of the currently authenticated user."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "In fact, the last code example, showing the injected `UserInfo`, is a concrete example of the access token propagation, in this case, Quarkus propagates the Auth0 access token to the Auth0 `UserInfo` endpoint to acquire `UserInfo`. Quarkus does it without users having to do anything themselves."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "But what about propagating access tokens to some custom services ? It is very easy to achieve in Quarkus, both for the authorization code and bearer token flows. All you need to do is to create a REST Client interface for calling the service requiring a Bearer token access and annotate it with `@AccessToken` and the access token arriving to the front-end endpoint as the Auth0 Bearer access token or acquired by Quarkus after completing the Auth0 authorization code flow, will be propagated to the target microservice. This is as easy as it can get."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"For examples of propagating access tokens, see the following sections in this tutorial.\n"
"For more information about token propagation, see xref:security-openid-connect-client-reference.adoc#token-propagation-rest[OIDC token propagation]."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Access tokens in JWT format"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "We have already looked in detail at how Quarkus OIDC can handle <<opaque-access-tokens>>, but we don't want to propagate Auth0 opaque tokens to micro services which do something useful on behalf on the currently authenticated user, beyond checking its UserInfo."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "A microservice which the front-end Quarkus application will access by propagating authorization code flow access tokens to it is represented in the Auth0 dashboard as an `API`. Let's add it in the `Applications/APIs`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "The `https://quarkus-auth0` identifier of the created `QuarkusAuth0API` will serve as this API's `audience`. Providing this audience as a query parameter in the authorization code flow redirect to Auth0 will ensure that Auth0 issues access tokens in the JWT format."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "API microservice"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Add the following dependencies to the project to support OIDC token propagation and REST clients:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Create `ApiEchoService` service class:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"And configure it as an OIDC `service` application which will only fetch public verification keys from Auth0.\n"
"The configuration for this microservice should only have a single line:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "which is all what is needed for the OIDC `service` application to fetch Auth0 public verification keys and use them to verify Auth0 access tokens in JWT format."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "In this tutorial you have already configured the OIDC `hybrid` application which can handle both authorization code and bearer token authentication flows. In production you will run microservices as separate servers but for the sake of simplicity `ApiEchoService` will not have to be started as a second server with its own configuration containing `quarkus.oidc.auth-server-url=https://dev-3ve0cgn7.us.auth0.com` only, and therefore the current configuration which already has the Auth0 dev tenant address configured will be reused."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "The `hybrid` OIDC application type will ensure that `http://localhost:8080/hello` requests to `GreetingResource` initiate an Authorization code flow while `http://localhost:8080/echo` requests to `ApiEchoService`, initiated by `GreetingResource`, will lead to the authorization code flow tokens being propagated and accepted by `ApiEchoService` as bearer JWT access tokens."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Next, add a REST client interface representing `ApiEchoService`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Propagate access token as an HTTP `Authorization: Bearer accesstoken` header"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "And update the configuration for the Quarkus front-end application, `GreetingResource`, which has been created earlier, to request that an authorization code flow access token (as opposed to ID token) includes an `aud` (audience) claim targeting `ApiEchoService`, as well as configure the base URL for the `ApiEchoService` REST client:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"Pass an extra `audience` query parameter to the Auth0 authorization endpoint during the authorization code flow redirect from Quarkus to Auth0.\n"
"It will ensure that the access token is issued in the JWT format and includes an `aud` (audience) claim which will contain `https://quarkus-auth0`."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Point `ApiEchoServiceClient` to the `ApiEchoService` endpoint. HTTP port in the `org.acme.ApiEchoServiceClient/mp-rest/url=http://localhost:${port}` property is parameterized to ensure the correct URL is built while using the dev, test and prod modes."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Finally update `GreetingResource` to request that `ApiEchoService` echoes a user name:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Inject `ApiEchoServiceClient` REST client"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Use `ApiEchoServiceClient` to echo the user name."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Open a browser, access http://localhost:8080/hello and get your name displayed in the browser."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Let's go to http://localhost:8080/q/dev-ui, select the `OpenId Connect` card, login to Auth0, and check the Access token content:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "As you can see, the access token is no longer encrypted as shown in the <<opaque-access-tokens>> section and indeed it is in the JWT format now."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Permission Based Access Control"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "We have discussed in the <<role-based-access-control>> section how to get Quarkus to check a namespace qualified claim containing user roles and use this information to enforce role-based access control. You have configured Auth0 to add the custom roles claim to both ID and access tokens."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "However, Permission Based Access Control is better suited to the case where an access token is propagated by the front-end endpoint to a microservice which will check if a given access token has been authorized for this service to perform a concrete action, as opposed to this token vouching for a user be in a specific role. For example, being in the admin role does not necessarily mean the user is allowed to have a read and write access to some of this microservice's content."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Let's see how Permission Based Access Control constraints can be applied to `ApiEchoService`."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Go to the Auth0 dashboard, add an `echo:name` permission to the `QuarkusAuth0API` API:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "The `echo:name` permission will be included in the access token as a standard OAuth2 `scope` claim value if this scope will also be requested during the authorization code flow. Update the configuration as follows:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "An extra `echo:name` scope will be requested during the authorization code flow."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Now update `ApiEchoService` to enforce Permission Based Access Control:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "This is all what is needed as Quarkus OIDC automatically associates `scope` claim values as permissions with the current security identity."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "You can enforce both Role Based and Permission Based Access Controls in Quarkus by combining `@RolesAllowed` and `@PermissionsAllowed` annotations."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Open a browser, access http://localhost:8080/hello and get the name displayed in the browser."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "To confirm the permission is correctly enforced, change it to `echo.name`: `@PermissionsAllowed(\"echo.name\")`. Clear the browser cache, access http://localhost:8080/hello again and you will get `403` reported by `ApiEchoService`. Now revert it back to `@PermissionsAllowed(\"echo:name\")`."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Integration testing"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "You have already used OIDC DevUI SPA to login to Auth0 and test the Quarkus endpoint with the access token, updating the endpoint code along the way."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "However, running tests is also essential, lets see how we can test the endpoint and configuration which you have developed during the course of this tutorial, using xref:continuous-testing.adoc[Quarkus Continuous Testing] feature."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Start with the following test code :"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "If you recall, when the application was started in dev mode, the following could be seen in the CLI window:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Press `r` and notice this test failing with `403` which is expected because the test does not send a token to the endpoint:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Before fixing the test, let's review the options available for testing Quarkus endpoints secured by OIDC. These options might vary, depending on which flow your application supports and how you prefer to test. Endpoints which use OIDC authorization code flow can be tested using xref:security-oidc-code-flow-authentication.adoc#code-flow-integration-testing[one of these options] and endpoints which use Bearer token authentication can be tested using xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing[one of these options]."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "As you can see, testing of the endpoints secured with Auth0 can be done with the help of `Wiremock`, or `@TestSecurity` annotation. Experiment with writing such tests on your own and reach out if you encounter any problems."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "In this tutorial though, we will use a recently added `OidcTestClient` to support testing endpoints which use live Auth0 development tenants."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Here is a related fragment of the configuration:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "In production, you will distinguish between prod and test level configuration with `%prod.` and `%test.` qualifiers. Let's assume that the above configuration will indeed be prefixed with `%test.` in your real application, with this configuration also including the `%prod.` qualified Auth0 production tenant configuration."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Using `OidcTestClient` to test such configuration requires acquiring a token from the Auth0 dev tenant, using either OAuth2 `password` or `client_credentials` grant, we will try a `password` grant. Make sure the application registered in the Auth0 dashboard allows the `password` grant:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "It is important to clarify that we do not recommend using the deprecated OAuth2 `password` token grant in production. However using it can help testing the endpoint with tokens acquired from the live dev Auth0 tenant."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "`OidcTestClient` should be used to test applications accepting bearer tokens which will work for the endpoint developed in this tutorial as it supports both authorization code flow and bearer token authentication. You would need to use OIDC WireMock or `HtmlUnit` directly against the Auth0 dev tenant if only the authorization code flow was supported - in the latter case `HtmlUnit` test code would have to be aligned with how Auth0 challenges users to enter their credentials. If you like, you can copy the xref:security-oidc-code-flow-authentication.adoc#code-flow-integration-testing-wiremock[HtmlUnit test fragment] from the documentation and experiment with it."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "In meantime we will now proceed with fixing the currently failing test using `OidcTestClient`."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "First you must add the following dependency:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "which provides a utility class `io.quarkus.test.oidc.client.OidcTestClient` which can be used in tests for acquiring access tokens (This dependency also offers an OIDC WireMock support - review the documentation how to use it for testing if you want)."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Now update the test code like this:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "`OidcTestClient` is used to acquire an access token, using one of the registered user's name and password, as well as the `audience` and `scope` parameters."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "`OidcTestClient` will itself find out the `Auth0` token endpoint address, client id and secret."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Press `r` again and have the test passing:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "By the way, if you like, you can run the tests in Continuous mode directly from DevUI:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Production mode"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You have developed and tested the Quarkus endpoint secured with Auth0 in the development mode.\n"
"The next step is to run your application in the production mode.\n"
"Choose between JVM and native modes."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Run the Application in JVM mode"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Compile the application:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Run the application:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Run the application in native mode"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"You can compile this same demo into native mode without needing any modifications.\n"
"This implies that you no longer need to install a JVM on your production environment.\n"
"The runtime technology is included in the produced binary and optimized to run with minimal resources required."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Compilation takes a bit longer, so this step is disabled by default."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Build your application again by enabling the `native` profile:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Next run the following binary directly:"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Troubleshooting"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "The steps described in this tutorial should work exactly as the tutorial describes. You might have to clear the browser cookies when accessing the updated Quarkus endpoint if you have already completed the authentication. You might need to restart the Quarkus application manually in dev mode but it is not expected. If you need help completing this tutorial, you can get in touch with the Quarkus team."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Summary"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid ""
"This tutorial demonstrated how Quarkus endpoints can be secured with the `quarkus-oidc` extension and Auth0 using Authorization code and Bearer token authentication flows, with both flows being supported by the same endpoint code.\n"
"Without writing a single line of code, you have added support for the custom Auth0 logout flow and enabled role-based access control with a custom Auth0 namespace qualified claim.\n"
"Token propagation from the front-end endpoint to the microservice endpoint has been achieved by adding the `@AccessToken` annotation to the microservice REST client.\n"
"Microservice endpoint activated the permission-based access control with the `@PermissionsAllowed` annotation.\n"
"You used Quarkus dev mode to update the code and configuration without restarting the endpoint, and you also used the OIDC Dev UI to visualize and test Auth0 tokens.\n"
"You used the continuous testing feature of Quarkus to complement OIDC Dev UI tests with integration tests against the live Auth0 development tenant.\n"
"Finally, you have run the application in JVM and native modes."
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "Enjoy!"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr ""

#: _versions/3.27/guides/security-oidc-auth0-tutorial.adoc
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr ""
