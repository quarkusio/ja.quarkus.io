msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-customization.adoc
msgid "Security Tips and Tricks"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Quarkus Security Dependency"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus:quarkus-security` module contains the core Quarkus Security classes."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"In most cases, it does not have to be added directly to your project's build file as it is already provided by all the security extensions.\n"
"However, if you need to write your own custom security code (for example, register a <<jaxrs-security-context,Custom Jakarta REST SecurityContext>>) or use <<bouncy-castle,BouncyCastle>> libraries, then please make sure it is included:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "HttpAuthenticationMechanism Customization"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"One can customize `HttpAuthenticationMechanism` by registering a CDI implementation bean.\n"
"In the example below the custom authenticator delegates to `JWTAuthMechanism` provided by `quarkus-smallrye-jwt`:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"The `HttpAuthenticationMechanism` should transform incoming HTTP request with suitable authentication credentials\n"
"into an `io.quarkus.security.identity.request.AuthenticationRequest` instance and delegate the authentication to the `io.quarkus.security.identity.IdentityProviderManager`.\n"
"Leaving authentication to the ``io.quarkus.security.identity.IdentityProvider``s gives you more options for credentials verifications,\n"
"as well as convenient way to perform blocking tasks.\n"
"Nevertheless, the `io.quarkus.security.identity.IdentityProvider` can be omitted and the `HttpAuthenticationMechanism` is free to authenticate request on its own in trivial use cases."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Dealing with more than one HttpAuthenticationMechanism"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "More than one `HttpAuthenticationMechanism` can be combined, for example, the built-in `Basic` or `JWT` mechanism provided by `quarkus-smallrye-jwt` has to be used to verify the service clients credentials passed as the HTTP `Authorization` `Basic` or `Bearer` scheme values while the `Authorization Code` mechanism provided by `quarkus-oidc` has to be used to authenticate the users with Keycloak or other OpenID Connect providers."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "In such cases the mechanisms are asked to verify the credentials in turn until a `SecurityIdentity` is created. The mechanisms are sorted in the descending order using their priority. `Basic` authentication mechanism has the highest priority of `2000`, followed by the `Authorization Code` one with the priority of `1001`, with all other mechanisms provided by Quarkus having the priority of `1000`."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "If no credentials are provided then the mechanism specific challenge is created, for example, `401` status is returned by either `Basic` or `JWT` mechanisms, URL redirecting the user to the OpenID Connect provider is returned by `quarkus-oidc`, etc."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "So if `Basic` and `Authorization Code` mechanisms are combined then `401` will be returned if no credentials are provided and if `JWT` and `Authorization Code` mechanisms are combined then a redirect URL will be returned."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "In some cases such a default logic of selecting the challenge is exactly what is required by a given application, but sometimes it may not meet the requirements. In such cases (or indeed in other similar cases where you'd like to change the order in which the mechanisms are asked to handle the current authentication or challenge request), you can create a custom mechanism and choose which mechanism should create a challenge, for example:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Declaring the mechanism an alternative bean ensures this mechanism is used rather than `OidcAuthenticationMechanism` and `JWTAuthMechanism`."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Security Identity Customization"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Internally, the identity providers create and update an instance of the `io.quarkus.security.identity.SecurityIdentity` class which holds the principal, roles, credentials which were used to authenticate the client (user) and other security attributes. An easy option to customize `SecurityIdentity` is to register a custom `SecurityIdentityAugmentor`. For example, the augmentor below adds an addition role:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Augment the security identity. See the <<security-augmentation-request-context>> section for an example of how to augment the identity in a blocking mode."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Here is another example showing how to use the client certificate available in the current xref:security-authentication-mechanisms.adoc#mutual-tls[mutual TLS (mTLS) authentication] request to add more roles:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"If more than one custom `SecurityIdentityAugmentor` is registered then they will be considered equal candidates and invoked in random order.\n"
"You can enforce the order by implementing a default `SecurityIdentityAugmentor#priority` method. Augmentors with higher priorities will be invoked first."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Activate Request Context"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"By default, the request context is not activated when augmenting the security identity, this means that if you want to use for example Hibernate\n"
"that mandates a request context, you will have a `jakarta.enterprise.context.ContextNotActiveException`."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Please also review the xref:security-proactive-authentication.adoc#cdi-request-context-activation[Activating the CDI request context] section of the \"Proactive authentication\" guide."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "The solution is to activate the request context, the following example shows how to get the roles from an Hibernate with Panache `UserRoleEntity`."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"The CDI request context activation shown in the example above does not help you to access the `RoutingContext` when the proactive authentication is enabled.\n"
"The following example illustrates how you can access the `RoutingContext` from the `SecurityIdentityAugmentor`:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "The `RoutingContext` is not be available when the `SecurityIdentity` is augmented after HTTP request has completed."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"If you implemented a custom `HttpAuthenticationMechanism`, then you need to add the `RoutingContext` to the authentication\n"
"request attributes with the `io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.setRoutingContextAttribute` method call.\n"
"Otherwise, the `RoutingContext` will not be available during augmentation."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Custom Jakarta REST SecurityContext"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "If you use Jakarta REST `ContainerRequestFilter` to set a custom Jakarta REST `SecurityContext` then make sure `ContainerRequestFilter` runs in the Jakarta REST pre-match phase by adding a `@PreMatching` annotation to it for this custom security context to be linked with Quarkus `SecurityIdentity`, for example:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Disabling Authorization"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "If you have a good reason to disable the authorization then you can register a custom `AuthorizationController`:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "For manual testing Quarkus provides a convenient config property to disable authorization in dev mode. This property has the exact same effect as the custom `AuthorizationController` shown above, but is only available in dev mode:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Please also see xref:security-testing.adoc#testing-security[TestingSecurity Annotation] section on how to disable the security checks using `TestSecurity` annotation."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Registering Security Providers"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Default providers"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"When running in native mode, the default behavior for GraalVM native executable generation is to only include the main \"SUN\" provider\n"
"unless you have enabled SSL, in which case all security providers are registered. If you are not using SSL, then you can selectively\n"
"register security providers by name using the `quarkus.security.security-providers` property. The following example illustrates\n"
"configuration to register the \"SunRsaSign\" and \"SunJCE\" security providers:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Example Security Providers Configuration"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "BouncyCastle"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jce.provider.BouncyCastleProvider` JCE provider then please set a `BC` provider name:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Example Security Providers BouncyCastle Configuration"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "and add the BouncyCastle provider dependency:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "BouncyCastle JSSE"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it instead of the default SunJSSE provider then please set a `BCJSSE` provider name:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Example Security Providers BouncyCastle JSSE Configuration"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "and add the BouncyCastle TLS dependency:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "BouncyCastle FIPS"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE provider then please set a `BCFIPS` provider name:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Example Security Providers BouncyCastle FIPS Configuration"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "and add the BouncyCastle FIPS provider dependency:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"`BCFIPS` provider option is supported in native image but the algorithm self-tests which rely on `java.security.SecureRandom` to verify the generated keys have been removed for these tests to pass. The following classes have been affected:\n"
"- `org.bouncycastle.crypto.general.DSA`\n"
"- `org.bouncycastle.crypto.general.DSTU4145`\n"
"- `org.bouncycastle.crypto.general.ECGOST3410`\n"
"- `org.bouncycastle.crypto.general.GOST3410`\n"
"- `org.bouncycastle.crypto.fips.FipsDSA`\n"
"- `org.bouncycastle.crypto.fips.FipsEC`\n"
"- `org.bouncycastle.crypto.fips.FipsRSA`"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "BouncyCastle JSSE FIPS"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it in combination with `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` instead of the default SunJSSE provider then please set a `BCFIPSJSSE` provider name:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Example Security Providers BouncyCastle FIPS JSSE Configuration"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "and the BouncyCastle TLS dependency optimized for using the BouncyCastle FIPS provider:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"Note that the keystore and truststore type and provider are set to `BCFKS` and `BCFIPS`.\n"
"One can generate a keystore with this type and provider like this:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "`BCFIPSJSSE` provider option is currently not supported in native image."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "SunPKCS11"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "`SunPKCS11` provider provides a bridge to specific `PKCS#11` implementations such as cryptographic smartcards and other Hardware Security Modules, Network Security Services in FIPS mode, etc."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Typically, in order to work with `SunPKCS11`, one needs to install a `PKCS#11` implementation, generate a configuration which usually refers to a shared library, token slot, etc and write the following Java code:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "In Quarkus you can achieve the same at the configuration level only without having to modify the code, for example:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Note that while accessing the `SunPKCS11` bridge provider is supported in native image, configuring `SunPKCS11` is currently not supported in native image at the Quarkus level."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Reactive Security"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "If you are going to use security in a reactive environment, you will likely need SmallRye Context Propagation:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"This will allow you to propagate the identity throughout the reactive callbacks. You also need to make sure you\n"
"are using an executor that is capable of propagating the identity (e.g. no `CompletableFuture.supplyAsync`),\n"
"to make sure that Quarkus can propagate it. For more information see the\n"
"xref:context-propagation.adoc[Context Propagation Guide]."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Observe security events"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"Quarkus beans can use xref:cdi.adoc#events-and-observers[CDI observers] to consume authentication and authorization security events.\n"
"The observers can be either synchronous or asynchronous."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "List of supported security events"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.security.spi.runtime.AuthenticationFailureEvent`"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.security.spi.runtime.AuthenticationSuccessEvent`"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.security.spi.runtime.AuthorizationFailureEvent`"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.security.spi.runtime.AuthorizationSuccessEvent`"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.oidc.SecurityEvent`"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.vertx.http.runtime.security.FormAuthenticationEvent`"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"For more information about security events specific to the Quarkus OpenID Connect extension, please see\n"
"the xref:security-oidc-code-flow-authentication.adoc#listen-to-authentication-events[Listening to important authentication events]\n"
"section of the OIDC code flow mechanism for protecting web applications guide."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"This observer consumes all the `AuthenticationSuccessEvent` events asynchronously, which means that HTTP request processing will continue regardless on the event processing.\n"
"Depending on the application, that can be a lot of the `AuthenticationSuccessEvent` events.\n"
"For that reason, asynchronous processing can have positive effect on performance."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "Common code for all supported security event types is possible because they all implement the `io.quarkus.security.spi.runtime.SecurityEvent` interface."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "`SecurityIdentity` injection in Vert.x route handlers"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"When you need to inject `SecurityIdentity` in a Vert.x route handler registered directly on the xref:reactive-routes.adoc#using-vertx-web-router[Vert.x Web Router], then requesting the `SecurityIdentity` propagation is required.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "The `UserInformation` bean in the example can look like this:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "For the `SecurityIdentity` injection in this example to work, you must activate the `SecurityIdentity` propagation:"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"Propagate the `SecurityIdentity` when a Vert.x route handler is registered programmatically on the Vert.x HTTP router.\n"
"It is required because Quarkus cannot detect that the `SecurityIdentity` injection point is used in the programmatically registered Vert.x route handler.\n"
"For the routes registered declaratively with the `@Route` annotation as well as Jakarta REST endpoints, this configuration is not required."
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "xref:security-architecture.adoc[Quarkus Security architecture]"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "xref:security-authentication-mechanisms.adoc#other-supported-authentication-mechanisms[Authentication mechanisms in Quarkus]"
msgstr ""

#: _versions/3.27/guides/security-customization.adoc
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr ""
