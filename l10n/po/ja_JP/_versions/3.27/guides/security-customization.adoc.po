msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-customization.adoc
msgid "Security Tips and Tricks"
msgstr "セキュリティに関するヒントとコツ"

#: _versions/3.27/guides/security-customization.adoc
msgid "Quarkus Security Dependency"
msgstr "Quarkus Security依存関係"

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus:quarkus-security` module contains the core Quarkus Security classes."
msgstr "`io.quarkus:quarkus-security` モジュールには、Quarkus Securityの中核となるクラスが含まれています。"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"In most cases, it does not have to be added directly to your project's build file as it is already provided by all the security extensions.\n"
"However, if you need to write your own custom security code (for example, register a <<jaxrs-security-context,Custom Jakarta REST SecurityContext>>) or use <<bouncy-castle,BouncyCastle>> libraries, then please make sure it is included:"
msgstr "すべてのセキュリティエクステンションですでに提供されているので、ほとんどの場合プロジェクトのビルドファイルに直接追加する必要はありません。しかし、独自のセキュリティコードを書いたり（例えば、 xref:jaxrs-security-context[Custom Jakarta REST SecurityContext] を登録したり）、 xref:bouncy-castle[BouncyCastle] ライブラリを使用する必要がある場合は、必ずインクルードしてください："

#: _versions/3.27/guides/security-customization.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/security-customization.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/security-customization.adoc
msgid "HttpAuthenticationMechanism Customization"
msgstr "HttpAuthenticationMechanism のカスタマイズ"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"One can customize `HttpAuthenticationMechanism` by registering a CDI implementation bean.\n"
"In the example below the custom authenticator delegates to `JWTAuthMechanism` provided by `quarkus-smallrye-jwt`:"
msgstr "CDI実装Beanを登録することで、 `HttpAuthenticationMechanism` をカスタマイズすることができます。以下の例では、カスタム認証機能は `quarkus-smallrye-jwt` によって提供される `JWTAuthMechanism` にデリゲートします。"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"The `HttpAuthenticationMechanism` should transform incoming HTTP request with suitable authentication credentials\n"
"into an `io.quarkus.security.identity.request.AuthenticationRequest` instance and delegate the authentication to the `io.quarkus.security.identity.IdentityProviderManager`.\n"
"Leaving authentication to the ``io.quarkus.security.identity.IdentityProvider``s gives you more options for credentials verifications,\n"
"as well as convenient way to perform blocking tasks.\n"
"Nevertheless, the `io.quarkus.security.identity.IdentityProvider` can be omitted and the `HttpAuthenticationMechanism` is free to authenticate request on its own in trivial use cases."
msgstr "`HttpAuthenticationMechanism` は、適切な認証クレデンシャルを持つHTTPリクエストを `io.quarkus.security.identity.request.AuthenticationRequest` インスタンスに変換し、認証を `io.quarkus.security.identity.IdentityProviderManager` に委譲する必要があります。認証を `io.quarkus.security.identity.IdentityProvider` に委ねることで、クレデンシャル検証のオプションが増えるだけでなく、 ブロッキングタスクを実行する便利な方法が得られます。とはいえ、 `io.quarkus.security.identity.IdentityProvider` を省略することもできますし、 `HttpAuthenticationMechanism` はそれ自身でリクエストを認証することもできます。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Dealing with more than one HttpAuthenticationMechanism"
msgstr "複数のHttpAuthenticationMechanism処理"

#: _versions/3.27/guides/security-customization.adoc
msgid "More than one `HttpAuthenticationMechanism` can be combined, for example, the built-in `Basic` or `JWT` mechanism provided by `quarkus-smallrye-jwt` has to be used to verify the service clients credentials passed as the HTTP `Authorization` `Basic` or `Bearer` scheme values while the `Authorization Code` mechanism provided by `quarkus-oidc` has to be used to authenticate the users with Keycloak or other OpenID Connect providers."
msgstr "複数の `HttpAuthenticationMechanism` は組み合わせて使っていくことができます。例えば、HTTP `Authorization` `Basic` または `Bearer` スキーム値として渡されたサービスクライアントの資格情報を検証するためには、 `quarkus-smallrye-jwt` によって提供される `Basic` または `JWT` メカニズムを使う必要がありますし、Keycloak やその他の OpenID Connect プロバイダでユーザを認証するには `quarkus-oidc` の `Authorization Code` メカニズムを使用していく必要があります。"

#: _versions/3.27/guides/security-customization.adoc
msgid "In such cases the mechanisms are asked to verify the credentials in turn until a `SecurityIdentity` is created. The mechanisms are sorted in the descending order using their priority. `Basic` authentication mechanism has the highest priority of `2000`, followed by the `Authorization Code` one with the priority of `1001`, with all other mechanisms provided by Quarkus having the priority of `1000`."
msgstr "このような場合、 `SecurityIdentity` が作成されるまで、メカニズムが順番にクレデンシャルを検証するように要求されます。認証メカニズムは、優先度の降順でソートされています。 `Basic` 認証メカニズムの優先順位は最高で `2000` 、次いで `Authorization Code` の優先順位は `1001` 、Quarkus が提供する他のすべてのメカニズムの優先順位は `1000` となっています。"

#: _versions/3.27/guides/security-customization.adoc
msgid "If no credentials are provided then the mechanism specific challenge is created, for example, `401` status is returned by either `Basic` or `JWT` mechanisms, URL redirecting the user to the OpenID Connect provider is returned by `quarkus-oidc`, etc."
msgstr "例えば、 `401` ステータスは `Basic` または `JWT` のいずれかのメカニズムによって返され、ユーザーを `OpenId Connect` プロバイダにリダイレクトする URL は `quarkus-oidc` によって返されるなど、認証情報が提供されない場合はメカニズム固有のチャレンジが作成されます。"

#: _versions/3.27/guides/security-customization.adoc
msgid "So if `Basic` and `Authorization Code` mechanisms are combined then `401` will be returned if no credentials are provided and if `JWT` and `Authorization Code` mechanisms are combined then a redirect URL will be returned."
msgstr "つまり、 `Basic` と `Authorization Code` の仕組みが組み合わされた場合、認証情報が提供されなければ `401` が返され、 `JWT` と `Authorization Code` の仕組みが組み合わされた場合、リダイレクト URL が返されることになります。"

#: _versions/3.27/guides/security-customization.adoc
msgid "In some cases such a default logic of selecting the challenge is exactly what is required by a given application, but sometimes it may not meet the requirements. In such cases (or indeed in other similar cases where you'd like to change the order in which the mechanisms are asked to handle the current authentication or challenge request), you can create a custom mechanism and choose which mechanism should create a challenge, for example:"
msgstr "このようなデフォルトのチャレンジ選択ロジックが、あるアプリケーションでまさに必要とされる場合もありますが、時には要件を満たさない場合もあります。そのような場合（あるいは、メカニズムが現在の認証またはチャレンジ要求を処理するように求められる順序を変更したい他の同様の場合）、カスタムメカニズムを作成し、どのメカニズムがチャレンジを作成すべきかを選択することができます。 :"

#: _versions/3.27/guides/security-customization.adoc
msgid "Declaring the mechanism an alternative bean ensures this mechanism is used rather than `OidcAuthenticationMechanism` and `JWTAuthMechanism`."
msgstr "メカニズムを代替Beanとして宣言することで、 `OidcAuthenticationMechanism` や `JWTAuthMechanism` ではなく、このメカニズムが使用されることが保証されます。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Security Identity Customization"
msgstr "セキュリティー・アイデンティティのカスタマイズ"

#: _versions/3.27/guides/security-customization.adoc
msgid "Internally, the identity providers create and update an instance of the `io.quarkus.security.identity.SecurityIdentity` class which holds the principal, roles, credentials which were used to authenticate the client (user) and other security attributes. An easy option to customize `SecurityIdentity` is to register a custom `SecurityIdentityAugmentor`. For example, the augmentor below adds an addition role:"
msgstr "内部的には、アイデンティティ・プロバイダは、プリンシパル、役割、クライアント(ユーザー)の認証に使用されたクレデンシャル、 およびその他のセキュリティー属性を保持する `io.quarkus.security.identity.SecurityIdentity` クラスのインスタンスを作成して更新します。 `SecurityIdentity` をカスタマイズする簡単なオプションは、カスタム `SecurityIdentityAugmentor` を登録することです。例えば、以下のエクステンションは、追加のロールを追加します。"

#: _versions/3.27/guides/security-customization.adoc
#, fuzzy
msgid "Augment the security identity. See the <<security-augmentation-request-context>> section for an example of how to augment the identity in a blocking mode."
msgstr "セキュリティ ID を補強します。ブロッキング・モードで ID を拡張する方法の例については、 <<security-augmentation-request-context>> セクションを参照してください。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Here is another example showing how to use the client certificate available in the current xref:security-authentication-mechanisms.adoc#mutual-tls[mutual TLS (mTLS) authentication] request to add more roles:"
msgstr "以下に、現在の xref:security-authentication-mechanisms.adoc#mutual-tls[相互 TLS (mTLS) 認証] リクエストで使用可能なクライアント証明書を使用して、さらにロールを追加する方法を示す別の例を示します："

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"If more than one custom `SecurityIdentityAugmentor` is registered then they will be considered equal candidates and invoked in random order.\n"
"You can enforce the order by implementing a default `SecurityIdentityAugmentor#priority` method. Augmentors with higher priorities will be invoked first."
msgstr "複数のカスタム `SecurityIdentityAugmentor` が登録されている場合、それらは同等の候補とみなされ、ランダムな順序で呼び出されます。デフォルトの `SecurityIdentityAugmentor#priority` メソッドを実装することで順番を強制することができます。優先度の高いAugmentors が最初に起動されます。"

#: _versions/3.27/guides/security-customization.adoc
#, fuzzy
msgid "Activate Request Context"
msgstr "リクエストコンテキストのアクティブ化"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"By default, the request context is not activated when augmenting the security identity, this means that if you want to use for example Hibernate\n"
"that mandates a request context, you will have a `jakarta.enterprise.context.ContextNotActiveException`."
msgstr "デフォルトでは、セキュリティ・アイデンティティーを拡張する際に、リクエストコンテキストは有効になりません。これは、リクエストコンテキストを必須とするHibernateなどを使用したい場合、 `jakarta.enterprise.context.ContextNotActiveException` が発生することを意味します。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Please also review the xref:security-proactive-authentication.adoc#cdi-request-context-activation[Activating the CDI request context] section of the \"Proactive authentication\" guide."
msgstr "「プロアクティブ認証」ガイドの xref:security-proactive-authentication.adoc#cdi-request-context-activation[CDI リクエスト・コンテキストのアクティブ化] セクションも参照してください。"

#: _versions/3.27/guides/security-customization.adoc
msgid "The solution is to activate the request context, the following example shows how to get the roles from an Hibernate with Panache `UserRoleEntity`."
msgstr "解決策は、リクエストコンテキストをアクティブにすることです。次の例では、Hibernate with Panache `UserRoleEntity` からロールを取得する方法を示しています。"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"The CDI request context activation shown in the example above does not help you to access the `RoutingContext` when the proactive authentication is enabled.\n"
"The following example illustrates how you can access the `RoutingContext` from the `SecurityIdentityAugmentor`:"
msgstr ""
"プロアクティブ認証が有効な場合、上記の例で示したCDIリクエストコンテキストのアクティブ化は、 `RoutingContext` へのアクセスには役立ちません。\n"
"次の例は、 `SecurityIdentityAugmentor` から `RoutingContext` にアクセスする方法を示しています："

#: _versions/3.27/guides/security-customization.adoc
msgid "The `RoutingContext` is not be available when the `SecurityIdentity` is augmented after HTTP request has completed."
msgstr "HTTPリクエストが完了した後、 `SecurityIdentity` がオーグメンテーションされると、 `RoutingContext` は利用できなくなります。"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"If you implemented a custom `HttpAuthenticationMechanism`, then you need to add the `RoutingContext` to the authentication\n"
"request attributes with the `io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.setRoutingContextAttribute` method call.\n"
"Otherwise, the `RoutingContext` will not be available during augmentation."
msgstr ""
"カスタム `HttpAuthenticationMechanism` を実装した場合は、 `io.quarkus.vertx.http.runtime.security.HttpSecurityUtils.setRoutingContextAttribute` メソッド呼び出しで認証リクエスト属性に `RoutingContext` を追加する必要があります。\n"
"そうしないと、オーグメンテーション中に `RoutingContext` を使用できなくなります。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Custom Jakarta REST SecurityContext"
msgstr "カスタムJakarta REST SecurityContext"

#: _versions/3.27/guides/security-customization.adoc
msgid "If you use Jakarta REST `ContainerRequestFilter` to set a custom Jakarta REST `SecurityContext` then make sure `ContainerRequestFilter` runs in the Jakarta REST pre-match phase by adding a `@PreMatching` annotation to it for this custom security context to be linked with Quarkus `SecurityIdentity`, for example:"
msgstr "Jakarta REST `ContainerRequestFilter` を使用してカスタムの Jakarta REST `SecurityContext` を設定する場合、このカスタムのセキュリティコンテキストを Quarkus `SecurityIdentity` とリンクさせるために `@PreMatching` アノテーションを追加するなどして、 Jakarta REST の事前一致フェーズで `ContainerRequestFilter` が実行されるようにします:"

#: _versions/3.27/guides/security-customization.adoc
msgid "Disabling Authorization"
msgstr "認可の無効化"

#: _versions/3.27/guides/security-customization.adoc
msgid "If you have a good reason to disable the authorization then you can register a custom `AuthorizationController`:"
msgstr "認可を無効にする正当な理由がある場合(テスト時など)は、カスタムの `AuthorizationController` を登録してください。 :"

#: _versions/3.27/guides/security-customization.adoc
msgid "For manual testing Quarkus provides a convenient config property to disable authorization in dev mode. This property has the exact same effect as the custom `AuthorizationController` shown above, but is only available in dev mode:"
msgstr "手動テストのために、Quarkusは、開発モードで認証を無効にする便利な設定プロパティを提供します。このプロパティは、上記のカスタム `AuthorizationController` とまったく同じ効果を持ちますが、開発モードでのみ利用可能です。 :"

#: _versions/3.27/guides/security-customization.adoc
msgid "Please also see xref:security-testing.adoc#testing-security[TestingSecurity Annotation] section on how to disable the security checks using `TestSecurity` annotation."
msgstr "また、 `TestSecurity` アノテーションを使ってセキュリティチェックを無効にする方法については、 link:security-testing.html#testing-security[TestingSecurity Annotation]の項を参照してください。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Registering Security Providers"
msgstr "セキュリティー プロバイダの登録"

#: _versions/3.27/guides/security-customization.adoc
msgid "Default providers"
msgstr "デフォルトのプロバイダ"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"When running in native mode, the default behavior for GraalVM native executable generation is to only include the main \"SUN\" provider\n"
"unless you have enabled SSL, in which case all security providers are registered. If you are not using SSL, then you can selectively\n"
"register security providers by name using the `quarkus.security.security-providers` property. The following example illustrates\n"
"configuration to register the \"SunRsaSign\" and \"SunJCE\" security providers:"
msgstr "ネイティブモードで実行している場合、GraalVMネイティブ実行可能ファイル生成のデフォルトの動作は、SSLを有効にしていない限り、メインの「SUN」プロバイダのみを含めるようになっています。SSLを有効にしている場合は、すべてのセキュリティープロバイダが登録されます。SSLを使用していない場合は、 `quarkus.security.security-providers` プロパティーを使用して、セキュリティープロバイダを名前で選択的に登録することができます。以下の例では、「SunRsaSign」と「SunJCE」のセキュリティープロバイダを登録するための設定を説明します。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Example Security Providers Configuration"
msgstr "セキュリティー プロバイダの設定例"

#: _versions/3.27/guides/security-customization.adoc
msgid "BouncyCastle"
msgstr "BouncyCastle"

#: _versions/3.27/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jce.provider.BouncyCastleProvider` JCE provider then please set a `BC` provider name:"
msgstr "`org.bouncycastle.jce.provider.BouncyCastleProvider` JCE プロバイダを登録する必要がある場合は、 `BC` プロバイダ名を設定してください。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Example Security Providers BouncyCastle Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastleの設定"

#: _versions/3.27/guides/security-customization.adoc
msgid "and add the BouncyCastle provider dependency:"
msgstr "そして、BouncyCastleプロバイダ依存関係を追加します。"

#: _versions/3.27/guides/security-customization.adoc
msgid "BouncyCastle JSSE"
msgstr "BouncyCastle JSSE"

#: _versions/3.27/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it instead of the default SunJSSE provider then please set a `BCJSSE` provider name:"
msgstr "`org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE プロバイダを登録して、デフォルトの SunJSSE プロバイダの代わりに使用する必要がある場合は、 `BCJSSE` プロバイダ名を設定してください。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Example Security Providers BouncyCastle JSSE Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastle JSSE設定"

#: _versions/3.27/guides/security-customization.adoc
msgid "and add the BouncyCastle TLS dependency:"
msgstr "そして、BouncyCastleのTLS依存関係を追加します。"

#: _versions/3.27/guides/security-customization.adoc
msgid "BouncyCastle FIPS"
msgstr "BouncyCastle FIPS"

#: _versions/3.27/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE provider then please set a `BCFIPS` provider name:"
msgstr "`org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` JCE プロバイダを登録する必要がある場合は、 `BCFIPS` プロバイダ名を設定してください。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Example Security Providers BouncyCastle FIPS Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastleのFIPS設定"

#: _versions/3.27/guides/security-customization.adoc
msgid "and add the BouncyCastle FIPS provider dependency:"
msgstr "そして、BouncyCastle FIPSプロバイダの依存関係を追加します。"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"`BCFIPS` provider option is supported in native image but the algorithm self-tests which rely on `java.security.SecureRandom` to verify the generated keys have been removed for these tests to pass. The following classes have been affected:\n"
"- `org.bouncycastle.crypto.general.DSA`\n"
"- `org.bouncycastle.crypto.general.DSTU4145`\n"
"- `org.bouncycastle.crypto.general.ECGOST3410`\n"
"- `org.bouncycastle.crypto.general.GOST3410`\n"
"- `org.bouncycastle.crypto.fips.FipsDSA`\n"
"- `org.bouncycastle.crypto.fips.FipsEC`\n"
"- `org.bouncycastle.crypto.fips.FipsRSA`"
msgstr ""
"`BCFIPS` プロバイダー・オプションはネイティブ・イメージでサポートされていますが、生成されたキーを検証するために に依存していたアルゴリズムのセルフテストは、これらのテストに合格するために削除されました。以下のクラスが影響を受けています:\n"
"- `org.bouncycastle.crypto.general.DSA`\n"
"- `org.bouncycastle.crypto.general.DSTU4145`\n"
"- `org.bouncycastle.crypto.general.ECGOST3410`\n"
"- `org.bouncycastle.crypto.general.GOST3410`\n"
"- `org.bouncycastle.crypto.fips.FipsDSA`\n"
"- `org.bouncycastle.crypto.fips.FipsEC`\n"
"- `org.bouncycastle.crypto.fips.FipsRSA`"

#: _versions/3.27/guides/security-customization.adoc
msgid "BouncyCastle JSSE FIPS"
msgstr "BouncyCastle JSSE FIPS"

#: _versions/3.27/guides/security-customization.adoc
msgid "If you need to register an `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSE provider and use it in combination with `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` instead of the default SunJSSE provider then please set a `BCFIPSJSSE` provider name:"
msgstr "デフォルトのSunJSSEプロバイダではなく、 `org.bouncycastle.jsse.provider.BouncyCastleJsseProvider` JSSEプロバイダを登録して、 `org.bouncycastle.jcajce.provider.BouncyCastleFipsProvider` と組み合わせて使用する必要がある場合は、 `BCFIPSJSSE` プロバイダ名を設定してください。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Example Security Providers BouncyCastle FIPS JSSE Configuration"
msgstr "セキュリティープロバイダの例 BouncyCastle FIPS JSSE設定"

#: _versions/3.27/guides/security-customization.adoc
msgid "and the BouncyCastle TLS dependency optimized for using the BouncyCastle FIPS provider:"
msgstr "そして、BouncyCastle FIPSプロバイダを使用するために最適化されたBouncyCastle TLS依存関係:"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"Note that the keystore and truststore type and provider are set to `BCFKS` and `BCFIPS`.\n"
"One can generate a keystore with this type and provider like this:"
msgstr "keystore と truststore のタイプとプロバイダが `BCFKS` と `BCFIPS` に設定されていることに注意してください。このタイプとプロバイダでは、以下のようにキーストアを生成することができます。"

#: _versions/3.27/guides/security-customization.adoc
msgid "`BCFIPSJSSE` provider option is currently not supported in native image."
msgstr "`BCFIPSJSSE` プロバイダーオプションは、現在ネイティブイメージではサポートされていません。"

#: _versions/3.27/guides/security-customization.adoc
msgid "SunPKCS11"
msgstr "SunPKCS11"

#: _versions/3.27/guides/security-customization.adoc
msgid "`SunPKCS11` provider provides a bridge to specific `PKCS#11` implementations such as cryptographic smartcards and other Hardware Security Modules, Network Security Services in FIPS mode, etc."
msgstr "`SunPKCS11` プロバイダーは、暗号化スマートカードやその他のハードウェアセキュリティモジュール、FIPSモードのネットワークセキュリティサービスなど、特定の `PKCS#11` 実装へのブリッジを提供します。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Typically, in order to work with `SunPKCS11`, one needs to install a `PKCS#11` implementation, generate a configuration which usually refers to a shared library, token slot, etc and write the following Java code:"
msgstr "通常、 `SunPKCS11` を扱うには、 `PKCS#11` の実装をインストールし、共有ライブラリやトークンスロットなどを参照する設定を生成し、以下のJavaコードを記述する必要があります。 :"

#: _versions/3.27/guides/security-customization.adoc
msgid "In Quarkus you can achieve the same at the configuration level only without having to modify the code, for example:"
msgstr "Quarkusでは、例えばコードを修正することなく、設定レベルのみで同じことを実現することができます。 :"

#: _versions/3.27/guides/security-customization.adoc
msgid "Note that while accessing the `SunPKCS11` bridge provider is supported in native image, configuring `SunPKCS11` is currently not supported in native image at the Quarkus level."
msgstr "`SunPKCS11` ブリッジプロバイダへのアクセスはネイティブイメージでサポートされていますが、 `SunPKCS11` の設定は現在 Quarkus レベルでネイティブイメージでサポートされていないことに注意してください。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Reactive Security"
msgstr "Reactive Security"

#: _versions/3.27/guides/security-customization.adoc
msgid "If you are going to use security in a reactive environment, you will likely need SmallRye Context Propagation:"
msgstr "リアクティブな環境でセキュリティーを使用する場合は、SmallRye Context Propagationが必要になるでしょう。"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"This will allow you to propagate the identity throughout the reactive callbacks. You also need to make sure you\n"
"are using an executor that is capable of propagating the identity (e.g. no `CompletableFuture.supplyAsync`),\n"
"to make sure that Quarkus can propagate it. For more information see the\n"
"xref:context-propagation.adoc[Context Propagation Guide]."
msgstr "これにより、リアクティブコールバック全体にアイデンティティを伝搬させることができます。また、Quarkusがアイデンティティを伝搬できることを確かにするために、アイデンティティを伝搬できるエグゼキューターを使用していることを確認する必要があります（例:  `CompletableFuture.supplyAsync`  を使用しない場合）。詳細については、 link:context-propagation.html[Context Propagation Guide]を参照してください。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Observe security events"
msgstr "セキュリティイベントの監視"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"Quarkus beans can use xref:cdi.adoc#events-and-observers[CDI observers] to consume authentication and authorization security events.\n"
"The observers can be either synchronous or asynchronous."
msgstr ""
"Quarkus Beanは、 xref:cdi.adoc#events-and-observers[CDIオブザーバー] を使用して、認証や認可のセキュリティイベントを消費することができます。\n"
"オブザーバは同期でも非同期でもかまいません。"

#: _versions/3.27/guides/security-customization.adoc
msgid "List of supported security events"
msgstr "サポートされているセキュリティイベントのリスト"

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.security.spi.runtime.AuthenticationFailureEvent`"
msgstr "`io.quarkus.security.spi.runtime.AuthenticationFailureEvent`"

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.security.spi.runtime.AuthenticationSuccessEvent`"
msgstr "`io.quarkus.security.spi.runtime.AuthenticationSuccessEvent`"

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.security.spi.runtime.AuthorizationFailureEvent`"
msgstr "`io.quarkus.security.spi.runtime.AuthorizationFailureEvent`"

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.security.spi.runtime.AuthorizationSuccessEvent`"
msgstr "`io.quarkus.security.spi.runtime.AuthorizationSuccessEvent`"

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.oidc.SecurityEvent`"
msgstr "`io.quarkus.oidc.SecurityEvent`"

#: _versions/3.27/guides/security-customization.adoc
msgid "`io.quarkus.vertx.http.runtime.security.FormAuthenticationEvent`"
msgstr "`io.quarkus.vertx.http.runtime.security.FormAuthenticationEvent`"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"For more information about security events specific to the Quarkus OpenID Connect extension, please see\n"
"the xref:security-oidc-code-flow-authentication.adoc#listen-to-authentication-events[Listening to important authentication events]\n"
"section of the OIDC code flow mechanism for protecting web applications guide."
msgstr "Quarkus OpenID Connectエクステンション固有のセキュリティイベントの詳細については、Webアプリケーションを保護するためのOIDCコードフローメカニズムガイドの xref:security-oidc-code-flow-authentication.adoc#listen-to-authentication-events[重要な認証イベントのリスニング] セクションを参照してください。"

#: _versions/3.27/guides/security-customization.adoc
msgid ""
"This observer consumes all the `AuthenticationSuccessEvent` events asynchronously, which means that HTTP request processing will continue regardless on the event processing.\n"
"Depending on the application, that can be a lot of the `AuthenticationSuccessEvent` events.\n"
"For that reason, asynchronous processing can have positive effect on performance."
msgstr ""
"このオブザーバーはすべての `AuthenticationSuccessEvent` イベントを非同期に消費します。つまり、HTTP リクエスト処理はイベント処理に関係なく継続されます。\n"
"アプリケーションによっては、 `AuthenticationSuccessEvent` イベントは大量になります。\n"
"そのため、非同期処理はパフォーマンスに良い影響を与えます。"

#: _versions/3.27/guides/security-customization.adoc
msgid "Common code for all supported security event types is possible because they all implement the `io.quarkus.security.spi.runtime.SecurityEvent` interface."
msgstr "サポートされているすべてのセキュリティ・イベント・タイプは、すべて `io.quarkus.security.spi.runtime.SecurityEvent` インターフェースを実装しているので、共通のコードで扱うことが出来ます。"

#: _versions/3.27/guides/security-customization.adoc
#, fuzzy
msgid "`SecurityIdentity` injection in Vert.x route handlers"
msgstr "`SecurityIdentity` Vert.x ルートハンドラのインジェクション"

#: _versions/3.27/guides/security-customization.adoc
#, fuzzy
msgid ""
"When you need to inject `SecurityIdentity` in a Vert.x route handler registered directly on the xref:reactive-routes.adoc#using-vertx-web-router[Vert.x Web Router], then requesting the `SecurityIdentity` propagation is required.\n"
"For example:"
msgstr "Vert. xref:reactive-routes.adoc#using-vertx-web-router[x Web Router] に直接登録された Vert.x ルートハンドラに `SecurityIdentity` を注入する必要がある場合、 `SecurityIdentity` の伝搬をリクエストする必要があります。例えば"

#: _versions/3.27/guides/security-customization.adoc
#, fuzzy
msgid "The `UserInformation` bean in the example can look like this:"
msgstr "例の `UserInformation` ビーンは次のようになります："

#: _versions/3.27/guides/security-customization.adoc
#, fuzzy
msgid "For the `SecurityIdentity` injection in this example to work, you must activate the `SecurityIdentity` propagation:"
msgstr "この例の `SecurityIdentity` インジェクションを動作させるには、 `SecurityIdentity` 伝播を有効にする必要があります："

#: _versions/3.27/guides/security-customization.adoc
#, fuzzy
msgid ""
"Propagate the `SecurityIdentity` when a Vert.x route handler is registered programmatically on the Vert.x HTTP router.\n"
"It is required because Quarkus cannot detect that the `SecurityIdentity` injection point is used in the programmatically registered Vert.x route handler.\n"
"For the routes registered declaratively with the `@Route` annotation as well as Jakarta REST endpoints, this configuration is not required."
msgstr "Vert.x HTTP ルーターで Vert.x ルートハンドラがプログラムにより登録されると、 `SecurityIdentity` を伝搬します。Quarkus では、プログラムで登録された Vert.x ルートハンドラで `SecurityIdentity` 注入ポイントが使用されていることを検出できないため、この処理が必要です。Jakarta REST エンドポイントと同様に、 `@Route` アノテーションを使用して宣言的に登録されたルートでは、この設定は必要ありません。"

#: _versions/3.27/guides/security-customization.adoc
msgid "References"
msgstr "リファレンス"

#: _versions/3.27/guides/security-customization.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

#: _versions/3.27/guides/security-customization.adoc
msgid "xref:security-architecture.adoc[Quarkus Security architecture]"
msgstr "xref:security-architecture.adoc[Quarkus Security アーキテクチャ]"

#: _versions/3.27/guides/security-customization.adoc
msgid "xref:security-authentication-mechanisms.adoc#other-supported-authentication-mechanisms[Authentication mechanisms in Quarkus]"
msgstr "xref:security-authentication-mechanisms.adoc#other-supported-authentication-mechanisms[Quarkusの認証メカニズム]"

#: _versions/3.27/guides/security-customization.adoc
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr "xref:security-identity-providers.adoc[アイデンティティ・プロバイダー]"
