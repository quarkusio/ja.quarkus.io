msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Micrometer and OpenTelemetry extension"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "This extension provides support for both Micrometer and OpenTelemetry in Quarkus applications. It streamlines integration by incorporating both extensions along with a bridge that enables sending Micrometer metrics via OpenTelemetry."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "This document is part of the xref:observability.adoc[Observability in Quarkus reference guide] which features this and other observability related components."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "This extension is available since Quarkus version 3.19."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "The xref:telemetry-micrometer.adoc[Micrometer Guide] is available for detailed information about the Micrometer extension."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "The xref:opentelemetry.adoc[OpenTelemetry Guide] provides information about the OpenTelemetry extension."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "The extension allows the normal use of the Micrometer API, but have the metrics handled by the OpenTelemetry extension."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "As an example, the `@Timed` annotation from Micrometer is used to measure the execution time of a method:"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "The output telemetry data is handled by the OpenTelemetry SDK and sent by the `quarkus-opentelemetry` extension exporter using the OTLP protocol."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "This reduces the overhead of having an independent Micrometer registry plus the OpenTelemetry SDK in memory for the same application when both `quarkus-micrometer` and `quarkus-opentelemetry` extensions are used independently."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "*The OpenTelemetry SDK will handle all metrics.* Either Micrometer metrics (manual or automatic) and OpenTelemetry Metrics can be used. All are available with this single extension."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "All the configurations from the OpenTelemetry and Micrometer extensions are available with `quarkus-micrometer-opentelemetry`."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "The bridge is more than the simple OTLP registry found in Quarkiverse. In this extension, the OpenTelemetry SDK provides a Micrometer registry implementation based on the https://github.com/open-telemetry/opentelemetry-java-instrumentation/tree/main/instrumentation/micrometer/micrometer-1.5/library[`micrometer/micrometer-1.5`] OpenTelemetry instrumentation library."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Usage"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "If you already have your Quarkus project configured, you can add the `quarkus-micrometer-opentelemetry` extension to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Configuration"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "When the extension is present, Micrometer is enabled by default as are OpenTelemetry tracing, metrics and logs."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "OpenTelemetry metrics auto-instrumentation for HTTP server and JVM metrics are disabled by default because those metrics can be  collected by Micrometer."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Specific automatic Micrometer metrics are all disabled by default and can be enabled by setting, for example in the case of JVM metrics:"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "in the `application.properties` file."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "For this and other properties you can use with the extension, Please refer to:"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "xref:telemetry-micrometer.adoc#configuration-reference[Micrometer metrics configuration properties]"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "xref:opentelemetry.adoc#configuration-reference[OpenTelemetry configuration properties]"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Metric differences between Micrometer and OpenTelemetry"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "API differences"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "The metrics produced with each framework follow different APIs and the mapping is not 1:1."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "One fundamental API difference is that Micrometer uses a https://docs.micrometer.io/micrometer/reference/concepts/timers.html[Timer] and OpenTelemetry uses a https://opentelemetry.io/docs/specs/otel/metrics/data-model/#histogram[Histogram] to record latency (execution time) metrics and the frequency of the events."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "When using the `@Timed` annotation with Micrometer, 2 different metrics are https://github.com/open-telemetry/opentelemetry-java-instrumentation/blob/324fdbdd452ddffaf2da2c5bf004d8bb3fdfa1dd/instrumentation/micrometer/micrometer-1.5/library/src/main/java/io/opentelemetry/instrumentation/micrometer/v1_5/OpenTelemetryTimer.java#L31[created on the OpenTelemetry side], one `Gauge` for the `max` value and one `Histogram`."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "The `DistributionSummary` from Micrometer is transformed into a `Histogram` and a `DoubleGauge` for the `max` value. If service level objectives (slo) are set to `true` when creating a `DistributionSummary`, an additional histogram is created for them."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "This table shows the differences between the two frameworks:"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Micrometer"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "OpenTelemetry"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "DistributionSummary"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`<Metric name>` (Histogram), `<Metric name>.max` (DoubleGauge)"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "DistributionSummary with SLOs"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`<Metric name>` (Histogram), `<Metric name>.max` (DoubleGauge), `<Metric name>.histogram` (DoubleGauge)"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "LongTaskTimer"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`<Metric name>.active` (ObservableLongUpDownCounter), `<Metric name>.duration` (ObservableDoubleUpDownCounter)"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Timer"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`<Metric name>` (Histogram), `<Metric name>.max` (ObservableDoubleGauge)"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Semantic convention differences"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "The 2 frameworks follow different semantic conventions. The OpenTelemetry Metrics are based on the https://opentelemetry.io/docs/concepts/semantic-conventions/[OpenTelemetry Semantic Conventions] and are still under active development (early 2025). Micrometer metrics convention format is around for a long time and has not changed much."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "When these 2 configurations are set in the `application.properties` file:"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "The JVM and HTTP server metrics are collected by Micrometer."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Next, are examples of the metrics collected by Micrometer compared with what would be the `quarkus-micrometer-registry-prometheus` endpoint output (`/q/metrics`) vs the OTLP protocol output on this bridge."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "A link to the equivalent OpenTelemetry Semantic Convention is also provided for reference and is not currently used by the bridge."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Micrometer metrics output comparison. Prometheus registry vs. OpenTelemetry bridge"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Micrometer Meter Java definition"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Quarkus Micrometer Prometheus output (as seen at `/q/metrics/`)"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "This bridge OpenTelemetry output name (as seen in the OTLP output)"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Related OpenTelemetry Semantic Convention (not applied)"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Using the xref:telemetry-micrometer#create-a-timer[@Timed] interceptor."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "method.timed (xref:opentelemetry-metrics#histograms[Histogram]), method.timed.max (xref:opentelemetry-metrics#gauges[DoubleGauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "NA"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Using the xref:telemetry-micrometer#counters[@Counted] interceptor."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "method.counted (https://opentelemetry.io/docs/specs/otel/metrics/sdk/#sum-aggregation[DoubleSum])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http.server.active.requests` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http_server_active_requests` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http.server.active.requests` (xref:opentelemetry-metrics#gauges[DoubleGauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#metric-httpserveractive_requests[`http.server.active_requests`] (xref:opentelemetry-metrics#counters[UpDownCounter])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http.server.requests` (Timer)"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http_server_requests_seconds_count`, `http_server_requests_seconds_sum`, `http_server_requests_seconds_max` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http.server.requests` (xref:opentelemetry-metrics#histograms[Histogram]), `http.server.requests.max` (xref:opentelemetry-metrics#gauges[DoubleGauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#metric-httpserverrequestduration[`http.server.request.duration`] (xref:opentelemetry-metrics#histograms[Histogram])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http.server.bytes.read` (xref:telemetry-micrometer#create-a-distribution-summary[DistributionSummary])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http_server_bytes_read_count`, `http_server_bytes_read_sum` , `http_server_bytes_read_max` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http.server.bytes.read` (xref:opentelemetry-metrics#histograms[Histogram]), `http.server.bytes.read.max` (xref:opentelemetry-metrics#gauges[DoubleGauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#metric-httpserverrequestbodysize[`http.server.request.body.size`] (xref:opentelemetry-metrics#histograms[Histogram])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http.server.bytes.write` (xref:telemetry-micrometer#create-a-distribution-summary[DistributionSummary])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http_server_bytes_write_count`, `http_server_bytes_write_sum` , `http_server_bytes_write_max` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http.server.bytes.write` (xref:opentelemetry-metrics#histograms[Histogram]), `http.server.bytes.write.max` (xref:opentelemetry-metrics#gauges[DoubleGauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "https://opentelemetry.io/docs/specs/semconv/http/http-metrics/#metric-httpserverresponsebodysize[`http.server.response.body.size`] (xref:opentelemetry-metrics#histograms[Histogram])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http.server.connections` (https://docs.micrometer.io/micrometer/reference/concepts/long-task-timers.html[LongTaskTimer])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http_server_connections_seconds_active_count`, `http_server_connections_seconds_duration_sum` `http_server_connections_seconds_max` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`http.server.connections.active` (https://opentelemetry.io/docs/specs/otel/metrics/sdk/#sum-aggregation[LongSum]), `http.server.connections.duration` (xref:opentelemetry-metrics#gauges[DoubleGauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "N/A"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm.threads.live` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm_threads_live_threads` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm.threads.live` (xref:opentelemetry-metrics#gauges[DoubleGauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "https://opentelemetry.io/docs/specs/semconv/runtime/jvm-metrics/#metric-jvmthreadcount[`jvm.threads.live`] (xref:opentelemetry-metrics#counters[UpDownCounter])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm.threads.started` (https://docs.micrometer.io/micrometer/reference/concepts/counters.html#_function_tracking_counters[FunctionCounter])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm_threads_started_threads_total` (xref:telemetry-micrometer#counters[Counter])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm.threads.started` (https://opentelemetry.io/docs/specs/otel/metrics/sdk/#sum-aggregation[DoubleSum])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm.threads.daemon` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm_threads_daemon_threads` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm.threads.daemon` (xref:opentelemetry-metrics#gauges[DoubleGauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm.threads.peak` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm_threads_peak_threads` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm.threads.peak` (xref:opentelemetry-metrics#gauges[DoubleGauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm.threads.states` (xref:telemetry-micrometer#gauges[Gauge] per state)"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm_threads_states_threads` (xref:telemetry-micrometer#gauges[Gauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "`jvm.threads.states` (xref:opentelemetry-metrics#gauges[DoubleGauge])"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Some metrics might be missing from the output if they contain no data."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "See the output"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Grafana-OTel-LGTM Dev Service"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "You can use the xref:observability-devservices-lgtm.adoc[Grafana-OTel-LGTM] Dev Service."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid ""
"This Dev Service includes Grafana for visualizing data, Loki to store logs, Tempo to store traces and Prometheus to store metrics.\n"
"It also provides an OTel collector to receive the data"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Logging exporter"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "You can output all metrics to the console by setting the exporter to `logging` in the `application.properties` file:"
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid ""
"Set the exporter to `logging`.\n"
"Normally you don't need to set this.\n"
"The default is `cdi`."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid ""
"Set the interval to export the metrics.\n"
"The default is `1m`, which is too long for debugging."
msgstr ""

#: _versions/3.27/guides/telemetry-micrometer-to-opentelemetry.adoc
msgid "Also add this dependency to your project:"
msgstr ""
