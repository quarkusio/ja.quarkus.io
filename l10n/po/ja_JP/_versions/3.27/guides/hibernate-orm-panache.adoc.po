msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Simplified Hibernate ORM with Panache"
msgstr "Simplified Hibernate ORM with Panache"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate ORM is the de facto Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper.\n"
"It makes complex mappings possible, but it does not make simple and common mappings trivial.\n"
"Hibernate ORM with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr "Hibernate ORMは、デファクトのJakarta Persistence（旧称JPA）実装であり、Object Relational Mapperの全機能を提供するものです。複雑なマッピングを可能にしますが、単純で一般的なマッピングを些細なものにするわけではありません。Hibernate ORM with Panacheは、Quarkusでエンティティを簡単に、楽しく書けるようにすることに重点を置いています。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "First: an example"
msgstr "最初に:例"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "What we're doing in Panache is to allow you to write your Hibernate ORM entities like this:"
msgstr "Panacheでやっていることは、Hibernate ORMエンティティをこのように書けるようにすることです:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is?\n"
"Does this look interesting? Read on!"
msgstr "コードがどれだけコンパクトで読みやすくなっているかお気づきですか?面白いと思いませんか?読んでみてください。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr "`list()` メソッドには、最初は驚くかもしれません。これは HQL (JP-QL) クエリの断片を取り、残りの部分をコンテキスト化します。これにより、非常に簡潔でありながら読みやすいコードになっています。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr "上記で説明したものは、基本的には link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[アクティブレコードパターン] であり、エンティティーパターンと呼ばれることもあります。Hibernate with Panache は、 `PanacheRepository` を通じて、より古典的な link:https://martinfowler.com/eaaCatalog/repository.html[リポジトリパターン] を使用することもできます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The solution is located in the `hibernate-orm-panache-quickstart` link:{quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgstr "ソリューションは `hibernate-orm-panache-quickstart` link:{quickstarts-tree-url}/hibernate-orm-panache-quickstart[ディレクトリ] にあります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Setting up and configuring Hibernate ORM with Panache"
msgstr "PanacheによるHibernate ORMのセットアップと設定"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "To get started:"
msgstr "始めるには"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "add your settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加します。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "annotate your entities with `@Entity`"
msgstr "エンティティに `@Entity` アノテーションを付けます"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr "エンティティが `PanacheEntity` を拡張するようにする（リポジトリパターンを使用している場合は非必須です）"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr "すべての設定は、xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernateセットアップガイド]を確認してください。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "In your build file, add the following dependencies:"
msgstr "以下をビルドファイルに追加してください:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "the Hibernate ORM with Panache extension"
msgstr "Hibernate ORM with Panache エクステンション"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr "お使いの JDBC ドライバーのエクステンション ( `quarkus-jdbc-postgresql` , `quarkus-jdbc-h2` , `quarkus-jdbc-mariadb` , ...)"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、関連する設定プロパティを `{config-file}` に追加します。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Solution 1: using the active record pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Defining your entity"
msgstr "エンティティの定義"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your\n"
"columns as public fields:"
msgstr "Panache エンティティーを定義するには、 `PanacheEntity` を拡張して `@Entity` とアノテーションを付け、列をパブリック フィールドとして追加します。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the\n"
"`@Transient` annotation on it. If you need to write accessors, you can:"
msgstr "publicフィールドには、すべてのJakarta Persistenceのカラムアノテーションを付けることができます。永続化しないフィールドが必要な場合は、 `@Transient` アノテーションをそのフィールドに使用します。アクセサーを書く必要がある場合は、次のようにできます:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor,\n"
"and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "また、当社のフィールドアクセスリライトのおかげで、ユーザーが `person.name` を読むときには、実際に `getName()` アクセサが呼び出されます。これはフィールドの書き込みやセッターについても同様です。これにより、すべてのフィールドの呼び出しが、対応するゲッター/セッターの呼び出しに置き換えられるため、実行時に適切なカプセル化が可能になります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Most useful operations"
msgstr "最も便利な操作"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、ここでは実行できる最も一般的な操作を紹介します。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "All `list` methods have equivalent `stream` versions."
msgstr "すべての `list` メソッドは、同等の `stream` バージョンがあります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The `stream` methods require a transaction to work. +\n"
"As they perform I/O operations, they should be closed via the `close()` method or via a try-with-resource to close the underlying `ResultSet`.\n"
"If not, you will see warnings from Agroal that will close the underlying `ResultSet` for you."
msgstr "`stream` のメソッドは動作にトランザクションを必要とします。 また、これらのメソッドは I/O 操作を行うため `close()` メソッドや try-with-resource を介して基礎となる `ResultSet` を閉じなければなりません。そうしないと、Agroal からの警告が表示され、基礎となる `ResultSet` を閉じてくれます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Adding entity methods"
msgstr "エンティティメソッドの追加"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "エンティティに対するカスタムクエリを、エンティティ自体の中に追加できます。そうすることで、自分や同僚が簡単に見つけることができ、クエリは操作するオブジェクトと一緒に配置されます。エンティティクラスにスタティックメソッドとして追加するのがPanache Active Recordのやり方です。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Solution 2: using the repository pattern"
msgstr "解決策2：リポジトリパターンの使用"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr "リポジトリパターンを使用する場合、エンティティを通常のJakarta Persistenceエンティティとして定義することができます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n"
"Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr "エンティティにゲッター/セッターを定義するのが面倒な場合は、 `PanacheEntityBase` を拡張するようにすればQuarkusが生成してくれます。また、 `PanacheEntity` を拡張して、デフォルトのIDを利用することもできます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Defining your repository"
msgstr "リポジトリの定義"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheRepository`:"
msgstr "リポジトリを使用する場合、 `PanacheRepository` を実装することでアクティブレコードパターンとまったく同じ便利なメソッドをリポジトリにインジェクションできます:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheEntityBase` で定義されている操作はすべてリポジトリ上で利用可能なので、これを使用することはアクティブレコードパターンを使用するのと全く同じですが、それを注入する必要があります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書くことで実行可能な最も一般的な操作は以下の通りです。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `stream` methods require a transaction to work."
msgstr "`stream` メソッドが動作するにはトランザクションが必要です。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr "残りのドキュメントでは、アクティブレコードパターンに基づく使用法のみを示していますが、リポジトリパターンでも実行できることを覚えておいてください。リポジトリパターンの例は簡潔にするために省略しています。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Writing a Jakarta REST resource"
msgstr "Jakarta RESTリソースの書き方"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "First, include one of the Quarkus REST (formerly RESTEasy Reactive) extensions to enable Jakarta REST endpoints, for example, add the `io.quarkus:quarkus-rest-jackson` dependency for Jakarta REST and JSON support."
msgstr "まず、Quarkus REST（旧RESTEasy Reactive）エクステンションのいずれかを追加して、Jakarta RESTエンドポイントを有効にします。たとえば、Jakarta RESTとJSONをサポートする `io.quarkus:quarkus-rest-jackson` 。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "そして、次のようなリソースを作成することで、Personエンティティの作成/読み取り/更新/削除が可能になります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Be careful to use the `@Transactional` annotation on the operations that modify the database,\n"
"you can add the annotation at the class level for simplicity purpose."
msgstr "データベースを変更する操作には `@Transactional` アノテーションを使用するように注意してください。わかりやすくするために、クラスレベルでアノテーションを追加することもできます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "To make it easier to showcase some capabilities of Hibernate ORM with Panache on Quarkus with Dev mode, some test data should be inserted into the database by adding the following content to a new file named src/main/resources/import.sql:"
msgstr "DevモードのQuarkusでHibernate ORM with Panacheの機能を簡単に紹介するために、src/main/resources/import.sqlという新しいファイルに次の内容を追加して、いくつかのテストデータをデータベースに挿入する必要があります:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
#, fuzzy
msgid "If you would like to initialize the DB when you start the Quarkus app in your production environment, add `quarkus.hibernate-orm.schema-management.strategy=drop-and-create` to the Quarkus startup options in addition to `import.sql`."
msgstr "本番環境でQuarkusアプリを起動するときにDBを初期化したい場合は、 `import.sql` に加えて、 `quarkus.hibernate-orm.schema-management.strategy=drop-and-create` をQuarkusの起動オプションに追加します。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "After that, you can see the people list and add new person as followings:"
msgstr "その後、人物リストを表示し、新しい人物を次のように追加することができます:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If you see the Person object as Person<1>, then the object has not been converted. In this case, add the dependency `quarkus-rest-jackson` in `pom.xml`."
msgstr "Person オブジェクトが Person<1> として表示される場合は、オブジェクトが変換されていません。この場合、 `pom.xml` に依存関係 `quarkus-rest-jackson` を追加します。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Advanced Query"
msgstr "アドバンスドクエリー"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Paging"
msgstr "ページング"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You should only use `list` and `stream` methods if your table contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "`list` および `stream` メソッドは、テーブルに含まれるデータセットが十分に小さい場合にのみ使用してください。より大きなデータセットの場合は、同等の `find` メソッドを使用して、ページングが可能な `PanacheQuery` を返すことができます:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 型には、ページングやリターンストリームを処理するための他の多くのメソッドがあります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Using a range instead of pages"
msgstr "ページではなく範囲を使用する"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、範囲ベースのクエリも可能です。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "範囲とページを混在させることはできません。範囲を使用した場合、現在のページを持っていることに依存するすべてのメソッドは `UnsupportedOperationException` をスローします。 `page(Page)` もしくは `page(int, int)` を使用してページングに切り換えられます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Sorting"
msgstr "ソート"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr "クエリー文字列を受け付けるすべてのメソッドは、以下の簡略化されたクエリ形式も受け付けます:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "しかし、これらのメソッドには、オプションで `Sort` というパラメータが用意されており、これによってソートの抽象化が可能になります:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr "`Sort` クラスには、列を追加したり、ソート方向を指定したり、nullの優先順位を指定したりするメソッドが豊富に用意されています。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Simplified queries"
msgstr "シンプルなクエリ"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements\n"
"at the end."
msgstr "通常、HQLのクエリは `from EntityName [where …​] [order by …​]` というように最後にオプションの要素を持つという形式になっています。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If your select query does not start with `from`, `select` or `with`, we support the following additional forms:"
msgstr "セレクトクエリが `from` , `select` , `with` で始まらない場合、以下の追加形式をサポートします："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr "`order by ...` は `from EntityName order by ...` に展開されます"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<singleAttribute>` (and single parameter) which will expand to `from EntityName where <singleAttribute> = ?`"
msgstr "`<singleAttribute>` (および単一のパラメータ) は、 `from EntityName where <singleAttribute> = ?` に展開されます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`where <query>` will expand to `from EntityName where <query>`"
msgstr "`where <query>` は `from EntityName where <query>` に展開されます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr "`<query>` は `from EntityName where <query>` に展開されます"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr "更新クエリが `update` で始まらない場合は、以下の追加の形式をサポートしています:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`from EntityName ...` which will expand to `update EntityName ...`"
msgstr "from EntityName ...` は `update EntityName ...` に展開されます"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`set? <singleAttribute>` (and single parameter) which will expand to `update EntityName set <singleAttribute> = ?`"
msgstr "`set? <singleAttribute>` (および単一のパラメータ) は、 `update EntityName set <singleAttribute> = ?` に展開されます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`set? <update-query>` will expand to `update EntityName set <update-query>`"
msgstr "`set? <update-query>` は `update EntityName set <update-query>` に展開されます"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr "削除クエリが `delete` で始まらない場合は、以下の追加の形式をサポートしています:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr "`from EntityName …​` は `delete from EntityName ...` に展開されます"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<singleAttribute>` (and single parameter) which will expand to `delete from EntityName where <singleAttribute> = ?`"
msgstr "`<singleAttribute>` (および単一のパラメータ) は、 `delete from EntityName where <singleAttribute> = ?` に展開されます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr "`<query>` は `delete from EntityName where <query>` に展開されます"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You can also write your queries in plain\n"
"link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr "また、プレーンな link:{hibernate-orm-docs-url}#hql[HQL] でクエリを記述することもできます："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Named queries"
msgstr "名前付きクエリー"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr "名前付きのクエリーは、その名前の前に「#」文字を付けることで、（簡易）HQLクエリの代わりに参照することができます。また、名前付きのクエリは、カウント、更新、削除のクエリにも使用できます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Named queries can only be defined inside your Jakarta Persistence entity classes,\n"
"or on one of their super classes."
msgstr "名前付きクエリは、Jakarta Persistence エンティティ クラス内、またはそのスーパークラスの 1 つでのみ定義できます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Query parameters"
msgstr "クエリパラメーター"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr "以下のように、インデックス（1ベース）でクエリーパラメーターを渡すことができます:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` を使った名前で、"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または便利なクラスである `Parameters` をそのまま使用するか、 `Map` を構築する。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "すべてのクエリ操作は、インデックス( `Object…​`)または名前( `Map<String,Object>` または `Parameters`)でパラメータを渡すことができます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Query projection"
msgstr "クエリの投影"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "クエリの投影は、 `find()` のメソッドが返す `PanacheQuery` オブジェクトに対して `project(Class)` のメソッドで行うことができます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can use it to restrict which fields will be returned by the database."
msgstr "これを使って、データベースから返されるフィールドを制限することができます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n"
"This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide:\n"
"link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr "Hibernateは *DTOプロジェクション* を使用し、プロジェクションクラスからの属性を持つSELECT句を生成します。これは *動的インスタンス化* または *コンストラクタ式* とも呼ばれ、詳細は Hibernate ガイドの link:{hibernate-orm-docs-url}#hql-select-clause[hql select 節] を参照してください。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The projection class needs to have a constructor that contains all its attributes, this constructor will be used to\n"
"instantiate the projection DTO instead of using the entity class. This class must have a matching constructor with all the class attributes as parameters."
msgstr "射影クラスは、すべての属性を含むコンストラクタを持つ必要があります。このコンストラクタは、エンティティクラスを使用する代わりに、射影のDTOをインスタンス化するために使用されます。このクラスは、すべてのクラス属性をパラメータとして持つコンストラクタを持つ必要があります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するようQuarkusに指示します。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr "ここではパブリックフィールドを使用していますが、必要に応じてプライベートフィールドやゲッター/セッターを使用することもできます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters."
msgstr "このコンストラクタはHibernate によって使用されます。このコンストラクタはクラス内の唯一のコンストラクタであり、パラメータとしてクラスのすべての属性を持つ必要があります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query,\n"
"so the compiler must be configured to store parameter names inside the compiled class.\n"
"This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your `pom.xml`."
msgstr "`project(Class)` メソッドの実装では、コンストラクタのパラメータ名を使用してクエリの select 節を構築するため、コンパイルされたクラスの中にパラメータ名を格納するようにコンパイラを設定する必要があります。Quarkus Mavenアーキタイプを使用している場合はデフォルトで有効になっています。使用していない場合はプロパティ `<maven.compiler.parameters>true</maven.compiler.parameters>` を `pom.xml` に追加してください。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If you run Java 17+, records are a good fit for projection classes."
msgstr "Java 17+を実行する場合、レコード型は投影クラスと相性が良いです。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr "DTO射影のオブジェクトから参照されるエンティティのフィールドがある場合、 `@ProjectedFieldName` アノテーションを使用してSELECT文のパスを提供することができます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr "`ownerName` DTOコンストラクタのパラメータは `owner.name` HQLプロパティから読み込まれます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "In case you want to project an entity in a class with nested classes, you can use the `@NestedProjectedClass` annotation on those nested classes."
msgstr "ネストされたクラスを持つクラスでエンティティを投影したい場合は、それらのネストされたクラスで `@NestedProjectedClass` アノテーションを使用できます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"This annotation can be used when you want to project `@Embedded` entity or `@ManyToOne`, `@OneToOne` relation.\n"
"It does not support `@OneToMany` or `@ManyToMany` relation."
msgstr "このアノテーションは、 `@Embedded` エンティティまたは `@ManyToOne` , `@OneToOne` リレーションを投影する場合に使用できます。 `@OneToMany` または `@ManyToMany` 関係には対応していません。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor\n"
"matching the values returned by the select clause:"
msgstr "また、select句でHQLクエリを指定できます。この場合、射影クラスは、select句が返す値に一致するコンストラクタを持つ必要があります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Hibernate ORM will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr "Hibernate ORM は、このコンストラクタを使用します。クエリが select 節を持つ場合、複数のコンストラクタを持てます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr "HQL の `select new` クエリと `.project(Class)` を同時に使えません。どちらかの方法を選択してください。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "For example, this will fail:"
msgstr "例えば、このような場合、失敗します："

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Multiple Persistence Units"
msgstr "複数の永続性ユニット"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The support for multiple persistence units is described in detail in xref:hibernate-orm.adoc#multiple-persistence-units[the Hibernate ORM guide]."
msgstr "複数の永続化ユニットのサポートについては link:hibernate-orm.html#multiple-persistence-units[Hibernate ORMガイド]で詳しく説明されています。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "When using Panache, things are simple:"
msgstr "Panacheの使い方は簡単です:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "A given Panache entity can be attached to only a single persistence unit."
msgstr "1つのPanacheエンティティは、1つの永続化ユニットにしかアタッチできません。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Given that, Panache already provides the necessary plumbing to transparently find the appropriate `EntityManager` associated to a Panache entity."
msgstr "そう考えると、Panacheはすでに、Panacheエンティティに関連する適切な `EntityManager` を透過的に見つけるために必要な導線を提供しています。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Transactions"
msgstr "トランザクション"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a\n"
"CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing\n"
"so at your application entry point boundaries like your REST endpoint controllers."
msgstr "データベースを変更するメソッド (例: `entity.persist()` ) をトランザクション内でラップするようにしてください。CDI Beanメソッド `@Transactional` をマークすることで、それを実現出来、そのメソッドをトランザクションの境界に出来ます。REST エンドポイントコントローラーのように、アプリケーションのエントリーポイントの境界でこれを行うことをお勧めします。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate ORM batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.\n"
"This is usually a good thing as it is more efficient.\n"
"But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate ORM sends those changes to the database.\n"
"Remember, this is less efficient so don't abuse it.\n"
"And your transaction still has to be committed."
msgstr "Hibernate ORMは、エンティティに加えた変更をバッチして、トランザクションの最後やクエリの前に変更を送信します（これをフラッシュと呼びます）。これは通常、より効率的であるため良いことです。しかし、楽観的なロックの失敗をチェックしたり、オブジェクトの検証をすぐに行ったり、一般的にすぐにフィードバックを得たい場合は、 `entity.flush()` 、あるいは `entity.persistAndFlush()` を使用して単一のメソッド呼び出しにすることで、フラッシュ操作を強制することができます。これにより、Hibernate ORMがデータベースに変更を送信する際に発生する可能性のある `PersistenceException` をキャッチすることができます。しかし、これは効率が悪いので、乱用しないようにしましょう。そして、トランザクションは依然としてコミットされる必要があります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr "ここでは `PersistenceException` が発生した場合に特定の動作を行えるようにするための flush メソッドの使用例を示します:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Lock management"
msgstr "ロック管理"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr "Panacheは `findById(Object, LockModeType)` や `find().withLock(LockModeType)` を使用してエンティティ/リポジトリでデータベースロックを直接サポートします。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr "以下の例はアクティブレコードパターンの場合ですが、リポジトリでも同じように使用できます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "First: Locking using findById()."
msgstr "1つ目: findById()を使ってロックする。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Second: Locking in a find()."
msgstr "2つ目: find()でロックする。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be annotated with the `@Transactional` annotation."
msgstr "トランザクションが終了するとロックが解放されるため、ロッククエリーを呼び出すメソッドには `@Transactional` アノテーションを付ける必要があります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Custom IDs"
msgstr "カスタムID"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we\n"
"have you covered."
msgstr "IDは微妙な問題で、誰もがフレームワークに任せることができるわけではありませんが、今回も私たちはカバーします。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then\n"
"you just declare whatever ID you want as a public field:"
msgstr "`PanacheEntity` の代わりに `PanacheEntityBase` を拡張することで独自のID戦略を指定することができます。そのあとに好きなIDをパブリック・フィールドとして宣言するだけです:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr "リポジトリを使用している場合は `PanacheRepository` の代わりに `PanacheRepositoryBase` を拡張し、IDの型を追加の型パラメーターとして指定することになります:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Mocking"
msgstr "モック"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Using the active record pattern"
msgstr "アクティブレコードパターンの使用"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr "アクティブレコードパターンを使用している場合、Mockitoは静的メソッドのモックをサポートしていないため、直接使用することはできませんが、 `quarkus-panache-mock` モジュールを使用することで、Mockitoを使用して、あなた自身のメソッドを含む、提供されたすべての静的メソッドをモックすることができます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Add this dependency to your `pom.xml`:"
msgstr "この依存関係を `pom.xml` に追加してください。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Given this simple entity:"
msgstr "このシンプルなエンティティがある場合に"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can write your mocking test like this:"
msgstr "モッキングテストはこのように書くことができます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr "`verify` と `do*` のメソッドは `Mockito` ではなく `PanacheMock` で呼び出すようにしてください。そうしないとどのモックオブジェクトを渡せばいいのかわからなくなってしまいます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Mocking `EntityManager`, `Session` and entity instance methods"
msgstr "`EntityManager` 、 `Session` とエンティティインスタンスのメソッドのモック化"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate ORM `Session` object:"
msgstr "`persist()` のようなエンティティインスタンスのメソッドをモックにする必要がある場合は、Hibernate ORMの `Session` オブジェクトをモック化することで実現できます:"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr "リポジトリパターンを使用している場合は、 `quarkus-junit5-mockito` モジュールを使用して、Mockito を直接使用することができます。これにより、ビーンのモッキングが非常に簡単になります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "And this repository:"
msgstr "そしてこのリポジトリ。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "How and why we simplify Hibernate ORM mappings"
msgstr "Hibernate ORMマッピングを単純化する方法と理由"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"When it comes to writing Hibernate ORM entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr "Hibernate ORM エンティティーを書くことになると、ユーザーが不本意ながらも対処することに慣れてしまった、いくつかの厄介事があります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really\n"
"relevant to your model."
msgstr "IDロジックの重複:ほとんどのエンティティにはIDが必要ですが、モデルとはあまり関係がないため、ほとんどの人はIDの設定方法を気にしません。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires a split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods\n"
"are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository\n"
"where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're\n"
"writing to set up an injection point before coming back to use it."
msgstr "オブジェクト指向アーキテクチャの通常のオブジェクトでは、ステートとメソッドが同じクラスにないことはあり得ないのに、伝統的なEEパターンでは、エンティティの定義（モデル）とそれに対する操作（DAOやリポジトリ）を分けることが推奨されており、実際にはステートとその操作を分ける必要があります。さらに、エンティティごとに2つのクラスが必要になり、エンティティの操作を行う必要があるDAOやRepositoryをインジェクションする必要があるため、編集フローが崩れ、書いているコードから抜けてインジェクションポイントを設定してから戻って使用しなければなりません。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr "Hibernateのクエリは非常に強力ですが、一般的な操作には冗長すぎるため、すべての部分が必要ない場合でもクエリを書く必要があります。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our\n"
"model usage."
msgstr "Hibernateは非常に汎用性が高いのですが、モデルの使用量の9割を占めるような些細な操作をしても些細にはなりません。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Panacheでは、これらの問題に対して、定見に基づいたアプローチをとりました。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr "エンティティは `PanacheEntity` を拡張するようにしてください: 自動生成されるIDフィールドがあります。カスタムID戦略が必要な場合は代わりに `PanacheEntityBase` を拡張するとIDを自分で処理することができます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Hibernate ORM w/o Panache also doesn't require you to use getters and setters,\n"
"but Panache will additionally generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses. This implies that from the Hibernate perspective you're using accessors via getters and setters even while it looks like field accessors."
msgstr "パブリックフィールドを使う。馬鹿げたゲッターとセッターを取り除きます。PanacheではないHibernate ORMでもゲッターとセッターを使う必要はありませんが、Panacheはさらに不足しているすべてのゲッターとセッターを生成し、これらのフィールドへのすべてのアクセスをアクセサメソッドを使うように書き換えます。このようにして必要なときに _有用な_ アクセサを書くことができ、エンティティユーザがフィールドアクセスを使用しているにもかかわらず、それが使用されます。これは、Hibernateの観点からはフィールドアクセサのように見えても、ゲッターとセッターを介してアクセサーを使用していることを意味します。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "アクティブレコードパターンの使用: アクティブレコードパターンでは、すべてのエンティティロジックをエンティティクラスのスタティックメソッドに置き、DAOを作りません。エンティティスーパークラスには、非常に便利なスタティックメソッドがたくさん用意されていますし、エンティティクラスに独自のメソッドを追加することもできます。 `Person` ユーザーは、 `Person` と入力するだけで、すべての操作を一か所で完了させることができます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better\n"
"`Person.find(\"name\", \"stef\")`."
msgstr "`Person.find(\"order by name\")` や `Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` 、さらには `Person.find(\"name\", \"stef\")` のように、必要のない部分を書かないようにしましょう。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "That's all there is to it: with Panache, Hibernate ORM has never looked so trim and neat."
msgstr "以上、Panacheを使えばHibernate ORMがこれほどまでにすっきりするのかということでした。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate ORM with Panache in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the\n"
"same project where you build your Quarkus application, everything will work fine."
msgstr "QuarkusのHibernate ORM with Panacheは、エンティティのコンパイル時のバイトコード拡張に依存しています。Quarkusアプリケーションをビルドするのと同じプロジェクトでエンティティを定義すれば、すべて問題なく動作します。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If the entities come from external projects\n"
"or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr "エンティティーが外部のプロジェクトやジャーから来ている場合は、空の `META-INF/beans.xml` ファイルを追加することで、jarがQuarkusアプリケーションライブラリのように扱われるようにすることができます。"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr "これにより、Quarkusは、エンティティーが現在のプロジェクトの内部にあるかのようにインデックスを作成し、強化することができます。"
