msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Simplified Hibernate ORM with Panache"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate ORM is the de facto Jakarta Persistence (formerly known as JPA) implementation and offers you the full breadth of an Object Relational Mapper.\n"
"It makes complex mappings possible, but it does not make simple and common mappings trivial.\n"
"Hibernate ORM with Panache focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "First: an example"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "What we're doing in Panache is to allow you to write your Hibernate ORM entities like this:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is?\n"
"Does this look interesting? Read on!"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "the `list()` method might be surprising at first. It takes fragments of HQL (JP-QL) queries and contextualizes the rest. That makes for very concise but yet readable code."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"Hibernate with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheRepository`."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The solution is located in the `hibernate-orm-panache-quickstart` link:{quickstarts-tree-url}/hibernate-orm-panache-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Setting up and configuring Hibernate ORM with Panache"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "To get started:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "add your settings in `{config-file}`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "annotate your entities with `@Entity`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "make your entities extend `PanacheEntity` (optional if you are using the repository pattern)"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Follow the xref:hibernate-orm.adoc#setting-up-and-configuring-hibernate-orm[Hibernate set-up guide for all configuration]."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "In your build file, add the following dependencies:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "the Hibernate ORM with Panache extension"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Solution 1: using the active record pattern"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Defining your entity"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheEntity`, annotate it with `@Entity` and add your\n"
"columns as public fields:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You can put all your Jakarta Persistence column annotations on the public fields. If you need a field to not be persisted, use the\n"
"`@Transient` annotation on it. If you need to write accessors, you can:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor,\n"
"and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Most useful operations"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "All `list` methods have equivalent `stream` versions."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The `stream` methods require a transaction to work. +\n"
"As they perform I/O operations, they should be closed via the `close()` method or via a try-with-resource to close the underlying `ResultSet`.\n"
"If not, you will see warnings from Agroal that will close the underlying `ResultSet` for you."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Adding entity methods"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Solution 2: using the repository pattern"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you don't want to bother defining getters/setters for your entities, you can make them extend `PanacheEntityBase` and\n"
"Quarkus will generate them for you. You can even extend `PanacheEntity` and take advantage of the default ID it provides."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Defining your repository"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheRepository`:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `stream` methods require a transaction to work."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Writing a Jakarta REST resource"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "First, include one of the Quarkus REST (formerly RESTEasy Reactive) extensions to enable Jakarta REST endpoints, for example, add the `io.quarkus:quarkus-rest-jackson` dependency for Jakarta REST and JSON support."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Be careful to use the `@Transactional` annotation on the operations that modify the database,\n"
"you can add the annotation at the class level for simplicity purpose."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "To make it easier to showcase some capabilities of Hibernate ORM with Panache on Quarkus with Dev mode, some test data should be inserted into the database by adding the following content to a new file named src/main/resources/import.sql:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If you would like to initialize the DB when you start the Quarkus app in your production environment, add `quarkus.hibernate-orm.schema-management.strategy=drop-and-create` to the Quarkus startup options in addition to `import.sql`."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "After that, you can see the people list and add new person as followings:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If you see the Person object as Person<1>, then the object has not been converted. In this case, add the dependency `quarkus-rest-jackson` in `pom.xml`."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Advanced Query"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Paging"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You should only use `list` and `stream` methods if your table contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Using a range instead of pages"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`PanacheQuery` also allows range-based queries."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Sorting"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "All methods accepting a query string also accept the following simplified query form:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "But these methods also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction or the null precedence."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Simplified queries"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Normally, HQL queries are of this form: `from EntityName [where ...] [order by ...]`, with optional elements\n"
"at the end."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If your select query does not start with `from`, `select` or `with`, we support the following additional forms:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`order by ...` which will expand to `from EntityName order by ...`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<singleAttribute>` (and single parameter) which will expand to `from EntityName where <singleAttribute> = ?`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`where <query>` will expand to `from EntityName where <query>`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<query>` will expand to `from EntityName where <query>`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If your update query does not start with `update`, we support the following additional forms:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`from EntityName ...` which will expand to `update EntityName ...`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`set? <singleAttribute>` (and single parameter) which will expand to `update EntityName set <singleAttribute> = ?`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`set? <update-query>` will expand to `update EntityName set <update-query>`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If your delete query does not start with `delete`, we support the following additional forms:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`from EntityName ...` which will expand to `delete from EntityName ...`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<singleAttribute>` (and single parameter) which will expand to `delete from EntityName where <singleAttribute> = ?`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "`<query>` will expand to `delete from EntityName where <query>`"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You can also write your queries in plain\n"
"link:{hibernate-orm-docs-url}#hql[HQL]:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Named queries"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can reference a named query instead of a (simplified) HQL query by prefixing its name with the '#' character. You can also use named queries for count, update and delete queries."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Named queries can only be defined inside your Jakarta Persistence entity classes,\n"
"or on one of their super classes."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Query parameters"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can pass query parameters by index (1-based) as shown below:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Or by name using a `Map`:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Query projection"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can use it to restrict which fields will be returned by the database."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate will use **DTO projection** and generate a SELECT clause with the attributes from the projection class.\n"
"This is also called **dynamic instantiation** or **constructor expression**, more info can be found on the Hibernate guide:\n"
"link:{hibernate-orm-docs-url}#hql-select-clause[hql select clause]"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The projection class needs to have a constructor that contains all its attributes, this constructor will be used to\n"
"instantiate the projection DTO instead of using the entity class. This class must have a matching constructor with all the class attributes as parameters."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "We use public fields here, but you can use private fields and getters/setters if you prefer."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "This constructor will be used by Hibernate, it must be the only constructor in your class and have all the class attributes as parameters."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"The implementation of the `project(Class)` method uses the constructor's parameter names to build the select clause of the query,\n"
"so the compiler must be configured to store parameter names inside the compiled class.\n"
"This is enabled by default if you are using the Quarkus Maven archetype. If you are not using it, add the property `<maven.compiler.parameters>true</maven.compiler.parameters>` to your `pom.xml`."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If you run Java 17+, records are a good fit for projection classes."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If in the DTO projection object you have a field from a referenced entity, you can use the `@ProjectedFieldName` annotation to provide the path for the SELECT statement."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The `ownerName` DTO constructor's parameter will be loaded from the `owner.name` HQL property."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "In case you want to project an entity in a class with nested classes, you can use the `@NestedProjectedClass` annotation on those nested classes."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"This annotation can be used when you want to project `@Embedded` entity or `@ManyToOne`, `@OneToOne` relation.\n"
"It does not support `@OneToMany` or `@ManyToMany` relation."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"It is also possible to specify a HQL query with a select clause. In this case, the projection class must have a constructor\n"
"matching the values returned by the select clause:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Hibernate ORM will use this constructor. When the query has a select clause, it is possible to have multiple constructors."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "It is not possible to have a HQL `select new` query and `.project(Class)` at the same time - you need to pick one approach."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "For example, this will fail:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Multiple Persistence Units"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The support for multiple persistence units is described in detail in xref:hibernate-orm.adoc#multiple-persistence-units[the Hibernate ORM guide]."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "When using Panache, things are simple:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "A given Panache entity can be attached to only a single persistence unit."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Given that, Panache already provides the necessary plumbing to transparently find the appropriate `EntityManager` associated to a Panache entity."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Transactions"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Make sure to wrap methods modifying your database (e.g. `entity.persist()`) within a transaction. Marking a\n"
"CDI bean method `@Transactional` will do that for you and make that method a transaction boundary. We recommend doing\n"
"so at your application entry point boundaries like your REST endpoint controllers."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate ORM batches changes you make to your entities and sends changes (it is called flush) at the end of the transaction or before a query.\n"
"This is usually a good thing as it is more efficient.\n"
"But if you want to check optimistic locking failures, do object validation right away or generally want to get immediate feedback, you can force the flush operation by calling `entity.flush()` or even use `entity.persistAndFlush()` to make it a single method call. This will allow you to catch any `PersistenceException` that could occur when Hibernate ORM sends those changes to the database.\n"
"Remember, this is less efficient so don't abuse it.\n"
"And your transaction still has to be committed."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Here is an example of the usage of the flush method to allow making a specific action in case of `PersistenceException`:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Lock management"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Panache provides direct support for database locking with your entity/repository, using `findById(Object, LockModeType)` or `find().withLock(LockModeType)`."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "The following examples are for the active record pattern, but the same can be used with repositories."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "First: Locking using findById()."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Second: Locking in a find()."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Be careful that locks are released when the transaction ends, so the method that invokes the lock query must be annotated with the `@Transactional` annotation."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Custom IDs"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"IDs are often a touchy subject, and not everyone's up for letting them handled by the framework, once again we\n"
"have you covered."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheEntityBase` instead of `PanacheEntity`. Then\n"
"you just declare whatever ID you want as a public field:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheRepositoryBase` instead of `PanacheRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Mocking"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Using the active record pattern"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you are using the active record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Add this dependency to your `pom.xml`:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Given this simple entity:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "You can write your mocking test like this:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Be sure to call your `verify` and `do*` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Mocking `EntityManager`, `Session` and entity instance methods"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "If you need to mock entity instance methods, such as `persist()` you can do it by mocking the Hibernate ORM `Session` object:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Using the repository pattern"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "And this repository:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "How and why we simplify Hibernate ORM mappings"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"When it comes to writing Hibernate ORM entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it is set, because it is not really\n"
"relevant to your model."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires a split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods\n"
"are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository\n"
"where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're\n"
"writing to set up an injection point before coming back to use it."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate is very general-purpose, but does not make it trivial to do trivial operations that make up 90% of our\n"
"model usage."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Make your entities extend `PanacheEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheEntityBase` instead and handle the ID yourself."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Hibernate ORM w/o Panache also doesn't require you to use getters and setters,\n"
"but Panache will additionally generate all getters and setters that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses. This implies that from the Hibernate perspective you're using accessors via getters and setters even while it looks like field accessors."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"stef\", Status.Alive)` or even better\n"
"`Person.find(\"name\", \"stef\")`."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "That's all there is to it: with Panache, Hibernate ORM has never looked so trim and neat."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "Defining entities in external projects or jars"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"Hibernate ORM with Panache in Quarkus relies on compile-time bytecode enhancements to your entities. If you define your entities in the\n"
"same project where you build your Quarkus application, everything will work fine."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid ""
"If the entities come from external projects\n"
"or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache.adoc
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr ""
