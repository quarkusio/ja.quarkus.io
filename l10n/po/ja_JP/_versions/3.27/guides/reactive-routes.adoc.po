msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Using Reactive Routes"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"Reactive routes propose an alternative approach to implement HTTP endpoints where you declare and chain _routes_.\n"
"This approach became very popular in the JavaScript world, with frameworks like Express.Js or Hapi.\n"
"Quarkus also offers the possibility to use reactive routes.\n"
"You can implement REST API with routes only or combine them with Jakarta REST resources and servlets."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The code presented in this guide is available in this {quickstarts-base-url}[GitHub repository] under the link:{quickstarts-tree-url}/reactive-routes-quickstart[`reactive-routes-quickstart` directory]"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"Reactive Routes were initially introduced to provide a reactive execution model for HTTP APIs on top of the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture].\n"
"With the introduction of xref:rest.adoc[Quarkus REST (formerly RESTEasy Reactive)], you can now implement reactive HTTP APIs and still use Jakarta REST annotations.\n"
"Reactive Routes are still supported, especially if you want a more _route-based_ approach, and something closer to the underlying reactive engine."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Quarkus HTTP"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"Before going further, let's have a look at the HTTP layer of Quarkus.\n"
"Quarkus HTTP support is based on a non-blocking and reactive engine (Eclipse Vert.x and Netty).\n"
"All the HTTP requests your application receive are handled by _event loops_ (I/O Thread) and then are routed towards the code that manages the request.\n"
"Depending on the destination, it can invoke the code managing the request on a worker thread (Servlet, Jax-RS) or use the IO Thread (reactive route).\n"
"Note that because of this, a reactive route must be non-blocking or explicitly declare its blocking nature (which would result by being called on a worker thread)."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "image:http-architecture.png[alt=Quarkus HTTP Architecture]"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Declaring reactive routes"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"The first way to use reactive routes is to use the `@Route` annotation.\n"
"To have access to this annotation, you need to add the `quarkus-reactive-routes` extension by running this command:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Then in a _bean_, you can use the `@Route` annotation as follows:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "If there is a reactive route found on a class with no scope annotation then `@jakarta.inject.Singleton` is added automatically."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `@Route` annotation indicates that the method is a reactive route. Again, by default, the code contained in the method must not block."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The method gets a https://vertx.io/docs/apidocs/io/vertx/ext/web/RoutingContext.html[`RoutingContext`] as a parameter. From the `RoutingContext` you can retrieve the HTTP request (using `request()`) and write the response using `response().end(...)`."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "If the annotated method does not return `void` the arguments are optional."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`RoutingExchange` is a convenient wrapper of `RoutingContext` which provides some useful methods."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `RoutingExchange` is used to retrieve the request query parameter `name`."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The path defines a parameter `name` which can be injected inside the method parameters using the annotation `@Param`."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "More details about using the `RoutingContext` is available in the https://vertx.io/docs/vertx-web/java/[Vert.x Web documentation]."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `@Route` annotation allows you to configure:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `path` - for routing by path, using the https://vertx.io/docs/vertx-web/java/#_capturing_path_parameters[Vert.x Web format]"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `regex` - for routing with regular expressions, see https://vertx.io/docs/vertx-web/java/#_routing_with_regular_expressions[for more details]"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `methods` - the HTTP verbs triggering the route such as `GET`, `POST`..."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `type` - it can be _normal_ (non-blocking), _blocking_ (method dispatched on a worker thread), or _failure_ to indicate that this route is called on failures"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"The `order` - the order of the route when several routes are involved in handling the incoming request.\n"
"Must be positive for regular user routes."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The produced and consumed mime types using `produces`, and `consumes`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "For instance, you can declare a blocking route as follows:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Alternatively, you can use `@io.smallrye.common.annotation.Blocking` and omit the `type = Route.HandlerType.BLOCKING`:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "When `@Blocking` is used, the `type` attribute of the `@Route` is ignored."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `@Route` annotation is repeatable and so you can declare several routes for a single method:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Each route can use different paths, methods..."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "If no content-type header is set, then we will try to use the most acceptable content type by matching the accept header with the value of the `Route` produces attribute as defined by `io.vertx.ext.web.RoutingContext.getAcceptableContentType()`."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "If the `accept` header matches `text/html`, we set the content type automatically to `text/html`."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Executing route on a virtual thread"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"You can annotate a route method with `@io.smallrye.common.annotation.RunOnVirtualThread` in order to execute it on a virtual thread.\n"
"However, keep in mind that not everything can run safely on virtual threads.\n"
"You should read the xref:virtual-threads.adoc#run-code-on-virtual-threads-using-runonvirtualthread[Virtual thread support reference] carefully and get acquainted with all the details."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Handling conflicting routes"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"You may end up with multiple routes matching a given path.\n"
"In the following example, both route matches `/accounts/me`:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"As a consequence, the result is not the expected one as the first route is called with the path parameter `id` set to `me`.\n"
"To avoid the conflict, use the `order` attribute:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"By giving a lower order to the second route, it gets evaluated first.\n"
"If the request path matches, it is invoked, otherwise the other routes are evaluated."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`@RouteBase`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "This annotation can be used to configure some defaults for reactive routes declared on a class."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `path` value is used as a prefix for any route method declared on the class where `Route#path()` is used."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The value of `produces()` is used for content-based routing for all routes where `Route#produces()` is empty."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Reactive Route Methods"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"A route method must be a non-private non-static method of a CDI bean.\n"
"If the annotated method returns `void` then it has to accept at least one argument - see the supported types below.\n"
"If the annotated method does not return `void` then the arguments are optional."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"Methods that return `void` must __end__ the response or the HTTP request to this route will never end.\n"
"Some methods of `RoutingExchange` do it for you, others not and you must call the `end()` method of the response by yourself, please refer to its JavaDoc for more information."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "A route method can accept arguments of the following types:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`io.vertx.ext.web.RoutingContext`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`io.quarkus.vertx.web.RoutingExchange`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`io.vertx.core.http.HttpServerRequest`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`io.vertx.core.http.HttpServerResponse`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`io.vertx.mutiny.core.http.HttpServerRequest`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`io.vertx.mutiny.core.http.HttpServerResponse`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Furthermore, it is possible to inject the `HttpServerRequest` parameters into method parameters annotated with `@io.quarkus.vertx.web.Param` using the following types:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Parameter Type"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Obtained via"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`java.lang.String`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`routingContext.request().getParam()`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`java.util.Optional<String>`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`java.util.List<String>`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`routingContext.request().params().getAll()`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Request Parameter Example"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `HttpServerRequest` headers can be injected into method parameters annotated with `@io.quarkus.vertx.web.Header` using the following types:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`routingContext.request().getHeader()`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`routingContext.request().headers().getAll()`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Request Header Example"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The request body can be injected into a method parameter annotated with `@io.quarkus.vertx.web.Body` using the following types:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`routingContext.getBodyAsString()`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`io.vertx.core.buffer.Buffer`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`routingContext.getBody()`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`io.vertx.core.json.JsonObject`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`routingContext.getBodyAsJson()`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`io.vertx.core.json.JsonArray`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`routingContext.getBodyAsJsonArray()`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "any other type"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "`routingContext.getBodyAsJson().mapTo(MyPojo.class)`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Request Body Example"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"A failure handler can declare a single method parameter whose type extends `Throwable`.\n"
"The type of the parameter is used to match the result of `RoutingContext#failure()`."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Failure Handler Example"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Returning Unis"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "In a reactive route, you can return a `Uni` directly:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Returning `Unis` is convenient when using a reactive client:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The item produced by the returned `Uni` can be:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "A string - written into the HTTP response directly."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "A `io.vertx.core.buffer.Buffer` - written into the HTTP response directly."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"An object - written into the HTTP response after having been encoded into JSON.\n"
"The `content-type` header is set to `application/json` if not already set."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "If the returned `Uni` produces a failure (or is `null`), an HTTP 500 response is written."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Returning a `Uni<Void>` produces a 204 response (no content)."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Returning results"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "You can also return a result directly:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"Be aware, the processing must be **non-blocking** as reactive routes are invoked on the IO Thread.\n"
"Otherwise, set the `type` attribute of the `@Route` annotation to `Route.HandlerType.BLOCKING`, or use the `@io.smallrye.common.annotation.Blocking` annotation."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The method can return:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Returning Multis"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"A reactive route can return a `Multi`.\n"
"The items are written one by one, in the response.\n"
"The response `Transfer-Encoding` header is set to `chunked`."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Produces `helloworld!`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "A `Multi<String>` - the items are written one by one (one per _chunk_) in the response."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "A `Multi<Buffer>` - the buffers are written one by one (one per _chunk_) without any processing."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "A `Multi<Object>` - the items are encoded to JSON written one by one in the response."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The previous snippet produces:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Streaming JSON Array items"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"You can return a `Multi` to produce a JSON Array, where every item is an item from this array.\n"
"The response is written item by item to the client.\n"
"To do that set the `produces` attribute to `\"application/json\"` (or `ReactiveRoutes.APPLICATION_JSON`)."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"The `produces` attribute is an array.\n"
"When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"application/json\"` must be the first value in the array."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"Only `Multi<String>`, `Multi<Object>` and `Multi<Void>` can be written into the JSON Array.\n"
"Using a `Multi<Void>` produces an empty array.\n"
"You cannot use `Multi<Buffer>`.\n"
"If you need to use `Buffer`, transform the content into a JSON or String representation first."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Deprecation of `asJsonArray`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `ReactiveRoutes.asJsonArray` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Event Stream and Server-Sent Event support"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"You can return a `Multi` to produce an event source (stream of server sent events).\n"
"To enable this feature, set the `produces` attribute to `\"text/event-stream\"` (or `ReactiveRoutes.EVENT_STREAM`), such as in:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "This method would produce:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"The `produces` attribute is an array.\n"
"When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"text/event-stream\"` must be the first value in the array."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "You can also implement the `io.quarkus.vertx.web.ReactiveRoutes.ServerSentEvent` interface to customize the `event` and `id` section of the server sent event:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Using a `Multi<PersonEvent>` would produce:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Deprecation of `asEventStream`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `ReactiveRoutes.asEventStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Json Stream in NDJSON format"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"You can return a `Multi` to produce a newline delimited stream of JSON values.\n"
"To enable this feature, set the `produces` attribute of the `@Route` annotation to `\"application/x-ndjson\"` (or `ReactiveRoutes.ND_JSON`):"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"The `produces` attribute is an array. When you pass a single value you can omit the \"{\" and \"}\".\n"
"Note that `\"application/x-ndjson\"` must be the first value in the array."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "You can also provide strings instead of objects, in that case the strings will be wrapped in quotes to become valid JSON values:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Deprecation of `asJsonStream`"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `ReactiveRoutes.asJsonStream` has been deprecated as it is not compatible with the security layer of Quarkus."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Using Bean Validation"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"You can combine reactive routes and Bean Validation.\n"
"First, don't forget to add the `quarkus-hibernate-validator` extension to your project.\n"
"Then, you can add constraints to your route parameter (annotated with `@Param` or `@Body`):"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"If the parameters do not pass the tests, it returns an HTTP 400 response.\n"
"If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "When returning an object or a `Uni`, you can also use the `@Valid` annotation:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"If the item produced by the route does not pass the validation, it returns an HTTP 500 response.\n"
"If the request accepts JSON payload, the response follows the https://opensource.zalando.com/problem/constraint-violation/[Problem] format."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"Note that only `@Valid` is supported on the return type.\n"
"The returned class can use any constraint.\n"
"In the case of `Uni`, it checks the item produced asynchronously."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Using the Vert.x Web Router"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"You can also register your route directly on the _HTTP routing layer_ by registering routes directly on the `Router` object.\n"
"To retrieve the `Router` instance at startup:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Check the https://vertx.io/docs/vertx-web/java/#_basic_vert_x_web_concepts[Vert.x Web documentation] to know more about the route registration, options, and available handlers."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"`Router` access is provided by the `quarkus-vertx-http` extension.\n"
"If you use `quarkus-rest` or `quarkus-reactive-routes`, the extension will be added automatically."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "You can also receive the Mutiny variant of the Router (`io.vertx.mutiny.ext.web.Router`):"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Intercepting HTTP requests"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"You can also register filters that would intercept incoming HTTP requests.\n"
"Note that these filters are also applied for servlets, Jakarta REST resources, and reactive routes."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "For example, the following code snippet registers a filter adding an HTTP header:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The `RouteFilter#value()` defines the priority used to sort the filters - filters with higher priority are called first."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The filter is likely required to call the `next()` method to continue the chain."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "HTTP Compression"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"The body of an HTTP response is not compressed by default.\n"
"You can enable the HTTP compression support by means of `quarkus.http.enable-compression=true`."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "If compression support is enabled then the response body is compressed if:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "the route method is annotated with `@io.quarkus.vertx.http.Compressed`, or"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "the `Content-Type` header is set and the value is a compressed media type as configured via `quarkus.http.compress-media-types`."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "The response body is never compressed if:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "the route method is annotated with `@io.quarkus.vertx.http.Uncompressed`, or"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "the `Content-Type` header is not set."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "By default, the following list of media types is compressed: `text/html`, `text/plain`, `text/xml`, `text/css`, `text/javascript`, `application/javascript`, `application/json`, `application/graphql+json` and `application/xhtml+xml`."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "If the client does not support HTTP compression then the response body is not compressed."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Adding OpenAPI and Swagger UI"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "You can add support for link:https://www.openapis.org/[OpenAPI] and link:https://swagger.io/tools/swagger-ui/[Swagger UI] by using the `quarkus-smallrye-openapi` extension."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Add the extension by running this command:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "This is enough to generate a basic OpenAPI schema document from your Vert.x Routes:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "You will see the generated OpenAPI schema document:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Also see xref:openapi-swaggerui.adoc[the OpenAPI Guide]."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Adding MicroProfile OpenAPI Annotations"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"You can use link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI] to better document your schema,\n"
"for instance, adding header info, or specifying the return type on `void` methods might be useful:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Header information about your API."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Defining the response."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "This will generate this OpenAPI schema:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Using Swagger UI"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"Swagger UI is included by default when running in `dev` or `test` mode, and can optionally be added to `prod` mode.\n"
"For more information, see the <<openapi-swaggerui.adoc#dev-mode,Swagger UI>> guide."
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Navigate to link:http://localhost:8080/q/swagger-ui/[localhost:8080/q/swagger-ui/] and observe the Swagger UI screen:"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "image:reactive-routes-guide-screenshot01.png[alt=Swagger UI]"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid "Conclusion"
msgstr ""

#: _versions/3.27/guides/reactive-routes.adoc
msgid ""
"This guide has introduced how you can use reactive routes to define an HTTP endpoint.\n"
"It also describes the structure of the Quarkus HTTP layer and how to write filters."
msgstr ""
