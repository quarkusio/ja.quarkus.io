msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/spring-di.adoc
msgid "Quarkus Extension for Spring DI API"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "While users are encouraged to use CDI annotations for injection, Quarkus provides a compatibility layer for Spring dependency injection in the form of the `spring-di` extension."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "This guide explains how a Quarkus application can leverage the well known Dependency Injection annotations included in the Spring Framework."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "The solution is located in the `spring-di-quickstart` link:{quickstarts-tree-url}/spring-di-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "This command generates a project which imports the `spring-di` extension."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `spring-di` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Add beans using Spring annotations"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Let's proceed to create some beans using various Spring annotations."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"First we will create a `StringFunction` interface that some of our beans will implement and which will be injected into another bean later on.\n"
"Create a `src/main/java/org/acme/spring/di/StringFunction.java` file and set the following content:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"With the interface in place, we will add an `AppConfiguration` class which will use the Spring's Java Config style for defining a bean.\n"
"It will be used to create a `StringFunction` bean that will capitalize the text passed as parameter.\n"
"Create a `src/main/java/org/acme/spring/di/AppConfiguration.java` file with the following content:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"As a Spring developer, you might be tempted to add the `@ComponentScan` annotation in order to define specific packages to scan for additional beans. Do note that `@ComponentScan` is entirely unnecessary since Quarkus performs xref:cdi-reference.adoc#bean_discovery[bean discovery] only in `annotated` mode with no visibility boundaries. Moreover, note that the bean discovery in Quarkus happens at build time.\n"
"In the same vein, Quarkus does not support the Spring `@Import` annotation."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"Now we define another bean that will implement `StringFunction` using Spring's stereotype annotation style.\n"
"This bean will effectively be a no-op bean that simply returns the input as is.\n"
"Create a `src/main/java/org/acme/spring/di/NoOpSingleStringFunction.java` file and set the following content:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"Quarkus also provides support for injecting configuration values using Spring's `@Value` annotation.\n"
"To see that in action, first edit the `src/main/resources/application.properties` with the following content:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Next create a new Spring bean in `src/main/java/org/acme/spring/di/MessageProducer.java` with the following content:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"The final bean we will create ties together all the previous beans.\n"
"Create a `src/main/java/org/acme/spring/di/GreeterBean.java` file and copy the following content:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"In the code above, we see that both field injection and constructor injection are being used (note that constructor injection does not need the `@Autowired` annotation since there is a single constructor).\n"
"Furthermore, the `@Value` annotation on `suffix` has also a default value defined, which in this case will be used since we have not defined `greeting.suffix` in `application.properties`."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Create the Jakarta REST resource"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Create the `src/main/java/org/acme/spring/di/GreeterResource.java` file with the following content:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Update the test"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"We also need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/spring/di/GreetingResourceTest.java` file and change the content of the `testHelloEndpoint` method to:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Package and run the application"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Run the application with:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Open your browser to http://localhost:8080/greeting."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "The result should be: `HELLO WORLD!`."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Run the application as a native"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "You can of course create a native image using instructions similar to xref:building-native-image.adoc[this] guide."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Important Technical Note"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"Please note that the Spring support in Quarkus does not start a Spring Application Context nor are any Spring infrastructure classes run.\n"
"Spring classes and annotations are only used for reading metadata and / or are used as user code method return types or parameter types.\n"
"What that means for end users, is that adding arbitrary Spring libraries will not have any effect. Moreover, Spring infrastructure\n"
"classes (like `org.springframework.beans.factory.config.BeanPostProcessor` , `org.springframework.context.ApplicationContext` for example) will not be executed.\n"
"Regarding the dependency injection in particular, Quarkus uses a Dependency Injection mechanism (called ArC) based on the https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html[Jakarta Contexts and Dependency Injection 4.1] specification. If you want to learn more about it, we recommend you to read the xref:cdi.adoc[Quarkus introduction to CDI] and the xref:cdi-reference.adoc#arc-configuration-reference[CDI reference guide]\n"
"The various Spring Boot test features are not supported by Quarkus. For testing purposes, please, check the xref:getting-started-testing.adoc[Quarkus testing guide]."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Some known limitations:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid ""
"In case of ambiguity, Spring uses a fallback match of the bean name against the injection point field name or parameter name.\n"
"This is not supported, thus `@Named` annotation needs to be used to explicitly solve any ambiguity."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Injecting all beans of a particular type is limited to `List<Bean>`. Injecting `Set<Bean>` or `Map<String, Bean>` is not supported."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Optional injection using `@Autowired(required=false)` is not supported. Use `javax.enterprise.inject.Instance` and then test `Instance.isResolvable()`."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "`@Conditional` is ignored, since dependency injection gets resolved at build time. An alternative is to use xref:cdi-reference.adoc#enable_build_profile[conditional build profiles]."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Conversion Table"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "The following table shows how Spring DI annotations can be converted to CDI and / or MicroProfile annotations."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Spring"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "CDI / MicroProfile"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Comments"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Autowired"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Inject"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "If the type is `java.util.List`, the `io.quarkus.arc.All` qualifier is added."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Qualifier"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Named"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Value"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@ConfigProperty"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@ConfigProperty doesn't support an expression language the way @Value does, but makes the typical use cases much easier to handle"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Component"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Singleton"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "By default Spring stereotype annotations are singleton beans"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Service"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Repository"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Configuration"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@ApplicationScoped"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "In CDI a producer bean isn't limited to the application scope, it could just as well be @Singleton or @Dependent"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Bean"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Produces"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Scope"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Doesn't have a one-to-one mapping to a CDI annotation. Depending on the value of @Scope, one of the @Singleton, @ApplicationScoped, @SessionScoped, @RequestScoped, @Dependent could be used"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@ComponentScan"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Doesn't have a one-to-one mapping to a CDI annotation. It is not used in Quarkus because Quarkus does all classpath scanning at build time."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "@Import"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Doesn't have a one-to-one mapping to a CDI annotation."
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Spring DI Configuration Reference"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "More Spring guides"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "Quarkus has more Spring compatibility features. See the following guides for more details:"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "xref:spring-web.adoc[Quarkus - Extension for Spring Web]"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "xref:spring-data-jpa.adoc[Quarkus - Extension for Spring Data JPA]"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "xref:spring-data-rest.adoc[Quarkus - Extension for Spring Data REST]"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "xref:spring-security.adoc[Quarkus - Extension for Spring Security]"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "xref:spring-cloud-config-client.adoc[Quarkus - Reading properties from Spring Cloud Config Server]"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "xref:spring-boot-properties.adoc[Quarkus - Extension for Spring Boot properties]"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "xref:spring-cache.adoc[Quarkus - Extension for Spring Cache]"
msgstr ""

#: _versions/3.27/guides/spring-di.adoc
msgid "xref:spring-scheduled.adoc[Quarkus - Extension for Spring Scheduled]"
msgstr ""
