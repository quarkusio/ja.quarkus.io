msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Build, sign, and encrypt JSON Web Tokens"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "JSON Web Token (JWT) is defined by the link:https://datatracker.ietf.org/doc/html/rfc7519[RFC 7519] specification as a compact, URL-safe means of representing claims. These claims are encoded as a JSON object and can be used as the payload of a JSON Web Signature (JWS) structure or the plaintext of a JSON Web Encryption (JWE) structure. This mechanism enables claims to be digitally signed or protected for integrity with a Message Authentication Code (MAC) and encrypted."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Signing the claims is the most common method for securing them. Typically, a JWT token is produced by signing claims formatted as JSON, following the steps outlined in the link:https://tools.ietf.org/html/rfc7515[JSON Web Signature (JWS)] specification."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "When the claims contain sensitive information, their confidentiality can be ensured by using the link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption (JWE)] specification. This approach produces a JWT with encrypted claims."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "For enhanced security, you can combine both methods: sign the claims first and then encrypt the resulting nested JWT. This process ensures both the confidentiality and integrity of the claims."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The SmallRye JWT Build API simplifies securing JWT claims by supporting all these options. It uses the link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J] library internally to provide this functionality."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Dependency"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "To use the SmallRye JWT Build API, add the following dependency to your project:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can use the SmallRye JWT Build API independently, without creating MicroProfile JWT endpoints supported by the `quarkus-smallrye-jwt` extension."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Create JwtClaimsBuilder and set the claims"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The first step is to initialize a `JwtClaimsBuilder` by using one of the following options and add some claims to it:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The API is fluent so you can initialize the builder as part of a fluent sequence."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The builder automatically sets the following claims if they are not explicitly configured:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`iat` (issued at): Current time"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`exp` (expires at): Five minutes from the current time (customizable with the `smallrye.jwt.new-token.lifespan` property)"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`jti` (unique token identifier)"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can configure the following properties globally to avoid setting them directly in the builder:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.issuer`: Specifies the default issuer."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.audience`: Specifies the default audience."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "After initializing and setting claims, the next step is to decide how to secure the claims."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Sign the claims"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can sign the claims immediately or after configuring the `JSON Web Signature (JWS)` headers:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Default behaviors:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The `alg` (algorithm) header is set to `RS256` by default."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You do not have to set a signing key identifier (`kid` header) if a single JSON Web Key (JWK) containing a `kid` property is used."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Supported keys and algorithms:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "To sign the claims, you can use RSA private keys, Elliptic Curve (EC) private keys, and symmetric secret keys."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`RS256` is the default RSA private key signature algorithm."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`ES256` is the default EC private key signature algorithm."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`HS256` is the default symmetric key signature algorithm."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "To customize the signature algorithm, use the `JwtSignatureBuilder` API. For example:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Alternatively, you can configure the signature algorithm globally with the following property:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This approach gives you a simpler API sequence:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can combine the `sign` step with the <<encrypt-claims,encrypt>> step to create `inner-signed and encrypted` tokens. For more information, see the <<innersign-encrypt-claims,Sign the claims and encrypt the nested JWT token>> section."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Encrypt the claims"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid ""
"You can encrypt claims immediately or after setting the `JSON Web Encryption (JWE)` headers, similar to how claims are signed.\n"
"However, encrypting claims always requires a `jwe()` transition to a `JwtEncryptionBuilder` because the API is optimized to support signing and inner-signing operations."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The `alg` (key management algorithm) header defaults to `RSA-OAEP`."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The `enc` (content encryption) header defaults to `A256GCM`."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can use RSA public keys, Elliptic Curve (EC) public keys, and symmetric secret keys, to encrypt the claims."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`RSA-OAEP` is the default RSA public key encryption algorithm."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`ECDH-ES` is the default EC public key encryption algorithm."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`A256KW` is the default symmetric key encryption algorithm."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Note two encryption operations are done when creating an encrypted token:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The generated content encryption key is encrypted using the supplied key and a key encryption algorithm such as `RSA-OAEP`."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The claims are encrypted using the content encryption key and a content encryption algorithm such as `A256GCM`."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can customize the key and content encryption algorithms by using the `JwtEncryptionBuilder` API. For example:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Alternatively, you can configure the algorithms globally by using the following properties:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This configuration allows for a simpler API sequence:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Recommendations for secure token encryption:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid ""
"When a token is directly encrypted with a public RSA or EC key, it cannot be verified which party sent the token.\n"
"To address this, symmetric secret keys are preferred for direct encryption, especially when using JWT as cookies managed solely by the Quarkus endpoint."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "To encrypt a token with RSA or EC public keys, it is recommended to sign the token first if a signing key is available. For more information, see the <<innersign-encrypt-claims,Sign the claims and encrypt the nested JWT token>> section."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Sign the claims and encrypt the nested JWT token"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can sign the claims and then encrypt the nested JWT token by combining the sign and encrypt steps."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Fast JWT generation"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "If the `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` properties are set, you can secure existing claims, such as resources, maps, JsonObjects, with a single call:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "As mentioned earlier, the following claims are added automatically if they are not already set: `iat` (issued at), `exp` (expires at), `jti` (token identifier), `iss` (issuer), and `aud` (audience)."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Dealing with the keys"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can use the `smallrye.jwt.sign.key.location` and `smallrye.jwt.encrypt.key.location` properties to specify the locations of signing and encryption keys. These keys can be located on the local file system, on the classpath, or fetched from remote endpoints. Keys can be in `PEM` or `JSON Web Key (JWK)` formats. For example:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Alternatively, you can fetch keys from external services, such as link:{vault-guide}[HashiCorp Vault] or other secret managers, by using MicroProfile `ConfigSource` and the `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` properties:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "In this example, `private.key.from.vault` and `public.key.from.vault` are `PEM` or `JWK` formatted key values provided by the custom `ConfigSource`."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` properties can also contain Base64-encoded private or public key values directly."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "However, be aware that directly inlining private keys in the configuration is not recommended. Use the `smallrye.jwt.sign.key` property only when you need to fetch a signing key value from a remote secret manager."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The keys can also be loaded by the code that builds the token, and then supplied to JWT Build API for token creation."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "If you need to sign or encrypt the token by using the symmetric secret key, consider using `io.smallrye.jwt.util.KeyUtils` to generate a `SecretKey` of the required length."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "For example, a 64-byte key is required to sign a token by using the `HS512` algorithm (`512/8`), and a 32-byte key is needed to encrypt the content encryption key with the `A256KW` algorithm (`256/8`):"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can also consider using a JSON Web Key (JWK) or JSON Web Key Set (JWK Set) format to store a secret key on a secure file system. You can reference the key by using the `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` properties."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Example JWK"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Example JWK Set"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can also use `io.smallrye.jwt.util.KeyUtils` to generate a pair of asymmetric RSA or EC keys. These keys can be stored in `JWK`, `JWK Set`, or `PEM` format."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "SmallRye JWT Builder configuration"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "SmallRye JWT supports the following properties, which can be used to customize how claims are signed or encrypted:"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Property Name"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Default"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Description"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.sign.key.location`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "none"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Location of a private key used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.sign.key`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Key value used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.sign.key.id`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Signing key identifier, checked only when JWK keys are used."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.encrypt.key.location`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Location of the public key used to encrypt claims or the inner JWT when the no-argument `encrypt()` method is called."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.sign.relax-key-validation`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`false`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Relax the validation of the signing keys."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.encrypt.key`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Key value used to encrypt the claims or the inner JWT when a no-argument `encrypt()` method is called."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.encrypt.key.id`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Encryption key identifier, checked only when JWK keys are used."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.encrypt.relax-key-validation`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Relax the validation of the encryption keys."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.signature-algorithm`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`RS256`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Signature algorithm. Checked if the JWT signature builder has not already set the signature algorithm."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.key-encryption-algorithm`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`RSA-OAEP`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Key encryption algorithm. Checked if the JWT encryption builder has not already set the key encryption algorithm."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.content-encryption-algorithm`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`A256GCM`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Content encryption algorithm. Checked if the JWT encryption builder has not already set the content encryption algorithm."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.lifespan`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`300`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Token lifespan in seconds used to calculate an `exp` (expiry) claim value if this claim has not already been set."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.issuer`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Token issuer used to set an `iss` (issuer) claim value if this claim has not already been set."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.audience`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Token audience used to set an `aud` (audience) claim value if this claim has not already been set."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.override-matching-claims`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Set this property to `true` for `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` values to override the already initialized `iss` (issuer) and `aud` (audience) claims."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
#, fuzzy
msgid "`smallrye.jwt.new-token.add-default-claims`"
msgstr "`smallrye.jwt.new-token.add-default-claims`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "true"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
#, fuzzy
msgid "Set this property to `false` to disable an automatic addition of the `iat` (issued at), `exp` (expiration time) and `jti` (token identifier) claims when such claims have not already been set."
msgstr "このプロパティを `false` に設定すると、 `iat` (issued at)、 `exp` (expiration time)、 `jti` (token identifier) のクレームがまだ設定されていない場合、自動追加を無効にします。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.type`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`JKS`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This property can be used to customize a keystore type if either `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` or both of these properties point to a `KeyStore` file. If it is not set then the file name will be checked to determine the keystore type before defaulting to `JKS`."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.provider`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This property can be used to customize a `KeyStore` provider if `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` point to a `KeyStore` file."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.password`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Keystore password. If `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` point to a `KeyStore` file, this property must be set."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.encrypt.key.alias`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This property must be set to identify the public encryption key that is extracted from `KeyStore` from a matching certificate if `smallrye.jwt.encrypt.key.location` points to a `KeyStore` file."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.sign.key.alias`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This property must be set to identify a private signing key if `smallrye.jwt.sign.key.location` points to a `KeyStore` file."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.sign.key.password`"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This property can be set if a private signing key's password in `KeyStore` is different from `smallrye.jwt.keystore.password` when `smallrye.jwt.sign.key.location` points to a `KeyStore` file."
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "xref:security-jwt.adoc[Using SmallRye JWT to Protect Service Applications]"
msgstr ""

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
