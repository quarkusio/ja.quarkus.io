msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Build, sign, and encrypt JSON Web Tokens"
msgstr "JSON Web トークン (JWT) のビルド、署名、暗号化"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "JSON Web Token (JWT) is defined by the link:https://datatracker.ietf.org/doc/html/rfc7519[RFC 7519] specification as a compact, URL-safe means of representing claims. These claims are encoded as a JSON object and can be used as the payload of a JSON Web Signature (JWS) structure or the plaintext of a JSON Web Encryption (JWE) structure. This mechanism enables claims to be digitally signed or protected for integrity with a Message Authentication Code (MAC) and encrypted."
msgstr ""
"JSON Web Token (JWT) は、link:https://datatracker.ietf.org/doc/html/rfc7519[RFC 7519] 仕様で定義されており、コンパクトで URL セーフな形式でクレームを表現する手段です。\n"
"クレームは JSON オブジェクトとしてエンコードされ、JSON Web Signature (JWS) 構造のペイロードとして使用することも、JSON Web Encryption (JWE) 構造の平文として使用することもできます。\n"
"この仕組みにより、クレームはデジタル署名されるか、メッセージ認証コード (MAC) によって整合性が保護され、さらに暗号化することが可能になります。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Signing the claims is the most common method for securing them. Typically, a JWT token is produced by signing claims formatted as JSON, following the steps outlined in the link:https://tools.ietf.org/html/rfc7515[JSON Web Signature (JWS)] specification."
msgstr ""
"クレームの署名は、クレームを保護する最も一般的な方法です。\n"
"通常、JWT トークンは JSON 形式のクレームに署名することで生成されますが、これは link:https://tools.ietf.org/html/rfc7515[JSON Web Signature (JWS)] 仕様に基づいた手順で行われます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "When the claims contain sensitive information, their confidentiality can be ensured by using the link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption (JWE)] specification. This approach produces a JWT with encrypted claims."
msgstr ""
"クレームに機密情報が含まれる場合、link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption (JWE)] 仕様を使用することで、その機密性を確保できます。\n"
"この方法では、クレームが暗号化された JWT が生成されます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "For enhanced security, you can combine both methods: sign the claims first and then encrypt the resulting nested JWT. This process ensures both the confidentiality and integrity of the claims."
msgstr ""
"セキュリティーを強化するために、両方の方法を組み合わせることができます。\n"
"まずクレームに署名し、その後、作成された JWT をネスト化し、暗号化します。\n"
"このプロセスにより、クレームの機密性と整合性の両方が確保されます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The SmallRye JWT Build API simplifies securing JWT claims by supporting all these options. It uses the link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J] library internally to provide this functionality."
msgstr ""
"SmallRye JWT Build API は、これらすべてのオプションをサポートすることで、JWT クレームの保護を簡素化します。\n"
"この機能を提供するために、内部で link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J] ライブラリーを使用しています。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Dependency"
msgstr "依存関係"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "To use the SmallRye JWT Build API, add the following dependency to your project:"
msgstr "SmallRye JWT ビルド API を使用するには、プロジェクトに次の依存関係を追加します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can use the SmallRye JWT Build API independently, without creating MicroProfile JWT endpoints supported by the `quarkus-smallrye-jwt` extension."
msgstr "SmallRye JWT Build API は、 `quarkus-smallrye-jwt` エクステンションがサポートする MicroProfile JWT エンドポイントを作成せずに、単独で使用できます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Create JwtClaimsBuilder and set the claims"
msgstr "JwtClaimsBuilder の作成とクレームの設定"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The first step is to initialize a `JwtClaimsBuilder` by using one of the following options and add some claims to it:"
msgstr "最初のステップとして、以下のオプションの 1 つを使用して `JwtClaimsBuilder` を初期化し、それにいくつかのクレームを追加します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The API is fluent so you can initialize the builder as part of a fluent sequence."
msgstr "API は Fluent であるため、Fluent Sequence の一部としてビルダーを初期化できます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The builder automatically sets the following claims if they are not explicitly configured:"
msgstr "明示的に設定されていない場合、ビルダーは次のクレームを自動的に設定します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`iat` (issued at): Current time"
msgstr "`iat` (発行時刻): 現在の時刻"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`exp` (expires at): Five minutes from the current time (customizable with the `smallrye.jwt.new-token.lifespan` property)"
msgstr "`exp` (有効期限): 現在の時刻から 5 分後 (`smallrye.jwt.new-token.lifespan` プロパティーでカスタマイズ可能)"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`jti` (unique token identifier)"
msgstr "`jti` (一意のトークン識別子)"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can configure the following properties globally to avoid setting them directly in the builder:"
msgstr "ビルダーで直接設定しなくても済むように、次のプロパティーをグローバルに設定できます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.issuer`: Specifies the default issuer."
msgstr "`smallrye.jwt.new-token.issuer`: デフォルトの発行者を指定します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.audience`: Specifies the default audience."
msgstr "`smallrye.jwt.new-token.audience`: デフォルトのオーディエンスを指定します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "After initializing and setting claims, the next step is to decide how to secure the claims."
msgstr "クレームを初期化して設定した後、次のステップとして、クレームを保護する方法を決定します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Sign the claims"
msgstr "クレームへの署名"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can sign the claims immediately or after configuring the `JSON Web Signature (JWS)` headers:"
msgstr "クレームは、すぐに署名することも、 `JSON Web Signature (JWS)` ヘッダーを設定した後に署名することもできます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Default behaviors:"
msgstr "デフォルトの動作: "

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The `alg` (algorithm) header is set to `RS256` by default."
msgstr "`alg` (algorithm) ヘッダーはデフォルトで `RS256` に設定されていることに注意してください。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You do not have to set a signing key identifier (`kid` header) if a single JSON Web Key (JWK) containing a `kid` property is used."
msgstr "`kid` プロパティーを含む単一の JSON Web Key (JWK) が使用される場合、署名鍵の識別子 (`kid` ヘッダー) を設定する必要はありません。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Supported keys and algorithms:"
msgstr "サポートされているキーとアルゴリズム: "

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "To sign the claims, you can use RSA private keys, Elliptic Curve (EC) private keys, and symmetric secret keys."
msgstr "クレームに署名するには、RSA 秘密鍵、楕円曲線 (EC) 秘密鍵、対称シークレットキーを使用できます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`RS256` is the default RSA private key signature algorithm."
msgstr "`RS256` はデフォルトの RSA 秘密鍵署名アルゴリズムです。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`ES256` is the default EC private key signature algorithm."
msgstr "`ES256` はデフォルトの EC 秘密鍵署名アルゴリズムです。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`HS256` is the default symmetric key signature algorithm."
msgstr "`HS256` はデフォルトの対称鍵署名アルゴリズムです。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "To customize the signature algorithm, use the `JwtSignatureBuilder` API. For example:"
msgstr "署名アルゴリズムをカスタマイズするには、 `JwtSignatureBuilder` API を使用します。例: "

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Alternatively, you can configure the signature algorithm globally with the following property:"
msgstr "または、次のプロパティーを使用して署名アルゴリズムをグローバルに設定することもできます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This approach gives you a simpler API sequence:"
msgstr "このアプローチにより、よりシンプルな API シーケンスが実現します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can combine the `sign` step with the <<encrypt-claims,encrypt>> step to create `inner-signed and encrypted` tokens. For more information, see the <<innersign-encrypt-claims,Sign the claims and encrypt the nested JWT token>> section."
msgstr ""
"`sign` のステップと <<encrypt-claims,encrypt>> のステップを組み合わせることで、 `内側が署名され、暗号化された` トークンを作成できます。\n"
"詳細は、<<innersign-encrypt-claims,Sign the claims and encrypt the nested JWT token>> セクションを参照してください。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Encrypt the claims"
msgstr "クレームの暗号化"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid ""
"You can encrypt claims immediately or after setting the `JSON Web Encryption (JWE)` headers, similar to how claims are signed.\n"
"However, encrypting claims always requires a `jwe()` transition to a `JwtEncryptionBuilder` because the API is optimized to support signing and inner-signing operations."
msgstr ""
"クレームは、署名方法と同様に、すぐに暗号化することも、 `JSON Web Encryption (JWE)` ヘッダーを設定した後に暗号化することもできます。\n"
"ただし、API は署名および内部署名操作をサポートするように最適化されているため、クレームを暗号化するには、常に `jwe()` から `JwtEncryptionBuilder` への遷移が必要です。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The `alg` (key management algorithm) header defaults to `RSA-OAEP`."
msgstr "`alg` (キー管理アルゴリズム) ヘッダーのデフォルトは `RSA-OAEP` です。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The `enc` (content encryption) header defaults to `A256GCM`."
msgstr "`enc` (コンテンツ暗号化) ヘッダーのデフォルトは `A256GCM` です。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can use RSA public keys, Elliptic Curve (EC) public keys, and symmetric secret keys, to encrypt the claims."
msgstr "クレームを暗号化するには、RSA 公開鍵、楕円曲線 (EC) 公開鍵、対称シークレットキーを使用できます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`RSA-OAEP` is the default RSA public key encryption algorithm."
msgstr "`RSA-OAEP` はデフォルトの RSA 公開鍵暗号化アルゴリズムです。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`ECDH-ES` is the default EC public key encryption algorithm."
msgstr "`ECDH-ES` はデフォルトの EC 公開鍵暗号化アルゴリズムです。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`A256KW` is the default symmetric key encryption algorithm."
msgstr "`A256KW` はデフォルトの対称鍵暗号化アルゴリズムです。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Note two encryption operations are done when creating an encrypted token:"
msgstr "暗号化されたトークンを作成する際には、2つの暗号化処理が行われることに注意してください。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The generated content encryption key is encrypted using the supplied key and a key encryption algorithm such as `RSA-OAEP`."
msgstr "生成されたコンテンツ暗号鍵は、提供されたキーと RSA-OAEP などのキー暗号化アルゴリズムを使用して暗号化されます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The claims are encrypted using the content encryption key and a content encryption algorithm such as `A256GCM`."
msgstr "クレームは、コンテンツ暗号鍵と A256GCM などのコンテンツ暗号化アルゴリズムを使用して暗号化されます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can customize the key and content encryption algorithms by using the `JwtEncryptionBuilder` API. For example:"
msgstr "`JwtEncryptionBuilder` API を使用して、キーとコンテンツの暗号化アルゴリズムをカスタマイズできます。例: "

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Alternatively, you can configure the algorithms globally by using the following properties:"
msgstr "または、次のプロパティーを使用してアルゴリズムをグローバルに設定することもできます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This configuration allows for a simpler API sequence:"
msgstr "この設定により、API シーケンスが簡素化されます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Recommendations for secure token encryption:"
msgstr "安全なトークン暗号化に関する推奨事項: "

#: _versions/3.27/guides/security-jwt-build.adoc
msgid ""
"When a token is directly encrypted with a public RSA or EC key, it cannot be verified which party sent the token.\n"
"To address this, symmetric secret keys are preferred for direct encryption, especially when using JWT as cookies managed solely by the Quarkus endpoint."
msgstr ""
"トークンが公開 RSA または EC キーで直接暗号化されると、どの当事者がトークンを送信したかを確認できません。\n"
"これに対処するには、特に Quarkus エンドポイントによってのみ管理される Cookie として JWT を使用する場合、直接暗号化には対称秘密鍵が推奨されます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "To encrypt a token with RSA or EC public keys, it is recommended to sign the token first if a signing key is available. For more information, see the <<innersign-encrypt-claims,Sign the claims and encrypt the nested JWT token>> section."
msgstr "RSA または EC 公開鍵でトークンを暗号化する場合、署名鍵が利用可能な場合は、まずトークンに署名することを推奨します。詳細は、<<innersign-encrypt-claims,Sign the claims and encrypt the nested JWT token>> セクションを参照してください。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Sign the claims and encrypt the nested JWT token"
msgstr "クレームへの署名とネストされた JWT トークンの暗号化"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can sign the claims and then encrypt the nested JWT token by combining the sign and encrypt steps."
msgstr "クレームに署名し、署名と暗号化のステップを組み合わせてネストされた JWT トークンを暗号化できます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Fast JWT generation"
msgstr "JWT の高速生成"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "If the `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` properties are set, you can secure existing claims, such as resources, maps, JsonObjects, with a single call:"
msgstr "`smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` プロパティーが設定されている場合は、リソース、マップ、JsonObject などの既存のクレームを 1 回の呼び出しで保護できます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "As mentioned earlier, the following claims are added automatically if they are not already set: `iat` (issued at), `exp` (expires at), `jti` (token identifier), `iss` (issuer), and `aud` (audience)."
msgstr "前述のように、 `iat` (発行時刻)、 `exp` (有効期限)、 `jti` (トークン識別子)、 `iss` (発行者)、および `aud` (対象者) などのクレームは、まだ設定されていない場合は自動的に追加されます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Dealing with the keys"
msgstr "キーの取り扱い"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can use the `smallrye.jwt.sign.key.location` and `smallrye.jwt.encrypt.key.location` properties to specify the locations of signing and encryption keys. These keys can be located on the local file system, on the classpath, or fetched from remote endpoints. Keys can be in `PEM` or `JSON Web Key (JWK)` formats. For example:"
msgstr "`smallrye.jwt.sign.key.location` プロパティーと `smallrye.jwt.encrypt.key.location` プロパティーを使用して、署名キーと暗号鍵の場所を指定できます。これらのキーは、ローカルファイルシステム、クラスパス、またはリモートエンドポイントから取得できます。キーは `PEM` または `JSON Web Key (JWK)` 形式に指定できます。例: "

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Alternatively, you can fetch keys from external services, such as link:{vault-guide}[HashiCorp Vault] or other secret managers, by using MicroProfile `ConfigSource` and the `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` properties:"
msgstr "または、リンクなどの外部サービスからキーを取得することもできます。{vault-guide} [HashiCorp Vault] またはその他のシークレットマネージャーでは、MicroProfile の `ConfigSource` と `smallrye.jwt.sign.key` および `smallrye.jwt.encrypt.key` プロパティーを使用します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "In this example, `private.key.from.vault` and `public.key.from.vault` are `PEM` or `JWK` formatted key values provided by the custom `ConfigSource`."
msgstr "この例では、 `private.key.from.vault` と `public.key.from.vault` は、カスタム `ConfigSource` によって提供される `PEM` または `JWK` 形式のキー値です。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The `smallrye.jwt.sign.key` and `smallrye.jwt.encrypt.key` properties can also contain Base64-encoded private or public key values directly."
msgstr "`smallrye.jwt.sign.key` プロパティーと `smallrye.jwt.encrypt.key` プロパティーには、Base64 でエンコードされた秘密鍵または公開鍵の値を直接含めることもできます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "However, be aware that directly inlining private keys in the configuration is not recommended. Use the `smallrye.jwt.sign.key` property only when you need to fetch a signing key value from a remote secret manager."
msgstr "ただし、設定に秘密鍵を直接インライン化することは推奨されない点に注意してください。リモートシークレットマネージャーから署名キーの値を取得する必要がある場合にのみ、 `smallrye.jwt.sign.key` プロパティーを使用してください。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "The keys can also be loaded by the code that builds the token, and then supplied to JWT Build API for token creation."
msgstr "キーは、トークンを構築するコードによって読み込まれ、トークン作成のために JWT ビルド API に渡すこともできます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "If you need to sign or encrypt the token by using the symmetric secret key, consider using `io.smallrye.jwt.util.KeyUtils` to generate a `SecretKey` of the required length."
msgstr "対称秘密鍵を使用してトークンに署名または暗号化する必要がある場合は、 `io.smallrye.jwt.util.KeyUtils` を使用して必要な長さの `SecretKey` を生成することを検討してください。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "For example, a 64-byte key is required to sign a token by using the `HS512` algorithm (`512/8`), and a 32-byte key is needed to encrypt the content encryption key with the `A256KW` algorithm (`256/8`):"
msgstr "たとえば、 `HS512` アルゴリズム (`512/8`) を使用してトークンに署名するには 64 バイトのキーが、 `A256KW` アルゴリズム (`256/8`) を使用してコンテンツ暗号鍵を暗号化するには 32 バイトのキーが必要です。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can also consider using a JSON Web Key (JWK) or JSON Web Key Set (JWK Set) format to store a secret key on a secure file system. You can reference the key by using the `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` properties."
msgstr "また、JSON Web Key (JWK) または JSON Web Key Set (JWK Set) 形式を使用して、秘密鍵を安全なファイルシステムに保存することも検討できます。 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` プロパティーを使用して、キーを参照できます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Example JWK"
msgstr "JWK の例"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Example JWK Set"
msgstr "JWK セットの例"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "You can also use `io.smallrye.jwt.util.KeyUtils` to generate a pair of asymmetric RSA or EC keys. These keys can be stored in `JWK`, `JWK Set`, or `PEM` format."
msgstr "`io.smallrye.jwt.util.KeyUtils` を使用して、非対称 RSA または EC キーのペアを生成することもできます。これらのキーは、 `JWK` 、 `JWK Set` 、または `PEM` 形式を使用して保存できます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "SmallRye JWT Builder configuration"
msgstr "SmallRye JWT Builder の設定"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "SmallRye JWT supports the following properties, which can be used to customize how claims are signed or encrypted:"
msgstr "SmallRye JWT は、クレームの署名または暗号化の方法をカスタマイズするために使用できる次のプロパティーをサポートしています。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Property Name"
msgstr "プロパティ名"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Default"
msgstr "デフォルト"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Description"
msgstr "説明"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.sign.key.location`"
msgstr "`smallrye.jwt.sign.key.location`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "none"
msgstr "none"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Location of a private key used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr "引数なしの `sign()` または `innerSign()` メソッドが呼び出されたときにクレームに署名するために使用される秘密鍵の場所です。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.sign.key`"
msgstr "`smallrye.jwt.sign.key`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Key value used to sign the claims when either a no-argument `sign()` or `innerSign()` method is called."
msgstr "引数なしの `sign()` または `innerSign()` メソッドが呼び出されたときにクレームに署名するために使用されるキー値。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.sign.key.id`"
msgstr "`smallrye.jwt.sign.key.id`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Signing key identifier, checked only when JWK keys are used."
msgstr "署名キー識別子。JWK キーが使用される場合にのみチェックされます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.encrypt.key.location`"
msgstr "`smallrye.jwt.encrypt.key.location`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Location of the public key used to encrypt claims or the inner JWT when the no-argument `encrypt()` method is called."
msgstr "引数なしの `encrypt()` メソッドが呼び出されたときに、クレームまたは内部 JWT を暗号化するために使用される公開鍵の場所です。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.sign.relax-key-validation`"
msgstr "`smallrye.jwt.sign.relax-key-validation`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`false`"
msgstr "`false`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Relax the validation of the signing keys."
msgstr "署名キーの検証を緩和します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.encrypt.key`"
msgstr "`smallrye.jwt.encrypt.key`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Key value used to encrypt the claims or the inner JWT when a no-argument `encrypt()` method is called."
msgstr "引数なしの `encrypt()` メソッドが呼び出されたときにクレームまたは内部 JWT を暗号化するために使用されるキー値。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.encrypt.key.id`"
msgstr "`smallrye.jwt.encrypt.key.id`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Encryption key identifier, checked only when JWK keys are used."
msgstr "暗号鍵識別子。JWK キーが使用される場合にのみチェックされます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.encrypt.relax-key-validation`"
msgstr "`smallrye.jwt.encrypt.relax-key-validation`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Relax the validation of the encryption keys."
msgstr "暗号化キーの検証を緩和します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.signature-algorithm`"
msgstr "`smallrye.jwt.new-token.signature-algorithm`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`RS256`"
msgstr "`RS256`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Signature algorithm. Checked if the JWT signature builder has not already set the signature algorithm."
msgstr "署名アルゴリズム。JWT 署名ビルダーが署名アルゴリズムをまだ設定していないかどうかを確認します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.key-encryption-algorithm`"
msgstr "`smallrye.jwt.new-token.key-encryption-algorithm`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`RSA-OAEP`"
msgstr "`RSA-OAEP`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Key encryption algorithm. Checked if the JWT encryption builder has not already set the key encryption algorithm."
msgstr "キー暗号化アルゴリズム。JWT 暗号化ビルダーがキー暗号化アルゴリズムをまだ設定していないかどうかを確認します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.content-encryption-algorithm`"
msgstr "`smallrye.jwt.new-token.content-encryption-algorithm`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`A256GCM`"
msgstr "`A256GCM`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Content encryption algorithm. Checked if the JWT encryption builder has not already set the content encryption algorithm."
msgstr "コンテンツ暗号化アルゴリズム。JWT 暗号化ビルダーがコンテンツ暗号化アルゴリズムをまだ設定していないかどうかを確認します。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.lifespan`"
msgstr "`smallrye.jwt.new-token.lifespan`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`300`"
msgstr "`300`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Token lifespan in seconds used to calculate an `exp` (expiry) claim value if this claim has not already been set."
msgstr "このクレームがまだ設定されていない場合に、 `exp` (有効期限) クレーム値を計算するために使用されるトークンの有効期間 (秒単位)。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.issuer`"
msgstr "`smallrye.jwt.new-token.issuer`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Token issuer used to set an `iss` (issuer) claim value if this claim has not already been set."
msgstr "このクレームがまだ設定されていない場合に、 `iss` (発行者) クレーム値を設定するために使用されるトークン発行者。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.audience`"
msgstr "`smallrye.jwt.new-token.audience`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Token audience used to set an `aud` (audience) claim value if this claim has not already been set."
msgstr "このクレームがまだ設定されていない場合に、 `aud` (オーディエンス) クレーム値を設定するために使用されるトークンオーディエンス。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.new-token.override-matching-claims`"
msgstr "`smallrye.jwt.new-token.override-matching-claims`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Set this property to `true` for `smallrye.jwt.new-token.issuer` and `smallrye.jwt.new-token.audience` values to override the already initialized `iss` (issuer) and `aud` (audience) claims."
msgstr "既に初期化されている `iss` （発行者）と `aud` （視聴者）のクレームを `smallrye.jwt.new-token.issuer` と `smallrye.jwt.new-token.audience` の値で上書きするために、 このプロパティを `true` に設定します。"

#: _versions/3.27/guides/security-jwt-build.adoc
#, fuzzy
msgid "`smallrye.jwt.new-token.add-default-claims`"
msgstr "`smallrye.jwt.new-token.add-default-claims`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "true"
msgstr "true"

#: _versions/3.27/guides/security-jwt-build.adoc
#, fuzzy
msgid "Set this property to `false` to disable an automatic addition of the `iat` (issued at), `exp` (expiration time) and `jti` (token identifier) claims when such claims have not already been set."
msgstr "このプロパティを `false` に設定すると、 `iat` (issued at)、 `exp` (expiration time)、 `jti` (token identifier) のクレームがまだ設定されていない場合、自動追加を無効にします。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.type`"
msgstr "`smallrye.jwt.keystore.type`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`JKS`"
msgstr "`JKS`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This property can be used to customize a keystore type if either `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` or both of these properties point to a `KeyStore` file. If it is not set then the file name will be checked to determine the keystore type before defaulting to `JKS`."
msgstr "このプロパティは、 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` のいずれか、あるいはこれらのプロパティの両方が `KeyStore` ファイルを指している場合に、キーストアタイプをカスタマイズするために使用することができます。このプロパティが設定されていない場合、ファイル名をチェックしてキーストアの種類を決定し、デフォルトで `JKS` に設定されます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.provider`"
msgstr "`smallrye.jwt.keystore.provider`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This property can be used to customize a `KeyStore` provider if `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` point to a `KeyStore` file."
msgstr "このプロパティは、 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` が `KeyStore` ファイルを指している場合に、 `KeyStore` プロバイダをカスタマイズするために使用できます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.password`"
msgstr "`smallrye.jwt.keystore.password`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "Keystore password. If `smallrye.jwt.sign.key.location` or `smallrye.jwt.encrypt.key.location` point to a `KeyStore` file, this property must be set."
msgstr "キーストアのパスワード。 `smallrye.jwt.sign.key.location` または `smallrye.jwt.encrypt.key.location` が `KeyStore` ファイルを指している場合は、このプロパティーを設定する必要があります。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.encrypt.key.alias`"
msgstr "`smallrye.jwt.keystore.encrypt.key.alias`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This property must be set to identify the public encryption key that is extracted from `KeyStore` from a matching certificate if `smallrye.jwt.encrypt.key.location` points to a `KeyStore` file."
msgstr "`smallrye.jwt.encrypt.key.location` が `KeyStore` ファイルを指している場合、一致する証明書の `KeyStore` から抽出された公開暗号鍵を識別するには、このプロパティーを設定する必要があります。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.sign.key.alias`"
msgstr "`smallrye.jwt.keystore.sign.key.alias`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This property must be set to identify a private signing key if `smallrye.jwt.sign.key.location` points to a `KeyStore` file."
msgstr "このプロパティは、 `smallrye.jwt.sign.key.location` が `KeyStore` ファイルを指している場合、秘密署名鍵を特定するために設定する必要があります。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "`smallrye.jwt.keystore.sign.key.password`"
msgstr "`smallrye.jwt.keystore.sign.key.password`"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "This property can be set if a private signing key's password in `KeyStore` is different from `smallrye.jwt.keystore.password` when `smallrye.jwt.sign.key.location` points to a `KeyStore` file."
msgstr "このプロパティーは、 `smallrye.jwt.sign.key.location` が `KeyStore` ファイルを指しているときに、 `KeyStore` 内の秘密署名鍵のパスワードが `smallrye.jwt.keystore.password` と異なる場合に設定できます。"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "References"
msgstr "リファレンス"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"
msgstr "link:https://github.com/smallrye/smallrye-jwt[SmallRye JWT]"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[JSON Web Token]"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"
msgstr "link:https://tools.ietf.org/html/rfc7515[JSON Web Signature]"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"
msgstr "link:https://tools.ietf.org/html/rfc7516[JSON Web Encryption]"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"
msgstr "link:https://tools.ietf.org/html/rfc7518[JSON Web Algorithms]"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]"
msgstr "link:https://bitbucket.org/b_c/jose4j/wiki/Home[Jose4J]"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証]"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "xref:security-jwt.adoc[Using SmallRye JWT to Protect Service Applications]"
msgstr "xref:security-jwt.adoc[SmallRye JWT を使用してサービスアプリケーションを保護する]"

#: _versions/3.27/guides/security-jwt-build.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"
