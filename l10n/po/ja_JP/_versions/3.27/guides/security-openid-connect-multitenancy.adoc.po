msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Using OpenID Connect (OIDC) multitenancy"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"This guide demonstrates how your OpenID Connect (OIDC) application can support multitenancy to serve multiple tenants from a single application.\n"
"These tenants can be distinct realms or security domains within the same OIDC provider or even distinct OIDC providers."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Each customer functions as a distinct tenant when serving multiple customers from the same application, such as in a SaaS environment.\n"
"By enabling multitenancy support to your applications, you can support distinct authentication policies for each tenant, even authenticating against different OIDC providers, such as Keycloak and Google."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "To authorize a tenant by using Bearer Token Authorization, see the xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication] guide."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "To authenticate and authorize a tenant by using the OIDC authorization code flow, read the xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow mechanism for protecting web applications] guide."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Also, see the xref:security-oidc-configuration-properties-reference.adoc[OpenID Connect (OIDC) configuration properties] reference guide."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "In this example, we build a very simple application that supports two resource methods:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "`/{tenant}`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "This resource returns information obtained from the ID token issued by the OIDC provider about the authenticated user and the current tenant."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "`/{tenant}/bearer`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "This resource returns information obtained from the Access Token issued by the OIDC provider about the authenticated user and the current tenant."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "For a thorough understanding, we recommend you build the application by following the upcoming step-by-step instructions."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Alternatively, if you prefer to start with the completed example, clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The solution is located in the `security-openid-connect-multi-tenancy-quickstart` link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"First, we need a new project.\n"
"Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "If you already have your Quarkus project configured, add the `oidc` extension to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "This adds the following to your build file:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Writing the application"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Start by implementing the `/{tenant}` endpoint.\n"
"As you can see from the source code below, it is just a regular Jakarta REST resource:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "To resolve the tenant from incoming requests and map it to a specific `quarkus-oidc` tenant configuration in `application.properties`, create an implementation for the `io.quarkus.oidc.TenantConfigResolver` interface, which can dynamically resolve tenant configurations:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In the preceding implementation, tenants are resolved from the request path.\n"
"If no tenant can be inferred, `null` is returned to indicate that the default tenant configuration should be used."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The `tenant-a` application type is `hybrid`; it can accept HTTP bearer tokens if provided.\n"
"Otherwise, it initiates an authorization code flow when authentication is required."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Configuring the application"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The first configuration is the default tenant configuration that should be used when the tenant cannot be inferred from the request.\n"
"Be aware that a `%prod` profile prefix is used with `quarkus.oidc.auth-server-url` to support testing a multitenant application with Dev Services For Keycloak.\n"
"This configuration uses a Keycloak instance to authenticate users."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The second configuration, provided by `TenantConfigResolver`, is used when an incoming request is mapped to the `tenant-a` tenant."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Both configurations map to the same Keycloak server instance while using distinct `realms`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Alternatively, you can configure the tenant `tenant-a` directly in `application.properties`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "In that case, also use a custom `TenantConfigResolver` to resolve it:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"You can define multiple tenants in your configuration file.\n"
"To map them correctly when resolving a tenant from your `TenantResolver` implementation, ensure each has a unique alias."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "However, using a static tenant resolution, which involves configuring tenants in `application.properties` and resolving them with `TenantResolver`, does not work for testing endpoints with Dev Services for Keycloak because it does not know how the requests are be mapped to individual tenants, and cannot dynamically provide tenant-specific `quarkus.oidc.<tenant-id>.auth-server-url` values. Therefore, using `%prod` prefixes with tenant-specific URLs within `application.properties` does not work in both test and development modes."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"When a current tenant represents an OIDC `web-app` application, the current `io.vertx.ext.web.RoutingContext` contains a `tenant-id` attribute by the time the custom tenant resolver has been called for all the requests completing the code authentication flow and the already authenticated requests, when either a tenant-specific state or session cookie already exists.\n"
"Therefore, when working with multiple OIDC providers, you only need a path-specific check to resolve a tenant id if the `RoutingContext` does not have the `tenant-id` attribute set, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "This is how Quarkus OIDC resolves static custom tenants if no custom `TenantResolver` is registered."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "A similar technique can be used with `TenantConfigResolver`, where a `tenant-id` provided in the context can return `OidcTenantConfig` already prepared with the previous request."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you also use Hibernate ORM multitenancy or MongoDB with Panache multitenancy and both tenant ids are the same,\n"
"you can get the tenant id from the `RoutingContext` attribute with `tenant-id`. You can find more information here:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "xref:hibernate-orm.adoc#multitenancy[Hibernate ORM multitenancy]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "xref:mongodb-panache.adoc#multitenancy[MongoDB with Panache multitenancy]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Starting and configuring the Keycloak server"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "To start a Keycloak server, you can use Docker and run the following command:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "where `keycloak.version` is set to `26.0.7` or higher."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Access your Keycloak server at http://localhost:8180[localhost:8180]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Log in as the `admin` user to access the Keycloak administration console.\n"
"The username and password are both `admin`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Now, import the realms for the two tenants:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/default-tenant-realm.json[default-tenant-realm.json] to create the default realm."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Import the link:{quickstarts-tree-url}/security-openid-connect-multi-tenancy-quickstart/config/tenant-a-realm.json[tenant-a-realm.json] to create the realm for the tenant `tenant-a`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "For more information, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Running and using the application"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Running in developer mode"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "To run the microservice in dev mode, use:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Running in JVM mode"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "After exploring the application in dev mode, you can run it as a standard Java application."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "First, compile it:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Then run it:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Running in native mode"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "This same demo can be compiled into native code; no modifications are required."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary, and optimized to run with minimal resources."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Compilation takes a bit longer, so this step is turned off by default;\n"
"let's build again by enabling the native build:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "After a little while, you can run this binary directly:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Test the application"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Use Dev Services for Keycloak"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] is recommended for the integration testing against Keycloak.\n"
"Dev Services for Keycloak launches and initializes a test container: it imports configured realms and sets a base Keycloak URL for the `CustomTenantResolver` to calculate a realm-specific URL."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "First, add the following dependencies:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"`quarkus-test-keycloak-server` provides a utility class `io.quarkus.test.keycloak.client.KeycloakTestClient` for acquiring the realm specific access tokens and which you can use with `RestAssured` for testing the `/{tenant}/bearer` endpoint expecting bearer access tokens.\n"
"`HtmlUnit` tests the `/{tenant}` endpoint and the authorization code flow."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Next, configure the required realms:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Finally, write your test, which runs in JVM mode:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "In native mode:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "For more information about how it is initialized and configured, see xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Use the browser"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "To test the application, open your browser and access the following URL:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/default[http://localhost:8080/default]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If everything works as expected, you are redirected to the Keycloak server to authenticate.\n"
"Be aware that the requested path defines a `default` tenant, which we don't have mapped in the configuration file.\n"
"In this case, the default configuration is used."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "To authenticate to the application, enter the following credentials in the Keycloak login page:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Username: `alice`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Password: `alice`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "After clicking the *Login* button, you are redirected back to the application."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "If you try now to access the application at the following URL:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "http://localhost:8080/tenant-a[http://localhost:8080/tenant-a]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"You are redirected again to the Keycloak login page.\n"
"However, this time, you are going to authenticate by using a different realm."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In both cases, the landing page shows the user's name and email if the user is successfully authenticated.\n"
"Although `alice` exists in both tenants, the application treats them as distinct users in separate realms."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Tenant resolution"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Tenant resolution order"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "OIDC tenants are resolved in the following order:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "`io.quarkus.oidc.Tenant` annotation is checked first if the proactive authentication is disabled."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Dynamic tenant resolution using a custom `TenantConfigResolver`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Static tenant resolution using one of these options: custom `TenantResolver`, configured tenant paths, and defaulting to the last request path segment as a tenant id."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Finally, the default OIDC tenant is selected if a tenant id has not been resolved after the preceding steps."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "See the following sections for more information:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "<<annotations-tenant-resolver>>"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "<<tenant-config-resolver>>"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "<<static-tenant-resolution>>"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Additionally, for the OIDC `web-app` applications, the state and session cookies also provide a hint about the tenant resolved with one of the above mentioned options at the time when the authorization code flow started. See the <<tenant-resolution-for-web-app>> section for more information."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Resolve with annotations"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "You can use the `io.quarkus.oidc.Tenant` annotation for resolving the tenant identifiers as an alternative to using `io.quarkus.oidc.TenantResolver`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Proactive HTTP authentication must be disabled (`quarkus.http.auth.proactive=false`) for this to work.\n"
"For more information, see the xref:security-proactive-authentication.adoc[Proactive authentication] guide."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Assuming your application supports two OIDC tenants, the `hr` and default tenants, all resource methods and classes carrying `@Tenant(\"hr\")` are authenticated by using the OIDC provider configured by `quarkus.oidc.hr.auth-server-url`.\n"
"In contrast, all other classes and methods are still authenticated by using the default OIDC provider."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The `io.quarkus.oidc.Tenant` annotation must be placed on either the resource class or resource method."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "In the example above, authentication of the `sayHello` endpoint is enforced with the `@Authenticated` annotation."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Alternatively, if you use an the xref:security-authorize-web-endpoints-reference.adoc#authorization-using-configuration[HTTP Security policy]\n"
"to secure the endpoint, then, for the `@Tenant` annotation be effective, you must delay this policy's permission check as shown in the following example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Tell Quarkus to run the HTTP permission check after the tenant has been selected with the `@Tenant` annotation."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The `io.quarkus.oidc.Tenant` annotation can be used to select tenant for a WebSockets Next server endpoint.\n"
"The annotation must be placed on the endpoint class, because the `SecurityIdentity` is created before the HTTP connection is upgraded to a WebSocket connection.\n"
"For more information about the HTTP upgrade security, see the xref:websockets-next-reference.adoc#secure-http-upgrade[Secure HTTP upgrade] section of the Quarkus \"WebSockets Next reference\" guide."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Dynamic tenant configuration resolution"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"If you need a more dynamic configuration for the different tenants you want to support and don't want to end up with multiple\n"
"entries in your configuration file, you can use the `io.quarkus.oidc.TenantConfigResolver`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "This interface allows you to dynamically create tenant configurations at runtime:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The `OidcTenantConfig` returned by this method is the same one used to parse the `oidc` namespace configuration from the `application.properties`.\n"
"You can populate it by using any settings supported by the `quarkus-oidc` extension."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "If the dynamic tenant resolver returns `null`, a <<static-tenant-resolution>> is attempted next."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Update resolved dynamic tenant configuration"
msgstr "解決された動的テナント設定の更新"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"It may be necessary to update the already resolved tenant configuration.\n"
"For example, a client secret may have to be updated following a client secret update in the registered OIDC application."
msgstr "すでに解決済みのテナント構成を更新する必要がある場合があります。例えば、登録されているOIDCアプリケーションのクライアントシークレットの更新後に、クライアントシークレットを更新する必要がある場合があります。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "To update the configuration, use `OidcTenantConfigBuilder` to create a new instance of `OidcTenantConfig` and modify it as required before returning it:"
msgstr "コンフィギュレーションを更新するには、 `OidcTenantConfigBuilder` を使用して `OidcTenantConfig` の新しいインスタンスを作成し、必要に応じてそれを変更してから返します："

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Use `io.quarkus.oidc.runtime.TenantConfigBean` to get the already resolved tenant configuration. Alternatively, you can use the tenant `OidcTenantConfig` cached in your resolver."
msgstr "解決済みのテナント構成を取得するには、 `io.quarkus.oidc.runtime.TenantConfigBean` を使用します。あるいは、リゾルバにキャッシュされているテナント `OidcTenantConfig` を使用することもできます。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "You may want to check if this configuration has already been updated, to avoid multiple redundant updates, for example, due to multliple redirects."
msgstr "この設定が既に更新されているかどうかをチェックすることで、 例えば複数のリダイレクトによる冗長な更新を避けることができます。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Use the resolved configuration to create a builder and update it as required."
msgstr "解決された設定を使用してビルダーを作成し、必要に応じて更新します。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Create an initial configuration if no configuration already exists."
msgstr "コンフィギュレーションがまだ存在しない場合は、初期コンフィギュレーションを作成します。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "This is all you have to do update the already resolved dynamic tenantr configuration, without having to reconnect to the provider."
msgstr "これだけで、プロバイダに再接続することなく、すでに解決済みのダイナミックtenanr設定を更新することができます。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"If reconnecting is necessary, for example, the `UserInfo` endpoint address may have changed for the tenant to rediscover it,\n"
"then simply set a `RoutingContext` `replace-tenant-configuration-context` property to `true`:"
msgstr "再接続が必要な場合、例えば、 `UserInfo` エンドポイントアドレスが変更され、テナントがそれを再発見する必要がある場合は、 `RoutingContext` `replace-tenant-configuration-context` プロパティを `true` に設定するだけです："

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Replace the resolved tenant configuration and re-connect to the provider"
msgstr "解決されたテナント構成を置き換え、プロバイダに再接続します。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Finally, if you decide to update the resoved configuration while the existing OIDC session is still active, you may to have the session cookie removed and the user re-authenticated to align with the latest tenant configuration requirements. Set a `RoutingContext` `remove-session-cookie` property to `true` if it is necessary:"
msgstr "最後に、既存の OIDC セッションがまだアクティブである間に、再認証された構成を更新することを決定した場合、最新のテナント構成要件に合わせるために、セッション Cookie を削除し、ユーザーを再認証させることができます。必要であれば、 `RoutingContext` `remove-session-cookie` プロパティを `true` に設定してください："

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Update the tenant configuration, remove the session cookie and triger the user re-authentication. If possible, prefer to get the user log-out first, instead of triggering the re-authentication at the tenant resolution time."
msgstr "テナント構成を更新し、セッションCookieを削除して、ユーザーの再認証をトリガーします。可能であれば、テナント解決時に再認証をトリガするのではなく、最初にユーザのログアウトを取得することをお勧めします。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Static tenant configuration resolution"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"When you set multiple tenant configurations in the `application.properties` file, you only need to specify how the tenant identifier gets resolved.\n"
"To configure the resolution of the tenant identifier, use one of the following options:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "<<tenant-resolver>>"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "<<configure-tenant-paths>>"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "<<default-tenant-resolver>>"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "<<issuer-based-tenant-resolver>>"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"These tenant resolution options are tried in the order they are listed until the tenant id gets resolved.\n"
"If the tenant id remains unresolved (`null`), the default (unnamed) tenant configuration is selected."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Resolve with `TenantResolver`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The following `application.properties` example shows how you can resolve the tenant identifier of two tenants named `a` and `b` by using the `TenantResolver` method:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "You can return the tenant id of either `a` or `b` from `io.quarkus.oidc.TenantResolver`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "In this example, the value of the last request path segment is a tenant id, but if required, you can implement a more complex tenant identifier resolution logic."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Configure tenant paths"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"You can use the `quarkus.oidc.tenant-paths` configuration property for resolving the tenant identifier as an alternative to using `io.quarkus.oidc.TenantResolver`.\n"
"Here is how you can select the `hr` tenant for the `sayHello` endpoint of the `HelloResource` resource used in the previous example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Same path-matching rules apply as for the `quarkus.http.auth.permission.authenticated.paths=/api/hello` configuration property from the previous example."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The wildcard placed at the end of the path represents any number of path segments. However the path is less specific than the `/api/hello`, therefore the `hr` tenant will be used to secure the `sayHello` endpoint."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The wildcard in the `/*/hello` represents exactly one path segment. Nevertheless, the wildcard is less specific than the `api`, therefore the `hr` tenant will be used."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Path-matching mechanism works exactly same as in the xref:security-authorize-web-endpoints-reference.adoc#authorization-using-configuration[Authorization using configuration]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "Use request path segments to find tenant id"
msgstr "リクエスト・パス・セグメントを使用してテナント ID を検索します。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "The default resolution for a tenant identifier is convention based, whereby the authentication request must include the tenant identifier in one of the path segments of the request path."
msgstr "テナント識別子のデフォルトの解決は規約に基づいており、認証リクエストは、リクエストパスのパスセグメントの1つにテナント識別子を含める必要があります。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The following `application.properties` example shows how you can configure two tenants named `google` and `github`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"In the provided example, both tenants configure OIDC `web-app` applications to use an authorization code flow to authenticate users and require session cookies to be generated after authentication.\n"
"After Google or GitHub authenticates the current user, the user gets returned to the `/signed-in` area for authenticated users, such as a secured resource path on the JAX-RS endpoint."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Finally, to complete the default tenant resolution, set the following configuration property:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid "If the endpoint is running on `http://localhost:8080`, you can also provide UI options for users to log in to either `http://localhost:8080/google` or `http://localhost:8080/github`, without having to add specific `/google` or `/github` JAX-RS resource paths."
msgstr "エンドポイントが `http://localhost:8080` で実行されている場合、ユーザがどちらかにログインするための UI オプションを提供することもできます。 `http://localhost:8080/google` または `http://localhost:8080/github` `/google` `/github` にログインするための UI オプションを提供することもできます。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
#, fuzzy
msgid ""
"Tenant identifiers are also recorded in the session cookie names after the authentication is completed.\n"
"Therefore, authenticated users can access the secured application area without requiring either the `google` or `github` path values to be included in the secured URL."
msgstr "テナント識別子は、認証完了後にセッションクッキー名にも記録されます。したがって、認証されたユーザーは、 `google` または `github` のパス値をセキュリティで保護された URL に含めることなく、セキュリティで保護されたアプリケーション領域にアクセスできます。"

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Default resolution can also work for Bearer token authentication.\n"
"Still, it might be less practical because a tenant identifier must always be set as the last path segment value."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Resolve tenants with a token issuer claim"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"OIDC tenants which support Bearer token authentication can be resolved using the access token's issuer.\n"
"The following conditions must be met for the issuer-based resolution to work:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The access token must be in the JWT format and contain an issuer (`iss`) token claim."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Only OIDC tenants with the application type `service` or `hybrid` are considered. These tenants must have a token issuer discovered or configured."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The issuer-based resolution is enabled with the `quarkus.oidc.resolve-tenants-with-issuer` property. For example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Tenants `tenant-a` and `tenant-b` are resolved using a JWT access token's issuer `iss` claim value."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Tenant `tenant-a` discovers the `issuer` from the OIDC provider's well-known configuration endpoint."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Tenant `tenant-b` configures the `issuer` because its OIDC provider does not support the discovery."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Tenant resolution for OIDC web-app applications"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Tenant resolution for the OIDC `web-app` applications must be done at least 3 times during an authorization code flow, when the OIDC tenant-specific configuration affects how each of the following steps is run."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Step 1: Unauthenticated user accesses an endpoint and is redirected to OIDC provider"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "When an unauthenticated user accesses a secured path, the user is redirected to the OIDC provider to authenticate and the tenant configuration is used to build the redirect URI."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "All the static and dynamic tenant resolution options listed in the <<static-tenant-resolution>> and <<tenant-config-resolver>> sections can be used to resolve a tenant."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Step 2: The user is redirected back to the endpoint"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "After the provider authentication, the user is redirected back to the Quarkus endpoint and the tenant configuration is used to complete the authorization code flow."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "All the static and dynamic tenant resolution options listed in the <<static-tenant-resolution>> and <<tenant-config-resolver>> sections can be used to resolve a tenant. Before the tenant resolution begins, the authorization code flow `state cookie` is used to set the already resolved tenant configuration id as a RoutingContext `tenant-id` attribute: both custom dynamic `TenantConfigResolver` and static `TenantResolver` tenant resolvers can check it."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Step 3: Authenticated user accesses the secured path using the session cookie"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The tenant configuration determines how the session cookie is verified and refreshed. Before the tenant resolution begins, the authorization code flow `session cookie` is used to set the already resolved tenant configuration id as a RoutingContext `tenant-id` attribute: both custom dynamic `TenantConfigResolver` and static `TenantResolver` tenant resolvers can check it."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "For example, here is how a custom `TenantConfigResolver` can avoid creating the already resolved tenant configuration, that may otherwise require blocking reads from the database or other remote sources:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Let Quarkus use the already resolved tenant configuration if it has been resolved earlier."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Check the request path to create tenant configurations."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The default configuration may look like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The preceding example assumes that the `tenant-a`, `tenant-b` and default tenants are all used to protect the same endpoint paths. In other words, after the user has authenticated with the `tenant-a` configuration, this user will not be able to choose to authenticate with the `tenant-b` or default configuration before this user logs out and has a session cookie cleared or expired."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"The situation where multiple OIDC `web-app` tenants protect the tenant-specific paths is less typical and also requires an extra care.\n"
"When multiple OIDC `web-app` tenants such as `tenant-a`, `tenant-b` and default tenants are used to control access to the tenant specific paths, the users authenticated with one OIDC provider must not be able to access the paths requiring an authentication with another provider, otherwise the results can be unpredictable, most likely causing unexpected authentication failures.\n"
"For example, if the `tenant-a` authentication requires a Keycloak authentication and the `tenant-b` authentication requires an Auth0 authentication, then, if the `tenant-a` authenticated user attempts to access a path secured by the `tenant-b` configuration, then the session cookie will not be verified, since the Auth0 public verification keys can not be used to verify the tokens signed by Keycloak.\n"
"An easy, recommended way to avoid multiple `web-app` tenants conflicting with each other is to set the tenant specific session path as shown in the following example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Set the tenant-specific cookie paths which makes sure the session cookie is only visible to the tenant which created it."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The default tenant configuration should be adjusted like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid ""
"Having the same session cookie path when multiple OIDC `web-app` tenants protect the tenant-specific paths is not recommended and should be avoided\n"
"as it requires even more care from the custom resolvers, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Let Quarkus use the already resolved tenant configuration if the already resolved tenant is expected for the current path."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Remove the `tenant-id` attribute if the already resolved tenant configuration is not expected for the current path."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Use the default tenant for all other paths. It is equivalent to removing the `tenant-id` attribute."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Disabling tenant configurations"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Custom `TenantResolver` and `TenantConfigResolver` implementations might return `null` if no tenant can be inferred from the current request and a fallback to the default tenant configuration is required."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "If you expect the custom resolvers always to resolve a tenant, you do not need to configure the default tenant resolution."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "To turn off the default tenant configuration, set  `quarkus.oidc.tenant-enabled=false`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The default tenant configuration is automatically disabled when `quarkus.oidc.auth-server-url` is not configured, but either custom tenant configurations are available or `TenantConfigResolver` is registered."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Be aware that tenant-specific configurations can also be disabled, for example: `quarkus.oidc.tenant-a.tenant-enabled=false`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Programmatic OIDC start-up for multiple tenants"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Static OIDC tenants can be created programmatically like in the example below:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Observe OIDC event."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Create OIDC tenant 'tenant-one'."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "Create OIDC tenant 'tenant-two'."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "The code above is a programmatic equivalent to the following configuration in the `application.properties` file:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "https://developers.google.com/identity/protocols/OpenIDConnect[Google OpenID Connect]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-multitenancy.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
