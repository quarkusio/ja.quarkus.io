msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Using Apache Kafka with Schema Registry and JSON Schema"
msgstr "スキーマレジストリとJSONスキーマと共にApache Kafkaを使用する"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"This guide shows how your Quarkus application can use Apache Kafka, https://json-schema.org/[JSON Schema] serialized\n"
"records, and connect to a schema registry (such as the https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registry] or https://www.apicur.io/registry/[Apicurio Registry])."
msgstr "このガイドでは、Quarkus アプリケーションで Apache Kafka、https://json-schema.org/[JSON スキーマ] でシリアライズされたレコードを使用し、スキーマレジストリー (https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registry] や https://www.apicur.io/registry/[Apicurio Registry] など) に接続する方法を説明します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you are not familiar with Kafka and Kafka in Quarkus in particular, consider\n"
"first going through the xref:kafka.adoc[Using Apache Kafka with Reactive Messaging] guide."
msgstr "特に Kafka や Kafka in Quarkus を使い慣れていない場合は、最初に xref:kafka.adoc[リアクティブメッセージングでの Apache Kafka の使用] ガイドを確認することをお勧めします。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Architecture"
msgstr "アーキテクチャ"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"In this guide we are going to implement a REST resource, namely `MovieResource`, that\n"
"will consume movie DTOs and put them in a Kafka topic."
msgstr "このガイドでは、REST リソース、つまりムービー DTO を消費して Kafka トピックに配置する `MovieResource` を実装します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Then, we will implement a consumer that will consume and collect messages from the same topic.\n"
"The collected messages will be then exposed by another resource, `ConsumedMovieResource`, via\n"
"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events[Server-Sent Events]."
msgstr "次に、同じトピックからメッセージを消費および収集するコンシューマーを実装します。収集されたメッセージは、 https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events[Server-Sent Events] を介して別のリソースである `ConsumedMovieResource` によって公開されます。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"The _Movies_ will be serialized and deserialized using JSON Schema.\n"
"The schema, describing the _Movie_, is stored in Apicurio Registry.\n"
"The same concept applies if you are using the Confluent JSON Schema _serde_ and Confluent Schema Registry."
msgstr ""
"_Movies_ は、JSON スキーマを使用してシリアライズおよびデシリアライズされます。\n"
"_Movie_ を記述するスキーマは、Apicurio Registry に保存されます。\n"
"Confluent JSON Schema _serde_ および Confluent Schema Registry を使用している場合も、同じ概念が適用されます。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "The solution is located in the `kafka-json-schema-quickstart` link:{quickstarts-tree-url}/kafka-json-schema-quickstart[directory]."
msgstr "ソリューションは `kafka-json-schema-quickstart` link:{quickstarts-tree-url}/kafka-json-schema-quickstart[ディレクトリー] にあります。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you use Confluent Schema Registry, you don't need the `quarkus-apicurio-registry-json-schema` extension.\n"
"Instead, you need the `quarkus-confluent-registry-json-schema` extension and a few more dependencies.\n"
"See <<confluent>> for details."
msgstr ""
"Confluent Schema Registry を使用する場合、`quarkus-apicurio-registry-json-schema` エクステンションは必要ありません。\n"
"代わりに、`quarkus-confluent-registry-json-schema` エクステンションとさらにいくつかの依存関係が必要です。\n"
"詳細は、<<confluent>> を参照してください。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Json Schema"
msgstr "JSON スキーマ"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Json Schema is a data serialization system. Data structures are described using schemas.\n"
"The first thing we need to do is to create a schema describing the `Movie` structure.\n"
"Create a file called `src/main/resources/json-schema.json` with the schema for our record (Kafka message):"
msgstr ""
"JSON スキーマはデータのシリアライズシステムです。データ構造はスキーマを使用して記述されます。\n"
"最初に `Movie` 構造を記述するスキーマを作成する必要があります。\n"
"レコード (Kafka メッセージ) のスキーマを使用して、`src/main/resources/json-schema.json` というファイルを作成します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Note that auto-generating the Java class from the JSON Schema definition is not possible. Therefore, you must define the Java class as follows so it can be used by the serialization process:"
msgstr "JSON スキーマ定義から Java クラスを自動生成することはできないことに注意してください。したがって、シリアライズプロセスで使用できるように、次のように Java クラスを定義する必要があります。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "The `Movie` producer"
msgstr "`Movie` プロデューサー"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Having defined the schema, we can now jump to implementing the `MovieResource`."
msgstr "スキーマを定義したら、 `MovieResource` を実装できます。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Let's open the `MovieResource`, inject an https://quarkus.io/blog/reactive-messaging-emitter/[`Emitter`] of `Movie` DTO and implement a `@POST` method\n"
"that consumes `Movie` and sends it through the `Emitter`:"
msgstr "`MovieResource` を開き、 `Movie` DTO の https://quarkus.io/blog/reactive-messaging-emitter/[`Emitter`] を挿入し、 `Movie` を消費する `@POST` メソッドを実装して `Emitter` 経由で送信してください。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Now, we need to _map_ the `movies` channel (the `Emitter` emits to this channel) to a Kafka topic and also _map_ the schema to be used on this channel.\n"
"To achieve this, edit the `application.properties` file, and add the following content:"
msgstr ""
"ここで、`movies` チャネル (`Emitter` がこのチャネルに出力) を Kafka トピックに _マップ_ し、このチャネルで使用されるスキーマも _マップ_ する必要があります。\n"
"これを実現するには、`application.properties` ファイルを編集し、次のコンテンツを追加します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Note that unlike in the avro serialization, xref:kafka.adoc#serialization-autodetection[autodetect] can't be used with JSON Schema, so we must define the  `value.serializer`.\n"
"Just like with avro, we still have to define the `apicurio.registry.auto-register` property."
msgstr ""
"Avro シリアライゼーションとは異なり、xref:kafka.adoc#serialization-autodetection[自動検出] は JSON スキーマでは使用できないため、`value.serializer` を定義する必要があることに注意してください。\n"
"Avro の場合と同様に、`apicurio.registry.auto-register` プロパティーを定義する必要があります。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you use Confluent Schema Registry, in this case you must define the `value.serializer` as well with the value `io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer`.\n"
"It is also detected automatically.\n"
"The Confluent Schema Registry analogue of `apicurio.registry.auto-register` is called `auto.register.schemas`.\n"
"It defaults to `true`, so it doesn't have to be configured in this example.\n"
"It can be explicitly set to `false` if you want to disable automatic schema registration."
msgstr ""
"Confluent Schema Registry を使用する場合、値 `io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer` を使用して `value.serializer` も定義する必要があります。\n"
"これは自動的に検出されます。\n"
"Confluent Schema Registry における `apicurio.registry.auto-register` の類似物は、`auto.register.schemas` と呼ばれるものです。\n"
"これはデフォルトで `true` に設定されているため、この例では設定する必要はありません。\n"
"自動スキーマ登録を無効にする場合は、明示的に `false` に設定できます。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "The `Movie` consumer"
msgstr "`Movie` コンシューマー"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"So, we can write records into Kafka containing our `Movie` data.\n"
"That data is serialized using JSON Schema.\n"
"Now, it's time to implement a consumer for them."
msgstr ""
"`Movie` データを含むレコードを Kafka に書き込むことができます。\n"
"そのデータは JSON スキーマを使用してシリアライズされます。\n"
"では、それらのコンシューマーを実装してみましょう。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Let's create `ConsumedMovieResource` that will consume `Movie` messages\n"
"from the `movies-from-kafka` channel and will expose it via Server-Sent Events:"
msgstr "`movies-from-kafka` チャネルからの `Movie` メッセージを消費し、Server-Sent Event を介して公開する `ConsumedMovieResource` を作成します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"The last bit of the application's code is the configuration of the `movies-from-kafka` channel in\n"
"`application.properties`:"
msgstr "アプリケーションのコードの最後のビットは、 `application.properties` の `movies-from-kafka` チャネルの設定です。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Again, unlike with Avro, we have to define the `value.deserializer`."
msgstr "ここでも、Avro とは異なり、`value.deserializer` を定義する必要があります。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you use Confluent Schema Registry, you must configure `value.deserializer` as well with the value ´io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer´.\n"
"They are both detected automatically."
msgstr ""
"Confluent Schema Registry を使用する場合は、値 ´io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer´ を使用して `value.deserializer` も設定する必要があります。\n"
"どちらも自動的に検出されます。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Running the application"
msgstr "アプリケーションの実行"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Start the application in dev mode:"
msgstr "アプリケーションを開発モードで実行します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Kafka broker and Apicurio Registry instance are started automatically thanks to Dev Services.\n"
"See xref:kafka-dev-services.adoc[Dev Services for Kafka] and xref:apicurio-registry-dev-services.adoc[Dev Services for Apicurio Registry] for more details."
msgstr "Dev Services により、Kafka ブローカーと Apicurio Registry インスタンスは自動的に開始されます。詳細については、xref:kafka-dev-services.adoc[Dev Services for Kafka] および xref:apicurio-registry-dev-services.adoc[Dev Services for Apicurio Registry] を参照してください。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"You might have noticed that we didn't configure the schema registry URL anywhere.\n"
"This is because Dev Services for Apicurio Registry configures all Kafka channels in Quarkus Messaging to use the automatically started registry instance."
msgstr ""
"スキーマレジストリのURLをどこにも設定していないことに気づいたかもしれません。\n"
"これは、Dev Services for Apicurio Registryによって、Quarkus MessagingのすべてのKafkaチャンネルが、自動的に起動されたレジストリインスタンスを使用するように設定されるためです。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Apicurio Registry, in addition to its native API, also exposes an endpoint that is API-compatible with Confluent Schema Registry.\n"
"Therefore, this automatic configuration works both for Apicurio Registry serde and Confluent Schema Registry serde."
msgstr "ネイティブ API に加えて、Apicurio Registry は Confluent Schema Registry と API 互換のエンドポイントも公開します。したがって、この自動設定は、Apicurio Registry serde と Confluent Schema Registry serde の両方で機能します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"However, note that there's no Dev Services support for running Confluent Schema Registry itself.\n"
"If you want to use a running instance of Confluent Schema Registry, configure its URL, together with the URL of a Kafka broker:"
msgstr "ただし、Confluent Schema Registry 自体の実行に対する Dev Services のサポートはないことに注意してください。Confluent Schema Registry の実行インスタンスを使用する場合は、その URL を Kafka ブローカーの URL と併せて設定します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "In the second terminal, query the `ConsumedMovieResource` resource with `curl`:"
msgstr "2 番目のターミナルで、 `ConsumedMovieResource` リソースを `curl` でクエリーします。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "In the third one, post a few movies:"
msgstr "3番目のターミナルで、いくつかの movie をポストします。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Observe what is printed in the second terminal. You should see something along the lines of:"
msgstr "2 番目のターミナルに表示されているものを確認します。次の行に何かが表示されているはずです。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Running in JVM or Native mode"
msgstr "JVM またはネイティブモードでの実行"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"When not running in dev or test mode, you will need to start your own Kafka broker and Apicurio Registry.\n"
"The easiest way to get them running is to use `docker-compose` to start the appropriate containers."
msgstr "開発モードまたはテストモードで実行していない場合は、独自の Kafka ブローカーと Apicurio Registry を起動する必要があります。そのための最も簡単な方法は、 `docker-compose` を使用して適切なコンテナーを起動することです。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you use Confluent Schema Registry, you already have a Kafka broker and Confluent Schema Registry instance running and configured.\n"
"You can ignore the `docker-compose` instructions here, as well as the Apicurio Registry configuration."
msgstr "Confluent Schema Registry を使用している場合は、すでに Kafka ブローカーと Confluent Schema Registry インスタンスが実行および設定されています。ここに記した`docker-compose` や Apicurio Registry の設定に関する説明は無視してかまいません。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Create a `docker-compose.yaml` file at the root of the project with the following content:"
msgstr "プロジェクトのルートに、次の内容の `docker-compose.yaml` ファイルを作成します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Before starting the application, let's first start the Kafka broker and Apicurio Registry:"
msgstr "アプリケーションを開始する前に、まず Kafka ブローカーと Apicurio Registry を起動します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"To stop the containers, use `docker-compose down`. You can also clean up\n"
"the containers with `docker-compose rm`"
msgstr "コンテナを停止するには、 `docker-compose down` を使用します。 `docker-compose rm` を使用してコンテナをクリーンアップすることもできます。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "You can build the application with:"
msgstr "次のコマンドでアプリケーションをビルドできます。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "And run it in JVM mode with:"
msgstr "その後、次のコマンドを使用して JVM モードで実行します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"By default, the application tries to connect to a Kafka broker listening at `localhost:9092`.\n"
"You can configure the bootstrap server using: `java -Dkafka.bootstrap.servers=\\... -jar target/quarkus-app/quarkus-run.jar`"
msgstr "デフォルトでは、アプリケーションは `localhost:9092` でリッスンしている Kafka ブローカーに接続しようとします。ブートストラップサーバーは、 `java -Dkafka.bootstrap.servers=\\... -jar target/quarkus-app/quarkus-run.jar` を使用して設定できます。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Specifying the registry URL on the command line is not very convenient, so you can add a configuration property only for the `prod` profile:"
msgstr "コマンドラインでレジストリー URL を指定する方法は便利ではないため、 `prod` プロファイルに対してのみ設定プロパティーを追加します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "You can build a native executable with:"
msgstr "以下でネイティブ実行可能ファイルをビルドできます。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "and run it with:"
msgstr "次に、それを実行します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Testing the application"
msgstr "アプリケーションのテスト"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"As mentioned above, Dev Services for Kafka and Apicurio Registry automatically start and configure a Kafka broker and Apicurio Registry instance in dev mode and for tests.\n"
"Hence, we don't have to set up Kafka and Apicurio Registry ourselves.\n"
"We can just focus on writing the test."
msgstr "上記のとおり、Dev Services for Kafka と Apicurio Registry は、Kafka ブローカーと Apicurio Registry インスタンスを開発モードおよびテスト用に自動で開始し、設定します。したがって、Kafka および Apicurio Registry を自分で設定する必要はなく、テストの作成に集中できます。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "First, let's add test dependencies on REST Client and Awaitility to the build file:"
msgstr "まず、REST クライアントと Awaitility のテスト依存関係をビルドファイルに追加します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"In the test, we will send movies in a loop and check if the `ConsumedMovieResource` returns\n"
"what we send."
msgstr "テストでは、ムービーをループで送信し、送信したものを `ConsumedMovieResource` が返すかどうかを確認します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"We modified the `MovieResourceTest` that was generated together with the project. This test class has a\n"
"subclass, `NativeMovieResourceIT`, that runs the same test against the native executable.\n"
"To run it, execute:"
msgstr "プロジェクトと一緒に生成された `MovieResourceTest` を変更しました。このテストクラスには、ネイティブ実行可能ファイルに対して同じテストを実行するサブクラ ス`NativeMovieResourceIT` があります。実行するには、次を実行します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Manual setup"
msgstr "手動セットアップ"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "If we couldn't use Dev Services and wanted to start a Kafka broker and Apicurio Registry instance manually, we would define a xref:getting-started-testing.adoc#quarkus-test-resource[QuarkusTestResourceLifecycleManager]."
msgstr "Dev Services を使用できず、Kafka ブローカーと Apicurio Registry インスタンスを手動で開始する場合は、xref:getting-started-testing.adoc#quarkus-test-resource[QuarkusTestResourceLifecycleManager] を定義します。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Using compatible versions of the Apicurio Registry"
msgstr "互換性のあるバージョンのApicurio Registryの使用"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"The `quarkus-apicurio-registry-json-schema` extension depends on recent versions of Apicurio Registry client,\n"
"and most versions of Apicurio Registry server and client are backwards compatible.\n"
"For some you need to make sure that the client used by Serdes is compatible with the server."
msgstr ""
"`quarkus-apicurio-registry-json-schema` エクステンションは、最近のバージョンの Apicurio Registry クライアントに依存しています。\n"
"Apicurio Registry サーバーおよびクライアントのほとんどのバージョンには後方互換性があります。\n"
"場合によっては、Serdes で使用するクライアントがサーバーと互換性があることを確認する必要があります。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "For example, with Apicurio Dev Service if you set the image name to use version `2.1.5.Final`:"
msgstr "例えば、Apicurio Dev Serviceで、バージョン `2.1.5.Final` を使用するようにイメージ名を設定した場合："

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"You need to make sure that `apicurio-registry-serdes-json-schema-serde` dependency\n"
"and the REST client `apicurio-common-rest-client-vertx` dependency are set to compatible versions:"
msgstr "`apicurio-registry-serdes-json-schema-serde` の依存関係と REST クライアント `apicurio-common-rest-client-vertx` の依存関係が、互換性のあるバージョンに設定されていることを確認する必要があります。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Known previous compatible versions for `apicurio-registry-client` and `apicurio-common-rest-client-vertx` are the following"
msgstr "`apicurio-registry-client` および `apicurio-common-rest-client-vertx` の既知の旧互換バージョンは以下の通りです。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "`apicurio-registry-client` 2.1.5.Final with `apicurio-common-rest-client-vertx` 0.1.5.Final"
msgstr "`apicurio-registry-client` 2.1.5.Final と 0.1.5.Final `apicurio-common-rest-client-vertx`"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "`apicurio-registry-client` 2.3.1.Final with `apicurio-common-rest-client-vertx` 0.1.13.Final"
msgstr "`apicurio-registry-client` 2.3.1.Final と 0.1.13.Final `apicurio-common-rest-client-vertx`"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Using the Confluent Schema Registry"
msgstr "Confluent Schema Registryの使用"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you want to use the Confluent Schema Registry, you need the `quarkus-confluent-registry-json-schema` extension, instead of the `quarkus-apicurio-registry-json-schema` extension.\n"
"Also, you need to add a few dependencies and a custom Maven repository to your `pom.xml` / `build.gradle` file:"
msgstr ""
"Confluent Schema Registry を使用する場合は、`quarkus-apicurio-registry-json-schema` エクステンションではなく、`quarkus-confluent-registry-json-schema` エクステンションが必要です。\n"
"また、`pom.xml` / `build.gradle` ファイルにいくつかの依存関係とカスタム Maven リポジトリーを追加する必要があります。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"In JVM mode, any version of `io.confluent:kafka-json-schema-serializer` can be used.\n"
"In native mode, Quarkus supports the following versions: `6.2.x`, `7.0.x`, `7.1.x`, `7.2.x`, `7.3.x`."
msgstr ""
"JVM モードでは、`io.confluent:kafka-json-schema-serializer` の任意のバージョンを使用できます。\n"
"ネイティブモードでは、Quarkus はバージョン `6.2.x`、`7.0.x`、`7.1.x`、`7.2.x`、`7.3.x` をサポートします。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "For version `7.4.x` and `7.5.x`, due to an issue with the Confluent Schema Serializer, you need to add another dependency:"
msgstr "バージョン `7.4.x` および `7.5.x` では、Confluent スキーマシリアライザーに問題があるため、別の依存関係を追加する必要があります："

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "For any other versions, the native configuration may need to be adjusted."
msgstr "それ以外のバージョンでは、ネイティブコンフィギュレーションの調整が必要な場合があります。"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Further reading"
msgstr "さらに詳しく"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/kafka/kafka.html[SmallRye Reactive Messaging Kafka] documentation"
msgstr "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/kafka/kafka.html[Kafka における SmallRye リアクティブメッセージング] のドキュメント"
