msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Using Apache Kafka with Schema Registry and JSON Schema"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"This guide shows how your Quarkus application can use Apache Kafka, https://json-schema.org/[JSON Schema] serialized\n"
"records, and connect to a schema registry (such as the https://docs.confluent.io/platform/current/schema-registry/index.html[Confluent Schema Registry] or https://www.apicur.io/registry/[Apicurio Registry])."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you are not familiar with Kafka and Kafka in Quarkus in particular, consider\n"
"first going through the xref:kafka.adoc[Using Apache Kafka with Reactive Messaging] guide."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"In this guide we are going to implement a REST resource, namely `MovieResource`, that\n"
"will consume movie DTOs and put them in a Kafka topic."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Then, we will implement a consumer that will consume and collect messages from the same topic.\n"
"The collected messages will be then exposed by another resource, `ConsumedMovieResource`, via\n"
"https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events[Server-Sent Events]."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"The _Movies_ will be serialized and deserialized using JSON Schema.\n"
"The schema, describing the _Movie_, is stored in Apicurio Registry.\n"
"The same concept applies if you are using the Confluent JSON Schema _serde_ and Confluent Schema Registry."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "The solution is located in the `kafka-json-schema-quickstart` link:{quickstarts-tree-url}/kafka-json-schema-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Creating the Maven Project"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you use Confluent Schema Registry, you don't need the `quarkus-apicurio-registry-json-schema` extension.\n"
"Instead, you need the `quarkus-confluent-registry-json-schema` extension and a few more dependencies.\n"
"See <<confluent>> for details."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Json Schema"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Json Schema is a data serialization system. Data structures are described using schemas.\n"
"The first thing we need to do is to create a schema describing the `Movie` structure.\n"
"Create a file called `src/main/resources/json-schema.json` with the schema for our record (Kafka message):"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Note that auto-generating the Java class from the JSON Schema definition is not possible. Therefore, you must define the Java class as follows so it can be used by the serialization process:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "The `Movie` producer"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Having defined the schema, we can now jump to implementing the `MovieResource`."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Let's open the `MovieResource`, inject an https://quarkus.io/blog/reactive-messaging-emitter/[`Emitter`] of `Movie` DTO and implement a `@POST` method\n"
"that consumes `Movie` and sends it through the `Emitter`:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Now, we need to _map_ the `movies` channel (the `Emitter` emits to this channel) to a Kafka topic and also _map_ the schema to be used on this channel.\n"
"To achieve this, edit the `application.properties` file, and add the following content:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Note that unlike in the avro serialization, xref:kafka.adoc#serialization-autodetection[autodetect] can't be used with JSON Schema, so we must define the  `value.serializer`.\n"
"Just like with avro, we still have to define the `apicurio.registry.auto-register` property."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you use Confluent Schema Registry, in this case you must define the `value.serializer` as well with the value `io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer`.\n"
"It is also detected automatically.\n"
"The Confluent Schema Registry analogue of `apicurio.registry.auto-register` is called `auto.register.schemas`.\n"
"It defaults to `true`, so it doesn't have to be configured in this example.\n"
"It can be explicitly set to `false` if you want to disable automatic schema registration."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "The `Movie` consumer"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"So, we can write records into Kafka containing our `Movie` data.\n"
"That data is serialized using JSON Schema.\n"
"Now, it's time to implement a consumer for them."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Let's create `ConsumedMovieResource` that will consume `Movie` messages\n"
"from the `movies-from-kafka` channel and will expose it via Server-Sent Events:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"The last bit of the application's code is the configuration of the `movies-from-kafka` channel in\n"
"`application.properties`:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Again, unlike with Avro, we have to define the `value.deserializer`."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you use Confluent Schema Registry, you must configure `value.deserializer` as well with the value ´io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer´.\n"
"They are both detected automatically."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Running the application"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Start the application in dev mode:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Kafka broker and Apicurio Registry instance are started automatically thanks to Dev Services.\n"
"See xref:kafka-dev-services.adoc[Dev Services for Kafka] and xref:apicurio-registry-dev-services.adoc[Dev Services for Apicurio Registry] for more details."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"You might have noticed that we didn't configure the schema registry URL anywhere.\n"
"This is because Dev Services for Apicurio Registry configures all Kafka channels in Quarkus Messaging to use the automatically started registry instance."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"Apicurio Registry, in addition to its native API, also exposes an endpoint that is API-compatible with Confluent Schema Registry.\n"
"Therefore, this automatic configuration works both for Apicurio Registry serde and Confluent Schema Registry serde."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"However, note that there's no Dev Services support for running Confluent Schema Registry itself.\n"
"If you want to use a running instance of Confluent Schema Registry, configure its URL, together with the URL of a Kafka broker:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "In the second terminal, query the `ConsumedMovieResource` resource with `curl`:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "In the third one, post a few movies:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Observe what is printed in the second terminal. You should see something along the lines of:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Running in JVM or Native mode"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"When not running in dev or test mode, you will need to start your own Kafka broker and Apicurio Registry.\n"
"The easiest way to get them running is to use `docker-compose` to start the appropriate containers."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you use Confluent Schema Registry, you already have a Kafka broker and Confluent Schema Registry instance running and configured.\n"
"You can ignore the `docker-compose` instructions here, as well as the Apicurio Registry configuration."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Create a `docker-compose.yaml` file at the root of the project with the following content:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Before starting the application, let's first start the Kafka broker and Apicurio Registry:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"To stop the containers, use `docker-compose down`. You can also clean up\n"
"the containers with `docker-compose rm`"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "You can build the application with:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "And run it in JVM mode with:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"By default, the application tries to connect to a Kafka broker listening at `localhost:9092`.\n"
"You can configure the bootstrap server using: `java -Dkafka.bootstrap.servers=\\... -jar target/quarkus-app/quarkus-run.jar`"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Specifying the registry URL on the command line is not very convenient, so you can add a configuration property only for the `prod` profile:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "You can build a native executable with:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "and run it with:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Testing the application"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"As mentioned above, Dev Services for Kafka and Apicurio Registry automatically start and configure a Kafka broker and Apicurio Registry instance in dev mode and for tests.\n"
"Hence, we don't have to set up Kafka and Apicurio Registry ourselves.\n"
"We can just focus on writing the test."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "First, let's add test dependencies on REST Client and Awaitility to the build file:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"In the test, we will send movies in a loop and check if the `ConsumedMovieResource` returns\n"
"what we send."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"We modified the `MovieResourceTest` that was generated together with the project. This test class has a\n"
"subclass, `NativeMovieResourceIT`, that runs the same test against the native executable.\n"
"To run it, execute:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Manual setup"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "If we couldn't use Dev Services and wanted to start a Kafka broker and Apicurio Registry instance manually, we would define a xref:getting-started-testing.adoc#quarkus-test-resource[QuarkusTestResourceLifecycleManager]."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Using compatible versions of the Apicurio Registry"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"The `quarkus-apicurio-registry-json-schema` extension depends on recent versions of Apicurio Registry client,\n"
"and most versions of Apicurio Registry server and client are backwards compatible.\n"
"For some you need to make sure that the client used by Serdes is compatible with the server."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "For example, with Apicurio Dev Service if you set the image name to use version `2.1.5.Final`:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"You need to make sure that `apicurio-registry-serdes-json-schema-serde` dependency\n"
"and the REST client `apicurio-common-rest-client-vertx` dependency are set to compatible versions:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Known previous compatible versions for `apicurio-registry-client` and `apicurio-common-rest-client-vertx` are the following"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "`apicurio-registry-client` 2.1.5.Final with `apicurio-common-rest-client-vertx` 0.1.5.Final"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "`apicurio-registry-client` 2.3.1.Final with `apicurio-common-rest-client-vertx` 0.1.13.Final"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Using the Confluent Schema Registry"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"If you want to use the Confluent Schema Registry, you need the `quarkus-confluent-registry-json-schema` extension, instead of the `quarkus-apicurio-registry-json-schema` extension.\n"
"Also, you need to add a few dependencies and a custom Maven repository to your `pom.xml` / `build.gradle` file:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid ""
"In JVM mode, any version of `io.confluent:kafka-json-schema-serializer` can be used.\n"
"In native mode, Quarkus supports the following versions: `6.2.x`, `7.0.x`, `7.1.x`, `7.2.x`, `7.3.x`."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "For version `7.4.x` and `7.5.x`, due to an issue with the Confluent Schema Serializer, you need to add another dependency:"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "For any other versions, the native configuration may need to be adjusted."
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "Further reading"
msgstr ""

#: _versions/3.27/guides/kafka-schema-registry-json-schema.adoc
msgid "link:https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.4/kafka/kafka.html[SmallRye Reactive Messaging Kafka] documentation"
msgstr ""
