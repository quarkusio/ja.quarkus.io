msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "Quarkus Virtual Thread support for gRPC services"
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "This guide explains how to benefit from Java virtual threads when implementing a gRPC service."
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid ""
"This guide focuses on using virtual threads with the gRPC extensions.\n"
"Please refer to xref:virtual-threads.adoc[Writing simpler reactive REST services with Quarkus Virtual Thread support]\n"
"to read more about Java virtual threads in general and the Quarkus Virtual Thread support."
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid ""
"By default, the Quarkus gRPC extension invokes service methods on an event-loop thread.\n"
"See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic.\n"
"But, you can also use the link:{blocking_annotation}[@Blocking] annotation to indicate that the service is _blocking_ and should be run on a worker thread."
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "The idea behind Quarkus Virtual Thread support for gRPC services is to offload the service method invocation on virtual threads, instead of running it on an event-loop thread or a worker thread."
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid ""
"To enable virtual thread support on a service method, simply add the link:{runonvthread}[@RunOnVirtualThread] annotation to the method.\n"
"If the JDK is compatible (Java 19 or later versions - we recommend 21+) then the invocation will be offloaded to a new virtual thread.\n"
"It will then be possible to perform blocking operations without blocking the platform thread upon which the virtual thread is mounted."
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "Configuring gRPC services to use virtual threads"
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid ""
"Let's see an example of how to implement a gRPC service using virtual threads.\n"
"First, make sure to have the gRPC extension dependency in your build file:"
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "You also need to make sure that you are using Java 19 or later (we recommend 21+), this can be enforced in your `pom.xml` file with the following:"
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "Run your application with:"
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "or to use the Quarkus Dev mode, insert the following to the `quarkus-maven-plugin` configuration:"
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "Then you can start using the annotation `@RunOnVirtualThread` in your service implementation:"
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "Limitations"
msgstr ""

#: _versions/3.27/guides/grpc-virtual-threads.adoc
msgid "The gRPC methods receiving _streams_, such as a `Multi` cannot use `@RunOnVirtualThread`, as the method must not be blocking and produce its result (`Multi` or `Uni`) immediately."
msgstr ""
