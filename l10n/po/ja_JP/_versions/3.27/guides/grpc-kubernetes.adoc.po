msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "Deploying your gRPC Service in Kubernetes"
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid ""
"This page explains how to deploy your gRPC service in Quarkus in Kubernetes.\n"
"We'll continue with the example from xref:grpc-getting-started.adoc[the Getting Started gRPC guide]."
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "Configuring your project to use the Quarkus Kubernetes extension"
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "Add the Quarkus Kubernetes extension to your build file:"
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "Next, we want to expose our application using the Kubernetes Ingress resource:"
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "The Quarkus Kubernetes will bind the HTTP server using the port name `http` and the gRPC server using the port name `grpc`. By default, the Quarkus application will only expose the port name `http`, so only the HTTP server will be publicly accessible. To expose the gRPC server instead, set the `quarkus.kubernetes.ingress.target-port=grpc` property in your application.properties:"
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "If you configure Quarkus to use the same port for both HTTP and gRPC servers with the property `quarkus.grpc.server.use-separate-server=false`, then you don't need to change the default `target-port`."
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "Finally, we need to generate the Kubernetes manifests by running the command in a terminal:"
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "Once generated, you can look at the `target/kubernetes` directory:"
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "You can find more information about how to deploy the application in Kubernetes in the xref:deploying-to-kubernetes.adoc#deployment[the Kubernetes guide]."
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "Using gRPC Health probes"
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "By default, the Kubernetes resources do not contain readiness and liveness probes. To add them, import the SmallRye Health extension to your build file:"
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "More information about the health extension can be found in xref:smallrye-health.adoc[the SmallRye Health guide]."
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "By default, this extension will configure the probes to use the HTTP server (which is provided by some extensions like the Quarkus REST (formerly RESTEasy Reactive) extension). Internally, this probe will also use xref:grpc-service-implementation.adoc#health[the generated gRPC Health services]."
msgstr ""

#: _versions/3.27/guides/grpc-kubernetes.adoc
msgid "If your application does not use any Quarkus extension that exposes an HTTP server, you can still configure the probes to directly use the gRPC Health service by adding the property `quarkus.kubernetes.readiness-probe.grpc-action-enabled=true` into your configuration:"
msgstr ""
