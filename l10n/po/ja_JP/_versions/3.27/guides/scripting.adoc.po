msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/scripting.adoc
msgid "Scripting with Quarkus"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Quarkus provides integration with https://jbang.dev[jbang] which allows you to write Java scripts/applications requiring no Maven nor Gradle to get running."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "In this guide, we will see how you can write a REST application using just a single Java file."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "https://jbang.dev/download[JBang]"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Normally we would link to a Git repository to clone but in this case there is no additional files than the following:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "In this guide, we create a straightforward application serving a `hello` endpoint with a single source file, no additional build files like `pom.xml` or `build.gradle` needed. To demonstrate dependency injection, this endpoint uses a `greeting` bean."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Creating the initial file"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "First, we need a Java file. JBang lets you create an initial version using:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "This command generates a .java file that you can directly run on Linux and macOS, i.e. `./quarkusapp.java` - on Windows you need to use `jbang quarkusapp.java`."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "This initial version will print `Hello World` when run."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Once generated, look at the `quarkusapp.java` file."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "You will find at the top a line looking like this:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "This line is what on Linux and macOS allows you to run it as a script. On Windows this line is ignored."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "The next lines"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "illustrate how you add dependencies to this script. This is a feature of JBang."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Go ahead and update this line to include the `quarkus-bom` and the `quarkus-rest` dependency like so:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Now, run `jbang quarkusapp.java` and you will see JBang resolving this dependency and building the jar with help from Quarkus' JBang integration."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "For now the application does nothing new."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "How do I edit this file and get content assist?"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "To edit the JBang script in an IDE/editor with content assist you can run `jbang edit quarkusapp.java` or `jbang edit quarkusapp.java`."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "For more information please refer to the https://www.jbang.dev/documentation/guide/latest/editing.html[the JBang documentation]."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "The Jakarta REST resources"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Now let us replace the class with one that uses Quarkus features:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "It's a very simple class with a main method that starts Quarkus with a REST endpoint, returning \"hello\" to requests on \"/hello\"."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Why is the `main` method there?"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "A `main` method is currently needed for the JBang integration to work - we might remove this requirement in the future."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Running the application"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Now when you run the application you will see Quarkus start up."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Use: `jbang quarkusapp.java`:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Once started, you can request the provided endpoint:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "After that, hit `CTRL+C` to stop the application."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Automatically add newline with `curl -w \"\\n\"`"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "We are using `curl -w \"\\n\"` in this example to avoid your terminal printing a '%' or put both result and next command prompt on the same line."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Why is `quarkus-rest` not resolved?"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid ""
"In this second run you should not see a line saying it is resolving `quarkus-rest` as JBang caches the dependency resolution between runs.\n"
"If you want to clear the caches to force resolution use `jbang cache clear`."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Using injection"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid ""
"Dependency injection in Quarkus is based on ArC which is a CDI-based dependency injection solution tailored for Quarkus' architecture.\n"
"You can learn more about it in the xref:cdi-reference.adoc[Contexts and Dependency Injection guide]."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "ArC comes as a dependency of `quarkus-rest` so you already have it handy."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Let's modify the application and add a companion bean."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid ""
"Normally you would add a separate class, but as we are aiming to have it all in one file you will add a\n"
"nested class."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Add the following *inside* the `quarkusapp` class body."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Use of nested static public classes"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "We are using a nested static public class instead of a top level class for two reasons:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "JBang currently does not support multiple source files."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "All Java frameworks relying on introspection have challenges using top level classes as they are not as visible as public classes; and in Java there can only be one top level public class in a file."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Edit the `quarksapp` class to inject the `GreetingService` and create a new endpoint using it, you should end up with something like:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Now when you run `jbang quarkusapp.java` you can check what the new end point returns:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Now that is unexpected, why is it returning `hello null` and not `hello quarkus`?"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "The reason is that Quarkus REST (formerly RESTEasy Reactive) relies on the `-parameters` compiler flag to be set to be able to map `{name}` to the `name` parameter."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "We fix that by adding the following comment instruction to the file:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Now when you run with `jbang quarkusapp.java` the end point should return what you expect:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Debugging"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid ""
"To debug the application you use `jbang --debug quarkusapp.java` and you can use your IDE to connect on port 4004; if you want to use the\n"
"more traditional Quarkus debug port you can use `jbang --debug=5005 quarkusapp.java`."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Note: JBang debugging always suspends thus you need to connect the debugger to have the application run."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Logging"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "To use logging in Quarkus scripting with JBang you do as usual, with configuring a logger, i.e."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "To get it to work you need to add a Java option to ensure the logging is initialized properly, i.e."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "With that in place running `jbang quarkusapp.java` will log and render as expected."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Configuring Application"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "To configure the application you can use the `application.properties` file as usual, but you need to _add_ it to the script:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "This will make the `application.properties` file available to the script, and process the configuration as usual."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid ""
"You can also use the `application.yaml` file.\n"
"For this, you need to _add_ it to the `application.yaml` file to the script and include the `quarkus-config-yaml` dependency:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "The path to the `application.properties` and `application.yaml` files are relative to the script file."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Running as a native application"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "If you have the `native-image` binary installed and `GRAALVM_HOME` set, or a container runtime (e.g., podman or docker) installed on Linux, you can get the native executable built and run using `jbang --native quarkusapp.java`:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "This native build will take some time on first run but any subsequent runs (without changing `quarkusapp.java`) will be close to instant thanks to JBang cache:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Using Qute"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid ""
"You can use the xref:./qute.adoc[Qute templating engine] in your JBang script by adding the `quarkus-qute` dependency.\n"
"You also need to include the `templates` directory in the script:"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "If your `templates` directory includes sub-directories, use `templates/=templates/**/*` instead."
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "Conclusion"
msgstr ""

#: _versions/3.27/guides/scripting.adoc
msgid "If you want to get started with Quarkus or write something quickly, Quarkus Scripting with jbang lets you do that. No Maven, no Gradle - just a Java file. In this guide we outlined the very basics on using Quarkus with JBang; if you want to learn more about what JBang can do, go see https://jbang.dev."
msgstr ""
