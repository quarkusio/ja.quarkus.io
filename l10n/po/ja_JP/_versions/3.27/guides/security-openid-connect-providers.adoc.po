msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Configuring Well-Known OpenID Connect Providers"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "This document explains how to configure well-known social OIDC and OAuth2 providers."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Introduction"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "If you use xref:security-oidc-code-flow-authentication.adoc[OpenID Connect Authorization Code Flow] to protect Quarkus endpoints, then you need to configure Quarkus to tell it how to connect to OpenID Connect providers, how to authenticate to such providers, which scopes to use, and so on."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Sometimes you need to use the configuration to work around the fact that some providers do not implement OpenID Connect completely or when they are in fact xref:security-oidc-code-flow-authentication.adoc#oauth2[OAuth2 providers only]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "The configuration of such providers can become complex, very technical and difficult to understand."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider` configuration property has been introduced to refer to well-known OpenID Connect and OAuth2 providers. This property can be used to refer to a provider such as `github` with only a minimum number of customizations required, typically, an account specific `client id`, `client secret` and some properties have to be set to complete the configuration."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
#, fuzzy
msgid "This property can be used in `application.properties` and in custom xref:security-openid-connect-multitenancy.adoc#tenant-config-resolver[TenantConfigResolvers] if the tenant configurations are created dynamically."
msgstr "このプロパティは、テナント構成が動的に作成される場合、 `application.properties` およびカスタム xref:security-openid-connect-multitenancy.adoc#tenant-config-resolver[TenantConfigResolver] で使用できます。"

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Well Known Providers"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Apple"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"In order to set up OIDC for Apple you need to create a developer account, and sign up for the 99$/year program, but you cannot test your application on `localhost` like most other OIDC providers:\n"
"you will need to run it over HTTPS and make it publicly accessible, so for development purposes\n"
"you may want to use a service such as https://ngrok.com."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Go to https://developer.apple.com/account/resources/identifiers/list[Create a new identifier] and press `+`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Don't touch anything, keep `App IDs` selected, and press `Continue`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Don't touch anything, keep `App` selected, and press `Continue`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Enter a description and a Bundle ID (use your application package name):"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Then scroll down to find the `Sign in with Apple` Capability, select it, and press `Continue`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Write down your App ID Prefix, then press `Register`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Back on the `Identifiers` page, press `+`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Select `Service IDs` and press `Continue`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Enter a description and Bundle ID (use your application package name), then press `Continue`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now press `Register`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Back on the service list, click on your newly created service:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Enable `Sign in with Apple` and press `Configure`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Add your domain and return URL (set to `<host>/apple`) and press `Next`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now press `Done`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now press `Continue`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "And now press `Save`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Go to the https://developer.apple.com/account/resources/authkeys/list[Keys] page on the left menu, and press `+`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Fill in a key name, enable `Sign in with Apple`, and press `Configure`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Select your Primary App ID and press `Save`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Back on the key page, press `Continue`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Write down your `Key ID`, download your key and save it to your Quarkus application in `src/main/resources/AuthKey_<KEYID>.p8`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You can now configure your `application.properties`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=apple` will request Apple to add `openid`, `email` and `name` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Discord"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Create a https://discord.com/developers/applications[Discord application]:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You now can get your client id and secret:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Facebook"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"Facebook you will not be let you test your application on `localhost` like most other OIDC providers:\n"
"you will need to run it over HTTPS and make it publicly accessible, so for development purposes\n"
"you may want to use a service such as https://ngrok.com."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "In order to set up OIDC for Facebook start by https://developers.facebook.com/apps/create/[Creating an application], select `Other` as an app type, and click `Next`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now choose your application type. For this guide choose `Consumer` and click `Next` until you reach the screen below. Now enter an application name, and contact email, and press `Create app`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "On the app page, click `Set up` on the `Facebook login` product:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "On the `Quickstart` page click on `Facebook login > Settings` on the left menu:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"First click on `Get Advanced Access` to switch `public_profile` to advanced access.\n"
"Then enter your `Redirect URIs` (set to `<host>/facebook`) and press `Save changes`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now go to `Settings > Basic` on the left-hand menu, and write down your `App ID` and `App secret`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=facebook` will request Facebook to add `email` and `public_profile` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "GitHub"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "In order to set up OIDC for GitHub you need to create a new OAuth application in your https://github.com/settings/applications/new[GitHub developer settings]:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"Make sure to fill in the appropriate details, but more importantly the Authorization Callback URL, set to `http://localhost:8080/github`\n"
"(if you intend to test this using the Quarkus dev mode)."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now click on `Register application` and you'll be shown your application page:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"You need to click on `Generate a new client secret`, confirm your credentials, and write down\n"
"your Client ID and Client secret (especially that one, because you will not be able to see it again\n"
"later from that page, but you can always recreate one, do don't worry too much):"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now add the following configuration to your `application.properties`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
#, fuzzy
msgid ""
"By default, Quarkus GitHub provider submits the client id and secret in the HTTP Authorization header.\n"
"However, GitHub may require that both client id and secret are submitted as form parameters instead.\n"
"When you get HTTP 401 error after logging in to GitHub and being redirected back to Quarkus MCP server,\n"
"replace the `quarkus.oidc.credentials.secret=<Secret>` property\n"
"with the following two properties instead:"
msgstr "デフォルトでは、Quarkus GitHubプロバイダはHTTP AuthorizationヘッダーにクライアントIDとsecretを送信します。しかし、GitHubは、クライアントIDとシークレットの両方をフォームパラメータとして送信することを要求する場合があります。GitHubにログインした後にHTTP 401エラーが発生し、Quarkus MCPサーバーにリダイレクトされる場合は、 `quarkus.oidc.credentials.secret=<Secret>` プロパティを次の2つのプロパティに置き換えてください："

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=github` will request GitHub to add a `user:email` scope to issued access tokens. For information about overriding this scope or requesting more scopes, see the  <<provider-scope>> section."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You can also send access tokens issued by GitHub to `quarkus.oidc.application-type=service` or `quarkus.oidc.application-type=hybrid` Quarkus applications."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Google"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "In order to set up OIDC for Google you need to create a new project in your https://console.cloud.google.com/projectcreate[Google Cloud Platform console]:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Pick a project name and click on `CREATE`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now make sure you select your project in the top selector, and click on the left-hand bar menu on `APIs and Services > OAuth consent screen`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Select `External` to authorise any Google user to log in to your application and press `CREATE`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now you can fill in your application name, your support email, your developer contact information and press `SAVE AND CONTINUE`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Do not add any scopes on the next page, and press `SAVE AND CONTINUE`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Do not add any test user on the next page, and press `SAVE AND CONTINUE`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Click on the top menu `CREATE CREDENTIALS` > `OAuth client ID`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"Select `Web application` as `Application type`, and add `http://localhost:8080/google` in\n"
"the `Authorised redirect URIs` list, then press `CREATE`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Copy your Client ID and Client Secret:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=google` will request Google to add `openid`, `email` and `profile` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You can also send access tokens issued by Google to `quarkus.oidc.application-type=service` or `quarkus.oidc.application-type=hybrid` Quarkus applications."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "LinkedIn"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Create a https://developer.linkedin.com/[LinkedIn application]:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Add the `Sign In with LinkedIn using OpenId Connect` product:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You now can get your client id and secret. Don't forget to also add the authorized redirect URLs for your application:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Mastodon"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"Create a https://joinmastodon.org/[Mastodon account]. You must https://joinmastodon.org/servers[pick a server], for example, `mastodon.social`.\n"
"Select a `Development` option in your account and register an application, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Select the registered application:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "and note its client id and client secret properties, use them to configure your `application.properties`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "By default, `quarkus.oidc.provider=mastodon` sets `quarkus.oidc.auth-server-url` to the `https://mastodon.social` Mastodon server address."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You can override `quarkus.oidc.auth-server-url` if you have created your account in another Mastodon server, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Microsoft"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"In order to set up OIDC for Microsoft you need to go to your https://portal.azure.com[Microsoft Azure Portal],\n"
"and search for `Microsoft Entra ID` formerly known as `Azure Active Directory` , then click on it:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Once there, on the left side under `Manage`, click on `App registrations` then click on `New registration`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"Fill in your application name, select `Accounts in any organizational directory (Any Azure AD directory - Multitenant) and personal Microsoft accounts (e.g. Skype, Xbox)` to allow anyone to log in, and add a `Web` Redirect URI as `http://localhost:8080/microsoft`,\n"
"then click on `Register`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "On that resulting page, copy the `Client Id` (under `Application (client) ID`, then click on `Add a certificate or secret`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now, under `Client secrets (0)`, click on `New client secret`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Click on `Add` in that dialog without changing anything:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "On the resulting page, copy your `Secret Value`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=microsoft` will request Microsoft to add `openid`, `email` and `profile` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You can also send access tokens issued by Microsoft to `quarkus.oidc.application-type=service` or `quarkus.oidc.application-type=hybrid` Quarkus applications but you may need to set `quarkus.oidc.verify-access-token-with-user-info` configuration property to `true` if access tokens issued by Microsoft are not in JWT format."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"Some Microsoft services may issue tokens whose signatures can only be verified if the current token's `nonce` header is reset with its SHA-256 digest value.\n"
"If your application has to deal with such tokens then please enable an Azure token customizer:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Slack"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Create a https://api.slack.com/authentication/sign-in-with-slack#setup[Slack application]:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Select application name, workspace, and remember it, you will need it later:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Please save client id and secret displayed on the next page, you will need them later:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"Configure redirect URLs.\n"
"Slack provider requires HTTPS protocol, for development purposes, you can use ngrok:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Use the `team` parameter to refer to the workspace you chose during the Slack OIDC application registration."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"Open your browser and navigate to your application `https://<your ngrok instance>.ngrok-free.app/`.\n"
"Quarkus will redirect you to Slack provider on the first request where you can grant required permissions:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Spotify"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Create a https://developer.spotify.com/documentation/general/guides/authorization/app-settings/[Spotify application]:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Don't forget to add `http://localhost:8080` as a redirect URI for testing during development purposes. You should get a client id and secret generated once a Spotify application setup has been complete, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=spotify` will request Spotify to add `user-read-private` and `user-read-email` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Strava"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Create a https://www.strava.com/settings/api[Strava application]:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "For example, set `Category` to `SocialMotivation`, and set `ApplicationCallbackDomain` to either `localhost` or the domain name provided by Ngrok, see the <<redirect_url>> for more information."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"Strava does not enforce that the redirect (callback) URI which is provided as an authorization code flow parameter is equal to the URI registered in the Strava application because it only requires configuring `ApplicationCallbackDomain`. For example, if `ApplicationCallbackDomain` is set to `www.my-strava-example.com`, Strava will accept redirect URIs such as `www.my-strava-example.com/a`, `www.my-strava-example.com/path/a`, which is not recommended by OAuth2 best security practices, see link:https://datatracker.ietf.org/doc/html/draft-ietf-oauth-security-topics#name-insufficient-redirect-uri-v[Insufficient redirect_uri validation] for more information.\n"
"Therefore you must configure a redirect path when working with the Strava provider and Quarkus will enforce that the current request path matches the configured `quarkus.oidc.authentication.redirect-path` value before completing the authorization code flow. See the <<exact_redirect_uri_match>> for more information."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Twitch"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Create a https://dev.twitch.tv/console/apps[Twitch application]:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "[[twitter]] X (formerly Twitter)"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"You can use X (formerly Twitter) for OIDC login, but at the moment, it restricts access to the user's email, which means you\n"
"will have to obtain it and verify it yourself."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "In order to set up OIDC for X, start by https://developer.twitter.com/en/portal/projects/new[Creating a project], enter a project name, and press `Next`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Enter a use case, and press `Next`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Enter a project description, and press `Next`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now enter an application name, and press `Next`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Write down your keys, because they will not be displayed again, and press `App Settings`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Navigate down to the `User authentication settings` section and press `Set up`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Check the `OAuth 2.0` check box:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"Select `Web App` as application type, then fill in your application details (use `<host>/_renarde/security/twitter-success`\n"
"for the `Callback URI`)."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"X doesn't require https usage in practice, but won't accept your `Website URL` without it, so\n"
"you can still use ngrok for it."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now press `Save`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You can now copy your `Client ID` and `Client Secret` and press `Done`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "`quarkus.oidc.provider=x` will request X to add `offline.access`, `tweet.read` and `users.read` scopes to issued access tokens. For information about overriding these scopes or requesting more scopes, see the  <<provider-scope>> section."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"X provider requires Proof Key for Code Exchange (PKCE) which is supported by the `quarkus.oidc.provider=x` declaration.\n"
"Quarkus has to encrypt the current PKCE code verifier in a state cookie while the authorization code flow with X is in progress and it will\n"
"generate a secure random secret key for encrypting it."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"You can provide your own secret key for encrypting the PKCE code verifier if you prefer with the `quarkus.oidc.authentication.state-secret` property but\n"
"note that this secret should be 32 characters long, and an error will be reported if it is less than 16 characters long."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "X is the new name of Twitter. You can continue using `quarkus.oidc.provider=twitter` for the time being but it might become deprecated in the future."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Provider scopes"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Each provider declaration will request one or more token scopes added to access tokens issued by a given provider. For example, `quarkus.oidc.provider=google` will request `Google` to add `openid`, `email` and `profile` scopes."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You can override these scopes with `quarkus.oidc.authentication.scopes` property, for example, if you work with `Google` and would not like to have an `email` scope added to access tokens:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You may also want to add one or more scopes in addition to the scopes requested by default. For example, if you would like to use an access token issued by `Google` to access `Google Calendar` service, you can do it like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "It is simpler than using `quarkus.oidc.authentication.scopes` to add a new scope, because `quarkus.oidc.authentication.scopes` overrides the scopes already set by the provider declaration, which is why you need to list all the required scopes in this case:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Support for multiple providers"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "If you would like to support authenticating users with more than one provider then a provider-specific tenant configuration resolution must be supported."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "For more information, see the Quarkus xref:security-openid-connect-multitenancy.adoc#static-tenant-resolution[Using OpenID Connect (OIDC) Multi-Tenancy] guide."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Access provider services with token propagation"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"Sometimes, only authenticating users with a social provider is not enough.\n"
"A provider-specific service also needs to be accessed for the Quarkus OIDC `web-app` application to fetch or update data from the provider service on behalf of the currently authenticated user."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"As mentioned in the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide, ID and access tokens are returned after the authorization code flow has been completed, with some providers like `GitHub` returning an access token only.\n"
"It is this access token that has to be propagated to services such as `Google Calendar`, or `Spotify Playlists` for the currently authenticated user to be able to use such services."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid ""
"You do not have to bring provider-specific libraries in order to achieve this, but instead you can use a reactive `Token Propagation` filter, which can be bound to a given REST client with a simple annotation.\n"
"For more information, see the Quarkus xref:security-openid-connect-client-reference.adoc#token-propagation-rest[Access token propagation] guide."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "For example, after you have configured the <<google>> provider, you can have events added to the user's Google Calendar by using a REST client as shown in the following example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "The `@AccessToken` annotation enables an access token propagation to the target service."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Finally,  you need to configure the Google Calendar address and request  the Google Calendar scope for an access token, as outlined in the following example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Now you are ready to have users authenticated with Google and support updating their `Google` calendars on their behalf, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You must update the application registered with the <<google>> provider to list `http://localhost:8080/calendar/event` as one of the authorized redirect URIs if you would like to test this endpoint on the local host, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You might also have to register one or more test users:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Follow the same approach if the endpoint must access other Google services."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "The pattern of authenticating with a given provider, where the endpoint uses either an ID token or UserInfo (especially if an OAuth2-only provider such as `GitHub` is used) to get some information about the currently authenticated user and using an access token to access some downstream services (provider or application specific ones) on behalf of this user can be universally applied, irrespectively of which provider is used to secure the application."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Exact redirect URI match"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Most OIDC and OAuth2 providers with the exception of <<strava>> will enforce that the authorization code flow can be completed only if the redirect URI matches precisely the redirect URI configured in a given provider's dashboard."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "From the practical point of view, your Quarkus endpoint will most likely need to have the `quarkus.oidc.authentication.redirect-path` relative path property set to an initial entry path for all the authenticated users, for example, `quarkus.oidc.authentication.redirect-path=/authenticated`, which means that newly authenticated users will land on the `/authenticated` page, irrespectively of how many secured entry points your application has and which secured resource they initially accessed."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "It is a typical flow for many OIDC `web-app` applications. Once the user lands on the initial secured page, your application can return an HTML page which uses links to guide users to other parts of the application or users can be immediately redirected to other application resources with the help of JAX-RS API."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "If necessary, you can configure Quarkus to restore the original request URI after the authentication has been completed. For example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "`strava` provider configuration is the only supported configuration which enforces the `quarkus.oidc.authentication.redirect-path` property with the `/strava` path which you can override with another path such as `/fitness`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "If the users access the `/run` endpoint before the authentication, then, once they have authenticated and been redirected to the configured redirect path such as `/strava`, they will land on the original request `/run` path."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "You do not have to set `quarkus.oidc.authentication.redirect-path` immediately because Quarkus assumes the current request URL is an authorization code flow redirect URL if no `quarkus.oidc.authentication.redirect-path` is configured. For example, to test that a <<google>> authentication is working, you can have a Quarkus endpoint listening on `/google` and update the Google dashboard that `http://localhost:8080/google` redirect URI is supported. Setting `quarkus.oidc.authentication.redirect-path` property will be required once your secured application URL space grows."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "HTTPS Redirect URI"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Some providers will only accept HTTPS-based redirect URIs. Tools such as https://ngrok.com/[ngrok] https://linuxhint.com/set-up-use-ngrok/[can be set up] to help testing such providers with Quarkus endpoints running on localhost in dev mode."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Rate Limiting"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Depending on your developer API subscription level, some providers may enforce a rather strict request rate limiting policy."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "It may not be a problem when Quarkus fetches public verification keys from OIDC-compliant providers like the <<google>> provider and keeps verifying the user session with these keys locally. However, for pure OAuth2 providers where only an access token is available and which has to be verified indirectly by requesting UserInfo from the provider endpoint on every request done by an already authenticated user, it can become a problem."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Therefore, UserInfo is embedded in an internally generated ID token and is encrypted in the session cookie. You can disable it with `quarkus.oidc.cache-user-info-in-idtoken=false`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "Alternatively, use a default or custom UserInfo cache provider, please see the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-providers.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
