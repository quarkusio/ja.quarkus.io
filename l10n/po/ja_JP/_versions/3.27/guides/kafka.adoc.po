msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/kafka.adoc
msgid "Apache Kafka Reference Guide"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "This reference guide demonstrates how your Quarkus application can utilize Quarkus Messaging to interact with Apache Kafka."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Introduction"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"https://kafka.apache.org[Apache Kafka] is a popular open-source distributed event streaming platform.\n"
"It is used commonly for high-performance data pipelines, streaming analytics, data integration, and mission-critical applications.\n"
"Similar to a message queue, or an enterprise messaging platform, it lets you:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*publish* (write) and *subscribe* to (read) streams of events, called _records_."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*store* streams of records durably and reliably inside _topics_."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*process* streams of records as they occur or retrospectively."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "And all this functionality is provided in a distributed, highly scalable, elastic, fault-tolerant, and secure manner."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Quarkus Extension for Apache Kafka"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Quarkus provides support for Apache Kafka through https://smallrye.io/smallrye-reactive-messaging/[SmallRye Reactive Messaging] framework.\n"
"Based on Eclipse MicroProfile Reactive Messaging specification 2.0, it proposes a flexible programming model bridging CDI and event-driven."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"This guide provides an in-depth look on Apache Kafka and SmallRye Reactive Messaging framework.\n"
"For a quick start take a look at xref:kafka-getting-started.adoc[Getting Started to Quarkus Messaging with Apache Kafka]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You can add the `messaging-kafka` extension to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The extension includes `kafka-clients` version 3.2.1 as a transitive dependency and is compatible with Kafka brokers version 2.x."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Configuring SmallRye Kafka Connector"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Because SmallRye Reactive Messaging framework supports different messaging backends like Apache Kafka, AMQP, Apache Camel, JMS, MQTT, etc., it employs a generic vocabulary:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Applications send and receive *messages*. A message wraps a _payload_ and can be extended with some _metadata_. With the Kafka connector, a _message_ corresponds to a Kafka _record_."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Messages transit on *channels*. Application components connect to channels to publish and consume messages. The Kafka connector maps _channels_ to Kafka _topics_."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Channels are connected to message backends using *connectors*. Connectors are configured to map incoming messages to a specific channel (consumed by the application) and collect outgoing messages sent to a specific channel. Each connector is dedicated to a specific messaging technology. For example, the connector dealing with Kafka is named `smallrye-kafka`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "A minimal configuration for the Kafka connector with an incoming channel looks like the following:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Configure the broker location for the production profile. You can configure it globally or per channel using `mp.messaging.incoming.$channel.bootstrap.servers` property.\n"
"In dev mode and when running tests, <<kafka-dev-services>> automatically starts a Kafka broker.\n"
"When not provided this property defaults to `localhost:9092`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Configure the connector to manage the prices channel. By default, the topic name is same as the channel name. You can configure the topic attribute to override it."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The `%prod` prefix indicates that the property is only used when the application runs in prod mode (so not in dev or test). Refer to the xref:config-reference.adoc#profiles[Profile documentation] for further details."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Connector auto-attachment"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If you have a single connector on your classpath, you can omit the `connector` attribute configuration.\n"
"Quarkus automatically associates _orphan_ channels to the (unique) connector found on the classpath.\n"
"_Orphans_ channels are outgoing channels without a downstream consumer or incoming channels without an upstream producer."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "This auto-attachment can be disabled using:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Receiving messages from Kafka"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Continuing from the previous minimal configuration, your Quarkus application can receive message payload directly:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "There are several other ways your application can consume incoming messages:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Message"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The `Message` type lets the consuming method access the incoming message metadata and handle the acknowledgment manually.\n"
"We'll explore different acknowledgment strategies in <<commit-strategies>>."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If you want to access the Kafka record objects directly, use:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "ConsumerRecord"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"`ConsumerRecord` is provided by the underlying Kafka client and can be injected directly to the consumer method.\n"
"Another simpler approach consists in using `Record`:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Record"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`Record` is a simple wrapper around key and payload of the incoming Kafka record."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "@Channel"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Alternatively, your application can inject a `Multi` in your bean and subscribe to its events as the following example:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"This is a good example of how to integrate a Kafka consumer with another downstream,\n"
"in this example exposing it as a Server-Sent Events endpoint."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"When consuming messages with `@Channel`, the application code is responsible for the subscription.\n"
"In the example above, the Quarkus REST (formerly RESTEasy Reactive) endpoint handles that for you."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Following types can be injected as channels:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"As with the previous `Message` example, if your injected channel receives payloads (`Multi<T>`), it acknowledges the message automatically, and support multiple subscribers.\n"
"If you injected channel receives Message (`Multi<Message<T>>`), you will be responsible for the acknowledgment and broadcasting.\n"
"We will explore sending broadcast messages in <<broadcasting-messages-on-multiple-consumers>>."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Injecting `@Channel(\"prices\")` or having `@Incoming(\"prices\")` does not automatically configure the application to consume messages from Kafka.\n"
"You need to configure an inbound connector with `mp.messaging.incoming.prices\\...` or have an `@Outgoing(\"prices\")` method somewhere in your application (in which case, `prices` will be an in-memory channel)."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Blocking processing"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Reactive Messaging invokes your method on an I/O thread.\n"
"See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic.\n"
"But, you often need to combine Reactive Messaging with blocking processing such as database interactions.\n"
"For this, you need to use the `@Blocking` annotation indicating that the processing is _blocking_ and should not be run on the caller thread."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For example, The following code illustrates how you can store incoming payloads to a database using Hibernate with Panache:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The complete example is available in the `kafka-panache-quickstart` link:{quickstarts-tree-url}/kafka-panache-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "There are 2 `@Blocking` annotations:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`io.smallrye.reactive.messaging.annotations.Blocking`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`io.smallrye.common.annotation.Blocking`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"They have the same effect.\n"
"Thus, you can use both.\n"
"The first one provides more fine-grained tuning such as the worker pool to use and whether it preserves the order.\n"
"The second one, used also with other reactive features of Quarkus, uses the default worker pool and preserves the order."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Detailed information on the usage of `@Blocking` annotation can be found in https://smallrye.io/smallrye-reactive-messaging/latest/concepts/blocking/[SmallRye Reactive Messaging – Handling blocking execution]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "@RunOnVirtualThread"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For running the blocking processing on Java _virtual threads_, see the xref:messaging-virtual-threads.adoc[Quarkus Virtual Thread support with Reactive Messaging documentation]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "@Transactional"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If your method is annotated with `@Transactional`, it will be considered _blocking_ automatically, even if the method is not annotated with `@Blocking`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Acknowledgment Strategies"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"All messages received by a consumer must be acknowledged.\n"
"In the absence of acknowledgment, the processing is considered in error.\n"
"If the consumer method receives a `Record` or a payload, the message will be acked on method return, also known as `Strategy.POST_PROCESSING`.\n"
"If the consumer method returns another reactive stream or `CompletionStage`, the message will be acked when the downstream message is acked.\n"
"You can override the default behavior to ack the message on arrival (`Strategy.PRE_PROCESSING`),\n"
"or do not ack the message at all (`Strategy.NONE`) on the consumer method as in the following example:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If the consumer method receives a `Message`, the acknowledgment strategy is `Strategy.MANUAL`\n"
"and the consumer method is in charge of ack/nack the message."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "As mentioned above, the method can also override the acknowledgment strategy to `PRE_PROCESSING` or `NONE`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Commit Strategies"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"When a message produced from a Kafka record is acknowledged, the connector invokes a commit strategy.\n"
"These strategies decide when the consumer offset for a specific topic/partition is committed.\n"
"Committing an offset indicates that all previous records have been processed.\n"
"It is also the position where the application would restart the processing after a crash recovery or a restart."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Committing every offset has performance penalties as Kafka offset management can be slow.\n"
"However, not committing the offset often enough may lead to message duplication if the application crashes between two commits."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The Kafka connector supports three strategies:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"`throttled` keeps track of received messages and commits an offset of the latest acked message in sequence (meaning, all previous messages were also acked).\n"
"This strategy guarantees at-least-once delivery even if the channel performs asynchronous processing.\n"
"The connector tracks the received records and periodically (period specified by `auto.commit.interval.ms`, default: 5000 ms) commits the highest consecutive offset.\n"
"The connector will be marked as unhealthy if a message associated with a record is not acknowledged in `throttled.unprocessed-record-max-age.ms` (default: 60000 ms).\n"
"Indeed, this strategy cannot commit the offset as soon as a single record processing fails.\n"
"If `throttled.unprocessed-record-max-age.ms` is set to less than or equal to `0`, it does not perform any health check verification.\n"
"Such a setting might lead to running out of memory if there are \"poison pill\" messages (that are never acked).\n"
"This strategy is the default if `enable.auto.commit` is not explicitly set to true."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"`checkpoint` allows persisting consumer offsets on a **state store**, instead of committing them back to the Kafka broker.\n"
"Using the `CheckpointMetadata` API, consumer code can persist a _processing state_ with the record offset to mark the progress of a consumer.\n"
"When the processing continues from a previously persisted offset, it seeks the Kafka consumer to that offset and also restores the persisted state, continuing the stateful processing from where it left off.\n"
"The checkpoint strategy holds locally the processing state associated with the latest offset, and persists it periodically to the state store (period specified by `auto.commit.interval.ms` (default: 5000)).\n"
"The connector will be marked as unhealthy if no processing state is persisted to the state store in `checkpoint.unsynced-state-max-age.ms` (default: 10000).\n"
"If `checkpoint.unsynced-state-max-age.ms` is set to less than or equal to 0, it does not perform any health check verification.\n"
"For more information, see <<stateful-processing-checkpointing>>"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"`latest` commits the record offset received by the Kafka consumer as soon as the associated message is acknowledged (if the offset is higher than the previously committed offset).\n"
"This strategy provides at-least-once delivery if the channel processes the message without performing any asynchronous processing. Specifically, the offset of the most recent acknowledged\n"
"message will always be committed, even if older messages have not finished being processed. In case of an incident such as a crash, processing would restart after the last commit, leading\n"
"to older messages never being successfully and fully processed, which would appear as message loss.\n"
"This strategy should not be used in high load environment, as offset commit is expensive. However, it reduces the risk of duplicates."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"`ignore` performs no commit. This strategy is the default strategy when the consumer is explicitly configured with `enable.auto.commit` to true.\n"
"It delegates the offset commit to the underlying Kafka client.\n"
"When `enable.auto.commit` is `true` this strategy **DOES NOT** guarantee at-least-once delivery.\n"
"SmallRye Reactive Messaging processes records asynchronously, so offsets may be committed for records that have been polled but not yet processed.\n"
"In case of a failure, only records that were not committed yet will be re-processed."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The Kafka connector disables the Kafka auto commit when it is not explicitly enabled. This behavior differs from the traditional Kafka consumer.\n"
"If high throughput is important for you, and you are not limited by the downstream, we recommend to either:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "use the `throttled` policy,"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "or set `enable.auto.commit` to true and annotate the consuming method with `@Acknowledgment(Acknowledgment.Strategy.NONE)`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"SmallRye Reactive Messaging enables implementing custom commit strategies.\n"
"See https://smallrye.io/smallrye-reactive-messaging/latest/kafka/receiving-kafka-records/#acknowledgement[SmallRye Reactive Messaging documentation] for more information."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Error Handling Strategies"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If a message produced from a Kafka record is nacked, a failure strategy is applied. The Kafka connector supports three strategies:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`fail`: fail the application, no more records will be processed (default strategy). The offset of the record that has not been processed correctly is not committed."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`ignore`: the failure is logged, but the processing continue. The offset of the record that has not been processed correctly is committed."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`dead-letter-queue`: the offset of the record that has not been processed correctly is committed, but the record is written to a Kafka dead letter topic."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The strategy is selected using the `failure-strategy` attribute."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "In the case of `dead-letter-queue`, you can configure the following attributes:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`dead-letter-queue.topic`: the topic to use to write the records not processed correctly, default is `dead-letter-topic-$channel`, with `$channel` being the name of the channel."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`dead-letter-queue.key.serializer`: the serializer used to write the record key on the dead letter queue. By default, it deduces the serializer from the key deserializer."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`dead-letter-queue.value.serializer`: the serializer used to write the record value on the dead letter queue. By default, it deduces the serializer from the value deserializer."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The record written on the dead letter queue contains a set of additional headers about the original record:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*dead-letter-reason*: the reason of the failure"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*dead-letter-cause*: the cause of the failure if any"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*dead-letter-topic*: the original topic of the record"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*dead-letter-partition*: the original partition of the record (integer mapped to String)"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*dead-letter-offset*: the original offset of the record (long mapped to String)"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"SmallRye Reactive Messaging enables implementing custom failure strategies.\n"
"See https://smallrye.io/smallrye-reactive-messaging/latest/kafka/receiving-kafka-records/#acknowledgement[SmallRye Reactive Messaging documentation] for more information."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Retrying processing"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You can combine Reactive Messaging with https://github.com/smallrye/smallrye-fault-tolerance[SmallRye Fault Tolerance], and retry processing if it failed:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You can configure the delay, the number of retries, the jitter, etc."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If your method returns a `Uni` or `CompletionStage`, you need to add the `@NonBlocking` annotation:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The `@NonBlocking` annotation is only required with SmallRye Fault Tolerance 5.1.0 and earlier.\n"
"Starting with SmallRye Fault Tolerance 5.2.0 (available since Quarkus 2.1.0.Final), it is not necessary.\n"
"See https://smallrye.io/docs/smallrye-fault-tolerance/5.2.0/usage/extra.html#_non_compatible_mode[SmallRye Fault Tolerance documentation] for more information."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The incoming messages are acknowledged only once the processing completes successfully.\n"
"So, it commits the offset after the successful processing.\n"
"If the processing still fails, even after all retries, the message is _nacked_ and the failure strategy is applied."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Handling Deserialization Failures"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"When a deserialization failure occurs, you can intercept it and provide a failure strategy.\n"
"To achieve this, you need to create a bean implementing `DeserializationFailureHandler<T>` interface:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To use this failure handler, the bean must be exposed with the `@Identifier` qualifier and the connector configuration must specify the attribute `mp.messaging.incoming.$channel.[key|value]-deserialization-failure-handler` (for key or value deserializers)."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The handler is called with details of the deserialization, including the action represented as `Uni<T>`.\n"
"On the deserialization `Uni` failure strategies like retry, providing a fallback value or applying timeout can be implemented."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If you don’t configure a deserialization failure handler and a deserialization failure happens, the application is marked unhealthy.\n"
"You can also ignore the failure, which will log the exception and produce a `null` value.\n"
"To enable this behavior, set the `mp.messaging.incoming.$channel.fail-on-deserialization-failure` attribute to `false`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If the `fail-on-deserialization-failure` attribute is set to `false` and the `failure-strategy` attribute is `dead-letter-queue` the failed record will be sent to the corresponding *dead letter queue* topic."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Consumer Groups"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"In Kafka, a consumer group is a set of consumers which cooperate to consume data from a topic.\n"
"A topic is divided into a set of partitions.\n"
"The partitions of a topic are assigned among the consumers in the group, effectively allowing to scale consumption throughput.\n"
"Note that each partition is assigned to a single consumer from a group.\n"
"However, a consumer can be assigned multiple partitions if the number of partitions is greater than the number of consumer in the group."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Let's explore briefly different producer/consumer patterns and how to implement them using Quarkus:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*Single consumer thread inside a consumer group*"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"This is the default behavior of an application subscribing to a Kafka topic: Each Kafka connector will create a single consumer thread and place it inside a single consumer group.\n"
"Consumer group id defaults to the application name as set by the `quarkus.application.name` configuration property.\n"
"It can also be set using the `kafka.group.id` property."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*Multiple consumer threads inside a consumer group*"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"For a given application instance, the number of consumers inside the consumer group can be configured using `mp.messaging.incoming.$channel.concurrency` property.\n"
"The partitions of the subscribed topic will be divided among the consumer threads.\n"
"Note that if the `concurrency` value exceed the number of partitions of the topic, some consumer threads won't be assigned any partitions."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Deprecation"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The https://smallrye.io/smallrye-reactive-messaging/latest/concepts/incoming-concurrency/[concurrency attribute]\n"
"provides a connector agnostic way for non-blocking concurrent channels and replaces the Kafka connector specific `partitions` attribute.\n"
"The `partitions` attribute is therefore deprecated and will be removed in future releases."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*Multiple consumer applications inside a consumer group*"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Similar to the previous example, multiple instances of an application can subscribe to a single consumer group, configured via `mp.messaging.incoming.$channel.group.id` property, or left default to the application name.\n"
"This in turn will divide partitions of the topic among application instances."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "*Pub/Sub: Multiple consumer groups subscribed to a topic*"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Lastly different applications can subscribe independently to same topics using different *consumer group ids*.\n"
"For example, messages published to a topic called _orders_ can be consumed independently on two consumer applications, one with `mp.messaging.incoming.orders.group.id=invoicing` and second with `mp.messaging.incoming.orders.group.id=shipping`.\n"
"Different consumer groups can thus scale independently according to the message consumption requirements."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"A common business requirement is to consume and process Kafka records in order.\n"
"The Kafka broker preserves order of records inside a partition and not inside a topic.\n"
"Therefore, it is important to think about how records are partitioned inside a topic.\n"
"The default partitioner uses record key hash to compute the partition for a record, or when the key is not defined, chooses a partition randomly per batch or records."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"During normal operation, a Kafka consumer preserves the order of records inside each partition assigned to it.\n"
"SmallRye Reactive Messaging keeps this order for processing, unless `@Blocking(ordered = false)` is used (see <<blocking-processing>>)."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Note that due to consumer rebalances, Kafka consumers only guarantee at-least-once processing of single records, meaning that uncommitted records _can_ be processed again by consumers."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Consumer Rebalance Listener"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Inside a consumer group, as new group members arrive and old members leave, the partitions are re-assigned so that each member receives a proportional share of the partitions.\n"
"This is known as rebalancing the group.\n"
"To handle offset commit and assigned partitions yourself, you can provide a consumer rebalance listener.\n"
"To achieve this, implement the `io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener` interface and expose it as a CDI bean with the `@Idenfier` qualifier.\n"
"A common use case is to store offset in a separate data store to implement exactly-once semantic, or starting the processing at a specific offset."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The listener is invoked every time the consumer topic/partition assignment changes.\n"
"For example, when the application starts, it invokes the `partitionsAssigned` callback with the initial set of topics/partitions associated with the consumer.\n"
"If, later, this set changes, it calls the `partitionsRevoked` and `partitionsAssigned` callbacks again, so you can implement custom logic."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Note that the rebalance listener methods are called from the Kafka polling thread and **will** block the caller thread until completion.\n"
"That’s because the rebalance protocol has synchronization barriers, and using asynchronous code in a rebalance listener may be executed after the synchronization barrier."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "When topics/partitions are assigned or revoked from a consumer, it pauses the message delivery and resumes once the rebalance completes."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If the rebalance listener handles offset commit on behalf of the user (using the `NONE` commit strategy),\n"
"the rebalance listener must commit the offset synchronously in the partitionsRevoked callback.\n"
"We also recommend applying the same logic when the application stops."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Unlike the `ConsumerRebalanceListener` from Apache Kafka, the `io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener` methods pass the Kafka Consumer and the set of topics/partitions."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"In the following example we set up a consumer that always starts on messages from at most 10 minutes ago (or offset 0).\n"
"First we need to provide a bean that implements `io.smallrye.reactive.messaging.kafka.KafkaConsumerRebalanceListener` and is annotated with `io.smallrye.common.annotation.Identifier`.\n"
"We then must configure our inbound connector to use this bean."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"To configure the inbound connector to use the provided listener, we either set the consumer rebalance listener’s identifier:\n"
"`mp.messaging.incoming.rebalanced-example.consumer-rebalance-listener.name=rebalanced-example.rebalancer`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Or have the listener’s name be the same as the group id:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`mp.messaging.incoming.rebalanced-example.group.id=rebalanced-example.rebalancer`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Setting the consumer rebalance listener’s name takes precedence over using the group id."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Using unique consumer groups"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If you want to process all the records from a topic (from its beginning), you need:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "to set `auto.offset.reset = earliest`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "assign your consumer to a consumer group not used by any other application."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Quarkus generates a UUID that changes between two executions (including in dev mode).\n"
"So, you are sure no other consumer uses it, and you receive a new unique group id every time your application starts."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You can use that generated UUID as the consumer group as follows:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If the `group.id` attribute is not set, it defaults the `quarkus.application.name` configuration property."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Manual topic-partition assignment"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The `assign-seek` channel attribute allows manually assigning topic-partitions to a Kafka incoming channel,\n"
"and optionally seek to a specified offset in the partition to start consuming records.\n"
"If `assign-seek` is used, the consumer will not be dynamically subscribed to topics,\n"
"but instead will statically assign the described partitions.\n"
"In manual topic-partition rebalancing doesn't happen and therefore rebalance listeners are never called."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The attribute takes a list of triplets separated by commas: `<topic>:<partition>:<offset>`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For example, the configuration"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "assigns the consumer to:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Partition 0 of topic 'topic1', setting the initial position at offset 10."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Partition 1 of topic 'topic2', setting the initial position at offset 20."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The topic, partition, and offset in each triplet can have the following variations:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If the topic is omitted, the configured topic will be used."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If the offset is omitted, partitions are assigned to the consumer but won't be sought to offset."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If offset is 0, it seeks to the beginning of the topic-partition."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If offset is -1, it seeks to the end of the topic-partition."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Receiving Kafka Records in Batches"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"By default, incoming methods receive each Kafka record individually.\n"
"Under the hood, Kafka consumer clients poll the broker constantly and receive records in batches, presented inside the `ConsumerRecords` container."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "In *batch* mode, your application can receive all the records returned by the consumer *poll* in one go."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To achieve this you need to specify a compatible container type to receive all the data:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The incoming method can also receive `Message<List<Payload>>`, `Message<ConsumerRecords<Key, Payload>>`, and `ConsumerRecords<Key, Payload>` types.\n"
"They give access to record details such as offset or timestamp:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Note that the successful processing of the incoming record batch will commit the latest offsets for each partition received inside the batch.\n"
"The configured commit strategy will be applied for these records only."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Conversely, if the processing throws an exception, all messages are _nacked_, applying the failure strategy for all the records inside the batch."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Quarkus autodetects batch types for incoming channels and sets batch configuration automatically.\n"
"You can configure batch mode explicitly with `mp.messaging.incoming.$channel.batch` property."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Stateful processing with Checkpointing"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The `checkpoint` commit strategy is an experimental feature and can change in the future."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"SmallRye Reactive Messaging `checkpoint` commit strategy allows consumer applications to process messages in a stateful manner, while also respecting Kafka consumer scalability.\n"
"An incoming channel with `checkpoint` commit strategy persists consumer offsets on an external\n"
"<<state-stores,state store>>, such as a relational database or a key-value store.\n"
"As a result of processing consumed records, the consumer application can accumulate an internal state for each topic-partition assigned to the Kafka consumer.\n"
"This local state will be periodically persisted to the state store and will be associated with the offset of the record that produced it."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"This strategy does not commit any offsets to the Kafka broker, so when new partitions get assigned to the consumer,\n"
"i.e. consumer restarts or consumer group instances scale,\n"
"the consumer resumes the processing from the latest _checkpointed_ offset with its saved state."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The `@Incoming` channel consumer code can manipulate the processing state through the `CheckpointMetadata` API.\n"
"For example, a consumer calculating the moving average of prices received on a Kafka topic would look the following:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The `transform` method applies the transformation function to the current state, producing a changed state and registering it locally for checkpointing.\n"
"By default, the local state is persisted to the state store periodically, period specified by `auto.commit.interval.ms`, (default: 5000).\n"
"If `persistOnAck` flag is given, the latest state is persisted to the state store eagerly on message acknowledgment.\n"
"The `setNext` method works similarly directly setting the latest state."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The checkpoint commit strategy tracks when a processing state is last persisted for each topic-partition.\n"
"If an outstanding state change can not be persisted for `checkpoint.unsynced-state-max-age.ms` (default: 10000), the channel is marked unhealthy."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "State stores"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"State store implementations determine where and how the processing states are persisted.\n"
"This is configured by the `mp.messaging.incoming.[channel-name].checkpoint.state-store` property.\n"
"The serialization of state objects depends on the state store implementation.\n"
"In order to instruct state stores for serialization can require configuring the class name of state objects using `mp.messaging.incoming.[channel-name].checkpoint.state-type` property."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Quarkus provides following state store implementations:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"`quarkus-redis`: Uses the xref:redis-reference.adoc[`quarkus-redis-client`] extension to persist processing states.\n"
"Jackson is used to serialize processing state in Json. For complex objects it is required to configure the `checkpoint.state-type` property with the class name of the object.\n"
"By default, the state store uses the default redis client, but if a xref:redis-reference.adoc#default-and-named-clients[named client] is to be used, the client name can be specified using the `mp.messaging.incoming.[channel-name].checkpoint.quarkus-redis.client-name` property.\n"
"Processing states will be stored in Redis using the key naming scheme `[consumer-group-id]:[topic]:[partition]`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For example the configuration of the previous code would be the following:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"`quarkus-hibernate-reactive`: Uses the xref:hibernate-reactive.adoc[`quarkus-hibernate-reactive`] extension to persist processing states.\n"
"Processing state objects are required to be a Jakarta Persistence entity and extend the `CheckpointEntity` class,\n"
"which handles object identifiers composed of the consumer group id, topic and partition.\n"
"Therefore, the class name of the entity needs to be configured using the `checkpoint.state-type` property."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "With `AveragePriceEntity` being a Jakarta Persistence entity extending `CheckpointEntity`:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"`quarkus-hibernate-orm`: Uses the xref:hibernate-orm.adoc[`quarkus-hibernate-orm`] extension to persist processing states.\n"
"It is similar to the previous state store, but it uses Hibernate ORM instead of Hibernate Reactive."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "When configured, it can use a named `persistence-unit` for the checkpointing state store:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"For instructions on how to implement custom state stores,\n"
"see https://smallrye.io/smallrye-reactive-messaging/3.22.0/kafka/receiving-kafka-records/#implementing-state-stores[Implementing State Stores]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Sending messages to Kafka"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Configuration for the Kafka connector outgoing channels is similar to that of incoming:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Configure the broker location for the production profile. You can configure it globally or per channel using `mp.messaging.outgoing.$channel.bootstrap.servers` property.\n"
"In dev mode and when running tests, <<kafka-dev-services>> automatically starts a Kafka broker.\n"
"When not provided, this property defaults to `localhost:9092`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Configure the connector to manage the `prices-out` channel."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "By default, the topic name is same as the channel name. You can configure the topic attribute to override it."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Inside application configuration, channel names are unique.\n"
"Therefore, if you'd like to configure an incoming and outgoing channel on the same topic, you will need to name channels differently (like in the examples of this guide, `mp.messaging.incoming.prices` and `mp.messaging.outgoing.prices-out`)."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Then, your application can generate messages and publish them to the `prices-out` channel.\n"
"It can use `double` payloads as in the following snippet:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You should not call methods annotated with `@Incoming` and/or `@Outgoing` directly from your code. They are invoked by the framework. Having user code invoking them would not have the expected outcome."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Note that the `generate` method returns a `Multi<Double>`, which implements the Reactive Streams `Publisher` interface.\n"
"This publisher will be used by the framework to generate messages and send them to the configured Kafka topic."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Instead of returning a payload, you can return a `io.smallrye.reactive.messaging.kafka.Record` to send key/value pairs:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Payload can be wrapped inside `org.eclipse.microprofile.reactive.messaging.Message` to have more control on the written records:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"`OutgoingKafkaRecordMetadata` allows to set metadata attributes of the Kafka record, such as `key`, `topic`, `partition` or `timestamp`.\n"
"One use case is to dynamically select the destination topic of a message.\n"
"In this case, instead of configuring the topic inside your application configuration file, you need to use the outgoing metadata to set the name of the topic."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Other than method signatures returning a Reactive Stream `Publisher` (`Multi` being an implementation of `Publisher`), outgoing method can also return single message.\n"
"In this case the producer will use this method as generator to create an infinite stream."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Sending messages with Emitter"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Sometimes, you need to have an imperative way of sending messages."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"For example, if you need to send a message to a stream when receiving a POST request inside a REST endpoint.\n"
"In this case, you cannot use `@Outgoing` because your method has parameters."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For this, you can use an `Emitter`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Sending a payload returns a `CompletionStage`, completed when the message is acked. If the message transmission fails, the `CompletionStage` is completed exceptionally with the reason of the nack."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The `Emitter` configuration is done the same way as the other stream configuration used by `@Incoming` and `@Outgoing`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Using the `Emitter` you are sending messages from your imperative code to reactive messaging.\n"
"These messages are stored in a queue until they are sent.\n"
"If the Kafka producer client can't keep up with messages trying to be sent over to Kafka, this queue can become a memory hog and you may even run out of memory.\n"
"You can use `@OnOverflow` to configure back-pressure strategy.\n"
"It lets you configure the size of the queue (default is 256) and the strategy to apply when the buffer size is reached. Available strategies are `DROP`, `LATEST`, `FAIL`, `BUFFER`, `UNBOUNDED_BUFFER` and `NONE`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "With the `Emitter` API, you can also encapsulate the outgoing payload inside `Message<T>`. As with the previous examples, `Message` lets you handle the ack/nack cases differently."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If you prefer using Reactive Stream APIs, you can use `MutinyEmitter` that will return `Uni<Void>` from the `send` method.\n"
"You can therefore use Mutiny APIs for handling downstream messages and errors."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"It is also possible to block on sending the event to the emitter with the `sendAndAwait` method.\n"
"It will only return from the method when the event is acked or nacked by the receiver."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The `io.smallrye.reactive.messaging.annotations.Emitter`, `io.smallrye.reactive.messaging.annotations.Channel` and `io.smallrye.reactive.messaging.annotations.OnOverflow` classes are now deprecated and replaced by:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`org.eclipse.microprofile.reactive.messaging.Emitter`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`org.eclipse.microprofile.reactive.messaging.Channel`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`org.eclipse.microprofile.reactive.messaging.OnOverflow`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The new `Emitter.send` method returns a `CompletionStage` completed when the produced message is acknowledged."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`MutinyEmitter#send(Message msg)` method is deprecated in favor of following methods receiving `Message` for emitting:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`<M extends Message<? extends T>> Uni<Void> sendMessage(M msg)`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`<M extends Message<? extends T>> void sendMessageAndAwait(M msg)`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`<M extends Message<? extends T>> Cancellable sendMessageAndForget(M msg)`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "More information on how to use `Emitter` can be found in https://smallrye.io/smallrye-reactive-messaging/latest/concepts/emitter/[SmallRye Reactive Messaging – Emitters and Channels]"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Write Acknowledgement"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"When Kafka broker receives a record, its acknowledgement can take time depending on the configuration.\n"
"Also, it stores in-memory the records that cannot be written."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"By default, the connector does wait for Kafka to acknowledge the record to continue the processing (acknowledging the received Message).\n"
"You can disable this by setting the `waitForWriteCompletion` attribute to `false`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Note that the `acks` attribute has a huge impact on the record acknowledgement."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If a record cannot be written, the message is nacked."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Backpressure"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The Kafka outbound connector handles back-pressure, monitoring the number of in-flight messages waiting to be written to the Kafka broker.\n"
"The number of in-flight messages is configured using the `max-inflight-messages` attribute and defaults to 1024."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The connector only sends that amount of messages concurrently.\n"
"No other messages will be sent until at least one in-flight message gets acknowledged by the broker.\n"
"Then, the connector writes a new message to Kafka when one of the broker’s in-flight messages get acknowledged.\n"
"Be sure to configure Kafka’s `batch.size` and `linger.ms` accordingly."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"You can also remove the limit of in-flight messages by setting `max-inflight-messages` to `0`.\n"
"However, note that the Kafka producer may block if the number of requests reaches `max.in.flight.requests.per.connection`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Retrying message dispatch"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"When the Kafka producer receives an error from the server, if it is a transient, recoverable error, the client will retry sending the batch of messages.\n"
"This behavior is controlled by `retries` and `retry.backoff.ms` parameters.\n"
"In addition to this, SmallRye Reactive Messaging will retry individual messages on recoverable errors, depending on the `retries` and `delivery.timeout.ms` parameters."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Note that while having retries in a reliable system is a best practice, the `max.in.flight.requests.per.connection` parameter defaults to `5`, meaning that the order of the messages is not guaranteed.\n"
"If the message order is a must for your use case, setting `max.in.flight.requests.per.connection` to `1` will make sure a single batch of messages is sent at a time, in the expense of limiting the throughput of the producer."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For applying retry mechanism on processing errors, see the section on <<retrying-processing>>."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Handling Serialization Failures"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"For Kafka producer client serialization failures are not recoverable, thus the message dispatch is not retried. In these cases you may need to apply a failure strategy for the serializer.\n"
"To achieve this, you need to create a bean implementing `SerializationFailureHandler<T>` interface:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To use this failure handler, the bean must be exposed with the `@Identifier` qualifier and the connector configuration must specify the attribute `mp.messaging.outgoing.$channel.[key|value]-serialization-failure-handler` (for key or value serializers)."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The handler is called with details of the serialization, including the action represented as `Uni<byte[]>`.\n"
"Note that the method must await on the result and return the serialized byte array."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "In-memory channels"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"In some use cases, it is convenient to use the messaging patterns to transfer messages inside the same application.\n"
"When you don't connect a channel to a messaging backend like Kafka, everything happens in-memory, and the streams are created by chaining methods together.\n"
"Each chain is still a reactive stream and enforces the back-pressure protocol."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The framework verifies that the producer/consumer chain is complete,\n"
"meaning that if the application writes messages into an in-memory channel (using a method with only `@Outgoing`, or an `Emitter`),\n"
"it must also consume the messages from within the application (using a method with only `@Incoming` or using an unmanaged stream)."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Broadcasting messages on multiple consumers"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"By default, a channel can be linked to a single consumer, using `@Incoming` method or `@Channel` reactive stream.\n"
"At application startup, channels are verified to form a chain of consumers and producers with single consumer and producer.\n"
"You can override this behavior by setting `mp.messaging.$channel.broadcast=true` on a channel."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "In case of in-memory channels, `@Broadcast` annotation can be used on the `@Outgoing` method. For example,"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Reciprocally, multiple producers on the same channel can be merged by setting `mp.messaging.incoming.$channel.merge=true`.\n"
"On the `@Incoming` methods, you can control how multiple channels are merged using the `@Merge` annotation."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Repeating the `@Outgoing` annotation on outbound or processing methods allows another way of dispatching messages to multiple outgoing channels:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"In the previous example generated price will be broadcast to both outbound channels.\n"
"The following example selectively sends messages to multiple outgoing channels using the `Targeted` container object,\n"
"containing key as channel name and value as message payload."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Note that <<serialization-autodetection,the auto-detection for Kafka serializers>> doesn't work for signatures using the `Targeted`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For more details on using multiple outgoings, please refer to the http://smallrye.io/smallrye-reactive-messaging/4.10.0/concepts/outgoings/[SmallRye Reactive Messaging documentation]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Kafka Transactions"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Kafka transactions enable atomic writes to multiple Kafka topics and partitions.\n"
"The Kafka connector provides `KafkaTransactions` custom emitter for writing Kafka records inside a transaction.\n"
"It can be injected as a regular emitter `@Channel`:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The function given to the `withTransaction` method receives a `TransactionalEmitter` for producing records, and returns a `Uni` that provides the result of the transaction."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If the processing completes successfully, the producer is flushed and the transaction is committed."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If the processing throws an exception, returns a failing `Uni`, or marks the `TransactionalEmitter` for abort, the transaction is aborted."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Kafka transactional producers require configuring `acks=all` client property, and a unique id for `transactional.id`, which implies `enable.idempotence=true`.\n"
"When Quarkus detects the use of `KafkaTransactions` for an outgoing channel it configures these properties on the channel,\n"
"providing a default value of `\"${quarkus.application.name}-${channelName}\"` for `transactional.id` property."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Note that for production use the `transactional.id` must be unique across all application instances."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"While a normal message emitter would support concurrent calls to `send` methods and consequently queues outgoing messages to be written to Kafka,\n"
"a `KafkaTransactions` emitter only supports one transaction at a time.\n"
"A transaction is considered in progress from the call to the `withTransaction` until the returned `Uni` results in success or failure.\n"
"While a transaction is in progress, subsequent calls to the `withTransaction`, including nested ones inside the given function, will throw `IllegalStateException`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Note that in Reactive Messaging, the execution of processing methods, is already serialized, unless `@Blocking(ordered = false)` is used.\n"
"If `withTransaction` can be called concurrently, for example from a REST endpoint, it is recommended to limit the concurrency of the execution.\n"
"This can be done using the `@Bulkhead` annotation from xref:smallrye-fault-tolerance.adoc[_Microprofile Fault Tolerance_]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "An example usage can be found in <<chaining-kafka-transactions-with-hibernate-reactive-transactions>>."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Transaction-aware consumers"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If you'd like to consume records only written and committed inside a Kafka transaction you need to configure the `isolation.level` property on the incoming channel as such:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Kafka Request-Reply"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The Kafka Request-Reply pattern allows to publish a request record to a Kafka topic and then await for a reply record that responds to the initial request.\n"
"The Kafka connector provides the `KafkaRequestReply` custom emitter that implements the requestor (or the client) of the request-reply pattern for Kafka outbound channels:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "It can be injected as a regular emitter `@Channel`:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The request method publishes the record to the configured target topic of the outgoing channel,\n"
"and polls a reply topic (by default, the target topic with `-replies` suffix) for a reply record.\n"
"When the reply is received the returned `Uni` is completed with the record value.\n"
"The request send operation generates a **correlation id** and sets a header (by default `REPLY_CORRELATION_ID`),\n"
"which it expects to be sent back in the reply record."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The replier can be implemented using a Reactive Messaging processor (see <<processing-messages>>)."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"For more information on Kafka Request Reply feature and advanced configuration options,\n"
"see the https://smallrye.io/smallrye-reactive-messaging/latest/kafka/request-reply/[SmallRye Reactive Messaging Documentation]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Processing Messages"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Applications streaming data often need to consume some events from a topic, process them and publish the result to a different topic.\n"
"A processor method can be simply implemented using both the `@Incoming` and `@Outgoing` annotations:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The parameter of the `process` method is the incoming message payload, whereas the return value will be used as the outgoing message payload.\n"
"Previously mentioned signatures for parameter and return types are also supported, such as `Message<T>`, `Record<K, V>`, etc."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You can apply asynchronous stream processing by consuming and returning reactive stream `Multi<T>` type:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Propagating Record Key"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "When processing messages, you can propagate incoming record key to the outgoing record."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Enabled with `mp.messaging.outgoing.$channel.propagate-record-key=true` configuration,\n"
"record key propagation produces the outgoing record with the same _key_ as the incoming record."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If the outgoing record already contains a _key_, it *won't be overridden* by the incoming record key.\n"
"If the incoming record does have a _null_ key, the `mp.messaging.outgoing.$channel.key` property is used."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Exactly-Once Processing"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Kafka Transactions allows managing consumer offsets inside a transaction, together with produced messages.\n"
"This enables coupling a consumer with a transactional producer in a _consume-transform-produce_ pattern, also known as *exactly-once processing*."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The `KafkaTransactions` custom emitter provides a way to apply exactly-once processing to an incoming Kafka message inside a transaction."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The following example includes a batch of Kafka records inside a transaction."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"It is recommended to use exactly-once processing along with the batch consumption mode.\n"
"While it is possible to use it with a single Kafka message, it'll have a significant performance impact."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The consumed message is passed to the `KafkaTransactions#withTransactionAndAck` in order to handle the offset commits and message acks."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The `send` method writes records to Kafka inside the transaction, without waiting for send receipt from the broker.\n"
"Messages pending to be written to Kafka will be buffered, and flushed before committing the transaction.\n"
"It is therefore recommended configuring the `@OnOverflow` `bufferSize` in order to fit enough messages, for example the `max.poll.records`, maximum amount of records returned in a batch."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If the processing completes successfully, _before committing the transaction_, the topic partition offsets of the given batch message will be committed to the transaction."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If the processing needs to abort, _after aborting the transaction_, the consumer's position is reset to the last committed offset, effectively resuming the consumption from that offset. If no consumer offset has been committed to a topic-partition, the consumer's position is reset to the beginning of the topic-partition, _even if the offset reset policy is `latest`_."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"When using exactly-once processing, consumed message offset commits are handled by the transaction and therefore the application should not commit offsets through other means.\n"
"The consumer should have `enable.auto.commit=false` (the default) and set explicitly `commit-strategy=ignore`:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Error handling for the exactly-once processing"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The `Uni` returned from the `KafkaTransactions#withTransaction` will yield a failure if the transaction fails and is aborted.\n"
"The application can choose to handle the error case, but if a failing `Uni` is returned from the `@Incoming` method, the incoming channel will effectively fail and stop the reactive stream."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The `KafkaTransactions#withTransactionAndAck` method acks and nacks the message but will *not* return a failing `Uni`.\n"
"Nacked messages will be handled by the failure strategy of the incoming channel, (see <<error-handling>>).\n"
"Configuring `failure-strategy=ignore` simply resets the Kafka consumer to the last committed offsets and resumes the consumption from there."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Accessing Kafka clients directly"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"In rare cases, you may need to access the underlying Kafka clients.\n"
"`KafkaClientService` provides thread-safe access to `Producer` and `Consumer`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The `KafkaClientService` is an experimental API and can change in the future."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You can also get the Kafka configuration injected to your application and create Kafka producer, consumer and admin clients directly:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The `default-kafka-broker` configuration map contains all application properties prefixed with `kafka.` or `KAFKA_`.\n"
"For more configuration options check out <<kafka-configuration-resolution>>."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "JSON serialization"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Quarkus has built-in capabilities to deal with JSON Kafka messages."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Imagine we have a `Fruit` data class as follows:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "And we want to use it to receive messages from Kafka, make some price transformation, and send messages back to Kafka."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To do this, we will need to set up JSON serialization with Jackson or JSON-B."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "With JSON serialization correctly configured, you can also use `Publisher<Fruit>` and `Emitter<Fruit>`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Serializing via Jackson"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Quarkus has built-in support for JSON serialization and deserialization based on Jackson.\n"
"It will also <<serialization-generation,generate>> the serializer and deserializer for you, so you do not have to configure anything.\n"
"When generation is disabled, you can use the provided `ObjectMapperSerializer` and `ObjectMapperDeserializer` as explained below."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"There is an existing `ObjectMapperSerializer` that can be used to serialize all data objects via Jackson.\n"
"You may create an empty subclass if you want to use <<serialization-autodetection>>."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"By default, the `ObjectMapperSerializer` serializes null as the `\"null\"` String, this can be customized by setting the Kafka configuration\n"
"property `json.serialize.null-as-null=true` which will serialize null as `null`.\n"
"This is handy when using a compacted topic, as `null` is used as a tombstone to know which messages delete during compaction phase."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The corresponding deserializer class needs to be subclassed.\n"
"So, let's create a `FruitDeserializer` that extends the `ObjectMapperDeserializer`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Finally, configure your channels to use the Jackson serializer and deserializer."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Now, your Kafka messages will contain a Jackson serialized representation of your `Fruit` data object.\n"
"In this case, the `deserializer` configuration is not necessary as the <<serialization-autodetection>> is enabled by default."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If you want to deserialize a list of fruits, you need to create a deserializer with a Jackson `TypeReference` denoted the generic collection used."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Serializing via JSON-B"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "First, you need to include the `quarkus-jsonb` extension."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"There is an existing `JsonbSerializer` that can be used to serialize all data objects via JSON-B.\n"
"You may create an empty subclass if you want to use <<serialization-autodetection>>."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"By default, the `JsonbSerializer` serializes null as the `\"null\"` String, this can be customized by setting the Kafka configuration\n"
"property `json.serialize.null-as-null=true` which will serialize null as `null`.\n"
"This is handy when using a compacted topic, as `null` is used as a tombstone to know which messages delete during compaction phase."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The corresponding deserializer class needs to be subclassed.\n"
"So, let's create a `FruitDeserializer` that extends the generic `JsonbDeserializer`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Finally, configure your channels to use the JSON-B serializer and deserializer."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Now, your Kafka messages will contain a JSON-B serialized representation of your `Fruit` data object."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If you want to deserialize a list of fruits, you need to create a deserializer with a `Type` denoted the generic collection used."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If you don't want to create a deserializer for each data object, you can use the generic `io.vertx.kafka.client.serialization.JsonObjectDeserializer`\n"
"that will deserialize to a `io.vertx.core.json.JsonObject`. The corresponding serializer can also be used: `io.vertx.kafka.client.serialization.JsonObjectSerializer`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Avro Serialization"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "This is described in a dedicated guide: xref:kafka-schema-registry-avro.adoc[Using Apache Kafka with Schema Registry and Avro]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "JSON Schema Serialization"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "This is described in a dedicated guide: xref:kafka-schema-registry-json-schema.adoc[Using Apache Kafka with Schema Registry and JSON Schema]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Serializer/deserializer autodetection"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"When using Quarkus Messaging with Kafka (`io.quarkus:quarkus-messaging-kafka`), Quarkus can often automatically detect the correct serializer and deserializer class.\n"
"This autodetection is based on declarations of `@Incoming` and `@Outgoing` methods, as well as injected ``@Channel``s."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For example, if you declare"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "and your configuration indicates that the `generated-price` channel uses the `smallrye-kafka` connector, then Quarkus will automatically set the `value.serializer` to Kafka's built-in `IntegerSerializer`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Similarly, if you declare"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "and your configuration indicates that the `my-kafka-records` channel uses the `smallrye-kafka` connector, then Quarkus will automatically set the `key.deserializer` to Kafka's built-in `LongDeserializer`, as well as the `value.deserializer` to `ByteArrayDeserializer`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Finally, if you declare"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "and your configuration indicates that the `price-create` channel uses the `smallrye-kafka` connector, then Quarkus will automatically set the `value.serializer` to Kafka's built-in `DoubleSerializer`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The full set of types supported by the serializer/deserializer autodetection is:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`short` and `java.lang.Short`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`int` and `java.lang.Integer`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`long` and `java.lang.Long`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`float` and `java.lang.Float`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`double` and `java.lang.Double`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`byte[]`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`java.lang.String`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`java.util.UUID`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`java.nio.ByteBuffer`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`org.apache.kafka.common.utils.Bytes`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`io.vertx.core.buffer.Buffer`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`io.vertx.core.json.JsonObject`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`io.vertx.core.json.JsonArray`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "classes for which a direct implementation of `org.apache.kafka.common.serialization.Serializer<T>` / `org.apache.kafka.common.serialization.Deserializer<T>` is present."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "the implementation needs to specify the type argument `T` as the (de-)serialized type."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "classes generated from Avro schemas, as well as Avro `GenericRecord`, if Confluent or Apicurio Registry _serde_ is present"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "in case multiple Avro serdes are present, serializer/deserializer must be configured manually for Avro-generated classes, because autodetection is impossible"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "see xref:kafka-schema-registry-avro.adoc[Using Apache Kafka with Schema Registry and Avro] for more information about using Confluent or Apicurio Registry libraries"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "classes for which a subclass of `ObjectMapperSerializer` / `ObjectMapperDeserializer` is present, as described in <<jackson-serialization>>"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "it is technically not needed to subclass `ObjectMapperSerializer`, but in such case, autodetection isn't possible"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "classes for which a subclass of `JsonbSerializer` / `JsonbDeserializer` is present, as described in <<jsonb-serialization>>"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "it is technically not needed to subclass `JsonbSerializer`, but in such case, autodetection isn't possible"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If a serializer/deserializer is set by configuration, it won't be replaced by the autodetection."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"In case you have any issues with serializer autodetection, you can switch it off completely by setting `quarkus.messaging.kafka.serializer-autodetection.enabled=false`.\n"
"If you find you need to do this, please file a bug in the link:https://github.com/quarkusio/quarkus/issues[Quarkus issue tracker] so we can fix whatever problem you have."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "JSON Serializer/deserializer generation"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Quarkus automatically generates serializers and deserializers for channels where:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "the serializer/deserializer is not configured"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "the auto-detection did not find a matching serializer/deserializer"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "It uses Jackson underneath."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "This generation can be disabled using:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Generation does not support collections such as `List<Fruit>`.\n"
"Refer to <<jackson-serialization>> to write your own serializer/deserializer for this case."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Using Schema Registry"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"This is described in a dedicated guide for Avro: xref:kafka-schema-registry-avro.adoc[Using Apache Kafka with Schema Registry and Avro].\n"
"And a different one for JSON Schema: xref:kafka-schema-registry-json-schema.adoc[Using Apache Kafka with Schema Registry and JSON Schema]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Health Checks"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Quarkus provides several health checks for Kafka.\n"
"These checks are used in combination with the `quarkus-smallrye-health` extension."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Kafka Broker Readiness Check"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"When using the `quarkus-kafka-client` extension, you can enable _readiness_ health check by setting the `quarkus.kafka.health.enabled` property to `true` in your `application.properties`.\n"
"This check reports the status of the interaction with a _default_ Kafka broker (configured using `kafka.bootstrap.servers`).\n"
"It requires an _admin connection_ with the Kafka broker, and it is disabled by default.\n"
"If enabled, when you access the `/q/health/ready` endpoint of your application, you will have information about the connection validation status."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Kafka Reactive Messaging Health Checks"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "When using Reactive Messaging and the Kafka connector, each configured channel (incoming or outgoing) provides _startup_, _liveness_ and _readiness_ checks."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The _startup_ check verifies that the communication with Kafka cluster is established."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The _liveness_ check captures any unrecoverable failure happening during the communication with Kafka."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The _readiness_ check verifies that the Kafka connector is ready to consume/produce messages to the configured Kafka topics."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For each channel, you can disable the checks using:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"You can configure the `bootstrap.servers` for each channel using `mp.messaging.incoming|outgoing.$channel.bootstrap.servers` property.\n"
"Default is `kafka.bootstrap.servers`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Reactive Messaging _startup_ and _readiness_ checks offer two strategies.\n"
"The default strategy verifies that an active connection is established with the broker.\n"
"This approach is not intrusive as it's based on built-in Kafka client metrics."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Using the `health-topic-verification-enabled=true` attribute, _startup_ probe uses an _admin client_ to check for the list of topics.\n"
"Whereas the _readiness_ probe for an incoming channel checks that at least one partition is assigned for consumption,\n"
"and for an outgoing channel checks that the topic used by the producer exist in the broker."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Note that to achieve this, an _admin connection_ is required.\n"
"You can adjust the timeout for topic verification calls to the broker using the `health-topic-verification-timeout` configuration."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Observability"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If the xref:opentelemetry.adoc[OpenTelemetry extension] is present,\n"
"then the Kafka connector channels work out-of-the-box with the OpenTelemetry Tracing.\n"
"Messages written to Kafka topics propagate the current tracing span.\n"
"On incoming channels, if a consumed Kafka record contains tracing information the message processing inherits the message span as parent."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Tracing can be disabled explicitly per channel:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If the xref:telemetry-micrometer.adoc[Micrometer extension] is present,\n"
"then Kafka producer and consumer clients metrics are exposed as Micrometer meters."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Channel metrics"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Per channel metrics can also be gathered and exposed as Micrometer meters.\n"
"Following metrics can be gathered per channel, identified with the _channel_ tag:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`quarkus.messaging.message.count` : The number of messages produced or received"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`quarkus.messaging.message.acks` : The number of messages processed successfully"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`quarkus.messaging.message.failures` : The number of messages processed with failures"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`quarkus.messaging.message.duration` : The duration of the message processing."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For backwards compatibility reasons channel metrics are not enabled by default and can be enabled with:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The https://smallrye.io/smallrye-reactive-messaging/latest/concepts/observability/[message observation]\n"
"depends on intercepting messages and therefore doesn't support channels consuming messages with\n"
"a custom message type such as `IncomingKafkaRecord`, `KafkaRecord`, `IncomingKafkaRecordBatch` or `KafkaRecordBatch`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The message interception, and observation, still work with channels consuming the generic `Message` type,\n"
"or custom payloads enabled by https://smallrye.io/smallrye-reactive-messaging/latest/concepts/converters/[converters]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Kafka Streams"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "This is described in a dedicated guide: xref:kafka-streams.adoc[Using Apache Kafka Streams]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Using Snappy for message compression"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "On _outgoing_ channels, you can enable Snappy compression by setting the `compression.type` attribute to `snappy`:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"In JVM mode, it will work out of the box.\n"
"However, to compile your application to a native executable, you need to\n"
"add `quarkus.kafka.snappy.enabled=true` to your `application.properties`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "In native mode, Snappy is disabled by default as the use of Snappy requires embedding a native library and unpacking it when the application starts."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Authentication with OAuth"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If your Kafka broker uses OAuth as authentication mechanism, you need to configure the Kafka consumer to enable this authentication process.\n"
"First, add the following dependency to your application:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"This dependency provides the callback handler required to handle the OAuth workflow.\n"
"Then, in the `application.properties`, add:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Update the `oauth.client.id`, `oauth.client.secret` and `oauth.token.endpoint.uri` values."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "OAuth authentication works for both JVM and native modes. Since SSL in not enabled by default in native mode, `quarkus.ssl.native=true` must be added to support JaasClientOauthLoginCallbackHandler, which uses SSL. (See the xref:native-and-ssl.adoc[Using SSL with Native Executables] guide for more details.)"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "TLS Configuration"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Kafka client extension integrates with the xref:./tls-registry-reference.adoc[Quarkus TLS registry] to configure clients."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To configure the TLS for the default Kafka configuration, you need to provide a named TLS configuration in the `application.properties`:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "This will in turn provide the Kafka client with a `ssl.engine.factory.class` implementation."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Make sure also to enable the SSL channel security protocol using the `security.protocol` property configured to `SSL` or `SASL_SSL`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Quarkus Messaging channels can be configured individually to use a specific TLS configuration:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Testing a Kafka application"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Testing without a broker"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"It can be useful to test the application without having to start a Kafka broker.\n"
"To achieve this, you can _switch_ the channels managed by the Kafka connector to _in-memory_."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "This approach only works for JVM tests. It cannot be used for native tests (because they do not support injection)."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Let's say we want to test the following processor application:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "First, add the following test dependency to your application:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Then, create a Quarkus Test Resource as follows:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Switch the incoming channel `orders` (expecting messages from Kafka) to in-memory."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Switch the outgoing channel `beverages` (writing messages to Kafka) to in-memory."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Builds and returns a `Map` containing all the properties required to configure the application to use in-memory channels."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "When the test stops, clear the `InMemoryConnector` (discard all the received and sent messages)"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Create a Quarkus Test using the test resource created above:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Inject the in-memory connector in your test class."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Retrieve the incoming channel (`orders`) - the channel must have been switched to in-memory in the test resource."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Retrieve the outgoing channel (`beverages`) - the channel must have been switched to in-memory in the test resource."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Use the `send` method to send a message to the `orders` channel.\n"
"The application will process this message and send a message to `beverages` channel."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Use the `received` method on `beverages` channel to check the messages produced by the application."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If your Kafka consumer is batch based, you will need to send a batch of messages to the channel as by creating them manually."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For instance:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Create an `AtomicBoolean` to track if the batch has been committed."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Update `committed` when the batch is committed."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Create a `IncomingKafkaRecordBatch` with a single record."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Wait until the batch is committed."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"With in-memory channels we were able to test application code processing messages without starting a Kafka broker.\n"
"Note that different in-memory channels are independent, and switching channel connector to in-memory does not simulate message delivery between channels configured to the same Kafka topic."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Context propagation with InMemoryConnector"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "By default, in-memory channels dispatch messages on the caller thread, which would be the main thread in unit tests."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The `quarkus-test-vertx` dependency provides the `@io.quarkus.test.vertx.RunOnVertxContext` annotation,\n"
"which when used on a test method, executes the test on a Vert.x context."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "However, most of the other connectors handle context propagation dispatching messages on separate duplicated Vert.x contexts."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If your tests are dependent on context propagation,\n"
"you can configure the in-memory connector channels with the `run-on-vertx-context` attribute to dispatch events,\n"
"including messages and acknowledgements, on a Vert.x context.\n"
"Alternatively you can switch this behaviour using the `InMemorySource#runOnVertxContext` method."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Testing using a Kafka broker"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If you are using <<kafka-dev-services>>, a Kafka broker will be started and available throughout the tests, unless it is disabled in `%test` profile.\n"
"While it is possible to connect to this broker using Kafka Clients API,\n"
"https://smallrye.io/smallrye-reactive-messaging/latest/kafka/test-companion/[Kafka Companion Library] proposes an easier way of interacting with a Kafka broker and, creating consumer, producer and admin actions inside tests."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For using `KafkaCompanion` API in tests, start by adding the following dependency:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "which provides `io.quarkus.test.kafka.KafkaCompanionResource` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Then use `@QuarkusTestResource` to configure the Kafka Companion in tests, for example:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`@InjectKafkaCompanion` injects the `KafkaCompanion` instance, configured to access the Kafka broker created for tests."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Use `KafkaCompanion` to create producer task which writes 10 records to 'orders' topic."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Create consumer task which subscribes to 'orders-processed' topic and consumes 10 records."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Await completion of the consumer task."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You need to configure"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "otherwise you will get an `java.lang.AssertionError: No completion (or failure) event received in the last 10000 ms` in <4>"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If the Kafka Dev Service is available during tests, `KafkaCompanionResource` uses the created Kafka broker, otherwise it creates a Kafka broker using https://github.com/strimzi/test-container[Strimzi Test Container]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The configuration of the created Kafka broker can be customized using `@ResourceArg`, for example:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Custom test resource"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Alternatively, you can start a Kafka broker in a test resource.\n"
"The following snippet shows a test resource starting a Kafka broker using https://www.testcontainers.org/modules/kafka/[Testcontainers]:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Configure the Kafka bootstrap location, so the application connects to this broker."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Kubernetes Service Bindings"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Quarkus Kafka extension supports\n"
"xref:deploying-to-kubernetes.adoc[Service Binding Specification for Kubernetes].\n"
"You can enable this by adding the `quarkus-kubernetes-service-binding` extension to your application."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "When running in appropriately configured Kubernetes clusters, Kafka extension will pull its Kafka broker connection configuration from the service binding available inside the cluster, without the need for user configuration."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Execution model"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Reactive Messaging invokes user's methods on an I/O thread.\n"
"Thus, by default, the methods must not block.\n"
"As described in <<blocking-processing>>, you need to add the `@Blocking` annotation on the method if this method will block the caller thread."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Channel Decorators"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "SmallRye Reactive Messaging supports decorating incoming and outgoing channels for implementing cross-cutting concerns such as monitoring, tracing or message interception. For more information on implementing decorators and message interceptors see the http://smallrye.io/smallrye-reactive-messaging/latest/concepts/decorators/[SmallRye Reactive Messaging documentation]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Configuration Reference"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "More details about the SmallRye Reactive Messaging configuration can be found in the https://smallrye.io/smallrye-reactive-messaging/latest/kafka/kafka/#using-the-kafka-connector[SmallRye Reactive Messaging - Kafka Connector Documentation]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Each channel can be disabled via configuration using:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The most important attributes are listed in the tables below:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Incoming channel configuration (polling from Kafka)"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The following attributes are configured using:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Some properties have aliases which can be configured globally:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You can also pass any property supported by the underlying https://kafka.apache.org/documentation/#consumerconfigs[Kafka consumer]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For example, to configure the `max.poll.records` property, use:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Some consumer client properties are configured to sensible default values:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If not set, `reconnect.backoff.max.ms` is set to `10000` to avoid high load on disconnection."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If not set, `key.deserializer` is set to `org.apache.kafka.common.serialization.StringDeserializer`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The consumer `client.id` is configured according to the number of clients to create using `mp.messaging.incoming.[channel].partitions` property."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If a `client.id` is provided, it is used as-is or suffixed with client index if `partitions` property is set."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If a `client.id` is not provided, it is generated as `[client-id-prefix][channel-name][-index]`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Outgoing channel configuration (writing to Kafka)"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You can also pass any property supported by the underlying https://kafka.apache.org/documentation/#producerconfigs[Kafka producer]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For example, to configure the `max.block.ms` property, use:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Some producer client properties are configured to sensible default values:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If not set, `key.serializer` is set to `org.apache.kafka.common.serialization.StringSerializer`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If not set, producer `client.id` is generated as `[client-id-prefix][channel-name]`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Kafka Configuration Resolution"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Quarkus exposes all Kafka related application properties, prefixed with `kafka.` or `KAFKA_` inside a configuration map with `default-kafka-broker` name.\n"
"This configuration is used to establish the connection with the Kafka broker."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "In addition to this default configuration, you can configure the name of the `Map` producer using the `kafka-configuration` attribute:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"In this case, the connector looks for the `Map` associated with the `my-configuration` name.\n"
"If `kafka-configuration` is not set, an optional lookup for a `Map` exposed with the channel name (`my-channel` in the previous example) is done."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If `kafka-configuration` is set and no `Map` can be found, the deployment fails."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Attribute values are resolved as follows:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "the attribute is set directly on the channel configuration (`mp.messaging.incoming.my-channel.attribute=value`),"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "if not set, the connector looks for a `Map` with the channel name or the configured `kafka-configuration` (if set) and the value is retrieved from that `Map`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If the resolved `Map` does not contain the value the default `Map` is used (exposed with the `default-kafka-broker` name)"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Conditionally configure channels"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"You can configure the channels using a specific profile.\n"
"Thus, the channels are only configured (and added to the application) when the specified profile is enabled."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To achieve this, you need:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Prefix the `mp.messaging.[incoming|outgoing].$channel` entries with `%my-profile` such as `%my-profile.mp.messaging.[incoming|outgoing].$channel.key=value`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Use the `@IfBuildProfile(\"my-profile\")` on the CDI beans containing `@Incoming(channel)` and `@Outgoing(channel)` annotations that need only to be enabled when the profile is enabled."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Note that reactive messaging verifies that the graph is complete.\n"
"So, when using such a conditional configuration, ensure the application works with and without the profile enabled."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Note that this approach can also be used to change the channel configuration based on a profile."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Integrating with Kafka - Common patterns"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Writing to Kafka from an HTTP endpoint"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To send messages to Kafka from an HTTP endpoint, inject an `Emitter` (or a `MutinyEmitter`) in your endpoint:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Inject an `Emitter<String>`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The HTTP method receives the payload and returns a `CompletionStage` completed when the message is written to Kafka"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Send the message to Kafka, the `send` method returns a `CompletionStage`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The endpoint sends the passed payload (from a `POST` HTTP request) to the emitter.\n"
"The emitter's channel is mapped to a Kafka topic in the `application.properties` file:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The endpoint returns a `CompletionStage` indicating the asynchronous nature of the method.\n"
"The `emitter.send` method returns a `CompletionStage<Void>` .\n"
"The returned future is completed when the message has been written to Kafka.\n"
"If the writing fails, the returned `CompletionStage` is completed exceptionally."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If the endpoint does not return a `CompletionStage`, the HTTP response may be written before the message is sent to Kafka, and so failures won't be reported to the user."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If you need to send a Kafka record, use:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Note the usage of an `Emitter<Record<K, V>>`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Create the record using `Record.of(k, v)`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Persisting Kafka messages with Hibernate with Panache"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To persist objects received from Kafka into a database, you can use Hibernate with Panache."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If you use Hibernate Reactive, look at <<persisting-kafka-messages-with-hibernate-reactive>>."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Let's imagine you receive `Fruit` objects.\n"
"For simplicity purposes, our `Fruit` class is pretty simple:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To consume `Fruit` instances stored on a Kafka topic, and persist them into a database, you can use the following approach:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Configuring the incoming channel. This channel reads from Kafka."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"As we are writing in a database, we must be in a transaction. This annotation starts a new transaction and commits it when the method returns.\n"
"Quarkus automatically considers the method as _blocking_. Indeed, writing to a database using classic Hibernate is blocking. So, Quarkus calls the method on a worker thread you can block (and not an I/O thread)."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The method receives each Fruit. Note that you would need a deserializer to reconstruct the Fruit instances from the Kafka records."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Persist the received `fruit` object."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"As mentioned in <4>, you need a deserializer that can create a `Fruit` from the record.\n"
"This can be done using a Jackson deserializer:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The associated configuration would be:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Check <<jackson-serialization>> for more detail about the usage of Jackson with Kafka.\n"
"You can also use Avro."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Persisting Kafka messages with Hibernate Reactive"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To persist objects received from Kafka into a database, you can use Hibernate Reactive with Panache."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Make sure to use the reactive variant"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Inject the Hibernate Reactive `Session`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Hibernate Reactive `Session` and `Panache` APIs require an active CDI Request context.\n"
"`@ActivateRequestContext` annotation creates a new request context and destroys it when the `Uni` returned from the method completes.\n"
"If `Panache` is not used, `Mutiny.SessionFactory` can be injected and used similarly without the need of activating the request context or closing the session manually."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Requests a new transaction. The transaction completes when the passed action completes."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Persist the entity. It returns a `Uni<Fruit>`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Switch back to a `Uni<Void>`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Close the session - this is close the connection with the database. The connection can then be recycled."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Unlike with _classic_ Hibernate, you can't use `@Transactional`.\n"
"Instead, we use `session.withTransaction` and persist our entity.\n"
"The `map` is used to return a `Uni<Void>` and not a `Uni<Fruit>`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"You need a deserializer that can create a `Fruit` from the record.\n"
"This can be done using a Jackson deserializer:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Writing entities managed by Hibernate to Kafka"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Let's imagine the following process:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You receive an HTTP request with a payload,"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You create an Hibernate entity instance from this payload,"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You persist that entity into a database,"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You send the entity to a Kafka topic"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If you use Hibernate Reactive, look at <<writing-entities-managed-by-hibernate-reactive-to-kafka>>."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Because we write to a database, we must run this method in a transaction.\n"
"Yet, sending the entity to Kafka happens asynchronously.\n"
"We can achieve this by using `.sendAndAwait()` or `.sendAndForget()` on the `MutinyEmitter`, or `.send().toCompletableFuture().join()` on the `Emitter`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To implement this process, you need the following approach:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "As we are writing to the database, make sure we run inside a transaction"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The method receives the fruit instance to persist."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Wrap the managed entity inside a Data transfer object and send it to Kafka.\n"
"This makes sure that managed entity is not impacted by the Kafka serialization.\n"
"Then await the completion of the operation before returning."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You should not return a `CompletionStage` or `Uni` when using `@Transactional`, as all transaction commits will happen on a single thread, which impacts performance."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Writing entities managed by Hibernate Reactive to Kafka"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To send to Kafka entities managed by Hibernate Reactive, we recommend using:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Quarkus REST to serve HTTP requests"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "A `MutinyEmitter` to send message to a channel, so it can be easily integrated with the Mutiny API exposed by Hibernate Reactive or Hibernate Reactive with Panache."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The following example demonstrates how to receive a payload, store it in the database using Hibernate Reactive with Panache, and send the persisted entity to Kafka:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Inject a `MutinyEmitter` which exposes a Mutiny API. It simplifies the integration with the Mutiny API exposed by Hibernate Reactive with Panache."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The HTTP method receiving the payload returns a `Uni<Void>`. The HTTP response is written when the operation completes (the entity is persisted and written to Kafka)."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "We need to write the entity into the database in a transaction."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Once the persist operation completes, we send the entity to Kafka. The `send` method returns a `Uni<Void>`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Streaming Kafka topics as server-sent events"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Streaming a Kafka topic as server-sent events (SSE) is straightforward:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You inject the channel representing the Kafka topic in your HTTP endpoint"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You return that channel as a `Publisher` or a `Multi` from the HTTP method"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The following code provides an example:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Some environment cuts the SSE connection when there is not enough activity.\n"
"The workaround consists of sending _ping_ messages (or empty objects) periodically."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"The workaround is a bit more complex as besides sending the fruits coming from Kafka, we need to send pings periodically.\n"
"To achieve this we merge the stream coming from Kafka and a periodic stream emitting `{}` every 10 seconds."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Chaining Kafka Transactions with Hibernate Reactive transactions"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"By chaining a Kafka transaction with a Hibernate Reactive transaction you can send records to a Kafka transaction,\n"
"perform database updates and commit the Kafka transaction only if the database transaction is successful."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The following example demonstrates:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Receive a payload by serving HTTP requests using Quarkus REST,"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Limit concurrency of that HTTP endpoint using SmallRye Fault Tolerance,"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Start a Kafka transaction and send the payload to Kafka record,"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Store the payload in the database using Hibernate Reactive with Panache,"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Commit the Kafka transaction only if the entity is persisted successfully."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Inject a `KafkaTransactions` which exposes a Mutiny API. It allows the integration with the Mutiny API exposed by Hibernate Reactive with Panache."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Limit the concurrency of the HTTP endpoint to \"1\", preventing starting multiple transactions at a given time."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The HTTP method receiving the payload returns a `Uni<Void>`. The HTTP response is written when the operation completes (the entity is persisted and Kafka transaction is committed)."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Begin a Kafka transaction."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Send the payload to Kafka inside the Kafka transaction."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Persist the entity into the database in a Hibernate Reactive transaction."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Once the persist operation completes, and there is no errors, the Kafka transaction is committed.\n"
"The result is omitted and returned as the HTTP response."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"In the previous example the database transaction (inner) will commit followed by the Kafka transaction (outer).\n"
"If you wish to commit the Kafka transaction first and the database transaction second, you need to nest them in the reverse order."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The next example demonstrates that using the Hibernate Reactive API (without Panache):"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Inject the Hibernate Reactive `SessionFactory`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Begin a Hibernate Reactive transaction."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Persist the payload and send the entity to Kafka."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Alternatively, you can use the `@WithTransaction` annotation to start a transaction and commit it when the method returns:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Start a Hibernate Reactive transaction and commit it when the method returns."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Chaining Kafka Transactions with Hibernate ORM transactions"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"While `KafkaTransactions` provide a reactive API on top of Mutiny to manage Kafka transactions,\n"
"you can still chain Kafka transactions with blocking Hibernate ORM transactions."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Start a Hibernate ORM transaction. The transaction is committed when the method returns."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Persist the payload."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Send the entity to Kafka inside the Kafka transaction."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Wait on the returned `Uni` for the Kafka transaction to complete."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Logging"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To reduce the amount of log written by the Kafka client, Quarkus sets the level of the following log categories to `WARNING`:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`org.apache.kafka.clients`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`org.apache.kafka.common.utils`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "`org.apache.kafka.common.metrics`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You can override the configuration by adding the following lines to the `application.properties`:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Connecting to Managed Kafka clusters"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "This section explains how to connect to notorious Kafka Cloud Services."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Azure Event Hub"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-for-kafka-ecosystem-overview[Azure Event Hub] provides an endpoint compatible with Apache Kafka."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Azure Event Hubs for Kafka is not available in the _basic_ tier.\n"
"You need at least the _standard_ tier to use Kafka.\n"
"See https://azure.microsoft.com/en-us/pricing/details/event-hubs/[Azure Event Hubs Pricing] to see the other options."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To connect to Azure Event Hub, using the Kafka protocol with TLS, you need the following configuration:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The port is `9093`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "You need to use the JAAS `PlainLoginModule`."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The username is the `$ConnectionString` string."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The Event Hub connection string given by Azure."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Replace `<YOUR.EVENTHUBS.CONNECTION.STRING>` with the connection string for your Event Hubs namespace.\n"
"For instructions on getting the connection string, see https://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-get-connection-string[Get an Event Hubs connection string].\n"
"The result would be something like:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "This configuration can be global (as above), or set in the channel configuration:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Red Hat OpenShift Streams for Apache Kafka"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"https://cloud.redhat.com/[Red Hat OpenShift Streams for Apache Kafka] provides managed Kafka brokers.\n"
"First, follow the instructions from https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/88e1487a-2a14-4b35-85b9-a7a2d67a37f3[Getting started with the `rhoas` CLI for Red Hat OpenShift Streams for Apache Kafka] to create your Kafka broker instance.\n"
"Make sure you copied the client id and client secret associated with the _ServiceAccount_ you created."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Then, you can configure the Quarkus application to connect to the broker as follows:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The connection string, given on the admin console, such as `demo-c--bjsv-ldd-cvavkc-a.bf2.kafka.rhcloud.com:443`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The kafka username (the client id from the service account)"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "the kafka password (the client secret from the service account)"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "In general, these properties are prefixed using `%prod` to enable them only when running in production mode."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"As explained in https://access.redhat.com/documentation/en-us/red_hat_openshift_streams_for_apache_kafka/1/guide/88e1487a-2a14-4b35-85b9-a7a2d67a37f3[Getting started with the rhoas CLI for Red Hat OpenShift Streams for Apache Kafka], to use Red Hat OpenShift Streams for Apache Kafka, you must create the topic beforehand, create a _Service Account_, and provide permissions to read and write to your topic from that service account.\n"
"The authentication data (client id and secret) relates to the service account, which means you can implement fine-grain permissions and restrict access to the topic."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "When using Kubernetes, it is recommended to set the client id and secret in a Kubernetes secret:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "To allow your Quarkus application to use that secret, add the following line to the `application.properties` file:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Red Hat OpenShift Service Registry"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-service-registry[Red Hat OpenShift Service Registry]\n"
"provides fully managed service registry for handling Kafka schemas."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"You can follow the instructions from\n"
"https://access.redhat.com/documentation/en-us/red_hat_openshift_service_registry/1/guide/ab1894d1-cae0-4d11-b185-81d62b4aabc7#_60472331-fa00-48ec-a621-bbd039500c7d[Getting started with Red Hat OpenShift Service Registry],\n"
"or use the `rhoas` CLI to create a new service registry instance:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Make sure to note the _Registry URL_ of the instance created.\n"
"For authentication, you can use the same _ServiceAccount_ you created previously.\n"
"You need to make sure that it has the necessary permissions to access the service registry."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For example, using the `rhoas` CLI, you can grant the `MANAGER` role to the service account:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Then, you can configure the Quarkus application to connect to the schema registry as follows:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The service registry URL, given on the admin console, such as `https://bu98.serviceregistry.rhcloud.com/t/0e95af2c-6e11-475e-82ee-f13bd782df24/apis/registry/v2`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The OAuth token endpoint URL, such as `https://identity.api.openshift.com/auth/realms/rhoas/protocol/openid-connect/token`"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The client id (from the service account)"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "The client secret (from the service account)"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Binding Red Hat OpenShift managed services to Quarkus application using the Service Binding Operator"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"If your Quarkus application is deployed on a Kubernetes or OpenShift cluster with link:https://github.com/redhat-developer/service-binding-operator[Service Binding Operator] and link:https://github.com/redhat-developer/app-services-operator/tree/main/docs[OpenShift Application Services] operators installed,\n"
"configurations necessary to access Red Hat OpenShift Streams for Apache Kafka and Service Registry can be injected to the application using xref:deploying-to-kubernetes.adoc#service_binding[Kubernetes Service Binding]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"In order to set up the Service Binding, you need first to connect OpenShift managed services to your cluster.\n"
"For an OpenShift cluster you can follow the instructions from link:https://github.com/redhat-developer/app-services-guides/tree/main/docs/registry/service-binding-registry#connecting-a-kafka-and-service-registry-instance-to-your-openshift-cluster[Connecting a Kafka and Service Registry instance to your OpenShift cluster]."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Once you've connected your cluster with the RHOAS Kafka and Service Registry instances, make sure you've granted necessary permissions to the newly created service account."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"Then, using the xref:deploying-to-kubernetes.adoc#service_binding[Kubernetes Service Binding] extension,\n"
"you can configure the Quarkus application to generate `ServiceBinding` resources for those services:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "For this example Quarkus build will generate the following `ServiceBinding` resources:"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"You can follow xref:deploying-to-kubernetes.adoc#openshift[Deploying to OpenShift] to deploy your application, including generated `ServiceBinding` resources.\n"
"The configuration properties necessary to access the Kafka and Schema Registry instances will be injected to the application automatically at deployment."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "Going further"
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid ""
"This guide has shown how you can interact with Kafka using Quarkus.\n"
"It utilizes Quarkus Messaging to build data streaming applications."
msgstr ""

#: _versions/3.27/guides/kafka.adoc
msgid "If you want to go further, check the documentation of https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging], the implementation used in Quarkus."
msgstr ""
