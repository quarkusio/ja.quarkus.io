msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/native-reference.adoc
msgid "Native Reference Guide"
msgstr "ネイティブリファレンスガイド"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This guide is a companion to the\n"
"xref:building-native-image.adoc[Building a Native Executable],\n"
"xref:native-and-ssl.adoc[Using SSL With Native Images],\n"
"and xref:writing-native-applications-tips.adoc[Writing Native Applications],\n"
"guides.\n"
"It explores advanced topics that help users diagnose issues,\n"
"increase the reliability and improve the runtime performance of native executables.\n"
"These are the high level sections to be found in this guide:"
msgstr "このガイドは、xref:building-native-image.adoc[ネイティブ実行可能ファイルのビルド]、xref:native-and-ssl.adoc[ネイティブイメージでのSSLの使用]、xref:writing-native-applications-tips.adoc[ネイティブアプリケーションの作成] の各ガイドに付随するものです。ユーザーが問題を診断し、信頼性を高め、ネイティブ実行可能ファイルのランタイム パフォーマンスを向上させるのに役立つ高度なトピックについて説明します。 これらは、このガイドにある高レベルのセクションです:"

#: _versions/3.27/guides/native-reference.adoc
msgid "<<native-memory-management,Native Memory Management>>"
msgstr "<<native-memory-management,ネイティブメモリ管理>>"

#: _versions/3.27/guides/native-reference.adoc
msgid "<<inspecting-and-debugging,Inspecting and Debugging Native Executables>>"
msgstr "<<inspecting-and-debugging,ネイティブ実行可能ファイルの検査とデバッグ>>"

#: _versions/3.27/guides/native-reference.adoc
msgid "<<native-faq,Frequently Asked Questions>>"
msgstr "<<native-faq,よくある質問>>"

#: _versions/3.27/guides/native-reference.adoc
msgid "Native Memory Management"
msgstr "ネイティブメモリ管理"

#: _versions/3.27/guides/native-reference.adoc
msgid "Memory management for Quarkus native executables is enabled by GraalVM’s SubstrateVM runtime system."
msgstr "Quarkus ネイティブ実行可能ファイルのメモリー管理は、GraalVM の SubstrateVM ランタイムシステムによって有効になります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "For detailed explanations about the memory management component in GraalVM, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/MemoryManagement[GraalVM Memory Management] guide."
msgstr "GraalVM のメモリー管理コンポーネントの詳細な説明については、link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/MemoryManagement[GraalVM メモリー管理] ガイドを参照してください。"

#: _versions/3.27/guides/native-reference.adoc
msgid "This guide complements the information available in the GraalVM website with further observations particularly relevant to Quarkus applications."
msgstr "このガイドは、GraalVM Web サイトで入手可能な情報を補足し、特に Quarkus アプリケーションに関連する詳細な考察を加えています。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Garbage Collectors"
msgstr "ガベージコレクター"

#: _versions/3.27/guides/native-reference.adoc
msgid "The garbage collectors available for Quarkus users are currently Serial GC and Epsilon GC."
msgstr "Quarkusのユーザーが利用できるガベージコレクタは、現在、Serial GCとEpsilon GCです。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Serial GC"
msgstr "シリアルGC"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Serial GC, the default option in GraalVM and Quarkus, is a single-threaded non-concurrent GC, just like HotSpot’s Serial GC.\n"
"The implementation in GraalVM however is different from the HotSpot one,\n"
"and there can be significant differences in the runtime behavior."
msgstr "GraalVMとQuarkusのデフォルトオプションであるシリアルGCは、HotSpotのシリアルGCと同様にシングルスレッドで非同期のGCです。しかし、GraalVMの実装はHotSpotのものと異なっており、実行時の動作に大きな違いがある場合があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"One of the key differences between HotSpot’s Serial GC and GraalVM’s Serial GC is the way they perform full GC cycles.\n"
"In HotSpot the algorithm used is mark-sweep-compact whereas in GraalVM it is mark-copy.\n"
"Both need to traverse all live objects,\n"
"but in mark-copy this traversal is also used to copy live objects to a secondary space or semi-space.\n"
"As objects are copied from one semi-space to another they’re also compacted.\n"
"In mark-sweep-compact, the compacting requires a second pass on the live objects.\n"
"This makes full GCs in mark-copy more time efficient (in terms of time spent in each GC cycle) than mark-sweep-compact.\n"
"The tradeoff mark-copy makes in order to make individual full GC cycles shorter is space.\n"
"The use of semi-spaces means that for an application to maintain the same GC performance that mark-sweep achieves (in terms of allocated MB per second),\n"
"it requires double the amount of memory."
msgstr "HotSpotのシリアルGCとGraalVMのシリアルGCの主な違いの1つは、完全なGCサイクルを実行する方法です。HotSpotで使用されるアルゴリズムはmark-sweep-compactであるのに対し、GraalVMではmark-copyです。どちらもすべてのライブオブジェクトをトラバースする必要がありますが、マークコピーでは、このトラバーサルは、セカンダリ空間または半空間にライブオブジェクトをコピーするためにも使用されます。オブジェクトが半空間から別の半空間へコピーされる際に、オブジェクトもコンパクトになります。mark-sweep-compactでは、コンパクト化にはライブ・オブジェクトに対する2回目のパスが必要です。このため、mark-copyのフルGCは、mark-sweep-compactよりも時間効率（各GCサイクルに費やされる時間という意味で）が高くなっています。個々のフルGCサイクルを短くするために、mark-copyが行うトレードオフはスペースです。semi-spaces の使用は、アプリケーションがmark-sweepが達成するのと同じGCパフォーマンス（1秒あたりの割り当てMB数）を維持するために、2倍のメモリ量を必要とすることを意味します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "GC Collection Policy"
msgstr "GCコレクションポリシー"

#: _versions/3.27/guides/native-reference.adoc
msgid "GraalVM's Serial GC implementation offers a choice between two different collection policies, the default is called \"adaptive\" and the alternative is called \"space/time\"."
msgstr "GraalVMのシリアルGC実装は、2つの異なる収集ポリシー間の選択を提供します。デフォルトは \"adaptive\" と呼ばれ、代替は \"space/time\"と呼ばれます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The “adaptive” collection policy is based on HotSpot's ParallelGC adaptive size policy.\n"
"The main difference with HotSpot is GraalVM's focus on memory footprint.\n"
"This means that GraalVM’s adaptive GC policy tries to aggressively trigger GCs in order to keep memory consumption down."
msgstr "“adaptive” コレクションポリシーは、HotSpotのParallelGC adaptiveサイズポリシーがベースになっています。HotSpotとの主な違いは、GraalVMがメモリフットプリントに重点を置いていることです。つまり、GraalVMの adaptive GCポリシーは、メモリ消費を抑えるために積極的にGCをトリガーしようとします。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Up to version 2.13, Quarkus used the “space/time” GC collection policy by default,\n"
"but starting with version 2.14, it switched to using the “adaptive” policy instead.\n"
"The reason why Quarkus initially chose to use \"space/time\" is because at that time it had considerable performance improvements over \"adaptive\".\n"
"Recent performance experiments, however, indicate that the \"space/time\" policy can result in worse out-of-the-box experience compared to the \"adaptive\" policy,\n"
"while at the same time the benefits it used to offer have diminished considerably after improvements made to the \"adaptive\" policy.\n"
"As a result, the \"adaptive\" policy appears to be the best option for most, if not all, Quarkus applications.\n"
"Full details on this switch can be read in link:https://github.com/quarkusio/quarkus/issues/28267[this issue]."
msgstr "バージョン2.13までのQuarkusでは、デフォルトで “space/time” GCコレクションポリシーが使用されていました。しかし、バージョン2.14から、代わりに “adaptive” ポリシーを使用するように変更されました。Quarkusが当初 “space/time” を選択した理由は、当時は“adaptive” よりもパフォーマンスがかなり向上していたためです。しかし、最近の性能実験によると、 “space/time” ポリシーは “adaptive”ポリシーに比べて、すぐに使える体験が悪くなると同時に、 “adaptive”ポリシーに改良が加えられた後は、かつて提供していた利点がかなり減少していることがわかりました。その結果、 “adaptive”ポリシーは、すべてとは言わないまでも、ほとんどのQuarkusアプリケーションにとって最適な選択肢であるように思われます。この切り替えの詳細については、 link:https://github.com/quarkusio/quarkus/issues/28267[このissue] をご覧ください。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"It is still possible to change the GC collection policy using GraalVM’s `-H:InitialCollectionPolicy` flag.\n"
"Switching to the \"space/time\" policy can be done by passing the following via command line:"
msgstr "GraalVMの `-H:InitialCollectionPolicy` フラグを使用して、GCコレクションポリシーを変更することはまだ可能です。\"space/time\"ポリシーへの切り替えは、コマンドライン経由で以下を渡すことで行うことができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Or adding this to the `application.properties` file:"
msgstr "または、 `application.properties` ファイルにこれを追加します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Escaping the `$` character is required to configure the \"space/time\" GC collection policy if passing via command line in Bash.\n"
"Other command line environments might have similar requirements."
msgstr "Bash でコマンドラインから渡す場合、\"space/time\" GC collection ポリシーを設定するために `$` 文字をエスケープすることが必要です。他のコマンドライン環境では、同様の要件があるかもしれません。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Epsilon GC"
msgstr "Epsilon GC"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Epsilon GC is a no-op garbage collector which does not do any memory reclamation.\n"
"From a Quarkus perspective, some of the most relevant use cases for this garbage collector are extremely short-lived jobs, e.g. serverless functions.\n"
"To build Quarkus native with epsilon GC, pass the following argument at build time:"
msgstr "Epsilon GCは、メモリの再利用を行わないノーオペ・ガベージコレクタです。Quarkusの観点からは、このガベージコレクタに最も関連するユースケースは、サーバーレス機能などの極めて短命のジョブです。epsilon GCを使用してQuarkusネイティブをビルドするには、ビルド時に次の引数を渡します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Memory Management Options"
msgstr "メモリ管理オプション"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"For information about options to control maximum heap size, young space, and other typical use cases found in the JVM, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/MemoryManagement[GraalVM Memory Management] guide.\n"
"Setting the maximum heap size, either as a percentage or an explicit value, is generally recommended."
msgstr ""
"最大ヒープサイズ、ヤングスペース、およびJVMで見られる他の典型的なユースケースを制御するためのオプションは、link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/MemoryManagement[GraalVMメモリ管理ガイド] を参照してください。\n"
"一般的には、最大ヒープサイズをパーセンテージまたは明示的な値として設定することを推奨します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "GC Logging"
msgstr "GCロギング"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Multiple options exist to print information about garbage collection cycles, depending on the level of detail required.\n"
"The minimum detail is provided `-XX:+PrintGC`, which prints a message for each GC cycle that occurs:"
msgstr "ガベージコレクションサイクルに関する情報を表示するための複数のオプションが必要な詳細度に応じて存在します。最小限の詳細は、 `-XX:+PrintGC` で提供され、発生した各GCサイクルのメッセージを表示します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"When you combine this option with `-XX:+VerboseGC` you still get a message per GC cycle,\n"
"but it contains extra information.\n"
"Also, adding this option shows the sizing decisions made by the GC algorithm at startup:"
msgstr "このオプションを `-XX:+VerboseGC` と組み合わせると、GC サイクルごとにメッセージが表示されますが、これには追加の情報が含まれています。また、このオプションを追加すると、GCアルゴリズムが起動時に行ったサイジングの決定が表示されます："

#: _versions/3.27/guides/native-reference.adoc
msgid "Beyond these two options, `-XX:+PrintHeapShape` and `-XX:+TraceHeapChunks` provide even lower level details about memory chunks on top of which the different memory regions are constructed."
msgstr "この2つのオプションの他に、 `-XX:+PrintHeapShape` と `-XX:+TraceHeapChunks` は、異なるメモリ領域を構築するためのメモリチャンクに関するさらに低いレベルの詳細を提供します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "The most up-to-date information on GC logging flags can be obtained by printing the list of flags that can be passed to native executables:"
msgstr "GCロギングフラグについての最新情報は、ネイティブ実行可能ファイルに渡すことができるフラグのリストを表示することで得ることができます:"

#: _versions/3.27/guides/native-reference.adoc
msgid "Resident Set Size (RSS)"
msgstr "Resident Set Size (RSS)"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"As described in the\n"
"xref:performance-measure.adoc[Measuring Performance guide],\n"
"the footprint of Quarkus applications is measured using the resident set size (RSS).\n"
"This is also applicable to native applications,\n"
"but the runtime engine that manages the footprint in this case is built in the native executable itself rather than the JVM."
msgstr "xref:performance-measure.adoc[パフォーマンスの測定ガイド] で説明したように、Quarkusアプリケーションのフットプリントは、resident set size（RSS）を使用して測定されます。これはネイティブアプリケーションにも適用可能ですが、この場合のフットプリントを管理するランタイムエンジンは、JVMではなく、ネイティブ実行可能ファイル自体に組み込まれています。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The reporting techniques specified in the\n"
"xref:performance-measure.adoc[Measuring Performance guide]\n"
"are applicable to native applications too,\n"
"but what causes the RSS to be higher or lower is specific to how the generated native executables work."
msgstr "xref:performance-measure.adoc[パフォーマンスの測定ガイド] で指定されているレポート手法は、ネイティブアプリケーションにも適用可能ですが、RSSが高くなったり低くなったりする原因は、生成されたネイティブ実行可能ファイルがどのように動作するかに特有のものです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"When the RSS is higher in one native version of the application versus another,\n"
"the following checks should be carried out first:"
msgstr "ネイティブバージョンで、あるアプリケーションが別のアプリケーションと比較しRSSが高くなる場合、まず以下のチェックを行う必要があります:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Check the <<native-reports,native build time reports>>\n"
"and see if there are big discrepancies in the number of used packages, used classes or used methods.\n"
"A bigger universe will result in bigger memory footprint."
msgstr ""
"<<native-reports,native build time reports>> \n"
"を確認し、使用パッケージ数、使用クラス数、使用メソッド数に大きな相違がないかを確認します。\n"
"範囲が広いと、メモリーフットプリントが大きくなります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Check the size of the binary for differences.\n"
"Using `readelf` you can observe the size of different sections and compare them.\n"
"The `.text` section where code lives,\n"
"and the `.svm_heap` section where heap produced at build time lives,\n"
"are particularly interesting."
msgstr "バイナリーのサイズに違いがないか確認する。 `readelf` を使って、異なるセクションのサイズを観察し、比較することができます。特に、コードが存在する `.text` セクションと、ビルド時に生成されるヒープが存在する `.svm_heap` セクションは興味深いです。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Generate <<heap-dumps,heap dumps>> and inspect them with tools such as VisualVM or Eclipse MAT."
msgstr "<<heap-dumps,heap dumps>> を生成し、VisualVMやEclipse MATなどのツールで検査する。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Often profiling, instrumenting or tracing applications is the best way to figure out how things work.\n"
"In the case of RSS and native applications,\n"
"the techniques that Brendan Gregg explains in the\n"
"https://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html[\"Memory Leak (and Growth) Flame Graphs\"] guide are particularly useful.\n"
"This section will apply the information in that article to show how to use `perf` and\n"
"https://github.com/iovisor/bcc[bcc/eBPF]\n"
"to understand what causes Quarkus native executables to consume memory on startup."
msgstr "アプリケーションのプロファイリング、インストルメンテーション、トレースは、しばしば、物事がどのように動作するかを把握するための最良の方法となります。RSSやネイティブアプリケーションの場合、Brendan Greggが link:https://www.brendangregg.com/FlameGraphs/memoryflamegraphs.html[メモリリーク（と成長）フレームグラフ] ガイドで説明しているテクニックが特に有効です。このセクションでは、その記事の情報を応用して、 `perf` 、 link:https://github.com/iovisor/bcc[bcc/eBPF] を使用して、Quarkusのネイティブ実行可能ファイルが起動時にメモリを消費する原因を理解する方法を紹介します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Perf"
msgstr "Perf"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"`perf` works in older Linux systems, whereas eBPF requires a newer Linux kernel.\n"
"The overhead of `perf` is higher than eBPF,\n"
"but it can understand stack traces generated with DWARF debug symbols, which eBPF can't."
msgstr "eBPFは新しいLinuxカーネルを必要とするのに対し、 `perf` は古いLinuxシステムで動作します。 `perf` のオーバーヘッドは eBPF よりも大きいですが、eBPF では扱えない DWARF デバッグシンボルで生成されたスタックトレースを扱えます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"In the context of GraalVM,\n"
"DWARF stack traces contain more detail and are easier to understand than those generated with frame pointers.\n"
"As first step, build a Quarkus native executable with debug info enabled and a couple of extra flags.\n"
"One flag to disable optimizations,\n"
"and another to avoid inlined methods being omitted from the stack traces.\n"
"These two flags have been added to obtain stack traces that contain as much information as possible."
msgstr "GraalVMのコンテキストでは、DWARFスタックトレースは、フレームポインタで生成されたものよりも詳細な情報を含み、理解しやすくなっています。最初のステップとして、デバッグ情報を有効にし、いくつかのフラグを追加したQuarkusネイティブ実行可能ファイルをビルドします。1つは最適化を無効にするフラグ、もう1つはインライン化されたメソッドがスタックトレースから省かれるのを避けるためのフラグです。この2つのフラグは、できるだけ多くの情報を含むスタックトレースを取得するために追加されています。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Disabling optimizations makes it easier to learn how to use `perf`\n"
"and get as detailed stack traces as possible,\n"
"because it shows more info about what gets called where.\n"
"However, doing so might lead to more allocations happening which would not happen if optimizations would have been applied.\n"
"In other words, passing in `-O0` will change the allocation pattens for many applications,\n"
"because it disables optimizations such as escape analysis or dead code elimination.\n"
"To properly assess the allocations made by an application deployed in production,\n"
"run with default optimizations (`-O2`).\n"
"With default optimizations the stack traces obtained with `perf` maybe be harder to decipher."
msgstr "最適化を無効にすると、 `perf` の使い方を学びやすくなり、スタックトレースをできるだけ詳細に取得することができます。これは、何がどこで呼び出されるのかについてより多くの情報を示すためです。しかし、そうすることで、最適化が適用されていれば起こらないような、より多くのアロケーションが発生する可能性があります。言い換えれば、 `-O0` を渡すと、エスケープ分析やデッドコード除去などの最適化が無効になるため、多くのアプリケーションでアロケーションパターンが変化します。本番環境に導入されたアプリケーションのアロケーションを適切に評価するには、デフォルトの最適化( `-O2` )で実行します。デフォルトの最適化では、 `perf` で得られたスタックトレースを解読するのは難しいかもしれません。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Let's measure how much RSS a Quarkus native executable takes on startup on this particular environment:"
msgstr "この特定の環境で、Quarkusのネイティブ実行可能ファイルが起動時にどれだけのRSSを消費するかを測定してみましょう:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"How come this Quarkus native executable consumes ~35MB RSS on startup?\n"
"To get an understanding of this number, this section will use `perf` to trace calls to `syscalls:sys_enter_mmap`.\n"
"Assuming the default link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/MemoryManagement/#serial-garbage-collector[GraalVM Serial Garbage Collector] is in use, this system call is particularly interesting for native executables generated by GraalVM's `native-image` because of how it allocates heap.\n"
"In native executables generated by GraalVM's `native-image`, the heap is allocated using either aligned or unaligned heap chunks.\n"
"All non-array objects get allocated in thread local aligned chunks.\n"
"Each of these are 1MB in size by default.\n"
"For arrays, if they are bigger than 1/8 of the aligned chunk size,\n"
"they will be allocated in unaligned heap chunks which have a size dependant on the object itself.\n"
"The very first time a thread allocates an object or small array,\n"
"it will request an aligned heap chunk that it will use exclusively until it has run out of space in that chunk,\n"
"in which case it will request another aligned heap chunk.\n"
"So by tracing these system calls,\n"
"the code paths that end up requesting new aligned or unaligned heap chunks will be recorded.\n"
"Next, run the Quarkus native executable through `perf record` tracing the `mmap` system call:"
msgstr ""
"この Quarkus ネイティブ実行可能ファイルは、起動時に約 35 MB の RSS を消費するのはなぜでしょうか?\n"
"この数値を理解するために、このセクションでは `perf` を使用して `syscalls:sys_enter_mmap` への呼び出しをトレースします。\n"
"デフォルトの link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/MemoryManagement/#serial-garbage-collector[GraalVM シリアルガベージコレクター] が使用されている場合、\n"
"このシステムコールは、GraalVM の `native-image` によって生成されたネイティブ実行可能ファイルにとって特に重要です。これは、ヒープの割り当て方法に関係しています。\n"
"GraalVM の `native-image` によって生成されたネイティブ実行可能ファイルでは、ヒープはアラインメントされたヒープチャンクまたはアラインメントされていないヒープチャンクのいずれかを使用して割り当てられます。\n"
"すべての非配列オブジェクトは、スレッドローカルに揃えられたチャンクに割り当てられます。\n"
"これらはそれぞれデフォルトで 1MB のサイズです。\n"
"配列の場合、整列されたチャンクサイズの 1/8 より大きい場合、\n"
"これらは、整列されていないヒープチャンクに割り当てられ、オブジェクト自体のサイズに依存します。\n"
"スレッドが初めてオブジェクトや小さな配列を割り当てると、専用のヒープ領域 (チャンク) を確保し、その中の空きスペースがなくなるまでそのスレッドだけが使う仕組みになっています。\n"
"その場合、別の整列ヒープチャンクを要求します。\n"
"これらのシステムコールをトレースすることで、\n"
"最終的に新しい整列されたヒープチャンクまたは整列されていないヒープチャンクを要求するコードパスが記録されます。\n"
"次に、 `mmap` システムコールをトレースする `perf record` を通じて、Quarkus ネイティブ実行可能ファイルを実行します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The size of the aligned heap chunks can be changed during native build time.\n"
"A custom value (in number of bytes) can be passed via the `-H:AlignedHeapChunkSize` flag.\n"
"One caveat is that this value needs to be multiple of 4096 (4KB)."
msgstr "整列ヒープチャンクのサイズは、ネイティブビルド時に変更することができます。カスタム値（バイト数）は、 `-H:AlignedHeapChunkSize` フラグで渡すことができます。注意点として、この値は4096（4KB）の倍数である必要があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Once the startup completes, stop the process and generate the stacks:"
msgstr "起動が完了したら、プロセスを停止し、スタックを生成します:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"As a final step, generate a\n"
"https://github.com/brendangregg/FlameGraph[flamegraph]\n"
"with the generated stacks:"
msgstr "最後に、生成されたスタックを用いて link:https://github.com/brendangregg/FlameGraph[フレームグラフ] を生成します:"

#: _versions/3.27/guides/native-reference.adoc
msgid "The flamegraph should look similar to this:"
msgstr "flamegraphはこのような形になるはずです:"

#: _versions/3.27/guides/native-reference.adoc
msgid "There are several things of interest to notice there:"
msgstr "そこには、いくつかの気になる点があります:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"First, the stack traces that contain method calls to `com.oracle.svm.core.genscavenge.ThreadLocalAllocation` are related to aligned or unaligned heap chunk allocations explained above.\n"
"As noted earlier,\n"
"for the majority of allocations these chunks will be 1MB by default,\n"
"so they're interesting because each allocated chunk has a considerable effect on the RSS consumption."
msgstr "まず、 `com.oracle.svm.core.genscavenge.ThreadLocalAllocation` のメソッドコールを含むスタックトレースは、上で説明した整列または非整列ヒープチャンク割り当てに関連しています。前述のように、大半の割り当てでは、これらのチャンクはデフォルトで1MBになるので、割り当てられた各チャンクがRSS消費量にかなりの影響を与えるため、興味深いものです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Second, of the thread allocation stacks,\n"
"the ones under `start_thread` are particularly revealing.\n"
"In this environment, taking into account the `-Xmx` value passed in,\n"
"Quarkus creates 12 event loop threads.\n"
"Aside from those, there are 6 extra threads.\n"
"The names of all those 18 threads exceed 16 characters.\n"
"This can be observed via the `ps` command:"
msgstr "次に、スレッド割り当てスタックのうち、 `start_thread` の下にあるものが特に明らかになっています。この環境では、渡された `-Xmx` の値を考慮すると、Quarkusは12個のイベントループスレッドを作成します。それとは別に、6つの余分なスレッドがあります。これら18個のスレッドの名前は、すべて16文字を超えます。これは、 `ps` コマンドで確認することができます:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The very first allocation that all these threads do is taking the thread name and trimming it so that it can fall within the character limit enforced by kernels.\n"
"For each of those allocations,\n"
"there are 2 `mmap` calls,\n"
"one to reserve the memory and the other to commit it.\n"
"When recording `syscalls:sys_enter_mmap` system call,\n"
"the `perf` implementation tracks calls to `__GI___mmap64`.\n"
"But this glibc `__GI___mmap64` implementation makes another call into `__GI___mmap64`:"
msgstr "これらのスレッドが行う最初の割り当ては、スレッド名を取得し、カーネルが強制する文字数制限内に収まるようにトリミングすることです。これらの割り当てのそれぞれについて、2つの `mmap` 呼び出しがあります。1つはメモリを予約するため、もう1つはそれをコミットするためです。 `syscalls:sys_enter_mmap` システムコールを記録する場合、 `perf` の実装は、以下の呼び出しを追跡します。 `_GI_ _mmap64` .しかし、このglibc `_GI_ _mmap64` の実装では、別の呼び出しが行われます。 `_GI_ _mmap64` :"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Setting `set scheduler-locking step` when the Quarkus native executable is running through `gdb` makes it easier to debug multi-threaded applications.\n"
"It optimizes for single-stepping by stopping other threads from \"seizing the prompt\" by preempting the current thread is being stepped through."
msgstr "Quarkusのネイティブ実行可能ファイルが `gdb` を介して実行されているときに `set scheduler-locking step` を設定すると、マルチスレッドアプリケーションのデバッグが容易になります。これは、現在のスレッドがステップスルーされるのを先取りして、他のスレッドが「プロンプトをつかむ」のを阻止することにより、シングルステッピングを最適化します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This is how the above flamegraph shows a total of 72 calls to `__GI___mmap64` for the thread name abbreviation stack trace,\n"
"given that Quarkus native executable runs 18 threads."
msgstr "このように、上記のフレームグラフでは、合計72回もの呼び出しを `_GI_ _mmap64` Quarkusのネイティブ実行可能ファイルが18スレッドで実行されていることを考えると、スレッド名の省略形スタックトレースで使用されます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"A third, and final observation,\n"
"is that if you capture the `syscalls:sys_enter_munmmap` event,\n"
"you might observe that some allocations also result in calls to `munmap`.\n"
"When calculating the size to reserve,\n"
"the requested size to allocate can be rounded up to the page size.\n"
"The maintain alignment,\n"
"1MB in case of aligned chunks or 1 byte for unaligned chunks,\n"
"some of the reserved memory might be unreserved.\n"
"That is where these `munmap` calls would come from."
msgstr ""
"3 番目で最後に、\n"
"`syscalls:sys_enter_munmmap`イベントをキャプチャーすると、\n"
"割り当てによって `munmap` の呼び出しも発生することが確認できます。\n"
"確保するサイズを計算する場合、\n"
"割り当てる要求されたサイズはページサイズに切り上げることができます。\n"
"維持アライメント、\n"
"整列チャンクの場合は 1MB、整列していないチャンクの場合は 1 バイトで、\n"
"予約されたメモリーの一部が予約されていない可能性があります。\n"
"そこからこれらの `munmap` 呼び出しが行われます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Just by looking at the flamegraph and counting the number of `mmap` calls that originate in thread local allocations,\n"
"an approximate estimation can be made on the RSS a Quarkus native executable uses on startup.\n"
"This estimation can't be fully precise because for unaligned heap chunks, the stack trace doesn't record the size of the chunk.\n"
"Also, if the additional build args are removed,\n"
"inlining optimizations might obscure the type of array allocation chunk requested,\n"
"so it might not be possible to decipher if the allocation is for an aligned or unaligned chunk."
msgstr "フレームグラフを見て、スレッドのローカル割り当てを起点とする `mmap` 呼び出しの数を数えるだけで、Quarkusネイティブ実行可能ファイルが起動時に使用するRSSをおおよそ推定することができます。この推定は、完全に正確なものではありません。なぜなら、非整列ヒープチャンクの場合、スタックトレースにチャンクのサイズが記録されないからです。また、追加のビルド引数が削除された場合、インライン最適化によって要求された配列割り当てチャンクのタイプが不明瞭になり、割り当てが整列チャンクか非整列チャンクかを判断できない可能性があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "bcc/eBPF"
msgstr "bcc/eBPF"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"A version of\n"
"https://github.com/iovisor/bcc[bcc]/\n"
"https://ebpf.io/[eBPF]\n"
"that can do stack traces is only available from Linux kernel 4.8 onwards.\n"
"It can do in-kernel summaries,\n"
"which makes it more efficient and has lower overhead.\n"
"Unfortunately it doesn't understand DWARF debug symbols,\n"
"so the information obtained might be harder to read and contain less detail."
msgstr "スタックトレースができるバージョンの link:https://github.com/iovisor/bcc[bcc/] link:https://ebpf.io/[eBPF] は、Linuxカーネル4.8以降でのみ利用可能です。カーネル内サマリーを行うことができるため、より効率的でオーバーヘッドが少なくなっています。しかし、DWARFデバッグシンボルを理解できないため、得られる情報は読みづらく、詳細な情報が含まれていない可能性があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"bcc/eBPF is very extensible so it's easier to tailor make scripts to track specific metrics.\n"
"The `bcc` project contains a `stackcount` program that can be used to count stack traces in similar way to what `perf` did in the previous section.\n"
"But in some cases, it might be more useful to have other metrics other than number of calls to a system call.\n"
"`malloc` is one such example.\n"
"The number of `malloc` calls is not so important,\n"
"but rather the size of the allocations.\n"
"So rather than having a flamegraph showing sample counts,\n"
"a flamegraph can be generated that shows bytes allocated."
msgstr "bcc/eBPFは非常に拡張性が優れているため、特定のメトリクスを追跡するスクリプトを作るのが簡単です。 `bcc` プロジェクトには `stackcount` プログラムがあり、前のセクションで `perf` が行ったのと同様の方法でスタックトレースをカウントするために使用することができます。しかし、場合によっては、システムコールの呼び出し回数以外のメトリクスがあった方が便利なこともあります。 `malloc` はそのような例の1つです。 `malloc` の呼び出し回数はそれほど重要ではなく、むしろアロケーションの大きさが重要です。そのため、サンプル数を示すフレームグラフではなく、割り当てられたバイトを示すフレームグラフを生成することができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Aside from `mmap`,\n"
"`malloc` system calls are also present in native executables generated by GraalVM.\n"
"Let's put bcc/eBPF in action to generate a flamegraph of bytes allocated using `malloc`."
msgstr "`mmap` 以外に、 `malloc` システムコールも GraalVM が生成するネイティブ実行可能ファイルに存在します。bcc/eBPF を使って、 `malloc` を使って割り当てられたバイトのフレームグラフを生成してみましょう。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"To do this,\n"
"first re-generate a Quarkus native executable removing debug info,\n"
"which bcc/eBPF does not understand,\n"
"and instead use frame pointer with local symbols to get the stack traces:"
msgstr "そのためには、まずQuarkusのネイティブ実行可能ファイルを生成し直し、bcc/eBPFが理解できないデバッグ情報を削除し、代わりにローカルシンボルを含むフレームポインタを使用してスタックトレースを取得します:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The link:mallocstacks.py[mallocstacks.py]\n"
"bcc/eBPF script will be used to capture the `malloc` stacktraces with their allocated size.\n"
"This script, and other typical bcc/eBPF scripts (e.g. `stackcount`), need to be given a process ID (PID).\n"
"This makes a bit tricky when you want to trace startup,\n"
"but you can use `gdb`\n"
"(even if you haven't enabled debug info)\n"
"to get around this obstacle because it allows you to stop the application at the first instruction.\n"
"Let's start by running the native executable via `gdb`:"
msgstr "mallocstacks.py bcc/eBPF スクリプトは、 `malloc` スタックトレースをその割り当てられたサイズとともにキャプチャするために使用されます。このスクリプトや他の典型的な bcc/eBPF スクリプト (例えば `stackcount` ) には、プロセス ID (PID) を与える必要があります。このため、起動をトレースしたい場合は少し厄介ですが、 `gdb` (デバッグ情報を有効にしていなくても) を使用すると、最初の命令でアプリケーションを停止できるため、この問題を回避することが可能です。まず、 `gdb` を使ってネイティブ実行可能ファイルを実行してみましょう:"

#: _versions/3.27/guides/native-reference.adoc
msgid "`starti` is a `gdb` command that sets a temporary breakpoint at the very first instruction of the program's execution."
msgstr "`starti` は、プログラム実行の一番最初の命令に一時的なブレークポイントを設定する `gdb` のコマンドです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Next invoke the bcc/eBPF script giving it the PID of the Quarkus process,\n"
"so that it can track the `malloc` calls,\n"
"capture stack traces and dump them to a file for post-processing:"
msgstr ""
"次に、Quarkus プロセスの PID を指定して bcc/eBPF スクリプトを呼び出します。\n"
"`malloc` 呼び出しを追跡できるようにするため、\n"
"スタックトレースをキャプチャーし、後処理のためにファイルにダンプします。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Then go back to the `gdb` shell and instruct it to continue the startup procedure after hitting the first instruction:"
msgstr "次に、 `gdb` シェルに戻り、最初の命令を実行した後、起動手順を続行するように指示します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Once the startup has complete,\n"
"press `Ctrl-C` on the `stackcount` shell."
msgstr "起動が完了したら、 `stackcount` シェルで `Ctrl-C` を押してください。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Then process the stacks file as a flamegraph.\n"
"Note that the stacks generated by this script are already collapsed,\n"
"so the flamegraph can be generated just like this:"
msgstr ""
"次に、スタックファイルをフレームグラフとして処理します。\n"
"このスクリプトによって生成されたスタックはすでに折りたたまれていることに注意してください。\n"
"したがって、フレームグラフは次のように生成できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "The flamegraph produced should look something like this:"
msgstr "生成されたflamegraphは、次のようなものです:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This shows that most of the memory requested using `malloc` comes from epoll in Java NIO,\n"
"but the overall amount allocated via `malloc` is barely 268KB.\n"
"This amount of 274,269 bytes can be observed by hovering on top of `all` at the bottom of flamegraph\n"
"(you might need to ask the browser to open the flamegraph in a different tab or window to observe this).\n"
"This is very small compared with the amount allocated for the heap with `mmap`."
msgstr ""
"これは、 `malloc` を使用して要求されたメモリーの大部分が Java NIO の epoll から取得していることを示しています。\n"
"しかし、 `malloc` によって割り当てられる量は全体でわずか 268 KB です。\n"
"この 274,269 バイトの量は、フレームグラフの下部にある `all` の上にマウスを置くことで確認できます。\n"
"(確認するには、ブラウザーに別のタブまたはウィンドウでフレームグラフを開くように要求する必要がある場合があります)。\n"
"これは、 `mmap` でヒープに割り当てられた量と比較すると非常に小さいです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Finally, just a brief mention about other bcc/eBPF commands,\n"
"and how to transform them into flamegraphs."
msgstr "最後に、他のbcc/eBPFコマンドと、それらをflamegraphに変換する方法について簡単に触れておきます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Stacks produced by `stackcount` need to be collapsed before they can be transformed into flamegraphs.\n"
"For example:"
msgstr "`stackcount` で生成されたスタックは、flamegraph に変換する前に折りたたむ必要があります。例えば、以下のような感じです:"

#: _versions/3.27/guides/native-reference.adoc
msgid "Native Image Tracing Agent Integration"
msgstr "ネイティブイメージトレースエージェントのインテグレーション"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Quarkus users that want to integrate new libraries/components into native image process\n"
"(e.g. link:https://github.com/hierynomus/smbj[smbj]),\n"
"or want to use JDK APIs that require extensive native image configuration to work (e.g. graphical user interfaces),\n"
"face a considerable challenge coming up with the native image configuration to make their use cases work.\n"
"These users can tweak their applications to run in JVM mode with the native image agent in order to\n"
"auto-generate native image configuration that will help them get a head start getting applications to work as native executables."
msgstr ""
"新しいライブラリー/コンポーネントをネイティブイメージ処理に統合する Quarkus ユーザー\n"
"(例: リンク:https://github.com/hierynomus/smbj[smbj])、\n"
"または、広範なネイティブイメージ設定を機能させるために必要な JDK API (グラフィカルユーザーインターフェイスなど) を使用する場合、\n"
"ユースケースを機能させるネイティブイメージ設定を生み出すのはかなり困難です。\n"
"このようなユーザーは、ネイティブイメージエージェントを使用して JVM モードで実行するようにアプリケーションを調整することで、\n"
"ネイティブイメージ設定を自動生成し、アプリケーションをネイティブ実行可能ファイルとして動作させるための準備がしやすくなります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The native image tracing agent is a JVM tool interface (JVMTI) agent available within both GraalVM and Mandrel that\n"
"tracks all usages of dynamic features such as reflection, JNI, dynamic proxies, access classpath resources...etc,\n"
"during an application's regular JVM execution.\n"
"When the JVM stops, it dumps the information on the dynamic features used during the run\n"
"onto a collection of native image configuration files that can be used in subsequent native image builds."
msgstr ""
"ネイティブイメージトレーシングエージェントは、GraalVM と Mandrel の両方で利用可能な JVM ツールインターフェイス (JVMTI) エージェントであり、アプリケーションの通常の JVM 実行中に\n"
"リフレクション、JNI、動的プロキシー、クラスパスリソースへのアクセスなどの動的機能のすべての使用状況を追跡します。\n"
"JVM が停止すると、\n"
"後続のネイティブイメージビルドで使用できるネイティブイメージ設定ファイルのコレクションへの実行中に使用された動的機能に関する情報がダンプされます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Using the agent and applying the generated data can be difficult for Quarkus users.\n"
"First, the agent can be cumbersome because it requires the JVM arguments to be modified,\n"
"and the generated configuration needs to be placed in a specific location such that the subsequent native image builds picks them up.\n"
"Secondly, the native image configuration produced contains a lot of superfluous configuration that the Quarkus integration takes care of."
msgstr ""
"Quarkus ユーザーにとって、エージェントの使用や生成データの適用は難しい場合があります。\n"
"まず、エージェントは JVM 引数の変更が必要であり、生成された設定を特定の場所に配置して、後続のネイティブイメージのビルドで認識されるようにする必要があります。\n"
"次に、生成されるネイティブイメージの設定には不要な設定が多く含まれており、Quarkus の統合機能がすでに処理しているものも含まれています。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Native image tracing agent integration is included in Quarkus to make the agent easier to consume.\n"
"In this section you will learn about the integration and how to apply it to your Quarkus application."
msgstr ""
"エージェントをより簡単に使用できるように、Quarkus にはネイティブイメージトレーシングエージェントの統合が含まれています。\n"
"このセクションでは、インテグレーションと、そのインテグレーションを Quarkus アプリケーションに適用する方法について学習します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The integration is currently only available for Maven applications.\n"
"link:https://github.com/quarkusio/quarkus/issues/40361[Gradle integration] will follow up."
msgstr ""
"現在、この統合は Maven アプリケーションでのみ利用可能です。\n"
"リンク:https://github.com/quarkusio/quarkus/issues/40361[Gradle 統合] が後に続きます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Integration Testing with the Tracing Agent"
msgstr "トレースエージェントを使用した結合テスト"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Quarkus users can now run JVM mode integration tests on Quarkus Maven applications transparently with the native image tracing agent.\n"
"To do this make sure a container runtime is available,\n"
"because JVM mode integration tests will run using the JVM within the default Mandrel builder container image.\n"
"This image contains the agent libraries required to produce native image configuration,\n"
"hence avoiding the need for a local Mandrel or GraalVM installation."
msgstr ""
"Quarkus ユーザーは、ネイティブイメージトレーシングエージェントを使用して、Quarkus Maven アプリケーションで JVM モードの結合テストを透過的に実行できるようになりました。\n"
"これを行うには、コンテナーランタイムが利用可能であることを確認してください。\n"
"JVM モードの結合テストは、デフォルトの Mandrel ビルダーコンテナーイメージ内の JVM を使用して実行されるためです。\n"
"このイメージには、ネイティブイメージ設定の生成に必要なエージェントライブラリーが含まれています。\n"
"したがって、ローカルの Mandrel または GraalVM のインストールが不要になります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"It is highly recommended to align the Mandrel version used in integration testing\n"
"with the Mandrel version used to build native executables.\n"
"Doing in-container native builds with the default Mandrel builder image,\n"
"is the safest way to keep both versions aligned."
msgstr ""
"ネイティブ実行可能ファイルの構築に使用される Mandrel バージョンと、結合テストで使用する Mandrel のバージョンを合わせることを強く推奨します。\n"
"最も安全に両方のバージョンを一致させるには、デフォルトの Mandrel ビルダーイメージを使って、コンテナー内でネイティブビルドを実行する方法があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Additionally make sure that the `native-image-agent` goal is present in the `quarkus-maven-plugin` configuration:"
msgstr "さらに、 `quarkus-maven-plugin` 設定に `native-image-agent` ゴールが存在することを確認します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"With a container runtime running,\n"
"invoke Maven's `verify` goal with `-DskipITs=false -Dquarkus.test.integration-test-profile=test-with-native-agent` to run the JVM mode integration tests and\n"
"generate the native image configuration.\n"
"For example:"
msgstr ""
"コンテナーランタイムを実行すると、\n"
"Maven の `verify`ゴールを `-DskipITs=false -Dquarkus.test.integration-test- プロファイル=test-with-native-agent`で呼び出して、JVM モードの結合テストを実行し、\n"
"ネイティブイメージ設定を生成します。\n"
"たとえば:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"When the Maven invocation completes,\n"
"you can inspect the generated configuration in the `target/native-image-agent-final-config` folder:"
msgstr ""
"Maven の呼び出しが完了すると、\n"
"`target/native-image-agent-final-config` フォルダーで生成された設定を検査できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Informative By Default"
msgstr "デフォルトでは情報提供のみ"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"By default the generated native image configuration files are not used by subsequent native image building processes.\n"
"This precaution is taken to avoid situations where seemingly unrelated actions have unintended consequences on the native executable produced,\n"
"e.g. disabling randomly failing tests."
msgstr ""
"デフォルトでは、生成されたネイティブイメージ設定ファイルは、後続のネイティブイメージ構築プロセスでは使用されません。\n"
"一見関係のない操作が、生成されたネイティブ実行可能ファイルに意図しない影響を及ぼすのを防ぐために、この予防措置が取られています。\n"
"たとえば、ランダムに失敗するテストを無効にするなどです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Quarkus users are free to copy the files from the folder reported in the build,\n"
"store them under source control and evolve as needed.\n"
"Ideally these files should be stored under the `src/main/resources/META-INF/native-image/<group-id>/<artifact-id>`` folder,\n"
"in which case the native image process will automatically pick them up."
msgstr ""
"Quarkus ユーザーはビルドで報告されたフォルダーからファイルを自由にコピーできます。\n"
"ソース管理下に保存し、必要に応じて進化させます。\n"
"理想的には、これらのファイルは `src/main/resources/META-INF/native-image/<group-id>/<artifact-id>``フォルダーに配置してください。そうすると、\n"
"ネイティブイメージプロセスによって自動的に取得されます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"If managing native image agent configuration files manually,\n"
"it is highly recommended to regenerate them each time a Mandrel version update occurs,\n"
"because the configuration necessary to make the application work might have varied due to internal Mandrel changes."
msgstr ""
"ネイティブイメージエージェント設定ファイルを手動で管理する場合は、\n"
"Mandrel のバージョンが更新されるたびに再生成することを強く推奨します。\n"
"アプリケーションを動作させるために必要な設定が、Mandrel の内部変更が原因で変化した可能性があるためです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"It is possible to instruct Quarkus to optionally apply the generated native image configuration files into subsequent native image processes,\n"
"by setting the -Dquarkus.native.agent-configuration-apply` property.\n"
"This can be useful to verify that the native integration tests work as expected,\n"
"assuming that the JVM unit tests have generated the correct native image configuration.\n"
"The typical workflow here would be to first run the integration tests with the native image agent as shown in the previous section:"
msgstr ""
"Quarkus に、生成されたネイティブイメージ設定ファイルを後続のネイティブイメージプロセスにオプションで適用するように指示できます。\n"
"-Dquarkus.native.agent-configuration-apply` プロパティーを設定します。\n"
"JVM ユニットテストによって正しいネイティブイメージ設定が生成されたと想定した場合に、予想どおりにネイティブ結合テストが動作するかどうかを確認するのに役立ちます。\n"
"ここでの一般的なワークフローとして、前のセクションに示したように、まずネイティブイメージエージェントを使用して結合テストを実行します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"And then request a native build passing in the configuration apply flag.\n"
"A message during the native build process will indicate that the native image agent generated configuration files are being applied:"
msgstr ""
"次に、設定適用フラグを渡してネイティブビルドを要求します。\n"
"ネイティブビルドプロセス中に、ネイティブイメージエージェントによって生成された設定ファイルが適用されていることを示すメッセージが表示されます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Debugging the Tracing Agent Integration"
msgstr "トレースエージェントインテグレーションのデバッグ"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"If the generated native image agent configuration is not satisfactory,\n"
"more information can be obtained using any of the following techniques:"
msgstr "生成されたネイティブイメージエージェントの設定が十分でない場合、次のいずれかの手法を使用すると、さらに詳しい情報を取得できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Debugging Filters"
msgstr "デバッグフィルター"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Quarkus generates native image tracing agent configuration filters.\n"
"These filters exclude commonly used packages for which Quarkus already applies the necessary configuration."
msgstr ""
"Quarkus はネイティブイメージトレーシングエージェント設定フィルターを生成します。\n"
"これらのフィルターは、Quarkus がすでに必要な設定を適用している、よく使用されるパッケージを除外します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"If native image agent is generating a configuration that it’s not working as expected,\n"
"you should check that the configuration files include the expected information.\n"
"For example, if some method happens to be accessed via reflection at runtime and you get an error,\n"
"you want to verify that the configuration file contains a reflection entry for that method."
msgstr ""
"ネイティブイメージエージェントにより、期待通りに動作しない設定が生成されている場合、\n"
"設定ファイルに必要な情報が含まれていることを確認する必要があります。\n"
"たとえば、実行時にリフレクションを介してメソッドにアクセスし、エラーが発生した場合、\n"
"設定ファイルにそのメソッドのリフレクションエントリーが含まれていることを確認します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"If the entry is missing, it could be that some call path is being filtered that maybe shouldn’t have been.\n"
"To verify that, inspect the contents of `target/quarkus-caller-filter.json` and `target/quarkus-access-filter.json` files,\n"
"and confirm that the class and/or package making the call or being accessed is not being filtered out."
msgstr ""
"エントリーが見つからない場合、フィルタリングされるべきではない呼び出しパスがフィルタリングされてしまった可能性があります。\n"
"確認するには、 `target/quarkus-caller-filter.json` ファイルと`target/quarkus-access-filter.json` ファイルの内容を検査します。\n"
"呼び出しているクラスやパッケージ、またはアクセスされているクラスやパッケージがフィルタリングされていないことを確認します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"If the missing entry is related to some resource,\n"
"you should inspect the Quarkus build debug output and verify which resource patterns are being discarded, e.g."
msgstr ""
"欠落しているエントリーが何らかのリソースに関連している場合、\n"
"Quarkus ビルドのデバッグ出力を調べて、どのリソースパターンが破棄されているかを確認する必要があります。例:"

#: _versions/3.27/guides/native-reference.adoc
msgid "Tracing Agent Logging"
msgstr "追跡エージェントロギング"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The native image tracing agent can log the method invocations that result in the generated configuration to a JSON file.\n"
"This can help understand why a configuration entry is generated.\n"
"To enable this logging,\n"
"`-Dquarkus.test.native.agent.output.property.name=trace-output` and\n"
"`-Dquarkus.test.native.agent.output.property.value=native-image-agent-trace-file.json`\n"
"system properties need to be added.\n"
"For example:"
msgstr ""
"ネイティブイメージトレースエージェントは、生成された設定をもたらすメソッド呼び出しを JSON ファイルに記録できます。\n"
"これは、設定エントリーが生成される理由を理解するのに役立ちます。\n"
"このロギングを有効にするには、\n"
"`-Dquarkus.test.native.agent.output.property.name=trace-output` および\n"
"`-Dquarkus.test.native.agent.output.property.value=native-image-agent-trace-file.json`\n"
"システムプロパティーを追加する必要があります。\n"
"たとえば:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"When trace output is configured, no native image configuration is generated,\n"
"and instead a `target/native-image-agent-trace-file.json` file is generated that contains trace information.\n"
"For example:"
msgstr ""
"トレース出力が設定されている場合、ネイティブイメージ設定は生成されません。\n"
"代わりに、トレース情報を含む `target/native-image-agent-trace-file.json` ファイルが生成されます。\n"
"たとえば:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Unfortunately the trace output does not take into account the applied configuration filters,\n"
"so the output contains all configuration decisions made by the agent.\n"
"This is unlikely to change in the near future\n"
"(see link:https://github.com/oracle/graal/issues/7635[oracle/graal#7635])."
msgstr ""
"残念ながら、トレース出力では、適用された設定フィルターは考慮されません。\n"
"したがって、出力にはエージェントによって行われたすべての設定決定が含まれます。\n"
"期日中にこれが変わる可能性は低くなっています。\n"
"(リンクを参照:https: Oracle/graal/issues/7635[oracle/graal#7635])。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Configuration With Origins (Experimental)"
msgstr "Origins を使用した設定 (実験的)"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Alternative to the trace output,\n"
"it is possible to configure the native image agent with an experimental flag that shows the origins of the configuration entries.\n"
"You can enable that with the following additional system property:"
msgstr ""
"トレース出力の代わりとして、\n"
"設定エントリーの出どころを示す実験的なフラグを使用してネイティブイメージエージェントを設定できます。\n"
"次の追加のシステムプロパティーを使用して、このエージェントを有効にできます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The origins of the configuration entries can be found in text files inside the `target/native-image-agent-base-config` folder.\n"
"For example:"
msgstr ""
"設定エントリーの取得元は、 `target/native-image-agent-base-config` フォルダー内のテキストファイルにあります。\n"
"たとえば:"

#: _versions/3.27/guides/native-reference.adoc
msgid "Debugging With GDB"
msgstr "GDB によるデバッグ"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The native image agent itself is a native executable produced with GraalVM that uses JVMTI to intercept the calls that require native image configuration.\n"
"As a last resort, it is possible to debug the native image agent with GDB,\n"
"see link:https://github.com/oracle/graal/blob/master/substratevm/src/com.oracle.svm.agent/README.md[here]\n"
"for instructions on how to do that."
msgstr ""
"ネイティブイメージエージェント自体は、GraalVM で生成されたネイティブ実行可能ファイルであり、JVMTI を使用してネイティブイメージ設定を必要とする呼び出しをインターセプトします。\n"
"最後の手段として、GDB を使用してネイティブイメージエージェントをデバッグすることも可能です。\n"
"方法については、ink:https://github.com/oracle/graal/blob/master/substratevm/src/com.oracle.svm.agent/README.md[こちら] を参照してください。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Inspecting and Debugging Native Executables"
msgstr "ネイティブ実行可能ファイルの検査とデバッグ"

#: _versions/3.27/guides/native-reference.adoc
msgid "This debugging guide provides further details on debugging issues in Quarkus native executables that might arise during development or production."
msgstr "このデバッグガイドでは、開発中または生産中に発生する可能性のあるQuarkusネイティブ実行可能ファイルの問題のデバッグについて、さらに詳しく説明します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"It takes as input the application developed in the xref:getting-started.adoc[Getting Started Guide].\n"
"You can find instructions on how to quickly set up this application in this guide."
msgstr "xref:get-started.adoc[入門ガイド] で開発されたアプリケーションを入力として使用します。 このアプリケーションを素早くセットアップする方法は、このガイドに記載されています。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Requirements and Assumptions"
msgstr "要件と前提条件"

#: _versions/3.27/guides/native-reference.adoc
msgid "This debugging guide has the following requirements:"
msgstr "このデバッグガイドには、次の要件があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "JDK 17 installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 17+がインストールされ、 `JAVA_HOME` が適切に設定されている"

#: _versions/3.27/guides/native-reference.adoc
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#: _versions/3.27/guides/native-reference.adoc
msgid "A working container runtime (Docker, podman)"
msgstr "動作するコンテナーランタイム(Docker, podman)"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This guide builds and executes Quarkus native executables within a Linux environment.\n"
"To offer a homogeneous experience across all environments,\n"
"the guide relies on a container runtime environment to build and run the native executables.\n"
"The instructions below use Docker as example, but very similar commands should work on alternative container runtimes, e.g. podman."
msgstr "このガイドでは、Linux 環境内で Quarkus ネイティブ実行可能ファイルをビルドして実行します。すべての環境で同種のエクスペリエンスを提供するために、ガイドはコンテナーランタイム環境に依存して、ネイティブ実行可能ファイルをビルドおよび実行します。以下の手順では例として Docker を使用していますが、podman などの他のコンテナーランタイムでも、よく似たコマンドを実行できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Building native executables is an expensive process,\n"
"so make sure the container runtime has enough CPU and memory to do this.\n"
"A minimum of 4 CPUs and 4GB of memory is required."
msgstr "ネイティブ実行可能ファイルのビルドはコストのかかるプロセスであるため、コンテナーランタイムに十分な CPU とメモリーがあることを確認してください。最低でも 4 つの CPU と 4GB のメモリーが必要です。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Finally, this guide assumes the use of the link:https://github.com/graalvm/mandrel[Mandrel distribution] of GraalVM for building native executables,\n"
"and these are built within a container so there is no need for installing Mandrel on the host."
msgstr "最後に、このガイドでは、ネイティブ実行可能ファイルのビルド用に GraalVM の link:https://github.com/graalvm/mandrel[Mandrel distribution] の使用を想定しています。これらはコンテナー内にビルドされるため、ホスト上に Mandrel をインストールする必要はありません。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Bootstrapping the project"
msgstr "プロジェクトのブートストラップ"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Start by creating a new Quarkus project.\n"
"Open a terminal and run the following command:"
msgstr "新しい Quarkus プロジェクトを作成することから始めます。ターミナルを開き、以下のコマンドを実行します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "For Linux & MacOS users"
msgstr "Linux および MacOS ユーザー向け"

#: _versions/3.27/guides/native-reference.adoc
msgid "For Windows users"
msgstr "Windows ユーザー向け"

#: _versions/3.27/guides/native-reference.adoc
msgid "If using cmd , (don't use backward slash `\\` and put everything on the same line)"
msgstr "cmd を使っている場合 (バックスラッシュは使わず、全て同じ行にしてください)"

#: _versions/3.27/guides/native-reference.adoc
msgid "If using Powershell , wrap `-D` parameters in double quotes e.g. `\"-DprojectArtifactId=debugging-native\"`"
msgstr "Powershell を使用する場合は、 `-D` パラメーターを二重引用符で囲みます。例: `\"-DprojectArtifactId=debugging-native\"`"

#: _versions/3.27/guides/native-reference.adoc
msgid "Configure Quarkus properties"
msgstr "Quarkus のプロパティーを設定する"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Some Quarkus configuration options will be used constantly throughout this debugging guide,\n"
"so to help declutter command line invocations,\n"
"it's recommended to add these options to the `application.properties` file.\n"
"So, go ahead and add the following options to that file:"
msgstr "Quarkusの設定オプションの中には、このデバッグガイドの中で常に使用されるものがあります。そのため、コマンドラインからの呼び出しを減らすために、これらのオプションを `application.properties` ファイルに追加することをお勧めします。そこで、次のオプションをそのファイルに追加してください："

#: _versions/3.27/guides/native-reference.adoc
msgid "First Debugging Steps"
msgstr "最初のデバッグ手順"

#: _versions/3.27/guides/native-reference.adoc
msgid "As a first step, change to the project directory and build the native executable for the application:"
msgstr "最初のステップとして、プロジェクトディレクトリーに移動し、アプリケーションのネイティブ実行可能ファイルをビルドします。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Run the application to verify it works as expected. In one terminal:"
msgstr "アプリケーションを実行して、期待通りに動作することを確認します。一つの端末で以下を実行します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "In another:"
msgstr "別のターミナルで以下を実行します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The rest of this section explores ways to build the native executable with extra information,\n"
"but first, stop the running application.\n"
"We can obtain this information while building the native executable by adding additional native-image build options using `-Dquarkus.native.additional-build-args`, e.g."
msgstr "このセクションの残りの部分では、追加情報を使用してネイティブ実行可能ファイルをビルドする方法について説明しますが、最初に、実行中のアプリケーションを停止します。 `-Dquarkus.native.additional-build-args` を使用してネイティブイメージビルドオプションを追加することで、ネイティブ実行可能ファイルのビルド中にこの情報を取得できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Executing that will produce additional output lines like this:"
msgstr "これを実行すると、次のような追加の出力行が得られます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Note that `/project` is a folder within the container that is building the native executable.\n"
"So, this is not a folder that you will find in the host environment.\n"
"`/project` folder is mapped to `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar`,\n"
"so you will find the files under the `reports` folder in that directory."
msgstr "`/project` は、ネイティブ実行可能ファイルをビルドしているコンテナー内のフォルダーであることに注意してください。したがって、これはホスト環境にあるフォルダーではありません。 `/project` フォルダーは `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar` にマップされているため、そのディレクトリーの `reports` フォルダーの下にファイルがあります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The target info file contains information such as the target platform,\n"
"the toolchain used to compile the executable,\n"
"and the C library in use:"
msgstr "ターゲット情報ファイルには、ターゲットプラットフォーム、実行ファイルのコンパイルに使用されたツールチェーン、使用されているCライブラリなどの情報が含まれています。"

#: _versions/3.27/guides/native-reference.adoc
msgid "The native library info file contains information on the static libraries added to the binary and the other libraries dynamically linked to the executable:"
msgstr "ネイティブライブラリ情報ファイルには、バイナリに追加されるスタティックライブラリと、実行ファイルに動的にリンクされるその他のライブラリの情報が含まれています。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Even more detail can be obtained by passing in `--verbose` as an additional native-image build argument.\n"
"This option can be very useful in detecting whether the options that you pass at a high level via Quarkus are being passed down to the native executable production,\n"
"or whether some third party jar has some native-image configuration embedded in it that is reaching the native-image invocation:"
msgstr "ネイティブイメージビルドの追加引数として `--verbose` を渡すことで、さらに詳細な情報を得ることができます。このオプションは、Quarkusを介して高いレベルで渡されたオプションがネイティブ実行可能ファイルの生成に渡されているのか、あるいはサードパーティのjarにネイティブイメージの設定が埋め込まれていて、それがネイティブイメージの呼び出しに届いているのかを検出するのに非常に役立ちます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Running with `--verbose` demonstrates how the native-image building process is two sequential java processes:"
msgstr "`--verbose` で実行すると、ネイティブイメージのビルドプロセスが2つの連続したJavaプロセスであることが分かります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The first is a very short Java process that does some basic validation and builds the arguments for the second process\n"
"(in a stock GraalVM distribution, this is executed as native code)."
msgstr "1番目は非常に短いJavaプロセスで、基本的な検証を行い、2つ目のプロセスのための引数を組み立てます（GraalVMの純正ディストリビューションでは、これはネイティブコードとして実行されます）。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The second Java process is where the main part of the native executable production happens.\n"
"The `--verbose` option shows the actual Java process executed.\n"
"You could take the output and run it yourself."
msgstr "2番目のJavaプロセスでは、ネイティブ実行可能ファイル作成の主要部分が行われます。 `--verbose` オプションは、実際に実行されたJavaプロセスを表示します。出力を受けて、自分で実行することもできます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "One may also combine multiple native build options by separating with a comma, e.g.:"
msgstr "また、複数のネイティブ・ビルド・オプションをコンマで区切って組み合わせることもできます。例:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Remember that if an argument for `-Dquarkus.native.additional-build-args` includes the `,` symbol,\n"
"it needs to be escaped to be processed correctly, e.g. `\\\\,`."
msgstr "`-Dquarkus.native.additional-build-args` の引数に `,` シンボルが含まれている場合、正しく処理するためには、 `\\\\,` のようにエスケープする必要があることを覚えておいてください。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Inspecting Native Executables"
msgstr "ネイティブ実行可能ファイルの検査"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Given a native executable, various Linux tools can be used to inspect it.\n"
"To allow supporting a variety of environments,\n"
"inspections will be done from within a Linux container.\n"
"Let's create a Linux container image with all the tools required for this guide:"
msgstr "ネイティブ実行可能ファイルを指定すると、さまざまな Linux ツールを使用して実行可能ファイルを検査できます。さまざまな環境をサポートできるように、検査は Linux コンテナー内から実行されます。このガイドに必要なすべてのツールを使用して、Linux コンテナーイメージを作成しましょう。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Using docker in the non-Linux environment, you can create an image using this Dockerfile via:"
msgstr "Linux 以外の環境で docker を使用する場合は、以下を実行し、この Dockerfile を使用してイメージを作成できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Then, go to the root of the project and run the Docker container we have just created as:"
msgstr "次に、プロジェクトの root に移動し、先ほど作成した Docker コンテナーを以下のように実行します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "`ldd` shows the shared library dependencies of an executable:"
msgstr "`ldd` は、実行可能ファイルの共有ライブラリの依存関係を表示します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "`strings` can be used to look for text messages inside the binary:"
msgstr "`strings` は、バイナリ内のテキストメッセージを探すのに使用できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Using `strings` you can also get Mandrel information given the binary:"
msgstr "`strings` を使えば、指定されたバイナリのMandrel情報を得ることもできます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Finally, using `readelf` we can inspect different sections of the binary.\n"
"For example, we can see how the heap and text sections take most of the binary:"
msgstr "最後に、 `readelf` を使って、バイナリーのさまざまなセクションを調べることができます。例えば、ヒープセクションとテキストセクションがバイナリの大半を占めていることがわかります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Runtime containers produced by Quarkus to run native executables will not include the tools mentioned above.\n"
"To explore a native executable within a runtime container,\n"
"it's best to run the container itself and then `docker cp` the executable locally, e.g.:"
msgstr "ネイティブ実行可能ファイルを実行するために Quarkus によって生成されたランタイムコンテナーには、上記のツールは含まれません。ランタイムコンテナー内のネイティブ実行可能ファイルを調べるには、コンテナー自体を実行してから、実行可能ファイルをローカルで `docker cp` するのが最適です。次に例を示します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "From there, you can either inspect the executable directly or use a tools container like above."
msgstr "そこから、実行ファイルを直接検査するか、上記のようなツールコンテナーを使用することができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Native Reports"
msgstr "ネイティブレポート"

#: _versions/3.27/guides/native-reference.adoc
msgid "Optionally, the native build process can generate reports that show what goes into the binary:"
msgstr "オプションとして、ネイティブビルドプロセスでは、バイナリに何が入っているかを示すレポートを生成することができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The reports will be created under `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/reports/`.\n"
"These reports are some of the most useful resources when encountering issues with missing methods/classes, or encountering forbidden methods by Mandrel."
msgstr "レポートは、 `target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/reports/` の下に作成されます。これらのレポートは、メソッド/クラスが見つからない問題が発生した場合、または Mandrel によって禁止されたメソッドが発生した場合に、最も役立つリソースの一部になります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Call Tree Reports"
msgstr "コールツリーレポート"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"`call_tree` csv file reports are some of the default reports generated when the `-Dquarkus.native.enable-reports` option is passed in.\n"
"These csv files can be imported into a graph database, such as Neo4j,\n"
"to inspect them more easily and run queries against the call tree.\n"
"This is useful for getting an approximation on why a method/class is included in the binary."
msgstr "`call_tree` csv ファイルレポートは、 `-Dquarkus.native.enable-reports` オプションが渡されたときに生成されるデフォルトレポートの一部です。これらの csv ファイルは、Neo4j などのグラフデータベースにインポートして、より簡単に検査できます。呼び出しツリーに対してクエリーを実行します。これは、メソッド/クラスがバイナリーに含まれている理由の概算を取得するのに役立ちます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Let’s see this in action."
msgstr "実際に見てみましょう。"

#: _versions/3.27/guides/native-reference.adoc
msgid "First, start a Neo4j instance:"
msgstr "まず、Neo4jのインスタンスを起動します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Once the container is running,\n"
"you can access the link:http://localhost:7474[Neo4j browser].\n"
"Use `neo4j` as the username and the value of `NEO_PASS` as the password to log in."
msgstr "コンテナーが実行されると、 link:http://localhost:7474[Neo4j ブラウザー] にアクセスできます。ログインする際は、ユーザー名として `neo4j` を使用し、パスワードとして `NEO_PASS` の値を使用します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"To import the CSV files,\n"
"we need the following cypher script which will import the data within the CSV files and create graph database nodes and edges:"
msgstr "CSVファイルをインポートするためには、CSVファイル内のデータをインポートし、グラフデータベースのノードとエッジを作成する以下のcypherスクリプトが必要です。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Copy and paste the contents of the script into a file called `import.cypher`."
msgstr "スクリプトの内容を `import.cypher` というファイルにコピー＆ペーストします。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Mandrel 22.0.0 contains a bug where the symbolic links used by the import cypher file are not correctly set when generating reports within a container\n"
"(for more details see link:https://github.com/oracle/graal/issues/4355[here]).\n"
"This can be worked around by copying the following script into a file and executing it:"
msgstr "Mandrel 22.0.0 には、コンテナー内でレポートを生成する際に、インポートサイファーファイルで使用されるシンボリックリンクが正しく設定されないというバグが含まれています (詳細は link:https://github.com/oracle/graal/issues/4355[こちら] を参照)。これは、以下のスクリプトをファイルにコピーして実行することで回避できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Next, copy the import cypher script and CSV files into Neo4j's import folder:"
msgstr "次に、インポートサイファースクリプトとCSVファイルをNeo4jのインポートフォルダにコピーします。"

#: _versions/3.27/guides/native-reference.adoc
msgid "After copying all the files, invoke the import script:"
msgstr "すべてのファイルをコピーしたら、インポートスクリプトを起動します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Once the import completes (shouldn't take more than a couple of minutes), go to the link:http://localhost:7474[Neo4j browser],\n"
"and you'll be able to observe a small summary of the data in the graph:"
msgstr "インポートの完了 (ほんの数分で完了) 後に、link:http://localhost:7474[Neo4j ブラウザー] にアクセスすると、簡単なデータのサマリーをグラフで見ることができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The data above shows that there are ~60000 methods, and just over ~200000 edges between them.\n"
"The Quarkus application demonstrated here is very basic, so there’s not a lot we can explore, but here are some example queries you can run to explore the graph in more detail.\n"
"Typically, you’d start by looking for a given method:"
msgstr "上のデータでは、~60000のメソッドがあり、それらの間には~200000のエッジがあることがわかります。ここでデモされているQuarkusアプリケーションは非常に基本的なものなので、調べられることは多くありませんが、グラフをより詳細に調べるために実行できるクエリの例をいくつか紹介します。典型的な例としては、あるメソッドを探すことから始めます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "From there, you can narrow down to a given method on a specific type:"
msgstr "そこから、特定の型の特定のメソッドに絞ることができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Once you’ve located the node for the specific method you’re after, a typical question you’d want to get an answer for is:\n"
"why does this method get included in the call tree?\n"
"To do that, start from the method and look for incoming connections at a given depth,\n"
"starting from the end method.\n"
"For example, methods that directly call a method can be located via:"
msgstr "探している特定のメソッドのノードを見つけたら、答えを得たい典型的な質問は、「なぜこのメソッドはコールツリーに含まれるのか」です。そのためには、終点のメソッドから始まる所定の深さの到着接続を探します。たとえば、あるメソッドを直接呼び出すメソッドは、以下のようにして見つけることができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Then you can look for direct calls at depth of 2,\n"
"so you’d search for methods that call methods that call into the target method:"
msgstr "そうすれば、深さ2の直接呼び出しを探すことができます。つまり、対象のメソッドを呼び出すメソッドを呼び出すメソッドを探すことになります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"You can continue going up layers,\n"
"but unfortunately if you reach a depth with too many nodes,\n"
"the Neo4j browser will be unable to visualize them all.\n"
"When that happens, you can alternatively run the queries directly against the cypher shell:"
msgstr "階層を上がっていくことはできますが、残念ながらノードの数が多すぎる深度に到達すると、Neo4jブラウザはそれらすべてを可視化することができません。そのような場合は、代わりにcypher shellに対して直接クエリを実行することができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"For further information, check out this\n"
"link:https://quarkus.io/blog/quarkus-native-neo4j-call-tree[blog post]\n"
"that explores the Quarkus Hibernate ORM quickstart using the techniques explained above."
msgstr "詳細については、上記で説明した手法を使用して、Quarkus Hibernate ORM クイックスタートについて検討している https://quarkus.io/blog/quarkus-native-neo4j-call-tree[blog 記事] を参照してください。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Used Packages/Classes/Methods Reports"
msgstr "使用されているパッケージ/クラス/メソッドのレポート"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"`used_packages`, `used_classes` and `used_methods` text file reports come in handy when comparing different versions of the application,\n"
"e.g. why does the image take longer to build? Or why is the image bigger now?"
msgstr "`used_packages`, `used_classes`, `used_methods` テキストファイルレポートは、アプリケーションの異なるバージョンを比較する際に便利です。例えば、イメージ作成に時間がかかるのはなぜか？また、なぜイメージが大きくなったのか？"

#: _versions/3.27/guides/native-reference.adoc
msgid "Further Reports"
msgstr "更なるレポート"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Mandrel can produce further reports beyond the ones that are enabled with the `-Dquarkus.native.enable-reports` option.\n"
"These are called expert options and you can learn more about them by running:"
msgstr "Mandrelは、 `-Dquarkus.native.enable-reports` オプションで有効になっているレポート以外にも、様々なレポートを作成することができます。これらはエキスパートオプションと呼ばれ、以下を実行することで詳細を知ることができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"These expert options are not considered part of the GraalVM native image API,\n"
"so they might change anytime."
msgstr "これらのエキスパートオプションは、GraalVM ネイティブ Image API の一部とは見なされないため、いつでも変更される可能性があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "To use these expert options, add them comma separated to the `-Dquarkus.native.additional-build-args` parameter."
msgstr "これらのエキスパートオプションを使用するには、 `-Dquarkus.native.additional-build-args` パラメータにコンマで区切って追加します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Build-time vs Run-time Initialization"
msgstr "ビルド時と実行時の初期化"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Quarkus instructs Mandrel to initialize as much as possible at build time,\n"
"so that runtime startup can be as fast as possible.\n"
"This is important in containerized environments where the startup speed has a big impact on how quickly an application is ready to do work.\n"
"Build time initialization also minimizes the risk of runtime failures due to unsupported features becoming reachable through runtime initialization,\n"
"thus making Quarkus more reliable."
msgstr "QuarkusはMandrelに対し、ビルド時に可能な限り初期化するよう指示し、実行時の起動を可能な限り高速化しています。これは、起動速度がアプリケーションの動作準備の早さに大きな影響を与えるコンテナ環境では重要です。また、ビルド時の初期化は、サポートされていない機能が実行時の初期化によって到達可能になることによる実行時の失敗のリスクを最小限にし、Quarkusの信頼性を高めています。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The most common examples of build-time initialized code are static variables and blocks.\n"
"Although Mandrel executes those at run-time by default,\n"
"Quarkus instructs Mandrel to run them at build-time for the reasons given."
msgstr "ビルド時に初期化されるコードの最も一般的な例は、静的変数とブロックです。Mandrelはこれらをデフォルトでは実行時に実行しますが、Quarkusでは先程の理由でビルド時に実行するように指示しています。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This means that any static variables initialized inline, or initialized in a static block,\n"
"will keep the same value even if the application is restarted.\n"
"This is a different behaviour compared to what would happen if executed as Java."
msgstr "つまり、インラインで初期化されたスタティック変数や、スタティックブロックで初期化されたスタティック変数は、アプリケーションを再起動しても同じ値を維持します。これは、Javaとして実行した場合とは異なる動作です。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"To see this in action with a very basic example,\n"
"add a new `TimestampResource` to the application that looks like this:"
msgstr "これの実際の動作を非常に基本的な例で確認するには、以下のような新しい `TimestampResource` をアプリケーションに追加します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Rebuild the binary using:"
msgstr "次のようにバイナリを再ビルドします。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Run the application in one terminal\n"
"(make sure you stop any other native executable container runs before executing this):"
msgstr "1 つのターミナルでアプリケーションを実行します (これを実行する前に、他のネイティブ実行可能コンテナーの実行を必ず停止してください)。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Send a `GET` request multiple times from another terminal:"
msgstr "別のターミナルから `GET` リクエストを複数回送信してみましょう。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"to see how the current time has been baked into the binary.\n"
"This time was calculated when the binary was being built,\n"
"hence application restarts have no effect."
msgstr "現在の時刻がどのようにバイナリに焼き付けられているかを確認できます。この時刻は、バイナリのビルド時に計算されたものなので、アプリケーションの再起動が影響しません。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"In some situations, built time initializations can lead to errors when building native executables.\n"
"One example is when a value gets computed at build time which is forbidden to reside in the heap of the JVM that gets baked into the binary.\n"
"To see this in action, add this REST resource:"
msgstr "状況によっては、ビルド時の初期化により、ネイティブ実行可能ファイルをビルドするときにエラーが発生する可能性があります。1 つの例は、バイナリーにベイクされる JVM のヒープに存在することが禁じられている値が、ビルド時に計算される場合です。これが実際に動作することを確認するには、この REST リソースを追加してください。"

#: _versions/3.27/guides/native-reference.adoc
msgid "When trying to rebuild the application, you’ll encounter an error:"
msgstr "アプリケーションを再ビルドしようとすると、エラーが発生します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"So, what the message above is telling us is that our application caches a value that is supposed to be random as a constant.\n"
"This is not desirable because something that's supposed to be random is no longer so,\n"
"because the seed is baked in the image.\n"
"The message above makes it quite clear what is causing this,\n"
"but in other situations the cause might be more obfuscated.\n"
"As a next step, we'll add some extra flags to the native executable generation to get more information."
msgstr "したがって、上記のメッセージが示しているのは、アプリケーションが定数としてランダムであると想定される値をキャッシュしているということです。シードがイメージでベイク処理されているため、ランダムであるはずの何かがもはやランダムではないため、これは望ましくありません。上記のメッセージは、何が原因かを非常に明確に示していますが、他の状況では、原因はさらにわかりにくいかもしれません。次のステップとして、ネイティブ実行可能ファイルの生成にいくつかのフラグを追加して、より多くの情報を取得することにします。"

#: _versions/3.27/guides/native-reference.adoc
msgid "As suggested by the message, let's start by adding an option to track object instantiation:"
msgstr "メッセージにあるように、まずはオブジェクトのインスタンス化を追跡するためのオプションを追加してみましょう。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The error messages point to the code in the example,\n"
"but it can be surprising that a reference to `DnsClient` appears.\n"
"Why is that?\n"
"The key is in what happens inside `KeyPairGenerator.initialize()` method call.\n"
"It uses `JCAUtil.getSecureRandom()` which is why this is problematic,\n"
"but sometimes the tracing options can show some stack traces that do not represent what happens in reality.\n"
"The best option is to dig through the source code and use tracing output for guidance but not as full truth."
msgstr "エラーメッセージは例にあるコードを指していますが、 `DnsClient` への参照が表示されるのは意外なことかもしれません。なぜでしょうか? 重要なのは、 `KeyPairGenerator.initialize()` メソッド呼び出し内で起こっていることです。これは `JCAUtil.getSecureRandom()` を使用し、これが原因で問題となっていますが、トレースオプションは、実際に起きていることを表さないスタックトレースの一部を表示することがあります。最良のオプションは、ソースコードを調べ、トレース出力を完全な事実としてではなく、ガイダンスとして使用することです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Moving the `KEY_PAIR_GEN.initialize(1024);` call to the run-time executed method `encryptDecrypt` is enough to solve this particular issue.\n"
"Rebuild the application and verify that encrypt/decrypt endpoint works as expected by sending any message and check if the reply is the same as the incoming message:"
msgstr "この特定の問題を解決するには、 `KEY_PAIR_GEN.initialize(1024);` 呼び出しを実行時に実行されるメソッド encryptDecrypt に移動するだけで十分です。アプリケーションを再構築し、メッセージを送信して暗号化/復号化エンドポイントが期待どおりに機能することを確認し、応答が受信メッセージと同じかどうかを確認します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Additional information on which classes are initialized and why can be obtained by passing in the `-H:+PrintClassInitialization` flag via `-Dquarkus.native.additional-build-args`."
msgstr "どのクラスがどのように初期化されるかについての追加情報は、 `-Dquarkus.native.additional-build-args` を通じて `-H:+PrintClassInitialization` フラグを渡すことで得ることができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Profile Runtime Behaviour"
msgstr "実行時動作のプロファイリング"

#: _versions/3.27/guides/native-reference.adoc
msgid "Single Thread"
msgstr "シングルスレッド"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"In this exercise, we profile the runtime behaviour of some Quarkus application that was compiled to a native executable to determine where the bottleneck is.\n"
"Assume that you’re in a scenario where profiling the pure Java version is not possible, maybe because the issue only occurs with the native version of the application."
msgstr "この演習では、ネイティブ実行可能ファイルにコンパイルされたQuarkusアプリケーションの実行時動作をプロファイリングし、ボトルネックがどこにあるかを判断します。問題がアプリケーションのネイティブバージョンでのみ発生するために、純粋なJavaバージョンのプロファイリングができないシナリオを想定しています。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Add a REST resource with the following code\n"
"(example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo1/StringBuilderTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr "次のコードを使用して REST リソースを追加します (この例は link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo1/StringBuilderTest.java[Andrei Pangin's Java Profiling presentation] からご提供いただいています):"

#: _versions/3.27/guides/native-reference.adoc
msgid "Recompile the application, rebuild the binary and run it. Attempting a simple curl will never complete, as expected:"
msgstr "アプリケーションを再コンパイルし、バイナリを再ビルドして実行します。単純なcurlを試みても、期待通り完了しません。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"However, the question we’re trying to answer here is:\n"
"what would be the bottleneck of such code?\n"
"Is it appending the characters? Is it deleting it? Is it checking whether the thread is alive?"
msgstr "しかし、ここで私たちが答えようとしているのは、そのようなコードのボトルネックは何か？文字を追加することか？削除していることか？スレッドが生きているかどうかをチェックしていることか？です。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Since we're dealing with a linux native executable,\n"
"we can use tools like `perf` directly.\n"
"To use `perf`,\n"
"go to the root of the project and start the tools container created earlier as a privileged user:"
msgstr "Linux のネイティブ実行可能ファイルを扱っているので、 `perf` のようなツールを直接使用できます。 `perf` を使用するには、プロジェクトの root に移動し、特権ユーザーとして以前に作成したツールコンテナーを起動します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Note that in order to use `perf` to profile the native executables in the guide,\n"
"the container needs to run as privileged, or with `--cap-add sys_admin`.\n"
"Please note that privileged containers are **NOT** recommended in production, so use this flag with caution!"
msgstr "なお、 `perf` を使用してガイドのネイティブ実行可能ファイルをプロファイルするには、コンテナを特権的に実行するか、 `--cap-add sys_admin` を使用する必要があります。本番環境では特権コンテナは推奨され *ません* ので、このフラグの使用には注意が必要です。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Once the container is running, you need to ensure that the kernel is ready for the profiling exercises:"
msgstr "コンテナが稼働したら、カーネルがプロファイリングの演習に対応できるようにしておく必要があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The kernel modifications above also apply to Linux virtual machines.\n"
"If running on a bare metal Linux machine,\n"
"tweaking only `perf_event_paranoid` is enough."
msgstr "上記のカーネルの変更は、Linux 仮想マシンにも適用されます。ベアメタル Linux マシンで実行している場合は、 `perf_event_paranoid` を微調整するだけで十分です。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Then, from inside the tools container we execute:"
msgstr "次に、ツールコンテナー内から以下を実行します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The `perf record` command above takes `1009` samples per second.\n"
"Increasing this value means more samples are gathered,\n"
"which can end up affecting the runtime performance.\n"
"This also increases the amount of data generated.\n"
"The more data generated, the longer it takes to process it,\n"
"but the more precision you get on what the application is doing.\n"
"So, finding the right value is a balancing act."
msgstr "上記の `perf record` コマンドは、1 秒あたり 1009 サンプルを取得します。この値を大きくすると、より多くのサンプルが収集されることを意味し、実行時のパフォーマンスに影響を与える可能性があります。これにより、生成されるデータの量も増加します。生成されるデータが多いほど、処理に時間がかかりますが、アプリケーションが行っていることをより正確に把握できます。したがって、適切な値を見つけることは、バランスをとる作業です。"

#: _versions/3.27/guides/native-reference.adoc
msgid "While `perf record` is running, open another window and access the endpoint:"
msgstr "`perf record` の実行中に、別のウィンドウを開き、エンドポイントにアクセスします。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"After a few seconds, halt the `perf record` process.\n"
"This will generate a `perf.data` file.\n"
"We could use `perf report` to inspect the perf data,\n"
"but you can often get a better picture showing that data as a flame graph.\n"
"To generate flame graphs, we will use\n"
"https://github.com/brendangregg/FlameGraph[FlameGraph GitHub repository],\n"
"which has already been installed inside the tools container."
msgstr "数秒後、 `perf record` プロセスを停止します。これにより、 `perf.data` ファイルが生成されます。 `perf report` を使用して perf データを検査することができますが、多くの場合、データをフレームグラフとして表示した方が、より良い結果を得ることができます。フレームグラフを生成するには、ツールコンテナー内にすでにインストールされている https://github.com/brendangregg/FlameGraph[FlameGraph GitHub リポジトリー] を使用します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Next, generate a flame graph using the data captured via `perf record`:"
msgstr "次に、 `perf record` を介してキャプチャされたデータを使用してフレームグラフを生成します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The flame graph is a svg file that a web browser, such as Firefox, can easily display.\n"
"After the above two commands complete one can open `flamegraph.svg` in their browser:"
msgstr "フレームグラフは、Firefox などの Web ブラウザーで簡単に表示できる svg ファイルです。上記の2つのコマンドが完了すると、ブラウザーで `flamegraph.svg` を開くことができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"We see a big majority of time spent in what is supposed to be our main,\n"
"but we see no trace of the `StringBuilderResource` class,\n"
"nor the `StringBuilder` class we're calling.\n"
"We should look at the symbol table of the binary:\n"
"can we find symbols for our class and `StringBuilder`?\n"
"We need those in order to get meaningful data.\n"
"From within the tools container, query the symbol table:"
msgstr "メインとなるはずのものに大半の時間が費やされていることがわかりますが、呼び出している `StringBuilderResource` クラスや `StringBuilder` クラスの痕跡は見られません。バイナリーのシンボルテーブルを確認する必要があります。クラスと `StringBuilder` のシンボルを見つけることができますか? 意味のあるデータを取得するためにそれらが必要です。ツールコンテナー内から、シンボルテーブルをクエリーします。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"No output appears when querying the symbol table.\n"
"This is why we don't see any call graphs in the flame graphs.\n"
"This is a deliberate decision that native-image makes.\n"
"By default, it removes symbols from the binary."
msgstr "シンボルテーブルをクエリーすると、出力は表示されません。これが、フレームグラフにコールグラフが表示されない理由です。これは、ネイティブイメージが行う意図的な決定です。デフォルトでは、バイナリーからシンボルを削除します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"To regain the symbols, we need to rebuild the binary instructing GraalVM not to delete the symbols.\n"
"On top of that, enable DWARF debug info so that the stack traces can be populated with that information.\n"
"From outside the tools container, execute:"
msgstr "シンボルを取り戻すには、シンボルを削除しないように GraalVM に指示するバイナリーを再ビルドする必要があります。さらに、DWARF デバッグ情報を有効にして、スタックトレースにその情報を入力できるようにします。ツールコンテナーの外部から、以下を実行します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Next, re-enter the tools container if you exited,\n"
"and inspect the native executable with `objdump`,\n"
"and see how the symbols are now present:"
msgstr "次に、終了した場合はツールコンテナーに再度入り、 `objdump` を使用してネイティブ実行可能ファイルを検査し、シンボルがどのように存在するようになったかを確認します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "You should see a long list of symbols that match that pattern."
msgstr "そのパターンに一致するシンボルの長いリストが表示されるはずです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Then, run the executable through perf,\n"
"*indicating that the call graph is dwarf*:"
msgstr "次に、実行ファイルを perf で実行すると、 *コールグラフが dwarf であることがわかります*。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Run the curl command once again, stop the binary, generate the flamegraphs and open it:"
msgstr "もう一度curlコマンドを実行し、バイナリを停止し、フレームグラフを生成して開きます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The flamegraph now shows where the bottleneck is.\n"
"It's when `StringBuilder.delete()` is called which calls `System.arraycopy()`.\n"
"The issue is that 1 million characters need to be shifted in very small increments:"
msgstr "フレームグラフを見ると、どこがボトルネックになっているかがわかります。それは、 `StringBuilder.delete()` が呼び出され、 `System.arraycopy()` を呼び出すときです。問題は、100万文字を非常に小さな単位でシフトさせる必要があることです。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Multi-Thread"
msgstr "マルチスレッド"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Multithreaded programs might require special attention when trying to understand their runtime behaviour.\n"
"To demonstrate this, add this `MulticastResource` code to your project\n"
"(example courtesy of link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo6/DatagramTest.java[Andrei Pangin's Java Profiling presentation]):"
msgstr "マルチスレッドプログラムは、ランタイムの動作を理解しようとするときに特別な注意が必要になる場合があります。これを実証するために、この `MulticastResource` コードをプロジェクトに追加します (この例は link:https://github.com/apangin/java-profiling-presentation/blob/master/src/demo6/DatagramTest.java[Andrei Pangin's Java Profiling presentation] からご提供いただいています):"

#: _versions/3.27/guides/native-reference.adoc
msgid "Build the native executable with debug info:"
msgstr "デバッグ情報付きでネイティブ実行可能ファイルをビルドします。"

#: _versions/3.27/guides/native-reference.adoc
msgid "From inside the tools container (as privileged user) run the native executable through `perf`:"
msgstr "ツールコンテナー内から (特権ユーザーとして)、 `perf` を介してネイティブ実行可能ファイルを実行します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Invoke the endpoint to send the multicast packets:"
msgstr "エンドポイントを呼び出して、マルチキャストパケットを送信します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Make and open a flamegraph:"
msgstr "フレームグラフを作成して開いてください。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The flamegraph produced looks odd. Each thread is treated independently even though they all do the same work.\n"
"This makes it difficult to have a clear picture of the bottlenecks in the program."
msgstr "作成されたフレームグラフは奇妙に見えます。すべてのスレッドが同じ作業をしているにもかかわらず、各スレッドが独立して扱われています。これでは、プログラムのボトルネックを明確に把握することができません。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This is happening because from a `perf` perspective, each thread is a different command.\n"
"We can see that if we inspect `perf report`:"
msgstr "これは、 `perf` の観点から見ると、各スレッドが異なるコマンドであるために起こっています。 `perf report` を確認するとわかります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This can be worked around by applying some modifications to the perf output,\n"
"in order to make all threads have the same name. E.g."
msgstr "これは、すべてのスレッドが同じ名前になるように、perfの出力にいくつかの変更を加えることで回避できます。例えば、以下のようになります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"When you open the flamegraph, you will see all threads' work collapsed into a single area.\n"
"Then, you can clearly see that there's some locking that could affect performance."
msgstr "フレームグラフを開くと、すべてのスレッドの作業が1つの領域に折りたたまれているのがわかります。そして、パフォーマンスに影響を与える可能性のあるロックがあることがはっきりとわかります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Debugging Native Crashes"
msgstr "ネイティブ・クラッシュのデバッグ"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"One of the drawbacks of using native executables is that they cannot be debugged using the standard Java debuggers,\n"
"instead we need to debug them using `gdb`, the GNU Project debugger.\n"
"To demonstrate how to do this,\n"
"we are going to generate a native Quarkus application that crashes due to a Segmentation Fault when accessing http://localhost:8080/crash.\n"
"To achieve this, add the following REST resource to the project:"
msgstr "ネイティブ実行可能ファイルを使用することの欠点の 1 つは、標準の Java デバッガーを使用してデバッグできないことです。代わりに、GNU プロジェクトのデバッガーである `gdb` を使用してデバッグする必要があります。その方法を示すために、 http://localhost:8080/crash にアクセスするときにセグメンテーション違反が原因でクラッシュするネイティブ Quarkus アプリケーションを生成します。これを実現するには、以下の REST リソースをプロジェクトに追加します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This code will try to copy 256 bytes from address `0x0` to `0x80` resulting in a Segmentation Fault.\n"
"To verify this, compile and run the example application:"
msgstr "このコードは、アドレス `0x0` から `0x80` へ 256 バイトをコピーしようとするため、セグメンテーションフォールトが発生します。これを確認するには、サンプルアプリケーションをコンパイルして実行します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "This will result in the following output:"
msgstr "これにより、次のような出力が得られます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The omitted output above contains clues to what caused the issue,\n"
"but in this exercise we are going to assume that no information was provided.\n"
"Let’s try to debug the segmentation fault using `gdb`.\n"
"To do that, go to the root of the project and enter the tools container:"
msgstr "上記の省略された出力には、問題の原因の手がかりが含まれていますが、この演習では情報が提供されなかったと仮定しています。 `gdb` を使用してセグメンテーション違反をデバッグしてみましょう。これを行うには、プロジェクトの root に移動し、ツールコンテナーに入ります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Then start the application in `gdb` and execute `run`."
msgstr "続いて、 `gdb` でアプリケーションを起動し、 `run` を実行します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Next, try to access http://localhost:8080/crash:"
msgstr "次に、 http://localhost:8080/crash へのアクセスを試みます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "This will result in the following message in `gdb`:"
msgstr "これにより、 `gdb` に次のようなメッセージが表示されます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "If we try to get more info about the backtrace that led to this crash we will see that there is not enough information available."
msgstr "このクラッシュの原因となったバックトレースの情報を得ようとすると、十分な情報が得られないことがわかります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This is because we didn’t compile the Quarkus application with `-Dquarkus.native.debug.enabled`,\n"
"so `gdb` cannot find debugging symbols for our native executable,\n"
"as indicated by the \"_No debugging symbols found in ./target/debugging-native-1.0.0-SNAPSHOT-runner_\" message in the beginning of `gdb`."
msgstr "これは、Quarkus アプリケーションを `-Dquarkus.native.debug.enabled` でコンパイルしなかったことが原因で、これにより、 `gdb` の最初にある \"_No debugging symbols found in ./target/debugging-native-1.0.0-SNAPSHOT-runner_\" メッセージで示されているように、 `gdb` はネイティブ実行可能ファイルのデバッグシンボルを見つけることができません。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Recompiling the Quarkus application with `-Dquarkus.native.debug.enabled` and rerunning it through `gdb` we are now able to get a backtrace making clear what caused the crash.\n"
"On top of that, add `-H:-OmitInlinedMethodDebugLineInfo` option to avoid inlined methods being omitted from the backtrace:"
msgstr "`-Dquarkus.native.debug.enabled` でQuarkusアプリケーションを再コンパイルし、 `gdb` で再実行すると、クラッシュの原因を明らかにするバックトレースを得ることができます。さらに、 `-H:-OmitInlinedMethodDebugLineInfo` オプションを追加すると、インライン化されたメソッドがバックトレースから省略されるのを防ぐことができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"We already see that `gdb` is able to tell us which method caused the crash and where it’s located in the source code.\n"
"We can also get a backtrace of the call graph that led us to this state:"
msgstr "`gdb` は、どのメソッドがクラッシュの原因となったのか、それがソースコードのどこにあるのかを教えてくれることがすでにわかりました。また、この状態に至ったコールグラフのバックトレースも得ることができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Similarly, we can get a backtrace of the call graph of other threads."
msgstr "同様に、他のスレッドのコールグラフのバックトレースを取得できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "First, we can list the available threads with:"
msgstr "まず、利用可能なスレッドを以下のように一覧表示できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "select the thread we want to inspect, e.g. thread 1:"
msgstr "検査するスレッドを選択します (例: スレッド 1)。"

#: _versions/3.27/guides/native-reference.adoc
msgid "and, finally, print the stack trace:"
msgstr "そして最後に、スタックトレースを出力します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Alternatively, we can list the backtraces of all threads with a single command:"
msgstr "または、1 つのコマンドですべてのスレッドのバックトレースを一覧表示することもできます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Note, however, that despite being able to get a backtrace we can still not list the source code at point with the `list` command."
msgstr "ただし、バックトレースを取得できるにもかかわらず、 `list` コマンドを使用してソースコードをある点で引き続き一覧表示できないことに注意してください。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This is because `gdb` is not aware of the location of the source files.\n"
"We are running the executable outside the target directory.\n"
"To fix this we can either rerun `gdb` from the target directory or,\n"
"run `directory target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/sources` e.g.:"
msgstr "これは、 `gdb` がソースファイルの場所を認識していないことが原因です。実行可能ファイルは、ターゲットディレクトリーの外で実行しています。これを修正するには、ターゲットディレクトリーから `gdb` を再実行するか、 `directory target/debugging-native-1.0.0-SNAPSHOT-native-image-source-jar/sources` を実行します。以下に例を示します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"We can now examine line `169` and get a first hint of what might be wrong\n"
"(in this case we see that it fails at the first read from src which contains the address `0x0000`),\n"
"or walk up the stack using `gdb`’s `up` command to see what part of our code led to this situation.\n"
"For more information about using `gdb` to debug native executables, see the\n"
"link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/debugging-and-diagnostics/DebugInfo/[GraalVM Debug Info Feature] guide."
msgstr ""
"`169` 行を調べて、何が問題なのか最初のヒントを得ることができます（この場合、アドレス `0x0000` を含む src からの最初の読み取りに失敗していることがわかります）。あるいは、 `gdb` の `up` コマンドを使ってスタックをさかのぼり、コードのどの部分がこのような状況を引き起こしたかを確認することができます。\n"
"ネイティブ実行可能ファイルのデバッグを行う `gdb` の詳細情報は\n"
"link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/debugging-and-diagnostics/DebugInfo/[GraalVM デバッグ情報機能] ガイドを参照してください。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Frequently Asked Questions"
msgstr "よくある質問"

#: _versions/3.27/guides/native-reference.adoc
msgid "Why is the process of generating a native executable slow?"
msgstr "ネイティブ実行可能ファイルを生成するプロセスが遅いのはなぜですか？"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Native executable generation is a multi-step process.\n"
"The analysis and compile steps are the most expensive of all and hence the ones that dominate the time spent generating the native executable."
msgstr "ネイティブ実行可能ファイルの生成は、複数のステップで構成されています。その中でも解析とコンパイルのステップは最もコストがかかるため、ネイティブ実行可能ファイルの生成にかかる時間の大半を占めます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"In the analysis phase, a static points-to analysis starts from the main method of the program to find out what is reachable.\n"
"As new classes are discovered, some of them will be initialized during this process depending on the configuration.\n"
"In the next step, the heap is snapshotted and checks are made to see which types need to be available at runtime.\n"
"The initialization and heap snapshotting can cause new types to be discovered, in which case the process is repeated.\n"
"The process stops when a fixed point is reached, that is when the reachable program grows no more."
msgstr "解析フェーズでは、プログラムのメインメソッドから静的なPoint-to 解析を開始し、到達可能なものを見つけ出します。新しいクラスが発見されると、設定に応じてこのプロセス中にその一部が初期化されます。次のステップでは、ヒープがスナップショットされ、どのタイプが実行時に利用可能である必要があるかのチェックが行われます。初期化とヒープのスナップショットにより、新しい型が発見されることがありますが、その場合はこのプロセスが繰り返されます。このプロセスは、到達可能なプログラムがこれ以上成長しないという固定点に達したときに停止します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "The compilation step is pretty straightforward, it simply compiles all the reachable code."
msgstr "コンパイルのステップは非常に簡単で、到達可能なすべてのコードを単純にコンパイルします。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The time spent in analysis and compilation phases depends on how big the application is.\n"
"The bigger the application, the longer it takes to compile it.\n"
"However, there are certain features that can have an exponential effect.\n"
"For example, when registering types and methods for reflection access,\n"
"the analysis can’t easily see what’s behind those types or methods,\n"
"so it has to do more work to complete the analysis step."
msgstr "解析とコンパイルの段階でかかる時間は、アプリケーションの大きさによって異なります。アプリケーションが大きければ大きいほど、コンパイルにかかる時間は長くなります。ただし、指数関数的な効果をもたらす機能もあります。例えば、リフレクションアクセスのために型やメソッドを登録する場合、解析はその型やメソッドの背後にあるものを簡単に見ることができないため、解析ステップを完了するためにはより多くの仕事をしなければなりません。"

#: _versions/3.27/guides/native-reference.adoc
msgid "I get a warning about using experimental options, what can I do?"
msgstr "実験的なオプションの使用に関する警告が表示されましたが、どうすればよいですか?"

#: _versions/3.27/guides/native-reference.adoc
msgid "Starting with Mandrel 23.1 and GraalVM for JDK 21, the native executable generation process will warn about the use of experimental options with a message like this:"
msgstr "Mandrel 23.1 および GraalVM for JDK 21 以降では、ネイティブ実行可能ファイル生成プロセスで、実験的なオプションの使用について次のようなメッセージで警告が表示されます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"If the mentioned option is added by a third party library like in the example above, you should consider opening an issue in the library's repository to ask for the option to be removed.\n"
"If the option is added by your application, you should consider either removing it (if it's not necessary) or wrapping it between `-H:+UnlockExperimentalVMOptions` and `-H:-UnlockExperimentalVMOptions`."
msgstr ""
"上記の例のように、言及されたオプションがサードパーティーのライブラリーで追加された場合は、ライブラリーのリポジトリーで問題を起票して、オプションを削除するように依頼することを検討する必要があります。\n"
"アプリケーションによってオプションが追加された場合は、そのオプションを削除するか (必要でない場合)、 `-H:+UnlockExperimentalVMOptions` と `-H:-UnlockExperimentalVMOptions` の間にラップすることを検討する必要があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "I get a `AnalysisError\\$ParsingError` when building a native executable due to an `UnresolvedElementException`, what can I do?"
msgstr "ネイティブ実行可能ファイルをビルドする際に、 `UnresolvedElementException` のために `AnalysisError\\$ParsingError` が表示されるのですが、どうすればよいでしょうか？"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"When building a native executable Quarkus requires all classes being referenced by the code, no matter if they are build-time or run-time initialized, to be present in the classpath.\n"
"This way it ensures that there will be no crashes at runtime due to potential `NoClassDefFoundError` exceptions.\n"
"To achieve this it makes use of GraalVM's `--link-at-build-time` parameter:"
msgstr "Quarkusでは、ネイティブ実行可能ファイルをビルドする際に、コードから参照されるすべてのクラスが、ビルド時か、実行時に初期化されるかに関係なく、クラスパスに存在することが必要です。こうすることで、実行時に潜在的な `NoClassDefFoundError` 例外の発生によるクラッシュすることがないようにします。これを達成するために、それはGraalVMの `--link-at-build-time` パラメータを利用します:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This, however, may result in an `AnalysisError\\$ParsingError` due to an `UnresolvedElementException` at build time.\n"
"This is often caused because the application references a class from an https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html#optional-dependencies[optional dependency]."
msgstr "しかし、この場合、ビルド時に `UnresolvedElementException` が発生するため、 `AnalysisError\\$ParsingError` が発生することがあります。これは、アプリケーションが link:https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html#optional-dependencies[オプションの依存関係] からクラスを参照するために起こることが多いです。"

#: _versions/3.27/guides/native-reference.adoc
msgid "If you have access to the source code responsible for the reference to the missing dependency and can alter it, you should consider one of the following:"
msgstr "欠落している依存関係への参照を担当するソースコードにアクセスでき、それを変更できる場合は、次のいずれかを検討するべきです:"

#: _versions/3.27/guides/native-reference.adoc
msgid "Remove the reference if it's not actually necessary."
msgstr "実際に必要でない場合は、参照を削除してください。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Move the affected code in a sub-module and make the dependency non-optional (as is the best practice)."
msgstr "影響を受けるコードをサブモジュールに移動し、依存関係を非オプションにする（ベストプラクティスとして）。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Make the dependency non-optional."
msgstr "依存関係を非オプションにする。"

#: _versions/3.27/guides/native-reference.adoc
msgid "In the unfortunate case where the reference causing the issue is made by a 3rd party library, that you cannot modify, you should consider one of the following:"
msgstr "問題の原因となる参照がサードパーティライブラリで作られており、それを変更することができない場合は、次のいずれかを検討する必要があります:"

#: _versions/3.27/guides/native-reference.adoc
msgid "Use a class/method substitution to remove the said reference."
msgstr "クラス/メソッド置換を使用して、当該参照を削除する。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Add the optional dependency as a non-optional dependency of your project."
msgstr "オプションの依存関係を、プロジェクトの非オプションの依存関係として追加する。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Note that although option (1) is the best choice performance wise, as it minimizes the applications footprint,it might not be trivial to implement.\n"
"To make matters worse, it's also not easy to maintain as it is tightly coupled to the 3rd party library implementation.\n"
"Option (2) is a straight forward alternative to work around the issue, but comes at the cost of including possibly never invoked code in the resulting native executable."
msgstr "オプション(1)は、アプリケーションのフットプリントを最小化するため、パフォーマンス的には最良の選択ですが、実装が容易でない場合があることに注意してください。さらに悪いことに、サードパーティライブラリの実装と密接に結合しているため、保守も容易ではありません。オプション(2)は、この問題を回避するための簡単な代替案ですが、結果として得られるネイティブ実行可能ファイルに、実行されたことのないコードが含まれる可能性があるという代償を伴います。"

#: _versions/3.27/guides/native-reference.adoc
msgid "I get an `OutOfMemoryError` (OOME) building native executables, what can I do?"
msgstr "ネイティブ実行可能ファイルをビルドする際に OutOfMemoryError (OOME) が発生しました。どうすればよいですか?"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Building native executables is not only time consuming, but it also takes a fair amount of memory.\n"
"For example, building a sample native Quarkus Jakarta Persistence application such as the Hibernate ORM quickstart,\n"
"may use 6GB to 8GB resident set size in memory.\n"
"A big chunk of this memory is Java heap,\n"
"but extra memory is required for other aspects of the JVM that runs the native building process.\n"
"It is still possible to build such applications in environments that have total memory close to the limits,\n"
"but to do that it is necessary to shrink the maximum heap size of the GraalVM native image process.\n"
"To do that, set a maximum heap size using the `quarkus.native.native-image-xmx` property.\n"
"For example, we can instruct GraalVM to use 5GB of maximum heap size by passing in\n"
"`-Dquarkus.native.native-image-xmx=5g` in the command line."
msgstr ""
"ネイティブ実行可能ファイルの構築には時間がかかるだけでなく、かなりの量のメモリーも消費します。\n"
"たとえば、Hibernate ORM クイックスタートのようなサンプルのネイティブ Quarkus Jakarta Persistence アプリケーションを構築すると、\n"
"メモリー内で 6GB - 8GB の常駐セットサイズを使用する場合があります。\n"
"このメモリーの大部分は Java ヒープです。\n"
"ただし、ネイティブビルドプロセスを実行する JVM の他の側面には追加のメモリーが必要です。\n"
"総メモリーが限界に近い環境でも、このようなアプリケーションを構築することは可能です。\n"
"ただし、そのためには、GraalVM ネイティブイメージプロセスの最大ヒープサイズを縮小する必要があります。\n"
"これを行うには、 `quarkus.native.native-image-xmx` プロパティーを使用して最大ヒープサイズを設定します。\n"
"たとえば、GraalVM に最大 5GB のヒープサイズを使用するように指示するには、次のように渡します。\n"
"コマンドラインで `-Dquarkus.native.native-image-xmx=5g` を指定します。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Building native executables this way might have the side effect of requiring more time to complete.\n"
"This is due to garbage collection having to work harder for native image generation to have free space to do its job."
msgstr "この方法でネイティブ実行可能ファイルをビルドすると、完了するまでに時間がかかるという副作用が生じる可能性があります。これは、ガベージコレクションが、ネイティブイメージの生成に必要な空き領域を確保するために、より多くの作業を行う必要があるためです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Note that typical applications are likely bigger than quickstarts,\n"
"so the memory requirements will also likely be higher."
msgstr "一般的なアプリケーションはクイックスタートよりも大きい可能性が高いため、メモリー要件も高くなる可能性があることに注意してください。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Why is runtime performance of a native executable inferior compared to JVM mode?"
msgstr "JVMモードと比較して、ネイティブ実行可能ファイルのランタイムパフォーマンスが劣るのはなぜですか？"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"As with most things in life there are some trade-offs involved when choosing native compilation over JVM mode.\n"
"So depending on the application the runtime performance of a native application might be slower compared to JVM mode,\n"
"though that’s not always the case."
msgstr "多くの場合、JVM モードではなくネイティブコンパイルを選択すると、いくつかのトレードオフが発生します。そのため、アプリケーションによっては、ネイティブアプリケーションの実行時パフォーマンスが JVM モードに比べて遅くなることがありますが、絶対にそうであるとは限りません。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"JVM execution of an application includes runtime optimization of the code that profits from profile information built up during execution.\n"
"That includes the opportunities to inline a lot more of the code,\n"
"locate hot code on direct paths (i.e. ensure better instruction cache locality)\n"
"and cut out a lot of the code on cold paths (on the JVM a lot of code does not get compiled until something tries to execute it -- it is replaced with a trap that causes deoptimization and recompilation).\n"
"Removal of cold paths provides many more optimization opportunities than are available for ahead of time compilation because it significantly reduces the branch complexity and combinatorial logic of the smaller amount of hot code that is compiled."
msgstr "JVMによるアプリケーションの実行には、実行中に蓄積されるプロファイル情報を利用したコードの実行時最適化が含まれます。これには、より多くのコードをインライン化したり、ホットコードをダイレクトパスに配置したり（つまり、より良い命令キャッシュのローカリティを確保する）、コールドパスにある多くのコードをカットしたりする機会が含まれます（JVMでは、多くのコードが何かが実行しようとするまでコンパイルされず、最適化解除や再コンパイルを引き起こすトラップに置き換えられます）。コールドパスを取り除くことで、コンパイルされる少量のホットコードの分岐の複雑さや組み合わせロジックが大幅に削減されるため、先行してコンパイルする場合よりも多くの最適化の機会が得られます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"By contrast, native executable compilation has to cater for all possible execution paths when it compiles code offline since it does not know which are the hot or cold paths and cannot use the trick of planting a trap and recompiling if it is hit. For the same reason it cannot load the dice to ensure that code cache conflicts are minimized by co-locating hot paths adjacent.\n"
"Native executable generation is able to remove some code because of the closed world hypothesis but that is often not enough to make up for all the benefits that profiling and runtime deopt & recompile provides to the JVM JIT compiler."
msgstr "一方、ネイティブ実行可能ファイルのコンパイルでは、オフラインでコードをコンパイルする際に、すべての可能な実行経路に対応しなければなりません。なぜならば、ホットパスやコールドパスがわからないため、罠を仕掛けて、それに当たったら再コンパイルするというようなトリックが使えないからです。同じ理由で、ホットパスを隣接して配置することでコードキャッシュの衝突を最小限に抑えるようなサイコロを積むこともできません。ネイティブ実行可能ファイルの生成は、閉じた世界の仮説により、いくつかのコードを削除することができますが、それだけでは、プロファイリングや実行時最適化解除＆再コンパイルがJVM JITコンパイラに提供するすべての利点を補うことはできません。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Note, however, that there is a price you pay for that potentially higher JVM speed, and that price is in increased resource usage (both CPU and memory) and startup time because:"
msgstr "ただし、JVMの速度が向上する可能性があるため、その代償として、リソース（CPUとメモリの両方）の使用量と起動時間が増加することに注意してください。"

#: _versions/3.27/guides/native-reference.adoc
msgid "it takes some time before the JIT kicks in and fully optimizes the code."
msgstr "JITが作動してコードを完全に最適化するまでに時間がかかります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "the JIT compiler consumes resources that could be utilized by the application."
msgstr "JIT コンパイラは、アプリケーションが利用できるリソースを消費します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "the JVM has to retain a lot more metadata and compiler/profiler data to support the better optimizations that it can offer."
msgstr "JVMは、より良い最適化をサポートするために、より多くのメタデータやコンパイラ/プロファイラのデータを保持しなければなりません。"

#: _versions/3.27/guides/native-reference.adoc
msgid "The reason for 1) is that code needs to be run interpreted for some time and, possibly, to be compiled several times before all potential optimizations are realized to ensure that:"
msgstr "1)の理由は、コードはしばらくの間、インタプリタ実行する必要があり、場合によっては、以下を担保する全ての潜在的な最適化が実現される前に、何度もコンパイルする必要があるからです。"

#: _versions/3.27/guides/native-reference.adoc
msgid "it’s worth compiling that code path, i.e. it’s being executed enough times, and that"
msgstr "そのコードパスをコンパイルする価値があります。つまり、十分な回数実行されています。"

#: _versions/3.27/guides/native-reference.adoc
msgid "we have enough profiling data to perform meaningful optimizations."
msgstr "意味のある最適化を行うのに十分なプロファイリングデータを持っていること"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"An implication of 1) is that for small, short-lived applications a native executable may well be a better bet.\n"
"Although the compiled code is not as well optimized it is available straight away."
msgstr "1)の意味するところは、小規模で短命なアプリケーションには、ネイティブ実行可能ファイルの方が適しているということです。コンパイルされたコードは最適化されていませんが、すぐに利用できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The reason for 2) is that the JVM is essentially running the compiler at runtime in parallel with the application itself.\n"
"In the case of native executables the compiler is run ahead of time removing the need to run the compiler in parallel with the application."
msgstr "2)の理由は、JVMは基本的に実行時にアプリケーションと並行してコンパイラを実行しているからです。ネイティブ実行可能ファイルの場合、コンパイラは事前に実行されるため、アプリケーションと並行してコンパイラを実行する必要がありません。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"There are several reasons for 3). The JVM does not have a closed world assumption.\n"
"So, it has to be able to recompile code if loading of new classes implies that it needs to revise optimistic assumptions made at compile time.\n"
"For example, if an interface has only one implementation it can make a call jump directly to that code.\n"
"However, in the case where a second implementation class is loaded the call site needs to be patched to test the type of the receiver instance and jump to the code that belongs to its class.\n"
"Supporting optimizations like this one requires keeping track of a lot more details of the class base than a native executable,\n"
"including recording the full class and interface hierarchy,\n"
"details of which methods override other methods, all method bytecode etc.\n"
"In a native executable most of the details of class structure and bytecode can be ignored at run time."
msgstr "3)にはいくつかの理由があります。JVMは閉じた世界を想定していません。そのため、新しいクラスのロードにより、コンパイル時の楽観的な仮定を修正する必要がある場合には、コードを再コンパイルできなければなりません。例えば、あるインターフェイスの実装が1つだけの場合、そのコードに直接コールジャンプすることができます。しかし、2つ目の実装クラスがロードされた場合には、レシーバのインスタンスのタイプをテストして、そのクラスに属するコードにジャンプするようにコールサイトを修正する必要があります。このような最適化をサポートするには、ネイティブ実行可能ファイルよりもクラスベースの詳細を記録しておく必要があります。これには、完全なクラスとインターフェイスの階層、どのメソッドが他のメソッドをオーバーライドするかの詳細、すべてのメソッドのバイトコードなどが含まれます。ネイティブ実行可能ファイルでは、クラス構造やバイトコードの詳細のほとんどは実行時には無視できます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The JVM also has to cope with changes to the class base or execution profiles that result in a thread going down a previously cold path.\n"
"At that point the JVM has to jump out of the compiled code into the interpreter and recompile the code to cater for a new execution profile that includes the previously cold path.\n"
"That requires keeping runtime info that allow a compiled stack frame to be replaced with one or more interpreter frames.\n"
"It also requires runtime extensible profile counters to be allocated and updated to track what has or has not been executed."
msgstr "また、JVMはクラスベースや実行プロファイルの変更にも対応しなければならず、その結果、スレッドが以前のコールドパスを通ることになります。その時点で、JVMはコンパイルされたコードからインタープリタにジャンプし、以前のコールドパスを含む新しい実行プロファイルに対応するためにコードを再コンパイルしなければなりません。そのためには、コンパイルされたスタックフレームを1つまたは複数のインタープリタフレームに置き換えることができる実行時情報を保持する必要があります。また、実行されたもの、されなかったものを追跡するために、ランタイムの拡張可能なプロファイルカウンタを割り当て、更新する必要があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Why are native executables “big”?"
msgstr "なぜネイティブ実行可能ファイルは大きいのですか？"

#: _versions/3.27/guides/native-reference.adoc
msgid "This can be attributed to a number of different reasons:"
msgstr "これには様々な理由があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Native executables include not only the application code but also, library code, and JDK code.\n"
"As a result a more fair comparison would be to compare the native executable’s size with the size of the application,\n"
"plus the size of the libraries it uses, plus the size of the JDK.\n"
"Especially the JDK part is not negligible even in simple applications like HelloWorld.\n"
"To get a glance on what is being pulled in the image one can use `-H:+PrintUniverse` when building the native executable."
msgstr "ネイティブ実行可能ファイルには、アプリケーションのコードだけでなく、ライブラリのコードやJDKのコードも含まれています。そのため、ネイティブ実行可能ファイルのサイズは、アプリケーションのサイズに加えて、使用するライブラリのサイズとJDKのサイズを加えたものと比較するのが、より公平な比較となります。特にJDKの部分は、HelloWorldのようなシンプルなアプリケーションでも無視できません。イメージの中で何が引き出されているかを把握するために、ネイティブ実行可能ファイルをビルドする際に `-H:+PrintUniverse` を使用することができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Some features are always included in a native executable even though they might never be actually used at run time.\n"
"An example of such a feature is garbage collection.\n"
"At compile time we can’t be sure whether an application will need to run garbage collection at run time,\n"
"so garbage collection is always included in native executables increasing their size even if not necessary.\n"
"Native executable generation relies on static code analysis to identify which code paths are reachable,\n"
"and static code analysis can be imprecise leading to more code getting into the image than what’s actually needed."
msgstr "ネイティブ実行可能ファイルには、実行時に実際には使われないかもしれないのに、必ず含まれている機能があります。そのような機能の例として、ガベージコレクションがあります。コンパイル時には、アプリケーションが実行時にガベージコレクションを実行する必要があるかどうかはわかりません。そのため、ガベージコレクションは、必要がないにもかかわらず、常にネイティブ実行可能ファイルに含まれ、サイズが大きくなります。ネイティブ実行可能ファイルの生成は、どのコードパスが到達可能かを特定するために、静的なコード解析に依存していますが、静的なコード解析は不正確な場合があり、実際に必要なコードよりも多くのコードがイメージに入ってしまうことがあります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"There is a https://github.com/oracle/graal/issues/287[GraalVM upstream issue]\n"
"with some interesting discussions about that topic."
msgstr "この話題については、 link:https://github.com/oracle/graal/issues/287[GraalVMアップストリーム課題]で興味深い議論が行われています。"

#: _versions/3.27/guides/native-reference.adoc
msgid "What version of Mandrel was used to generate a binary?"
msgstr "バイナリの生成に使用したMandrelのバージョンは？"

#: _versions/3.27/guides/native-reference.adoc
msgid "One can see which Mandrel version was used to generate a binary by inspecting the binary as follows:"
msgstr "どのバージョンのMandrelを使ってバイナリを生成したかは、バイナリを以下のように検査すればわかります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "How do I enable GC logging in native executables?"
msgstr "ネイティブ実行可能ファイルでGCロギングを有効にするにはどうすればいいですか？"

#: _versions/3.27/guides/native-reference.adoc
msgid "See <<gc-logging,Native Memory Management GC Logging section>> for details."
msgstr "詳細は <<gc-logging,ネイティブメモリ管理GCロギングセクション>> をご覧ください。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Can I get a thread dump of a native executable?"
msgstr "ネイティブ実行可能ファイルのスレッドダンプを取得できますか?"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Yes, Quarkus sets up a signal handler for the `SIGQUIT` signal (or `SIGBREAK` on windows) that will result in a thread\n"
"dump being printed when receiving the `SIGQUIT/SIGBREAK` signal.\n"
"You may use `kill -SIGQUIT <pid>` to trigger a thread dump."
msgstr ""
"はい、Quarkus は `SIGQUIT`シグナル (Windows では `SIGBREAK`) のシグナルハンドラーを設定し、\n"
"`SIGQUIT/SIGBREAK` シグナルを受信したときにスレッドにダンプが出力されます。\n"
"`kill -SIGQUIT` <pid>` を使用してスレッドダンプをトリガーできます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Quarkus uses its own signal handler, to use GraalVM's default signal handler instead you will need to:\n"
"1. Add `-H:+DumpThreadStacksOnSignal` to `quarkus.native.additional-build-args` and rebuild the application.\n"
"2. Set the environment variable `DISABLE_SIGNAL_HANDLERS` before running the app."
msgstr ""
"Quarkus は独自のシグナルハンドラーを使用しますが、代わりに GraalVM のデフォルトのシグナルハンドラーを使用するには、次の操作を行う必要があります。\n"
"1. `quarkus.native.additional-build-args` に `-H:+DumpThreadStacksOnSignal` を追加し、アプリケーションを再構築します。\n"
"2. アプリケーションを実行する前に、環境変数 `DISABLE_SIGNAL_HANDLERS` を設定します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Can I get a heap dump of a native executable? e.g. if it runs out of memory"
msgstr "ネイティブ実行可能ファイルのヒープダンプを取得することはできますか？ 例えば、メモリ不足になった場合などです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Starting with GraalVM 22.2.0 it is possible to create heap dumps upon request,\n"
"e.g. `kill -SIGUSR1 <pid>`.\n"
"Support for dumping the heap dump upon an out of memory error will follow up."
msgstr "GraalVM 22.2.0 からは、要求に応じてダンプをヒープすることが可能になります (例: `kill -SIGUSR1 <pid>` )。メモリー不足エラーの際のヒープダンプのダンプのサポートは、今後追加される予定です。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Can I build and run this examples outside a container in Linux?"
msgstr "このサンプルをコンテナーの外で Linux でビルドして実行することは可能ですか？"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Yes you can.\n"
"In fact, debugging native executables on a Linux bare metal box offers the best possible experience.\n"
"In this kind of environments, root access is not needed except to install packages required to run some debug steps,\n"
"or to enable `perf` to gather events at the kernel."
msgstr "Quarkusのネイティブ実行可能ファイルのデバッグは、Linux環境で行うのが最適です。一部のデバッグ手順を実行するために必要なパッケージをインストールする場合や、 `perf` でカーネルのイベントを収集できるようにする場合を除き、ルートアクセスは必要ありません。macOSやWindows環境でのデバッグは、コンテナ環境でも機能します（ link:#macwindows[FAQエントリ]を参照）。"

#: _versions/3.27/guides/native-reference.adoc
msgid "These are the packages you'll need on your Linux environment to run through the different debugging sections:"
msgstr "これらのパッケージは、異なるデバッグセクションを実行するために、Linux環境で必要となるものです。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Generating flame graphs is slow, or produces errors, what can I do?"
msgstr "フレームグラフの生成に時間がかかったり、エラーが発生したりするのですが、どうすればいいですか？"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"There are multiple ways in which a native executable produced by Mandrel can be profiled.\n"
"All the methods require you to pass in the `-H:-DeleteLocalSymbols` option."
msgstr "Mandrelが作成したネイティブ実行可能ファイルをプロファイリングする方法は複数あります。すべての方法で、 `-H:-DeleteLocalSymbols` オプションを渡す必要があります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The method shown in this reference guide generates a binary with DWARF debug information,\n"
"runs it via `perf record` and then uses `perf script` and flame graph tooling to generate the flamegraphs.\n"
"However, the `perf script` post-processing step done on this binary can appear to be slow or can show some DWARF errors."
msgstr "このリファレンス・ガイドで紹介する方法は、DWARFのデバッグ情報を含むバイナリを生成し、 `perf record` を通して実行し、 `perf script` とフレーム・グラフ・ツールを使用してフレーム・グラフを生成します。しかし、このバイナリで行われる `perf script` の後処理ステップは、時間がかかったり、DWARF のエラーが表示されたりすることがあります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"An alternative method to generate flame graphs is to pass in `-H:+PreserveFramePointer` when generating the native executable instead of generating the DWARF debug information.\n"
"It instructs the binary to use an extra register for the frame pointer.\n"
"This enables `perf` to do stack walking to profile the runtime behaviour.\n"
"To generate the native executable using these flags, do the following:"
msgstr "フレームグラフを生成する別の方法として、ネイティブ実行可能ファイルを生成する際に、DWARFのデバッグ情報を生成する代わりに、 `-H:+PreserveFramePointer` を渡す方法があります。これは、フレームポインタに追加のレジスタを使用するようにバイナリに指示します。これにより、 `perf` は、実行時の動作をプロファイリングするためにスタックウォーキングを行うことができます。これらのフラグを使用してネイティブ実行可能ファイルを生成するには、以下のようにします。"

#: _versions/3.27/guides/native-reference.adoc
msgid "To get runtime profiling information out of the native executable, simply do:"
msgstr "実行時プロファイリング情報をネイティブ実行可能ファイルから取得するには、単純に次のようにします。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The recommended method for generating runtime profiling information is using the debug information rather than generating a binary that preserves the frame pointer.\n"
"This is because adding debug information to the native executable build process has no negative runtime performance whereas preserving the frame pointer does."
msgstr "実行時プロファイリング情報を生成する方法としては、フレームポインタを保持したバイナリを生成するよりも、デバッグ情報を使用することを推奨します。これは、ネイティブ実行可能ファイルのビルドプロセスにデバッグ情報を追加しても、実行時のパフォーマンスには何の影響もないのに対し、フレームポインタの保持は影響があるためです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"DWARF debug info is generated in a separate file and can even be omitted in the default deployment and only be transferred and used on demand,\n"
"for profiling or debugging purposes.\n"
"Furthermore, the presence of debug info enables `perf` to show us the relevant source code lines as well,\n"
"hence it does not bloat the native executable itself.\n"
"To do that, simply call `perf report` with an extra parameter to show source code lines:"
msgstr "DWARFのデバッグ情報は、別のファイルに生成され、デフォルトのデプロイメントでは省略することもでき、プロファイリングやデバッグの目的で必要なときだけ転送して使用することができます。さらに、デバッグ情報があることで、 `perf` は関連するソースコード行も表示することができ、ネイティブ実行可能ファイル自体を肥大化させることはありません。そのためには、 `perf report` にソースコード行を表示するパラメータを追加して呼び出すだけです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The performance penalty of preserving the frame pointer is due to using the extra register for stack walking,\n"
"particularly in `x86_64` compared to `aarch64` where there are fewer registers available.\n"
"Using this extra register reduces the number of registers that are available for other work,\n"
"which can lead to performance penalties."
msgstr "フレームポインターを保持することによる性能上のペナルティーは、スタックウォーキングのために余分なレジスタを使用することによるもので、特に `aarch64` と比較して `x86_64` では使用できるレジスターの数が少なくなります。この余分なレジスターを使用すると、他の作業に使用できるレジスターの数が減るため、性能上のペナルティーが発生します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "I think I’ve found a bug in native-image, how can I debug it with the IDE?"
msgstr "native-imageのバグを見つけたようなのですが、IDEでどのようにデバッグすればいいのでしょうか？"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Although it is possible to remote debug processes within containers,\n"
"it might be easier to step-by-step debug native-image by installing Mandrel locally and adding it to the path of the shell process."
msgstr "コンテナ内のプロセスをリモートデバッグすることは可能ですが、Mandrelをローカルにインストールしてシェルプロセスのパスに追加することで、native-imageをステップバイステップでデバッグする方が簡単かもしれません。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Native executable generation is the result of two Java processes that are executed sequentially.\n"
"The first process is very short and its main job is to set things up for the second process.\n"
"The second process is the one that takes care of most of the work.\n"
"The steps to debug one process or the other vary slightly."
msgstr "ネイティブ実行可能ファイルの生成は、2つのJavaプロセスが順次実行された結果です。最初のプロセスは非常に短く、主な仕事は2番目のプロセスのために物事を準備することです。2つ目のプロセスは、ほとんどの作業を行うものです。一方のプロセスをデバッグするための手順は、若干異なります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Let’s discuss first how to debug the second process,\n"
"which is the one you most likely to want to debug.\n"
"The starting point for the second process is the `com.oracle.svm.hosted.NativeImageGeneratorRunner` class.\n"
"To debug this process, simply add `--debug-attach=*:8000` as an additional build time argument:"
msgstr "まず、最もデバッグしたいと思われる2番目のプロセスのデバッグ方法について説明します。2番目のプロセスのスタートポイントは、 `com.oracle.svm.hosted.NativeImageGeneratorRunner` クラスです。このプロセスをデバッグするには、ビルド時の引数として `--debug-attach=*:8000` を追加するだけです。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"The starting point for the first process is the `com.oracle.svm.driver.NativeImages` class.\n"
"In GraalVM CE distributions, this first process is a binary, so debugging it in the traditional way with a Java IDE is not possible.\n"
"However, Mandrel distributions (or locally built GraalVM CE instances) keep this as a normal Java process,\n"
"so you can remote debug this process by adding the `--vm.agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000` as an additional build argument, e.g."
msgstr "1番目のプロセスのスタートポイントとなるのは、 `com.oracle.svm.driver.NativeImages` クラスです。GraalVM CEのディストリビューションでは、この最初のプロセスはバイナリなので、従来のようにJava IDEを使ってデバッグすることはできません。しかし、Mandrelのディストリビューション（またはローカルにビルドされたGraalVM CEインスタンス）では、これを通常のJavaプロセスとして保持しているため、 `--vm.agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:8000` を追加のビルド引数として追加することで、このプロセスをリモートデバッグすることができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Can I use JFR/JMC to debug or profile native binaries?"
msgstr "JFR/JMCを使って、ネイティブバイナリのデバッグやプロファイリングはできますか？"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH170[Java Flight Recorder (JFR)] and\n"
"https://www.oracle.com/java/technologies/jdk-mission-control.html[JDK Mission Control (JMC)]\n"
"can be used to profile native binaries since GraalVM CE 21.2.0.\n"
"However, JFR in GraalVM is currently limited in capabilities compared to HotSpot.\n"
"The custom event API is fully supported, but some VM level features are unavailable.\n"
"More events and JFR features will continue to be added in later releases.\n"
"The following table outlines Native Image JFR support and limitations by version."
msgstr ""
"link:https://docs.oracle.com/javacomponents/jmc-5-4/jfr-runtime-guide/about.htm#JFRUH170[Java Flight Recorder（JFR] ）と link:https://www.oracle.com/java/technologies/jdk-mission-control.html[JDK Mission Control（JMC] ）は、GraalVM CE 21.2.0以降、ネイティブ・バイナリのプロファイリングに使用することができます。\n"
"しかしながら、GraalVMにおけるJFRはHotSpotと比較して限定されています。\n"
"カスタム・イベントAPIは完全にサポートされていますが、一部のVMレベルの機能は利用できません。\n"
"より多くのイベントと JFR 機能は、後のリリースで追加され続ける予定です。\n"
"以下の表は、バージョンごとのネイティブ・イメージの JFR サポートと制限の概要です。"

#: _versions/3.27/guides/native-reference.adoc
msgid "GraalVM Version"
msgstr "GraalVMバージョン"

#: _versions/3.27/guides/native-reference.adoc
msgid "Supports"
msgstr "サポート対象"

#: _versions/3.27/guides/native-reference.adoc
msgid "Limitations"
msgstr "制約事項"

#: _versions/3.27/guides/native-reference.adoc
msgid "GraalVM CE 21.3 and Mandrel 21.3"
msgstr "GraalVM CE 21.3およびMandrel 21.3"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"* Minimal VM Level events\n"
"* Custom events API\n"
"* Start recordings upon executabe run or JFR Recording API"
msgstr ""
"* 最小限の仮想マシンレベルイベント\n"
"* カスタムイベント API\n"
"* 実行可能ファイルまたは JFR Recording API の実行時に記録を開始する"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"* No old object sampling\n"
"* No stacktrace tracing\n"
"* No event streaming"
msgstr ""
"* 古いオブジェクトのサンプリングなし\n"
"* スタックトレースのトレースなし\n"
"* イベントストリーミングなし"

#: _versions/3.27/guides/native-reference.adoc
msgid "GraalVM CE 22.3 and Mandrel 22.3"
msgstr "GraalVM CE 22.3およびMandrel 22.3"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"* Everything from GraalVM CE 21.3\n"
"* Additional monitor and thread events"
msgstr ""
"* GraalVM CE 21.3 からのすべて\n"
"* 追加のモニターとスレッドイベント"

#: _versions/3.27/guides/native-reference.adoc
msgid "GraalVM CE for JDK 17/20 and Mandrel 23.0"
msgstr "JDK 17/20 および Mandrel 23.0 向け GraalVM CE"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"* Everything from GraalVM CE 22.3\n"
"* Additional monitor, thread, container, and allocation events\n"
"* Stacktraces\n"
"* Sampling based method profiling\n"
"* Event streaming"
msgstr ""
"* GraalVM CE 22.3 からのすべて\n"
"* 追加のモニター、スレッド、コンテナー、割り当てイベント\n"
"* スタックトレース\n"
"* サンプリングベースのメソッドプロファイリング\n"
"* イベントストリーミング"

#: _versions/3.27/guides/native-reference.adoc
msgid "* No old object sampling"
msgstr "* old オブジェクトのサンプリングはありません"

#: _versions/3.27/guides/native-reference.adoc
msgid "GraalVM CE for JDK 23 and Mandrel 24.1"
msgstr "JDK 23 および Mandrel 24.1 用の GraalVM CE"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"* Everything from GraalVM CE for JDK 17/20 and Mandrel 23.0\n"
"* Additional events\n"
"* Always on allocation profiling (event throttling)\n"
"* Partial support for old object sampling (no tracking paths to GC roots)\n"
"* Support for `-XX:FlightRecorderOptions`"
msgstr ""
"* JDK 17/20 および Mandrel 23.0 用の GraalVM CE のすべて\n"
"* 追加イベント\n"
"* 常時オンの割り当てプロファイリング (イベントスロットリング)\n"
"* 古いオブジェクトサンプリングの部分的なサポート (GC ルートへのパスの追跡なし)\n"
"* `-XX:FlightRecorderOptions` のサポート"

#: _versions/3.27/guides/native-reference.adoc
msgid "* Old object sampling is missing path to GC root support"
msgstr "* 古いオブジェクトサンプリングでは GC ルートサポートへのパスが欠落しています"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"To add JFR support to your Quarkus executable, add the application property: `-Dquarkus.native.monitoring=jfr`.\n"
"E.g."
msgstr ""
"Quarkus 実行可能ファイルに JFR サポートを追加するには、アプリケーションプロパティー `-Dquarkus.native.monitoring=jfr` を追加します。\n"
"たとえば"

#: _versions/3.27/guides/native-reference.adoc
msgid "Once the image is compiled, enable and start JFR via runtime flags: `-XX:+FlightRecorder` and `-XX:StartFlightRecording`. For example:"
msgstr "イメージのコンパイルが完了したら、ランタイムフラグ `-XX:+FlightRecorder` と `-XX:StartFlightRecording` を使ってJFRを有効にし、起動します。例えば、以下のようになります。"

#: _versions/3.27/guides/native-reference.adoc
msgid "For more information about using JFR, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/debugging-and-diagnostics/JFR/[GraalVM JDK Flight Recorder (JFR) with Native Image] guide."
msgstr "JFR の使用に関する詳細は、link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/debugging-and-diagnostics/JFR/[GraalVM JDK Flight Recorder (JFR) with Native Image] ガイドを参照してください。"

#: _versions/3.27/guides/native-reference.adoc
msgid "How can we troubleshoot performance problems only reproducible in production?"
msgstr "本番環境でのみ再現可能なパフォーマンスの問題をどのようにトラブルシューティングできますか?"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"In this situation, switching to JVM mode would be the best thing to try first.\n"
"If the performance issues continue after switching to JVM mode,\n"
"you can use more established and mature tooling to figure out the root cause.\n"
"If the performance issue is limited to native mode only,\n"
"you might not be able to use `perf`,\n"
"so JFR is the only way to gather any information in this situation.\n"
"As JFR support for native expands,\n"
"the ability to detect root causes of performance issues directly in production will improve."
msgstr "この状況では、JVM モードに切り替えることが最初に試す最善の方法です。JVM モードに切り替えた後もパフォーマンスの問題が続く場合は、より確立された成熟したツールを使用して根本原因を突き止めることができます。パフォーマンスの問題がネイティブモードのみに限定されている場合、 `perf` を使用できない可能性があるため、この状況で情報を収集するには JFR が唯一の方法です。ネイティブの JFR サポートが拡大するにつれて、パフォーマンスの問題の根本原因を本番環境で直接検出する機能が向上します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "What information helps most debug issues that happen either at build-time or run-time?"
msgstr "ビルド時または実行時に発生するほとんどの問題のデバッグに役立つ情報は何ですか?"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"To fix classpath, class initialization or forbidden API errors at build time it's best to use <<native-reports,build time reports>> to understand the closed world universe.\n"
"A complete picture of the universe, along with the relationships between the different classes and methods will help uncover and fix most of the issues."
msgstr "ビルド時にクラスパス、クラスの初期化、または禁止された API エラーを修正するには、<<native-reports,build time reports>> を使用して、閉ざされた世界を理解するのが最善です。さまざまなクラスとメソッド間の関係とともに、世界全体像を把握することで、ほぼすべての問題を発見して修正することができます。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"To fix runtime native specific errors,\n"
"it's best to have <<debug-info,debug info builds>> of the native executables around,\n"
"so that `gdb` can be hooked up quickly to debug the issue.\n"
"If you also add local symbols to the debug info builds,\n"
"you will obtain precise <<profiling,profiling information>> as well."
msgstr "ランタイムのネイティブ特有のエラーを修正するには、ネイティブ実行可能ファイルの <<debug-info,debug info builds>> を用意しておくと、 `gdb` を素早くフックして問題をデバッグすることができます。デバッグ情報ビルドにローカルシンボルも追加すると、正確な <<profiling,profiling information>> が得られます。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Build stalled for minutes, barely using any CPU"
msgstr "ビルドが数分間停止し、CPU をほとんど使用していない"

#: _versions/3.27/guides/native-reference.adoc
msgid "It might so happen that the build gets stalled and even ends up with:"
msgstr "ビルドが停止し、次のような状態で終了する場合もあるかもしれません:"

#: _versions/3.27/guides/native-reference.adoc
msgid "One of the possible explanations could be a lack of entropy, e.g. on an entropy constrained VM, if such a source is needed as it is the case with Bouncycastle at build time."
msgstr "考えられる説明の 1 つは、エントロピーの欠如です。 例えば、エントロピーに制約のある VM で、Bouncycastle のビルド時のようにそのようなソースが必要な場合。"

#: _versions/3.27/guides/native-reference.adoc
msgid "One can check the available entropy on a Linux system with:"
msgstr "Linuxシステムでは、利用可能なエントロピーは次のようにして確認することができます:"

#: _versions/3.27/guides/native-reference.adoc
msgid "If the amount is not in hundreds, it could be a problem. A possible workaround is to compromise, acceptable for testing, and set:"
msgstr "量が百単位でない場合、問題になる可能性があります。回避策として考えられるのは、テストでは許容される妥協をし、次のように設定することです："

#: _versions/3.27/guides/native-reference.adoc
msgid "The proper solution is to increase the entropy available for the system. That is specific for each OS vendor and virtualization solution though."
msgstr "適切な解決策は、システムで利用可能なエントロピーを増やすことです。それはOSベンダーや仮想化ソリューションごとに固有な方法を必要とします。"

#: _versions/3.27/guides/native-reference.adoc
msgid "Work around missing CPU features"
msgstr "不足しているCPU機能を回避"

#: _versions/3.27/guides/native-reference.adoc
msgid "When building on recent machines and running your native executable on older machines, you may see the following failure when starting the application:"
msgstr "最近のマシンでビルドし、古いマシンでネイティブ実行可能ファイルを実行すると、アプリケーションの起動時に次のようなエラーが表示されることがあります："

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"This error message means that the native compilation used more advanced instruction sets, not supported by the CPU running the application.\n"
"To work around that issue, add the following line to the `application.properties`:"
msgstr ""
"このエラー・メッセージは、ネイティブ・コンパイルが、アプリケーションを実行しているCPUがサポートしていない、より高度な命令セットを使用したことを意味します。\n"
"この問題を回避するには、 `application.properties` に以下の行を追加して下さい:"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"Then, rebuild your native executable.\n"
"This setting forces the native compilation to use an older instruction set, increasing the chance of compatibility."
msgstr ""
"その後、ネイティブ実行可能ファイルをリビルドします。\n"
"この設定により、ネイティブ・コンパイルは古い命令セットを使用するようになり、互換性の可能性が高まります。"

#: _versions/3.27/guides/native-reference.adoc
msgid ""
"To explicitly define the target architecture run `native-image -march=list` to get the supported configurations and then set `-march` to one of them, e.g., `quarkus.native.additional-build-args=-march=x86-64-v4`.\n"
"If you are targeting an AMD64 host, `-march=x86-64-v2` would work in most cases."
msgstr "ターゲット・アーキテクチャを明示的に定義するには、 `native-image -march=list` を実行してサポートされている構成を取得し、 `-march` をそのうちの1つ、たとえば `quarkus.native.additional-build-args=-march=x86-64-v4` を設定します。AMD64ホストをターゲットにしている場合は、ほとんどの場合、 `-march=x86-64-v2` で動作します。"

#: _versions/3.27/guides/native-reference.adoc
msgid "The `march` parameter is only available on GraalVM 23+."
msgstr "`march` パラメーターは GraalVM 23+ でのみ利用可能です。"
