msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "SmallRye GraphQL"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-graphql/[SmallRye GraphQL],\n"
"an implementation of the https://github.com/eclipse/microprofile-graphql/[MicroProfile GraphQL] specification."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "As the https://www.graphql.org/[GraphQL] specification website states:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"GraphQL is a query language for APIs and a runtime for fulfilling those queries with your existing data.\n"
"GraphQL provides a complete and understandable description of the data in your API,\n"
"gives clients the power to ask for exactly what they need and nothing more, makes it easier to evolve APIs over time,\n"
"and enables powerful developer tools."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"**GraphQL** was originally developed by **Facebook** in 2012 and has been\n"
"an open standard since 2015."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"GraphQL is not a replacement for REST API specification but merely an\n"
"alternative. Unlike REST, GraphQL API's have the ability to benefit the client by:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Preventing Over-fetching and Under-fetching"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"REST APIs are server-driven fixed data responses that cannot be determined by\n"
"the client. Although the client does not require all the fields the client\n"
"must retrieve all the data hence `Over-fetching`. A client may also require\n"
"multiple REST API calls according to the first call (HATEOAS) to retrieve\n"
"all the data that is required thereby `Under-fetching`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "API Evolution"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Since GraphQL API's returns data that are requested by the client adding additional\n"
"fields and capabilities to existing API will not create breaking changes to existing\n"
"clients."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"In this guide, we build a simple GraphQL application that exposes a GraphQL API\n"
"at `/graphql`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "This example was inspired by a popular GraphQL API."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The solution is located in the `microprofile-graphql-quickstart` link:{quickstarts-tree-url}/microprofile-graphql-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Creating the Maven Project"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "This command generates a project, importing the `smallrye-graphql` extension."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-graphql` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Preparing an Application: GraphQL API"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "In this section we will start creating the GraphQL API."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "First, create the following entities representing a film from a galaxy far, far away:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "For readability we use classes with public fields, but classes with private fields with public getters and setters will also work."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"The classes we have just created describe the GraphQL schema which is a\n"
"set of possible data (objects, fields, relationships) that a client can access."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Let's continue with an example CDI bean, that would work as a repository:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Now, let's create our first GraphQL API."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Edit the `org.acme.microprofile.graphql.FilmResource` class as following:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "`@GraphQLApi` annotation indicates that the CDI bean will be a GraphQL endpoint"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "`@Query` annotation defines that this method will be queryable with the name `allFilms`"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Documentation of the queryable method"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"The value of the `@Query` annotation is optional and would implicitly\n"
"be defaulted to the method name if absent."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "This way we have created our first queryable API which we will later expand."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Launch"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Launch the quarkus application in dev mode:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Introspect"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The full schema of the GraphQL API can be retrieved by calling the following:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The server will return the complete schema of the GraphQL API."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "GraphQL UI"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Experimental - not included in the MicroProfile specification"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "GraphQL UI is a great tool permitting easy interaction with your GraphQL APIs."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"The Quarkus `smallrye-graphql` extension ships with https://github.com/graphql/graphiql/blob/main/packages/graphiql/README.md[GraphiQL] and enables it by default in `dev` and `test` modes,\n"
"but it can also be explicitly configured for `production` mode as well, by setting the `quarkus.smallrye-graphql.ui.always-include` configuration property to `true`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The GraphQL UI can be accessed from http://localhost:8080/q/graphql-ui/ ."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Have a look at the link:security-authorize-web-endpoints-reference[Authorization of Web Endpoints] Guide on how to add/remove security for the GraphQL UI."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Query the GraphQL API"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Now visit the GraphQL UI page that has been deployed in `dev` mode."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Enter the following query to the GraphQL UI and press the `play` button:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Since our query contains all the fields in the `Film` class\n"
"we will retrieve all the fields in our response. Since GraphQL API\n"
"responses are client determined, the client can choose which fields\n"
"it will require."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Let's assume that our client only requires `title` and `releaseDate`\n"
"making the previous call to the API `Over-fetching` of unnecessary\n"
"data."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Enter the following query into the GraphQL UI and hit the `play` button:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Notice in the response we have only retrieved the required fields.\n"
"Therefore, we have prevented `Over-fetching`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Let's continue to expand our GraphQL API by adding the following to the\n"
"`FilmResource` class."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Notice how we have excluded the value in the `@Query` annotation.\n"
"Therefore, the name of the query is implicitly set as the method name\n"
"excluding the `get`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"This query will allow the client to retrieve the film by id, and the `@Name` annotation on the parameter\n"
"changes the parameter name to `filmId` rather than the default `id` that it would be if you omit the `@Name` annotation."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Enter the following into the `GraphQL UI` and make a request."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"The `film` query method requested fields can be determined\n"
"as such in our previous example. This way we can retrieve individual\n"
"film information."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"However, say our client requires both films with filmId `0` and `1`.\n"
"In a REST API the client would have to make two calls to the API.\n"
"Therefore, the client would be `Under-fetching`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "In GraphQL, it is possible to make multiple queries at once."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Enter the following into the `GraphQL UI` to retrieve two films:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "This enabled the client to fetch the required data in a single request."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Expanding the API"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Until now, we have created a GraphQL API to retrieve film data.\n"
"We now want to enable the clients to retrieve the `Hero` data of the `Film`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Add the following to our `FilmResource` class:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Enable `List<Hero>` data to be added to queries that respond with `Film`"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"By adding this method we have effectively changed the schema of the GraphQL API.\n"
"Although the schema has changed the previous queries will still work.\n"
"Since we only expanded the API to be able to retrieve the `Hero` data of the `Film`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Enter the following into the `GraphQL UI` to retrieve the film and hero data."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The response now includes the heroes of the film."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Batching"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"When you are exposing a `Collection` return like our `getAllFilms`, you might want to use the batch form of the above, to more efficiently fetch\n"
"the heroes:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Here receive the films as a batch, allowing you to fetch the corresponding heroes."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Non blocking"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Queries can be made reactive by using `Uni` as a return type, or adding `@NonBlocking` to the method:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Or you can use `@NonBlocking`:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Using `Uni` or `@NonBlocking` means that the request will be executed on Event-loop threads rather than Worker threads."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "You can mix Blocking and Non-blocking in one request,"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Above will fetch the film on the event-loop threads, but switch to the worker thread to fetch the heroes."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
#, fuzzy
msgid "RunOnVirtualThread"
msgstr "RunOnVirtualThread"

#: _versions/3.27/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Queries can be run on a virtual thread by adding `@RunOnVirtualThread` to the method:"
msgstr "メソッドに `@RunOnVirtualThread` を追加することで、仮想スレッド上でクエリを実行することができます："

#: _versions/3.27/guides/smallrye-graphql.adoc
#, fuzzy
msgid "Please note the general guidelines for using xref:./virtual-threads.adoc[virtual threads]"
msgstr "xref:./virtual-threads.adoc[仮想スレッドの] 使用に関する一般的なガイドラインに注意してください。"

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Abstract Types"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"The current schema is simple with only two concrete types, `Hero` and `Film`.\n"
"Now we want to expand our API with additional types and add some abstractions\n"
"that make interacting with them easy for clients."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Interfaces"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Let's give our heroes some allies."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "First, create a new entity to represent our `Ally`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Update the `GalaxyService` to have some allies."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Let's also update `FilmResource` to allow clients to query for all allies:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Notice that `Ally` has a some of the same fields as a `Hero`.\n"
"To better make queries easier for clients, let's create an abstraction for any character."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Create a new Java interface that defines our common character traits."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Getters defined in an interface will define the GraphQL fields that it contains"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Now, update our `Hero` and `Ally` entities to implement this interface."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Because interfaces can't define fields, we have to implement the getters"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"By adding an interface and updating existing entities to implement it, we have effectively changed the schema.\n"
"The updated schema will now include the new `Ally` type and `Character` interface."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The `Character` interface was defined with the getters as fields"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The `Ally` type was added and it implements `Character`"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The `Hero` type was updated to implement `Character`"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Update our `GalaxyService` to provide all characters."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Now we can allow clients to query for all characters, not just heroes."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Unions"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"So far, our API has only allowed us to query directly for an entity or list of entities.\n"
"Now we want to allow clients to search all of our entities.\n"
"While `Hero` and `Ally` have a shared abstract type of `Character`, there is no abstraction that also includes `Film`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "First, create this new abstract type representing the possible return types for a search result."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "`@Union` is required to indicate this Java interface represents a GraphQL union, not a GraphQL interface"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"The Java interface representing the GraphQL union does not have to be empty,\n"
"but any getters defined will not explicitly change the GraphQL schema."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Update our entities to implement `SearchResult`:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Update `GalaxyService` to provide search:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "We are able to use the `Character` interface because the `SearchResult` union contains members that implement it."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Mutations"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Mutations are used when data is created, updated or deleted."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Let's now add the ability to add and delete heroes to our GraphQL API."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Enter the following into the `GraphQL UI` to insert a `Hero`:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "By using this mutation we have created a `Hero` entity in our service."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Notice how in the response we have retrieved the `name` and `surname`\n"
"of the created Hero. This is because we selected to retrieve\n"
"these fields in the response within the `{ }` in the mutation query.\n"
"This can easily be a server side generated field that the client may require."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Let's now try deleting an entry:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Similar to the `createHero` mutation method we also retrieve the `name` and\n"
"`surname` of the hero we have deleted which is defined in `{ }`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Subscriptions"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Subscriptions allow you to subscribe to a query. It allows you to receive events and is using web sockets.\n"
"See the https://github.com/enisdenjo/graphql-ws/blob/master/PROTOCOL.md[GraphQL over WebSocket Protocol] spec for more details."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Example: We want to know when new Heroes are being created:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The `Multi` processor that will broadcast any new ``Hero``es"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "When adding a new `Hero`, also broadcast it"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Make the stream available in the schema and as a WebSocket during runtime"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Any client that now connect to the `/graphql` WebSocket connection will receive events on new Heroes being created:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Creating Queries by fields"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Queries can also be done on individual fields. For example, let's\n"
"create a method to query heroes by their last name."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"By using the `@DefaultValue` annotation we have determined that the surname value\n"
"will be `Skywalker` when the parameter is not provided."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Test the following queries with the `GraphQL UI`:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Context"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "You can get information about the GraphQL request anywhere in your code, using this experimental, SmallRye specific feature:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "or as a parameter in your method if you are in the `GraphQLApi` class, for instance:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The context object allows you to get:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "the original request (Query/Mutation)"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "the arguments"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "the path"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "the selected fields"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "any variables"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "This allows you to optimize the downstream queries to the datastore."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/smallrye/graphql/api/Context.html[JavaDoc] for more details."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "GraphQL-Java"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "This context object also allows you to fall down to the underlying https://www.graphql-java.com/[graphql-java] features by using the leaky abstraction:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "You can also get access to the underlying `graphql-java` during schema generation, to add your own features directly:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "By using the `@Observer` you can add anything to the Schema builder."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "For the Observer to work, you need to enable events. In `application.properties`, add the following: `quarkus.smallrye-graphql.events.enabled=true`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Adapting"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Adapt to Scalar"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"Another SmallRye specific experimental feature, allows you to map an existing scalar (that is mapped by the implementation to a certain Java type) to another type,\n"
"or to map complex object, that would typically create a `Type` or `Input` in GraphQL, to an existing scalar."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Adapting an existing Scalar to another type:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Above will adapt the `Long` java type to an `Int` Scalar type, rather than the https://download.eclipse.org/microprofile/microprofile-graphql-1.0/microprofile-graphql.html#scalars[default] `BigInteger`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Adapting a complex object to a Scalar type:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "This will, rather than creating a `Type` or `Input` in GraphQL, map to a String scalar."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"To be able to do the above, the `Phone` object needs to have a constructor that takes a String (or `Int` / `Date` / etc.),\n"
"or have a setter method for the String  (or `Int` / `Date` / etc.),\n"
"or have a `fromString` (or `fromInt` / `fromDate` - depending on the Scalar type) static method."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "For example:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "See more about the `@AdaptToScalar` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptToScalar.html[JavaDoc]."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Adapt with"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Another option for more complex cases is to provide an Adapter. You can then do the mapping yourself in the adapter."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "See more about the `AdaptWith` feature in the https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.5.0/io/smallrye/graphql/api/AdaptWith.html[JavaDoc]."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "`@JsonbTypeAdapter` is also supported."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Built-in support for Maps"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"By default, due to the fact that maps are hard to model in a schema (as the keys and values can be dynamic at runtime) GraphQL does not support maps by default.\n"
"Using the above adaption, `Map` support is added for Quarkus and are mapped to an `Entry<Key,Value>` with an optional key parameter.\n"
"This allows you to return a map, and optionally query it by key."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Example:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The key and value object can be any of Enum, Scalar or Complex object"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "You can now query the whole map with all the fields:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "This will return a result like this for example:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "You can also query by key"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "That will return only that value in the map:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The default map adapter can to overridden with our own implementation."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Error code"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "You can add an error code on the error output in the GraphQL response by using the (SmallRye specific) `@ErrorCode`:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "When `SomeBusinessException` occurs, the error output will contain the Error code:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "The error code"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Additional Notes"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"If you are using the `smallrye-graphql` extension and the `micrometer` metrics extension is present and metrics are\n"
"enabled, you may encounter a `java.lang.NoClassDefFoundError` as some versions of the `smallrye-graphql` extension\n"
"have runtime requirements on the Microprofile Metrics API.  Add the following MicroProfile Metrics API dependency\n"
"to resolve the issue:"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Conclusion"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"SmallRye GraphQL enables clients to retrieve the exact data that is\n"
"required preventing `Over-fetching` and `Under-fetching`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid ""
"The GraphQL API can be expanded without breaking previous queries enabling easy\n"
"API `evolution`."
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "Configuration Reference"
msgstr ""

#: _versions/3.27/guides/smallrye-graphql.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
