msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/rest.adoc
msgid "Writing REST Services with Quarkus REST (formerly RESTEasy Reactive)"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "This guide explains how to write REST Services with Quarkus REST in Quarkus."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"This is the reference guide for Quarkus REST.\n"
"For a more lightweight introduction, please refer to the xref:rest-json.adoc[Writing JSON REST services guides]."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "What is Quarkus REST?"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Quarkus REST is a new link:{jaxrsspec}[Jakarta REST (formerly known as JAX-RS)]\n"
"implementation written from the ground up to work on our\n"
"common https://vertx.io/[Vert.x] layer and is thus fully reactive, while also being very tightly integrated with\n"
"Quarkus and consequently moving a lot of work to build time."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"You should be able to use it in place of any Jakarta REST implementation, but on top of that it has\n"
"great performance for both blocking and non-blocking endpoints, and a lot of new features on top\n"
"of what Jakarta REST provides."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Writing endpoints"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Getting started"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Add the following import to your build file:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "You can now write your first endpoint in the `org.acme.rest.Endpoint` class:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Terminology"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "REST"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "https://en.wikipedia.org/wiki/Representational_state_transfer[REpresentational State Transfer]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Endpoint"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Java method which is called to serve a REST call"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "URL / URI (Uniform Resource Locator / Identifier)"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Used to identify the location of REST resources (https://tools.ietf.org/html/rfc7230#section-2.7[specification])"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Resource"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Represents your domain object. This is what your API serves and modifies. Also called an `entity` in Jakarta REST."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Representation"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "How your resource is represented on the wire, can vary depending on content types"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Content type"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Designates a particular representation (also called a media type), for example `text/plain` or `application/json`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "HTTP"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Underlying wire protocol for routing REST calls (see https://tools.ietf.org/html/rfc7230[HTTP specifications])"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "HTTP request"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The request part of the HTTP call, consisting of an HTTP method, a target URI, headers and an optional message body"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "HTTP response"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The response part of the HTTP call, consisting of an HTTP response status, headers and an optional message body"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Declaring endpoints: URI mapping"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Any class annotated with a link:{jaxrsapi}/jakarta/ws/rs/Path.html[`@Path`] annotation can have its methods exposed as REST endpoints,\n"
"provided they have an HTTP method annotation (see below)."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"That link:{jaxrsapi}/jakarta/ws/rs/Path.html[`@Path`] annotation defines the URI prefix under which those methods will be exposed. It can\n"
"be empty, or contain a prefix such as `rest` or `rest/V1`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Each exposed endpoint method can in turn have another link:{jaxrsapi}/jakarta/ws/rs/Path.html[`@Path`] annotation which adds to its containing\n"
"class annotation. For example, this defines a `rest/hello` endpoint:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "See <<uri-parameters,URI parameters>> for more information about URI mapping."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "You can set the root path for all rest endpoints using the `@ApplicationPath` annotation, as shown below."
msgstr ""

#: _versions/3.27/guides/rest.adoc
#, fuzzy
msgid ""
"This will cause all rest endpoints to be resolve relative to `/api`, so the endpoint above with `@Path(\"rest\")` would\n"
"be accessible at `/api/rest/`. You can also set the <<quarkus-rest-common_quarkus-rest-path,`quarkus.rest.path`>> build time property to set the root path if you\n"
"don't want to use an annotation."
msgstr "これにより、残りのエンドポイントはすべて `/api` からの相対パスで解決されるようになり、 上記の `@Path(\"rest\")` のエンドポイントは `/api/rest/` でアクセスできるようになります。また、アノテーションを使用しない場合は xref:quarkus-rest-common_quarkus-rest-path[quarkus.rest.path] アノテーションを使用したくない場合は、ルート・パスを設定するために build time プロパティを設定することもできます。"

#: _versions/3.27/guides/rest.adoc
msgid "Declaring endpoints: HTTP methods"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Each endpoint method must be annotated with one of the following annotations, which defines which HTTP\n"
"method will be mapped to the method:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "HTTP method annotations"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Annotation"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Usage"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/GET.html[`@GET`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Obtain a resource representation, should not modify state, link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.1[HTTP docs])"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/HEAD.html[`@HEAD`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Obtain metadata about a resource, similar to `GET` with no body (link:{httpspec}#section-4.3.2[HTTP docs])"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/POST.html[`@POST`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Create a resource and obtain a link to it (link:{httpspec}#section-4.3.3[HTTP docs])"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/PUT.html[`@PUT`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Replace a resource or create one, should be link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.4[HTTP docs])"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/DELETE.html[`@DELETE`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Delete an existing resource, link:{httpspec}#section-4.2.2[idempotent]  (link:{httpspec}#section-4.3.5[HTTP docs])"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/OPTIONS.html[`@OPTIONS`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Obtain information about a resource, link:{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.7[HTTP docs])"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/PATCH.html[`@PATCH`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Update a resource, or create one, not link:{httpspec}#section-4.2.2[idempotent] (https://tools.ietf.org/html/rfc5789#section-2[HTTP docs])"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"You can also declare other HTTP methods by declaring them as an annotation with the\n"
"link:{jaxrsapi}/jakarta/ws/rs/HttpMethod.html[`@HttpMethod`] annotation:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Declaring endpoints: representation / content types"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Each endpoint method may consume or produce specific resource representations, which are indicated by\n"
"the HTTP link:{httpspec}#section-3.1.1.5[`Content-Type`] header, which in turn contains\n"
"link:{httpspec}#section-3.1.1.1[MIME (Media Type)] values, such as the following:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`text/plain` which is the default for any endpoint returning a `String`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`text/html` for HTML (such as with xref:qute.adoc[Qute templating])"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`application/json` for a <<json,JSON REST endpoint>>"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`text/*` which is a sub-type wildcard for any text media type"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`\\*/*` which is a wildcard for any media type"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"You may annotate your endpoint class with the link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`@Produces`]\n"
"or link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[`@Consumes`] annotations, which\n"
"allow you to specify one or more media types that your endpoint may accept as HTTP request body\n"
"or produce as HTTP response body. Those class annotations apply to each method."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Any method may also be annotated with the link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`@Produces`]\n"
"or link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[`@Consumes`] annotations, in which\n"
"case they override any eventual class annotation."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"The link:{jaxrsapi}/jakarta/ws/rs/core/MediaType.html[`MediaType`] class has many constants you\n"
"can use to point to specific pre-defined media types."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "See the <<negotiation>> section for more information."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Accessing request parameters"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"don't forget to configure your compiler to generate parameter name information with `-parameters` (javac)\n"
"or `<parameters>` or `<maven.compiler.parameters>` (https://maven.apache.org/plugins/maven-compiler-plugin/compile-mojo.html#parameters[Maven])."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The following HTTP request elements may be obtained by your endpoint method:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "HTTP request parameter annotations"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "HTTP element"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "[[path-parameter]]Path parameter"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`] (or nothing)"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"URI template parameter (simplified version of the https://tools.ietf.org/html/rfc6570[URI Template specification]),\n"
"see <<uri-parameters,URI parameters>> for more information."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Query parameter"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestQuery.html[`@RestQuery`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The value of a https://tools.ietf.org/html/rfc3986#section-3.4[URI query parameter]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Header"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestHeader.html[`@RestHeader`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The value of an https://tools.ietf.org/html/rfc7230#section-3.2[HTTP header]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Cookie"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestCookie.html[`@RestCookie`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The value of an https://tools.ietf.org/html/rfc6265#section-4.2[HTTP cookie]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Form parameter"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The value of an https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST[HTTP URL-encoded FORM]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Matrix parameter"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestMatrix.html[`@RestMatrix`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The value of an https://tools.ietf.org/html/rfc3986#section-3.3[URI path segment parameter]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"For each of those annotations, you may specify the name of the element they refer to,\n"
"otherwise, they will use the name of the annotated method parameter."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "If a client made the following HTTP call:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Then you could obtain all the various parameters with this endpoint method:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"The link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`]\n"
"annotation is optional: any parameter whose name matches an existing URI\n"
"template variable will be automatically assumed to have link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestPath.html[`@RestPath`]."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"You can also use any of the Jakarta REST annotations link:{jaxrsapi}/jakarta/ws/rs/PathParam.html[`@PathParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/QueryParam.html[`@QueryParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/HeaderParam.html[`@HeaderParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/CookieParam.html[`@CookieParam`],\n"
"link:{jaxrsapi}/jakarta/ws/rs/FormParam.html[`@FormParam`] or\n"
"link:{jaxrsapi}/jakarta/ws/rs/MatrixParam.html[`@MatrixParam`] for this,\n"
"but they require you to specify the parameter name."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "See <<parameter-mapping>> for more advanced use-cases."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"When an exception occurs in Quarkus REST request parameter handling code, the exception is not printed by default to the log (for security reasons).\n"
"This can sometimes make it hard to understand why certain HTTP status codes are returned (as the Jakarta REST mandates the use of non-intuitive error codes in various cases).\n"
"In such cases, users are encouraged to set the logging level for the `org.jboss.resteasy.reactive.server.handlers.ParameterHandler` category to `DEBUG` like so:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Grouping parameters in a custom class"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"You can group your request parameters in a container class instead of declaring them as method parameters to you endpoint,\n"
"so we can rewrite the previous example like this:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`BeanParam` is required to comply with the Jakarta REST specification so that libraries like OpenAPI can introspect the parameters."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Record classes are also supported, so you could rewrite the previous example as a record:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "[[declaring-uri-parameters]] Declaring URI parameters"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"You can declare URI parameters and use regular expressions in your path, so for instance\n"
"the following endpoint will serve requests for `/hello/stef/23` and `/hello` but not\n"
"`/hello/stef/0x23`:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Accessing the request body"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Any method parameter with no annotation will receive the method body.footnote:[Unless it is a\n"
"<<path-parameter,URI template parameter>> or a <<context-objects,context object>>.], after it has been mapped from\n"
"its HTTP representation to the Java type of the parameter."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The following parameter types will be supported out of the box:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Request body parameter types"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Type"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jdkapi}/java/io/File.html[`File`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The entire request body in a temporary file"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`byte[]`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The entire request body, not decoded"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`char[]`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The entire request body, decoded"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jdkapi}/java/lang/String.html[`String`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jdkapi}/java/io/InputStream.html[`InputStream`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The request body in a blocking stream"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jdkapi}/java/io/Reader.html[`Reader`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "All Java primitives and their wrapper classes"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Java primitive types"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jdkapi}/java/math/BigDecimal.html[`BigDecimal`], link:{jdkapi}/java/math/BigInteger.html[`BigInteger`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Large integers and decimals."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"link:{jsonpapi}/jakarta/json/JsonArray.html[`JsonArray`], link:{jsonpapi}/jakarta/json/JsonObject.html[`JsonObject`],\n"
"link:{jsonpapi}/jakarta/json/JsonStructure.html[`JsonStructure`], link:{jsonpapi}/jakarta/json/JsonValue.html[`JsonValue`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "JSON value types"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{vertxapi}/io/vertx/core/buffer/Buffer.html[`Buffer`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Vert.x Buffer"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "any other type"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Will be <<json,mapped from JSON to that type>>"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "You can add support for more <<readers-writers,body parameter types>>."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Handling Multipart Form data"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"To handle HTTP requests that have `multipart/form-data` as their content type, you can use the regular\n"
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] annotation, but we have special types\n"
"that allow you to access the parts as files or as entities.\n"
"Let us look at an example of its use."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Assuming an HTTP request containing a file upload, a JSON entity and a form value containing a string description, we could write\n"
"the following endpoint:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"The `description` parameter will contain the data contained in the part of HTTP request called `description` (because\n"
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestForm.html[`@RestForm`] does not define a value, the field name is used),\n"
"while the `file` parameter will contain data about the uploaded file in the `image` part of HTTP request, and\n"
"the `person` parameter will read the `Person` entity using the `JSON` <<json,body reader>>."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"The size of every part in a multipart request must conform to the value of `quarkus.http.limits.max-form-attribute-size`, for which the default is 2048 bytes.\n"
"Any request with a part of a size exceeding this configuration will result in HTTP status code 413."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/multipart/FileUpload.html[`FileUpload`]\n"
"provides access to various metadata of the uploaded file. If however all you need is a handle to the uploaded file, `java.nio.file.Path` or `java.io.File` could be used."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "If you need access to all uploaded files for all parts regardless of their names, you can do it with `@RestForm(FileUpload.ALL) List<FileUpload>`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PartType.html[`@PartType`] is used to aid\n"
"in deserialization of the corresponding part of the request into the desired Java type. It is only required if\n"
"you need to use a <<readers-writers,special body parameter type>> for that particular parameter."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Just like for any other request parameter type, you can also group them into a <<parameter-grouping,container class>>."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"When handling file uploads, it is very important to move the file to permanent storage (like a database, a dedicated file system or a cloud storage) in your code that handles the POJO.\n"
"Otherwise, the file will no longer be accessible when the request terminates.\n"
"Moreover, if `quarkus.http.body.delete-uploaded-files-on-end` is set to true, Quarkus will delete the uploaded file when the HTTP response is sent. If the setting is disabled,\n"
"the file will reside on the file system of the server (in the directory defined by the `quarkus.http.body.uploads-directory` configuration option), but as the uploaded files are saved\n"
"with a UUID file name and no additional metadata is saved, these files are essentially a random dump of files."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "When a Resource method needs to handle various types of multipart requests, then the `org.jboss.resteasy.reactive.server.multipart.MultipartFormDataInput` method type can be used as provides access to all the parts of the request."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The following code shows a simple example where we iterate over the parts and return a list of aggregated data:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Handling malformed input"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"As part of reading the multipart body, Quarkus REST invokes the proper MessageBodyReaderlink:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`] for each part of the request.\n"
"If an `IOException` occurs for one of these parts (for example if Jackson was unable to deserialize a JSON part), then a `org.jboss.resteasy.reactive.server.multipart.MultipartPartReadingException` is thrown.\n"
"If this exception is not handled by the application as mentioned in <<exception-mapping>>, an HTTP 400 response is returned by default."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Multipart output"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Similarly, Quarkus REST can produce Multipart Form data to allow users download files from the server. For example, we could write a POJO\n"
"that will hold the information we want to expose as:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "And then expose this POJO via a Resource like so:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Additionally, you can also manually append the parts of the form using the class `MultipartFormDataOutput` as:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "This last approach allows you adding extra headers to the output part."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "For the time being, returning Multipart data is limited to be blocking endpoints."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Returning a response body"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"In order to return an HTTP response, simply return the resource you want from your method. The method\n"
"return type and its optional content type will be used to decide how to serialise it to the HTTP\n"
"response (see the <<negotiation>> section for more advanced information)."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"You can return any of the pre-defined types that you can read from the <<resource-types,HTTP response>>,\n"
"and any other type will be mapped <<json,from that type to JSON>>."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "In addition, the following return types are also supported:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Additional response body parameter types"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jdkapi}/java/nio/file/Path.html[`Path`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The contents of the file specified by the given path"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/PathPart.html[`PathPart`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The partial contents of the file specified by the given path"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/FilePart.html[`FilePart`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The partial contents of a file"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{vertxapi}/io/vertx/core/file/AsyncFile.html[`AsyncFile`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Vert.x AsyncFile, which can be in full, or partial"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Alternately, you can also return a <<reactive,reactive type>> such as link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`],\n"
"link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] or\n"
"link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`]\n"
"that resolve to one of the mentioned return types."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Setting other response properties"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Manually setting the response"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"If you need to set more properties on the HTTP response than just the body, such as the status code\n"
"or headers, you can make your method return `org.jboss.resteasy.reactive.RestResponse` from a resource method.\n"
"An example of this could look like:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"You can also use the Jakarta REST type link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`] but it is\n"
"not strongly typed to your entity."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Using annotations"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Alternatively, if you only need to set the status code and / or HTTP headers with static values, you can use `@org.jboss.resteasy.reactive.ResponseStatus` and /or `ResponseHeader` respectively.\n"
"An example of this could look like:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Redirect support"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"When handling a `@POST`, `@PUT` or `@DELETE` endpoint, it is common practice to redirect to a `@GET` endpoint after the action has been performed to allow the user to reload the page without triggering the action a second time.\n"
"There are multiple ways to achieve this."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Using RestResponse"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Using `RestResponse` as the return type while making sure the proper redirection URI is created can be done as in the following example:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Using RedirectException"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Users can also throw `jakarta.ws.rs.RedirectionException` from a method body to get Quarkus REST to perform the desired redirect."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Async/reactive support"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"If your endpoint method needs to accomplish an asynchronous or reactive task before\n"
"being able to answer, you can declare your method to return the\n"
"link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] type (from https://smallrye.io/smallrye-mutiny/[Mutiny]), in which\n"
"case the current HTTP request will be automatically suspended after your method, until\n"
"the returned link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] instance resolves to a value,\n"
"which will be mapped to a response exactly according to the previously described rules:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"This allows you to not block the event-loop thread while the book is being fetched from the\n"
"database, and allows Quarkus to serve more requests until your book is ready to\n"
"be sent to the client and terminate this request.\n"
"See <<execution-model,Execution Model documentation>> for more information."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"The link:{jdkapi}/java/util/concurrent/CompletionStage.html[`CompletionStage`] return\n"
"type is also supported."
msgstr ""

#: _versions/3.27/guides/rest.adoc
#, fuzzy
msgid "Request cancellation"
msgstr "キャンセルのお願い"

#: _versions/3.27/guides/rest.adoc
#, fuzzy
msgid ""
"Async endpoints that return `Uni` support request cancellation, which means that if the underlying HTTP connection is closed for whatever reason,\n"
"the request pipeline defined by the returned `Uni` is also cancelled. This can be very useful in avoiding unnecessary work on the server\n"
"when the client isn't going to use the response anyway."
msgstr "`Uni` を返す非同期エンドポイントはリクエストキャンセルをサポートしており、何らかの理由で HTTP 接続が切断されると、返された `Uni` で定義されたリクエストパイプラインもキャンセルされます。これは、クライアントがレスポンスを使用しない場合に、サーバーでの不要な作業を避けるために非常に便利です。"

#: _versions/3.27/guides/rest.adoc
#, fuzzy
msgid ""
"If instead of cancelling the pipeline, it should be completed regardless of the state of the HTTP connection, Quarkus REST provides the `org.jboss.resteasy.reactive.server.Cancellable` annotation\n"
"which can be applied to REST classes or methods to control the cancellation behavior."
msgstr "パイプラインをキャンセルする代わりに、HTTP接続の状態に関係なくパイプラインを完了する必要がある場合、Quarkus RESTには `org.jboss.resteasy.reactive.server.Cancellable` アノテーションが用意されています。このアノテーションをRESTクラスまたはメソッドに適用して、キャンセル動作を制御できます。"

#: _versions/3.27/guides/rest.adoc
msgid "Streaming support"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"If you want to stream your response element by element, you can make your endpoint method return a\n"
"link:{mutinyapi}/io/smallrye/mutiny/Multi.html[`Multi`] type (from https://smallrye.io/smallrye-mutiny/[Mutiny]).\n"
"This is especially useful for streaming text or binary data."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"This example, using https://github.com/quarkiverse/quarkus-reactive-messaging-http[Reactive Messaging HTTP] shows how to stream\n"
"text data:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Response filters are **not** invoked on streamed responses, because they would give a false\n"
"impression that you can set headers or HTTP status codes, which is not true after the initial\n"
"response.\n"
"Exception mappers are also not invoked because part of the response may already have been written."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Customizing headers and status"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "If you need to set custom HTTP headers and / or the HTTP response, then you can return `org.jboss.resteasy.reactive.RestMulti` instead, like this:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"In more advanced cases where the headers and / or status can only be obtained from the results of an async call, the `RestMulti.fromUniResponse` needs to be used.\n"
"Here is an example of such a use case:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Concurrent stream element processing"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"By default, `RestMulti` ensures serial/sequential order of the items/elements produced by the wrapped\n"
"`Multi` by using a value of 1 for the demand signaled to the publishers. To enable concurrent\n"
"processing/generation of multiple items, use `withDemand(long demand)`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Using a demand higher than 1 is useful when multiple items shall be returned and the production of each\n"
"item takes some time, i.e. when parallel/concurrent production improves the service response time. Be\n"
"aware the concurrent processing also requires more resources and puts a higher load on services or\n"
"resources that are needed to produce the items. Also consider using `Multi.capDemandsTo(long)` and\n"
"`Multi.capDemandsUsing(LongFunction)`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"The example below produces 5 (JSON) strings, but the _order_ of the strings in the returned JSON array\n"
"is not guaranteed. The below example also works for JSON objects and not just simple types."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Example response, the order is non-deterministic."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Returning multiple JSON objects"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"By default, `RestMulti` returns items/elements produced by the wrapped `Multi` as a JSON array, if the\n"
"media-type is `application/json`. To return separate JSON objects that are not wrapped in a JSON array,\n"
"use `encodeAsArray(false)` (`encodeAsArray(true)` is the default). Note that streaming multiple\n"
"objects this way requires a slightly different parsing on the client side, but objects can be parsed and\n"
"consumed as they appear without having to deserialize a possibly huge result at once."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The example below produces 5 (JSON) strings, that are not wrapped in an array, like this:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Server-Sent Event (SSE) support"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"If you want to stream JSON objects in your response, you can use\n"
"https://html.spec.whatwg.org/multipage/server-sent-events.html[Server-Sent Events]\n"
"by just annotating your endpoint method with\n"
"link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`@Produces(MediaType.SERVER_SENT_EVENTS)`]\n"
"and specifying that each element should be <<json,serialised to JSON>> with\n"
"`@RestStreamElementType(MediaType.APPLICATION_JSON)`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Sometimes it's useful to create a customized SSE message, for example if you need to specify the `event` field of a SSE message to distinguish various event types.\n"
"A resource method may return `Multi<jakarta.ws.rs.sse.OutboundSseEvent>` and an injected `jakarta.ws.rs.sse.Sse` can be used to create `OutboundSseEvent` instances."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Inject the server-side entry point for creating ``OutboundSseEvent``s."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Create a new outbound event builder."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Set the event name, i.e. the value of the `event` field of a SSE message."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Set the data, i.e. the value of the `data` field of a SSE message."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Manipulation of the returned HTTP headers and status code is not possible via `RestMulti.fromUniResponse` because when returning SSE responses the headers and status code cannot be delayed until the response becomes available."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Controlling HTTP Caching features"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Quarkus REST provides the link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`]\n"
"and link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`] annotations to facilitate\n"
"handling HTTP caching semantics, i.e. setting the 'Cache-Control' HTTP header."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"These annotations can be placed either on a Resource Method or a Resource Class (in which case it applies to all Resource Methods of the class that do *not* contain the same annotation) and allow users\n"
"to return domain objects and not have to deal with building up the `Cache-Control` HTTP header explicitly."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"While link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/Cache.html[`@Cache`]\n"
"builds a complex `Cache-Control` header, link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/NoCache.html[`@NoCache`]\n"
"is a simplified notation to say that you don't want anything cached; i.e. `Cache-Control: nocache`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "More information on the `Cache-Control` header and be found in link:https://datatracker.ietf.org/doc/html/rfc7234[RFC 7234]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Accessing context objects"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"There are a number of contextual objects that the framework will give you, if your endpoint\n"
"method takes parameters of the following type:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Contextual objects"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/HttpHeaders.html[`HttpHeaders`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "All the request headers"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/container/ResourceInfo.html[`ResourceInfo`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Information about the current endpoint method and class (requires reflection)"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/SecurityContext.html[`SecurityContext`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Access to the current user and roles"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/SimpleResourceInfo.html[`SimpleResourceInfo`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Information about the current endpoint method and class (no reflection required)"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/UriInfo.html[`UriInfo`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Provides information about the current endpoint and application URI"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/Application.html[`Application`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Advanced: Current Jakarta REST application class"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/Configuration.html[`Configuration`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Advanced: Configuration about the deployed Jakarta REST application"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/ext/Providers.html[`Providers`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Advanced: Runtime access to Jakarta REST providers"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/Request.html[`Request`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Advanced: Access to the current HTTP method and <<preconditions>>"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/core/ResourceContext.html[`ResourceContext`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Advanced: access to instances of endpoints"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerRequestContext.html[`ServerRequestContext`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Advanced: Quarkus REST access to the current request/response"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/sse/Sse.html[`Sse`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Advanced: Complex SSE use-cases"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{vertxapi}/io/vertx/core/http/HttpServerRequest.html[`HttpServerRequest`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Advanced: Vert.x HTTP Request"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{vertxapi}/io/vertx/core/http/HttpServerResponse.html[`HttpServerResponse`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Advanced: Vert.x HTTP Response"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "For example, here is how you can return the name of the currently logged-in user:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"You can also inject those context objects using\n"
"{injectapi}/jakarta/inject/Inject.html[`@Inject`] on fields of the same\n"
"type:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Or even on your endpoint constructor:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "JSON serialisation"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Instead of importing `io.quarkus:quarkus-rest`, you can import either of the following modules to get support for JSON:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "GAV"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`io.quarkus:quarkus-rest-jackson`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "https://github.com/FasterXML/jackson[Jackson support]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`io.quarkus:quarkus-rest-jsonb`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "https://github.com/jakartaee/jsonb-api/[JSON-B support]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"In both cases, importing those modules will allow HTTP message bodies to be read from JSON\n"
"and serialised to JSON, for <<resource-types,all the types not already registered with a more specific\n"
"serialisation>>."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Jackson-specific features"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Exception handling"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"By default, Quarkus provides a built-in `ExceptionMapper` for `MismatchedInputException` which returns an HTTP 400 status code\n"
"along with a good error message in Dev and Test modes, about what went wrong during serialization of an entity."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"There are situations where various Jackson related exceptions need to handled in a uniform way.For example, the application may need to handle all `JsonMappingException` the same way.\n"
"This becomes a problem when taking JAX-RS / Jakarta REST rules into account, because the exception mapper `ExceptionMapper` for `MismatchedInputException` would be used instead of the user provide\n"
"`ExceptionMapper` for `JsonMappingException` (as `MismatchedInputException` is a subtype of `JsonMappingException`)."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "One solution for this case is to configure the following:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "which essentially makes Quarkus ignore the `ExceptionMapper` for `MismatchedInputException` completely."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Secure serialization"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"When used with Jackson to perform JSON serialization, Quarkus REST provides the ability to limit the set of fields that are serialized based on the roles of the current user.\n"
"This is achieved by simply annotating the fields (or getters) of the POJO being returned with `@io.quarkus.resteasy.reactive.jackson.SecureField`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "A simple example could be the following:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Assume we have a POJO named `Person` which looks like so:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"The `io.quarkus.resteasy.reactive.jackson.SecureField.rolesAllowed` property supports xref:config-reference.adoc#property-expressions[property expressions]\n"
"exactly in the same fashion the `jakarta.annotation.security.RolesAllowed` annotation does. For more information, please\n"
"refer to the xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[Standard security annotations]\n"
"section of the Authorization of web endpoints guide."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "A very simple Jakarta REST Resource that uses `Person` could be:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The `@SecureField` annotation is only effective when Quarkus recognizes that produced content type is the 'application/json' type."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Currently you cannot use the `@SecureField` annotation to secure your data returned from resource methods returning the `io.smallrye.mutiny.Multi` reactive type."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"All resource methods returning data secured with the `@SecureField` annotation should be tested.\n"
"Please make sure data are secured as you intended.\n"
"Quarkus always attempts to detect fields annotated with the `@SecureField` annotation,\n"
"however it may fail to infer returned type and miss the `@SecureField` annotation instance.\n"
"If that happens, please explicitly enable secure serialization on the resource endpoint with the `@EnableSecureSerialization` annotation."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Assuming security has been set up for the application (see our xref:security-overview.adoc[guide] for more details), when a user with the `admin` role\n"
"performs an HTTP GET on `/person/1` they will receive:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "as the response."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Any user however that does not have the `admin` role will receive:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"No additional configuration needs to be applied for this secure serialization to take place. However, users can use the `@io.quarkus.resteasy.reactive.jackson.EnableSecureSerialization` and `@io.quarkus.resteasy.reactive.jackson.DisableSecureSerialization`\n"
"annotation to opt in or out for specific Jakarta REST Resource classes or methods."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Configuration expressions set with the `SecureField.rolesAllowed` property are validated during application startup even when the `@io.quarkus.resteasy.reactive.jackson.DisableSecureSerialization` annotation is used."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "@JsonView support"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Jakarta REST methods can be annotated with https://fasterxml.github.io/jackson-annotations/javadoc/2.10/com/fasterxml/jackson/annotation/JsonView.html[@JsonView]\n"
"in order to customize the serialization of the returned POJO, on a per method-basis. This is best explained with an example."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "A typical use of `@JsonView` is to hide certain fields on certain methods. In that vein, let's define two views:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Let's assume we have the `User` POJO on which we want to hide some field during serialization. A simple example of this is:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Depending on the Jakarta REST method that returns this user, we might want to exclude the `id` field from serialization.\n"
"For example, you might want an insecure method to not expose this field.\n"
"The way we can achieve that in Quarkus REST is shown in the following example:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"When the result of the `userPublic` method is serialized, the `id` field will not be contained in the response as the `Public` view does not include it.\n"
"The result of `userPrivate` however will include the `id` as expected when serialized."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`@JsonView` is also supported for deserializing the request body. So for example in the following code:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "inside the `create` method, `user` would only contain the value of `name` while `id` would always be `null` (regardless if the JSON request contained it)"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Reflection-free Jackson serialization and deserialization"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"By default, Jackson uses reflection to convert objects to and from JSON.\n"
"However, {project-name} follows a build-time optimization philosophy.\n"
"To align with this approach, configure your application to minimize reflection by using the link:https://quarkus.io/extensions/io.quarkus/quarkus-rest-jackson[`quarkus-rest-jackson`] extension."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "This feature is introduced as a Technology Preview and is disabled by default."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"By eliminating reliance on reflection during deserialization, applications can achieve better performance and reduced memory consumption, particularly for native applications where reflection can introduce overhead.\n"
"If you implement this feature, run tests to assess its effect on your applications."
msgstr ""

#: _versions/3.27/guides/rest.adoc
#, fuzzy
msgid "To enable this feature, set the <<quarkus-rest-jackson_quarkus-rest-jackson-optimization-enable-reflection-free-serializers,`quarkus.rest.jackson.optimization.enable-reflection-free-serializers`>> configuration property to `true`:"
msgstr "この機能を有効にするには xref:quarkus-rest-jackson_quarkus-rest-jackson-optimization-enable-reflection-free-serializers[quarkus.rest.jackson.optimization.enable-reflection-free-serializers] 設定プロパティを `true` に設定します："

#: _versions/3.27/guides/rest.adoc
msgid "`quarkus.rest.jackson.optimization.enable-reflection-free-serializers=true`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Setting this property applies reflection-free optimization to deserialization and serialization."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "When enabled, {project-name} generates `StdSerializer` and `StdDeserializer` implementations at build time for each class requiring JSON conversion. The application then processes objects returned by REST endpoints using these generated serializers and deserializers, eliminating reliance on reflection and improving performance."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Developers can further customize JSON processing by implementing the `ObjectMapperCustomizer` interface. This interface allows fine-grained control over the `ObjectMapper`, enabling the registration of custom serializers and deserializers while ensuring compatibility with the reflection-free optimization. If additional configuration is needed, implement an `ObjectMapperCustomizer` bean and register any necessary modules or settings."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Completely customized per method serialization/deserialization"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "There are times when you need to completely customize the serialization/deserialization of a POJO on a per Jakarta REST method basis or on a per Jakarta REST resource basis. For such use cases, you can use the `@io.quarkus.resteasy.reactive.jackson.CustomSerialization` and `@io.quarkus.resteasy.reactive.jackson.CustomDeserialization` annotations in the REST method or in the REST resource at class level. These annotations allow you to fully configure the `com.fasterxml.jackson.databind.ObjectWriter`/`com.fasterxml.jackson.databind.ObjectReader`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Here is an example use case to customize the `com.fasterxml.jackson.databind.ObjectWriter`:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "where `UnquotedFields` is a `BiFunction` defined as so:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Essentially what this class does is force Jackson to not include quotes in the field names."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "It is important to note that this customization is only performed for the serialization of the Jakarta REST methods that use `@CustomSerialization(UnquotedFields.class)`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Following the previous example, let's now customize the `com.fasterxml.jackson.databind.ObjectReader` to read JSON requests with unquoted field names:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "where `SupportUnquotedFields` is a `BiFunction` defined as so:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "XML serialisation"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "To enable XML support, add the `quarkus-rest-jaxb` extension to your project."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`io.quarkus:quarkus-rest-jaxb`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "https://javaee.github.io/jaxb-v2/[XML support]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Importing this module will allow HTTP message bodies to be read from XML\n"
"and serialised to XML, for <<resource-types,all the types not already registered with a more specific\n"
"serialisation>>."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The JAXB Quarkus REST extension will automatically detect the classes that are used in the resources and require JAXB serialization. Then, it will register these classes into the default `JAXBContext` which is internally used by the JAXB message reader and writer."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "However, in some situations, these classes cause the `JAXBContext` to fail: for example, when you're using the same class name in different java packages. In these cases, the application will fail at build time and print the JAXB exception that caused the issue, so you can properly fix it. Alternatively, you can also exclude the classes that cause the issue by using the property `quarkus.jaxb.exclude-classes`. When excluding classes that are required by any resource, the JAXB Quarkus REST extension will create and cache a custom `JAXBContext` that will include the excluded class, causing a minimal performance degradance."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"The property `quarkus.jaxb.exclude-classes` accepts a comma separated list of either fully qualified class names\n"
"or package names. Package names must be suffixed by `.*` and all classes in the specified package and its subpackages will be excluded."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "For instance, when setting `quarkus.jaxb.exclude-classes=org.acme.one.Model,org.acme.two.Model,org.acme.somemodel.*`, the following elements are excluded:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The class `org.acme.one.Model`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The class `org.acme.two.Model`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "All the classes in the `org.acme.somemodel` package and its subpackages"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Advanced JAXB-specific features"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "When using the `quarkus-resteasy-reactive-jaxb` extension there are some advanced features that Quarkus REST supports."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Inject JAXB components"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The JAXB Quarkus REST extension will serialize and unserialize requests and responses transparently for users. However, if you need finer grain control over JAXB components, you can inject either the JAXBContext, Marshaller, or Unmarshaller components into your beans:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Quarkus will automatically find all the classes annotated with `@XmlRootElement` and then bound them to the JAXB context."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Customize the JAXB configuration"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "To customize the JAXB configuration for either the JAXB context, and/or the Marshaller/Unmarshaller components, the suggested approach is to define a CDI bean of type `io.quarkus.jaxb.runtime.JaxbContextCustomizer`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "An example where a custom module needs to be registered would look like so:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "It's not necessary to implement all three methods, but only the want you need."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Alternatively, you can provide your own `JAXBContext` bean by doing:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Note that if you provide your custom JAXB context instance, you will need to register the classes you want to use for the XML serialization. This means that Quarkus will not update your custom JAXB context instance with the auto-discovered classes."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Web Links support"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "To enable Web Links support, add the `quarkus-rest-links` extension to your project."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`io.quarkus:quarkus-rest-links`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "https://www.w3.org/wiki/LinkHeader[Web Links support]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Importing this module will allow injecting web links into the response HTTP headers by just annotating your endpoint resources with the `@InjectRestLinks` annotation. To declare the web links that will be returned, you must use the `@RestLink` annotation in the linked methods.\n"
"Assuming a `Record` looks like:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "An example of enabling Web Links support would look like:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "When calling the endpoint `/records` which is defined by the method `getAll` within the above resource using curl, you would get the web links header:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "As this resource does not return a single instance of type `Record`, the links for the methods `get`, `update`, and `delete` are not injected. Now, when calling the endpoint `/records/1`, you would get the following web links:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The `get`, `update`, and `delete` methods use the path param \"id\" and as the field \"id\" exists in the entity type \"Record\", the web link properly populates the value \"1\" in the returned links. In addition to this, we can also generate web links with path params that do not match with any field of the entity type. For example, the following method is using a path param \"text\" and the entity Record does not have any field named \"text\":"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The generated web link for this resource is `Link: <http://localhost:8080/search/{text}>; rel=\"search records by free text\"`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Finally, when calling the `delete` resource, you should not see any web links as the method `delete` is not annotated with the `@InjectRestLinks` annotation."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Programmatically access to the web links registry"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "You can programmatically have access to the web links registry just by injecting the `RestLinksProvider` bean:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Using this injected bean of type `RestLinksProvider`, you can get the links by type using the method `RestLinksProvider.getTypeLinks` or get the links by a concrete instance using the method `RestLinksProvider.getInstanceLinks`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "JSON Hypertext Application Language (HAL) support"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] standard is a simple format to represent web links."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "To enable the HAL support, add the `quarkus-hal` extension to your project. Also, as HAL needs JSON support, you need to add either the `quarkus-rest-jsonb` or the `quarkus-rest-jackson` extension."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`io.quarkus:quarkus-hal`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "After adding the extensions, we can now annotate the REST resources to produce the media type `application/hal+json` (or use RestMediaType.APPLICATION_HAL_JSON). For example:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Now, the endpoints `/records` and `/records/{id}` will accept the media type both `json` and `hal+json` to print the records in Hal format."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "For example, if we invoke the `/records` endpoint using curl to return a list of records, the HAL format will look like as follows:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "When we call a resource `/records/1` that returns only one instance, then the output is:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Finally, you can also provide additional HAL links programmatically in your resource just by returning either `HalCollectionWrapper<T>` (to return a list of entities) or `HalEntityWrapper<T>` (to return a single object) as described in the following example:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "CORS filter"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that\n"
"allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource\n"
"was served."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Quarkus includes a CORS filter at the HTTP layer level.\n"
"For more information about the CORS filters and their usage, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the Quarkus \"Cross-origin resource sharing\" guide."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "More advanced usage"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Here are some more advanced topics that you may not need to know about initially, but\n"
"could prove useful for more complex use cases."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Execution model, blocking, non-blocking"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Quarkus REST is implemented using two main thread types:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Event-loop threads: which are responsible, among other things, for reading bytes from the HTTP request and\n"
"writing bytes back to the HTTP response"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Worker threads: they are pooled and can be used to offload long-running operations"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"The event-loop threads (also called IO threads) are responsible for actually performing all the IO\n"
"operations in an asynchronous way, and to trigger any listener interested in the completion of those\n"
"IO operations."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"By default, the thread Quarkus REST will run endpoint methods on depends on the signature of the method.\n"
"If a method returns one of the following types then it is considered non-blocking, and will be run on the IO thread\n"
"by default:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`io.smallrye.mutiny.Uni`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`io.smallrye.mutiny.Multi`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`java.util.concurrent.CompletionStage`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "`org.reactivestreams.Publisher`"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Kotlin `suspended` methods"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"This 'best guess' approach means most operations will run on the correct thread by default.\n"
"If you are writing reactive code, your method will generally return one of these types and will be executed on the IO thread.\n"
"If you are writing blocking code, your methods will usually return the result directly, and these will be run on a worker thread."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"You can override this behaviour using the\n"
"https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/Blocking.html[`@Blocking`]\n"
"and\n"
"https://javadoc.io/doc/io.smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/annotation/NonBlocking.html[`@NonBlocking`]\n"
"annotations. This can be applied at the method, class or `jakarta.ws.rs.core.Application` level."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The example below will override the default behaviour and always run on a worker thread, even though it returns a `Uni`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Most of the time, there are ways to achieve the same blocking operations in an asynchronous/reactive\n"
"way, using https://smallrye.io/smallrye-mutiny/[Mutiny], https://hibernate.org/reactive/[Hibernate Reactive]\n"
"or any of the xref:quarkus-reactive-architecture.adoc#quarkus-extensions-enabling-reactive[Quarkus Reactive extensions] for example:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"If a method or class is annotated with `jakarta.transaction.Transactional` then it will also be treated as a blocking\n"
"method. This is because JTA is a blocking technology, and is generally used with other blocking technology such as\n"
"Hibernate and JDBC. An explicit `@Blocking` or `@NonBlocking` on the class will override this behaviour."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Overriding the default behaviour"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"If you want to override the default behavior, you can annotate a `jakarta.ws.rs.core.Application` subclass in your application with `@Blocking` or `@NonBlocking`,\n"
"and this will set the default for every method that does not have an explicit annotation."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Behavior can still be overridden on a class or method level by annotating them directly, however,\n"
"all endpoints without an annotation will now follow the default, no matter their method signature."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Exception mapping"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"If your application needs to return non-nominal HTTP codes in error cases, the best is\n"
"to throw exceptions that will result in the proper HTTP response being sent by the\n"
"framework using link:{jaxrsapi}/jakarta/ws/rs/WebApplicationException.html[`WebApplicationException`] or any of its subtypes:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "You can change the log level of the thrown `WebApplicationException` exceptions by configuring the following property `quarkus.log.category.\"WebApplicationException\".level` like so:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"If your endpoint method is delegating calls to another service layer which\n"
"does not know of Jakarta REST, you need a way to turn service exceptions to an\n"
"HTTP response, and you can do that using the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerExceptionMapper.html[`@ServerExceptionMapper`]\n"
"annotation on a method, with one parameter of the exception type you want to handle, and turning\n"
"that exception into a link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse`] (or a\n"
"link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`]):"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "By default, methods annotated with `@ServerExceptionMapper` do **not** run CDI interceptors that apply to the other methods of the class (like ones needed for implementing security method level security)."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Users however can opt into interceptors by adding the corresponding annotations to the method."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "When mapping an exception to a `@ServerExceptionMapper` method, the cause of the exception normally does not come into play."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"However, some exception types in Java only serve as wrappers for other exceptions. Often, checked exceptions are wrapped into `RuntimeException` just to not have them declared in method `throws` parameters.\n"
"Working with `CompletionStage` for example, will require `CompletionException`. There are many such exception types that are just wrappers around the real cause of the exception."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "If you wish to make sure your exception mapper is called for your exception type even when it is wrapped by one of those wrapper exceptions, you can use `@UnwrapException` on the exception wrapper type:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "If you don't control that exception wrapper type, you can place the annotation on any class and specify the exception wrapper types it applies to as annotation parameter:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Εxception mappers defined in REST endpoint classes will only be called if the  exception is thrown in the same class. If you want to define global exception mappers,\n"
"simply define them outside a REST endpoint class:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "You can also declare link:{jaxrsspec}#exceptionmapper[exception mappers in the Jakarta REST way]."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Your exception mapper may declare any of the following parameter types:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Exception mapper parameters"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "An exception type"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Defines the exception type you want to handle"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Any of the <<context-objects,Context objects>>"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/container/ContainerRequestContext.html[`ContainerRequestContext`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "A context object to access the current request"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "It may declare any of the following return types:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Exception mapper return types"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse`] or link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The response to send to the client when the exception occurs"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse>`] or link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "An asynchronous response to send to the client when the exception occurs"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"When an exception occurs, Quarkus REST does not log it by default (for security reasons).\n"
"This can sometimes make it hard to understand why certain exception handling code was invoked (or not invoked).\n"
"To make Quarkus REST log the actual exception before an exception mapping code is run the `org.jboss.resteasy.reactive.common.core.AbstractResteasyReactiveContext` log category can be set to `DEBUG` like so:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Request or response filters"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Via annotations"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "You can declare functions that are invoked in the following phases of the request processing:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Before the endpoint method is identified: pre-matching request filter"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "After routing, but before the endpoint method is called: normal request filter"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "After the endpoint method is called: response filter"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"These filters allow you to do various things such as examine the request URI,\n"
"HTTP method, influence routing, look or change request headers, abort the request,\n"
"or modify the response."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Request filters can be declared with the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerRequestFilter.html[`@ServerRequestFilter`]\n"
"annotation:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Request filters are usually executed on the same thread that the method that handles the request will be executed.\n"
"That means that if the method servicing the request is annotated with `@Blocking`, then the filters will also be run\n"
"on the worker thread.\n"
"If the method is annotated with `@NonBlocking` (or is not annotated at all), then the filters will also be run\n"
"on the same event-loop thread."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"If however a filter needs to be run on the event-loop despite the fact that the method servicing the request will be\n"
"run on a worker thread, then `@ServerRequestFilter(nonBlocking=true)` can be used.\n"
"Note however, that these filters need to be run before **any** filter that does not use that setting and would run on a worker thread."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Keep in mind however that the information above does **not** apply to pre-matching filters (`@ServerRequestFilter(preMatching = true)`).\n"
"These filters are *always* run on an event-loop thread."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Similarly, response filters can be declared with the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/ServerResponseFilter.html[`@ServerResponseFilter`]\n"
"annotation:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Such a response filter will also be called for <<exception-mapping, handled>> exceptions."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Your filters may declare any of the following parameter types:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Filter parameters"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jaxrsapi}/jakarta/ws/rs/container/ContainerResponseContext.html[`ContainerResponseContext`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "A context object to access the current response"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jdkapi}/java/lang/Throwable.html[`Throwable`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Any thrown and <<exception-mapping, handled>> exception, or `null` (only for response filters)."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Filter return types"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`] or link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The response to send to the client instead of continuing the filter chain, or `null` if the filter chain should proceed"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{jdkapi}/java/util/Optional.html[`Optional<RestResponse<?>>`] or link:{jdkapi}/java/util/Optional.html[`Optional<Response>`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "An optional response to send to the client instead of continuing the filter chain, or an empty value if the filter chain should proceed"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<RestResponse<?>>`] or link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "An asynchronous response to send to the client instead of continuing the filter chain, or `null` if the filter chain should proceed"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "You can restrict the Resource methods for which a filter runs, by using link:{jaxrsapi}/jakarta/ws/rs/NameBinding.html[`@NameBinding`] meta-annotations."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The Jakarta REST way"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "You can also link:{jaxrsspec}#filters[declare request and response filters in the Jakarta REST way]."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter`\n"
"implementations respectively. These filters are suitable for processing the metadata associated with a message: HTTP\n"
"headers, query parameters, media type, and other metadata. They also have the capability to abort the request\n"
"processing, for instance when the user does not have the permissions to access the endpoint."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing\n"
"`ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "A `ContainerResponseFilter` will also be called for <<exception-mapping, handled>> exceptions."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Readers and Writers: mapping entities and HTTP bodies"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Whenever your endpoint methods return an object (or when they return a\n"
"link:{resteasy-reactive-common-api}/org/jboss/resteasy/reactive/RestResponse.html[`RestResponse<?>`]\n"
"or link:{jaxrsapi}/jakarta/ws/rs/core/Response.html[`Response`] with\n"
"an entity), Quarkus REST will look for a way to map that into an HTTP response body."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Similarly, whenever your endpoint method takes an object as parameter, we will look for\n"
"a way to map the HTTP request body into that object."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"This is done via a pluggable system of link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyReader.html[`MessageBodyReader`]\n"
"and link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`] interfaces,\n"
"which are responsible for defining which Java type they map from/to, for which media types,\n"
"and how they turn HTTP bodies to/from Java instances of that type."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "For example, if we have our own `Cheese` type on our endpoint:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Then we can define how to read and write it with our body reader/writers, annotated\n"
"with link:{jaxrsapi}/jakarta/ws/rs/ext/Provider.html[`@Provider`]:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"If you want to get the most performance out of your writer, you can extend the\n"
"link:{resteasy-reactive-api}/org/jboss/resteasy/reactive/server/spi/ServerMessageBodyWriter.html[`ServerMessageBodyWriter`]\n"
"instead of link:{jaxrsapi}/jakarta/ws/rs/ext/MessageBodyWriter.html[`MessageBodyWriter`]\n"
"where you will be able to use less reflection and bypass the blocking IO layer:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"You can restrict which content-types your reader/writer apply to by adding\n"
"link:{jaxrsapi}/jakarta/ws/rs/Consumes.html[`Consumes`]/link:{jaxrsapi}/jakarta/ws/rs/Produces.html[`Produces`] annotations\n"
"on your provider class."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Reader and Writer interceptors"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Just as you can intercept requests and responses, you can also intercept readers and writers, by\n"
"extending the link:{jaxrsapi}/jakarta/ws/rs/ext/ReaderInterceptor.html[`ReaderInterceptor`] or\n"
"link:{jaxrsapi}/jakarta/ws/rs/ext/WriterInterceptor.html[`WriterInterceptor`] on a class annotated with\n"
"link:{jaxrsapi}/jakarta/ws/rs/ext/Provider.html[`@Provider`]."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "If we look at this endpoint:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "We can add reader and writer interceptors like this:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Quarkus REST and REST Client interactions"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"In Quarkus, the Quarkus REST extension and xref:rest-client.adoc[the REST Client extension] share the same infrastructure.\n"
"One important consequence of this consideration is that they share the same list of providers (in the Jakarta REST meaning of the word)."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls,\n"
"which might not be the desired behavior."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Parameter mapping"
msgstr ""

#: _versions/3.27/guides/rest.adoc
#, fuzzy
msgid ""
"All <<request-parameters,Request Parameters>> can be declared as link:{jdkapi}/java/lang/String.html[`String`],\n"
"but also as any of the following types:"
msgstr "すべての xref:request-parameters[リクエストパラメータは] link:{jdkapi}/java/lang/String.html[String] として宣言することもできますが、 以下の型のいずれかとして宣言することもできます："

#: _versions/3.27/guides/rest.adoc
msgid ""
"Types for which a link:{jaxrsapi}/jakarta/ws/rs/ext/ParamConverter.html[`ParamConverter`] is available via a registered\n"
"link:{jaxrsapi}/jakarta/ws/rs/ext/ParamConverterProvider.html[`ParamConverterProvider`]."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Primitive types."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Types that have a constructor that accepts a single link:{jdkapi}/java/lang/String.html[`String`] argument."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Types that have a static method named `valueOf` or `fromString` with a single link:{jdkapi}/java/lang/String.html[`String`] argument\n"
"that return an instance of the type. If both methods are present then `valueOf` will be used unless\n"
"the type is an `enum` in which case `fromString` will be used."
msgstr ""

#: _versions/3.27/guides/rest.adoc
#, fuzzy
msgid ""
"link:{jdkapi}/java/util/List.html[`List<T>`], link:{jdkapi}/java/util/Set.html[`Set<T>`], or\n"
"link:{jdkapi}/java/util/SortedSet.html[`SortedSet<T>`], where `T` satisfies 1, 3 or 4 above."
msgstr "link:{jdkapi}/java/util/List.html[List<T>] , link:{jdkapi}/java/util/Set.html[Set<T>] または link:{jdkapi}/java/util/SortedSet.html[SortedSet<T>] ここで、 `T` は上記1、3または4を満たします。"

#: _versions/3.27/guides/rest.adoc
#, fuzzy
msgid "For 3 and 4, constructor instantiation is prioritesed above method instantiation. Public, protected, and package private constructors and methods are supported for instantiation."
msgstr "3 と 4 では、コンストラクタのインスタンス化がメソッドのインスタンス化よりも優先されます。public、protected、package private のコンストラクタとメソッドのインスタンス化がサポートされています。"

#: _versions/3.27/guides/rest.adoc
msgid "The following example illustrates all those possibilities:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Separating Query parameter values"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Normally a collection of `String` values is used to capture the values used in multiple occurrences of the same query parameter.\n"
"For example, for the following resource method:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "and the following request:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "the `names` variable will contain both `foo` and `bar` and the response will be `hello foo bar`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "It is not uncommon however to need to convert a single query parameter into a collection of values based on some delimiting character. That is where the `@org.jboss.resteasy.reactive.Separator` annotation comes into play."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "If we update the resource method to:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "and use the following request:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "then the response will be `hello foo bar`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Handling dates"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Quarkus REST supports the use of the implementations of `java.time.Temporal` (like `java.time.LocalDateTime`) as query, path, or form params.\n"
"Furthermore, it provides the `@org.jboss.resteasy.reactive.DateFormat` annotation, which can be used to set a custom expected pattern.\n"
"Otherwise, the JDK's default format for each type is used implicitly."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Preconditions"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"https://tools.ietf.org/html/rfc7232[HTTP allows requests to be conditional], based on a number of\n"
"conditions, such as:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Date of last resource modification"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "A resource tag, similar to a hash code of the resource to designate its state or version"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Let's see how you can do conditional request validation using the\n"
"link:{jaxrsapi}/jakarta/ws/rs/core/Request.html[`Request`] context object:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "When we call `GET /conditional` the first time, we will get this response:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "So now if we want to check if we need to fetch a new version, we can make the following request:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "And we would get the following response:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Because the resource has not been modified since that date, this saves on sending the resource but can also help your users detect the concurrent modification.\n"
"For example, one client wants to update the resource, but another user has modified it since.\n"
"You can follow the previous `GET` request with this update:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"And if some other user has modified the resource between your `GET` and your `PUT` you would\n"
"get this answer back:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Negotiation"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"One of the main ideas of REST (https://tools.ietf.org/html/rfc7231#section-3.4[and HTTP]) is that\n"
"your resource is independent of its representation, and\n"
"that both the client and server are free to represent their resources in as many media types as\n"
"they want. This allows the server to declare support for multiple representations and let the\n"
"client declare which ones it supports and get served something appropriate."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The following endpoint supports serving cheese in plain text or JSON:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"The user will be able to select which representation it gets with the\n"
"link:{httpspec}#section-5.3.2[`Accept`] header, in the case of JSON:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "And for text:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Similarly, you can `PUT` two different representations. JSON:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Or plain text:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "HTTP Compression"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"The body of an HTTP response is not compressed by default.\n"
"You can enable the HTTP compression support by means of `quarkus.http.enable-compression=true`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "If compression support is enabled then the response body is compressed if:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "the resource method is annotated with `@io.quarkus.vertx.http.Compressed`, or"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "the `Content-Type` header is set and the value is a compressed media type as configured via `quarkus.http.compress-media-types`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "The response body is never compressed if:"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "the resource method is annotated with `@io.quarkus.vertx.http.Uncompressed`, or"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "the `Content-Type` header is not set."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "By default, the following list of media types is compressed: `text/html`, `text/plain`, `text/xml`, `text/css`, `text/javascript`, `application/javascript`, `application/json`, `application/graphql+json` and `application/xhtml+xml`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "If the client does not support HTTP compression then the response body is not compressed."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Include/Exclude Jakarta REST classes"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Using Build time conditions"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid ""
"Quarkus enables the inclusion or exclusion of Jakarta REST Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.\n"
"Thus, the various Jakarta REST classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these Jakarta REST classes should be included."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "In the following example, Quarkus includes the `ResourceForApp1Only` Resource class if and only if the build profile `app1` has been enabled."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Please note that if a Jakarta REST Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the Jakarta REST Application."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Using a runtime property"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Quarkus can also conditionally disable Jakarta REST Resources based on the value of runtime properties using the `@io.quarkus.resteasy.reactive.server.EndpointDisabled` annotation."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "In the following example, Quarkus will exclude `RuntimeResource` at runtime if the application has `some.property` configured to `\"disable\"`."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "This feature does not work when using native build."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "REST Client"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "In addition to the Server side, Quarkus REST comes with a new MicroProfile REST Client implementation that is non-blocking at its core."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "Please note that the `quarkus-resteasy-client` extension may not be used with Quarkus REST, use `quarkus-rest-client` instead."
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "See the xref:rest-client.adoc[REST Client Guide] for more information about the REST client."
msgstr ""

#: _versions/3.27/guides/rest.adoc
#, fuzzy
msgid "Quarkus REST Configuration Reference"
msgstr "Quarkus REST 設定リファレンス"

#: _versions/3.27/guides/rest.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/rest.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
