msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/kotlin.adoc
msgid "Using Kotlin"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "https://kotlinlang.org/[Kotlin] is a very popular programming language that targets the JVM (amongst other environments). Kotlin has experienced a surge in popularity the last few years making it the most popular JVM language, except for Java of course."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Quarkus provides first class support for using Kotlin as will be explained in this guide."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "NB: For Gradle project setup please see below, and for further reference consult the guide in the xref:gradle-tooling.adoc[Gradle setup page]."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "First, we need a new Kotlin project. This can be done using the following command:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid ""
"When adding `kotlin` to the extensions list, the Maven plugin will generate a project that is properly\n"
"configured to work with Kotlin. Furthermore, the `org.acme.ReactiveGreetingResource` class is implemented as Kotlin source code (as is the case with the generated tests).\n"
"The addition of `rest-jackson` in the extension list results in importing the Quarkus REST (formerly RESTEasy Reactive) and Jackson extensions."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "`ReactiveGreetingResource` looks like this:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "ReactiveGreetingResource.kt"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Update code"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "In order to show a more practical example of Kotlin usage we will add a simple link:https://kotlinlang.org/docs/reference/data-classes.html[data class] called `Greeting` like so:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Greeting.kt"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "We also update the `ReactiveGreetingResource` class like so:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "With these changes in place the `/hello` endpoint will reply with a JSON object instead of a simple String."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "To make the test pass, we also need to update `ReactiveGreetingResourceTest` like so:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Kotlin version"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "The Quarkus Kotlin extension already declares a dependency on some base Kotlin libraries like `kotlin-stdlib-jdk8` and `kotlin-reflect`. The Kotlin version of these dependencies is declared in the Quarkus BOM and is currently at {kotlin-version}. It is therefore recommended to use the same Kotlin version for other Kotlin libraries. When adding a dependency to another base Kotlin library (e.g. `kotlin-test-junit5`) you don't need to specify the version, since the Quarkus BOM includes the link:https://search.maven.org/artifact/org.jetbrains.kotlin/kotlin-bom[Kotlin BOM]."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "This being said, you still need to specify the version of the Kotlin compiler to use. Again, it is recommended to use the same version which Quarkus uses for the Kotlin libraries."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Using a different Kotlin version in a Quarkus application is typically not recommended. But in order to do so, you must import the Kotlin BOM *before* the Quarkus BOM."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Important Maven configuration points"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "The generated `pom.xml` contains the following modifications compared to its counterpart when Kotlin is not selected:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "The `quarkus-kotlin` artifact is added to the dependencies. This artifact provides support for Kotlin in the live reload mode (more about this later on)"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "The `kotlin-stdlib-jdk8` is also added as a dependency."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Maven's `sourceDirectory` and `testSourceDirectory` build properties are configured to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "The `kotlin-maven-plugin` is configured as follows:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Enables the `all-open` annotation plugin (see discussion below)"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid ""
"The important thing to note is the use of the https://kotlinlang.org/docs/reference/compiler-plugins.html#all-open-compiler-plugin[all-open] Kotlin compiler plugin.\n"
"In order to understand why this plugin is needed, first we need to note that by default all the classes generated from the Kotlin compiler are marked as `final`."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Having `final` classes however does not work well with various frameworks that need to create https://docs.oracle.com/javase/8/docs/technotes/guides/reflection/proxy.html[Dynamic Proxies]."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid ""
"Thus, the `all-open` Kotlin compiler plugin allows us to configure the compiler to *not* mark as `final` classes that have certain annotations. In the snippet above,\n"
"we have specified that classes annotated with `jakarta.ws.rs.Path` should not be `final`."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid ""
"If your application contains Kotlin classes annotated with `jakarta.enterprise.context.ApplicationScoped`\n"
"for example, then `<option>all-open:annotation=jakarta.enterprise.context.ApplicationScoped</option>` needs to be added as well. Same goes for any class that needs to have a dynamic proxy created at runtime, like a JPA Entity class."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Future versions of Quarkus will configure the Kotlin compiler plugin in a way that will make it unnecessary to alter this configuration."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Important Gradle configuration points"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Similar to the Maven configuration, when using Gradle, the following modifications are required when Kotlin is selected:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "The Kotlin plugin is activated, which implicitly adds `sourceDirectory` and `testSourceDirectory` build properties to point to Kotlin sources (`src/main/kotlin` and `src/test/kotlin` respectively)"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "The all-open Kotlin plugin tells the compiler not to mark as final, those classes with the annotations highlighted (customize as required)"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "When using native-image, the use of http (or https) protocol(s) must be declared"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "An example configuration follows:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "The Kotlin plugin version needs to be specified."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "The all-open configuration required, as per Maven guide above"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "or, if you use the Gradle Kotlin DSL:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Overriding the Quarkus BOM Kotlin version (Gradle)"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "If you want to use a different version than the one specified by Quarkus' BOM in your application (for example, to try pre-release features or for compatibility reasons), you can do so by using the `strictly {}` version modifier in your Gradle dependencies. For instance:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Live reload"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid ""
"Quarkus provides support for live reloading changes made to source code. This support is also available to Kotlin, meaning that developers can update their Kotlin source\n"
"code and immediately see their changes reflected."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "To see this feature in action, first execute:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "When executing an HTTP GET request against `http://localhost:8080/hello`, you see a JSON message with the value `hello` as its `message` field."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Now using your favorite editor or IDE, update `ReactiveGreetingResource.kt` and change the `hello` method to the following:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "When you now execute an HTTP GET request against `http://localhost:8080/hello`, you should see a JSON message with the value `hi` as its `message` field."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "One thing to note is that the live reload feature is not available when making changes to both Java and Kotlin source that have dependencies on each other. We hope to alleviate this limitation in the future."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Configuring live reload compiler"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "If you need to customize the compiler flags used by `kotlinc` in development mode, you can configure them in the quarkus plugin:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Maven"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Gradle (Groovy DSL)"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Gradle (Kotlin DSL)"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Packaging the application"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "As usual, the application can be packaged using:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "and executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "You can also build the native executable using:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Kotlin and Jackson"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid ""
"If the `com.fasterxml.jackson.module:jackson-module-kotlin` dependency and the `quarkus-jackson` extension (or one of the `quarkus-resteasy-jackson` or `quarkus-rest-jackson` extensions) have been added to the project,\n"
"then Quarkus automatically registers the `KotlinModule` to the `ObjectMapper` bean (see xref:rest-json.adoc#jackson[this] guide for more details)."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "When using Kotlin data classes with `native-image` you may experience serialization errors that do not occur with the `JVM` version, despite the Kotlin Jackson Module being registered. This is especially so if you have a more complex JSON hierarchy, where an issue on a lower node causes a serialization failure. The error message displayed is a catch-all and typically displays an issue with the root object, which may not necessarily be the case."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "To ensure full-compatibility with `native-image`, it is recommended to apply the Jackson `@field:JsonProperty(\"fieldName\")` annotation, and set a nullable default, as illustrated below. You can automate the generation of Kotlin data classes for your sample JSON using IntelliJ IDEA plugins (such as JSON to Kotlin Class), and easily enable the Jackson annotation and select nullable parameters as part of the auto-code generation."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
#, fuzzy
msgid "When using Kotlin with Quarkus REST, it is worth considering the use of `quarkus-rest-kotlin-serialization` which leverages the Kotlin Serialization framework instead of Jackson."
msgstr "Quarkus RESTでKotlinを使用する場合、Jacksonの代わりにKotlin Serializationフレームワークを活用する `quarkus-rest-kotlin-serialization` 。"

#: _versions/3.27/guides/kotlin.adoc
msgid "Kotlin and the Kubernetes Client"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "When working with the `quarkus-kubernetes` extension and have Kotlin classes bound to CustomResource definitions (like you do for building operators), you need to be aware that the underlying Fabric8 Kubernetes Client uses its own static Jackson `ObjectMapper` s, which can be configured as follows with the `KotlinModule`:"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "_Please test this carefully on compilation to native images and fallback to Java-compatible Jackson bindings if you experience problems._"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Coroutines support"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Extensions"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "The following extensions provide support for Kotlin Coroutines by allowing the use of Kotlin's `suspend` keyword on method signatures."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Extension"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Comments"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "`quarkus-rest`"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Support is provided for Jakarta REST Resource Methods"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "`quarkus-rest-client`"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Support is provided for REST Client interface methods"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "`quarkus-messaging`"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Support is provided for Reactive messaging methods"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "`quarkus-scheduler`"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Support is provided for scheduler methods"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "`quarkus-smallrye-fault-tolerance`"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Support is provided for the declarative annotation-based API"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "`quarkus-vertx`"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Support is provided for `@ConsumeEvent` methods"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "`quarkus-websockets-next`"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Support is provided for server-side and client-side endpoint methods"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Kotlin coroutines and Mutiny"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid ""
"Kotlin coroutines provide an imperative programming model that actually gets executed in an asynchronous, reactive manner.\n"
"To simplify the interoperability between Mutiny and Kotlin there is the module `io.smallrye.reactive:mutiny-kotlin`, described link:https://smallrye.io/smallrye-mutiny/latest/guides/kotlin/[here]."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "CDI @Inject with Kotlin"
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid ""
"Kotlin reflection annotation processing differs from Java.  You may experience an error when using CDI @Inject such as:\n"
"\"kotlin.UninitializedPropertyAccessException: lateinit property xxx has not been initialized\""
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "In the example below, this can be easily solved by adapting the annotation, adding @field: Default, to handle the lack of a @Target on the Kotlin reflection annotation definition."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Kotlin requires a @field: xxx qualifier as it has no @Target on the annotation definition. Add @field: xxx in this example. @Default is used as the qualifier, explicitly specifying the use of the default bean."
msgstr ""

#: _versions/3.27/guides/kotlin.adoc
msgid "Alternatively, prefer the use of constructor injection which works without modification of the Java examples, increases testability and complies best to a Kotlin programming style."
msgstr ""
