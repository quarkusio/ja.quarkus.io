msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/testing-components.adoc
msgid "Testing components"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"The component model of Quarkus is built on top xref:cdi-reference.adoc[CDI].\n"
"Therefore, Quarkus provides `QuarkusComponentTestExtension` - a JUnit extension that makes it easy to test the components/CDI beans and mock their dependencies.\n"
"Unlike `@QuarkusTest` this extension does not start a full Quarkus application but merely the CDI container and the configuration service.\n"
"You can find more details in the <<lifecycle>> section."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "This extension is available in the `quarkus-junit5-component` dependency."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Basic example"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Let's have a component `Foo` - a CDI bean with two injection points."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "`Foo` component"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "`Foo` is an `@ApplicationScoped` CDI bean."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "`Foo` depends on the config property `bar`. `@Inject` is not needed for this injection point because it also declares a CDI qualifier - this is a Quarkus-specific feature."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Then a component test could look like:"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Simple component test"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The `QuarkusComponentTest` annotation registers the JUnit extension."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Sets a configuration property for the test."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The test injects the component under the test. The types of all fields annotated with `@Inject` are considered the component types under test. You can also specify additional component classes via `@QuarkusComponentTest#value()`. Furthermore, the static nested classes declared on the test class are components too."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The test also injects a mock for `Charlie`. `Charlie` is an _unsatisfied_ dependency for which a synthetic `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "We can leverage the Mockito API in a test method to configure the behavior."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "`QuarkusComponentTestExtension` also resolves parameters of test methods and injects matching beans."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "So the code snippet above can be rewritten as:"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Simple component test with test method parameters"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Parameters annotated with `@io.quarkus.test.component.SkipInject` are never resolved by this extension."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Furthermore, if you need the full control over the `QuarkusComponentTestExtension` configuration then you can use the `@RegisterExtension` annotation and configure the extension programmatically."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The original test could be rewritten like:"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Simple component test with programmatic configuration"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The `QuarkusComponentTestExtension` is configured in a static field of the test class."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Lifecycle"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"So what exactly does the `QuarkusComponentTest` do?\n"
"It starts the CDI container and registers a dedicated xref:config-reference.adoc[configuration object]."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"If the test instance lifecycle is `Lifecycle#PER_METHOD` (default) then the container is started during the `before each` test phase and stopped during the `after each` test phase.\n"
"However, if  the test instance lifecycle is `Lifecycle#PER_CLASS` then the container is started during the `before all` test phase and stopped during the `after all` test phase."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"The fields annotated with `@Inject` and `@InjectMock` are injected after a test instance is created.\n"
"The parameters of a test method for which a matching bean exists are resolved (unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`) when a test method is executed.\n"
"Finally, the CDI request context is activated and terminated per each test method."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Injection"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"Fields of the test class that are annotated with `@jakarta.inject.Inject` and `@io.quarkus.test.InjectMock` are injected after a test instance is created.\n"
"Furthermore, the parameters of a test method for which a matching bean exists are resolved unless annotated with `@io.quarkus.test.component.SkipInject` or `@org.mockito.Mock`.\n"
"There are also some JUnit built-in parameters, such as `RepetitionInfo` and `TestInfo`, which are skipped automatically."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"An `@Inject` injection point receives the contextual instance of a CDI bean - the real component under test.\n"
"An `@InjectMock` injection point receives an \"unconfigured\" Mockito mock that was created for an <<auto_mocking,unsatisfied dependency automatically>>."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Dependent beans injected into the fields and test method arguments are correctly destroyed before a test instance is destroyed and after the test method completes, respectively."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Arguments of a `@ParameterizedTest` method that are provided by an `ArgumentsProvider`, for example with `@org.junit.jupiter.params.provider.ValueArgumentsProvider`, must be annotated with `@SkipInject`."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Tested components"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The initial set of tested components is derived from the test class:"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The types of all fields annotated with `@jakarta.inject.Inject` are considered the component types."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The types of test methods parameters that are not annotated with `@InjectMock`, `@SkipInject`, or `@org.mockito.Mock` are also considered the component types."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "If `@QuarkusComponentTest#addNestedClassesAsComponents()` is set to `true` (default) then all static nested classes declared on the test class are components too."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "`@Inject Instance<T>` and `@Inject @All List<T>` injection points are handled specifically. The actual type argument is registered as a component. However, if the type argument is an interface the implementations _are not registered_ automatically."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Additional component classes can be set using `@QuarkusComponentTest#value()` or `QuarkusComponentTestExtensionBuilder#addComponentClasses()`."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Auto Mocking Unsatisfied Dependencies"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"Unlike in regular CDI environments the test does not fail if a component injects an unsatisfied dependency.\n"
"Instead, a synthetic bean is registered automatically for each combination of required type and qualifiers of an injection point that resolves to an unsatisfied dependency.\n"
"The bean has the `@Singleton` scope so it's shared across all injection points with the same required type and qualifiers.\n"
"The injected reference is an _unconfigured_ Mockito mock.\n"
"You can inject the mock in your test using the `io.quarkus.test.InjectMock` annotation and leverage the Mockito API to configure the behavior."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"`@InjectMock` is not intended as a universal replacement for functionality provided by the Mockito JUnit extension.\n"
"It's meant to be used for configuration of unsatisfied dependencies of CDI beans.\n"
"You can use the `QuarkusComponentTest` and `MockitoExtension` side by side."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Custom Mocks For Unsatisfied Dependencies"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"Sometimes you need the full control over the bean attributes and maybe even configure the default mock behavior.\n"
"You can use the mock configurator API via the `QuarkusComponentTestExtensionBuilder#mock()` method."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Nested Tests"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"JUnit 5 https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested[@Nested tests] may help to structure more complex test scenarios.\n"
"However, only basic use cases are tested with `@QuarkusComponentTest`."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Nested test"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The test injects the component under the test. `Foo` injects `Charlie`."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The test also injects a mock for `Charlie`. The injected reference is an \"unconfigured\" Mockito mock."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Configuration"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"You can set the configuration properties for a test with the `@io.quarkus.test.component.TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method.\n"
"If you only need to use the default values for missing config properties, then the `@QuarkusComponentTest#useDefaultConfigProperties()` or `QuarkusComponentTestExtensionBuilder#useDefaultConfigProperties()` might come in useful."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"It is also possible to set configuration properties for a test method with the `@io.quarkus.test.component.TestConfigProperty` annotation.\n"
"However, if the test instance lifecycle is `Lifecycle#_PER_CLASS` this annotation can only be used on the test class and is ignored on test methods."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "`@io.quarkus.test.component.TestConfigProperty` declared on a `@Nested` test class is always ignored."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "CDI beans are also automatically registered for all injected https://smallrye.io/smallrye-config/Main/config/mappings/[Config Mappings]. The mappings are populated with the test configuration properties."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
#, fuzzy
msgid "Config sources"
msgstr "設定ソース"

#: _versions/3.27/guides/testing-components.adoc
#, fuzzy
msgid ""
"By default, only the config properties from `application.properties` and properties set by the `@TestConfigProperty` annotation or with the `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` method are included in the test config.\n"
"System properties and ENV variables are _not_ included in the test config by default.\n"
"However, you can use `@QuarkusComponentTest#useSystemConfigSources()` or `QuarkusComponentTestExtensionBuilder#useSystemConfigSources()` to configure this behavior."
msgstr "デフォルトでは、 `application.properties` からの config プロパティと、 `@TestConfigProperty` アノテーションまたは `QuarkusComponentTestExtensionBuilder#configProperty(String, String)` メソッドで設定されたプロパティのみがテスト config に含まれます。システムプロパティと ENV 変数は、デフォルトではテスト config に含ま _れません_ 。ただし、 `@QuarkusComponentTest#useSystemConfigSources()` または `QuarkusComponentTestExtensionBuilder#useSystemConfigSources()` を使用して、この動作を設定することができます。"

#: _versions/3.27/guides/testing-components.adoc
msgid "Mocking CDI Interceptors"
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid ""
"If a tested component class declares an interceptor binding then you might need to mock the interception too.\n"
"There are two ways to accomplish this task.\n"
"First, you can define an interceptor class as a static nested class of the test class."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "`@SimpleBinding` is an interceptor binding."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The interceptor class is automatically considered a tested component."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Static nested classes declared on a test class that is annotated with `@QuarkusComponentTest` are excluded from bean discovery when running a `@QuarkusTest` in order to prevent unintentional CDI conflicts."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The second option is to declare an interceptor method directly in the test class; the method is then invoked in the relevant interception phase."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "The interceptor bindings of the resulting interceptor are specified by annotating the method with the interceptor binding types."
msgstr ""

#: _versions/3.27/guides/testing-components.adoc
msgid "Defines the interception type."
msgstr ""
