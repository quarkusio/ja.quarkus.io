msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/validation.adoc
msgid "Validation with Hibernate Validator"
msgstr "Hibernate Validatorによるバリデーション"

#: _versions/3.27/guides/validation.adoc
msgid "This guide covers how to use Hibernate Validator/Bean Validation for:"
msgstr "このガイドでは、以下の場合のHibernate Validator/Bean Validation の使用方法について説明します:"

#: _versions/3.27/guides/validation.adoc
msgid "validating the input/output of your REST services;"
msgstr "REST サービスの入出力の検証"

#: _versions/3.27/guides/validation.adoc
msgid "validating the parameters and return values of the methods of your business services."
msgstr "ビジネスサービスのメソッドのパラメーターと戻り値の検証"

#: _versions/3.27/guides/validation.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.27/guides/validation.adoc
msgid "Architecture"
msgstr "アーキテクチャ"

#: _versions/3.27/guides/validation.adoc
msgid ""
"The application built in this guide is quite simple. The user fills a form on a web page.\n"
"The web page sends the form content to the `BookResource` as JSON (using Ajax). The `BookResource` validates the user input and returns the\n"
"_result_ as JSON."
msgstr "このガイドで構築されたアプリケーションは非常にシンプルです。ユーザーはウェブページ上でフォームを入力します。Web ページはフォームの内容を JSON として `BookResource` に送信します (Ajax を使用)。 `BookResource` はユーザーの入力を検証し、 _結果_ をJSON として返します。"

#: _versions/3.27/guides/validation.adoc
msgid "image:validation-guide-architecture.png[alt=Architecture]"
msgstr "image:validation-guide-architecture.png[alt=Architecture]"

#: _versions/3.27/guides/validation.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.27/guides/validation.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.27/guides/validation.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.27/guides/validation.adoc
msgid "The solution is located in the `validation-quickstart` link:{quickstarts-tree-url}/validation-quickstart[directory]."
msgstr "ソリューションは `validation-quickstart` link:{quickstarts-tree-url}/validation-quickstart[ディレクトリ] にあります。"

#: _versions/3.27/guides/validation.adoc
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.27/guides/validation.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/3.27/guides/validation.adoc
msgid "This command generates a Maven structure importing the Quarkus REST (formerly RESTEasy Reactive)/Jakarta REST, Jackson and Hibernate Validator/Bean Validation extensions."
msgstr "このコマンドは、Quarkus REST (旧RESTEasy Reactive)/Jakarta REST、Jackson、およびHibernate Validator/Bean ValidationエクステンションをインポートするMaven構造を生成します。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `hibernate-validator` extension\n"
"to your project by running the following command in your project base directory:"
msgstr "すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリーで以下のコマンドを実行することで、プロジェクトに `hibernate-validator` エクステンションを追加することができます。"

#: _versions/3.27/guides/validation.adoc
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#: _versions/3.27/guides/validation.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/validation.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/validation.adoc
msgid "Constraints"
msgstr "制約"

#: _versions/3.27/guides/validation.adoc
msgid ""
"In this application, we are going to test an elementary object, but we support complicated constraints and can validate graphs of objects.\n"
"Create the `org.acme.validation.Book` class with the following content:"
msgstr "今回のアプリケーションでは、基本のオブジェクトをテストすることになりますが、複雑な制約にも対応しており、オブジェクトのグラフを検証することができます。以下の内容で `org.acme.validation.Book` クラスを作成します。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"Constraints are added on fields, and when an object is validated, the values are checked.\n"
"The getter and setter methods are also used for JSON mapping."
msgstr "フィールドに制約を加え、オブジェクトが検証されると値がチェックされます。ゲッターメソッドとセッターメソッドはJSONマッピングにも使われています。"

#: _versions/3.27/guides/validation.adoc
msgid "JSON mapping and validation"
msgstr "JSONのマッピングとバリデーション"

#: _versions/3.27/guides/validation.adoc
msgid "Create the following REST resource as `org.acme.validation.BookResource`:"
msgstr "以下のRESTリソースを `org.acme.validation.BookResource` として作成します。"

#: _versions/3.27/guides/validation.adoc
msgid "The `Validator` instance is injected via CDI."
msgstr "`Validator` インスタンスはCDIで注入されます。"

#: _versions/3.27/guides/validation.adoc
msgid "Yes it does not compile, `Result` is missing, but we will add it very soon."
msgstr "はい、これはコンパイル出来ません。 `Result` がありませんが、私たちはすぐに追加します。"

#: _versions/3.27/guides/validation.adoc
msgid "The method parameter (`book`) is created from the JSON payload automatically."
msgstr "メソッドパラメーター( `book` )は、JSONペイロードから自動的に作成されます。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"The method uses the `Validator` instance to check the payload.\n"
"It returns a set of violations.\n"
"If this set is empty, it means the object is valid.\n"
"In case of failures, the messages are concatenated and sent back to the browser."
msgstr "このメソッドは、 `Validator` インスタンスを使用してペイロードをチェックします。このメソッドは、違反のセットを返却します。このセットが空であれば、オブジェクトが有効であることを意味します。失敗した場合は、メッセージが連結され、ブラウザに送り返されます。"

#: _versions/3.27/guides/validation.adoc
msgid "Let's now create the `Result` class as an inner class:"
msgstr "それでは、 `Result` クラスをインナークラスとして作成してみましょう。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"The class is very simple and only contains 2 fields and the associated getters and setters.\n"
"Because we indicate that we produce JSON, the mapping to JSON is made automatically."
msgstr "このクラスは非常にシンプルで、2つのフィールドとそれに関連するゲッターとセッターだけが含まれています。JSONを生成することを示しているので、JSONへのマッピングは自動的に行われます。"

#: _versions/3.27/guides/validation.adoc
msgid "REST end point validation"
msgstr "RESTエンドポイントバリデーション"

#: _versions/3.27/guides/validation.adoc
msgid ""
"While using the `Validator` manually might be useful for some advanced usage,\n"
"if you simply want to validate the parameters or the return value or your REST end point,\n"
"you can annotate it directly, either with constraints (`@NotNull`, `@Digits`...)\n"
"or with `@Valid` (which will cascade the validation to the bean)."
msgstr "`Validator` を手動で使用することは、高度な使用法には便利かもしれませんが、単にパラメーターや戻り値、RESTのエンドポイントを検証したい場合は、制約( `@NotNull`, `@Digits`...)や `@Valid` (Beanに検証をカスケードします)を使用して直接アノテーションすることができます。"

#: _versions/3.27/guides/validation.adoc
msgid "Let's create an end point validating the `Book` provided in the request:"
msgstr "リクエストで提供された `Book` を検証するエンドポイントを作成してみましょう。"

#: _versions/3.27/guides/validation.adoc
msgid "As you can see, we don't have to manually validate the provided `Book` anymore as it is automatically validated."
msgstr "ご覧のように、提供された `Book` は自動的に検証されるので、もう手動で検証する必要はありません。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"If a validation error is triggered, a violation report is generated and serialized as JSON as our end point produces a JSON output.\n"
"It can be extracted and manipulated to display a proper error message."
msgstr "検証エラーが発生した場合、違反レポートが生成され、そしてエンドポイントがJSON出力を生成することによってJSONとしてシリアライズされます。これを抽出して操作することで、適切なエラーメッセージを表示することができます。"

#: _versions/3.27/guides/validation.adoc
msgid "An example of such a report could be:"
msgstr "そのようなレポートの例としては次のようになります:"

#: _versions/3.27/guides/validation.adoc
msgid ""
"This response is produced by Quarkus via a builtin implementation of `jakarta.ws.rs.ext.ExceptionMapper`. If the application code needs to handle `ValidationException` in some custom way,\n"
"it can provide an implementation of `jakarta.ws.rs.ext.ExceptionMapper` like so:"
msgstr "このレスポンスはQuarkusによって、 `jakarta.ws.rs.ext.ExceptionMapper` の組み込み実装によって生成されます。アプリケーションコードが何らかのカスタム方法で `ValidationException` を処理する必要がある場合、 `jakarta.ws.rs.ext.ExceptionMapper` の実装を提供することができます："

#: _versions/3.27/guides/validation.adoc
msgid "Service method validation"
msgstr "サービスメソッドの検証"

#: _versions/3.27/guides/validation.adoc
msgid "It might not always be handy to have the validation rules declared at the end point level as it could duplicate some business validation."
msgstr "バリデーションルールをエンドポイントレベルで宣言するのは、必ずしも便利とは限りません。ビジネスバリデーションと重複する可能性があるためです。"

#: _versions/3.27/guides/validation.adoc
msgid "The best option is then to annotate a method of your business service with your constraints (or in our particular case with `@Valid`):"
msgstr "最良の選択肢は、ビジネスサービスのメソッドに制約をアノテーションすることです(私たちの場合は `@Valid` ):"

#: _versions/3.27/guides/validation.adoc
#, fuzzy
msgid "Calling such service method, e.g. in your rest end point, triggers the `Book` validation automatically:"
msgstr "レストエンドポイントなどでこのようなサービスメソッドを呼び出すと、自動的に `Book` ："

#: _versions/3.27/guides/validation.adoc
#, fuzzy
msgid ""
"Note that, if you want to push the validation errors to the frontend, you have to catch the exception and push the information yourselves\n"
"as they will not be automatically pushed to the JSON output and will be treated as any other internal server errors."
msgstr "バリデーションエラーをフロントエンドにプッシュしたい場合は、例外をキャッチして自分で情報をプッシュしなければなりません。"

#: _versions/3.27/guides/validation.adoc
#, fuzzy
msgid ""
"Keep in mind that you usually don't want to expose to the public the internals of your services\n"
"-- and especially not the validated value contained in the violation object."
msgstr "通常、サービスの内部、特に違反オブジェクトに含まれる検証された値を公開したくないことに留意してください。"

#: _versions/3.27/guides/validation.adoc
#, fuzzy
msgid ""
"By default, only failing the validation of the constraints defined for the parameters of the REST endpoints\n"
"will result in bad request responses with a validation report as a part of the response body.\n"
"In any other case, e.g. validation of service methods (be it parameters or return values),\n"
"validation of the return value of a REST endpoint, etc., will result in an internal server error (response status code `5xx`),\n"
"unless the application code explicitly catches and handles the `ConstraintViolationException` (or a custom `ExceptionMapper` is implemented).\n"
"The reasoning behind such behaviour is that only REST endpoint parameters are considered as the user input\n"
"and hence can be treated as a bad request (response status code `4xx`),\n"
"At the same time, constraint violations in other places result from the application logic execution and, hence, are treated as internal errors."
msgstr "デフォルトでは、RESTエンドポイントのパラメータに定義された制約の検証に失敗した場合のみ、レスポンスボディの一部として検証レポートが含まれる不正なリクエストレスポンスが返されます。それ以外の場合、例えばサービスメソッドの検証（パラメータであれ戻り値であれ）、RESTエンドポイントの戻り値の検証などでは、アプリケーションコードが明示的に `ConstraintViolationException` をキャッチして処理しない限り（あるいはカスタム `ExceptionMapper` が実装されていない限り）、サーバ内部エラー（レスポンスステータスコード `5xx` ）になります。このような振る舞いの背後にある理由は、RESTエンドポイントパラメータのみがユーザ入力とみなされるため、不正なリクエスト（レスポンスステータスコード `4xx` ）として扱われる可能性があるからです。同時に、他の場所での制約違反はアプリケーションロジックの実行に起因するため、内部エラーとして扱われます。"

#: _versions/3.27/guides/validation.adoc
msgid "A frontend"
msgstr "フロントエンド"

#: _versions/3.27/guides/validation.adoc
msgid ""
"Now let's add the simple web page to interact with our `BookResource`.\n"
"Quarkus automatically serves static resources contained in the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, replace the `index.html` file with the content from this link:{quickstarts-blob-url}/validation-quickstart/src/main/resources/META-INF/resources/index.html[index.html] file in it."
msgstr ""
"それでは、 `BookResource` と対話するための簡単なWebページを追加してみましょう。\n"
"Quarkusは、 `META-INF/resources` ディレクトリに含まれる静的リソースを自動的に提供します。 \n"
"`src/main/resources/META-INF/resources` ディレクトリで、 `index.html` ファイルをこの link:{quickstarts-blob-url}/validation-quickstart/src/main/resources/META-INF/resources/index.html[index.html] ファイルの内容で置き換えます。"

#: _versions/3.27/guides/validation.adoc
msgid "Run the application"
msgstr "アプリケーションの実行"

#: _versions/3.27/guides/validation.adoc
msgid "Now, let's see our application in action. Run it with:"
msgstr "では、実際にアプリケーションを見てみましょう。以下のように実行してみてください:"

#: _versions/3.27/guides/validation.adoc
msgid "Then, open your browser to http://localhost:8080/:"
msgstr "そして、ブラウザで http://localhost:8080/ を開いてください:"

#: _versions/3.27/guides/validation.adoc
msgid "Enter the book details (valid or invalid)"
msgstr "書籍の詳細を入力してください(有効または無効)"

#: _versions/3.27/guides/validation.adoc
msgid "Click on the _Try me..._ buttons to check if your data is valid using one of the methods we presented above."
msgstr "_Try me..._ ボタンをクリックして、上記で紹介した方法のいずれかを使用してデータが有効かどうかを確認してください。"

#: _versions/3.27/guides/validation.adoc
msgid "image:validation-guide-screenshot.png[alt=Application]"
msgstr "image:validation-guide-screenshot.png[alt=Application]"

#: _versions/3.27/guides/validation.adoc
msgid "The application can be packaged using:"
msgstr "アプリケーションは以下でパッケージ化することができます:"

#: _versions/3.27/guides/validation.adoc
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして次のコマンドで実行できます。 `java -jar target/quarkus-app/quarkus-run.jar`."

#: _versions/3.27/guides/validation.adoc
msgid "You can also build the native executable using:"
msgstr "ネイティブ実行可能ファイルを次のようにビルドすることもできます。"

#: _versions/3.27/guides/validation.adoc
msgid "Going further"
msgstr "さらに詳しく"

#: _versions/3.27/guides/validation.adoc
msgid "Hibernate Validator extension and CDI"
msgstr "Hibernate Validator エクステンションと CDI"

#: _versions/3.27/guides/validation.adoc
msgid "The Hibernate Validator extension is tightly integrated with CDI."
msgstr "Hibernate ValidatorエクステンションはCDIと緊密に統合されています。"

#: _versions/3.27/guides/validation.adoc
msgid "Configuring the ValidatorFactory"
msgstr "ValidatorFactoryの設定"

#: _versions/3.27/guides/validation.adoc
msgid "Sometimes, you might need to configure the behavior of the `ValidatorFactory`, for instance to use a specific `ParameterNameProvider`."
msgstr "時には、 `ValidatorFactory` の動作を設定する必要があるかもしれません。例えば、特定の `ParameterNameProvider` を使用するためなどです。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"While the `ValidatorFactory` is instantiated by Quarkus itself,\n"
"you can very easily tweak it by declaring replacement beans that will be injected in the configuration."
msgstr "`ValidatorFactory` は、Quarkus 自体によってインスタンス化されていますが、設定に注入される代わりのBeanを宣言することで、非常に簡単に微調整することができます。"

#: _versions/3.27/guides/validation.adoc
msgid "If you create a bean of the following types in your application, it will automatically be injected into the `ValidatorFactory` configuration:"
msgstr "アプリケーションで以下のタイプのBeanを作成すると、自動的に `ValidatorFactory` の設定に注入されます。"

#: _versions/3.27/guides/validation.adoc
msgid "`jakarta.validation.ClockProvider`"
msgstr "`jakarta.validation.ClockProvider`"

#: _versions/3.27/guides/validation.adoc
msgid "`jakarta.validation.ConstraintValidator`"
msgstr "`jakarta.validation.ConstraintValidator`"

#: _versions/3.27/guides/validation.adoc
msgid "`jakarta.validation.ConstraintValidatorFactory`"
msgstr "`jakarta.validation.ConstraintValidatorFactory`"

#: _versions/3.27/guides/validation.adoc
msgid "`jakarta.validation.MessageInterpolator`"
msgstr "`jakarta.validation.MessageInterpolator`"

#: _versions/3.27/guides/validation.adoc
msgid "`jakarta.validation.ParameterNameProvider`"
msgstr "`jakarta.validation.ParameterNameProvider`"

#: _versions/3.27/guides/validation.adoc
msgid "`jakarta.validation.TraversableResolver`"
msgstr "`jakarta.validation.TraversableResolver`"

#: _versions/3.27/guides/validation.adoc
msgid "`org.hibernate.validator.spi.properties.GetterPropertySelectionStrategy`"
msgstr "`org.hibernate.validator.spi.properties.GetterPropertySelectionStrategy`"

#: _versions/3.27/guides/validation.adoc
msgid "`org.hibernate.validator.spi.nodenameprovider.PropertyNodeNameProvider`"
msgstr "`org.hibernate.validator.spi.nodenameprovider.PropertyNodeNameProvider`"

#: _versions/3.27/guides/validation.adoc
msgid "`org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory`"
msgstr "`org.hibernate.validator.spi.scripting.ScriptEvaluatorFactory`"

#: _versions/3.27/guides/validation.adoc
msgid "You don't have to wire anything."
msgstr "何も設定しなくても大丈夫です。"

#: _versions/3.27/guides/validation.adoc
msgid "Obviously, for each listed type, you can declare only one bean."
msgstr "勿論、リストされた各型に対して、宣言することができるのは1つのBeanだけです。"

#: _versions/3.27/guides/validation.adoc
msgid "Most of the time, these beans should be declared as `@ApplicationScoped`."
msgstr "ほとんどの場合、これらのBeanは `@ApplicationScoped` として宣言されるべきです。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"However, in the case of ``ConstraintValidator``s that are dependent of attributes of the constraint annotation\n"
"(typically when implementing the `initialize(A constraintAnnotation)` method),\n"
"use the `@Dependent` scope to make sure each annotation context has a separate instance of the `ConstraintValidator` bean."
msgstr "ただし、制約アノテーションの属性に依存する `ConstraintValidator` の場合（通常、 `initialize(constraintAnnotation)` メソッドを実装する場合）、 `@Dependent` スコープを使用して、各アノテーションコンテキストが `ConstraintValidator` Beanの個別のインスタンスを持つようにします。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"If customizing the `ValidatorFactory` through the available configuration properties and the CDI beans above doesn't cover your requirements,\n"
"you can customize it further by registering `ValidatorFactoryCustomizer` beans."
msgstr "利用可能な設定プロパティと上記の CDI Bean を介して `ValidatorFactory` をカスタマイズしても要件が満たされない場合は、 `ValidatorFactoryCustomizer` Bean を登録することでさらにカスタマイズできます。"

#: _versions/3.27/guides/validation.adoc
msgid "For instance, you could override the built-in validator enforcing the `@Email` constraint and use `MyEmailValidator` instead with the following class:"
msgstr "たとえば、 `@Email` 制約を強制する組み込みバリデーターをオーバーライドし、代わりに次のクラスで `MyEmailValidator` を使用できます。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"All beans implementing `ValidatorFactoryCustomizer` are applied, meaning you can have several of them.\n"
"If you need to enforce some ordering, you can use the usual `@jakarta.annotation.Priority` annotation - beans with higher priority are applied first."
msgstr "`ValidatorFactoryCustomizer` を実装するすべての Bean が適用されます。つまり、複数の Bean を持つことができます。もし、何らかの順序付けが必要な場合は、通常の `@jakarta.annotation.Priority` アノテーションを使用することができます - より高い優先順位の Bean が最初に適用されます。"

#: _versions/3.27/guides/validation.adoc
msgid "Constraint validators as beans"
msgstr "Beanとしての制約バリデーター"

#: _versions/3.27/guides/validation.adoc
msgid "You can declare your constraint validators as CDI beans:"
msgstr "制約バリデーターをCDI Beanとして宣言することができます。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"When initializing a constraint validator of a given type,\n"
"Quarkus will check if a bean of this type is available and, if so, it will use it instead of instantiating a `ConstraintValidator`."
msgstr "指定された型の制約バリデーターを初期化する際、Quarkusはこの型のBeanが利用可能かどうかをチェックし、利用可能な場合は `ConstraintValidator` のインスタンスを作成する代わりにそれを使用します。"

#: _versions/3.27/guides/validation.adoc
msgid "Thus, as demonstrated in our example, you can fully use injection in your constraint validator beans."
msgstr "このように、例で示したように、制約バリデーターBeanでインジェクションを完全に使用することができます。"

#: _versions/3.27/guides/validation.adoc
msgid "The scope you choose for your `ConstraintValidator` bean is important:"
msgstr "`ConstraintValidator` Bean に選択するスコープは重要です:"

#: _versions/3.27/guides/validation.adoc
msgid "If the same instance of the `ConstraintValidator` bean can be used across the whole application, use the `@ApplicationScoped` scope."
msgstr "アプリケーション全体で `ConstraintValidator` Bean の同じインスタンスを使用できる場合は、 `@ApplicationScoped` スコープを使用します。"

#: _versions/3.27/guides/validation.adoc
msgid "If the `ConstraintValidator` bean implements the `initialize(A constraintAnnotation)` method and depends on the state of the constraint annotation, use the `@Dependent` scope to make sure each annotation context has a separate and properly configured instance of the `ConstraintValidator` bean."
msgstr "`ConstraintValidator` Bean が `initialize(constraintAnnotation)` メソッドを実装し、制約アノテーションの状態に依存する場合は、 `@Dependent` スコープを使用して、各アノテーション コンテキストに `ConstraintValidator  Beanの個別の適切に構成されたインスタンスがあることを確認します。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"When injecting beans relying on the runtime configuration, use `@Inject Instance<..>`. Since constraints are initialized\n"
"at build time, it is not possible to completely preconfigure the constraint in the `initialize(..)` method,\n"
"as the runtime information will be missing at that point. The `initialize(..)` method in such scenarios can still be used\n"
"to read the constraint annotation parameters, and perform any work not relying on the runtime configuration.\n"
"Hence, it is recommended that any heavy configuration work happens as part of the injected bean initialization\n"
"and methods used in the `ConstraintValidator#isValid(..)` implementation are as fast as possible:"
msgstr ""
"実行時設定に依存するBeanを注入する場合、 `@Inject Instance<..>` を使用してください。\n"
"制約はビルド時に初期化されるので、 `initialize(..)` メソッドで制約を完全に事前設定することはできません。\n"
"このようなシナリオの `initialize(..)` メソッドは、制約注釈パラメータを読み取るために使用することができます。\n"
"したがって、注入されたBeanの初期化の一部として重い設定作業が行われ、 `ConstraintValidator#isValid(..)` 実装で使用されるメソッドが可能な限り高速であることが推奨されます："

#: _versions/3.27/guides/validation.adoc
msgid "Validation and localization"
msgstr "バリデーションとローカリゼーション"

#: _versions/3.27/guides/validation.adoc
msgid "By default, constraint violation messages will be returned in the build system locale."
msgstr "デフォルトでは、制約違反のメッセージはビルドシステムのロケールで返されます。"

#: _versions/3.27/guides/validation.adoc
msgid "You can configure this behavior by adding the following configuration in your `application.properties`:"
msgstr "この動作は、以下の設定を `application.properties` に追加することで変更することが出来ます:"

#: _versions/3.27/guides/validation.adoc
msgid ""
"If you are using Quarkus REST or RESTEasy Classic, in the context of a Jakarta REST endpoint,\n"
"Hibernate Validator will automatically resolve the optimal locale to use from the `Accept-Language` HTTP header,\n"
"provided the supported locales have been properly specified in the `application.properties`:"
msgstr ""
"Jakarta REST エンドポイントのコンテキストでQuarkus REST または RESTEasy Classic を使用している場合、\n"
"サポートされているロケールが `application.properties` で適切に指定されていれば、Hibernate Validator は `Accept-Language` HTTP ヘッダーから使用する最適なロケールを自動的に解決します："

#: _versions/3.27/guides/validation.adoc
msgid ""
"Alternatively, you can use `all` to make native-image executable to include all available locales. It inflate the size of the executable\n"
"substantially though. The difference between including just two or three locales and including all locales is at least 23 MB."
msgstr ""
"あるいは、 `all` を使って、利用可能なすべてのロケールを含むネイティブイメージの実行可能ファイルを作成することもできます。ただし、実行可能ファイルのサイズが大幅に膨れ上がります。\n"
"2つか3つのロケールを含めるのと、すべてのロケールを含めるのとでは、少なくとも23MBの差があります。"

#: _versions/3.27/guides/validation.adoc
msgid "A similar mechanism exists for GraphQL services based on the `quarkus-smallrye-graphql` extension."
msgstr "同様の仕組みは、 `quarkus-smallrye-graphql` エクステンションに基づく GraphQL サービスにも存在します。"

#: _versions/3.27/guides/validation.adoc
msgid "If this default mechanism is not sufficient and you need a custom locale resolution, you can add additional ``org.hibernate.validator.spi.messageinterpolation.LocaleResolver``s:"
msgstr "このデフォルトのメカニズムでは不十分で、カスタムのロケール解決が必要な場合は、 `org.hibernate.validator.spi.messageinterpolation.LocaleResolver` を追加することができます。"

#: _versions/3.27/guides/validation.adoc
msgid "Any CDI bean implementing `org.hibernate.validator.spi.messageinterpolation.LocaleResolver` will be taken into account."
msgstr "`org.hibernate.validator.spi.messageinterpolation.LocaleResolver` を実装しているCDIビーンはすべて考慮されます。"

#: _versions/3.27/guides/validation.adoc
msgid "The ``LocaleResolver``s are consulted in the order of `@Priority` (higher priority goes first)."
msgstr "`LocaleResolver` は、 `@Priority` （優先順位の高いものから）順に参照されます。"

#: _versions/3.27/guides/validation.adoc
msgid "A `LocaleResolver` may return null if it cannot resolve the locale, it will then be ignored."
msgstr "`LocaleResolver` は、ロケールを解決できない場合は null を返すかもしれない。その場合は無視される。"

#: _versions/3.27/guides/validation.adoc
msgid "The first non-null locale returned by a `LocaleResolver` is the one resolved."
msgstr "`LocaleResolver` が最初に返した非 NULL ロケールに解決されます。"

#: _versions/3.27/guides/validation.adoc
msgid "Validation groups for REST endpoint or service method validation"
msgstr "RESTエンドポイントまたはサービスメソッドのバリデーショングループ"

#: _versions/3.27/guides/validation.adoc
msgid ""
"It is sometimes necessary to enable different validation constraints\n"
"for the same class when it's passed to a different method."
msgstr "同じクラスが異なるメソッドに渡されたときに、異なる検証制約を有効にする必要があることがあります。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"For example, a `Book` may need to have a `null` identifier when passed to the `post` method\n"
"(because the identifier will be generated),\n"
"but a non-`null` identifier when passed to the `put` method\n"
"(because the method needs the identifier to know what to update)."
msgstr "例えば、 `Book` は、 `post` メソッドに渡されるときには `null` 識別子が必要ですが（識別子が生成されるため）、 `put` メソッドに渡されるときには `null` 以外の識別子が必要になる場合があります（メソッドが更新内容を知るために識別子を必要とするため）。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"To address this, you can take advantage of validation groups.\n"
"Validation groups are markers that you put on your constraints in order to enable or disable them at will."
msgstr "これに対処するために、バリデーション・グループを利用することができます。バリデーション・グループは、制約を有効または無効にするために制約に付けるマーカーです。"

#: _versions/3.27/guides/validation.adoc
msgid "First, define the `Post` and `Put` groups, which are just Java interfaces."
msgstr "まず、 `Post` と `Put` グループを定義します。これらは単なるJavaインターフェースです。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"Make the custom groups extend the `Default` group.\n"
"This means that whenever these groups are enabled, the `Default` group is also enabled.\n"
"This is useful if you have constraints that you want validated in both the `Post` and `Put` method:\n"
"you can simply use the default group on those constraints, like on the `title` property below."
msgstr "カスタムグループが `Default` グループを拡張するようにします。これは、これらのグループが有効なときはいつでも、 `Default` グループも有効であることを意味します。これは、 `Post` と `Put` の両方のメソッドで検証したい制約がある場合に便利です。以下の `title` プロパティのように、これらの制約に単純にデフォルトグループを使用することができます。"

#: _versions/3.27/guides/validation.adoc
msgid "Then add the relevant constraints to `Book`, assigning the right group to each constraint:"
msgstr "次に、関連する制約を `Book` に追加し、各制約に適切なグループを割り当てます。"

#: _versions/3.27/guides/validation.adoc
msgid "Finally, add a `@ConvertGroup` annotation next to your `@Valid` annotation in your validated method."
msgstr "最後に、検証済みメソッドの `@Valid` アノテーションの横に `@ConvertGroup` アノテーションを追加します。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"Enable the `Post` group, meaning only constraints assigned to the `Post` (and `Default`) groups\n"
"will be validated for the `book` parameter of the `post` method.\n"
"In this case, it means `Book.id` must be `null` and `Book.title` must not be blank."
msgstr "`Post` グループを有効にすると、 `Post` (および `Default`) グループに割り当てられた制約のみが `post` メソッドの `book` パラメータに対して検証されることを意味します。この場合、 `Book.id` は `null` でなければならず、 `Book.title` は空白であってはならないことを意味します。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"Enable the `Put` group, meaning only constraints assigned to the `Put` (and `Default`) groups\n"
"will be validated for the `book` parameter of the `put` method.\n"
"In this case, it means `Book.id` must not be `null` and `Book.title` must not be blank."
msgstr "`Put` グループを有効にすると、 `Put` (および `Default`) グループに割り当てられた制約のみが `put` メソッドの `book` パラメータに対して検証されることを意味します。この場合、 `Book.id` は `null` であってはならず、 `Book.title` は空白であってはならないことを意味します。"

#: _versions/3.27/guides/validation.adoc
msgid "Limitations"
msgstr "制約事項"

#: _versions/3.27/guides/validation.adoc
msgid "META-INF/validation.xml"
msgstr "META-INF/validation.xml"

#: _versions/3.27/guides/validation.adoc
msgid "Configuring the `ValidatorFactory` using a `META-INF/validation.xml` file is *NOT* supported in Quarkus."
msgstr "Quarkusでは、 `META-INF/validation.xml` ファイルを使用した `ValidatorFactory` の設定はサポートされて *いません* 。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"At the moment, Hibernate Validator does not expose an API to extract the information from this file\n"
"so that we could register the appropriate classes for reflection."
msgstr "現時点では、Hibernate Validatorはリフレクションのために適切なクラスを登録する為にこのファイルから情報を抽出するAPIを公開していません。"

#: _versions/3.27/guides/validation.adoc
msgid "To configure the `ValidatorFactory`, use the exposed configuration properties and the CDI integration."
msgstr "`ValidatorFactory` を設定するには、公開された設定プロパティとCDI統合を使用します。"

#: _versions/3.27/guides/validation.adoc
#, fuzzy
msgid ""
"While configuration of the validator factory is not possible through XML, constraint declaration is.\n"
"Quarkus accepts constraints defined by annotations in your classes or in the `validation.xml`."
msgstr "バリデータファクトリの設定はXMLではできませんが、制約の宣言は可能です。Quarkusは、クラス内のアノテーションや `validation.xml` .NET Frameworkで定義された制約を受け入れます。"

#: _versions/3.27/guides/validation.adoc
msgid "ValidatorFactory and native executables"
msgstr "ValidatorFactoryとネイティブ実行可能ファイル"

#: _versions/3.27/guides/validation.adoc
msgid ""
"Quarkus provides a default `ValidatorFactory` that you can customize using configuration properties.\n"
"This `ValidatorFactory` is carefully initialized to support native executables\n"
"using a bootstrap that is Quarkus-specific."
msgstr "Quarkusは、設定プロパティを使用してカスタマイズ可能なデフォルトの `ValidatorFactory` を提供します。この `ValidatorFactory` は、Quarkus 固有のブートストラップを使用してネイティブ実行可能ファイルをサポートするように慎重に初期化されています。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"Creating a `ValidatorFactory` by yourself it not supported in native executables\n"
"and if you try to do so,\n"
"you will get an  error similar to `jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no\n"
"Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your\n"
"classpath.` when running your native executable."
msgstr "`ValidatorFactory` を自分で作成することは、ネイティブ実行可能ファイルではサポートされていません。作成しようとすると、ネイティブ実行可能ファイルを実行する際に `jakarta.validation.NoProviderFoundException: Unable to create a Configuration, because no Jakarta Bean Validation provider could be found. Add a provider like Hibernate Validator (RI) to your classpath.` のようなエラーが発生します。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"Thus why you should always use the Quarkus-managed `ValidatorFactory` by injecting an instance of\n"
"`ValidatorFactory` or directly an instance of `Validator` using CDI injection."
msgstr "これが、 `ValidatorFactory` のインスタンスを注入するか、CDIインジェクションを使用して `Validator` のインスタンスを直接注入することで、Quarkusが管理する `ValidatorFactory` を常に使用しなければならない理由です。"

#: _versions/3.27/guides/validation.adoc
msgid ""
"To support some external libraries that are creating a `ValidatorFactory` using the default bootstrap,\n"
"Quarkus returns the `ValidatorFactory` managed by Quarkus when `Validation.buildDefaultValidatorFactory()`\n"
"is called."
msgstr "デフォルトのブートストラップを使用して `ValidatorFactory` を作成している一部の外部ライブラリをサポートするために、Quarkus は `Validation.buildDefaultValidatorFactory()` が呼び出されたときに Quarkus によって管理されている `ValidatorFactory` を返却します。"

#: _versions/3.27/guides/validation.adoc
msgid "Hibernate Validator Configuration Reference"
msgstr "Hibernate Validator設定リファレンス"

#: _versions/3.27/guides/validation.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
