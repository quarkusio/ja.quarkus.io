msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid "Proactive authentication"
msgstr "プロアクティブ認証"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"Learn how to manage proactive authentication in Quarkus, including customizing settings and handling exceptions.\n"
"Gain practical insights and strategies for various application scenarios."
msgstr ""
"設定のカスタマイズや例外処理など、Quarkusでプロアクティブ認証を管理する方法を学びます。\n"
"さまざまなアプリケーションシナリオに対する実践的な洞察と戦略を得ることができます。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"Proactive authentication is enabled in Quarkus by default.\n"
"It ensures that all incoming requests with credentials are authenticated, even if the target page does not require authentication.\n"
"As a result, requests with invalid credentials are rejected, even if the target page is public.\n"
"Requests without credentials are not rejected, because anonymous requests are allowed."
msgstr ""
"Quarkusでは、プロアクティブ認証がデフォルトで有効になっています。\n"
"これにより、ターゲットページが認証を必要としない場合でも、認証情報を持つすべての受信リクエストが認証されます。\n"
"その結果、ターゲットページが公開されている場合でも、無効な認証情報を持つリクエストは拒否されます。\n"
"匿名リクエストが許可されているため、認証情報のないリクエストは拒否されません。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"You can turn off this default behavior if you want to authenticate only when the target page requires it.\n"
"To turn off proactive authentication so that authentication occurs only when the target page requires it, modify the `application.properties` configuration file as follows:"
msgstr ""
"ターゲット・ページが要求したときにのみ認証を行いたい場合は、このデフォルトの動作をオフにすることができます。\n"
"プロアクティブ認証をオフにして、ターゲット・ページが要求したときにのみ認証を行なうようにするには、 `application.properties` の設定ファイルを以下のように変更します："

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"If you turn off proactive authentication, the authentication process runs only when an identity is requested.\n"
"An identity can be requested because of security rules that require the user to authenticate or because programmatic access to the current identity is required."
msgstr ""
"プロアクティブ認証をオフにすると、ID が要求されたときにのみ認証プロセスが実行されます。\n"
"ID が要求されるのは、ユーザ認証を必要とするセキュリティ・ルールがあるため、または現在の ID へのプログラムによるアクセスが必要なためです。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"If proactive authentication is not used, accessing `SecurityIdentity` is a blocking operation.\n"
"This is because authentication might have yet to happen, and accessing `SecurityIdentity` might require calls to external systems, such as databases, that might block the operation.\n"
"For blocking applications, this is not an issue.\n"
"However, if you have disabled authentication in a reactive application, this fails because you cannot do blocking operations on the I/O thread.\n"
"To work around this, you need to `@Inject` an instance of `io.quarkus.security.identity.CurrentIdentityAssociation` and call the `Uni<SecurityIdentity> getDeferredIdentity();` method.\n"
"Then, you can subscribe to the resulting `Uni` to be notified when authentication is complete and the identity is available."
msgstr ""
"プロアクティブ認証が使用されている場合、 `SecurityIdentity` へのアクセスはブロッキング操作となります。\n"
"これは、認証がまだ行われていない可能性があり、 `SecurityIdentity` へのアクセスにはデータベースなどの外部システムへの呼び出しが必要になるため、操作がブロックされる可能性があるためです。\n"
"ブロッキング・アプリケーションの場合、これは問題ではありません。\n"
"しかし、リアクティブなアプリケーションで認証を無効にしている場合は、 I/O スレッドでブロッキング操作を行うことができないため、失敗します。\n"
"これを回避するには、 `io.quarkus.security.identity.CurrentIdentityAssociation` のインスタンスを `@Inject` し、 `Uni<SecurityIdentity> getDeferredIdentity();` メソッドを呼び出します。\n"
"そして、認証が完了して ID が利用可能になったときに通知されるように、生成された `Uni` をサブスクライブします。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"You can still access `SecurityIdentity` synchronously with `public SecurityIdentity getIdentity()` in xref:rest.adoc[Quarkus REST (formerly RESTEasy Reactive)] from endpoints that are annotated with `@RolesAllowed`, `@Authenticated`, or with respective configuration authorization checks because authentication has already happened.\n"
"The same is also valid for xref:reactive-routes.adoc[Reactive routes] if a route response is synchronous."
msgstr ""
"認証がすでに行われているため、`@RolesAllowed`、`@Authenticated`、またはそれぞれの設定認可チェックでアノテーションが付けられたエンドポイントから、xref:rest.adoc[Quarkus REST (formerly RESTEasy Reactive)] の `public SecurityIdentity getIdentity()` を使用して `SecurityIdentity` に同期的にアクセスできます。\n"
"ルート応答が同期的である場合、xref:reactive-routes.adoc[Reactive ルート] にも同じことが当てはまります。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"When proactive authentication is disabled, xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[standard security annotations] used on CDI beans do not function on an I/O thread if a secured method that is not void synchronously returns a value.\n"
"This limitation arises from the necessity for these methods to access `SecurityIdentity`."
msgstr ""
"プロアクティブ認証が無効になっている場合、void ではないセキュリティー保護されたメソッドが同期的に値を返すと、CDI Bean で使用される xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[標準セキュリティーアノテーション] は I/O スレッドで機能しません。\n"
"この制限は、これらのメソッドが `SecurityIdentity` にアクセスする必要があることが原因です。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"The following example defines `HelloResource` and `HelloService`.\n"
"Any GET request to `/hello` runs on the I/O thread and throws a `BlockingOperationNotAllowedException` exception."
msgstr ""
"次の例では、`HelloResource` と `HelloService` を定義します。\n"
"`/hello` へのすべての GET リクエストは I/O スレッドで実行され、`BlockingOperationNotAllowedException` 例外が出力されます。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid "There is more than one way to fix the example:"
msgstr "例の修正方法は1つではありません:"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid "Switch to a worker thread by annotating the `hello` endpoint with `@Blocking`."
msgstr "`hello` エンドポイントに `@Blocking` アノテーションを付けて、ワーカースレッドに切り替えます。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid "Change the `sayHello` method return type by using a reactive or asynchronous data type."
msgstr "リアクティブまたは非同期データ型を使用して、`sayHello` メソッドの戻り値の型を変更します。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"Move the `@RolesAllowed` annotation to the endpoint.\n"
"This could be one of the safest ways because accessing `SecurityIdentity` from endpoint methods is never the blocking operation."
msgstr ""
"`@RolesAllowed` アノテーションをエンドポイントに移動します。\n"
"エンドポイントメソッドからの `SecurityIdentity` へのアクセスは決してブロッキング操作ではないので、これは最も安全な方法のひとつです。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid "Activating the CDI request context"
msgstr "CDI リクエストコンテキストの有効化"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"You may need to inject `@RequestScoped` beans during authentication and authorization.\n"
"A good example of this is accessing a database during a `SecurityIdentity` augmentation,\n"
"which is described in the xref:security-customization.adoc#security-identity-customization[Security Identity Customization] section of the \"Security Tips and Tricks\" guide.\n"
"If authentication or authorization fails with the `jakarta.enterprise.context.ContextNotActiveException`, disabling proactive authentication is most often the best solution.\n"
"Users can also activate xref:cdi-reference.adoc#request-context-lifecycle[CDI request context], for example, by using the `@ActivateRequestContext` annotation.\n"
"However, some CDI beans may not be ready for use."
msgstr ""
"認証および認可の際に、`@RequestScoped` の Bean をインジェクトする必要がある場合があります。\n"
"適切な例として、`SecurityIdentity` の拡張時にデータベースへアクセスするケースが挙げられます。これについては、\"Security Tips and Tricks\" ガイドの xref:security-customization.adoc#security-identity-customization[セキュリティーアイデンティティーカスタマイズ] セクションで説明されています。\n"
"認証や認可の際に `jakarta.enterprise.context.ContextNotActiveException` が発生する場合、プロアクティブ認証を無効化する のが最も適切な解決策となることが多いです。\n"
"また、ユーザーは xref:cdi-reference.adoc#request-context-lifecycle[CDI リクエストコンテキスト] を有効化することもできます。たとえば、`@ActivateRequestContext` アノテーションを使用して有効にできます。ただし、一部の CDI Bean は利用可能な状態になっていない可能性がある点に注意してください。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"One exception to this solution is a situation when application endpoints are secured with the xref:security-authorize-web-endpoints-reference.adoc#authorization-using-configuration[Authorization using configuration].\n"
"For more information, see the xref:security-authorize-web-endpoints-reference.adoc#policy-active-cdi-request-context[Inject RequestScoped beans into HttpSecurityPolicy] section of the \"Authorization of Web endpoints\" guide for more information."
msgstr ""
"このソリューションの例外は、アプリケーションエンドポイントが xref:security-authorize-web-endpoints-reference.adoc#authorization-using-configuration[設定を使用した承認] で保護されている場合です。\n"
"詳細は、「Web エンドポイントの認可」ガイドの xref:security-authorize-web-endpoints-reference.adoc#policy-active-cdi-request-context[RequestScoped Bean を HttpSecurityPolicy に挿入する] セクションを参照してください。"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid "Customize authentication exception responses"
msgstr "認証例外応答のカスタマイズ"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"You can use Jakarta REST `ExceptionMapper` to capture Quarkus Security authentication exceptions such as `io.quarkus.security.AuthenticationFailedException`.\n"
"For example:"
msgstr ""
"Jakarta REST `ExceptionMapper` を使用して、 `io.quarkus.security.AuthenticationFailedException` のような Quarkus Security 認証の例外をキャプチャできます。\n"
"例:"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid ""
"Some HTTP authentication mechanisms must handle authentication exceptions themselves to create a correct authentication challenge.\n"
"For example, `io.quarkus.oidc.runtime.CodeAuthenticationMechanism`, which manages OpenID Connect (OIDC) authorization code flow authentication, must build a correct redirect URL and set a state cookie.\n"
"Therefore, avoid using custom exception mappers to customize authentication exceptions thrown by such mechanisms.\n"
"Instead, a safer approach is to ensure that proactive authentication is enabled and to use Vert.x HTTP route failure handlers.\n"
"This is because events come to the handler with the correct response status and headers.\n"
"Then, you must only customize the response; for example:"
msgstr ""
"一部の HTTP 認証メカニズムでは、正しい認証チャレンジを作成するために、認証例外を自ら処理する必要があります。\n"
"たとえば、OpenID Connect (OIDC) 認可コードフロー認証を管理する `io.quarkus.oidc.runtime.CodeAuthenticationMechanism` は、正しいリダイレクト URL を構築し、状態 Cookie を設定する必要があります。\n"
"したがって、このようなメカニズムによって出力される認証例外をカスタマイズするためにカスタム例外マッパーを使用することは避けてください。\n"
"代わりに、より安全なアプローチとしては、プロアクティブ認証が有効になっていることを確認し、Vert.x HTTP ルート失敗ハンドラーを使用してください。\n"
"これは、イベントが正しい応答ステータスとヘッダーとともにハンドラーに送信されるためです。\n"
"次に、応答のみをカスタマイズする必要があります。例:"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid "References"
msgstr "リファレンス"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid "xref:security-architecture.adoc[Quarkus Security architecture]"
msgstr "xref:security-architecture.adoc[Quarkus Security アーキテクチャ]"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc[Authentication mechanisms in Quarkus]"
msgstr "xref:security-authentication-mechanisms.adoc[Quarkusの認証メカニズム]"

#: _versions/3.27/guides/security-proactive-authentication.adoc
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr "xref:security-identity-providers.adoc[アイデンティティ・プロバイダー]"
