msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/resteasy.adoc
msgid "RESTEasy Classic"
msgstr "RESTEasy Classic"

#: _versions/3.27/guides/resteasy.adoc
msgid "This guide is about https://resteasy.dev[RESTEasy Classic], which used to be the default Jakarta REST (formerly known as JAX-RS) implementation until Quarkus 2.8."
msgstr "このガイドは、Quarkus 2.8 までデフォルトの Jakarta REST (旧称 JAX-RS) 実装であった https://resteasy.dev[RESTEasy Classic] に関するものです。"

#: _versions/3.27/guides/resteasy.adoc
msgid "It is now recommended to use Quarkus REST (formerly RESTEasy Reactive), which supports both traditional blocking workloads and reactive workloads equally well."
msgstr "現在は、従来のブロッキングワークロードとリアクティブワークロードの両方を同様にサポートする Quarkus REST (旧称 RESTEasy Reactive) の使用が推奨されています。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"For more information about Quarkus REST,\n"
"please see the xref:rest-json.adoc[introductory REST JSON guide] or the xref:rest.adoc[Quarkus REST reference documentation]."
msgstr "Quarkus REST の詳細は、xref:rest-json.adoc[REST JSON 入門ガイド] または xref:rest.adoc[Quarkus REST リファレンスドキュメント] を参照してください。"

#: _versions/3.27/guides/resteasy.adoc
msgid "There is another guide if you need a xref:resteasy-client.adoc[REST client based on RESTEasy Classic] (including support for JSON)."
msgstr "RESTEasy Classic をベースにした REST クライアント (JSON のサポートを含む) が必要な場合は、xref:resteasy-client.adoc[別のガイド] を参照してください。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Architecture"
msgstr "アーキテクチャ"

#: _versions/3.27/guides/resteasy.adoc
msgid "The application created in this guide is straightforward: users can add elements to a list through a form, and the list gets updated accordingly."
msgstr "このガイドで作成されるアプリケーションは簡単です。ユーザーがフォームを通じてリストに要素を追加でき、それに応じてリストが更新されます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "All the information between the browser and the server is formatted as JSON."
msgstr "ブラウザとサーバー間の情報はすべてJSON形式になっています。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.27/guides/resteasy.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"This command generates a new project importing the RESTEasy/Jakarta REST and https://github.com/FasterXML/jackson[Jackson] extensions,\n"
"and in particular, adds the following dependency:"
msgstr "このコマンドは、RESTEasy/Jakarta REST および https://github.com/FasterXML/jackson[Jackson] エクステンションをインポートする新しいプロジェクトを生成し、特に次の依存関係を追加します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/resteasy.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/resteasy.adoc
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules], so you do not need to do it manually."
msgstr "ユーザーエクスペリエンスを向上させるために、Quarkus は 3 つの Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 モジュール] を登録しているので、手動で登録する必要はありません。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B], so if you prefer JSON-B over Jackson, you can create a project relying on the RESTEasy JSON-B extension instead:"
msgstr "Quarkus は https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] もサポートしているため、Jackson よりも JSON-B を利用したい場合は、代わりに RESTEasy JSON-B エクステンションを依存関係に持つプロジェクトを作成することができます。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"This command generates a new project importing the RESTEasy/Jakarta REST and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions,\n"
"and in particular, adds the following dependency:"
msgstr "このコマンドは、RESTEasy/Jakarta REST および https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] エクステンションをインポートする新しいプロジェクトを生成し、特に次の依存関係を追加します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Creating the first JSON REST service"
msgstr "初めての JSON REST サービスの作成"

#: _versions/3.27/guides/resteasy.adoc
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、果物のリストを管理するアプリケーションを作成します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "First, let us create the `Fruit` bean as follows:"
msgstr "まず、次のように `Fruit` Bean を作成してみましょう。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Nothing fancy.\n"
"One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "派手なことは何もありません。注意すべき重要なことは、デフォルトのコンストラクタを持つことはJSONシリアライズレイヤーで必須であるということです。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr "次に、 `org.acme.rest.json.FruitResource` クラスを以下のように作成します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the Jakarta REST annotations."
msgstr "実装は非常に簡単で、Jakarta RESTアノテーションを使用してエンドポイントを定義するだけです。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson],\n"
"depending on the extension you chose when initializing the project."
msgstr "`Fruit` オブジェクトは、プロジェクトの初期化時に選択したエクステンションに応じて、 https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] または link:https://github.com/FasterXML/jackson[Jackson] によって自動的にシリアライズ/デシリアライズされます。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"When a JSON extension like `quarkus-resteasy-jackson` or `quarkus-resteasy-jsonb` is installed, Quarkus defaults to the `application/json` media type for most return values.\n"
"This can be overridden using `@Produces` or `@Consumes` annotations, except for certain well-known types like `String` (defaulting to `text/plain`) and `File` (defaulting to `application/octet-stream`)."
msgstr ""
"`quarkus-resteasy-jackson` や `quarkus-resteasy-jsonb` などの JSON エクステンションがインストールされている場合、Quarkus はほとんどの戻り値に対して `application/json` メディアタイプをデフォルトとして使用します。\n"
"これは、`String` (デフォルトは `text/plain`) や `File` (デフォルトは `application/octet-stream`) などの特定のよく知られたタイプを除き、`@Produces` または `@Consumes` アノテーションを使用してオーバーライドできます。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"To disable the default JSON behavior, set `quarkus.resteasy-json.default-json=false`, and the default will return to auto-negotiation.\n"
"In this case, you must include `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` annotations in your endpoints to use JSON."
msgstr ""
"デフォルトの JSON 動作を無効にするには、`quarkus.resteasy-json.default-json=false` を設定します。デフォルトが自動ネゴシエーションに戻ります。\n"
"この場合、JSON を使用するには、エンドポイントに `@Produces(MediaType.APPLICATION_JSON)` および `@Consumes(MediaType.APPLICATION_JSON)` アノテーションを含める必要があります。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"If you don't depend on the JSON default, it's highly advisable to use `@Produces` and `@Consumes` annotations on your endpoints to specify the expected content types precisely.\n"
"This helps reduce the number of Jakarta REST providers (essentially converters) included in the native executable."
msgstr ""
"JSON のデフォルトに依存しない場合は、エンドポイントで `@Produces` および `@Consumes` アノテーションを使用して、予想されるコンテンツタイプを正確に指定することを強く推奨します。\n"
"これにより、ネイティブ実行可能ファイルに含まれる Jakarta REST プロバイダー (基本的にはコンバーター) の数を減らすことができます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Configuring JSON support"
msgstr "JSON サポートの設定"

#: _versions/3.27/guides/resteasy.adoc
msgid "Jackson"
msgstr "Jackson"

#: _versions/3.27/guides/resteasy.adoc
msgid "In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (utilized by Quarkus extensions) is set to ignore unknown properties (by disabling `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES`)."
msgstr "Quarkus では、CDI 経由で取得された (Quarkus エクステンションによって利用される) デフォルトの Jackson `ObjectMapper` は、(`DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` を無効にして) 不明なプロパティーを無視するように設定されています。"

#: _versions/3.27/guides/resteasy.adoc
msgid "To revert to Jackson's default behavior, set `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties`, or set it on a per-class basis with `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr "Jackson のデフォルトの動作に戻すには、`application.properties` で `quarkus.jackson.fail-on-unknown-properties=true` を設定するか、`@JsonIgnoreProperties(ignoreUnknown = false)` を使用してクラスごとに設定します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Additionally, the `ObjectMapper` formats dates and times in ISO-8601 (by disabling `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS`)."
msgstr "さらに、`ObjectMapper` は、(`SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` を無効にして) 日付と時刻を ISO-8601 でフォーマットします 。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"To restore Jackson's default behavior, use `quarkus.jackson.write-dates-as-timestamps=true` in your `application.properties`.\n"
"For custom date format on a single field, use the `@JsonFormat` annotation."
msgstr ""
"Jackson のデフォルトの動作を復元するには、`application.properties` で `quarkus.jackson.write-dates-as-timestamps=true` を使用します。\n"
"単一フィールドのカスタム日付形式の場合は、`@JsonFormat` アノテーションを使用します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Quarkus simplifies Jackson configuration via CDI beans. Create a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer` to apply various Jackson settings. Here's an example for registering a custom module:"
msgstr "Quarkus は、CDI Bean を介して Jackson の設定を簡素化します。さまざまな Jackson 設定を適用するには、`io.quarkus.jackson.ObjectMapperCustomizer` タイプの CDI Bean を作成します。カスタムモジュールを登録する例を次に示します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "This approach is recommended for configuring Jackson settings."
msgstr "Jackson 設定を設定する場合は、このアプローチが推奨されます。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Users can even provide their own `ObjectMapper` bean if they so choose.\n"
"If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.\n"
"Failure to do so will prevent Jackson-specific customizations provided by various extensions from being applied."
msgstr "ユーザーは、選択すれば自分の `ObjectMapper` Bean を提供することもできます。この場合、 `ObjectMapper` を生成する CDI プロデューサーの中で、すべての `io.quarkus.jackson.ObjectMapperCustomizer` Bean を手動で注入して適用することが非常に重要です。これを怠ると、様々なエクステンションによって提供される Jackson 固有のカスタマイズが適用されなくなります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "JSON-B"
msgstr "JSON-B"

#: _versions/3.27/guides/resteasy.adoc
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr "上記のように、Quarkusでは、 `quarkus-resteasy-jsonb` エクステンションを使用することで、Jacksonの代わりにJSON-Bを使用するオプションを提供しています。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Following the same approach described in the previous section, JSON-B can be configured using an `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr "前のセクションで説明したのと同じアプローチに従って、`io.quarkus.jsonb.JsonbConfigCustomizer` Bean を使用して JSON-B を設定できます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "If, for example, a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr "たとえば、 `FooSerializer` という名前のカスタムシリアライザーを `com.example.Foo` タイプで JSON-B で登録する必要がある場合、以下のような Bean を追加すれば十分です。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"A more advanced option would be to directly provide a bean of `jakarta.json.bind.JsonbConfig` (with a `Dependent` scope) or, in the extreme case, to provide a bean of type `jakarta.json.bind.Jsonb` (with a `Singleton` scope).\n"
"If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `jakarta.json.bind.Jsonb`.\n"
"Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr ""
"より高度なオプションは、`jakarta.json.bind.JsonbConfig` の Bean を (`Dependent` スコープで) 直接提供するか、極端な場合、`jakarta.json.bind.Jsonb` タイプの Bean を (`Singleton` スコープで) 提供することでしょう。\n"
"後者の方法を利用する場合、`jakarta.json.bind.Jsonb` を生成する CDI プロデューサーにおいて、すべての `io.quarkus.jsonb.JsonbConfigCustomizer` Bean を手動で注入し適用することが非常に重要です。\n"
"これを怠ると、さまざまなエクステンションが提供する JSON-B 固有のカスタマイズが適用されなくなります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "JSON Hypertext Application Language (HAL) support"
msgstr "JSON ハイパーテキストアプリケーション言語 (HAL) のサポート"

#: _versions/3.27/guides/resteasy.adoc
msgid "The https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] standard is a simple format to represent web links."
msgstr "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL] 標準は、Web リンクを表す単純な形式です。"

#: _versions/3.27/guides/resteasy.adoc
msgid "To enable the HAL support, add the `quarkus-hal` extension to your project. Also, as HAL needs JSON support, you need to add either the `quarkus-resteasy-jsonb` or the `quarkus-resteasy-jackson` extension."
msgstr "HAL のサポートを有効にするには、 `quarkus-hal` エクステンションをプロジェクトに追加します。また、 HAL は JSON サポートを必要とするため、 `quarkus-resteasy-jsonb` または `quarkus-resteasy-jackson` のいずれかのエクステンションモジュールを追加する必要があります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Table Context object"
msgstr "テーブルコンテキストオブジェクト"

#: _versions/3.27/guides/resteasy.adoc
msgid "GAV"
msgstr "GAV"

#: _versions/3.27/guides/resteasy.adoc
msgid "Usage"
msgstr "使用方法"

#: _versions/3.27/guides/resteasy.adoc
msgid "`io.quarkus:quarkus-hal`"
msgstr "`io.quarkus:quarkus-hal`"

#: _versions/3.27/guides/resteasy.adoc
msgid "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"
msgstr "https://tools.ietf.org/id/draft-kelly-json-hal-01.html[HAL]"

#: _versions/3.27/guides/resteasy.adoc
msgid "After adding the extensions, we can now annotate the REST resources to produce the media type `application/hal+json` (or use RestMediaType.APPLICATION_HAL_JSON). For example:"
msgstr "エクステンションを追加した後、REST リソースにアノテーションを付けて、メディアタイプ `application/hal+json` を生成できます (または RestMediaType.APPLICATION_HAL_JSON を使用します)。例えば:"

#: _versions/3.27/guides/resteasy.adoc
msgid "Now, the endpoints `/records` and `/records/first` will accept the media type, both `json` and `hal+json`, to print the records in Hal format."
msgstr "これで、エンドポイント `/records` と `/records/first` は、`json` と `hal+json` の両方のメディアタイプを受け入れ、レコードを Hal 形式で出力するようになります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "For example, if we invoke the `/records` endpoint using curl to return a list of records, the HAL format will look like as follows:"
msgstr "たとえば、curl を使用して `/records` エンドポイントを呼び出してレコードのリストを返す場合、HAL 形式は次のようになります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "When we call a resource `/records/first` that returns only one instance, then the output is:"
msgstr "When we call a resource `/records/first` that returns only one instance, then the output is:"

#: _versions/3.27/guides/resteasy.adoc
msgid "Creating a frontend"
msgstr "フロントエンドの作成"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Now let us add a simple web page to interact with our `FruitResource`.\n"
"Quarkus automatically serves static resources located under the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this link:{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""
"それでは、`FruitResource` とやり取りするための簡単なウェブページを追加してみましょう。\n"
"Quarkus は、`META-INF/resources` ディレクトリーの下にある静的リソースを自動的に提供します。\n"
"`src/main/resources/META-INF/resources` ディレクトリーに、この link:{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] ファイルのコンテンツを含む `fruits.html` ファイルを追加します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました。"

#: _versions/3.27/guides/resteasy.adoc
msgid "start Quarkus with:"
msgstr "Quarkusを起動します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "CLI"
msgstr "コマンドラインインタフェース"

#: _versions/3.27/guides/resteasy.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/3.27/guides/resteasy.adoc
msgid "Gradle"
msgstr "Gradle"

#: _versions/3.27/guides/resteasy.adoc
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr " `http://localhost:8080/fruits.html` をブラウザで開く"

#: _versions/3.27/guides/resteasy.adoc
msgid "add new fruits to the list via the form"
msgstr "フォームを使って新しいフルーツをリストに追加します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#: _versions/3.27/guides/resteasy.adoc
msgid "You can build a native executable with the usual command:"
msgstr "通常のコマンドでネイティブ実行可能ファイルをビルドすることができます:"

#: _versions/3.27/guides/resteasy.adoc
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "実行は簡単で、 `./target/rest-json-quickstart-1.0-SNAPSHOT-runner` を実行するだけです。"

#: _versions/3.27/guides/resteasy.adoc
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開いてアプリケーションを使用します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "About serialization"
msgstr "シリアライゼーションについて"

#: _versions/3.27/guides/resteasy.adoc
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr "JSONシリアライズライブラリは、Javaのリフレクションを使用してオブジェクトのプロパティーを取得してシリアライズします。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"When using native executables with GraalVM, all classes that will be used with reflection need to be registered.\n"
"The good news is that Quarkus does that work for you most of the time.\n"
"So far, we have not registered any class, not even `Fruit`, for reflection usage, and everything is working fine."
msgstr ""
"GraalVM でネイティブ実行可能ファイルを使用する場合、リフレクションで使用されるすべてのクラスを登録する必要があります。\n"
"幸いなことに、ほとんどの場合、Quarkus がその作業を自動的に実行します。\n"
"これまでのところ、`Fruit` を含め、リフレクションを使用するためのクラスを 1 つも登録していませんが、すべて正常に動作しています。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.\n"
"When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr "Quarkusは、RESTメソッドからシリアライズされた型を推論することができる場合に、何らかのマジックを実行します。以下のようなRESTメソッドがある場合、Quarkusは、 `Fruit` がシリアライズされると判断します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Quarkus does that for you automatically by analyzing the REST methods at build time, and that is why we did not need any reflection registration in the first part of this guide."
msgstr "Quarkus は、ビルド時に REST メソッドを分析することで、このような処理を自動的に実行します。そのため、このガイドの最初の部分ではリフレクション登録は必要ありませんでした。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Another common pattern in the Jakarta REST world is to use the `Response` object.\n"
"`Response` comes with some nice perks:"
msgstr "Jakarta RESTの世界でよく見られるもう一つのパターンは、 `Response` オブジェクトを使うことです。 `Response` には、いくつかの良い特典があります:"

#: _versions/3.27/guides/resteasy.adoc
msgid "You can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance)."
msgstr "メソッドで何が起こるかによって異なるエンティティータイプを返すことができます (たとえば `Legume` や `Error`)。"

#: _versions/3.27/guides/resteasy.adoc
msgid "You can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr "`Response` の属性を設定できます (エラーが発生したときにステータスを知ることができます)。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Your REST method then looks like this:"
msgstr "RESTメソッドは次のようになります。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Quarkus cannot determine at build time the type included in the `Response` as the information is not available.\n"
"In this case, Quarkus won't be able to register for reflection in the required classes automatically."
msgstr ""
"Quarkus は、情報が利用できないため、ビルド時に `Response` に含まれるタイプを判別できません。\n"
"この場合、Quarkus は必要なクラスにリフレクションを自動的に登録できなくなります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "This leads us to our next section."
msgstr "これが次のセクションにつながります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Using response"
msgstr "レスポンスの使用"

#: _versions/3.27/guides/resteasy.adoc
msgid "Let us create the `Legume` class, which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr "`Fruit` クラスと同じモデルに従って、JSON としてシリアライズされる `Legume` クラスを作成してみましょう。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Now let's create a `LegumeResource` REST service with only one method that returns the list of legumes."
msgstr "それでは、マメ科植物のリストを返すメソッドを 1 つだけ持つ `LegumeResource` REST サービスを作成してみましょう。"

#: _versions/3.27/guides/resteasy.adoc
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr "このメソッドは `Response` を返し、 `Legume` のリストではありません。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Now, let us add a simple web page to display our list of legumes.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this\n"
"{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr ""
"ここで、マメ科植物のリストを表示するための簡単なウェブページを追加してみましょう。\n"
"`src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] ファイルの内容を含む `legumes.html` ファイルを追加します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Open a browser to http://localhost:8080/legumes.html, and you will see our list of legumes."
msgstr "ブラウザーを開いて http://localhost:8080/legumes.html にアクセスすると、マメ科植物のリストが表示されます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "The interesting part starts when running the application as a native executable:"
msgstr "興味深い部分は、アプリケーションをネイティブ実行可能ファイルとして実行するときに始まります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "create the native executable with:"
msgstr "以下でネイティブ実行可能ファイルを作成します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr "`./target/rest-json-quickstart-1.0-SNAPSHOT-runner` で実行します"

#: _versions/3.27/guides/resteasy.adoc
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr "ブラウザーを起動し、 http://localhost:8080/legumes.html にアクセスします。"

#: _versions/3.27/guides/resteasy.adoc
msgid "There are no legumes there."
msgstr "そこにはマメ科植物はありません。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"As mentioned above, the issue is that Quarkus could not determine the `Legume` class, which will require some reflection by analyzing the REST endpoints.\n"
"The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list, so it does not serialize the fields' data."
msgstr ""
"上記のように、問題は Quarkus が REST エンドポイントを分析することで `Legume` クラスが何らかのリフレクションを必要とすることを判断できなかったことです。\n"
"JSON シリアライズライブラリーは、`Legume` のフィールドのリストを取得しようとすると空のリストを取得するため、フィールドのデータをシリアライズしません。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.\n"
"GraalVM will return an empty list of fields."
msgstr ""
"現時点では、JSON-B や Jackson がクラスのフィールドのリストを取得しようとしたときに、そのクラスがリフレクションに登録されていない場合、例外は出力されません。\n"
"GraalVM は空のフィールドのリストを返します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr "うまくいけば、将来的にはこれが変化して、エラーがより明白になるでしょう。"

#: _versions/3.27/guides/resteasy.adoc
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr "`Legume` クラスに `@RegisterForReflection` アノテーションを追加することで、手動で `Legume` を リフレクション用に登録することができます。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation.\n"
"More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するようQuarkusに指示します。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Let us do that and follow the same steps as before:"
msgstr "それを実行して、今までと同じ手順を踏んでみましょう。"

#: _versions/3.27/guides/resteasy.adoc
msgid "hit `Ctrl+C` to stop the application"
msgstr "`Ctrl+C` を叩いてアプリケーションを停止させる"

#: _versions/3.27/guides/resteasy.adoc
msgid "This time, you can see our list of legumes."
msgstr "今回はマメ科の一覧が表示されました。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Being reactive"
msgstr "リアクティブであること"

#: _versions/3.27/guides/resteasy.adoc
msgid "For reactive workloads, please always use xref:rest.adoc[Quarkus REST]."
msgstr "リアクティブワークロードの場合は、常に xref:rest.adoc[Quarkus REST] を使用してください。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"You can return _reactive types_ to handle asynchronous processing.\n"
"Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr "非同期処理を処理するために _リアクティブ型_ を返すことができます。Quarkusでは、リアクティブで非同期なコードを書くために link:https://smallrye.io/smallrye-mutiny[Mutiny] の使用を推奨しています。"

#: _versions/3.27/guides/resteasy.adoc
msgid "To integrate Mutiny and RESTEasy, you need to add the `quarkus-resteasy-mutiny` dependency to your project:"
msgstr "Mutiny と RESTEasy を統合するには、 `quarkus-resteasy-mutiny` 依存関係をプロジェクトに追加する必要があります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Then, your endpoint can return `Uni` or `Multi` instances:"
msgstr "そして、エンドポイントは `Uni` や `Multi` のインスタンスを返すことができます。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Use `Uni` when you have a single result.\n"
"Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr "単一の結果がある場合は `Uni` を使用します。 `Multi` は、非同期的に放出される可能性のある複数の項目がある場合に使用します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr "`Uni` と `Response` を使用して、非同期 HTTP レスポンスを返すことができます: `Uni<Response>` ."

#: _versions/3.27/guides/resteasy.adoc
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Mutinyについての詳細は、 xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] に記載されています。"

#: _versions/3.27/guides/resteasy.adoc
msgid "HTTP filters and interceptors"
msgstr "HTTP フィルターとインターセプター"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Both HTTP request and response can be intercepted by providing `ContainerRequestFilter` or `ContainerResponseFilter`\n"
"implementations respectively.\n"
"These filters are suitable for processing the metadata associated with a message: HTTP headers, query parameters, media type, and other metadata.\n"
"They also can abort the request processing, for instance, when the user does not have permission to access the endpoint."
msgstr ""
"HTTP リクエストとレスポンスの両方とも、それぞれ `ContainerRequestFilter` または `ContainerResponseFilter` の実装を提供することで、インターセプトすることができます。\n"
"これらのフィルターは、メッセージに関連付けられたメタデータ (HTTP ヘッダー、クエリパラメーター、メディアタイプ、その他のメタデータ) を処理するのに適しています。\n"
"また、ユーザーがエンドポイントにアクセスする権限を持っていない場合などに、リクエスト処理を中止することもできます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Let's use `ContainerRequestFilter` to add logging capability to our service. We can do that by implementing `ContainerRequestFilter` and annotating it with the `@Provider` annotation:"
msgstr "`ContainerRequestFilter` を使用して、サービスにロギング機能を追加してみましょう。 `ContainerRequestFilter` を実装して、 `@Provider` アノテーションをつけることで実現できます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Now, whenever a REST method is invoked, the request will be logged into the console:"
msgstr "これで、RESTメソッドが呼び出されるたびに、リクエストがコンソールにログとして記録されるようになりました。"

#: _versions/3.27/guides/resteasy.adoc
msgid "CORS filter"
msgstr "CORS フィルター"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-origin resource sharing] (CORS) is a mechanism that\n"
"allows restricted resources on a web page to be requested from another domain outside the domain from which the first resource\n"
"was served."
msgstr "link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[クロスオリジンリソース共有] (CORS)は、ウェブページ上の制限されたリソースを、最初のリソースが提供されたドメイン以外の別のドメインから要求できるようにするメカニズムです。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Quarkus includes a CORS filter at the HTTP layer level.\n"
"For more information about the CORS filters and their usage, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the Quarkus \"Cross-origin resource sharing\" guide."
msgstr ""
"Quarkus には、HTTP レイヤーレベルの CORS フィルターが含まれています。\n"
"CORS フィルターとその使用方法の詳細は、Quarkus のクロスオリジンリソース共有ガイドの xref:security-cors.adoc#cors-filter[CORS フィルター] セクションを参照してください。"

#: _versions/3.27/guides/resteasy.adoc
msgid "GZip Support"
msgstr "GZipのサポート"

#: _versions/3.27/guides/resteasy.adoc
msgid "Quarkus comes with GZip support (even though it is not enabled by default). The following configuration knobs allow to configure GZip support."
msgstr "QuarkusにはGZipサポートが搭載されています(デフォルトでは有効になっていませんが)。以下の設定ノブを使用して、GZipサポートを設定できます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Enable Gzip support."
msgstr "Gzipサポートを有効にします。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Configure the upper limit on the deflated request body.\n"
"This is useful to mitigate potential attacks by limiting their reach. The default value is `10M`.\n"
"This configuration option would recognize strings in this format (shown as a regular expression): `[0-9]+[KkMmGgTtPpEeZzYy]?`.\n"
"If no suffix is given, assume bytes."
msgstr ""
"圧縮されたリクエストボディーの上限を設定します。\n"
"これは、攻撃の範囲を制限することで潜在的な攻撃を軽減するのに役立ちます。デフォルト値は `10M` です。\n"
"この設定オプションは、`[0-9]+[KkMmGgTtPpEeZzYy]?` というフォーマット (正規表現として表示) の文字列を認識します。\n"
"接尾辞が指定されていない場合は、バイトであると想定されます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Once GZip support has been enabled, you can use it on an endpoint by adding the `@org.jboss.resteasy.annotations.GZIP` annotation to your endpoint method."
msgstr "GZip サポートが有効になったら、エンドポイントメソッドに `@org.jboss.resteasy.annotations.GZIP` アノテーションを追加することで、エンドポイントで GZip サポートを使用できます。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"There is also the `quarkus.http.enable-compression` configuration property, which enables HTTP response compression globally.\n"
"If enabled, a response body is compressed if the `Content-Type` HTTP header is set and the value is a compressed media type configured via the `quarkus.http.compress-media-types` configuration property."
msgstr ""
"また、HTTP レスポンスの圧縮をグローバルに有効にする設定プロパティー (`quarkus.http.enable-compression`) もあります。\n"
"有効な場合、`Content-Type` HTTP ヘッダーが設定され、その値が `quarkus.http.compress-media-types` 設定プロパティーで設定された圧縮メディアタイプである場合、レスポンスボディーが圧縮されます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Multipart Support"
msgstr "マルチパートサポート"

#: _versions/3.27/guides/resteasy.adoc
msgid "RESTEasy supports multipart via the https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider]."
msgstr "RESTEasyは link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider] を介してマルチパートをサポートしています。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Quarkus provides an extension called `quarkus-resteasy-multipart` to make things easier for you."
msgstr "Quarkusは、 `quarkus-resteasy-multipart` というエクステンションを提供しています。"

#: _versions/3.27/guides/resteasy.adoc
msgid "This extension slightly differs from the RESTEasy default behavior as the default charset (if none is specified in your request) is UTF-8 rather than US-ASCII."
msgstr "このエクステンションは、デフォルトの文字セットが US-ASCII ではなく UTF-8 であるため、RESTEasy のデフォルトの動作とは若干異なります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "You can configure this behavior with the following configuration properties:"
msgstr "この動作は、以下の設定プロパティーで設定できます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.27/guides/resteasy.adoc
msgid "Servlet compatibility"
msgstr "サーブレットとの互換性"

#: _versions/3.27/guides/resteasy.adoc
msgid "In Quarkus, RESTEasy can either run directly on top of the Vert.x HTTP server, or on top of Undertow if you have any servlet dependency."
msgstr "Quarkusでは、RESTEasyはVert.x HTTPサーバーの上で直接実行するか、サーブレットに依存している場合はUndertowの上で実行することができます。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"As a result, certain classes, such as `HttpServletRequest` are not always available for injection.\n"
"Most use cases for this particular class are covered by Jakarta REST equivalents, except for getting the remote client's IP."
msgstr ""
"そのため、`HttpServletRequest` などの特定のクラスは常に注入できるとは限りません。\n"
"このような特定のクラスのユースケースは、リモートクライアントの IP を取得する場合を除き、Jakarta REST の同等の機能でほとんどカバーされています。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"RESTEasy comes with a replacement API that you can inject:\n"
"https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[`HttpRequest`], which has the methods\n"
"https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[`getRemoteAddress()`]\n"
"and https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[`getRemoteHost()`]\n"
"to solve this problem."
msgstr "RESTEasy には、注入できる代替 API https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html[`HttpRequest`] が付属しています。この API には、この問題を解決するためのメソッド https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteAddress--[`getRemoteAddress()`] および https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--[`getRemoteHost()`] があります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "RESTEasy and REST Client interactions"
msgstr "RESTEasy と RESTクライアントのやりとり"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"In Quarkus, the RESTEasy extension and xref:resteasy-client.adoc[the REST Client extension] share the same infrastructure.\n"
"One important consequence of this consideration is that they share the same list of providers (in the Jakarta REST meaning of the word)."
msgstr ""
"Quarkus では、RESTEasy エクステンションと xref:resteasy-client.adoc[REST クライアントエクステンション] が同じインフラストラクチャーを共有します。\n"
"この考慮事項の重要な影響の 1 つは、それらが (Jakarta REST の意味において) 同じプロバイダーのリストを共有することです。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will, by default, intercept both the servers calls and the client calls,\n"
"which might not be the desired behavior."
msgstr "たとえば、`WriterInterceptor` を宣言すると、デフォルトではサーバーの呼び出しとクライアントの呼び出しの両方がインターセプトされますが、これは望ましい動作ではない可能性があります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr "しかし、このデフォルトの動作を変更してプロバイダを制約することができます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider;"
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.SERVER)` アノテーションを追加することで、 *サーバー* コールのみを考慮します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider."
msgstr "プロバイダに `@ConstrainedTo(RuntimeType.CLIENT)` アノテーションを追加することで、 *クライアント* コールのみを考慮します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "What's Different from Jakarta EE Development"
msgstr "Jakarta EE 開発との違い"

#: _versions/3.27/guides/resteasy.adoc
msgid "No Need for `Application` Class"
msgstr "`Application` クラスは不要"

#: _versions/3.27/guides/resteasy.adoc
msgid "Configuration via an application-supplied subclass of `Application` is supported but not required."
msgstr "アプリケーションが提供する `Application` のサブクラスによる設定もサポートされていますが、必須ではありません。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Only a single Jakarta REST application"
msgstr "単一のJakarta RESTアプリケーション限定"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"In contrast to Jakarta REST (and RESTEasy) running in a standard servlet container, Quarkus only supports the deployment of a single Jakarta REST application.\n"
"If multiple Jakarta REST `Application` classes are defined, the build will fail with the message `Multiple classes have been annotated with @ApplicationPath which is currently not supported`."
msgstr ""
"標準的なサーブレットコンテナで動作する Jakarta REST (および RESTEasy) とは対照的に、Quarkus は単一の Jakarta REST アプリケーションのデプロイメントのみをサポートしています。\n"
"複数の Jakarta REST `Application` クラスが定義されている場合、ビルドは失敗し、`Multiple classes have been annotated with @ApplicationPath which is currently not supported` というメッセージが表示されます。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"If multiple Jakarta REST applications are defined, the property `quarkus.resteasy.ignore-application-classes=true` can be used to ignore all explicit `Application` classes.\n"
"This makes all resource-classes available via the application-path as defined by `quarkus.resteasy.path` (default: `/`)."
msgstr "複数の Jakarta REST アプリケーションが定義されている場合、プロパティ `quarkus.resteasy.ignore-application-classes=true` を使用すると、すべての明示的な `Application` クラスを無視することができます。これにより、すべてのリソース・クラスは、 `quarkus.resteasy.path` （デフォルト： `/` ）で定義されるapplication-pathを介して利用可能になります。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Support limitations of Jakarta REST application"
msgstr "Jakarta RESTアプリケーションのサポートの制限"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"The RESTEasy extension doesn't support the method `getProperties()` of the class `jakarta.ws.rs.core.Application`.\n"
"Moreover, it only relies on the methods `getClasses()` and `getSingletons()` to filter out the annotated resource, provider, and feature classes.\n"
"It does not filter out the built-in resource, provider, and feature classes and also the resource, provider, and feature classes registered by the other extensions.\n"
"Finally, the objects returned by the method `getSingletons()` are ignored, only the classes are taken into account to filter out the resource, provider and feature classes, in other words the method `getSingletons()` is managed the same way as `getClasses()`."
msgstr ""
"RESTEasy エクステンションは、クラス `jakarta.ws.rs.core.Application` のメソッド `getProperties()` をサポートしていません。\n"
"さらに、メソッド `getClasses()` および `getSingletons()` のみに依存して、アノテーションが付けられたリソース、プロバイダー、および機能クラスをフィルタリングします。\n"
"組み込みのリソース、プロバイダー、機能クラスや、他のエクステンションで登録されたリソース、プロバイダ、機能クラスは除外されません。\n"
"最後に、メソッド `getSingletons()` が返すオブジェクトは無視され、リソース、プロバイダー、機能クラスをフィルタリングするためにクラスのみが考慮されます。言い換えれば、メソッド `getSingletons()` は実際には `getClasses()` と同じように管理されます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Lifecycle of Resources"
msgstr "リソースのライフサイクル"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"In Quarkus, all Jakarta REST resources are treated as CDI beans.\n"
"It's possible to inject other beans via `@Inject`, bind interceptors using bindings such as `@Transactional`, define `@PostConstruct` callbacks, etc."
msgstr "Quarkus では、すべての Jakarta REST リソースは CDI Bean として扱われます。`@Inject` を使って他の Bean を注入したり、`@Transactional` などのバインディングを使ってインターセプターをバインドしたり、`@PostConstruct` コールバックを定義したりすることが可能です。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"If no scope annotation is declared on the resource class, then the scope is defaulted.\n"
"The `quarkus.resteasy.singleton-resources` property can control the default scope."
msgstr ""
"リソースクラスにスコープアノテーションが宣言されていない場合、スコープはデフォルトに設定されます。\n"
"`quarkus.resteasy.singleton-resources` プロパティーはデフォルトのスコープを制御できます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "If set to `true` (default), then a *single instance* of a resource class is created to service all requests (as defined by `@jakarta.inject.Singleton`)."
msgstr "`true` (デフォルト) に設定すると、すべてのリクエストを処理するためにリソースクラスの *単一のインスタンス* (`@jakarta.inject.Singleton` で定義) が作成されます 。"

#: _versions/3.27/guides/resteasy.adoc
msgid "If set to `false`, then a *new instance* of the resource class is created per each request."
msgstr "`false` に設定すると、リクエストごとにリソースクラスの *新しいインスタンス* が作成されます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "An explicit CDI scope annotation (`@RequestScoped`, `@ApplicationScoped`, etc.) always overrides the default behavior and specifies the lifecycle of resource instances."
msgstr "明示的な CDI スコープアノテーション (`@RequestScoped`、`@ApplicationScoped` など) は、常にデフォルトの動作をオーバーライドし、リソースインスタンスのライフサイクルを指定します。"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"`@Context` elements are not injected via CDI and, as such, may not be injected via constructor injection.\n"
"Inject `@Context` elements in fields of your resources instead."
msgstr ""
"`@Context` 要素は CDI によっては注入されないため、コンストラクター注入によって注入することはできません。\n"
"代わりに、リソースのフィールドに `@Context` 要素を注入します。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Include/Exclude Jakarta REST classes with build time conditions"
msgstr "ビルド時条件でのJakarta RESTのクラスのインクルード/エクスクルード"

#: _versions/3.27/guides/resteasy.adoc
msgid ""
"Quarkus enables the inclusion or exclusion of Jakarta REST Resources, Providers and Features directly thanks to build time conditions in the same that it does for CDI beans.\n"
"Thus, the various Jakarta REST classes can be annotated with profile conditions (`@io.quarkus.arc.profile.IfBuildProfile` or `@io.quarkus.arc.profile.UnlessBuildProfile`) and/or with property conditions (`io.quarkus.arc.properties.IfBuildProperty` or `io.quarkus.arc.properties.UnlessBuildProperty`) to indicate to Quarkus at build time under which conditions these Jakarta REST classes should be included."
msgstr "Quarkusでは、CDI Beanと同様に、ビルド時の条件によって、Jakarta RESTリソース、プロバイダ、フィーチャーを直接取り込んだり除外したりすることができます。したがって、さまざまなJakarta RESTクラスにプロファイル条件（ `@io.quarkus.arc.profile.IfBuildProfile` または `@io.quarkus.arc.profile.UnlessBuildProfile` ）やプロパティ条件（ `io.quarkus.arc.properties.IfBuildProperty` または `io.quarkus.arc.properties.UnlessBuildProperty` ）をアノテーションして、ビルド時にQuarkusに対して、どのような条件の下でJakarta RESTクラスを含めるべきかを示すことができます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "In the following example, Quarkus includes the endpoint `sayHello` if and only if the build profile `app1` has been enabled."
msgstr "次の例では、Quarkusは、ビルドプロファイル `app1` が有効になっている場合に限り、エンドポイント `sayHello` を含めます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Please note that if a Jakarta REST Application has been detected and the method `getClasses()` and/or `getSingletons()` has/have been overridden, Quarkus will ignore the build time conditions and consider only what has been defined in the Jakarta REST Application."
msgstr "Jakarta REST Applicationが検出され、メソッド `getClasses()` 、 `getSingletons()` がオーバーライドされている場合、Quarkusはビルド時の条件を無視し、Jakarta REST Applicationで定義されているもののみを考慮することに注意してください。"

#: _versions/3.27/guides/resteasy.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _versions/3.27/guides/resteasy.adoc
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well-known technologies."
msgstr "Quarkus を使用した JSON REST サービスの作成は、実績のあるよく知られたテクノロジーに依存しているため、簡単に行えます。"

#: _versions/3.27/guides/resteasy.adoc
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr "いつものように、Quarkusは、アプリケーションをネイティブ実行可能ファイルとして実行する際に、水面下の作業をさらに簡略化しています。"

#: _versions/3.27/guides/resteasy.adoc
msgid "There is only one thing to remember: if you use `Response` and Quarkus cannot determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr "`Response` を使用していて、Quarkus がシリアライズされている Bean を特定できない場合は、 `@RegisterForReflection` を使ってアノテーションを付ける必要があることに注意してください。"
