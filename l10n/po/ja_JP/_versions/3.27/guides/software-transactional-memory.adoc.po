msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Using Software Transactional Memory in Quarkus"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Software Transactional Memory (STM) has been around in research environments since the late\n"
"1990's and has relatively recently started to appear in products and various programming\n"
"languages. We won't go into all the details behind STM but the interested reader could look at https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou-podc95.pdf[this paper].\n"
"However, suffice it to say that STM offers an approach to developing transactional applications in a highly\n"
"concurrent environment with some of the same characteristics of ACID transactions, which you've probably already used\n"
"through JTA. Importantly though, the Durability property is relaxed (removed) within STM implementations,\n"
"or at least made optional. This is not the situation with JTA, where state changes are made durable\n"
"to a relational database which supports https://pubs.opengroup.org/onlinepubs/009680699/toc.pdf[the X/Open XA\n"
"standard]."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Note that the STM implementation provided by Quarkus is based on the https://narayana.io/docs/project/index.html#d0e16066[Narayana STM] implementation. This document isn't meant to be a replacement for that project's documentation, so you may want\n"
"to look at it for more detail. However, we will try to focus more on how you can combine some key capabilities\n"
"into Quarkus when developing Kubernetes native applications and microservices."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Why use STM with Quarkus?"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Now you may still be asking yourself \"Why STM instead of JTA?\" or \"What are the benefits\n"
"to STM that I don't get from JTA?\" Let's try to answer those or similar questions, with\n"
"a particular focus on why we think they're great for Quarkus, microservices and Kubernetes\n"
"native applications. So in no specific order ..."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"The goal of STM is to simplify object reads and writes from multiple threads/protect\n"
"state from concurrent updates. The Quarkus STM implementation will safely manage any conflicts between\n"
"these threads using whatever isolation model has been chosen to protect that specific state\n"
"instance (object in the case of Quarkus). In Quarkus STM, there are two isolation implementations,\n"
"pessimistic (the default), which would cause conflicting threads to be blocked until the original\n"
"has completed its updates (committed or aborted the transaction); then there's the optimistic\n"
"approach which allows all the threads to proceed and checks for conflicts at commit time, where\n"
"one or more of the threads may be forced to abort if there have been conflicting updates."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"STM objects have state, but it doesn't need to be persistent (durable). In fact the\n"
"default behaviour is for objects managed within transactional memory to be volatile, such that\n"
"if the service or microservice within which they are being used crashes or is spawned elsewhere, e.g.,\n"
"by a scheduler, all state in memory is lost and the objects start from scratch. But surely you get this and more\n"
"with JTA (and a suitable transactional datastore) and don't need to worry about restarting your application?\n"
"Not quite. There's a trade-off here: we're doing away\n"
"with persistent state and the overhead of reading from and then writing (and sync-ing) to the datastore during each\n"
"transaction. This makes updates to (volatile) state very fast, but you still get the benefits of atomic updates\n"
"across multiple STM objects (e.g., objects your team wrote then calling objects you inherited from another team and requiring\n"
"them to make all-or-nothing updates), as well as consistency\n"
"and isolation in the presence of concurrent threads/users (common in distributed microservices architectures).\n"
"Furthermore, not all stateful applications need to be durable - even when JTA transactions are used, it tends to be the\n"
"exception and not the rule. And as you'll see later, because applications can optionally start and control transactions, it's possible to build microservices which can undo state changes and try alternative paths."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Another benefit of STM is composability and modularity. You can write concurrent Quarkus objects/services that\n"
"can be easily composed with any other services built using STM, without exposing the details of how the objects/services\n"
"are implemented. As we discussed earlier, this ability to compose objects you wrote with those other teams may have\n"
"written weeks, months or years earlier, and have A, C and I properties can be hugely beneficial. Furthermore, some\n"
"STM implementations, including the one Quarkus uses, support nested transactions and these allow changes made within\n"
"the context of a nested (sub) transaction to later be rolled back by the parent transaction."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Although the default for STM object state is volatile, it is possible to configure the STM implementation\n"
"such that an object's state is durable. Although it's possible to configure Narayana such that different\n"
"backend datastores can be used, including relational databases, the default is the local operating system\n"
"file system, which means you don't need to configure anything else with Quarkus such as a database."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Many STM implementations allow \"plain old language objects\" to be made STM-aware with little or no changes to\n"
"the application code. You can build, test and deploy applications without wanting them to be STM-aware and\n"
"then later add those capabilities if they become necessary and without much development overhead at all."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Building STM applications"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"There is also a fully worked example in the quickstarts which you may access by cloning the\n"
"Git repository: `git clone {quickstarts-clone-url}`, or by downloading an {quickstarts-archive-url}[archive].\n"
"Look for the `software-transactional-memory-quickstart` example. This will help to understand how you\n"
"can build STM-aware applications with Quarkus. However, before we do so there are a few basic concepts\n"
"which we need to cover."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Note, as you will see, STM in Quarkus relies on a number of annotations to define behaviours. The lack\n"
"of these annotations causes sensible defaults to be assumed, but it is important for the developer to\n"
"understand what these may be. Please refer to the https://narayana.io/docs/project/index.html#d0e16066[Narayana STM manual]\n"
"and the https://narayana.io//docs/project/index.html#d0e16133[STM annotations guide] for more details on\n"
"all the annotations Narayana STM provides."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Setting it up"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "To use the extension include it as a dependency in your build file:"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Defining STM-aware classes"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"In order for the STM subsystem to have knowledge about which classes are to be managed within the context\n"
"of transactional memory it is necessary to provide a minimal level of instrumentation. This occurs by\n"
"categorising STM-aware and STM-unaware classes through an interface boundary; specifically all STM-aware objects\n"
"must be instances of classes which inherit from interfaces that themselves have been annotated to identify them\n"
"as STM-aware. Any other objects (and their classes) which do not follow this rule will not be managed by the\n"
"STM subsystem and hence any of their state changes will not be rolled back, for example."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"The specific annotation that STM-aware application interfaces must use is `org.jboss.stm.annotations.Transactional`.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Classes which implement this interface are able to use additional annotations from Narayana to tell the STM\n"
"subsystem about things such as whether a method will modify the state of the object, or what state variables\n"
"within the class should be managed transactionally, e.g., some instance variables may not need to be rolled back\n"
"if a transaction aborts. As mentioned earlier, if those annotations are not present then defaults are chosen to\n"
"guarantee safety, such as assuming all methods will modify state."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"For example, by using the `@ReadLock` annotation on the `getNumberOfBookings` method, we are able to tell the\n"
"STM subsystem that no state modifications will occur in this object when it is used in the transactional\n"
"memory. Also, the `@NotState` annotation tells the system to ignore `timesCalled` when transactions commit or\n"
"abort, so this value only changes due to application code."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Please refer to the Narayana guide for details of how to exert finer grained control over the transactional\n"
"behaviour of objects that implement interfaces marked with the `@Transactional` annotation."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Creating STM objects"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"The STM subsystem needs to be told about which objects it should be managing. The Quarkus (aka Narayana) STM implementation\n"
"does this by providing containers of transactional memory within which these object instances reside. Until an object\n"
"is placed within one of these STM containers it cannot be managed within transactions and any state changes will\n"
"not possess the A, C, I (or even D) properties."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Note, the term \"container\" was defined within the STM implementation years before Linux containers came along. It may\n"
"be confusing to use especially in a Kubernetes native environment such as Quarkus, but hopefully\n"
"the reader can do the mental mapping."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"The default STM container (`org.jboss.stm.Container`) provides support for volatile objects that can only be shared between\n"
"threads in the same microservice/JVM instance. When an STM-aware object is placed into the container it returns a handle\n"
"through which that object should then be used in the future. It is important to use this handle as continuing to access\n"
"the object through the original reference will not allow the STM subsystem to track access and manage state and\n"
"concurrency control."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"You need to tell each Container about the type of objects for which it will be responsible. In this example\n"
"it will be instances that implement the FlightService interface."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Then you create an instance that implements `FlightService`. You should not use it directly at this stage because\n"
"access to it is not being managed by the STM subsystem."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"To obtain a managed instance, pass the original object to the STM `container` which then returns a reference\n"
"through which you will be able to perform transactional operations. This reference can be used safely from multiple threads."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Defining transaction boundaries"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Once an object is placed within an STM container the application developer can manage the scope of transactions\n"
"within which it is used. There are some annotations which can be applied to the STM-aware class to have the\n"
"container automatically create a transaction whenever a specific method is invoked."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Declarative approach"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"If the `@NestedTopLevel` or `@Nested` annotation is placed on a method signature then the STM container will\n"
"start a new transaction when that method is invoked and attempt to commit it when the method returns. If there is\n"
"a transaction already associated with the calling thread then each of these annotations behaves slightly differently:\n"
"the former annotation will always create a new top-level transaction within which the method will execute, so the enclosing\n"
"transaction does not behave as a parent, i.e., the nested top-level transaction will commit or abort independently; the\n"
"latter annotation will create a transaction with is properly nested within the calling transaction, i.e., that\n"
"transaction acts as the parent of this newly created transaction."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Programmatic approach"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "The application can programmatically start a transaction before accessing the methods of STM objects:"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"An object for manually controlling transaction boundaries (AtomicAction and many other useful\n"
"classes are included in the extension).\n"
"Refer https://narayana.io//docs/api/com/arjuna/ats/arjuna/AtomicAction.html[to the javadoc] for more detail."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Programmatically begin a transaction."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Notice that object updates can be composed which means that updates to multiple objects can be committed together as a single action.\n"
"[Note that it is also possible to begin nested transactions so that you can perform speculative work which may then be abandoned\n"
"without abandoning other work performed by the outer transaction]."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Since the transaction has not yet been committed the changes made by the flight and taxi services are not visible outside the transaction."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Since the commit was successful the changes made by the flight and taxi services are now visible to other threads.\n"
"Note that other transactions that relied on the old state may or may not now incur conflicts when they commit (the STM library\n"
"provides a number of features for managing conflicting behaviour and these are covered in the Narayana STM manual)."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Programmatically decide to abort the transaction which means that the changes made by the flight and taxi services are discarded."
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid "Distributed transactions"
msgstr ""

#: _versions/3.27/guides/software-transactional-memory.adoc
msgid ""
"Sharing a transaction between multiple services is possible but is currently\n"
"an advanced use case only and the Narayana documentation should be consulted\n"
"if this behaviour is required. In particular, STM does not yet support the features\n"
"described in the xref:context-propagation.adoc[Context Propagation guide]."
msgstr ""
