msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/messaging.adoc
msgid "Quarkus Messaging Extensions"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Event-driven messaging systems have become the backbone of most modern applications,\n"
"enabling the building of message-driven microservices or complex data streaming pipelines."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Quarkus offers a comprehensive suite of messaging extensions designed to synchronize with leading messaging technologies effortlessly.\n"
"This empowers developers to concentrate on crafting the core application logic, liberating them from the necessity to delve into the complexities of individual APIs and messaging infrastructures."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "This page focuses on common features and the development model for all messaging extensions."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Some of these extensions are maintained in the core Quarkus repository:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "*Messaging*: The core extension defines the basic concepts and APIs to develop messaging applications"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "xref:kafka.adoc[*Messaging - Kafka Connector*]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "xref:pulsar.adoc[*Messaging - Pulsar Connector*]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "xref:rabbitmq-reference.adoc[*Messaging - RabbitMQ Connector*]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "xref:amqp-reference.adoc[*Messaging - AMQP 1.0 Connector*]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "*Messaging - MQTT Connector*"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Some extensions are contributed and maintained by the community:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "link:{camel-smallrye-reactive-messaging}[Camel SmallRye Reactive Messaging]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "link:{nats-jetstream}[Nats Jetstream Connector]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "link:{solace-quarkus}[Solace Messaging Connector]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "link:{http-websocket-connector}[Reactive HTTP and WebSocket Connector]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "AWS SQS Connector"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Other connectors, such as the *JMS Connector* or the *Google PubSub Connector*, do not benefit from the same level of integration and require more manual configuration to set up."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"On the other hand, some messaging-related extensions propose low-level provider-specific integrations.\n"
"The level of support covered on this page DOES NOT involve these low-level extensions.\n"
"A non-exhaustive list of this kind of extension are the following:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "link:https://quarkus.io/guides/kafka-streams[Kafka Streams Extension]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "link:https://docs.quarkiverse.io/quarkus-rabbitmq-client/dev/index.html[RabbitMQ Client]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "link:https://docs.quarkiverse.io/quarkus-hivemq-client/dev/index.html[HiveMQ Client]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "link:https://docs.quarkiverse.io/quarkus-artemis/dev/quarkus-artemis-jms.html[Artemis Core & JMS]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "link:https://docs.quarkiverse.io/quarkus-google-cloud-services/main/pubsub.html[Google Cloud Pubsub]"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Quarkus Messaging Development Model"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Quarkus simplifies message-driven application development by establishing a uniform model for publishing, consuming, and processing messages, regardless of whether the underlying broker technology uses message queuing or event streaming.\n"
"Built upon the MicroProfile Reactive Messaging specification, Quarkus Messaging extensions ensure seamless integration with these technologies.\n"
"Importantly, proficiency in reactive programming is NOT a prerequisite for leveraging these capabilities."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"The Reactive Messaging specification defines a CDI-based programming model for implementing event-driven and message-driven applications.\n"
"Using a small set of annotations, CDI beans become building blocks for implementing interactions with message brokers.\n"
"These interactions happen through _channels_ where application components read and write messages."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "_Channels_ are identified by a unique name and declared using a set of annotations."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "`@Incoming` and `@Outgoing` annotations"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "`@Incoming` and `@Outgoing` method annotations define _channels_ allowing to consume messages from and produce messages to the message broker:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "`@Outgoing` can be used by itself on a method to generate messages:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "`@Incoming` can be used by itself to consume messages:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Note that you should not call methods annotated with `@Incoming` and/or `@Outgoing` directly from your code.\n"
"They are invoked by the framework.\n"
"Having user code invoking them would not have the expected outcome."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "You can read more on supported method signatures in the link:{rm_doc_method_signatures}[SmallRye Reactive Messaging – Supported signatures]."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Emitters and `@Channel` annotation"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "An application often needs to combine messaging with other parts of the application, ex. produce messages from HTTP endpoints, or stream consumed messages as a response."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "To send messages from imperative code to a specific channel, you need to inject an `Emitter` object identified by the `@Channel` annotation:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"The `@Channel` annotation lets you indicate to which channel you will send your payloads or messages.\n"
"The `Emitter` allows buffering messages sent to the channel."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "For more control, using link:{mutiny}[Mutiny] APIs, you can use the `MutinyEmitter` emitter interface:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "The `@Channel` annotation can also be used to inject the stream of messages from an incoming channel:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"When consuming messages with `@Channel`, the application code is responsible for subscribing to the stream.\n"
"In the example above, the Quarkus REST (formerly RESTEasy Reactive) endpoint handles that for you."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "You can read more on the emitters and channels in the link:{rm_doc_emitter}[SmallRye Reactive Messaging – Emitter and Channels] documentation."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Messages and Metadata"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"A `Message` is an envelope around a payload.\n"
"In the examples above only payloads were used, but every payload is wrapped around a `Message` internally in Quarkus Messaging."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"The `Message<T>` interface associates a payload of type `<T>` with `Metadata`,\n"
"a set of arbitrary objects and asynchronous actions for acknowledgement (ack) and negative acknowledgement (nack)."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"A message is acknowledged back to the broker when its processing or reception has been successful.\n"
"Acknowledgements between messages are chained, meaning that when processing a message,\n"
"the acknowledgement of an outgoing message triggers the acknowledgement of incoming message(s).\n"
"In most cases, acks and nacks are managed for you and connectors allow you to configure different strategies per channel.\n"
"So, you usually don't need to interact with the `Message` interface directly.\n"
"Only advanced use cases require dealing with the Message directly."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Accessing the `Metadata`, on the other hand, can be practical in many cases.\n"
"Connectors add specific metadata objects to the message to give access to the message headers, properties, and other connector-specific information.\n"
"You do not need to interact with the `Message` interface to access connector-specific metadata.\n"
"You can simply inject the metadata object as a method parameter after the payload parameter:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Depending on the connector, payload types available to consume in processing methods differ.\n"
"You can implement a custom `MessageConverter` to transform the payload to a type that is accepted by your application."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Channel configuration"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Channel attributes can be configured using the `mp.messaging.incoming.<channel-name>` and `mp.messaging.outgoing.<channel-name>` configuration properties."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "For example, to configure the Kafka connector to consume messages from the `my-topic` topic with a custom deserializer:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"The `connector` attribute is required for all channels and specifies the connector to use.\n"
"You can omit this configuration if you have a single connector on your classpath, as Quarkus will automatically select the connector."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Global channel attributes can be configured using the connector name:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Connector-specific attributes are listed in connector documentation."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Channel wiring and Messaging patterns"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"At startup time, Quarkus analyzes declared channels to wire them together and verify that all channels are connected.\n"
"Concretely, each channel creates a _reactive stream_ of messages connected to another channel's _reactive stream_ of messages.\n"
"Adhering to the reactive stream protocol, the back-pressure mechanism is enforced between channels, allowing to control application resource usage and not over-commit and overloading part of the system."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"On the flip side it is NOT possible to create new channels programmatically at runtime.\n"
"There are, however, many patterns that let you implement most, if not all, messaging and integration use cases:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Some messaging technologies allow consumers to subscribe to a set of topics or queues, and producers to send messages to a specific topic on message basis.\n"
"If you are sure you need to configure and create clients dynamically at runtime, you should consider using the low-level clients directly."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Internal Channels"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"In some use cases, it is convenient to use messaging patterns to transfer messages inside the same application.\n"
"When you don't connect a channel to a messaging backend, i.e. a connector, everything happens internally to the application,\n"
"and the streams are created by chaining methods together.\n"
"Each chain is still a reactive stream and enforces the back-pressure protocol."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"The framework verifies that the producer/consumer chain is complete,\n"
"meaning that if the application writes messages into an internal channel (using a method with only `@Outgoing`, or an `Emitter`),\n"
"it must also consume the messages from within the application (using a method with only `@Incoming` or using an unmanaged stream)."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Enable/Disable channels"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "All defined channels are enabled by default, but it is possible to disable a channel with the configuration:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"This can be used alongside Quarkus build profiles to enable/disable channels based on some build-time condition, such as the the target environment.\n"
"You need to make sure of two things when disabling a channel:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "the disabled channel usage is located in a bean that can be filtered out at build time,"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "that without the channel, the remaining channels still work correctly."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Pausable Channels"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Injected `@Channel` streams are not subscribed to by default, so the flow of messages is controlled by the application code using reactive streams and Mutiny APIs.\n"
"But for `@Incoming` methods, the flow of messages is controlled by the runtime."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Pausable channels provide a mechanism to control message flow programmatically.\n"
"This is useful in scenarios where producers or consumers need to stop temporarily due to managing the lifecycle or performing maintenance operations."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "To use pausable channels, you need to activate it with the configuration property `pausable` set to `true`."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "If a channel is configured to be pausable, you can get the `PausableChannel` by channel name from the `ChannelRegistry` programmatically, and pause or resume the channel as needed:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"This feature is independent of connectors and can be in theory used with channels backed by any connector.\n"
"Note that pausing message consumption applies back-pressure on the underlying consumer which receives messages from the remote broker."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Kafka consumers provide a similar feature to pause and resume the consumption of messages from topic-partitions.\n"
"The Quarkus Kafka connector allows xref:kafka.adoc#kafka-bare-clients[access to the underlying client] to pause/resume the consumption."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"However, by default, with the `pause-if-no-requests=true` configuration,\n"
"the connector handles automatically the back-pressure,\n"
"by the pausing and resuming the Kafka consumer based on downstream requests.\n"
"It is therefore recommended to use pausable channels with the default `pause-if-no-requests=true` configuration."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Multiple Outgoings and `@Broadcast`"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"By default, messages transmitted in a channel are only dispatched to a single consumer.\n"
"Having multiple consumers is considered an error and is reported at deployment time."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"The `@Broadcast` annotation changes this behavior and indicates that messages transiting in the channel are dispatched to all the consumers.\n"
"`@Broadcast` must be used with the `@Outgoing` annotation:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Similarly to `@Broadcast`, you can use `@Outgoing` annotation multiple times on the same method to indicate that the method produces messages to multiple channels:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Using Multiple Outgoings can be useful for implementing fan-out patterns, in which a single message is processed by multiple target channels."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "You can selectively dispatch messages to multiple outgoings by returning `Targeted` from the processing method:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Multiple Incomings and `@Merge`"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"By default, a single producer can transmit messages in a channel.\n"
"Having multiple producers is considered erroneous and is reported at deployment time.\n"
"The `@Merge` annotation changes this behavior and indicates that a channel can have multiple producers.\n"
"`@Merge` must be used with the `@Incoming` annotation:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Similarly to `@Merge`, you can use `@Incoming` annotation multiple times on the same method to indicate that the method consumes messages from multiple channels:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Stream Processing"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "In some advanced scenarios, you can manipulate directly the stream of messages instead of each individual message."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Using link:{mutiny}[Mutiny APIs] in incoming and outgoing signatures allow you to process the stream of messages:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Execution Model"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Quarkus Messaging sits on top of the xref:quarkus-reactive-architecture.adoc#engine[reactive engine] of Quarkus and leverages link:{eclipse-vertx}[Eclipse Vert.x] to dispatch messages for processing.\n"
"It supports three execution modes:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"*Event-loop*, where messages are dispatched on the Vert.x I/O thread.\n"
"Remember that you should not perform blocking operations on the event loop."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "*Worker-threads*, where messages are dispatched on a worker thread pool."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"*Virtual-threads*, where messages are dispatched on a virtual thread (requires Java 21+).\n"
"As virtual threads are not pooled, a new virtual thread is created for each message.\n"
"Please refer to the dedicated xref:messaging-virtual-threads.adoc[Quarkus Virtual Thread support] guide for more information."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Quarkus chooses the default execution mode based on the method signature.\n"
"If the method signature is _synchronous_, messages are dispatched on *worker threads* otherwise it defaults to *event-loop*:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Method signature"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Default execution mode"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"@Incoming(\"source\")\n"
"void process(String payload)"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Worker-threads"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"@Incoming(\"source\")\n"
"Uni<Void> process(String payload)"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Event-loop"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"@Incoming(\"source\")\n"
"CompletionStage<Void> process(Message<String> message)"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"@Incoming(\"source\")\n"
"@Outgoing(\"sink\")\n"
"Multi<R> process(Multi<T> in)"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Stream-processing methods are executed at startup, then each message is dispatched on event loop."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Fine-grained control over the execution model is possible using annotations:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"link:{rm_blocking_annotation}[`@Blocking`] will force the method to be executed on a worker thread pool.\n"
"The default pool of worker threads is shared between all channels.\n"
"Using `@Blocking(\"my-custom-pool\")` you can configure channels with a custom thread pool.\n"
"The configuration property `smallrye.messaging.worker.my-custom-pool.max-concurrency` specifies the maximum number of threads in the pool.\n"
"You can read more on the blocking processing in link:{rm_blocking_docs}[SmallRye Reactive Messaging documentation]."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "`@NonBlocking` will force the method to be executed on the event-loop thread."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"`@RunOnVirtualThread` will force the method to be executed on a virtual thread.\n"
"To leverage the lightweight nature of virtual threads, the default maximum concurrency for methods annotated with `@RunOnVirtualThread` is 1024.\n"
"This can be changed by setting the `smallrye.messaging.worker.<virtual-thread>.max-concurrency` configuration property\n"
"or using together with the `@Blocking(\"my-custom-pool\")` annotation."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "The presence of `@Transactional` annotation implies blocking execution."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"In messaging applications, produced and consumed messages constitute an ordered stream of events,\n"
"either enforced by the broker (inside a topic or a queue)\n"
"or by the order of reception and emission in the application.\n"
"To preserve this order, Quarkus Messaging dispatches messages sequentially by default.\n"
"You can override this behavior by using `@Blocking(ordered = false)` or `@RunOnVirtualThread` annotation."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Incoming Channel Concurrency"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Some connectors support configuring the concurrency level of incoming channels."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"This creates four copies of the incoming channel under the hood, wiring them to the same processing method.\n"
"Depending on the broker technology, this can be useful to increase the application's throughput by processing multiple messages concurrently\n"
"while still preserving the partial order of messages received in different copies.\n"
"This is the case, for example, for Kafka, where multiple consumers can consume different topic partitions."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Context Propagation"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid ""
"In Quarkus Messaging, the default mechanism for propagating context between different processing stages is the\n"
"link:https://smallrye.io/smallrye-reactive-messaging/latest/concepts/message-context[message context].\n"
"This provides a consistent way to pass context information along with the message as it flows through different stages."
msgstr "Quarkus Messagingでは、異なる処理ステージ間でコンテキストを伝達するデフォルトのメカニズムは link:https://smallrye.io/smallrye-reactive-messaging/latest/concepts/message-context[メッセージコンテキスト] です。これは、異なるステージを流れるメッセージと共にコンテキスト情報を渡す一貫した方法を提供します。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "When integrating with other extensions, notably using Emitters, it relies on the Mutiny context propagation:"
msgstr "他のエクステンションと統合する場合、特に Emitters を使用する場合は、Mutiny コンテキスト伝搬に依存します："

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "Interaction with Mutiny and MicroProfile Context Propagation"
msgstr "Mutinyとの相互作用とMicroProfileコンテキストの伝播"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid ""
"Mutiny, which is the foundation of reactive programming in Quarkus, is integrated with the MicroProfile Context Propagation.\n"
"This integration enables automatic capturing and restoring of context across asynchronous boundaries.\n"
"To learn more about context propagation in Quarkus and Mutiny, refer to the xref:context-propagation.adoc[Context Propagation] guide."
msgstr "Quarkusのリアクティブプログラミングの基盤であるMutinyは、MicroProfile Context Propagationと統合されています。この統合により、非同期の境界をまたいだコンテキストの自動取得と復元が可能になります。QuarkusとMutinyのコンテキストプロパゲーションの詳細については、 xref:context-propagation.adoc[コンテキストプロパゲーションガイドを] 参照してください。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid ""
"To ensure consistent behavior, Quarkus Messaging disables the propagation of any context during message dispatching through inbound or outbound connectors.\n"
"This means that context captured through Emitters won't be propagated to the outgoing channel, and incoming channels won't dispatch messages by activating a context (e.g. the request context).\n"
"This behaviour can be configured using `quarkus.messaging.connector-context-propagation` configuration property, by listing the context types to propagate.\n"
"For example `quarkus.messaging.connector-context-propagation=CDI` will only propagate the CDI context."
msgstr "一貫した動作を保証するため、Quarkus Messagingでは、受信コネクターまたは送信コネクターを介したメッセージのディスパッチ中にコンテキストが伝搬されることはありません。つまり、エミッタでキャプチャされたコンテキストは送信チャネルに伝搬されず、受信チャネルはコンテキスト（リクエストコンテキストなど）をアクティブにしてメッセージをディスパッチしません。この振る舞いは `quarkus.messaging.connector-context-propagation` の設定プロパティで設定することができます。たとえば `quarkus.messaging.connector-context-propagation=CDI` は CDI コンテキストのみを伝搬します。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "Context Propagation with Emitters"
msgstr "エミッタによるコンテキスト伝播"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "When using messaging emitters, the context is not propagated by default."
msgstr "メッセージングエミッタを使用する場合、デフォルトではコンテキストは伝搬されません。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "In some scenarios, you might want to propagate the caller context to the message processing stage, using <<internal-channels,internal channels>>."
msgstr "シナリオによっては、 xref:internal-channels[内部チャネルを] 使用して、呼び出し元コンテキストをメッセージ処理ステージに伝搬させたい場合があります。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid ""
"Quarkus provides `ContextualEmitter`, a drop in replacement for `MutinyEmitter` and `Emitter`, that allows you to propagate the context when sending messages.\n"
"You can use the context propagation annotation `@CurrentThreadContext` to configure the contexts that will be propagated from an _emitter_ method.\n"
"The annotation configures the contexts that will be captured and propagated from that method,\n"
"and needs to be present on the propagator method, i.e. the caller of the emitter, not the processing method."
msgstr "Quarkusには、 `MutinyEmitter` と `Emitter` の代替となる `ContextualEmitter` が用意されており、メッセージ送信時にコンテキストを伝播することができます。コンテキスト伝播アノテーション `@CurrentThreadContext` を使用すると、 _エミッタ・_ メソッドから伝播されるコンテキストを設定できます。このアノテーションは、そのメソッドから取り込まれて伝搬されるコンテキストを構成し、伝搬メソッド、つまり処理メソッドではなくエミッタの呼び出し側に存在する必要があります。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "Let `RequestScopedBean` a request-scoped bean, `ContextualEmitter` can be used to dispatch messages locally through the internal channel `app`:"
msgstr "`RequestScopedBean` をリクエスト・スコープされたビーンとすると、 `ContextualEmitter` は内部チャネル `app` を通してローカルにメッセージをディスパッチするために使用することができます："

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "Then the request-scoped bean can be accessed in the message processing stage, regardless of the <<execution_model>>:"
msgstr "そして， <<execution_model>> に関係なく，要求スコープのBeanはメッセージ処理段階でアクセスできます："

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid ""
"You can also use the `@CurrentThreadContext` annotation to control which contexts are propagated.\n"
"The following example shows how to avoid propagating any context to the message processing stage:"
msgstr "`@CurrentThreadContext` アノテーションを使用して、伝播されるコンテキストを制御することもできます。以下の例では、メッセージ処理ステージへのコンテキスト伝搬を回避する方法を示します："

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid ""
"The execution context to which the RequestScoped context is bound, in the previous example the REST call, controls the lifecycle of the context.\n"
"This means that when the REST call is completed the RequestScoped context is destroyed.\n"
"Therefore, you need to make sure that your processing or message dispatch is completed before the REST call completes."
msgstr "RequestScopedコンテキストがバインドされている実行コンテキスト（前述の例ではREST呼び出し）は、コンテキストのライフサイクルを制御します。つまり、REST呼び出しが完了すると、RequestScopedコンテキストは破棄されます。したがって、REST呼び出しが完了する前に、処理またはメッセージディスパッチが完了していることを確認する必要があります。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "For more information check the xref:context-propagation.adoc#context-propagation-for-cdi[Context Propagation] guide."
msgstr "詳しくは xref:context-propagation.adoc#context-propagation-for-cdi[Context Propagation] ガイドをご覧ください。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "Request Context Activation"
msgstr "コンテキストのアクティブ化を要求"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid ""
"In some cases, you might need to activate the request context while processing messages consumed from a broker.\n"
"While using `@ActivateRequestContext` on the `@Incoming` method is an option, its lifecycle does not follow that of a Quarkus Messaging message.\n"
"For incoming channels, you can enable the request scope activation with the build time property `quarkus.messaging.request-scoped.enabled=true`.\n"
"This will activate the request context for each message processed by incoming channels, and close the context once the message is processed."
msgstr "場合によっては、ブローカーから消費されたメッセージの処理中にリクエストコンテキストをアクティブにする必要があるかもしれません。 `@Incoming` メソッドで `@ActivateRequestContext` を使用することはオプションですが、そのライフサイクルは Quarkus メッセージングメッセージのライフサイクルには従いません。受信チャネルの場合、ビルドタイムプロパティ `quarkus.messaging.request-scoped.enabled=true` でリクエストスコープのアクティブ化を有効にできます。これにより、受信チャンネルで処理されるメッセージごとにリクエストコンテキストがアクティブになり、メッセージが処理されるとコンテキストが閉じられます。"

#: _versions/3.27/guides/messaging.adoc
msgid "Health Checks"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Together with the SmallRye Health extension, Quarkus Messaging extensions provide health check support per channel.\n"
"The implementation of _startup_, _readiness_ and _liveness_ checks depends on the connector.\n"
"Some connectors allow configuring the health check behavior or disabling them completely or per channel."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Channel health checks can be disabled using `quarkus.messaging.health.<channel-name>.enabled` or per health check type,\n"
"ex. `quarkus.messaging.health.<channel-name>.liveness.enabled`."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Setting the `quarkus.messaging.health.enabled` configuration property to `false` completely disables the messaging health checks."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Observability"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Micrometer Metrics"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Quarkus Messaging extensions provide simple but useful metrics to monitor the health of the messaging system.\n"
"The xref:telemetry-micrometer.adoc[Micrometer extension] exposes these metrics."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "The following metrics can be gathered per channel, identified with the `channel` tag:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "`quarkus.messaging.message.count` : The number of messages produced or received"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "`quarkus.messaging.message.acks` : The number of messages processed successfully"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "`quarkus.messaging.message.failures` : The number of messages processed with failures"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "`quarkus.messaging.message.duration` : The duration of the message processing"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "For backwards compatibility reasons, channel metrics are not enabled by default and can be enabled with: `smallrye.messaging.observation.enabled=true`."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "OpenTelemetry Tracing"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Some Quarkus Messaging connectors integrate out-of-the-box with OpenTelemetry Tracing.\n"
"When the xref:opentelemetry.adoc[OpenTelemetry extension] is present, outgoing messages propagate the current tracing span.\n"
"On incoming channels, if a received message contains tracing information, the message processing inherits the message span as parent."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "You can disable tracing for a specific channel using the following configuration:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "TLS Configuration"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Some messaging extensions integrate with the xref:./tls-registry-reference.adoc[Quarkus TLS Registry] to configure the underlying client.\n"
"To configure the TLS on a channel, you need to provide the named TLS configuration to the `tls-configuration-name` property:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Or you can configure it globally on all channels of a connector:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Currently, the following messaging extensions support configuration through the Quarkus TLS Registry:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Kafka: Provides the `ssl.engine.factory.class` property for the Kafka client."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Pulsar: Only mTLS authentication is supported."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "RabbitMQ"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "AMQP 1.0"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "MQTT"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Testing"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Testing with Dev Services"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Most Quarkus Messaging extensions provide a Dev Service to simplify the development and testing of applications.\n"
"The Dev Service creates a broker instance configured to work out-of-the-box with the Quarkus Messaging extension."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "During testing Quarkus creates a separate broker instance to run the tests against it."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "You can read more about Dev Services in the xref:dev-services.adoc[Dev Services] guide, including a list of Dev Services provided by platform extensions."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Testing with InMemoryConnector"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"It can be useful to test the application without starting a broker.\n"
"To achieve this, you can _switch_ the channels managed by a connector to _in-memory_."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "This approach only works for JVM tests. It cannot be used for native tests (because they do not support injection)."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Let's say we want to test the following sample application:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "First, add the following test dependency to your application:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Then, create a Quarkus Test Resource as follows:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Switch the incoming channel `words-in` (consumed messages) to in-memory."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Switch the outgoing channel `words-out` (produced messages) to in-memory."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Switch the outgoing channel `uppercase` (processed messages) to in-memory."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Builds and returns a `Map` containing all the properties required to configure the application to use in-memory channels."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "When the test stops, clear the `InMemoryConnector` (discard all the received and sent messages)"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Create a `@QuarkusTest` using the test resource created above:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Inject the in-memory connector in your test class, using the `@Connector` or `@Any` qualifier."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Retrieve the outgoing channel (`words-out`) - the channel must have been switched to in-memory in the test resource."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Retrieve the incoming channel (`words-in`)"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Retrieve the outgoing channel (`uppercase`)"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Use the injected application bean to call `sendMessage` method to send a message using the emitter with the channel `words-out`."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Use the `received` method on `words-out` in-memory channel to check the message produced by the application."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"Use the `send` mwthod on `words-in` in-memory channel to send a message.\n"
"The application will process this message and send a message to `uppercase` channel."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Use the `received` method on `uppercase` channel to check the messages produced by the application."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"In-memory connector is solely intended for testing purposes.\n"
"There are some caveats to consider when using the in-memory connector:"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"The in-memory connector only transmits objects (payloads or configured messages) sent using the `InMemorySource#send` method.\n"
"Messages received by the application methods won't contain connector-specific metadata."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"By default, in-memory channels dispatch messages on the caller thread of the `InMemorySource#send` method, which would be the main thread in unit tests.\n"
"However, most of the other connectors handle context propagation dispatching messages on separate duplicated Vert.x contexts."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "The `quarkus-test-vertx` dependency provides the `@io.quarkus.test.vertx.RunOnVertxContext` annotation, which when used on a test method, executes the test on a Vert.x context."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"If your tests are dependent on context propagation, you can configure the in-memory connector channels with `run-on-vertx-context` attribute to dispatch events, including messages and acknowledgements, on a Vert.x context.\n"
"Alternatively you can switch this behaviour using the `InMemorySource#runOnVertxContext` method."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "Channel Decorators"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid ""
"https://smallrye.io/smallrye-reactive-messaging/latest/concepts/decorators/[Channel decorators] is a way to intercept and decorate the reactive streams corresponding to messaging channels.\n"
"This can be useful for adding custom behavior to the channels, such as logging, metrics, or error handling."
msgstr "link:https://smallrye.io/smallrye-reactive-messaging/latest/concepts/decorators/[チャネルデコレータは] 、メッセージングチャネルに対応するリアクティブストリームをインターセプトして装飾する方法です。これは、ロギングやメトリクス、エラーハンドリングなどのカスタムビヘイビアをチャネルに追加するのに便利です。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid ""
"It is therefore possible to implement a bean implementing `PublisherDecorator` for incoming channels, and `SubscriberDecorator` for outgoing channels.\n"
"Since two APIs are symmetric, you can implement both interfaces in the same bean.\n"
"These beans are automatically discovered by Quarkus and applied by priority (from the least value to the greatest)."
msgstr "したがって、着信チャンネル用に `PublisherDecorator` を実装し、発信チャンネル用に `SubscriberDecorator` を実装したビーンを実装することが可能です。2つのAPIは対称なので、同じビーンで両方のインタフェースを実装できます。これらのBeanはQuarkusによって自動的に検出され、優先度（最小値から最大値まで）によって適用されます。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "Some decorators are included by default by Quarkus extensions."
msgstr "Quarkusの拡張機能には、デフォルトで含まれているデコレータがあります。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "Incoming channels (PublisherDecorator) in the order of priority:"
msgstr "優先順位の高い着信チャンネル（PublisherDecorator）："

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.quarkus.smallrye.reactivemessaging.runtime.ConnectorContextPropagationDecorator` (-100): Clears the context propagation for incoming channels"
msgstr "`io.quarkus.smallrye.reactivemessaging.runtime.ConnectorContextPropagationDecorator` (-100):受信チャネルのコンテキスト伝搬をクリアします。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.smallrye.reactive.messaging.providers.locals.ContextDecorator` (0): Ensures messages are dispatched on the message context"
msgstr "`io.smallrye.reactive.messaging.providers.locals.ContextDecorator` (0):メッセージコンテキストでメッセージがディスパッチされるようにします。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.quarkus.smallrye.reactivemessaging.runtime.RequestScopedDecorator` (100): Handles pausable channels"
msgstr "`io.quarkus.smallrye.reactivemessaging.runtime.RequestScopedDecorator` (100):一時停止可能なチャンネル"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.smallrye.reactive.messaging.providers.IncomingInterceptorDecorator` (500): Handles `IncomingInterceptor` beans"
msgstr "`io.smallrye.reactive.messaging.providers.IncomingInterceptorDecorator` (500): 豆の取り扱い `IncomingInterceptor` "

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.smallrye.reactive.messaging.providers.metrics.MetricDecorator` (1000): MicroProfile Metrics support, enabled with `quarkus-smallrye-metrics` extension"
msgstr "`io.smallrye.reactive.messaging.providers.metrics.MetricDecorator` (1000):MicroProfile Metrics のサポート。 拡張で有効化。 `quarkus-smallrye-metrics` "

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.smallrye.reactive.messaging.providers.metrics.MicrometerDecorator` (1000): Micrometer Metrics support, enabled with `quarkus-micrometer` extension"
msgstr "`io.smallrye.reactive.messaging.providers.metrics.MicrometerDecorator` (1000):マイクロメーターメトリクスのサポート。 拡張で有効。 `quarkus-micrometer` "

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.smallrye.reactive.messaging.providers.extension.ObservationDecorator` (1000): Message observation support for incoming channels"
msgstr "`io.smallrye.reactive.messaging.providers.extension.ObservationDecorator` (1000):着信チャンネルに対するメッセージ観測のサポート"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.smallrye.reactive.messaging.providers.extension.PausableChannelDecorator` (1000): Handles pausable channels"
msgstr "`io.smallrye.reactive.messaging.providers.extension.PausableChannelDecorator` (1000):一時停止可能なチャンネル"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.quarkus.opentelemetry.runtime.tracing.intrumentation.reactivemessaging.ReactiveMessagingTracingIncomingDecorator` (1000): Included with `quarkus-opentelemetry` extension, propagates tracing information"
msgstr "`io.quarkus.opentelemetry.runtime.tracing.intrumentation.reactivemessaging.ReactiveMessagingTracingIncomingDecorator` (1000): 拡張に含まれ、トレース情報を伝播します。 `quarkus-opentelemetry` "

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "Outgoing channels (SubscriberDecorator):"
msgstr "発信チャンネル（SubscriberDecorator）："

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.quarkus.smallrye.reactivemessaging.runtime.ConnectorContextPropagationDecorator` (-100): Clears the context propagation for outgoing channels"
msgstr "`io.quarkus.smallrye.reactivemessaging.runtime.ConnectorContextPropagationDecorator` (-100):送信チャネルのコンテキスト伝搬をクリアします。"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.smallrye.reactive.messaging.providers.extension.OutgoingObservationDecorator` (1000): Message observation support for outgoing channels"
msgstr "`io.smallrye.reactive.messaging.providers.extension.OutgoingObservationDecorator` (1000):発信チャンネルにおけるメッセージ観測のサポート"

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.quarkus.opentelemetry.runtime.tracing.intrumentation.reactivemessaging.ReactiveMessagingTracingOutgoingDecorator` (1000): Included with `quarkus-opentelemetry` extension, propagates tracing information"
msgstr "`io.quarkus.opentelemetry.runtime.tracing.intrumentation.reactivemessaging.ReactiveMessagingTracingOutgoingDecorator` (1000): 拡張に含まれ、トレース情報を伝播します。 `quarkus-opentelemetry` "

#: _versions/3.27/guides/messaging.adoc
#, fuzzy
msgid "`io.smallrye.reactive.messaging.providers.OutgoingInterceptorDecorator` (2000): Handles `OutgoingInterceptor` beans"
msgstr "`io.smallrye.reactive.messaging.providers.OutgoingInterceptorDecorator` (2000): 豆の取り扱い `OutgoingInterceptor` "

#: _versions/3.27/guides/messaging.adoc
msgid "Going further"
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid "This guide shows the general principles of Quarkus Messaging extensions."
msgstr ""

#: _versions/3.27/guides/messaging.adoc
msgid ""
"If you want to go further, you can check the link:{rm_doc}[SmallRye Reactive Messaging] documentation,\n"
"which has in-depth documentation for each of these concepts and more."
msgstr ""
