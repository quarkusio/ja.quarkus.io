msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Virtual Thread support reference"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "This guide explains how to benefit from Java 21+ virtual threads in Quarkus application."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "What are virtual threads?"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Terminology"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "OS thread"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "A \"thread-like\" data structure managed by the Operating System."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Platform thread"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Until Java 19, every instance of the link:{thread}[Thread] class was a platform thread, a wrapper around an OS thread.\n"
"Creating a platform thread creates an OS thread, and blocking a platform thread blocks an OS thread."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Virtual thread"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Lightweight, JVM-managed threads. They extend the link:{thread}[Thread] class but are not tied to one specific OS thread.\n"
"Thus, scheduling virtual threads is the responsibility of the JVM."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Carrier thread"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"A platform thread used to execute a virtual thread is called a **carrier** thread.\n"
"It isn't a class distinct from link:{Thread}[Thread] or `VirtualThread` but rather a functional denomination."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Differences between virtual threads and platform threads"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "We will give a brief overview of the topic here; please refer to the link:{vthreadjep}[JEP 425] for more information."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Virtual threads are a feature available since Java 19 (Java 21 is the first LTS version including virtual threads),\n"
"aiming at providing a cheap alternative to platform threads for I/O-bound workloads."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Until now, platform threads were the concurrency unit of the JVM.\n"
"They are a wrapper over OS structures.\n"
"Creating a Java platform thread creates a \"thread-like\" structure in your operating system."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Virtual threads, on the other hand, are managed by the JVM. To be executed, they need to be mounted on a platform thread (which acts as a carrier to that virtual thread).\n"
"As such, they have been designed to offer the following characteristics:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Lightweight "
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Virtual threads occupy less space than platform threads in memory.\n"
"Hence, it becomes possible to use more virtual threads than platform threads simultaneously without blowing up the memory.\n"
"By default, platform threads are created with a stack of about 1 MB, whereas virtual threads stack is \"pay-as-you-go.\"\n"
"You can find these numbers and other motivations for virtual threads in this https://youtu.be/lIq-x_iI-kc?t=543[presentation] given by the lead developer of project Loom (the project that added the virtual thread support to the JVM)."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Cheap to create"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Creating a platform thread in Java takes time.\n"
"Currently, techniques such as pooling, where threads are created once and then reused, are strongly encouraged to minimize the time lost in starting them (as well as limiting the maximum number of threads to keep memory consumption low).\n"
"Virtual threads are supposed to be disposable entities that we create when we need them,\n"
"it is discouraged to pool them or reuse them for different tasks."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Cheap to block"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"When performing blocking I/O, the underlying OS thread wrapped by the Java platform thread is put in a wait queue, and a context switch occurs to load a new thread context onto the CPU core. This operation takes time.\n"
"Since the JVM manages virtual threads, no underlying OS thread is blocked when they perform a blocking operation.\n"
"Their state is stored in the heap, and another virtual thread is executed on the same Java platform (carrier) thread."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "The Continuation Dance"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "As mentioned above, the JVM schedules the virtual threads. These virtual threads are mounted on carrier threads. The scheduling comes with a pinch of magic. When the virtual thread attempts to use blocking I/O, the JVM _transforms_ this call into a non-blocking one, unmounts the virtual thread, and mounts another virtual thread on the carrier thread. When the I/O completes, the _waiting_ virtual thread becomes eligible again and will be re-mounted on a carrier thread to continue its execution. For the user, all this dance is invisible. Your synchronous code is executed asynchronously."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Note that the virtual thread may not be re-mounted on the same carrier thread."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Virtual threads are useful for I/O-bound workloads only"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"We now know we can create more virtual threads than platform threads. One could be tempted to use virtual threads to perform long computations (CPU-bound workload).\n"
"It is useless and counterproductive.\n"
"CPU-bound doesn't consist of quickly swapping threads while they need to wait for the completion of an I/O, but in leaving\n"
"them attached to a CPU core to compute something.\n"
"In this scenario, it is worse than useless to have thousands of threads if we have tens of CPU cores, virtual threads won't enhance the performance of CPU-bound workloads.\n"
"Even worse, when running a CPU-bound workload on a virtual thread, the virtual thread monopolizes the carrier thread on which it is mounted.\n"
"It will either reduce the chance for the other virtual thread to run or will start creating new carrier threads, leading to high memory usage."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Run code on virtual threads using @RunOnVirtualThread"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"In Quarkus, the support of virtual thread is implemented using the link:{runonvthread}[@RunOnVirtualThread] annotation.\n"
"This section briefly overviews the rationale and how to use it.\n"
"There are dedicated guides for extensions supporting that annotation, such as:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "xref:./rest-virtual-threads.adoc[Virtual threads in REST applications]"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "xref:./messaging-virtual-threads.adoc[Virtual threads in reactive messaging applications]"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "xref:./grpc-virtual-threads.adoc[Virtual threads in gRPC services]"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "xref:./scheduler-reference.adoc#virtual_threads[Execute periodic tasks on virtual threads]"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Why not run everything on virtual threads?"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"As mentioned above, not everything can run safely on virtual threads.\n"
"The risk of **monopolization** can lead to high-memory usage.\n"
"Also, there are situations where the virtual thread cannot be unmounted from the carrier thread.\n"
"This is called **pinning**.\n"
"Finally, some libraries use `ThreadLocal` to store and reuse objects.\n"
"Using virtual threads with these libraries will lead to massive allocation, as the intentionally pooled objects will be instantiated for every (disposable and generally short-lived) virtual thread."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"As of today, it is not possible to use virtual threads in a carefree manner.\n"
"Following such a laissez-faire approach could quickly lead to memory and resource starvation issues.\n"
"Thus, Quarkus uses an explicit model until the aforementioned issues disappear (as the Java ecosystem matures).\n"
"It is also the reason why _reactive_ extensions have the virtual thread support, and rarely the _classic_ ones.\n"
"We need to know when to dispatch on a virtual thread."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "It is essential to understand that these issues are not Quarkus limitations or bugs but are due to the current state of the Java ecosystem which needs to evolve to become virtual thread friendly."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "To learn more about the internal design and choices, check the https://dl.acm.org/doi/10.1145/3583678.3596895[Considerations for integrating virtual threads in a Java framework: a Quarkus example in a resource-constrained environment] paper."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Monopolization cases"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"The monopolization has been explained in the xref:cpu-bound[Virtual threads are useful for I/O-bound workloads only] section.\n"
"When running long computations, we do not allow the JVM to unmount and switch to another virtual thread until the virtual thread terminates.\n"
"Indeed, the current scheduler does not support preempting tasks."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"This monopolization can lead to the creation of new carrier threads to execute other virtual threads.\n"
"Creating carrier threads results in creating platform threads.\n"
"So, there is a memory cost associated with this creation."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Suppose you run in a constrained environment, such as containers. In that case, monopolization can quickly become a concern, as the high memory usage can lead to out-of-memory issues and container termination.\n"
"The memory usage may be higher than with regular worker threads because of the inherent cost of the scheduling and virtual threads."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Pinning cases"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"The promise of \"cheap blocking\" might not always hold: a virtual thread might _pin_ its carrier on certain occasions.\n"
"The platform thread is blocked in this situation, precisely as it would have been in a typical blocking scenario."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "According to link:{vthreadjep}[JEP 425] this can happen in two situations:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "when a virtual thread performs a blocking operation inside a `synchronized` block or method"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "when it executes a blocking operation inside a native method or a foreign function"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"It can be reasonably easy to avoid these situations in your code, but verifying every dependency you use is hard.\n"
"Typically, while experimenting with virtual threads, we realized that versions older than 42.6.0 of the link:{pgsql-driver}[postgresql-JDBC driver] result in frequent pinning.\n"
"Most JDBC drivers still pin the carrier thread.\n"
"Even worse, many libraries require code changes."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "For more information, see link:https://quarkus.io/blog/virtual-thread-1/[When Quarkus meets Virtual Threads]"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"This information about pinning cases applies to PostgreSQL JDBC driver 42.5.4 and earlier.\n"
"For PostgreSQL JDBC driver 42.6.0 and later, virtually all synchronized methods have been replaced by reentrant locks.\n"
"For more information, see the link:https://jdbc.postgresql.org/changelogs/2023-03-17-42.6.0-release/[Notable Changes] for PostgreSQL JDBC driver 42.6.0."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "The pooling case"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Some libraries are using `ThreadLocal` as an object pooling mechanism.\n"
"Extremely popular libraries like https://github.com/FasterXML/jackson-core/issues/919[Jackson] and Netty assume that the application uses a limited number of threads, which are recycled (using a thread pool) to run multiple (unrelated but sequential) tasks."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "This pattern has multiple advantages, such as:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Allocation benefit: heavy objects are only allocated once per thread, but because the number of these threads was intended to be limited, it would not use too much memory."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Thread safety: only one thread can access the object stored in the thread local - preventing concurrent accesses."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"However, this pattern is counter-productive when using virtual threads.\n"
"Virtual threads are not pooled and generally short-lived.\n"
"So, instead of a few of them, we now have many of them.\n"
"For each of them, the object stored in the `ThreadLocal` is created (often large and expensive) and won't be reused, as the virtual thread is not pooled (and won't be used to run another task once the execution completes).\n"
"This problem leads to high memory usage.\n"
"Unfortunately, it requires sophisticated code changes in the libraries themselves."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Use @RunOnVirtualThread with Quarkus REST (formerly RESTEasy Reactive)"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"This section shows a brief example of using the link:{runonvthread}[@RunOnVirtualThread] annotation.\n"
"It also explains the various development and execution models offered by Quarkus."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"The `@RunOnVirtualThread` annotation instructs Quarkus to invoke the annotated method on a **new** virtual thread instead of the current one.\n"
"Quarkus handles the creation of the virtual thread and the offloading."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Since virtual threads are disposable entities, the fundamental idea of `@RunOnVirtualThread` is to offload the execution of an endpoint handler on a new virtual thread instead of running it on an event-loop or worker thread (in the case of Quarkus REST)."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"To do so, it suffices to add the link:{runonvthread}[@RunOnVirtualThread] annotation to the endpoint.\n"
"If the Java Virtual Machine used to **run** the application provides virtual thread support (so Java 21 or later versions), then the endpoint execution is offloaded to a virtual thread.\n"
"It will then be possible to perform blocking operations without blocking the platform thread upon which the virtual thread is mounted."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"In the case of Quarkus REST, this annotation can only be used on endpoints annotated with link:{blockingannotation}[@Blocking] or\n"
"considered blocking because of their signature.\n"
"You can visit xref:rest.adoc#execution-model-blocking-non-blocking[Execution model, blocking, non-blocking]\n"
"for more information."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Get started with virtual threads with Quarkus REST"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Add the following dependency to your build file:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Then, you also need to make sure that you are using Java 21+, this can be enforced in your pom.xml file with the following:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Three development and execution models"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"The example below shows the differences between three endpoints, all of them querying a _fortune_ in the database then\n"
"returning it to the client."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "the first one uses the traditional blocking style, it is considered blocking due to its signature."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "the second one uses Mutiny, it is considered non-blocking due to its signature."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"the third one uses Mutiny but in a synchronous way, since it doesn't return a \"reactive type\" it is\n"
"considered blocking and the link:{runonvthread}[@RunOnVirtualThread] annotation can be used."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "The following table summarizes the options:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Model"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Example of signature"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Pros"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Cons"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Synchronous code on worker thread"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "`Fortune blocking()`"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Simple code"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Use worker thread (limit concurrency)"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Reactive code on event loop"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "`Uni<Fortune> reactive()`"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "High concurrency and low resource usage"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "More complex code"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Synchronous code on virtual thread"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "`@RunOnVirtualThread Fortune vt()`"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Risk of pinning, monopolization and under-efficient object pooling"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Note that all three models can be used in a single application."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Use virtual thread friendly clients"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"As mentioned in the xref:why-not[Why not run everything on virtual threads?] section, the Java ecosystem is not entirely ready for virtual threads.\n"
"So, you need to be careful, especially when using a libraries doing I/O."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Fortunately, Quarkus provides a massive ecosystem that is ready to be used in virtual threads.\n"
"Mutiny, the reactive programming library used in Quarkus, and the Vert.x Mutiny bindings provides the ability to write blocking code (so, no fear, no learning curve) which do not pin the carrier thread."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "As a result:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Quarkus extensions providing blocking APIs on top of reactive APIs can be used in virtual threads.\n"
"This includes the REST Client, the Redis client, the mailer..."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "API returning `Uni` can be used directly using `uni.await().atMost(...)`. It blocks the virtual thread, without blocking the carrier thread, and also improves the resilience of your application with an easy (non-blocking) timeout support."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "If you use a https://smallrye.io/smallrye-mutiny-vertx-bindings/latest/[Vert.x client using the Mutiny bindings], use the `andAwait()` methods which block until you get the result without pinning the carrier thread. It includes all the reactive SQL drivers."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Detect pinned thread in tests"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"We recommend to use the following configuration when running tests in application using virtual threads.\n"
"If would not fail the tests, but at least dump start traces if the code pins the carrier thread:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Run application using virtual threads"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Prior to Java 21, virtual threads were still an experimental feature, you need to start your application with the `--enable-preview` flag."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Build containers for application using virtual threads"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "When running your application in JVM mode (so not compiled into native, for native check xref:native[the dedicated section]), you can follow the xref:./container-image.adoc[containerization guide] to build a container."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"In this section, we use JIB to build the container.\n"
"Refer to the xref:./container-image.adoc[containerization guide] to learn more about the alternatives."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "To containerize your Quarkus application that use `@RunOnVirtualThread`, add the following properties in your `application.properties`:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Make sure you use a base image supporting virtual threads. Here we use an image providing Java 21. Quarkus picks an image providing Java 21+ automatically if you do not set one."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Select the target architecture. You can select more than one to build multi-archs images."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Then, build your container as you would do usually.\n"
"For example, if you are using Maven, run:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Compiling Quarkus application using virtual threads into native executable"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Using a local GraalVM installation"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "To compile a Quarkus applications leveraging `@RunOnVirtualThread` into a native executable, you must be sure to use a GraalVM / Mandrel `native-image` supporting virtual threads, so providing at least Java 21."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Build the native executable as indicated on xref:./building-native-image.adoc[the native compilation guide].\n"
"For example, with Maven, run:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Using an in-container build"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"In-container build allows building Linux 64 executables by using a `native-image` compiler running in a container.\n"
"It avoids having to install `native-image` on your machine, and also allows configuring the GraalVM version you need.\n"
"Note that, to use in-container build, you must have Docker or Podman installed on your machine."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Then, add to your `application.properties` file:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Enables the in-container build"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "From ARM/64 to AMD/64"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"If you are using a Mac M1 or M2 (using an ARM64 CPU), you need to be aware that the native executable you will get using an in-container build will be a Linux executable, but using your host (ARM 64) architecture.\n"
"You can use emulation to force the architecture when using Docker with the following property:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Be aware that it increases the compilation time... a lot (>10 minutes)."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Containerize native applications using virtual threads"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"To build a container running a Quarkus application using virtual threads compiled into a native executable, you must\n"
"make sure you have a Linux/AMD64 executable (or ARM64 if you are targeting ARM machines)."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Make sure your `application.properties` contains the configuration explained in xref:native[the native compilation section]."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "If you ever want to build a native container image and already have an existing native image you can set `-Dquarkus.native.reuse-existing=true` and the native image build will not be re-run."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Use the duplicated context in virtual threads"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Methods annotated with `@RunOnVirtualThread` inherit from the original duplicated context (See the xref:duplicated-context.adoc[duplicated context reference guide] for details).\n"
"So, the data written in the duplicated context (and the request scope, as the request scoped is stored in the duplicated context) by filters and interceptors are available during the method execution (even if the filters and interceptors are not run on the virtual thread)."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "However, thread locals are not propagated."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Virtual thread names"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"Virtual threads are created without a thread name by default, which is not practical to identify the execution for debugging and logging purposes.\n"
"Quarkus managed virtual threads are named and prefixed with `quarkus-virtual-thread-`.\n"
"You can customize this prefix, or disable the naming altogether configuring an empty value:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Inject the virtual thread executor"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"In order to run tasks on virtual threads Quarkus manages an internal `ThreadPerTaskExecutor`.\n"
"In rare instances where you'd need to access this executor directly you can inject it using the `@VirtualThreads` CDI qualifier:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Injecting the Virtual Thread ExecutorService is experimental and may change in future versions."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Testing virtual thread applications"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"As mentioned above, virtual threads have a few limitations that can drastically affect your application performance and memory usage.\n"
"The _junit5-virtual-threads_ extension provides a way to detect pinned carrier threads while running your tests.\n"
"Thus, you can eliminate one of the most prominent limitations or be aware of the problem."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "To enable this detection:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "1) Add the `junit5-virtual-threads` dependency to your project:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus.junit5</groupId>\n"
"    <artifactId>junit5-virtual-threads</artifactId>\n"
"    <scope>test</scope>\n"
"</dependency>"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "2) In your test case, add the `io.quarkus.test.junit5.virtual.VirtualThreadUnit`  and `io.quarkus.test.junit.virtual.ShouldNotPin` annotations:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"@QuarkusTest\n"
"@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n"
"@VirtualThreadUnit // Use the extension\n"
"@ShouldNotPin // Detect pinned carrier thread\n"
"class TodoResourceTest {\n"
"    // ...\n"
"}"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"When you run your test (remember to use Java 21+), Quarkus detects pinned carrier threads.\n"
"When it happens, the test fails."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "The `@ShouldNotPin` can also be used on methods directly."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"The _junit5-virtual-threads_ also provides a `@ShouldPin` annotation for cases where pinning is unavoidable.\n"
"The following snippet demonstrates the `@ShouldPin` annotation usage."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Virtual thread metrics"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "You can enable the Micrometer Virtual Thread _binder_ by adding the following artifact to your application:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid ""
"This binder keeps track of the number of pinning events and the number of virtual threads failed to be started or un-parked.\n"
"See the https://docs.micrometer.io/micrometer/reference/reference/jvm.html#_java_21_metrics[MicroMeter documentation] for more information."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "You can explicitly disable the binder by setting the following property in your `application.properties`:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "In addition, if the application is running on a JVM that does not support virtual threads (prior to Java 21), the binder is automatically disabled."
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "You can associate tags to the collected metrics by setting the following properties in your `application.properties`:"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "Additional references"
msgstr ""

#: _versions/3.27/guides/virtual-threads.adoc
msgid "https://dl.acm.org/doi/10.1145/3583678.3596895[Considerations for integrating virtual threads in a Java framework: a Quarkus example in a resource-constrained environment]"
msgstr ""
