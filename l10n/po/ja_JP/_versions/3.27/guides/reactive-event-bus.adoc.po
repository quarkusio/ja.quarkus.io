msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Using the event bus"
msgstr "イベントバスの使用"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"Quarkus allows different beans to interact using asynchronous events, thus promoting loose-coupling.\n"
"The messages are sent to _virtual addresses_.\n"
"It offers 3 types of delivery mechanism:"
msgstr "Quarkusでは、異なる Bean が非同期イベントを使用して相互作用することができるため、疎結合化が促進されます。メッセージは _仮想アドレス_ に送信されます。3種類の配信メカニズムを提供しています。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr "point-to-point - メッセージを送信すると、1人の消費者がそれを受信します。複数の消費者がそのアドレスを聞く場合は、ラウンドロビンが適用されます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "publish/subscribe - publish a message, all the consumers listening to the address are receiving the message;"
msgstr "publish/subscribe - メッセージをパブリッシュし、アドレスをリスンしているすべてのコンシューマがメッセージを受信します。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous-fashion"
msgstr "request/reply - メッセージを送信し、応答を待ちます。受信者は非同期的にメッセージに応答することができます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "All these delivery mechanisms are non-blocking, and are providing one of the fundamental brick to build reactive applications."
msgstr "これらの配信メカニズムはすべてノンブロッキングであり、リアクティブアプリケーションを構築するための基本的な要素の1つを提供しています。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"The asynchronous message passing feature allows replying to messages which is not supported by Reactive Messaging.\n"
"However, it is limited to single-event behavior (no stream) and to local messages."
msgstr "非同期メッセージパッシング機能は、Reactive Messagingではサポートされていないメッセージへの返信を可能にします。ただし、シングルイベント動作(ストリームなし)とローカルメッセージに限定されます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Installing"
msgstr "インストール"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"This mechanism uses the Vert.x EventBus, so you need to enable the `vertx` extension to use this feature.\n"
"If you are creating a new project, set the `extensions` parameter as follows:"
msgstr ""
"このメカニズムは Vert.x EventBus を使用するため、この機能を使用するには `vertx` エクステンションを有効にする必要があります。\n"
"新しいプロジェクトを作成する場合は、 `extensions` パラメータを次のように設定します："

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"If you have an already created project, the `vertx` extension can be added to an existing Quarkus project with\n"
"the `add-extension` command:"
msgstr "すでに作成済みのプロジェクトがある場合は、 `vertx` エクステンションを既存のQuarkusプロジェクトに `add-extension` コマンドで追加することができます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Otherwise, you can manually add this to the dependencies section of your build file:"
msgstr "そうでない場合は、 `pom.xml` ファイルの依存関係セクションに手動で追加することができます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Consuming events"
msgstr "イベントのコンシューム"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr "イベントをコンシュームするには、 `io.quarkus.vertx.ConsumeEvent` アノテーションを使用します。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "If not set, the address is the fully qualified name of the bean, for instance, in this snippet it's `org.acme.vertx.GreetingService`."
msgstr "設定されていない場合、アドレスは Bean の完全修飾名となり、例えばこのスニペットでは `org.acme.vertx.GreetingService` となります。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "The method parameter is the message body. If the method returns _something_ it's the message response."
msgstr "メソッドのパラメーターはメッセージ本体です。メソッドが _何か_ を返す場合は、それがメッセージのレスポンスになります。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"By default, the code consuming the event must be _non-blocking_, as it's called on the Vert.x event loop.\n"
"If your processing is blocking, use the `blocking` attribute:"
msgstr "デフォルトでは、Vert.x イベントループで呼び出されるため、イベントをコンシュームするコードは _ノンブロッキング_ でなければなりません。処理がブロッキングである場合は、 `blocking` 属性を使用してください。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Alternatively, you can annotate your method with `@io.smallrye.common.annotation.Blocking`:"
msgstr "あるいは、メソッドに `@io.smallrye.common.annotation.Blocking` とアノテーションを付けることもできます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`.\n"
"See the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture documentation] for further details on this topic."
msgstr "`@Blocking` を使用する場合は、 `@ConsumeEvent` の `blocking` 属性の値は無視されます。このトピックの詳細については、 xref:quarkus-reactive-architecture.adoc[Quarkus リアクティブアーキテクチャのドキュメント] を参照してください。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr "`io.smallrye.mutiny.Uni` または `java.util.concurrent.CompletionStage` のどちらかを返すことで、非同期処理も可能です。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Mutiny"
msgstr "Mutiny"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"The previous example uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前の例はMutinyリアクティブ型を使用しています。Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - 直感的なリアクティブプログラミングライブラリ]をご覧ください。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Configuring the address"
msgstr "アドレスの設定"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "`@ConsumeEvent` アノテーションでアドレスを設定することができます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Receive the messages sent to the `greeting` address"
msgstr "`greeting` アドレスに送信されたメッセージを受信する"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Replying"
msgstr "応答"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"The _return_ value of a method annotated with `@ConsumeEvent` is used as response to the incoming message.\n"
"For instance, in the following snippet, the returned `String` is the response."
msgstr "`@ConsumeEvent` でアノテーションされたメソッドの _戻り値_ が、着信メッセージに対するレスポンスとして使用されます。例えば、次のスニペットでは、 `String` がレスポンスとして返されます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr "また、 `Uni<T>` や `CompletionStage<T>` を返すことで、非同期応答を扱うこともできます。。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr "Context Propagation エクステンションを使えば、 `executor` を注入することができます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Alternatively, you can use the default Quarkus worker pool using:"
msgstr "あるいは、デフォルトの Quarkus ワーカープールを使用することもできます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Implementing fire and forget interactions"
msgstr "fire and forget インタラクションの実装"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"You don't have to reply to received messages.\n"
"Typically, for a _fire and forget_ interaction, the messages are consumed and the sender does not need to know about it.\n"
"To implement this, your consumer method just returns `void`"
msgstr "受信したメッセージに返信する必要はありません。通常、 _fire and forget(撃ち放し)_ のやりとりでは、送信者はメッセージが消費されたことを知る必要はありません。これを実装するためには、コンシューマーメソッドは `void` を返します。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Dealing with messages"
msgstr "メッセージの処理"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "As said above, this mechanism is based on the Vert.x event bus. So, you can also use `Message` directly:"
msgstr "上でも述べたように、この仕組みはVert.xイベントバスをベースにしています。なので、直接 `Message` を使うこともできます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Handling Failures"
msgstr "失敗のハンドリング"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "If a method annotated with `@ConsumeEvent` throws an exception then:"
msgstr "`@ConsumeEvent` がアノテートされたメソッドが例外を発生させた場合、以下のようになります。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "if a reply handler is set then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr "返信ハンドラーが設定されている場合、失敗はコード `ConsumeEvent#FAILURE_CODE` と例外メッセージを含んだ `io.vertx.core.eventbus.ReplyException` を通して送信者に伝搬されます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "if no reply handler is set then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, i.e. `io.vertx.core.Vertx#exceptionHandler()`."
msgstr "返答ハンドラーが設定されていない場合、例外は必要に応じて `RuntimeException` でラップされて再スローされ、デフォルトの例外ハンドラー、すなわち `io.vertx.core.Vertx#exceptionHandler()` で処理されます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Sending messages"
msgstr "メッセージの送信"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"Ok, we have seen how to receive messages, let's now switch to the _other side_: the sender.\n"
"Sending and publishing messages use the Vert.x event bus:"
msgstr "さて、メッセージを受信する方法を見てきましたが、次は送信者 _側_ に切り替えましょう。メッセージの送信とパブリッシュは Vert.x イベントバスを使います。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Inject the Event bus"
msgstr "イベントバスのインジェクト"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "アドレス `greeting` にメッセージを送信。メッセージのペイロードは `name`"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` オブジェクトは、以下のメソッドを提供します。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr "`send` 特定のアドレスへのメッセージ - 一人のコンシューマーがメッセージを受信する。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr "`publish` 特定のアドレスにメッセージを送る - すべてのコンシューマーがメッセージを受け取る。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "`send` a message and expect reply asynchronously"
msgstr "メッセージを `send` (送信)し、返信を非同期に待つ"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "`send` a message and expect reply in a blocking manner"
msgstr "メッセージを `send` (送信)し、返信を同期に待つ"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Putting things together - bridging HTTP and messages"
msgstr "物事をまとめる - HTTPとメッセージのブリッジング"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.\n"
"It uses the request/reply dispatching mechanism.\n"
"Instead of implementing the business logic inside the Jakarta REST endpoint, we are sending a message.\n"
"This message is consumed by another bean and the response is sent using the _reply_ mechanism."
msgstr "グリーティングHTTPエンドポイントをもう一度修正し，非同期メッセージパッシングを使用して，呼び出しを別のBeanに委譲してみよう。これは、request/replyディスパッチ機構を使用しています。Jakarta RESTエンドポイント内でビジネスロジックを実装する代わりに、メッセージを送信しています。このメッセージは別の Bean によって消費され、応答は _reply_ メカニズムを使用して送信されます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "First create a new project using:"
msgstr "まず、新しいプロジェクトを作成します。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "You can already start the application in _dev mode_ using:"
msgstr "`./mvnw compile quarkus:dev` を実行すると、自動的に _開発者モード_ でアプリケーションを起動することができます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Then, creates a new Jakarta REST resource with the following content:"
msgstr "次に、以下の内容で新しいJakarta RESTリソースを作成します:"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "src/main/java/org/acme/vertx/EventResource.java"
msgstr "src/main/java/org/acme/vertx/EventResource.java"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "send the `name` to the `greeting` address and request a response"
msgstr "`greeting` アドレスに  `name`  を送信し、レスポンスを要求します。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "when we get the response, extract the body and send it to the user"
msgstr "レスポンスを取得したら、ボディを抽出してユーザーに送信します。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"If you call this endpoint, you will wait and get a timeout. Indeed, no one is listening.\n"
"So, we need a consumer listening on the `greeting` address. Create a `GreetingService` bean with the following content:"
msgstr "このエンドポイントを呼び出すと、しばらく待ってからタイムアウトになります。実際、誰もリスンしていません。そこで、 `greeting` アドレスをリスンするコンシューマーが必要です。以下の内容の `GreetingService` Bean を作成します。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "src/main/java/org/acme/vertx/GreetingService.java"
msgstr "src/main/java/org/acme/vertx/GreetingService.java"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "This bean receives the name, and returns the greeting message."
msgstr "この Bean は name を受け取り、 greeting メッセージを返します."

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Now, open your browser to http://localhost:8080/async/Quarkus, and you should see:"
msgstr "さて、ブラウザで http://localhost:8080/async/Quarkus を開くと、以下が表示されるはずです。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr "より理解しやすくするために、HTTP リクエスト/レスポンスがどのように処理されたかを詳しく見てみましょう。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "The request is received by the `hello` method"
msgstr "リクエストは `hello` メソッドが受け取ります。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "a message containing the _name_ is sent to the event bus"
msgstr "_name_ を含むメッセージがイベントバスに送信されます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Another bean receives this message and computes the response"
msgstr "別の Bean がこのメッセージを受信して、レスポンスを計算します."

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "This response is sent back using the reply mechanism"
msgstr "このレスポンスは、応答メカニズムを使用して返信されます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr "送信者が応答を受信すると、HTTP レスポンスに内容が書き込まれます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "This application can be packaged using:"
msgstr "このアプリケーションは、以下の方法でパッケージングできます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "You can also compile it as a native executable with:"
msgstr "以下でネイティブ実行可能ファイルとしてコンパイルすることもできます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Using codecs"
msgstr "コーデックを使う"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid ""
"The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses codecs to _serialize_ and _deserialize_ objects.\n"
"Quarkus provides a default codec for local delivery.\n"
"So you can exchange objects as follows:"
msgstr "link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.xイベントバス] では、コーデックを使用してオブジェクトの _シリアライズ_ と _デシリアライズ_ を行います。Quarkusでは、ローカル配信用のデフォルトのコーデックを提供しています。そのため、以下のようにオブジェクトを交換することができます。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "If you want to use a specific codec, you need to explicitly set it on both ends:"
msgstr "特定のコーデックを使用したい場合は、両サイドで明示的に設定する必要があります。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Set the name of the codec to use to send the message"
msgstr "メッセージの送信に使用するコーデックの名前を設定します。"

#: _versions/3.27/guides/reactive-event-bus.adoc
msgid "Set the codec to use to receive the message"
msgstr "メッセージの受信に使用するコーデックを設定します。"
