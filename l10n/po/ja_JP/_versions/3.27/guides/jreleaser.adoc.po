msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Packaging And Releasing With JReleaser"
msgstr "JReleaser によるパッケージングとリリース"

#: _versions/3.27/guides/jreleaser.adoc
msgid "This guide covers packaging and releasing CLI applications using the link:https://jreleaser.org[JReleaser] tool."
msgstr "このガイドでは、 link:https://jreleaser.org[JReleaser]ツールを使ったCLIアプリケーションのパッケージングとリリースについて説明します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.27/guides/jreleaser.adoc
msgid "a GitHub account and a GitHub Personal Access token"
msgstr "GitHubアカウントとGitHubパーソナルアクセストークン"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Bootstrapping the project"
msgstr "プロジェクトのブートストラップ"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"First, we need a project that defines a CLI application. We recommend using the xref:picocli.adoc[PicoCLI] extension.\n"
"This can be done using the following command:"
msgstr "まず，CLIアプリケーションを定義したプロジェクトが必要です。 link:picocli.html[PicoCLI]エクステンションの使用をお勧めします。これは以下のコマンドで行うことができます。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "This command initializes the file structure and the minimum set of required files in the project:"
msgstr "このコマンドは、プロジェクトのファイル構造と最低限必要なファイルのセットを初期化します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "It will also configure the picocli extension in the `pom.xml`:"
msgstr "また、このコマンドは `pom.xml` にpicocli エクステンションを設定します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Preparing the project for GitHub releases"
msgstr "GitHub リリース用のプロジェクトの準備"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"The project must be hosted at a GitHub repository before we continue. This task can be completed by logging into your\n"
"GitHub account, creating a new repository, and adding the newly created sources to said repository. Choose the `main`\n"
"branch as default to take advantage of conventions and thus configure less in your `pom.xml`."
msgstr "この作業を続ける前に、プロジェクトをGitHubリポジトリでホストする必要があります。この作業は、GitHub アカウントにログインし、新しいリポジトリを作成して、新しく作成したソースをそのリポジトリに追加することで完了します。 `main` ブランチをデフォルトとして選択すると、規約を利用して `pom.xml` で設定を少なくすることが可能です。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"You also need a GitHub Personal Access token to be able to post a release to the repository you just created. Follow\n"
"the official documentation for\n"
"link:https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token[creating a personal access token].\n"
"Store the newly created token at a safe place for future reference. Next, you have the choice of configuring the token\n"
"as an environment variable named `JRELEASER_GITHUB_TOKEN` so that the tool can read it. Alternatively you may store\n"
"the token at a secure location of your choosing, using a `.yml`, `.toml`, `.json`, or `.properties` file. The default\n"
"location is `~/.jreleaser/config[format]`. For example, using the `.yml` format this file could look like:"
msgstr "また、作成したリポジトリにリリースを投稿するためには、GitHub パーソナルアクセストークンが必要です。 link:https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token[パーソナルアクセストークンの作成]方法は、公式ドキュメントに従ってください。作成したトークンは、今後のために安全な場所に保管しておきましょう。次に、トークンを環境変数 `JRELEASER_GITHUB_TOKEN` として設定し、ツールに読み込ませる方法があります。あるいは、 `.yml` 、 `.toml` 、 `.json` 、 `.properties` のいずれかのファイルを使用して、トークンを安全な場所に保存することもできます。デフォルトの場所は `~/.jreleaser/config[format]` です。例えば、 `.yml` のフォーマットを使用した場合、このファイルは次のようになります。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "~/.jreleaser/config.yml"
msgstr "~/.jreleaser/config.yml"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Alright. Add all sources and create a first commit. You can choose your own conventions for commit messages however you\n"
"can get more bang for your buck when using JReleaser if you follow the\n"
"link:https://www.conventionalcommits.org/en/v1.0.0/[Conventional Commits] specification. Make your first commit with the\n"
"following message \"build: Add initial sources\"."
msgstr "さてさて。すべてのソースを追加し、最初のコミットを作成します。コミットメッセージの規約は自由ですが、 link:https://www.conventionalcommits.org/en/v1.0.0/[Conventional Commits] 仕様に従った方が、JReleaserをより効果的に使うことができます。最初のコミットでは、\"build:Add initial sources\" というメッセージで最初のコミットを行います。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Packaging as a Native Image distribution"
msgstr "ネイティブイメージでの配布"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Quarkus already knows how to create a native executable using GraalVM Native Image. The default setup will create a\n"
"single executable file following a naming convention. However, the JReleaser tool expects a distribution that is, a\n"
"conventional file structure packaged as a Zip or Tar file. The file structure must follow this layout:"
msgstr "Quarkusは、GraalVM Native Imageを使用してネイティブ実行可能ファイルを作成する方法をすでに知っています。デフォルトの設定では、命名規則に従って1つの実行ファイルが作成されます。しかし、JReleaserツールは、ZipまたはTarファイルとしてパッケージ化された従来のファイル構造であるディストリビューションを期待しています。ファイル構造は以下のようなレイアウトになっている必要があります:"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"This structure lets you add all kinds of supporting files required by the executable, such as configuration files,\n"
"shell completion scripts, man pages, license, readme, and more."
msgstr "この構造では、設定ファイル、シェル補完スクリプト、マンページ、ライセンス、Readmeなど、実行ファイルに必要なあらゆる種類のサポートファイルを追加することができます。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Creating the distribution"
msgstr "ディストリビューションの作成"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"We can leverage the link:http://maven.apache.org/plugins/maven-assembly-plugin/[maven-assembly-plugin] to create such\n"
"a distribution. We'll also make use of the link:https://github.com/maveniverse/nisse[Nisse Maven plugin] to properly\n"
"identify the platform on which this executable can run, adding said platform to the distribution's filename."
msgstr ""
"このようなディストリビューションを作成するには、 link:http://maven.apache.org/plugins/maven-assembly-plugin/[maven-assembly-plugin] を活用します。\n"
"また、 link:https://github.com/maveniverse/nisse[Nisse Mavenプラグイン] を利用して、この実行ファイルが動作するプラットフォームを適切に識別し、ディストリビューションのファイル名にプラットフォームを追加します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"First, let's add the Nisse Maven plugin to the `pom.xml`. This plugin must be added\n"
"to the `<build>` section of the file:"
msgstr ""
"まず、Nisse Maven プラグインを `pom.xml` に追加しましょう。 \n"
"このプラグインは、ファイルの `<build>` セクションに追加する必要があります："

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"In order for this plugin to generate the correct properties, we need to make sure the `nisse.compat.osDetector` system\n"
"property is set. This can be done by adding the following `.mvn/maven.config` file:"
msgstr ""
"このプラグインが正しいプロパティを生成するためには、 `nisse.compat.osDetector` システム・プロパティが設定されていることを確認する必要があります。\n"
"これは、以下の `.mvn/maven.config` ファイルを追加することで可能です："

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Next, native executables on Linux and macOS platforms typically do not have a file extension but Windows executables do,\n"
"we need to take care of this when renaming the generated executable. We can also place the generated distributions into\n"
"their own directory to avoid cluttering the `target` directory. Thus, let's add a couple of properties to the existing\n"
"`<properties>` section in the `pom.xml`:"
msgstr "次に，Linux や macOS プラットフォーム上のネイティブ実行可能ファイルには通常拡張子がありませんが，Windows の実行ファイルには拡張子がありますので，生成された実行ファイルの名前を変更する際にはこの点に注意する必要があります．また，生成されたディストリビューションを独自のディレクトリに配置することで， `target` ディレクトリが散らかるのを防ぐことができます．そこで、 `pom.xml` の既存の `<properties>` セクションに、いくつかのプロパティを追加してみましょう。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Now we configure the maven-assembly-plugin to create a Zip and a Tar file containing the executable and any supporting files\n"
"it may need to perform its job. Take special note on the name of the distribution, this is where we make use of the platform\n"
"properties detected by the os-detector-maven-plugin. This plugin is configured in its own profile with the `single` goal bound to\n"
"the `package` phase. It's done this way to avoid rebuilding the distribution every single time the build is invoked, as we\n"
"only needed when we're ready for a release."
msgstr ""
"ここで、maven-assembly-pluginを設定し、実行ファイルとその作業を実行するために必要なサポートファイルを含むZipファイルとTarファイルを作成します。\n"
"これは、os-detector-maven-pluginによって検出されたプラットフォームのプロパティを使用する場所です。\n"
"このプラグインは、 `single` ゴールが `package` フェーズにバインドされた独自のプロファイルで構成されます。これは、ビルドが呼び出されるたびにディストリビューションを再ビルドするのを避けるためです。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Note that two profiles are configured. The `dist` profile configures the assembly plugin, and it's configured in such a way that\n"
"it must be activated explicitly by passing `-Pdist` as a command flag. On the other hand the `dist-windows` profile becomes\n"
"active automatically when the build is run on a Windows platform. This second profile takes care of setting the value for the\n"
"`executable-suffix` property which is required by the assembly descriptor, as shown next:"
msgstr "2 つのプロファイルが設定されていることに注意してください。 `dist` プロファイルはアセンブリプラグインを設定し、コマンドフラグとして `-Pdist` を渡すことによって明示的にアクティブ化する必要があるように設定されています。一方、ビルドが Windows プラットフォームで実行されると、 `dist-windows` プロファイルが自動的にアクティブになります。この 2 番目のプロファイルは、次に示すように、アセンブリ記述子に必要な `executable-suffix` プロパティーの値の設定を処理します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "src/main/assembly/assembly.xml"
msgstr "src/main/assembly/assembly.xml"

#: _versions/3.27/guides/jreleaser.adoc
msgid "These are the files created by the assembly plugin when invoking `./mvnw -Pdist package` on macOS:"
msgstr "これらのファイルは、macOS上で `./mvnw -Pdist package` を起動したときに、assembly プラグインによって作成されるファイルです。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Feel free to update the assembly descriptor to include additional files such as LICENSE, readme, or anything else needed by\n"
"the consumers of the executable. Make another commit right here with \"build: Configure distribution assembly\"."
msgstr "アセンブリ記述子を自由に更新して、LICENSE、readme、または実行可能ファイルのコンシューマーが必要とするその他のファイルを追加してください。ここでビルド: ディストリビューションアセンブリの設定を使用して別のコミットを行います。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "We're ready to go to the next phase: configuring the release."
msgstr "これで、次の段階であるリリースの設定に進むことができます。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Adding JReleaser"
msgstr "JReleaser の追加"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"The JReleaser tool can be invoked in many ways: as a CLI tool, as a Docker image, or as a Maven plugin. The last option is very\n"
"convenient given that we are already working with Maven. Let's add yet another profile that contains the release configuration\n"
"as once again we don't require this behavior to be active all the time only when we're ready to post a release:"
msgstr "JReleaser ツールは、CLI ツール、Docker イメージ、または Maven プラグインなどのさまざまな方法で呼び出すことができます。最後のオプションは、すでに Maven を使用していることを考えると、非常に便利です。リリース設定を含むさらに別のプロファイルを追加しましょう。リリースを投稿する準備ができている場合にのみ、この動作を常にアクティブにする必要はありません。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"There are a few goals we can invoke at this point, we can for example ask JReleaser to print out its current configuration by\n"
"invoking the `./mvnw -Prelease jreleaser:config` command. The tool will output everything that it knows about the project. We\n"
"can also generate the changelog by invoking `./mvnw -Prelease jreleaser:changelog`. A file containing the changelog will be\n"
"placed at `target/jreleaser/release/CHANGELOG.md` which at this point should look like this:"
msgstr "この時点で呼び出すことができるいくつかの目標があります。たとえば、 `./mvnw -Prelease jreleaser:config` コマンドを呼び出すことにより、JReleaser に現在の設定を出力するように依頼できます。ツールは、プロジェクトについて知っているすべてのものを出力します。 `./mvnw -Prelease jreleaser:changelog` を呼び出して変更ログを生成することもできます。変更ログを含むファイルは `target/jreleaser/release/CHANGELOG.md` に配置され、この時点では次のようになります。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "target/jreleaser/release/CHANGELOG.md"
msgstr "target/jreleaser/release/CHANGELOG.md"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Not very exciting, but we can change this by instructing JReleaser to format the changelog according to our own conventions. You\n"
"can manually specify patterns to categorize commits however if you chose to follow Conventional Commits we can instruct JReleaser\n"
"to do the same. Add the following to the JReleaser plugin configuration section:"
msgstr "あまりエキサイティングではありません。しかし、JReleaser に独自の規約に従ってチェンジログをフォーマットするように指示することでこれを変更することが出来ます。パターンを手動で指定してコミットを分類できますが、規約に沿ったコミットに従うことを選択した場合は、JReleaser に同じことを行うように指示できます。JReleaser プラグイン設定セクションに以下を追加します:"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Run the previous Maven command once again and inspect the generated changelog, it should now look like this:"
msgstr "前述のMavenコマンドをもう一度実行し、生成されたチェンジログを確認してください、以下のようになるはずです。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"There are more formatting options you may apply but for now these will suffice. Let's make yet another commit right now, with\n"
"\"build: Configure JReleaser plugin\" as a commit message. If you want you can generate the changelog once again and see this\n"
"latest commit added to the file."
msgstr "適用できるフォーマットオプションは他にもありますが、今のところはこれらで十分です。ビルド: JReleaser プラグインの設定をコミットメッセージとして使用して、今すぐさらに別のコミットを行いましょう。必要に応じて、変更ログをもう一度生成して、この最新のコミットがファイルに追加されていることを確認できます。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Adding distributions to the release"
msgstr "リリースへのディストリビューションの追加"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"We've reached the point where we can configure the binary distributions. If you run the `./mvnw -Prelease jreleaser:config`\n"
"command you'll notice there's no mention of any distribution files that we configured in previous steps. This is because\n"
"the tool has no implicit knowledge of them, we must tell JReleaser which files we'd like to release. This decouples creation\n"
"of distributions from release assets as you might like to add or remove files at your leisure. For this particular case we'll\n"
"configure Zip files for both macOS and Windows, and a Tar file for Linux. These files must be added to the JReleaser plugin\n"
"configuration section, like so:"
msgstr "バイナリー配布を設定できるようになりました。 `./mvnw -Prelease jreleaser:config` コマンドを実行すると、前の手順で設定した配布ファイルについての言及がないことに気付くでしょう。これは、ツールに暗黙の知識がないため、リリースするファイルを JReleaser に通知する必要があるためです。これにより、ファイルを自由に追加または削除したい場合に、ディストリビューションの作成がリリースアセットから切り離されます。この特定のケースでは、macOS と Windows の両方に Zip ファイルを設定し、Linux に Tar ファイルを設定します。これらのファイルは、次のように JReleaser プラグイン設定セクションに追加する必要があります。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"We can appreciate a distribution named `app` (same as the project's artifactId for convenience) with 3 configured artifacts.\n"
"Note the use of Maven properties and Mustache templates to define the paths. You may use explicit values if you want or rely\n"
"on properties to parameterize the configuration. Maven properties resolve eagerly during build validation while Mustache\n"
"templates resolve lazily during the execution of the JReleaser plugin goals. Each artifact must define a `platform`\n"
"property that uniquely identifies them. If we run the `./mvnw -Prelease jreleaser:config` we'll quickly get an error as now\n"
"that there's a configured distribution the plugin expects more metadata to be provided by the project:"
msgstr "3 つの設定されたアーティファクトを持つ`app`(便宜上プロジェクトの artifactId と同じ) という名前のディストリビューションを評価できます。パスを定義するための Maven プロパティーと Mustache テンプレートの使用に注意してください。設定をパラメーター化するためにプロパティーが必要な場合、またはプロパティーに依存する場合は、明示的な値を使用できます。Maven プロパティーはビルドの検証中に即時に解決されますが、Mustache テンプレートは JReleaser プラグインの目標の実行中に遅延して解決されます。各アーティファクトは、それらを一意に識別する `platform` プロパティーを定義する必要があります。 `./mvnw -Prelease jreleaser:config` を実行すると、プラグインがプロジェクトによって提供されるメタデータが増えることを期待する設定済みのディストリビューションがあるため、すぐにエラーが発生します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"This metadata can be provided in two ways: either as part of the JReleaser plugin's configuration or using standard\n"
"POM elements. If you choose the former option then the plugin's configuration may look like this:"
msgstr "このメタデータは、JReleaser プラグインの設定の一部として、または標準の POM 要素を使用して 2 つの方法で提供できます。前者のオプションを選択した場合、プラグインの設定は次のようになります。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"If you choose to use standard POM elements then your `pom.xml` must contain these entries at the very least, of course\n"
"adapting values to your own:"
msgstr "標準の POM 要素を使用することを選択した場合、 `pom.xml` には少なくともこれらのエントリーが含まれている必要があります。もちろん、値を独自のものに適合させます。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Yet, we're not still out of the woods as invoking the `./mvnw -Prelease jreleaser:config` once more will still result in\n"
"another error, this time the failure relates to missing artifacts. This is because we did not assemble all required\n"
"artifacts, yet the plugin expects them to be readily available. Here you have the choice to build the required artifacts\n"
"on other nodes then copy them to their expected locations -- a task that can be performed running a GitHub Actions\n"
"workflow on multiple nodes. Or you can instruct JReleaser to ignore some artifacts and select only those that match your\n"
"current platform. Previously we showed how the distribution would look like when created on macOS, assuming we're still on\n"
"that platform we have the correct artifact."
msgstr "それでも、 `./mvnw -Prelease jreleaser:config` をもう一度呼び出すと、別のエラーが発生するため、まだトラブルを脱していません。今回の失敗は、アーティファクトの欠落に関連しています。これは、必要なすべてのアーティファクトをアセンブルしなかったためですが、プラグインはそれらがすぐに利用できることを期待しています。ここでは、他のノードで必要なアーティファクトをビルドし、それらを予想される場所にコピーすることを選択できます。これは、複数のノードで GitHub Actions ワークフローを実行できるタスクです。または、一部のアーティファクトを無視して、現在のプラットフォームに一致するアーティファクトのみを選択するように JReleaser に指示することもできます。macOS で作成したときにディストリビューションがどのように表示されるかを前述しましたが、そのプラットフォーム上にまだ正しいアーティファクトがあると仮定しています。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"We can instruct JReleaser to select only artifacts that match macOS at this point by invoking the `jreleaser:config` goal\n"
"with an additional flag: `./mvnw -Prelease jreleaser:config -Djreleaser.select.current.platform`. This time the command\n"
"will succeed and print out the model. Note that only the path for the macOS artifact has been fully resolved, leaving the\n"
"other 2 paths untouched."
msgstr "追加のフラグ `./mvnw-Prelease jreleaser:config -Djreleaser.select.current.platform` を指定して `jreleaser:config` ゴールを呼び出すことにより、この時点で macOS に一致するアーティファクトのみを選択するように JReleaser に指示できます。今回はコマンドが成功し、モデルが出力されます。macOS アーティファクトのパスのみが完全に解決されており、他の 2 つのパスは変更されていないことに注意してください。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Let's make one more commit here with \"build: Configure distribution artifacts\" as message. We can create a release right\n"
"now, by invoking a different goal: `./mvnw -Prelease jreleaser:release -Djreleaser.select.current.platform`. This will\n"
"create a Git release at the chosen repository, which includes tagging the repository, uploading the changelog, all\n"
"distribution artifacts and their checksum as release assets."
msgstr "ここで、ビルド: 配布アーティファクトの設定をメッセージとしてもう 1 つコミットしてみましょう。別のゴール `./mvnw -Prelease jreleaser:release -Djreleaser.select.current.platform` を呼び出すことで、今すぐリリースを作成できます。これにより、選択したリポジトリーに Git リリースが作成されます。これには、リポジトリーのタグ付け、変更ログのアップロード、すべての配布アーティファクト、およびそれらのチェックサムがリリースアセットとして含まれます。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"But before we do that let's add one additional feature, let's create a Homebrew formula that will make it easy for macOS\n"
"users to consume the binary distribution, shall we?"
msgstr "しかし、その前に、もう 1 つの機能を追加して、macOS ユーザーがバイナリーディストリビューションを簡単に利用できるようにする Homebrew 式を作成しましょう。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Configuring Homebrew as a packager"
msgstr "パッケージャーとしての Homebrew の設定"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"link:https://brew.sh/[Homebrew] is a popular choice among macOS users to install and manage binaries. Homebrew packages\n"
"are at their core a Ruby file (known as a formula) that's executed on the target environment to install or upgrade a\n"
"particular binary. JReleaser can create formulae from binary distributions such as the one we already have configured."
msgstr "link:https://brew.sh/[Homebrew] は、バイナリーをインストールおよび管理するための macOS ユーザーの間で人気のある選択肢です。Homebrew パッケージは、特定のバイナリーをインストールまたはアップグレードするためにターゲット環境で実行される Ruby ファイル (フォーミュラと呼ばれる) をコアにしています。JReleaser は、すでに設定したようなバイナリー分布から数式を作成できます。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "For this to work we simply have to enable Homebrew in the JReleaser plugin configuration like so:"
msgstr "これを機能させるには、次のように JReleaser プラグイン設定で Homebrew を有効にする必要があります。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"One last thing: it's a good practice to publish Homebrew formulae for non-snapshot releases thus change the project's version\n"
"from `1.0.0-SNAPSHOT` to say `1.0.0.Alpha1` or go directly with `1.0.0` as you feel like doing. One last commit, and we're done:\n"
"say `feat: Add Homebrew packager configuration` as commit message. Alright, we're finally ready, let's post a release!"
msgstr "最後に、スナップショットでないリリースの Homebrew 公式を公開するのは良い習慣なので、プロジェクトのバージョンを `1.0.0-SNAPSHOT` から `1.0.0.Alpha1` に変更するか、あるいはそのまま `1.0.0` に変更します。最後のコミットで完了です。コミットメッセージは \"feat: Add Homebrew packager configuration\" です。さて、ついに準備が整いました。リリースをポストしましょう。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Creating a release"
msgstr "リリースの作成"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"It's been quite the whirlwind tour of adding configuration to the `pom.xml` but that's just for getting the project ready for\n"
"its first release; subsequent release require less tampering with configuration. We can create a git release and the\n"
"Homebrew formula with the `jreleaser:full-release` goal but if you still have some doubts on how things may play out then\n"
"you can invoke the goal in dry-run mode that is, let JReleaser perform all local operations as needed without affecting\n"
"remote resources such as Git repositories. This is how it would look like:"
msgstr "これは `pom.xml` に設定を追加する慌ただしいツアーでしたが、これはプロジェクトの最初のリリースを準備するためのもので、それ以降のリリースでは設定に手を加える必要はありません。Git リリースと Homebrew 式を `jreleaser:full-release` というゴールで作成しますが、もしまだどうなるかわからないという場合は、ドライランモードでゴールを起動することができます。つまり、Git リポジトリなどのリモートリソースに影響を与えることなく、必要に応じてすべてのローカル操作を JReleaser に実行させます。以下のようになります。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "JReleaser will perform the following tasks for us:"
msgstr "JReleaserが以下の作業を代行します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Generate a changelog based on all commits from the last tag (if any) to the latest commit."
msgstr "最後のタグ（もしあれば）から最新のコミットまでのすべてのコミットを基にして、チェンジログを生成します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Calculate SHA256 (default) checksums for all input files."
msgstr "すべての入力ファイルに対してSHA256（デフォルト）のチェックサムを計算します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Sign all files with GPG. In our case we did not configure this step thus it's skipped."
msgstr "すべてのファイルにGPGで署名します。ここでは、このステップを設定していないので、スキップされます。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Upload assets to JFrog Artifactory or AWS S3. We also skip this step as it's not configured."
msgstr "JFrog ArtifactoryまたはAWS S3にアセットをアップロードします。このステップは設定しないのでこれも省略します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Create a Git release at the chosen repository, tagging it."
msgstr "選択したリポジトリーに Git リリースを作成し、タグを付けます。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Upload all assets, including checksums."
msgstr "チェックサムを含むすべてのアセットをアップロードします。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Create a Homebrew formula, publishing to pass:[https://github.com/aalmiray/homebrew-tap]."
msgstr "Homebrew 公式を作成し、 pass:[https://github.com/aalmiray/homebrew-tap] に公開します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Of course no remote repository was affected as we can appreciate the `-Djreleaser.dry.run=true` property was in effect. If you're\n"
"so inclined inspect the contents of `target/jreleaser/package/app/brew/Formula/app.rb` which defines the Homebrew formula\n"
"to be published. It should look something like this:"
msgstr "もちろん、 `-Djreleaser.dry.run=true` プロパティが有効だったので、リモートリポジトリは影響を受けませんでした。もし気になる場合は、公開するHomebrewの公式を定義している `target/jreleaser/package/app/brew/Formula/app.rb` の内容を確認してください。以下のようになるはずです："

#: _versions/3.27/guides/jreleaser.adoc
msgid "app.rb"
msgstr "app.rb"

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"When ready, create a release for real this time by simply removing the `-Djreleaser.dry.run` flag from the command line, then\n"
"browse to your repository and look at the freshly created release."
msgstr "準備ができたら、今度はコマンド ラインから `-Djreleaser.dry.run` フラグを削除して実際にリリースを作成し、リポジトリを参照して新しく作成されたリリースを確認します。"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Further reading"
msgstr "さらに詳しく"

#: _versions/3.27/guides/jreleaser.adoc
msgid "link:https://jreleaser.org/guide/latest/index.html[JReleaser] documentation."
msgstr "link:https://jreleaser.org/guide/latest/index.html[JReleaser]のドキュメント"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Reference"
msgstr "参考"

#: _versions/3.27/guides/jreleaser.adoc
msgid "As a reference, these are the full contents of the `pom.xml`:"
msgstr "参考までに、 `pom.xml` の全内容は以下の通りです。"
