msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/jreleaser.adoc
msgid "Packaging And Releasing With JReleaser"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "This guide covers packaging and releasing CLI applications using the link:https://jreleaser.org[JReleaser] tool."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "a GitHub account and a GitHub Personal Access token"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Bootstrapping the project"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"First, we need a project that defines a CLI application. We recommend using the xref:picocli.adoc[PicoCLI] extension.\n"
"This can be done using the following command:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "This command initializes the file structure and the minimum set of required files in the project:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "It will also configure the picocli extension in the `pom.xml`:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Preparing the project for GitHub releases"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"The project must be hosted at a GitHub repository before we continue. This task can be completed by logging into your\n"
"GitHub account, creating a new repository, and adding the newly created sources to said repository. Choose the `main`\n"
"branch as default to take advantage of conventions and thus configure less in your `pom.xml`."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"You also need a GitHub Personal Access token to be able to post a release to the repository you just created. Follow\n"
"the official documentation for\n"
"link:https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token[creating a personal access token].\n"
"Store the newly created token at a safe place for future reference. Next, you have the choice of configuring the token\n"
"as an environment variable named `JRELEASER_GITHUB_TOKEN` so that the tool can read it. Alternatively you may store\n"
"the token at a secure location of your choosing, using a `.yml`, `.toml`, `.json`, or `.properties` file. The default\n"
"location is `~/.jreleaser/config[format]`. For example, using the `.yml` format this file could look like:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "~/.jreleaser/config.yml"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Alright. Add all sources and create a first commit. You can choose your own conventions for commit messages however you\n"
"can get more bang for your buck when using JReleaser if you follow the\n"
"link:https://www.conventionalcommits.org/en/v1.0.0/[Conventional Commits] specification. Make your first commit with the\n"
"following message \"build: Add initial sources\"."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Packaging as a Native Image distribution"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Quarkus already knows how to create a native executable using GraalVM Native Image. The default setup will create a\n"
"single executable file following a naming convention. However, the JReleaser tool expects a distribution that is, a\n"
"conventional file structure packaged as a Zip or Tar file. The file structure must follow this layout:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"This structure lets you add all kinds of supporting files required by the executable, such as configuration files,\n"
"shell completion scripts, man pages, license, readme, and more."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Creating the distribution"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"We can leverage the link:http://maven.apache.org/plugins/maven-assembly-plugin/[maven-assembly-plugin] to create such\n"
"a distribution. We'll also make use of the link:https://github.com/maveniverse/nisse[Nisse Maven plugin] to properly\n"
"identify the platform on which this executable can run, adding said platform to the distribution's filename."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"First, let's add the Nisse Maven plugin to the `pom.xml`. This plugin must be added\n"
"to the `<build>` section of the file:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"In order for this plugin to generate the correct properties, we need to make sure the `nisse.compat.osDetector` system\n"
"property is set. This can be done by adding the following `.mvn/maven.config` file:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Next, native executables on Linux and macOS platforms typically do not have a file extension but Windows executables do,\n"
"we need to take care of this when renaming the generated executable. We can also place the generated distributions into\n"
"their own directory to avoid cluttering the `target` directory. Thus, let's add a couple of properties to the existing\n"
"`<properties>` section in the `pom.xml`:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Now we configure the maven-assembly-plugin to create a Zip and a Tar file containing the executable and any supporting files\n"
"it may need to perform its job. Take special note on the name of the distribution, this is where we make use of the platform\n"
"properties detected by the os-detector-maven-plugin. This plugin is configured in its own profile with the `single` goal bound to\n"
"the `package` phase. It's done this way to avoid rebuilding the distribution every single time the build is invoked, as we\n"
"only needed when we're ready for a release."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Note that two profiles are configured. The `dist` profile configures the assembly plugin, and it's configured in such a way that\n"
"it must be activated explicitly by passing `-Pdist` as a command flag. On the other hand the `dist-windows` profile becomes\n"
"active automatically when the build is run on a Windows platform. This second profile takes care of setting the value for the\n"
"`executable-suffix` property which is required by the assembly descriptor, as shown next:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "src/main/assembly/assembly.xml"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "These are the files created by the assembly plugin when invoking `./mvnw -Pdist package` on macOS:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Feel free to update the assembly descriptor to include additional files such as LICENSE, readme, or anything else needed by\n"
"the consumers of the executable. Make another commit right here with \"build: Configure distribution assembly\"."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "We're ready to go to the next phase: configuring the release."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Adding JReleaser"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"The JReleaser tool can be invoked in many ways: as a CLI tool, as a Docker image, or as a Maven plugin. The last option is very\n"
"convenient given that we are already working with Maven. Let's add yet another profile that contains the release configuration\n"
"as once again we don't require this behavior to be active all the time only when we're ready to post a release:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"There are a few goals we can invoke at this point, we can for example ask JReleaser to print out its current configuration by\n"
"invoking the `./mvnw -Prelease jreleaser:config` command. The tool will output everything that it knows about the project. We\n"
"can also generate the changelog by invoking `./mvnw -Prelease jreleaser:changelog`. A file containing the changelog will be\n"
"placed at `target/jreleaser/release/CHANGELOG.md` which at this point should look like this:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "target/jreleaser/release/CHANGELOG.md"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Not very exciting, but we can change this by instructing JReleaser to format the changelog according to our own conventions. You\n"
"can manually specify patterns to categorize commits however if you chose to follow Conventional Commits we can instruct JReleaser\n"
"to do the same. Add the following to the JReleaser plugin configuration section:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Run the previous Maven command once again and inspect the generated changelog, it should now look like this:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"There are more formatting options you may apply but for now these will suffice. Let's make yet another commit right now, with\n"
"\"build: Configure JReleaser plugin\" as a commit message. If you want you can generate the changelog once again and see this\n"
"latest commit added to the file."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Adding distributions to the release"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"We've reached the point where we can configure the binary distributions. If you run the `./mvnw -Prelease jreleaser:config`\n"
"command you'll notice there's no mention of any distribution files that we configured in previous steps. This is because\n"
"the tool has no implicit knowledge of them, we must tell JReleaser which files we'd like to release. This decouples creation\n"
"of distributions from release assets as you might like to add or remove files at your leisure. For this particular case we'll\n"
"configure Zip files for both macOS and Windows, and a Tar file for Linux. These files must be added to the JReleaser plugin\n"
"configuration section, like so:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"We can appreciate a distribution named `app` (same as the project's artifactId for convenience) with 3 configured artifacts.\n"
"Note the use of Maven properties and Mustache templates to define the paths. You may use explicit values if you want or rely\n"
"on properties to parameterize the configuration. Maven properties resolve eagerly during build validation while Mustache\n"
"templates resolve lazily during the execution of the JReleaser plugin goals. Each artifact must define a `platform`\n"
"property that uniquely identifies them. If we run the `./mvnw -Prelease jreleaser:config` we'll quickly get an error as now\n"
"that there's a configured distribution the plugin expects more metadata to be provided by the project:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"This metadata can be provided in two ways: either as part of the JReleaser plugin's configuration or using standard\n"
"POM elements. If you choose the former option then the plugin's configuration may look like this:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"If you choose to use standard POM elements then your `pom.xml` must contain these entries at the very least, of course\n"
"adapting values to your own:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Yet, we're not still out of the woods as invoking the `./mvnw -Prelease jreleaser:config` once more will still result in\n"
"another error, this time the failure relates to missing artifacts. This is because we did not assemble all required\n"
"artifacts, yet the plugin expects them to be readily available. Here you have the choice to build the required artifacts\n"
"on other nodes then copy them to their expected locations -- a task that can be performed running a GitHub Actions\n"
"workflow on multiple nodes. Or you can instruct JReleaser to ignore some artifacts and select only those that match your\n"
"current platform. Previously we showed how the distribution would look like when created on macOS, assuming we're still on\n"
"that platform we have the correct artifact."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"We can instruct JReleaser to select only artifacts that match macOS at this point by invoking the `jreleaser:config` goal\n"
"with an additional flag: `./mvnw -Prelease jreleaser:config -Djreleaser.select.current.platform`. This time the command\n"
"will succeed and print out the model. Note that only the path for the macOS artifact has been fully resolved, leaving the\n"
"other 2 paths untouched."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Let's make one more commit here with \"build: Configure distribution artifacts\" as message. We can create a release right\n"
"now, by invoking a different goal: `./mvnw -Prelease jreleaser:release -Djreleaser.select.current.platform`. This will\n"
"create a Git release at the chosen repository, which includes tagging the repository, uploading the changelog, all\n"
"distribution artifacts and their checksum as release assets."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"But before we do that let's add one additional feature, let's create a Homebrew formula that will make it easy for macOS\n"
"users to consume the binary distribution, shall we?"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Configuring Homebrew as a packager"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"link:https://brew.sh/[Homebrew] is a popular choice among macOS users to install and manage binaries. Homebrew packages\n"
"are at their core a Ruby file (known as a formula) that's executed on the target environment to install or upgrade a\n"
"particular binary. JReleaser can create formulae from binary distributions such as the one we already have configured."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "For this to work we simply have to enable Homebrew in the JReleaser plugin configuration like so:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"One last thing: it's a good practice to publish Homebrew formulae for non-snapshot releases thus change the project's version\n"
"from `1.0.0-SNAPSHOT` to say `1.0.0.Alpha1` or go directly with `1.0.0` as you feel like doing. One last commit, and we're done:\n"
"say `feat: Add Homebrew packager configuration` as commit message. Alright, we're finally ready, let's post a release!"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Creating a release"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"It's been quite the whirlwind tour of adding configuration to the `pom.xml` but that's just for getting the project ready for\n"
"its first release; subsequent release require less tampering with configuration. We can create a git release and the\n"
"Homebrew formula with the `jreleaser:full-release` goal but if you still have some doubts on how things may play out then\n"
"you can invoke the goal in dry-run mode that is, let JReleaser perform all local operations as needed without affecting\n"
"remote resources such as Git repositories. This is how it would look like:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "JReleaser will perform the following tasks for us:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Generate a changelog based on all commits from the last tag (if any) to the latest commit."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Calculate SHA256 (default) checksums for all input files."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Sign all files with GPG. In our case we did not configure this step thus it's skipped."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Upload assets to JFrog Artifactory or AWS S3. We also skip this step as it's not configured."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Create a Git release at the chosen repository, tagging it."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Upload all assets, including checksums."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Create a Homebrew formula, publishing to pass:[https://github.com/aalmiray/homebrew-tap]."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"Of course no remote repository was affected as we can appreciate the `-Djreleaser.dry.run=true` property was in effect. If you're\n"
"so inclined inspect the contents of `target/jreleaser/package/app/brew/Formula/app.rb` which defines the Homebrew formula\n"
"to be published. It should look something like this:"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "app.rb"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid ""
"When ready, create a release for real this time by simply removing the `-Djreleaser.dry.run` flag from the command line, then\n"
"browse to your repository and look at the freshly created release."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Further reading"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "link:https://jreleaser.org/guide/latest/index.html[JReleaser] documentation."
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "Reference"
msgstr ""

#: _versions/3.27/guides/jreleaser.adoc
msgid "As a reference, these are the full contents of the `pom.xml`:"
msgstr ""
