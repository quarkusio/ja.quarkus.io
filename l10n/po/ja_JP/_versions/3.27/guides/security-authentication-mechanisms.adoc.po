msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authentication mechanisms in Quarkus"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The Quarkus Security framework supports multiple authentication mechanisms, which you can use to secure your applications.\n"
"You can also combine authentication mechanisms."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Before you choose an authentication mechanism for securing your Quarkus applications, review the information provided."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Overview of supported authentication mechanisms"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Some supported authentication mechanisms are built into Quarkus, while others require you to add an extension.\n"
"All of these mechanisms are detailed in the following sections:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<built-in-authentication-mechanisms>>"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<other-supported-authentication-mechanisms>>"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The following table maps specific authentication requirements to a supported mechanism that you can use in Quarkus:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authentication requirements and mechanisms"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authentication requirement"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authentication mechanism"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Username and password"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-basic-authentication.adoc[Basic], <<form-auth>>"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Bearer access token"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication], xref:security-jwt.adoc[JWT]\n"
", xref:security-oauth2.adoc[OAuth2]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Single sign-on (SSO)"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC Code Flow], <<form-auth>>"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Client certificate"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<mutual-tls>>"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "WebAuthn"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-webauthn.adoc[WebAuthn]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Kerberos ticket"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "link:https://docs.quarkiverse.io/quarkus-kerberos/dev/index.html[Kerberos]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information, see the following <<table>> table."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Built-in authentication mechanisms"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Quarkus Security provides the following built-in authentication support:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-basic-authentication.adoc[Basic authentication]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<form-auth>>"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Basic authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"You can secure your Quarkus application endpoints with the built-in HTTP Basic authentication mechanism.\n"
"For more information, see the following documentation:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-basic-authentication-howto.adoc[Enable Basic authentication]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-jpa.adoc[Quarkus Security with Jakarta Persistence]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-getting-started-tutorial.adoc[Getting started with Security by using Basic authentication and Jakarta Persistence]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Form-based authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Quarkus provides form-based authentication that works similarly to traditional Servlet form-based authentication.\n"
"Unlike traditional form authentication, the authenticated user is not stored in an HTTP session because Quarkus does not support clustered HTTP sessions.\n"
"Instead, the authentication information is stored in an encrypted cookie, which can be read by all cluster members who share the same encryption key."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To apply encryption, add the `quarkus.http.auth.session.encryption-key` property, and ensure the value you set is at least 16 characters long.\n"
"The encryption key is hashed by using SHA-256.\n"
"The resulting digest is used as a key for AES-256 encryption of the cookie value.\n"
"The cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their clocks synchronized.\n"
"At one-minute intervals, a new cookie gets generated with an updated expiry time if the session is in use."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "To get started with form authentication, you should have similar settings as described in xref:security-basic-authentication-howto.adoc[Enable Basic authentication] and property `quarkus.http.auth.form.enabled` must be set to `true`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Simple `application.properties` with form-base authentication can look similar to this:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Configuring user names, secrets, and roles in the application.properties file is appropriate only for testing scenarios. For securing a production application, it is crucial to use a database or LDAP to store this information. For more information you can take a look at xref:security-jpa.adoc[Quarkus Security with Jakarta Persistence] or other mentioned in xref:security-basic-authentication-howto.adoc[Enable Basic authentication]."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "and application login page will contain HTML form similar to this:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "With single-page applications (SPA), you typically want to avoid redirects by removing default page paths, as shown in the following example:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Now that you have disabled redirects for the SPA, you must log in and log out programmatically from your client.\n"
"Below are examples of JavaScript methods for logging into the `j_security_check` endpoint and logging out of the application by destroying the cookie."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To log out of the SPA from the client, the cookie must be set to `quarkus.http.auth.form.http-only-cookie=false` so you can destroy\n"
"the cookie and possibly redirect back to your main page."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To log out of the SPA from the server, the cookie can be set to `quarkus.http.auth.form.http-only-cookie=true` and use this example\n"
"code to destroy the cookie."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Perform the logout by removing the session cookie."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Form-based authentication configuration reference"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The following properties can be used to configure form-based authentication:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Set up Form-based authentication programmatically"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "In addition to the configuration properties listed in the <<form-configuration-properties>> section, Quarkus supports a programmatic set up during the runtime as in the example below:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Observe the `io.quarkus.vertx.http.security.HttpSecurity` CDI event and configure Form authentication mechanism programmatically."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Mutual TLS authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To use this authentication method, you must first enable SSL/TLS for your application.\n"
"For more information, see the xref:http-reference.adoc#ssl[Supporting secure connections with SSL/TLS] section of the Quarkus \"HTTP reference\" guide."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "After your application accepts secure connections, the next step is to configure the `quarkus.http.ssl.certificate.trust-store-file` property with the name of the file that holds all the certificates your application trusts. This file also includes information about how your application requests certificates when a client, such as a browser or another service, tries to access one of its protected resources."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Because JKS is no longer the default keystore and truststore format in Quarkus, the framework makes an educated guess based on the file extension:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`.pem`, `.crt`, and `.key` are read as PEM certificates and keys."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`.jks`, `.keystore`, and `.truststore` are read as JKS keystores and truststores."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`.p12`, `.pkcs12`, and `.pfx` are read as PKCS12 keystores and truststores."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "If your file does not use one of these extensions, you must set the format by using the following properties:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "JKS is becoming less commonly used. Since Java 9, the default keystore format in Java is PKCS12. The most significant difference between JKS and PKCS12 is that JKS is a format specific to Java. In contrast, PKCS12 is a standardized, language-neutral way of storing encrypted private keys and certificates."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Here is an example configuration for enabling mTLS:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The keystore where the server's private key is located."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The truststore from which the trusted certificates are loaded."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Setting `quarkus.http.ssl.client-auth` to `required` makes the server demand client certificates. You can set it to `REQUEST` if the server should accept requests without a certificate. This setting is useful when supporting multiple authentication methods besides mTLS."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Defines a policy where only authenticated users can access resources from your application."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Disables the plain HTTP protocol, requiring all requests to use HTTPS. When you set `quarkus.http.ssl.client-auth` to `required`, `quarkus.http.insecure-requests` is automatically disabled."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "When an incoming request matches a valid certificate in the truststore, your application can obtain the subject by injecting a `SecurityIdentity` as follows:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Obtaining the subject"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "You can also get the certificate by using the code outlined in the following example:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Obtaining the certificate"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Mapping certificate attributes to roles"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The information from the client certificate can be used to add roles to Quarkus `SecurityIdentity`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"You can add new roles to `SecurityIdentity` after checking a client certificate's common name (CN) attribute.\n"
"The easiest way to add new roles is to use a certificate attribute to role mapping feature."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For example, you can update the properties shown in the section which introduces <<mutual-tls>> as follows:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The `cert-role-mappings.properties` classpath resource contains a map of certificate's CN values to roles in the form `CN=role` or `CN=role1,role2`, etc. Let us assume it contains three entries: `alice=user,admin`, `bob=user` and `jdoe=tester`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Use HTTP security policy to require that `SecurityIdentity` must have either `user` or `admin` roles for the requests to be authorized."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Given the preceding configuration, the request is authorized if the client certificate's CN attribute is equal to `alice` or `bob` and forbidden if it is equal to `jdoe`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Using certificate attributes to augment SecurityIdentity"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"You can always register `SecurityIdentityAugmentor` if the automatic <<map-certificate-attributes-to-roles>> option does not suit.\n"
"Custom `SecurityIdentityAugmentor` can check the values of different client certificate attributes and augment the `SecurityIdentity` accordingly."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information about customizing `SecurityIdentity`, see the xref:security-customization.adoc#security-identity-customization[Security identity customization] section in the Quarkus \"Security tips and tricks\" guide."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Set up the mutual TLS client authentication programmatically"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "In the <<mutual-tls>> section we configured the mutual TLS client authentication in the `application.properties` file like this:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"quarkus.tls.tls-config-1.key-store.p12.path=server-keystore.p12\n"
"quarkus.tls.tls-config-1.key-store.p12.password=the_key_store_secret\n"
"quarkus.tls.tls-config-1.trust-store.p12.path=server-truststore.p12\n"
"quarkus.tls.tls-config-1.trust-store.p12.password=the_trust_store_secret\n"
"quarkus.http.ssl.client-auth=required   <1>\n"
"quarkus.http.tls-configuration-name=tls-config-1    <2>"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Enable and require the mutual TLS client authentication."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Use the `tls-config-1` TLS configuration for the HTTP server TLS communication."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The `io.quarkus.vertx.http.security.HttpSecurity` CDI event enable you to configuration the mutual TLS authentication programmatically like in the example below:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Example TLS configuration"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Example mutual TLS client authentication configuration"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Enable and require the mutual TLS client authentication and use the `tls-config-1` TLS configuration for the HTTP server TLS communication.\n"
"The `tls-config-1` TLS configuration is registered in the TLS registry."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"It is also possible to map certificate attributes to roles.\n"
"Let's consider the example explained in the <<map-certificate-attributes-to-roles>> section:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The configuration with the programmatic set up would look like this:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "This API also enables you to use certificate to augment `SecurityIdentity`:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"In the <<use-cert-attrs-to-augment-identity>> section we have mentioned that the `SecurityIdentityAugmentor` can be used to map the client certificate attribute values to the `SecurityIdentity` roles.\n"
"The `MTLS` API allows you to define such roles mapping as well."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "If Quarkus starts the HTTP server in DEV mode after a failed start, Quarkus may need to fallback to the configuration provided in the `application.properties` file. This is a known limitation."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Other supported authentication mechanisms"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Quarkus Security also supports the following authentication mechanisms through extensions:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<webauthn-authentication>>"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<openid-connect-authentication>>"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<smallrye-jwt-authentication>>"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<oauth2-authentication>>"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "WebAuthn authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"https://webauthn.guide/[WebAuthn] is an authentication mechanism that replaces passwords.\n"
"When you write a service for registering new users, or logging them in, instead of asking for a password, you can use WebAuthn, which replaces the password.\n"
"For more information, see the xref:security-webauthn.adoc[Secure a Quarkus application by using the WebAuthn authentication mechanism] guide."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OpenID Connect authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"OpenID Connect (OIDC) is an identity layer that works on top of the OAuth 2.0 protocol.\n"
"OIDC enables client applications to verify the identity of a user based on the authentication performed by the OIDC provider and retrieve basic information about that user."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer token and Authorization Code Flow authentication mechanisms.\n"
"The Bearer token authentication mechanism extracts the token from the HTTP Authorization header."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The Authorization Code Flow mechanism redirects the user to an OIDC provider to authenticate the user's identity.\n"
"After the user is redirected back to Quarkus, the mechanism completes the authentication process by exchanging the provided code that was granted for the ID, access, and refresh tokens."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"You can verify ID and access JSON Web Token (JWT) tokens by using the refreshable JSON Web Key (JWK) set or introspect them remotely.\n"
"However, opaque, also known as binary tokens, can only be introspected remotely."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Using the Quarkus OIDC extension, both the Bearer token and Authorization Code Flow authentication mechanisms use <<smallrye-jwt-authentication>> to represent JWT tokens as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Additional Quarkus resources for OIDC authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information about OIDC authentication and authorization methods that you can use to secure your Quarkus applications, see the following resources:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OIDC topic"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Quarkus information resource"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Bearer token authentication mechanism"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authorization Code Flow authentication mechanism"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OpenID Connect (OIDC) Authorization Code Flow mechanism]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OIDC and SAML Identity broker"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc#oidc-saml-broker[OpenID Connect (OIDC) Authorization Code Flow and SAML Identity broker]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Multiple tenants that can support the Bearer token authentication or Authorization Code Flow mechanisms"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect (OIDC) multi-tenancy]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Securing Quarkus with commonly used OpenID Connect providers"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Using Keycloak to centralize authorization"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-keycloak-authorization.adoc[Using OpenID Connect (OIDC) and Keycloak to centralize authorization]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Configuring Keycloak programmatically"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-keycloak-admin-client.adoc[Using the Keycloak admin client]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To enable the Quarkus OIDC extension at runtime, set `quarkus.oidc.tenant-enabled=false` at build time.\n"
"Then, re-enable it at runtime by using a system property."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information about managing the individual tenant configurations in multitenant OIDC deployments, see the xref:security-openid-connect-multitenancy.adoc#disable-tenant[Disabling tenant configurations] section in the \"Using OpenID Connect (OIDC) multi-tenancy\" guide."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OpenID Connect client and filters"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The `quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers that support the following token grants:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`client-credentials`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`password`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`refresh_token`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The `quarkus-resteasy-client-oidc-filter` extension requires the `quarkus-oidc-client` extension.\n"
"It provides JAX-RS RESTful Web Services `OidcClientRequestFilter`, which sets the access token acquired by `OidcClient` as the `Bearer` scheme value of the HTTP `Authorization` header.\n"
"This filter can be registered with MicroProfile REST client implementations injected into the current Quarkus endpoint, but it is not related to the authentication requirements of this service endpoint.\n"
"For example, it can be a public endpoint or be protected with mTLS."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "In this scenario, you do not need to protect your Quarkus endpoint by using the Quarkus OpenID Connect adapter."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The `quarkus-resteasy-client-oidc-token-propagation` extension requires the `quarkus-oidc` extension.\n"
"It provides Jakarta REST `TokenCredentialRequestFilter`, which sets the OpenID Connect Bearer token or Authorization Code Flow access token as the `Bearer` scheme value of the HTTP `Authorization` header.\n"
"This filter can be registered with MicroProfile REST client implementations injected into the current Quarkus endpoint, which must be protected by using the Quarkus OIDC adapter.\n"
"This filter can propagate the access token to the downstream services."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information, see the xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart] and xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference] guides."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "SmallRye JWT authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The `quarkus-smallrye-jwt` extension provides a MicroProfile JSON Web Token (JWT) 2.1 implementation and multiple options to verify signed and encrypted `JWT` tokens.\n"
"It represents them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-smallrye-jwt` is an alternative to the `quarkus-oidc` Bearer token authentication mechanism and verifies only `JWT` tokens by using either Privacy Enhanced Mail (PEM) keys or the refreshable `JWK` key set.\n"
"`quarkus-smallrye-jwt` also provides the JWT generation API, which you can use to easily create `signed`, `inner-signed`, and `encrypted` `JWT` tokens."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information, see the xref:security-jwt.adoc[Using JWT RBAC] guide."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OAuth2 authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-elytron-security-oauth2` provides an alternative to the Quarkus `quarkus-oidc` Bearer token authentication mechanism extension.\n"
"`quarkus-elytron-security-oauth2` is based on `Elytron` and is primarily intended for introspecting opaque tokens remotely."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information, see the Quarkus xref:security-oauth2.adoc[Using OAuth2] guide."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Use the following information to select the appropriate token authentication mechanism to secure your Quarkus applications."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "List of authentication mechanism use cases"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-oidc` requires an OpenID Connect provider such as Keycloak, which can verify the bearer tokens or authenticate the end users with the Authorization Code flow.\n"
"In both cases, `quarkus-oidc` requires a connection to the specified OpenID Connect provider."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"If the user authentication requires Authorization Code flow, or you need to support multiple tenants, use `quarkus-oidc`.\n"
"`quarkus-oidc` can also request user information by using both Authorization Code Flow and Bearer access tokens."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "If your bearer tokens must be verified, use `quarkus-oidc`, `quarkus-elytron-security-oauth2`, or `quarkus-smallrye-jwt`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"If your bearer tokens are in a JSON web token (JWT) format, you can use any extensions in the preceding list.\n"
"Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the `JsonWebKey` (JWK) set when the OpenID Connect provider rotates the keys.\n"
"Therefore, if remote token introspection must be avoided or is unsupported by the providers, use `quarkus-oidc` or `quarkus-smallrye-jwt` to verify JWT tokens."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To introspect the JWT tokens remotely, you can use `quarkus-oidc`\n"
"or `quarkus-elytron-security-oauth2`\n"
"for verifying the opaque or binary tokens by using remote introspection.\n"
"`quarkus-smallrye-jwt` does not support the remote introspection of both opaque or JWT tokens but instead relies on the locally available keys that are usually retrieved from the OpenID Connect provider."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-oidc` and `quarkus-smallrye-jwt` support the JWT and opaque token injection into the endpoint code.\n"
"Injected JWT tokens provide more information about the user.\n"
"All extensions can have the tokens injected as `Principal`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`.\n"
"`quarkus-oidc` uses only the JWK-formatted keys that are part of a JWK set, whereas `quarkus-smallrye-jwt` supports PEM keys."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-smallrye-jwt` handles locally signed, inner-signed-and-encrypted, and encrypted tokens.\n"
"In contrast, although `quarkus-oidc` and `quarkus-elytron-security-oauth2` can also verify such tokens, they treat them as opaque tokens and verify them through remote introspection."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "If you need a lightweight library for the remote introspection of opaque or JWT tokens, use `quarkus-elytron-security-oauth2`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Architectural considerations drive your decision to use opaque or JSON web token (JWT) token format.\n"
"Opaque tokens tend to be much shorter than JWT tokens but need most of the token-associated state to be maintained in the provider database.\n"
"Opaque tokens are effectively database pointers."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"JWT tokens are significantly longer than opaque tokens.\n"
"Nonetheless, the providers effectively delegate most of the token-associated state to the client by storing it as the token claims and either signing or encrypting them."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Token authentication mechanism comparison"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Feature required"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`quarkus-oidc`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`quarkus-smallrye-jwt`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`quarkus-elytron-security-oauth2`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Bearer JWT verification"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Local verification or introspection"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Local verification"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Introspection"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Bearer opaque token verification"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "No"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Refreshing `JsonWebKey` set to verify JWT tokens"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Yes"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Represent token as `Principal`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Inject JWT as MP JWT"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authorization code flow"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Multi-tenancy"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "User information support"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "PEM key format support"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "SecretKey support"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "In JSON Web Key (JWK) format"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Inner-signed and encrypted or encrypted tokens"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Custom token verification"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "With injected JWT parser"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "JWT as a cookie support"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Combining authentication mechanisms"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"If different sources provide the user credentials, you can combine authentication mechanisms.\n"
"For example, you can combine the built-in Basic and the Quarkus `quarkus-oidc` Bearer token authentication mechanisms."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The authentication process completes as soon as the first `SecurityIdentity` is produced by one of the authentication mechanisms."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Inclusive Authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"In some cases it can be required that all registered authentication mechanisms create their `SecurityIdentity`.\n"
"It can be required when the credentials such as tokens have to be passed over <<mutual-tls>>,\n"
"for example, when users are authenticating via `Virtual Private Network`, or when the current token has to be bound\n"
"to the client certificate for the token verification to succeed, guaranteeing that the token was issued exactly\n"
"to the same client which is currently passing this token to Quarkus alongside its client certificate."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "In Quarkus such authentication is called `inclusive` and you can enable it like this:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"If the authentication is inclusive then `SecurityIdentity` created by the first authentication mechanism can be\n"
"injected into the application code.\n"
"For example, if both <<mutual-tls>> and basic authentication mechanism authentications are required,\n"
"the <<mutual-tls>> mechanism will create `SecurityIdentity` first."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The <<mutual-tls>> mechanism has the highest priority when inclusive authentication is enabled, to ensure\n"
"that an injected `SecurityIdentity` always represents <<mutual-tls>> and can be used to get access to `SecurityIdentity`\n"
"identities provided by other authentication mechanisms."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Additional `SecurityIdentity` instances can be accessed as a `quarkus.security.identities` attribute on the first\n"
"`SecurityIdentity`, however, accessing these extra identities directly may not be necessary, for example,\n"
"when both <<mutual-tls>> and xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer authentication] mechanisms\n"
"have been combined and done their authentications, the authenticated bearer token can be injected as a token\n"
"credential alongside `SecurityIdentity` created by <<mutual-tls>>. This is exemplified below:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "This is the `SecurityIdentity` created by applicable authentication mechanism with the highest priority."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Other applicable authentication mechanisms performed authentication and are available on the `SecurityIdentity`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "You cannot combine the Quarkus `quarkus-oidc` Bearer token and `smallrye-jwt` authentication mechanisms because both mechanisms attempt to verify the token extracted from the HTTP Bearer token authentication scheme."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Path-based authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Use HTTP Security Policy to enable path-based authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The following configuration example demonstrates how you can enforce a single selectable authentication mechanism for a given request path:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Ensure that the value of the `auth-mechanism` property matches the authentication scheme supported by `HttpAuthenticationMechanism`, for example, `basic`, `bearer`, or `form`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Use annotations to enable path-based authentication for Jakarta REST endpoints"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"It is possible to use annotations to select an authentication mechanism specific to each Jakarta REST endpoint.\n"
"This feature is only enabled when <<proactive-auth>> is disabled due to the fact that the annotations can only be used\n"
"to select authentication mechanisms after a REST endpoint has been matched.\n"
"Here is how you can select an authentication mechanism per a REST endpoint basis:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The REST endpoint `/hello/basic` can only ever be accessed by using the <<basic-auth>>."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "This endpoint requires authentication, because when no standard security annotation accompanies the `@BasicAuthentication` annotation, the `@Authenticated` annotation is added by default."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The `@AuthorizationCodeFlow` annotation can be combined with any other standard security annotation like `@RolesAllowed`, `@PermissionsAllowed` and others."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The REST endpoint `/hello/code-flow` can only ever be accessed by using the xref:security-oidc-code-flow-authentication.adoc[OIDC authorization code flow mechanism]."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Supported authentication mechanism annotations"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authentication mechanism^"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Annotation"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Basic authentication mechanism"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.vertx.http.runtime.security.annotation.BasicAuthentication`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Form-based authentication mechanism"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.vertx.http.runtime.security.annotation.FormAuthentication`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Mutual TLS authentication mechanism"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.vertx.http.runtime.security.annotation.MTLSAuthentication`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "WebAuthn authentication mechanism"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.security.webauthn.WebAuthn`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.oidc.BearerTokenAuthentication`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OIDC authorization code flow mechanism"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.oidc.AuthorizationCodeFlow`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "SmallRye JWT authentication mechanism"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.smallrye.jwt.runtime.auth.BearerTokenAuthentication`"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Quarkus automatically secures endpoints annotated with the authentication mechanism annotation. When no standard security annotation is present on the REST endpoint and resource, the `io.quarkus.security.Authenticated` annotation is added for you."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"It is also possible to use the `io.quarkus.vertx.http.runtime.security.annotation.HttpAuthenticationMechanism` annotation to select any authentication mechanism based on its scheme.\n"
"Annotation-based analogy to the `quarkus.http.auth.permission.basic.auth-mechanism=custom` configuration property is the `@HttpAuthenticationMechanism(\"custom\")` annotation."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For consistency with various Jakarta EE specifications, it is recommended to always repeat annotations instead of relying on annotation inheritance."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Use inclusive authentication to enable path-based authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"By default, Quarkus only supports <<path-based-authentication>> for one authentication mechanism per path.\n"
"If more than one authentication mechanism must be used for the path-based authentication, you can write a custom `HttpAuthenticationMechanism` as documented in the xref:security-customization.adoc#dealing-with-more-than-one-http-auth-mechanisms[Dealing with more than one HttpAuthenticationMechanism] section of the Security Tips and Tricks guide.\n"
"Another option is to enable <<inclusive-authentication>> in the lax mode and write a custom `HttpSecurityPolicy` or `PermissionChecker` that verifies that all registered HTTP authentication mechanisms created their mechanism-specific `SecurityIdentity`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Enable inclusive authentication in the lax mode"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"By default, inclusive authentication requires that all registered HTTP authentication mechanisms must create the `SecurityIdentity`.\n"
"However, in the lax mode, the authentication succeeds if at least one registered `HttpAuthenticationMechanism` created the `SecurityIdentity`."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Let's assume that we have 3 registered mechanisms, mTLS, Basic and OIDC and you only require Basic and mTLS authentications to succeed to permit access to the `hello` method.\n"
"In this case, enabling an inclusive authentication in a lax mode allows to check which mechanisms produced the identity as shown in the example below:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Example of the HTTP Authentication mechanisms check"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Permit access to the endpoint only if it is confirmed that both `mTLS` and `Basic` authentication mechanisms have authenticated the current request."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "How to combine it with HTTP Security Policy"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The easiest way to define roles that are allowed to access individual resources is the `@RolesAllowed` annotation.\n"
"Nevertheless, it is also possible to use the HTTP Security Policy like in the example below:"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Delay this policy's permission check after the endpoint-specific authentication mechanism has been selected."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Make the `roles1` permission match only the endpoint annotated with the `@AuthorizationCodeFlow` annotation.\n"
"Unannotated endpoints must avoid the delay caused by the `applies-to=JAXRS` option."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Proactive authentication"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Proactive authentication is enabled in Quarkus by default.\n"
"This means that if an incoming request has a credential, the request will always be authenticated, even if the target page does not require authentication.\n"
"For more information, see the Quarkus xref:security-proactive-authentication.adoc[Proactive authentication] guide."
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-architecture.adoc[Quarkus Security architecture]"
msgstr ""

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-authorize-web-endpoints-reference.adoc[Authorization of web endpoints]"
msgstr ""
