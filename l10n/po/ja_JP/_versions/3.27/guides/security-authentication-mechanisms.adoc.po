msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authentication mechanisms in Quarkus"
msgstr "Quarkusの認証メカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The Quarkus Security framework supports multiple authentication mechanisms, which you can use to secure your applications.\n"
"You can also combine authentication mechanisms."
msgstr "Quarkus Securityフレームワークは、複数の認証メカニズムをサポートしており、これらを使用してアプリケーションを保護することができます。また、認証メカニズムを組み合わせることも可能です。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Before you choose an authentication mechanism for securing your Quarkus applications, review the information provided."
msgstr "Quarkusアプリケーションを保護するための認証メカニズムを選択する前に、提供される情報を確認してください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Overview of supported authentication mechanisms"
msgstr "サポートされる認証メカニズムの概要"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Some supported authentication mechanisms are built into Quarkus, while others require you to add an extension.\n"
"All of these mechanisms are detailed in the following sections:"
msgstr ""
"サポートされている認証メカニズムは、Quarkusに組み込まれているものもあれば、エクステンションを追加する必要があるものもあります。\n"
"これらのメカニズムについては、次のセクションで詳しく説明します："

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<built-in-authentication-mechanisms>>"
msgstr "<<built-in-authentication-mechanisms>>"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<other-supported-authentication-mechanisms>>"
msgstr "<<other-supported-authentication-mechanisms>>"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The following table maps specific authentication requirements to a supported mechanism that you can use in Quarkus:"
msgstr "次の表は、特定の認証要件と、Quarkusで使用できるサポートされる認証メカニズムを対応付けたものです:"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authentication requirements and mechanisms"
msgstr "認証要件とメカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authentication requirement"
msgstr "認証要件"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authentication mechanism"
msgstr "認証メカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Username and password"
msgstr "ユーザー名とパスワード"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-basic-authentication.adoc[Basic], <<form-auth>>"
msgstr "xref:security-basic-authentication.adoc[Basic], <<form-auth>>"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Bearer access token"
msgstr "ベアラーアクセストークン"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication], xref:security-jwt.adoc[JWT]\n"
", xref:security-oauth2.adoc[OAuth2]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDC ベアラートークン認証]、xref:security-jwt.adoc[JWT]、xref:security-oauth2.adoc[OAuth2]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Single sign-on (SSO)"
msgstr "シングルサインオン（SSO）"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC Code Flow], <<form-auth>>"
msgstr "xref:security-oidc-code-flow-authentication.adoc[OIDC Code Flow], <<form-auth>>"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Client certificate"
msgstr "クライアント証明書"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<mutual-tls>>"
msgstr "<<mutual-tls>>"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "WebAuthn"
msgstr "WebAuthn"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-webauthn.adoc[WebAuthn]"
msgstr "xref:security-webauthn.adoc[WebAuthn]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Kerberos ticket"
msgstr "ケルベロスチケット"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "link:https://docs.quarkiverse.io/quarkus-kerberos/dev/index.html[Kerberos]"
msgstr "link:https://docs.quarkiverse.io/quarkus-kerberos/dev/index.html[Kerberos]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information, see the following <<table>> table."
msgstr "詳細は、以下の <<table>> の表をご覧ください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Built-in authentication mechanisms"
msgstr "組込認証メカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Quarkus Security provides the following built-in authentication support:"
msgstr "Quarkus Securityには、次のような組込の認証サポートがあります:"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-basic-authentication.adoc[Basic authentication]"
msgstr "xref:security-basic-authentication.adoc[ベーシック認証]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<form-auth>>"
msgstr "<<form-auth>>"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Basic authentication"
msgstr "Basic認証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"You can secure your Quarkus application endpoints with the built-in HTTP Basic authentication mechanism.\n"
"For more information, see the following documentation:"
msgstr "内蔵のHTTP Basic認証メカニズムを使用して、Quarkusアプリケーションエンドポイントを保護することができます。詳細については、次のドキュメントを参照してください:"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-basic-authentication-howto.adoc[Enable Basic authentication]"
msgstr "xref:security-basic-authentication-howto.adoc[Basic認証の有効化]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-jpa.adoc[Quarkus Security with Jakarta Persistence]"
msgstr "xref:security-jpa.adoc[Quarkus SecurityとJakarta Persistence]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-getting-started-tutorial.adoc[Getting started with Security by using Basic authentication and Jakarta Persistence]"
msgstr "xref:security-getting-started-tutorial.adoc[Basic認証とJakarta Persistenceを使ったセキュリティ入門]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr "xref:security-identity-providers.adoc[アイデンティティ・プロバイダー]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Form-based authentication"
msgstr "フォームベース認証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Quarkus provides form-based authentication that works similarly to traditional Servlet form-based authentication.\n"
"Unlike traditional form authentication, the authenticated user is not stored in an HTTP session because Quarkus does not support clustered HTTP sessions.\n"
"Instead, the authentication information is stored in an encrypted cookie, which can be read by all cluster members who share the same encryption key."
msgstr ""
"Quarkus は、従来の Servlet フォームベース認証と同様に動作するフォームベース認証を提供します。\n"
"従来のフォーム認証とは異なり、Quarkus はクラスター化された HTTP セッションをサポートしていないため、認証されたユーザーは HTTP セッションに保存されません。\n"
"代わりに、認証情報は暗号化された Cookie に保存され、同じ暗号化キーを共有するすべてのクラスターメンバーが読み取ることができます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To apply encryption, add the `quarkus.http.auth.session.encryption-key` property, and ensure the value you set is at least 16 characters long.\n"
"The encryption key is hashed by using SHA-256.\n"
"The resulting digest is used as a key for AES-256 encryption of the cookie value.\n"
"The cookie contains an expiry time as part of the encrypted value, so all nodes in the cluster must have their clocks synchronized.\n"
"At one-minute intervals, a new cookie gets generated with an updated expiry time if the session is in use."
msgstr ""
"暗号化を適用するには、 `quarkus.http.auth.session.encryption-key` プロパティを追加し、設定する値が16文字以上であるようにして下さい。\n"
"暗号化キーはSHA-256を使用してハッシュ化されます。\n"
"結果のダイジェストは、クッキー値のAES-256暗号化のキーとして使用されます。\n"
"Cookieには暗号化された値の一部として有効期限が含まれているため、クラスタ内のすべてのノードのクロックが同期されている必要があります。\n"
"セッションが使用中であれば、1分間隔で有効期限が更新された新しいクッキーが生成されます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "To get started with form authentication, you should have similar settings as described in xref:security-basic-authentication-howto.adoc[Enable Basic authentication] and property `quarkus.http.auth.form.enabled` must be set to `true`."
msgstr "フォーム認証を開始するには、xref:security-basic-authentication-howto.adoc[Basic 認証を有効にする] で説明されているのと同様の設定が必要であり、 `quarkus.http.auth.form.enabled` プロパティーを `true` に設定する必要があります。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Simple `application.properties` with form-base authentication can look similar to this:"
msgstr "フォームベース認証を使用した単純な `application.properties` は次のようになります。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Configuring user names, secrets, and roles in the application.properties file is appropriate only for testing scenarios. For securing a production application, it is crucial to use a database or LDAP to store this information. For more information you can take a look at xref:security-jpa.adoc[Quarkus Security with Jakarta Persistence] or other mentioned in xref:security-basic-authentication-howto.adoc[Enable Basic authentication]."
msgstr "application.properties ファイルでユーザー名、シークレット、およびロールを設定することは、テストシナリオにのみ適しています。実稼働アプリケーションを保護するには、データベースまたは LDAP を使用してこの情報を格納することが重要です。詳細は、xref:security-jpa.adoc[Jakarta Persistence を備えた Quarkus Security] または xref:security-basic-authentication-howto.adoc[Basic 認証を有効にする] に記載されているその他の情報を参照してください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "and application login page will contain HTML form similar to this:"
msgstr "アプリケーションのログインページには、以下と同様の HTML フォームが含まれます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "With single-page applications (SPA), you typically want to avoid redirects by removing default page paths, as shown in the following example:"
msgstr "シングル・ページ・アプリケーション（SPA）では、通常、次の例に示すように、デフォルトのページ・パスを削除することでリダイレクトを回避したいでしょう："

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Now that you have disabled redirects for the SPA, you must log in and log out programmatically from your client.\n"
"Below are examples of JavaScript methods for logging into the `j_security_check` endpoint and logging out of the application by destroying the cookie."
msgstr ""
"SPA のリダイレクトを無効にしたので、クライアントからプログラムによってログインおよびログアウトする必要があります。\n"
"以下は、 `j_security_check` エンドポイントにログインし、Cookie を破棄してアプリケーションからログアウトするための JavaScript メソッドの例です。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To log out of the SPA from the client, the cookie must be set to `quarkus.http.auth.form.http-only-cookie=false` so you can destroy\n"
"the cookie and possibly redirect back to your main page."
msgstr ""
"SPA でクライアント側から ログアウトするには、Cookie を `quarkus.http.auth.form.http-only-cookie=false` に設定して、Cookie を破棄し、\n"
"t可能であればメインページにリダイレクトできるようにする必要があります。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To log out of the SPA from the server, the cookie can be set to `quarkus.http.auth.form.http-only-cookie=true` and use this example\n"
"code to destroy the cookie."
msgstr ""
"SPA でサーバー側から ログアウトするには、Cookie を `quarkus.http.auth.form.http-only-cookie=true` に設定し、このサンプルコードを使用して\n"
"Cookie を破棄します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Perform the logout by removing the session cookie."
msgstr "セッション Cookie を削除してログアウトを実行します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "Form-based authentication configuration reference"
msgstr "フォームベース認証設定リファレンス"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The following properties can be used to configure form-based authentication:"
msgstr "フォームベース認証の設定には、以下のプロパティを使用できます:"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "Set up Form-based authentication programmatically"
msgstr "プログラムによるフォームベース認証の設定"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "In addition to the configuration properties listed in the <<form-configuration-properties>> section, Quarkus supports a programmatic set up during the runtime as in the example below:"
msgstr "<<form-configuration-properties>> セクションに記載されている設定プロパティに加え、Quarkusでは、以下の例のように、ランタイム中のプログラムによる設定もサポートしています："

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "Observe the `io.quarkus.vertx.http.security.HttpSecurity` CDI event and configure Form authentication mechanism programmatically."
msgstr "`io.quarkus.vertx.http.security.HttpSecurity` CDI イベントを監視し、Form 認証メカニズムをプログラムで設定します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Mutual TLS authentication"
msgstr "相互TLS認証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates."
msgstr "Quarkusには相互TLS（mTLS）認証があり、X.509証明書に基づいてユーザーを認証することができます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To use this authentication method, you must first enable SSL/TLS for your application.\n"
"For more information, see the xref:http-reference.adoc#ssl[Supporting secure connections with SSL/TLS] section of the Quarkus \"HTTP reference\" guide."
msgstr ""
"この認証方法を使用するには、まずアプリケーションで SSL/TLS を有効にする必要があります。\n"
"詳細は、Quarkus ガイド \"HTTP リファレンス\" の xref:http-reference.adoc#ssl[Supporting secure connections with SSL/TLS] を参照してください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "After your application accepts secure connections, the next step is to configure the `quarkus.http.ssl.certificate.trust-store-file` property with the name of the file that holds all the certificates your application trusts. This file also includes information about how your application requests certificates when a client, such as a browser or another service, tries to access one of its protected resources."
msgstr "アプリケーションがセキュアな接続を受け入れたら、次のステップは、アプリケーションが信頼するすべての証明書を保持するファイルの名前を使用して `quarkus.http.ssl.certificate.trust-store-file` プロパティーを設定することです。このファイルには、ブラウザーや他のサービスなどのクライアントが保護されたリソースの 1 つにアクセスしようとしたときに、アプリケーションが証明書を要求する方法に関する情報も含まれています。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Because JKS is no longer the default keystore and truststore format in Quarkus, the framework makes an educated guess based on the file extension:"
msgstr "JKS は Quarkus のデフォルトのキーストアおよびトラストストア形式ではなくなったため、Quarkus のフレームワークはファイル拡張子に基づいて推測を行います。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`.pem`, `.crt`, and `.key` are read as PEM certificates and keys."
msgstr "`.pem`、 `.crt`、および `.key` は PEM 証明書および鍵として読み取られます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`.jks`, `.keystore`, and `.truststore` are read as JKS keystores and truststores."
msgstr "`.jks`、 `.keystore`、および `.truststore` は、JKS キーストアおよびトラストストアとして読み取られます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`.p12`, `.pkcs12`, and `.pfx` are read as PKCS12 keystores and truststores."
msgstr "`.p12`、 `.pkcs12`、および `.pfx` は、PKCS12 キーストアおよびトラストストアとして読み取られます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "If your file does not use one of these extensions, you must set the format by using the following properties:"
msgstr "ファイルでこれらの拡張子が使用されていない場合は、次のプロパティーを使用して形式を設定する必要があります。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "JKS is becoming less commonly used. Since Java 9, the default keystore format in Java is PKCS12. The most significant difference between JKS and PKCS12 is that JKS is a format specific to Java. In contrast, PKCS12 is a standardized, language-neutral way of storing encrypted private keys and certificates."
msgstr "JKS は、あまり一般的に使用されなくなっています。Java 9 以降、Java のデフォルトのキーストア形式は PKCS12 です。JKS と PKCS12 の最も大きな違いは、JKS が Java 固有のフォーマットであることです。対照的に、PKCS12 は、暗号化された秘密鍵と証明書を保存するための標準化された言語中立的な方法です。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Here is an example configuration for enabling mTLS:"
msgstr "mTLS を有効にするための設定例を次に示します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The keystore where the server's private key is located."
msgstr "サーバーの秘密鍵が保存されているキーストア。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The truststore from which the trusted certificates are loaded."
msgstr "信頼済み証明書がロードされるトラストストア。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Setting `quarkus.http.ssl.client-auth` to `required` makes the server demand client certificates. You can set it to `REQUEST` if the server should accept requests without a certificate. This setting is useful when supporting multiple authentication methods besides mTLS."
msgstr "`quarkus.http.ssl.client-auth` を `required` に設定すると、サーバーがクライアント証明書を要求します。サーバーが証明書なしでリクエストを受け入れる必要がある場合は、これを `REQUEST` に設定できます。この設定は、mTLS 以外の複数の認証方法をサポートする場合に便利です。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Defines a policy where only authenticated users can access resources from your application."
msgstr "認証されたユーザーのみがアプリケーションのリソースにアクセスできるようにするポリシーを定義します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Disables the plain HTTP protocol, requiring all requests to use HTTPS. When you set `quarkus.http.ssl.client-auth` to `required`, `quarkus.http.insecure-requests` is automatically disabled."
msgstr "プレーン HTTP プロトコルを無効にし、すべてのリクエストで HTTPS を使用するように要求します。 `quarkus.http.ssl.client-auth` を `required` に設定すると、 `quarkus.http.insecure-requests` が自動的に無効になります。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "When an incoming request matches a valid certificate in the truststore, your application can obtain the subject by injecting a `SecurityIdentity` as follows:"
msgstr "受信リクエストがトラストストア内の有効な証明書と一致する場合、アプリケーションは次のように `SecurityIdentity` を注入することでサブジェクトを取得できます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Obtaining the subject"
msgstr "subjectの取得"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "You can also get the certificate by using the code outlined in the following example:"
msgstr "次の例に示すコードを使用して証明書を取得することもできます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Obtaining the certificate"
msgstr "証明書の取得"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Mapping certificate attributes to roles"
msgstr "証明書属性をロールにマッピングする"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The information from the client certificate can be used to add roles to Quarkus `SecurityIdentity`."
msgstr "クライアント証明書の情報を使用して、Quarkus `SecurityIdentity` にロールを追加できます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"You can add new roles to `SecurityIdentity` after checking a client certificate's common name (CN) attribute.\n"
"The easiest way to add new roles is to use a certificate attribute to role mapping feature."
msgstr ""
"クライアント証明書のコモンネーム (CN) 属性を確認した後、 `SecurityIdentity` に新しいロールを追加できます。\n"
"新しいロールを追加する最も簡単な方法は、証明書属性をロールにマッピングする機能に使用することです。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For example, you can update the properties shown in the section which introduces <<mutual-tls>> as follows:"
msgstr "たとえば、以下のように <<mutual-tls>> を紹介するセクションで表示されるプロパティーを更新できます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The `cert-role-mappings.properties` classpath resource contains a map of certificate's CN values to roles in the form `CN=role` or `CN=role1,role2`, etc. Let us assume it contains three entries: `alice=user,admin`, `bob=user` and `jdoe=tester`."
msgstr "`cert-role-mappings.properties` クラスパスリソースには、 `CN=role` または `CN=role1,role2` などの形式で、ロールへの証明書の CN 値のマップが含まれています。ここで、 `alice=user,admin`、 `bob=user`、および `jdoe=tester` の 3 つのエントリーが含まれていると仮定します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Use HTTP security policy to require that `SecurityIdentity` must have either `user` or `admin` roles for the requests to be authorized."
msgstr "HTTP セキュリティーポリシーを使用して、リクエストを認可するには `SecurityIdentity` に `user` または `admin` ロールが必要であることを要求します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Given the preceding configuration, the request is authorized if the client certificate's CN attribute is equal to `alice` or `bob` and forbidden if it is equal to `jdoe`."
msgstr "上記の設定では、クライアント証明書の CN 属性が `alice` または `bob` の場合にリクエストが承認され、 `jdoe` の場合はリクエストが拒否されます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Using certificate attributes to augment SecurityIdentity"
msgstr "証明書属性を使用して SecurityIdentity を強化する"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"You can always register `SecurityIdentityAugmentor` if the automatic <<map-certificate-attributes-to-roles>> option does not suit.\n"
"Custom `SecurityIdentityAugmentor` can check the values of different client certificate attributes and augment the `SecurityIdentity` accordingly."
msgstr ""
"自動の <<map-certificate-attributes-to-roles>> オプションが適切でない場合は、いつでも `SecurityIdentityAugmentor` を登録できます。\n"
"カスタム `SecurityIdentityAugmentor` は、さまざまなクライアント証明書属性の値をチェックし、それに応じて `SecurityIdentity` を拡張できます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information about customizing `SecurityIdentity`, see the xref:security-customization.adoc#security-identity-customization[Security identity customization] section in the Quarkus \"Security tips and tricks\" guide."
msgstr "`SecurityIdentity` のカスタマイズの詳細は、Quarkus \"セキュリティーに関するヒントとコツ\" ガイドの xref:security-customization.adoc#security-identity-customization[セキュリティーアイデンティティーのカスタマイズ] セクションを参照してください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "Set up the mutual TLS client authentication programmatically"
msgstr "プログラムによるTLSクライアント相互認証の設定"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "In the <<mutual-tls>> section we configured the mutual TLS client authentication in the `application.properties` file like this:"
msgstr "<<mutual-tls>> セクションでは、 `application.properties` ファイルで相互 TLS クライアント認証を次のように設定しました："

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid ""
"quarkus.tls.tls-config-1.key-store.p12.path=server-keystore.p12\n"
"quarkus.tls.tls-config-1.key-store.p12.password=the_key_store_secret\n"
"quarkus.tls.tls-config-1.trust-store.p12.path=server-truststore.p12\n"
"quarkus.tls.tls-config-1.trust-store.p12.password=the_trust_store_secret\n"
"quarkus.http.ssl.client-auth=required   <1>\n"
"quarkus.http.tls-configuration-name=tls-config-1    <2>"
msgstr "quarkus.tls.tls-config-1.key-store.p12.path=server-keystore.p12 quarkus.tls.tls-config-1.key-store.p12.password=the_key_store_secret quarkus.tls.tls-config-1.trust-store.p12.path=server-truststore.p12 quarkus.tls.tls-config-1.trust-store.p12.password=the_trust_store_secret quarkus.http.ssl.client-auth=required <1> quarkus.http.tls-configuration-name=tls-config-1 <2> quarkus.tls.tls-config-1.trust-store.p12.password=the_trust_store_secret"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "Enable and require the mutual TLS client authentication."
msgstr "相互TLSクライアント認証を有効にし、要求します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "Use the `tls-config-1` TLS configuration for the HTTP server TLS communication."
msgstr "HTTPサーバーのTLS通信には、 `tls-config-1` TLS設定を使用します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "The `io.quarkus.vertx.http.security.HttpSecurity` CDI event enable you to configuration the mutual TLS authentication programmatically like in the example below:"
msgstr "`io.quarkus.vertx.http.security.HttpSecurity` CDI イベントを使用すると、以下の例のようにプログラムで相互 TLS 認証を設定できます："

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "Example TLS configuration"
msgstr "TLSの設定例"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "Example mutual TLS client authentication configuration"
msgstr "相互TLSクライアント認証の設定例"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid ""
"Enable and require the mutual TLS client authentication and use the `tls-config-1` TLS configuration for the HTTP server TLS communication.\n"
"The `tls-config-1` TLS configuration is registered in the TLS registry."
msgstr "相互 TLS クライアント認証を有効にして要求し、HTTP サーバーの TLS 通信に `tls-config-1` TLS 構成を使用します。 `tls-config-1` TLS 構成は TLS レジストリに登録されます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid ""
"It is also possible to map certificate attributes to roles.\n"
"Let's consider the example explained in the <<map-certificate-attributes-to-roles>> section:"
msgstr "証明書の属性をロールにマップすることも可能です。 <<map-certificate-attributes-to-roles>> のセクションで説明した例を考えてみましょう："

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "The configuration with the programmatic set up would look like this:"
msgstr "プログラムによる設定は次のようになります："

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "This API also enables you to use certificate to augment `SecurityIdentity`:"
msgstr "このAPIは、証明書を使用して `SecurityIdentity` を拡張することもできます："

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid ""
"In the <<use-cert-attrs-to-augment-identity>> section we have mentioned that the `SecurityIdentityAugmentor` can be used to map the client certificate attribute values to the `SecurityIdentity` roles.\n"
"The `MTLS` API allows you to define such roles mapping as well."
msgstr "<<use-cert-attrs-to-augment-identity>> のセクションでは、 `SecurityIdentityAugmentor` を使用してクライアント証明書の属性値を `SecurityIdentity` のロールにマッピングできることを述べました。 `MTLS` APIでは、このようなロールのマッピングも定義できます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
#, fuzzy
msgid "If Quarkus starts the HTTP server in DEV mode after a failed start, Quarkus may need to fallback to the configuration provided in the `application.properties` file. This is a known limitation."
msgstr "QuarkusでHTTPサーバーの起動に失敗した後、DEVモードでHTTPサーバーを起動すると、 `application.properties` 。これは既知の制限事項です。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Other supported authentication mechanisms"
msgstr "その他のサポートされる認証メカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Quarkus Security also supports the following authentication mechanisms through extensions:"
msgstr "Quarkus Securityは、エクステンションによって、以下の認証メカニズムもサポートしています:"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<webauthn-authentication>>"
msgstr "<<webauthn-authentication>>"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<openid-connect-authentication>>"
msgstr "<<openid-connect-authentication>>"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<smallrye-jwt-authentication>>"
msgstr "<<smallrye-jwt-authentication>>"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "<<oauth2-authentication>>"
msgstr "<<oauth2-authentication>>"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "WebAuthn authentication"
msgstr "WebAuthn認証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"https://webauthn.guide/[WebAuthn] is an authentication mechanism that replaces passwords.\n"
"When you write a service for registering new users, or logging them in, instead of asking for a password, you can use WebAuthn, which replaces the password.\n"
"For more information, see the xref:security-webauthn.adoc[Secure a Quarkus application by using the WebAuthn authentication mechanism] guide."
msgstr ""
"link:https://webauthn.guide/[WebAuthn] はパスワードに代わる認証メカニズムです。\n"
"新規ユーザーの登録やログインを行うサービスを作成する場合、パスワードの入力を求める代わりにWebAuthnを使用することで、パスワードを置き換えることができます。\n"
"詳細については、 xref:security-webauthn.adoc[WebAuthn認証メカニズムを使用したQuarkusアプリケーションの保護] ガイドを参照してください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OpenID Connect authentication"
msgstr "OpenID Connect 認証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"OpenID Connect (OIDC) is an identity layer that works on top of the OAuth 2.0 protocol.\n"
"OIDC enables client applications to verify the identity of a user based on the authentication performed by the OIDC provider and retrieve basic information about that user."
msgstr ""
"OpenID Connect（OIDC）は、OAuth 2.0プロトコル上で動作するIDレイヤです。\n"
"OIDCは、クライアントアプリケーションがOIDCプロバイダによって実行された認証に基づいてユーザーの身元を確認し、そのユーザーに関する基本情報を取得することを可能にします。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The Quarkus `quarkus-oidc` extension provides a reactive, interoperable, multitenant-enabled OIDC adapter that supports Bearer token and Authorization Code Flow authentication mechanisms.\n"
"The Bearer token authentication mechanism extracts the token from the HTTP Authorization header."
msgstr ""
"Quarkus の `quarkus-oidc` エクステンションは、ベアラートークンと認可コードフローの認証メカニズムをサポートする、リアクティブで相互運用可能なマルチテナント対応の OIDC アダプターを提供します。\n"
"Bearer トークン認証メカニズムは、HTTP Authorization ヘッダーからトークンを抽出します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The Authorization Code Flow mechanism redirects the user to an OIDC provider to authenticate the user's identity.\n"
"After the user is redirected back to Quarkus, the mechanism completes the authentication process by exchanging the provided code that was granted for the ID, access, and refresh tokens."
msgstr ""
"認可コードフローメカニズムは、ユーザーを OIDC プロバイダーにリダイレクトして、ユーザーのアイデンティティーを認証します。\n"
"ユーザーが Quarkus にリダイレクトされた後、メカニズムにより ID、アクセストークン、およびリフレッシュトークンに付与された提供コードを交換して認証プロセスを完了します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"You can verify ID and access JSON Web Token (JWT) tokens by using the refreshable JSON Web Key (JWK) set or introspect them remotely.\n"
"However, opaque, also known as binary tokens, can only be introspected remotely."
msgstr ""
"リフレッシュ可能な JSON Web Key (JWK) セットを使用して ID を検証し、JSON Web Token (JWT) トークンにアクセスしたり、リモートでそれらをイントロスペクトしたりできます。\n"
"ただし、バイナリートークンとも呼ばれる不透明トークンは、リモートでのみイントロスペクトできます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Using the Quarkus OIDC extension, both the Bearer token and Authorization Code Flow authentication mechanisms use <<smallrye-jwt-authentication>> to represent JWT tokens as MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr "Quarkus OIDC エクステンションを使用すると、ベアラートークンと認可コードフロー認証メカニズムの両方が <<smallrye-jwt-authentication>> を使用して、JWT トークンを MicroProfile JWT `org.eclipse.microprofile.jwt.JsonWebToken` として表します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Additional Quarkus resources for OIDC authentication"
msgstr "OIDC認証のための追加のQuarkusリソース"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information about OIDC authentication and authorization methods that you can use to secure your Quarkus applications, see the following resources:"
msgstr "Quarkusアプリケーションの安全性を確保するために使用できるOIDC認証および認可方法の詳細については、以下のリソースを参照してください："

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OIDC topic"
msgstr "OIDCトピック"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Quarkus information resource"
msgstr "Quarkusの情報リソース"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Bearer token authentication mechanism"
msgstr "ベアラートークン認証メカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authorization Code Flow authentication mechanism"
msgstr "認可コードフロー認証メカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OpenID Connect (OIDC) Authorization Code Flow mechanism]"
msgstr "xref:security-oidc-code-flow-authentication.adoc[OpenID Connect (OIDC) 認可コードフロー・メカニズム]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OIDC and SAML Identity broker"
msgstr "OIDC と SAML アイデンティティ・ブローカー"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc#oidc-saml-broker[OpenID Connect (OIDC) Authorization Code Flow and SAML Identity broker]"
msgstr "xref:security-oidc-code-flow-authentication.adoc#oidc-saml-broker[OpenID Connect (OIDC) 認可コードフローと SAML アイデンティティブローカー]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Multiple tenants that can support the Bearer token authentication or Authorization Code Flow mechanisms"
msgstr "ベアラ・トークン認証または認可コード・フロー・メカニズムをサポートする複数のテナント"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect (OIDC) multi-tenancy]"
msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connect (OIDC)マルチテナントの使用]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Securing Quarkus with commonly used OpenID Connect providers"
msgstr "一般的に使用される OpenID Connect プロバイダーを使用して Quarkus を保護する"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr "xref:security-openid-connect-providers.adoc[よく知られたOpenID Connectプロバイダーの設定]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Using Keycloak to centralize authorization"
msgstr "Keycloakを使用した認可の一元化"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-keycloak-authorization.adoc[Using OpenID Connect (OIDC) and Keycloak to centralize authorization]"
msgstr "xref:security-keycloak-authorization.adoc[OpenID Connect (OIDC)とKeycloakを使用して認可を一元化]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Configuring Keycloak programmatically"
msgstr "Keycloakのプログラムによる設定"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-keycloak-admin-client.adoc[Using the Keycloak admin client]"
msgstr "xref:security-keycloak-admin-client.adoc[Keycloak admin クライアントの使用]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To enable the Quarkus OIDC extension at runtime, set `quarkus.oidc.tenant-enabled=false` at build time.\n"
"Then, re-enable it at runtime by using a system property."
msgstr ""
"実行時に Quarkus OIDC エクステンションを有効にするには、ビルド時に `quarkus.oidc.tenant-enabled=false` を設定します。\n"
"続いて、システムプロパティーを使用して実行時に再度有効にします。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information about managing the individual tenant configurations in multitenant OIDC deployments, see the xref:security-openid-connect-multitenancy.adoc#disable-tenant[Disabling tenant configurations] section in the \"Using OpenID Connect (OIDC) multi-tenancy\" guide."
msgstr "マルチテナント OIDC デプロイメントにおける個々のテナント設定の管理に関する詳細は、\"OpenID Connect (OIDC) マルチテナントの使用\" ガイドの xref:security-openid-connect-multitenancy.adoc#disable-tenant[テナント設定の無効化] セクションを参照してください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OpenID Connect client and filters"
msgstr "OpenID Connectクライアントとフィルター"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The `quarkus-oidc-client` extension provides `OidcClient` for acquiring and refreshing access tokens from OpenID Connect and OAuth2 providers that support the following token grants:"
msgstr "`quarkus-oidc-client` エクステンションは、以下のトークングラントをサポートする OpenID Connect および OAuth2 プロバイダからアクセストークンを取得し、リフレッシュするための `OidcClient` を提供します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`client-credentials`"
msgstr "`client-credentials`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`password`"
msgstr "`password`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`refresh_token`"
msgstr "`refresh_token`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The `quarkus-resteasy-client-oidc-filter` extension requires the `quarkus-oidc-client` extension.\n"
"It provides JAX-RS RESTful Web Services `OidcClientRequestFilter`, which sets the access token acquired by `OidcClient` as the `Bearer` scheme value of the HTTP `Authorization` header.\n"
"This filter can be registered with MicroProfile REST client implementations injected into the current Quarkus endpoint, but it is not related to the authentication requirements of this service endpoint.\n"
"For example, it can be a public endpoint or be protected with mTLS."
msgstr ""
"`quarkus-resteasy-client-oidc-filter` エクステンションには `quarkus-oidc-client` エクステンションが必要です。\n"
"これは、 `OidcClient` によって取得されたアクセストークンを HTTP `Authorization` ヘッダーの `Bearer` スキーム値として設定する JAX-RS RESTful Web サービス `OidcClientRequestFilter` を提供します。\n"
"このフィルターは、現在の Quarkus エンドポイントに注入された MicroProfile REST クライアント実装に登録できますが、このサービスエンドポイントの認証要件とは関係ありません。\n"
"たとえば、パブリックエンドポイントにしたり、mTLS で保護したりできます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "In this scenario, you do not need to protect your Quarkus endpoint by using the Quarkus OpenID Connect adapter."
msgstr "このシナリオでは、Quarkus OpenID Connectアダプターを使用してQuarkusエンドポイントを保護する必要はありません。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The `quarkus-resteasy-client-oidc-token-propagation` extension requires the `quarkus-oidc` extension.\n"
"It provides Jakarta REST `TokenCredentialRequestFilter`, which sets the OpenID Connect Bearer token or Authorization Code Flow access token as the `Bearer` scheme value of the HTTP `Authorization` header.\n"
"This filter can be registered with MicroProfile REST client implementations injected into the current Quarkus endpoint, which must be protected by using the Quarkus OIDC adapter.\n"
"This filter can propagate the access token to the downstream services."
msgstr ""
"`quarkus-resteasy-client-oidc-token-propagation` エクステンションには `quarkus-oidc` エクステンションが必要です。\n"
"これは、OpenID Connect ベアラートークンまたは認可コードフローアクセストークンを HTTP `Authorization` ヘッダーの `Bearer` スキーム値として設定する Jakarta REST `TokenCredentialRequestFilter` を提供します。\n"
"このフィルターは、現在の Quarkus エンドポイントに注入された MicroProfile REST クライアント実装に登録できます。これは、Quarkus OIDC アダプターを使用して保護する必要があります。\n"
"このフィルターは、アクセストークンをダウンストリームサービスに伝播できます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information, see the xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart] and xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference] guides."
msgstr "詳しくは、 xref:security-openid-connect-client.adoc[OpenID Connectクライアントとトークン伝搬クイックスタート] 、 xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) とOAuth2クライアントとフィルターのリファレンス] ガイドをご覧ください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "SmallRye JWT authentication"
msgstr "SmallRye JWT 認証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The `quarkus-smallrye-jwt` extension provides a MicroProfile JSON Web Token (JWT) 2.1 implementation and multiple options to verify signed and encrypted `JWT` tokens.\n"
"It represents them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""
"`quarkus-smallrye-jwt` エクステンションは、MicroProfile JSON Web Token (JWT) 2.1 の実装と、署名および暗号化された `JWT` トークンを検証する複数のオプションを提供します。\n"
"これらは `org.eclipse.microprofile.jwt.JsonWebToken` として表されます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-smallrye-jwt` is an alternative to the `quarkus-oidc` Bearer token authentication mechanism and verifies only `JWT` tokens by using either Privacy Enhanced Mail (PEM) keys or the refreshable `JWK` key set.\n"
"`quarkus-smallrye-jwt` also provides the JWT generation API, which you can use to easily create `signed`, `inner-signed`, and `encrypted` `JWT` tokens."
msgstr ""
"`quarkus-smallrye-jwt` は `quarkus-oidc` ベアラートークン認証メカニズムの代替となるもので、Privacy Enhanced Mail (PEM) キーまたは更新可能な `JWK` キーセットのいずれかを使用して `JWT` トークンのみを検証します。\n"
"`quarkus-smallrye-jwt` は JWT 生成 API も提供しており、これを使用して `signed`、 `inner-signed`、および `encrypted` の `JWT` トークンを簡単に作成できます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information, see the xref:security-jwt.adoc[Using JWT RBAC] guide."
msgstr "詳細は、xref:security-jwt.adoc[JWT RBAC の使用] ガイドを参照してください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OAuth2 authentication"
msgstr "OAuth2 認証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-elytron-security-oauth2` provides an alternative to the Quarkus `quarkus-oidc` Bearer token authentication mechanism extension.\n"
"`quarkus-elytron-security-oauth2` is based on `Elytron` and is primarily intended for introspecting opaque tokens remotely."
msgstr ""
"`quarkus-elytron-security-oauth2` は、Quarkus `quarkus-oidc` ベアラートークン認証メカニズムエクステンションに対する別の選択肢を提供するものです。\n"
"`quarkus-elytron-security-oauth2` は `Elytron` に基づいており、主に不透明トークンをリモートでイントロスペクトすることを目的としています。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For more information, see the Quarkus xref:security-oauth2.adoc[Using OAuth2] guide."
msgstr "詳細は、Quarkus xref:security-oauth2.adoc[OAuth2 の使用] ガイドを参照してください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms"
msgstr "OpenID Connect、SmallRye JWT、OAuth2認証メカニズムからの選択"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Use the following information to select the appropriate token authentication mechanism to secure your Quarkus applications."
msgstr "次の情報を使用して、Quarkusアプリケーションを保護するために適切なトークン認証メカニズムを選択して下さい。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "List of authentication mechanism use cases"
msgstr "認証メカニズムのユースケースリスト"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-oidc` requires an OpenID Connect provider such as Keycloak, which can verify the bearer tokens or authenticate the end users with the Authorization Code flow.\n"
"In both cases, `quarkus-oidc` requires a connection to the specified OpenID Connect provider."
msgstr ""
"`quarkus-oidc` には、ベアラートークンを検証したり、認可コードフローでエンドユーザーを認証したりできる Keycloak などの OpenID Connect プロバイダーが必要です。\n"
"どちらの場合も、 `quarkus-oidc` は指定された OpenID Connect プロバイダーへの接続を必要とします。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"If the user authentication requires Authorization Code flow, or you need to support multiple tenants, use `quarkus-oidc`.\n"
"`quarkus-oidc` can also request user information by using both Authorization Code Flow and Bearer access tokens."
msgstr ""
"ユーザー認証に認可コードフローが必要な場合、または複数のテナントをサポートする必要がある場合は、 `quarkus-oidc` を使用してください。 \n"
"`quarkus-oidc` は、認可コードフローとベアラーアクセストークンの両方を使用して、ユーザー情報を要求することもできます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "If your bearer tokens must be verified, use `quarkus-oidc`, `quarkus-elytron-security-oauth2`, or `quarkus-smallrye-jwt`."
msgstr "ベアラートークンを検証する必要がある場合は、 `quarkus-oidc`、 `quarkus-elytron-security-oauth2`、または `quarkus-smallrye-jwt` を使用します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"If your bearer tokens are in a JSON web token (JWT) format, you can use any extensions in the preceding list.\n"
"Both `quarkus-oidc` and `quarkus-smallrye-jwt` support refreshing the `JsonWebKey` (JWK) set when the OpenID Connect provider rotates the keys.\n"
"Therefore, if remote token introspection must be avoided or is unsupported by the providers, use `quarkus-oidc` or `quarkus-smallrye-jwt` to verify JWT tokens."
msgstr ""
"ベアラートークンが JSON Web トークン (JWT) 形式である場合は、上記のリストにある任意のエクステンションを使用できます。\n"
"`quarkus-oidc` と `quarkus-smallrye-jwt` はどちらも、OpenID Connect プロバイダーがキーをローテーションするときに設定された `JsonWebKey` (JWK) の更新をサポートしています。\n"
"したがって、リモートトークンイントロスペクションを回避する必要がある場合やプロバイダーがこれをサポートしていない場合は、 `quarkus-oidc` または `quarkus-smallrye-jwt` を使用して JWT トークンを検証します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"To introspect the JWT tokens remotely, you can use `quarkus-oidc`\n"
"or `quarkus-elytron-security-oauth2`\n"
"for verifying the opaque or binary tokens by using remote introspection.\n"
"`quarkus-smallrye-jwt` does not support the remote introspection of both opaque or JWT tokens but instead relies on the locally available keys that are usually retrieved from the OpenID Connect provider."
msgstr ""
"JWT トークンをリモートでイントロスペクトするには、 `quarkus-oidc` を使用できます。\n"
"または `quarkus-elytron-security-oauth2`\n"
"リモートイントロスペクションを使用して不透明トークンまたはバイナリートークンを検証します。\n"
"`quarkus-smallrye-jwt` は、不透明トークンと JWT トークンの両方のリモートイントロスペクションをサポートしていませんが、代わりに、通常は OpenID Connect プロバイダーから取得されるローカルで利用可能なキーに依存します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-oidc` and `quarkus-smallrye-jwt` support the JWT and opaque token injection into the endpoint code.\n"
"Injected JWT tokens provide more information about the user.\n"
"All extensions can have the tokens injected as `Principal`."
msgstr ""
"`quarkus-oidc` と `quarkus-smallrye-jwt` は、エンドポイントコードへの JWT と不透明トークンの注入をサポートします。\n"
"注入された JWT トークンは、ユーザーに関する詳細情報を提供します。\n"
"すべてのエクステンションには、トークンを `Principal` として注入できます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-smallrye-jwt` supports more key formats than `quarkus-oidc`.\n"
"`quarkus-oidc` uses only the JWK-formatted keys that are part of a JWK set, whereas `quarkus-smallrye-jwt` supports PEM keys."
msgstr "`quarkus-smallrye-jwt` は `quarkus-oidc` よりも多くの鍵フォーマットをサポートしています。 `quarkus-oidc` は JWK セットの一部である JWK 形式の鍵のみを使用するのに対し、 `quarkus-smallrye-jwt` は PEM 鍵をサポートしています。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"`quarkus-smallrye-jwt` handles locally signed, inner-signed-and-encrypted, and encrypted tokens.\n"
"In contrast, although `quarkus-oidc` and `quarkus-elytron-security-oauth2` can also verify such tokens, they treat them as opaque tokens and verify them through remote introspection."
msgstr ""
"`quarkus-smallrye-jwt` は、ローカルで署名されたトークン、内部で署名および暗号化されたトークン、および暗号化されたトークンを処理します。\n"
"対照的に、 `quarkus-oidc` と `quarkus-elytron-security-oauth2` もそのようなトークンを検証できますが、それらを不透明トークンとして扱い、リモートイントロスペクションを通じて検証します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "If you need a lightweight library for the remote introspection of opaque or JWT tokens, use `quarkus-elytron-security-oauth2`."
msgstr "不透明トークンやJWTトークンのリモートイントロスペクションのための軽量なライブラリが必要な場合は、 `quarkus-elytron-security-oauth2` を使用してください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Architectural considerations drive your decision to use opaque or JSON web token (JWT) token format.\n"
"Opaque tokens tend to be much shorter than JWT tokens but need most of the token-associated state to be maintained in the provider database.\n"
"Opaque tokens are effectively database pointers."
msgstr "トークン形式として、不透明トークンかJSONウェブトークン（JWT）のどちらを使用するかは、アーキテクチャの検討によって決定されます。不透明トークンはJWTトークンよりもはるかに短い傾向がありますが、トークンに関連する状態のほとんどをプロバイダーのデータベースで維持する必要があります。不透明トークンは、事実上データベース・ポインタです。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"JWT tokens are significantly longer than opaque tokens.\n"
"Nonetheless, the providers effectively delegate most of the token-associated state to the client by storing it as the token claims and either signing or encrypting them."
msgstr ""
"JWT トークンは不透明トークンよりも大幅に長くなります。\n"
"その場合もプロバイダーは、トークンクレームとしてトークン関連の状態を保存し、それに署名するか暗号化することで、トークン関連の状態の大部分をクライアントに効果的に委譲します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Token authentication mechanism comparison"
msgstr "トークン認証メカニズムの比較"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Feature required"
msgstr "必要な機能"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`quarkus-oidc`"
msgstr "`quarkus-oidc`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`quarkus-smallrye-jwt`"
msgstr "`quarkus-smallrye-jwt`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`quarkus-elytron-security-oauth2`"
msgstr "`quarkus-elytron-security-oauth2`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Bearer JWT verification"
msgstr "ベアラーJWTの検証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Local verification or introspection"
msgstr "ローカル検証もしくはイントロスペクション"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Local verification"
msgstr "ローカル検証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Introspection"
msgstr "イントロスペクション"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Bearer opaque token verification"
msgstr "ベアラー不透明Tokenの検証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "No"
msgstr "No"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Refreshing `JsonWebKey` set to verify JWT tokens"
msgstr "JWT トークン検証用の `JsonWebKey` セットの更新"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Yes"
msgstr "Yes"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Represent token as `Principal`"
msgstr "トークンを `Principal` として表現"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Inject JWT as MP JWT"
msgstr "MP JWTとしてJWTをインジェクト"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authorization code flow"
msgstr "認可コードフロー"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Multi-tenancy"
msgstr "マルチテナンシー"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "User information support"
msgstr "ユーザー情報のサポート"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "PEM key format support"
msgstr "PEMキーフォーマットサポート"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "SecretKey support"
msgstr "SecretKey のサポート"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "In JSON Web Key (JWK) format"
msgstr "JSON Web Key（JWK）フォーマットで"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Inner-signed and encrypted or encrypted tokens"
msgstr "内部署名付き暗号化トークン、または暗号化トークン"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Custom token verification"
msgstr "カスタムトークン検証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "With injected JWT parser"
msgstr "注入されたJWTパーサーで"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "JWT as a cookie support"
msgstr "クッキーとしてのJWTのサポート"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Combining authentication mechanisms"
msgstr "認証メカニズムの組み合わせ"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"If different sources provide the user credentials, you can combine authentication mechanisms.\n"
"For example, you can combine the built-in Basic and the Quarkus `quarkus-oidc` Bearer token authentication mechanisms."
msgstr ""
"異なるソースからユーザー認証情報が提供される場合は、認証メカニズムを組み合わせることができます。\n"
"たとえば、組み込みの Basic 認証メカニズムと Quarkus の `quarkus-oidc` べアラートークン認証メカニズムを組み合わせることができます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The authentication process completes as soon as the first `SecurityIdentity` is produced by one of the authentication mechanisms."
msgstr "認証メカニズムの 1 つによって最初の `SecurityIdentity` が生成されるとすぐに、認証プロセスが完了します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Inclusive Authentication"
msgstr "統合認証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"In some cases it can be required that all registered authentication mechanisms create their `SecurityIdentity`.\n"
"It can be required when the credentials such as tokens have to be passed over <<mutual-tls>>,\n"
"for example, when users are authenticating via `Virtual Private Network`, or when the current token has to be bound\n"
"to the client certificate for the token verification to succeed, guaranteeing that the token was issued exactly\n"
"to the same client which is currently passing this token to Quarkus alongside its client certificate."
msgstr ""
"場合によっては、登録されているすべての認証メカニズムが `SecurityIdentity` を作成することが必要になることがあります。\n"
"これは、トークンなどの認証情報を <<mutual-tls>> 経由で渡す必要がある場合に必要になることがあります。\n"
"たとえば、ユーザーが `Virtual Private Network` 経由で認証している場合や、トークンの検証を成功させるために現在のトークンをクライアント証明書にバインドして、このトークンをクライアント証明書とともに Quarkus に渡している同じクライアントにトークンが正確に発行されたことを保証する場合などです。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "In Quarkus such authentication is called `inclusive` and you can enable it like this:"
msgstr "Quarkus では、このような認証は `inclusive` (統合認証) と呼ばれ、次のようにして有効にできます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"If the authentication is inclusive then `SecurityIdentity` created by the first authentication mechanism can be\n"
"injected into the application code.\n"
"For example, if both <<mutual-tls>> and basic authentication mechanism authentications are required,\n"
"the <<mutual-tls>> mechanism will create `SecurityIdentity` first."
msgstr ""
"認証が統合認証である場合、最初の認証メカニズムによって作成された `SecurityIdentity` は\n"
"アプリケーションコードに挿入されます。\n"
"たとえば、<<mutual-tls>> と基本的な認証メカニズムの認証が必要な場合、<<mutual-tls>> メカニズムが最初に `SecurityIdentity` を作成します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The <<mutual-tls>> mechanism has the highest priority when inclusive authentication is enabled, to ensure\n"
"that an injected `SecurityIdentity` always represents <<mutual-tls>> and can be used to get access to `SecurityIdentity`\n"
"identities provided by other authentication mechanisms."
msgstr "統合認証が有効になっている場合、<<mutual-tls>> メカニズムが最も優先され、注入された `SecurityIdentity` が常に <<mutual-tls>> を表し、他の認証メカニズムによって提供される `SecurityIdentity` アイデンティティーにアクセスするために使用できるようになります。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Additional `SecurityIdentity` instances can be accessed as a `quarkus.security.identities` attribute on the first\n"
"`SecurityIdentity`, however, accessing these extra identities directly may not be necessary, for example,\n"
"when both <<mutual-tls>> and xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer authentication] mechanisms\n"
"have been combined and done their authentications, the authenticated bearer token can be injected as a token\n"
"credential alongside `SecurityIdentity` created by <<mutual-tls>>. This is exemplified below:"
msgstr "追加の `SecurityIdentity` インスタンスには、最初の `SecurityIdentity` の `quarkus.security.identities` 属性としてアクセスできます。しかし、これらの追加のアイデンティティーに直接アクセスする必要がない場合があります。たとえば、<<mutual-tls>> と xref:security-oidc-bearer-token-authentication.adoc[OIDC ベアラー認証] メカニズムの両方が組み合わされて認証が行われている場合、認証されたベアラートークンは、<<mutual-tls>> によって作成された `SecurityIdentity` とともにトークン認証情報として注入できます。以下に例を示します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "This is the `SecurityIdentity` created by applicable authentication mechanism with the highest priority."
msgstr "これは、該当する認証メカニズムによって作成された、最高の優先度を持つ `SecurityIdentity` です。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Other applicable authentication mechanisms performed authentication and are available on the `SecurityIdentity`."
msgstr "その他の該当する認証メカニズムは認証を実行し、 `SecurityIdentity` で利用できます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "You cannot combine the Quarkus `quarkus-oidc` Bearer token and `smallrye-jwt` authentication mechanisms because both mechanisms attempt to verify the token extracted from the HTTP Bearer token authentication scheme."
msgstr "Quarkus `quarkus-oidc` ベアラートークンと `smallrye-jwt` 認証メカニズムは、両方とも HTTP ベアラートークン認証スキームから抽出されたトークンを検証しようとするため、この 2 つを組み合わせることはできません。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Path-based authentication"
msgstr "パスベースの認証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Use HTTP Security Policy to enable path-based authentication"
msgstr "HTTP セキュリティーポリシーを使用してパスベース認証を有効にする"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The following configuration example demonstrates how you can enforce a single selectable authentication mechanism for a given request path:"
msgstr "次の設定例は、あるリクエストパスに対して、選択可能な単一の認証メカニズムを強制する方法を示しています:"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Ensure that the value of the `auth-mechanism` property matches the authentication scheme supported by `HttpAuthenticationMechanism`, for example, `basic`, `bearer`, or `form`."
msgstr "`auth-mechanism` プロパティの値が、 `HttpAuthenticationMechanism` がサポートする認証スキーム（例えば、 `basic` 、 `bearer` 、 `form` ）と一致しているようにして下さい。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Use annotations to enable path-based authentication for Jakarta REST endpoints"
msgstr "アノテーションを使用して Jakarta REST エンドポイントのパスベース認証を有効にする"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"It is possible to use annotations to select an authentication mechanism specific to each Jakarta REST endpoint.\n"
"This feature is only enabled when <<proactive-auth>> is disabled due to the fact that the annotations can only be used\n"
"to select authentication mechanisms after a REST endpoint has been matched.\n"
"Here is how you can select an authentication mechanism per a REST endpoint basis:"
msgstr ""
"アノテーションを使用して、各 Jakarta REST エンドポイントに固有の認証メカニズムを選択できます。\n"
"この機能は、REST エンドポイントが一致した後にのみ、\n"
"認証メカニズムを選択するためにアノテーションを使用できることから、<<proactive-auth>> が無効化されている場合に限り、有効化されます。\n"
"REST エンドポイントごとに認証メカニズムを選択する方法は次のとおりです。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The REST endpoint `/hello/basic` can only ever be accessed by using the <<basic-auth>>."
msgstr "REST エンドポイント `/hello/basic` には、<<basic-auth>> を使用する場合のみアクセスできます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "This endpoint requires authentication, because when no standard security annotation accompanies the `@BasicAuthentication` annotation, the `@Authenticated` annotation is added by default."
msgstr "`@BasicAuthentication` アノテーションに標準のセキュリティーアノテーションが付属していない場合は、デフォルトで `@Authenticated` アノテーションが追加されるため、このエンドポイントには認証が必要です。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The `@AuthorizationCodeFlow` annotation can be combined with any other standard security annotation like `@RolesAllowed`, `@PermissionsAllowed` and others."
msgstr "`@AuthorizationCodeFlow` アノテーションは、 `@RolesAllowed` や `@PermissionsAllowed` などの他の標準セキュリティーアノテーションと組み合わせることができます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "The REST endpoint `/hello/code-flow` can only ever be accessed by using the xref:security-oidc-code-flow-authentication.adoc[OIDC authorization code flow mechanism]."
msgstr "REST エンドポイント `/hello/code-flow` には、xref:security-oidc-code-flow-authentication.adoc[OIDC 認可コードフローメカニズム] を使用する場合のみアクセスできます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Supported authentication mechanism annotations"
msgstr "サポートされる認証メカニズムのアノテーション"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Authentication mechanism^"
msgstr "認証メカニズム^"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Annotation"
msgstr "アノテーション"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Basic authentication mechanism"
msgstr "Basic 認証メカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.vertx.http.runtime.security.annotation.BasicAuthentication`"
msgstr "`io.quarkus.vertx.http.runtime.security.annotation.BasicAuthentication`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Form-based authentication mechanism"
msgstr "フォームベース認証メカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.vertx.http.runtime.security.annotation.FormAuthentication`"
msgstr "`io.quarkus.vertx.http.runtime.security.annotation.FormAuthentication`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Mutual TLS authentication mechanism"
msgstr "相互 TLS 認証メカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.vertx.http.runtime.security.annotation.MTLSAuthentication`"
msgstr "`io.quarkus.vertx.http.runtime.security.annotation.MTLSAuthentication`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "WebAuthn authentication mechanism"
msgstr "WebAuthn 認証メカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.security.webauthn.WebAuthn`"
msgstr "`io.quarkus.security.webauthn.WebAuthn`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.oidc.BearerTokenAuthentication`"
msgstr "`io.quarkus.oidc.BearerTokenAuthentication`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "OIDC authorization code flow mechanism"
msgstr "OIDC 認可コードフローメカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.oidc.AuthorizationCodeFlow`"
msgstr "`io.quarkus.oidc.AuthorizationCodeFlow`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "SmallRye JWT authentication mechanism"
msgstr "SmallRye JWT 認証メカニズム"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "`io.quarkus.smallrye.jwt.runtime.auth.BearerTokenAuthentication`"
msgstr "`io.quarkus.smallrye.jwt.runtime.auth.BearerTokenAuthentication`"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Quarkus automatically secures endpoints annotated with the authentication mechanism annotation. When no standard security annotation is present on the REST endpoint and resource, the `io.quarkus.security.Authenticated` annotation is added for you."
msgstr "Quarkus は、認証メカニズムアノテーションが付けられたエンドポイントを自動的に保護します。REST エンドポイントとリソースに標準のセキュリティーアノテーションが存在しない場合は、 `io.quarkus.security.Authenticated` アノテーションが追加されます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"It is also possible to use the `io.quarkus.vertx.http.runtime.security.annotation.HttpAuthenticationMechanism` annotation to select any authentication mechanism based on its scheme.\n"
"Annotation-based analogy to the `quarkus.http.auth.permission.basic.auth-mechanism=custom` configuration property is the `@HttpAuthenticationMechanism(\"custom\")` annotation."
msgstr ""
"また、 `io.quarkus.vertx.http.runtime.security.annotation.HttpAuthenticationMechanism` アノテーションを使用して、そのスキームに基づいて任意の認証メカニズムを選択することも可能です。\n"
"`quarkus.http.auth.permission.basic.auth-mechanism=custom` 設定プロパティーに類似するアノテーションとして、 `@HttpAuthenticationMechanism(\"custom\")` アノテーションがあります。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "For consistency with various Jakarta EE specifications, it is recommended to always repeat annotations instead of relying on annotation inheritance."
msgstr "さまざまな Jakarta EE 仕様との整合性を保つために、アノテーションの継承に依存するのではなく、常にアノテーションを繰り返すことが推奨されます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Use inclusive authentication to enable path-based authentication"
msgstr "パスベースの認証を有効にするには、統合認証を使用します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"By default, Quarkus only supports <<path-based-authentication>> for one authentication mechanism per path.\n"
"If more than one authentication mechanism must be used for the path-based authentication, you can write a custom `HttpAuthenticationMechanism` as documented in the xref:security-customization.adoc#dealing-with-more-than-one-http-auth-mechanisms[Dealing with more than one HttpAuthenticationMechanism] section of the Security Tips and Tricks guide.\n"
"Another option is to enable <<inclusive-authentication>> in the lax mode and write a custom `HttpSecurityPolicy` or `PermissionChecker` that verifies that all registered HTTP authentication mechanisms created their mechanism-specific `SecurityIdentity`."
msgstr ""
"デフォルトでは、Quarkus はパスごとに 1 つの認証メカニズムに対してのみ <<path-based-authentication>> をサポートします。\n"
"パスベースの認証に複数の認証メカニズムを使用する必要がある場合は、「セキュリティに関するヒントとコツ」ガイドの xref:security-customization.adoc#dealing-with-more-than-one-http-auth-mechanisms[複数の HttpAuthenticationMechanism の処理] セクションに記載されているように、カスタムの `HttpAuthenticationMechanism` を記述できます。\n"
"もう 1 つの方法は、lax モードで <<inclusive-authentication>> を有効にし、登録されているすべての HTTP 認証メカニズムがメカニズム固有の `SecurityIdentity` を作成したことを確認するカスタムの `HttpSecurityPolicy` または `PermissionChecker` を記述することです。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Enable inclusive authentication in the lax mode"
msgstr "lax モードでの統合認証の有効化"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"By default, inclusive authentication requires that all registered HTTP authentication mechanisms must create the `SecurityIdentity`.\n"
"However, in the lax mode, the authentication succeeds if at least one registered `HttpAuthenticationMechanism` created the `SecurityIdentity`."
msgstr ""
"デフォルトでは、統合認証では、登録されているすべての HTTP 認証メカニズムが `SecurityIdentity` を作成する必要があります。\n"
"ただし、lax モードでは、少なくとも 1 つの登録済み `HttpAuthenticationMechanism` が `SecurityIdentity` を作成すると、認証が成功します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Let's assume that we have 3 registered mechanisms, mTLS, Basic and OIDC and you only require Basic and mTLS authentications to succeed to permit access to the `hello` method.\n"
"In this case, enabling an inclusive authentication in a lax mode allows to check which mechanisms produced the identity as shown in the example below:"
msgstr ""
"mTLS、Basic、OIDC の 3 つの登録済みメカニズムがあり、 `hello` メソッドへのアクセスを許可するのに Basic 認証と mTLS 認証のみが成功する必要があると仮定します。\n"
"この場合、統合認証を lax モードで有効にすると、次の例に示すように、どのメカニズムがアイデンティティーを生成したかを確認できます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Example of the HTTP Authentication mechanisms check"
msgstr "HTTP 認証メカニズムの確認の例"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Permit access to the endpoint only if it is confirmed that both `mTLS` and `Basic` authentication mechanisms have authenticated the current request."
msgstr "`mTLS` と `Basic` の両方の認証メカニズムが現在のリクエストを認証したことが確認された場合にのみ、エンドポイントへのアクセスを許可します。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "How to combine it with HTTP Security Policy"
msgstr "HTTP セキュリティーポリシーとの組み合わせ方法"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"The easiest way to define roles that are allowed to access individual resources is the `@RolesAllowed` annotation.\n"
"Nevertheless, it is also possible to use the HTTP Security Policy like in the example below:"
msgstr ""
"個々のリソースにアクセスできるロールを定義する最も簡単な方法は、 `@RolesAllowed` アノテーションを使用することです。\n"
"ただし、次の例のように HTTP セキュリティーポリシーを使用することもできます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Delay this policy's permission check after the endpoint-specific authentication mechanism has been selected."
msgstr "エンドポイント固有の認証メカニズムの選択後、このポリシーの権限チェックを遅らせます。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Make the `roles1` permission match only the endpoint annotated with the `@AuthorizationCodeFlow` annotation.\n"
"Unannotated endpoints must avoid the delay caused by the `applies-to=JAXRS` option."
msgstr ""
"`roles1` 権限が、 `@AuthorizationCodeFlow` アノテーションが付けられたエンドポイントのみと一致するようにします。\n"
"アノテーションが付いていないエンドポイントは、 `applies-to=JAXRS` オプションによって発生する遅延を回避する必要があります。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "Proactive authentication"
msgstr "プロアクティブ認証"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid ""
"Proactive authentication is enabled in Quarkus by default.\n"
"This means that if an incoming request has a credential, the request will always be authenticated, even if the target page does not require authentication.\n"
"For more information, see the Quarkus xref:security-proactive-authentication.adoc[Proactive authentication] guide."
msgstr ""
"Quarkusでは、デフォルトでプロアクティブ認証が有効になっています。\n"
"受信リクエストに認証情報がある場合、ターゲットページで認証が必要ない場合でも、リクエストは常に認証されます。\n"
"詳細については、Quarkus の xref:security-proactive-authentication.adoc[プロアクティブ認証] ガイドを参照してください。"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "References"
msgstr "リファレンス"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-architecture.adoc[Quarkus Security architecture]"
msgstr "xref:security-architecture.adoc[Quarkus Security アーキテクチャ]"

#: _versions/3.27/guides/security-authentication-mechanisms.adoc
msgid "xref:security-authorize-web-endpoints-reference.adoc[Authorization of web endpoints]"
msgstr "xref:security-authorize-web-endpoints-reference.adoc[ウェブエンドポイントの認可]"
