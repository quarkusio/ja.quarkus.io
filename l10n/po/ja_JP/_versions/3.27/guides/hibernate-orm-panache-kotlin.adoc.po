msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "Simplified Hibernate ORM with Panache and Kotlin"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"Hibernate ORM is the de facto standard Jakarta Persistence (formerly known as JPA) implementation and is well-known in the Java ecosystem. Hibernate ORM with Panache offers a\n"
"new layer atop this familiar framework.  This guide will not dive in to the specifics of either as those are already\n"
"covered in the xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache guide].  In this guide, we'll cover the Kotlin specific changes\n"
"needed to use Hibernate ORM with Panache in your Kotlin-based Quarkus applications."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "When using the Kotlin version of Hibernate ORM with Panache, note that the `PanacheEntity`, `PanacheQuery` and `PanacheRepository` are in a different package: `io.quarkus.hibernate.orm.panache.kotlin`."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "First: an example"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"As we saw in the Hibernate with Panache guide, it allows us to extend the functionality in our entities and repositories (also known as DAOs) with some automatically\n"
"provided functionality.  When using Kotlin, the approach is very similar to what we see in the Java version with a slight\n"
"change or two.  To Panache-enable your entity, you would define it something like:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"As you can see our entities remain simple.  There is, however, a slight difference from the Java version.  The Kotlin\n"
"language doesn't support the notion of static methods in quite the same way as Java does.  Instead, we must use a\n"
"https://kotlinlang.org/docs/tutorials/kotlin-for-py/objects-and-companion-objects.html#companion-objects[companion object]:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"The companion object holds all the methods not related to a specific instance allowing for general management and\n"
"querying bound to a specific type."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"Here there are options, but we've chosen the `lateinit` approach.  This allows us to declare these fields as non-null\n"
"knowing they will be properly assigned either by the constructor (not shown) or by hibernate loading data from the\n"
"database."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"These types differ from the Java types mentioned in those tutorials.  For Kotlin support, all the Panache\n"
"types will be found in the `io.quarkus.hibernate.orm.panache.kotlin` package.  This subpackage allows for the distinction\n"
"between the Java and Kotlin variants and allows for both to be used unambiguously in a single project."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"In the Kotlin version, we've simply moved the bulk of the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[`active record pattern`]\n"
"functionality to the `companion object`.  Apart from this slight change, we can then work with our types in ways that map easily\n"
"from the Java side of world."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "The solution is located in the `hibernate-orm-panache-kotlin-quickstart` link:{quickstarts-tree-url}/hibernate-orm-panache-kotlin-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "Setting up and configuring Hibernate ORM with Panache and Kotlin"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"To get started using Hibernate ORM with Panache and Kotlin, you can, generally, follow the steps laid out in the Java tutorial. The biggest\n"
"change to configuring your project is the Quarkus artifact to include.  You can, of course, keep the Java version if you\n"
"need but if all you need are the Kotlin APIs then include the following dependency instead:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"Note the addition of `-kotlin` on the end. Generally you'll only need this version but if your project will be using\n"
"both Java and Kotlin code, you can safely include both artifacts."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "Using the repository pattern"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "Defining your entity"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "When using the repository pattern, you can define your entities as regular Jakarta Persistence entities."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "Defining your repository"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implement `PanacheRepository`:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"All the operations that are defined on `PanacheEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "Most useful operations"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "All `list` methods have equivalent `stream` versions."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid "The `stream` methods require a transaction to work."
msgstr ""

#: _versions/3.27/guides/hibernate-orm-panache-kotlin.adoc
msgid ""
"For more examples, please consult the xref:hibernate-orm-panache.adoc[Java version] for complete details.  Both APIs\n"
"are the same and work identically except for some Kotlin-specific tweaks to make things feel more natural to\n"
"Kotlin developers.  These tweaks include things like better use of nullability and the lack of `Optional` on API\n"
"methods."
msgstr ""
