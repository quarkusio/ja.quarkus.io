msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-jpa.adoc
msgid "Quarkus Security with Jakarta Persistence"
msgstr "Quarkus SecurityとJakarta Persistence"

#: _versions/3.27/guides/security-jpa.adoc
msgid "You can configure your application to use Jakarta Persistence to store users' identities."
msgstr "ユーザのIDを保存するために、jakarta Persistenceを使用するようにアプリケーションを設定できます。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "Quarkus provides a Jakarta Persistence identity provider, similar to the xref:security-jdbc.adoc[JDBC identity provider]. Jakarta Persistence is suitable for use with the xref:security-basic-authentication.adoc[Basic] and xref:security-authentication-mechanisms.adoc#form-auth[Form-based] Quarkus Security mechanisms, which require username and password credentials."
msgstr "Quarkusは、 xref:security-jdbc.adoc[JDBC IDプロバイダー] と同様に、Jakarta Persistence IDプロバイダーを提供します。Jakarta Persistenceは、ユーザー名とパスワードのクレデンシャルを必要とする、 xref:security-basic-authentication.adoc[Basic] および xref:security-authentication-mechanisms.adoc#form-auth[フォームベース] のQuarkus Securityメカニズムでの使用に適しています。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "The Jakarta Persistence `IdentityProvider` creates a `SecurityIdentity` instance. During user authentication, this instance is used to verify and authorize access requests."
msgstr "Jakarta Persistence `IdentityProvider` は、 `SecurityIdentity` インスタンスを作成します。ユーザ認証の際、このインスタンスはアクセス要求の検証と認可に使用されます。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "For a practical example, see the xref:security-getting-started-tutorial.adoc[Getting started with Security using Basic authentication and Jakarta Persistence] tutorial."
msgstr "実用的な例については、チュートリアル xref:security-getting-started-tutorial.adoc[Basic認証 とJakarta PersistenceによるQuarkus Security入門] を参照してください。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "Jakarta Persistence entity specification"
msgstr "Jakarta Persistenceエンティティ仕様"

#: _versions/3.27/guides/security-jpa.adoc
msgid "Quarkus security offers a Jakarta Persistence integration to collect usernames, passwords, and roles and store them into Jakarta Persistence database entities."
msgstr "Quarkus Securityは、ユーザー名、パスワード、ロールを収集し、Jakarta Persistenceデータベースエンティティに格納するJakarta Persistence統合機能を提供します。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "The following Jakarta Persistence entity specification demonstrates how users' information needs to be stored in a Jakarta Persistence entity and correctly mapped so that Quarkus can retrieve this information from a database."
msgstr "次のJakarta Persistenceエンティティ定義は、Quarkusがデータベースからこの情報を取得できるよう、どのようにユーザの情報をJakarta Persistenceエンティティに格納し、正しくマッピングするかを示しています。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "The `@UserDefinition` annotation must be present on a Jakarta Persistence entity, regardless of whether xref:hibernate-orm-panache.adoc[simplified Hibernate ORM with Panache] is used or not."
msgstr "`@UserDefinition` アノテーションは、 xref:hibernate-orm-panache.adoc[簡略化されたHibernate ORM with Panache] が使用されているかどうかに関係なく、Jakarta Persistenceエンティティに存在する必要があります。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "The `@Username` and `@Password` field types are always `String`."
msgstr "`@Username` と `@Password` のフィールドの型は常に `String` です。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "The `@Roles` field must either be `String`, `Collection<String>`, or a `Collection<X>`, where `X` is an entity class with a single `String` field annotated as `@RolesValue`."
msgstr "`@Roles` フィールドは、 `String` 、 `Collection<String>` 、または `Collection<X>` のいずれかである必要があります。 `X` は、 `@RolesValue` としてアノテーションされた単一の `String` フィールドを持つエンティティクラスです。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "Each `String` role element type is parsed as a comma-separated list of roles."
msgstr "各 `String` ロール要素タイプは、ロールのカンマ区切りリストとしてパースされます。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "The following example demonstrates storing security information by adding annotations to the `user` entity:"
msgstr "次の例では、 `user` エンティティにアノテーションを追加して、セキュリティ情報の保存をデモします:"

#: _versions/3.27/guides/security-jpa.adoc
msgid "The `quarkus-security-jpa` extension initializes only if a single entity is annotated with `@UserDefinition`."
msgstr "`quarkus-security-jpa` エクステンションは、単一のエンティティが `@UserDefinition` でアノテートされている場合にのみ初期化されます。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "Table name. Do not define it as `user`, which is a restricted keyword in most databases."
msgstr "テーブル名。ほとんどのデータベースで制限されているキーワードである `user` としては定義しないでください。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "The `@UserDefinition` annotation must be present on a single entity, either a regular Hibernate ORM entity or a Hibernate ORM with Panache entity."
msgstr "`@UserDefinition` アノテーションは、通常の Hibernate ORM エンティティーまたは Panache エンティティーを含む Hibernate ORM のいずれかの単一のエンティティーに存在する必要があります。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "Indicates the field used for the username."
msgstr "ユーザー名に使用するフィールドを示します。"

#: _versions/3.27/guides/security-jpa.adoc
msgid ""
"Indicates the field used for the password.\n"
"By default, `quarkus-security-jpa` uses bcrypt-hashed passwords, or you can configure plain text or custom passwords instead."
msgstr ""
"パスワードに使用するフィールドを示します。\n"
"デフォルトでは、 `quarkus-security-jpa` は bcrypt-hashed パスワードを使用しますが、代わりにプレーンテキストまたはカスタムパスワードを設定することもできます。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "This indicates the comma-separated list of roles added to the target principal representation attributes."
msgstr "ここでは対象のプリンシパル表現属性に追加されたロールのコンマ区切りリストを示します。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "This method lets you add users while hashing passwords with the proper `bcrypt` hash."
msgstr "この方法では、適切な `bcrypt` ハッシュでパスワードをハッシュしながらユーザーを追加することができます。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "Jakarta Persistence entity as storage of roles"
msgstr "ロールの保存先としてのjakarta Persistenceエンティティ"

#: _versions/3.27/guides/security-jpa.adoc
msgid "Use the following example to store roles inside another Jakarta Persistence entity:"
msgstr "以下の例を使用して、ロールを別のJakarta Persistenceエンティティ内に格納します:"

#: _versions/3.27/guides/security-jpa.adoc
msgid "This example demonstrates storing and accessing roles. To update an existing user or create a new one, annotate `public List<Role> roles` with `@Cascade(CascadeType.ALL)` or choose a specific `CascadeType`."
msgstr "この例では、ロールの格納とアクセスを示します。既存のユーザを更新したり、新しいユーザを作成したりするには、 `public List<Role> roles` を `@Cascade(CascadeType.ALL)` でアノテーションするか、特定の `CascadeType` を選択してください。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "Password storage and hashing"
msgstr "パスワードの保存とハッシュ化"

#: _versions/3.27/guides/security-jpa.adoc
msgid "When developing applications with Quarkus, you can decide how to manage password storage and hashing. You can keep the default password and hashing settings of Quarkus, or you can hash passwords manually."
msgstr "Quarkusでアプリケーションを開発する場合、パスワードの保存とハッシュの管理方法を決定できます。Quarkusのデフォルトのパスワードとハッシュ設定を維持することも、手動でパスワードをハッシュ化することもできます。"

#: _versions/3.27/guides/security-jpa.adoc
msgid ""
"With the default option, passwords are stored and hashed with https://en.wikipedia.org/wiki/Bcrypt[bcrypt] under the\n"
"https://en.wikipedia.org/wiki/Crypt_\\(C)[Modular Crypt Format] (MCF).\n"
"While using MCF, the hashing algorithm, iteration count, and salt are stored as a part of the hashed value.\n"
"As such, we do not need dedicated columns to keep them."
msgstr "デフォルトのオプションでは、パスワードは link:https://en.wikipedia.org/wiki/Bcrypt[bcrypt] で https://en.wikipedia.org/wiki/Crypt_\\(C)[モジュラー暗号フォーマット] （MCF）の下で保存され、ハッシュされます。MCFを使用する場合、ハッシュアルゴリズム、反復回数、ソルトはハッシュ値の一部として保存されます。そのため、それらを保持するための専用カラムは必要ありません。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "In cryptography, a salt is a name for random data used as an additional input to a one-way function that hashes data, a password, or a passphrase."
msgstr "暗号技術において、ソルトとは、データ、パスワード、パスフレーズをハッシュ化する一方向性関数への追加入力として使用されるランダムデータの名称です。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "To represent passwords stored in the database that were hashed by different algorithms, create a class that implements `org.wildfly.security.password.PasswordProvider` as shown in the following example."
msgstr "異なるアルゴリズムでハッシュ化されたデータベースに保存されたパスワードを表現するには、次の例に示すように `org.wildfly.security.password.PasswordProvider` を実装するクラスを作成します。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "The following snippet shows how to set a custom password provider that represents a password that was hashed with the SHA256 hashing algorithm."
msgstr "次のスニペットは、SHA256 ハッシュアルゴリズムでハッシュ化されたパスワードを表すカスタムパスワードプロバイダを設定する方法を示しています。"

#: _versions/3.27/guides/security-jpa.adoc
msgid ""
"To quickly create a hashed password, use `String BcryptUtil.bcryptHash(String password)`, which defaults to creating a random salt and hashing in ten iterations.\n"
"This method also allows specifying the number of iterations and salt used."
msgstr "ハッシュ化されたパスワードを素早く作成するには、 `String BcryptUtil.bcryptHash(String password)` を使ってください。デフォルトではランダムなソルトを作成し、10回繰り返してハッシュ化します。この方法では、繰り返しの回数と使用するソルトを指定することもできます。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "For applications running in a production environment, do not store passwords as plain text."
msgstr "本番環境で動作するアプリケーションでは、パスワードをプレーンテキストとして保存しないでください。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "However, it is possible to store passwords as plain text with the `@Password(PasswordType.CLEAR)` annotation when operating in a test environment."
msgstr "ただし、テスト環境で運用する場合は、 `@Password(PasswordType.CLEAR)` のアノテーションでパスワードを平文で保存することが可能です。"

#: _versions/3.27/guides/security-jpa.adoc
msgid ""
"The xref:hibernate-orm.adoc#multitenancy[Hibernate Multitenancy] is supported, and you can store the user entity in a persistence unit with enabled multitenancy.\n"
"However, if your `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` must access the `io.vertx.ext.web.RoutingContext` to resolve request details, you must disable proactive authentication.\n"
"For more information about proactive authentication, see the Quarkus xref:security-proactive-authentication.adoc[Proactive authentication] guide."
msgstr ""
"xref:hibernate-orm.adoc#multitenancy[Hibernate マルチテナンシー] がサポートされているので、マルチテナンシーを有効にした永続ユニットにユーザー・エンティティを格納できます。\n"
"ただし、 `io.quarkus.hibernate.orm.runtime.tenant.TenantResolver` 、 `io.vertx.ext.web.RoutingContext` にアクセスしてリクエストの詳細を解決する必要がある場合は、プロアクティブ認証を無効にする必要があります。プロアクティブ認証の詳細については、Quarkus xref:security-proactive-authentication.adoc[プロアクティブ認証] ガイドを参照してください。"

#: _versions/3.27/guides/security-jpa.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.27/guides/security-jpa.adoc
msgid "References"
msgstr "リファレンス"

#: _versions/3.27/guides/security-jpa.adoc
msgid "xref:security-getting-started-tutorial.adoc[Getting started with Security by using Basic authentication and Jakarta Persistence]"
msgstr "xref:security-getting-started-tutorial.adoc[Basic認証とJakarta Persistenceを使ったセキュリティ入門]"

#: _versions/3.27/guides/security-jpa.adoc
msgid "xref:security-identity-providers.adoc[Identity providers]"
msgstr "xref:security-identity-providers.adoc[アイデンティティ・プロバイダー]"

#: _versions/3.27/guides/security-jpa.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"
