msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Using OAuth2 RBAC"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "This guide explains how your Quarkus application can utilize OAuth2 tokens to provide secured access to the Jakarta REST (formerly known as JAX-RS) endpoints."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"OAuth2 is an authorization framework that enables applications to obtain access to an HTTP resource on behalf of a user.\n"
"It can be used to implement an application authentication mechanism based on tokens by delegating to an external server (the authentication server) the user authentication and providing a token for the authentication context."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "This extension provides a light-weight support for using the opaque Bearer Tokens and validating them by calling an introspection endpoint."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"If the OAuth2 Authentication server provides JWT Bearer Tokens, consider using either xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] or xref:security-jwt.adoc[SmallRye JWT] extensions instead.\n"
"OpenID Connect extension has to be used if the Quarkus application needs to authenticate the users using OIDC Authorization Code Flow. For more information, see the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Clone the Git repository: git clone https://github.com/quarkusio/quarkus-quickstarts.git, or download an archive."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"The solution is located in the `security-oauth2-quickstart` link:{quickstarts-tree-url}/security-oauth2-quickstart[directory].\n"
"It contains a very simple UI to use the Jakarta REST resources created here, too."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "This command generates a project and imports the `elytron-security-oauth2` extension, which includes the OAuth2 opaque token support."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "If you don't want to use the Maven plugin, you can just include the dependency in your build file:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Examine the Jakarta REST resource"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Create the `src/main/java/org/acme/security/oauth2/TokenSecuredResource.java` file with the following content:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "This is a basic REST endpoint that does not have any of the {extension-name} specific features, so let's add some."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "We will use the JSR 250 common security annotations, they are described in the xref:security-overview.adoc[Using Security] guide."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "`@PermitAll` indicates that the given endpoint is accessible by any caller, authenticated or not."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Here we inject the Jakarta REST `SecurityContext` to inspect the security state of the call."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Here we obtain the current request user/caller `Principal`. For an unsecured call this will be null, so we build the username by checking `caller` against null."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "The reply we build up makes use of the caller name, the `isSecure()` and `getAuthenticationScheme()` states of the request `SecurityContext`."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Setting up application.properties"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "You need to configure your application with the following minimal properties:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"You need to specify the introspection URL of your authentication server and the `client-id` / `client-secret` that your application will use to authenticate itself to the authentication server. +\n"
"The extension will then use this information to validate the token and recover the information associated with it."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "For all configuration properties, see the <<config-reference>> section at the end of this guide."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Run the application"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Now we are ready to run our application. Use:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Now that the REST endpoint is running, we can access it using a command line tool like curl:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "We have not provided any token in our request, so we would not expect that there is any security state seen by the endpoint, and the response is consistent with that:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "username is anonymous"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "`isSecure` is false as https is not used"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "`authScheme` is null"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Securing the endpoint"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "So now let's actually secure something. Take a look at the new endpoint method `helloRolesAllowed` in the following:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "This new endpoint will be located at `/secured/roles-allowed`"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "`@RolesAllowed` indicates that the given endpoint is accessible by a caller if they have either an \"Echoer\" or a \"Subscriber\" role assigned."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "After you make this addition to your `TokenSecuredResource`, try `curl -v http://127.0.0.1:8080/secured/roles-allowed; echo` to attempt to access the new endpoint. Your output should be:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Excellent, we have not provided any OAuth2 token in the request, so we should not be able to access the endpoint, and we were not. Instead, we received an HTTP 401 Unauthorized error. We need to obtain and pass in a valid OAuth2 token to access that endpoint. There are two steps to this, 1) configuring our {extension-name} extension with information on how to validate the token, and 2) generating a matching token with the appropriate claims."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Generating a token"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "You need to obtain the token from a standard OAuth2 authentication server (https://www.keycloak.org/[Keycloak] for example) using the token endpoint."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "You can find below a curl example of such call for a `client_credential` flow:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "It should respond something like that..."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Finally, make a secured request to /secured/roles-allowed"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Now let's use this to make a secured request to the `/secured/roles-allowed` endpoint"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Success! We now have:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "a non-anonymous caller name of client_id"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "an authentication scheme of OAuth2"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Roles mapping"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Roles are mapped from one of the claims of the introspection endpoint response. By default, it's the `scope` claim. Roles are obtained by splitting the claim with a space separator. If the claim is an array, no splitting is done, the roles are obtained from the array."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "You can customize the name of the claim to use for the roles with the `quarkus.oauth2.role-claim` property."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Package and run the application"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "As usual, the application can be packaged using:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "And executed using `java -jar target/quarkus-app/quarkus-run.jar`:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "You can also generate the native executable with:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Integration testing"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n"
"xref:security-properties.adoc[Properties based security] extension for your test, or mock an authorization server using Wiremock."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "First, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/org.wiremock/wiremock[here]."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n"
"annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n"
"values that Quarkus will use."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "For more details about `@QuarkusTestResource` refer to xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `MockAuthorizationServerTestResource` like so:"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Launch Wiremock."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Configure Wiremock to stub the calls to `/introspect` by returning an OAuth2 introspect response. You need to customize this line to return what's needed for your application (at least the scope property as roles are derived from the scope)."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "As the `start` method returns configuration that applies for tests, we set the `quarkus.oauth2.introspection-url` property that controls the URL of the introspect endpoint used by the OAuth2 extension."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "When all tests have finished, shutdown Wiremock."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Your test class needs to be annotated like with `@QuarkusTestResource(MockAuthorizationServerTestResource.class)` to use this `QuarkusTestResourceLifecycleManager`."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Below is an example of a test that uses the `MockAuthorizationServerTestResource`."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Use the previously created `MockAuthorizationServerTestResource` as a Quarkus test resource."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Define whatever token you want, it will not be validated by the OAuth2 mock authorization server."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Use this token inside the `Authorization` header to trigger OAuth2 authentication."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "`@QuarkusTestResource` applies to all tests, not just `TokenSecuredResourceTest`."
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "https://tools.ietf.org/html/rfc6749[OAuth2]"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Configuration Reference"
msgstr ""

#: _versions/3.27/guides/security-oauth2.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
