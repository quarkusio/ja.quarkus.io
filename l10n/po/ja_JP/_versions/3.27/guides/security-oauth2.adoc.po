msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Using OAuth2 RBAC"
msgstr "OAuth2 RBACの使用"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "This guide explains how your Quarkus application can utilize OAuth2 tokens to provide secured access to the Jakarta REST (formerly known as JAX-RS) endpoints."
msgstr "このガイドでは、QuarkusアプリケーションがOAuth2トークンを利用して、Jakarta REST（旧称JAX-RS）エンドポイントへのセキュアなアクセスを提供する方法について説明します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"OAuth2 is an authorization framework that enables applications to obtain access to an HTTP resource on behalf of a user.\n"
"It can be used to implement an application authentication mechanism based on tokens by delegating to an external server (the authentication server) the user authentication and providing a token for the authentication context."
msgstr "OAuth2は、アプリケーションがユーザーに代わってHTTPリソースへのアクセスを取得することを可能にする認可フレームワークです。ユーザー認証を外部サーバー(認証サーバー)に委譲し、認証コンテキストにトークンを提供することで、トークンに基づくアプリケーション認証の仕組みを実装することができます。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "This extension provides a light-weight support for using the opaque Bearer Tokens and validating them by calling an introspection endpoint."
msgstr "このエクステンションは、不透明なベアラートークンを使用してイントロスペクションエンドポイントを呼び出して検証するための軽量なサポートを提供します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"If the OAuth2 Authentication server provides JWT Bearer Tokens, consider using either xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] or xref:security-jwt.adoc[SmallRye JWT] extensions instead.\n"
"OpenID Connect extension has to be used if the Quarkus application needs to authenticate the users using OIDC Authorization Code Flow. For more information, see the xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications] guide."
msgstr "OAuth2認証サーバーがJWTベアラートークンを提供する場合は、代わりに xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証] または xref:security-jwt.adoc[SmallRye JWT] エクステンションの使用を検討してください。QuarkusアプリケーションでOIDC認可コードフローを使用してユーザーを認証する必要がある場合は、OpenID Connectエクステンションを使用する必要があります。詳細については、 xref:security-oidc-code-flow-authentication.adoc[OIDCコードフローメカニズムによるWebアプリケーションの保護] ガイドを参照してください。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Clone the Git repository: git clone https://github.com/quarkusio/quarkus-quickstarts.git, or download an archive."
msgstr "Git リポジトリのクローン: git clone https://github.com/quarkusio/quarkus-quickstarts.git 、またはアーカイブをダウンロードしてください。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"The solution is located in the `security-oauth2-quickstart` link:{quickstarts-tree-url}/security-oauth2-quickstart[directory].\n"
"It contains a very simple UI to use the Jakarta REST resources created here, too."
msgstr "ソリューションは `security-oauth2-quickstart` link:{quickstarts-tree-url}/security-oauth2-quickstart[ディレクトリ] にあります。ここで作成された Jakarta REST リソースを使用するための非常にシンプルな UI も含まれています。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "This command generates a project and imports the `elytron-security-oauth2` extension, which includes the OAuth2 opaque token support."
msgstr "このコマンドはプロジェクトを生成し、OAuth2のopaqueトークンのサポートを含む `elytron-security-oauth2` エクステンションをインポートします。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "If you don't want to use the Maven plugin, you can just include the dependency in your build file:"
msgstr "Mavenプラグインを使用したくない場合は、ビルドファイルに依存関係を含めるだけでよいです:"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Examine the Jakarta REST resource"
msgstr "Jakarta REST リソースの調査"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Create the `src/main/java/org/acme/security/oauth2/TokenSecuredResource.java` file with the following content:"
msgstr "以下の内容で  `src/main/java/org/acme/security/oauth2/TokenSecuredResource.java` ファイルを作成します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "This is a basic REST endpoint that does not have any of the {extension-name} specific features, so let's add some."
msgstr "これは {extension-name} 特有の機能を持たない基本的なRESTエンドポイントなので、いくつか追加してみましょう。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "We will use the JSR 250 common security annotations, they are described in the xref:security-overview.adoc[Using Security] guide."
msgstr "JSR250の一般的なセキュリティアノテーションを使用します。これらのアノテーションは、 xref:security-overview.adoc[セキュリティの使用] ガイドで説明されています。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "`@PermitAll` indicates that the given endpoint is accessible by any caller, authenticated or not."
msgstr "`@PermitAll` は、認証されているかどうかに関わらず、どのような呼出元からでもアクセス可能であることを示しています。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Here we inject the Jakarta REST `SecurityContext` to inspect the security state of the call."
msgstr "ここでは、呼び出しのセキュリティ状態を検査するために、jakarta REST `SecurityContext` を注入しています。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Here we obtain the current request user/caller `Principal`. For an unsecured call this will be null, so we build the username by checking `caller` against null."
msgstr "ここでは、現在のリクエストの ユーザー/呼出元である `Principal` を取得します。セキュリティー保護されていない呼出の場合、これはnullになりますので、 `caller` をnullかチェックしてユーザー名を作成します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "The reply we build up makes use of the caller name, the `isSecure()` and `getAuthenticationScheme()` states of the request `SecurityContext`."
msgstr "私たちが構築した応答では 呼出元の名前、リクエストの `SecurityContext` の `isSecure()` と `getAuthenticationScheme()` の状態を利用しています。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Setting up application.properties"
msgstr "application.propertiesの設定"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "You need to configure your application with the following minimal properties:"
msgstr "以下の最小限のプロパティーでアプリケーションを設定する必要があります。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"You need to specify the introspection URL of your authentication server and the `client-id` / `client-secret` that your application will use to authenticate itself to the authentication server. +\n"
"The extension will then use this information to validate the token and recover the information associated with it."
msgstr "認証サーバーの イントロスペクションURL と、アプリケーションが認証サーバーへの認証に使用する `client-id` / `client-secret` を指定する必要があります。+ エクステンションは、この情報を使ってトークンを検証し、トークンに関連する情報を復元します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "For all configuration properties, see the <<config-reference>> section at the end of this guide."
msgstr "すべての設定プ ロパテ ィ については、 こ のガ イ ド の最後にあ る <<config-reference>> セ ク シ ョ ン を参照 し て く だ さ い。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Run the application"
msgstr "アプリケーションの実行"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Now we are ready to run our application. Use:"
msgstr "これで、アプリケーションを実行する準備が整いました。以下を使用してください。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Now that the REST endpoint is running, we can access it using a command line tool like curl:"
msgstr "REST エンドポイントが実行されているので、curl のようなコマンドラインツールを使ってアクセスすることができます。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "We have not provided any token in our request, so we would not expect that there is any security state seen by the endpoint, and the response is consistent with that:"
msgstr "リクエストにトークンを提供していないので、エンドポイントが見ているセキュリティー状態があるとは期待できず、レスポンスもそれと一致しています。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "username is anonymous"
msgstr "ユーザー名は anonymous (匿名) です。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "`isSecure` is false as https is not used"
msgstr "`isSecure` は https が使用されていないため false です。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "`authScheme` is null"
msgstr "`authScheme` はnullです。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Securing the endpoint"
msgstr "エンドポイントのセキュア化"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "So now let's actually secure something. Take a look at the new endpoint method `helloRolesAllowed` in the following:"
msgstr "では実際に何かを保護してみましょう。下記の新しいエンドポイントメソッド `helloRolesAllowed` を見てみましょう。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "This new endpoint will be located at `/secured/roles-allowed`"
msgstr "この新しいエンドポイントは `/secured/roles-allowed` に存在します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "`@RolesAllowed` indicates that the given endpoint is accessible by a caller if they have either an \"Echoer\" or a \"Subscriber\" role assigned."
msgstr "`@RolesAllowed` は指定されたエンドポイントに、呼び出し側が “Echoer” または “Subscriber” のいずれかのロールを割り当てている場合にアクセス可能であることを示します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "After you make this addition to your `TokenSecuredResource`, try `curl -v http://127.0.0.1:8080/secured/roles-allowed; echo` to attempt to access the new endpoint. Your output should be:"
msgstr "あなたの `TokenSecuredResource` に追加した後、 `curl -v http://127.0.0.1:8080/secured/roles-allowed; echo` を試行し、新しいエンドポイントへのアクセスを試みて下さい。出力は次のようになります。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Excellent, we have not provided any OAuth2 token in the request, so we should not be able to access the endpoint, and we were not. Instead, we received an HTTP 401 Unauthorized error. We need to obtain and pass in a valid OAuth2 token to access that endpoint. There are two steps to this, 1) configuring our {extension-name} extension with information on how to validate the token, and 2) generating a matching token with the appropriate claims."
msgstr "素晴らしいことに、リクエストでOAuth2トークンを提供していないので、エンドポイントにアクセスできないはずですが、そうではありませんでした。代わりに、HTTP 401 Unauthorized エラーが発生しました。エンドポイントにアクセスするためには、有効な OAuth2 トークンを取得して渡す必要があります。1) {extension-name} エクステンションにトークンの検証方法を設定する、2) 適切なクレームを含む一致するトークンを生成する。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Generating a token"
msgstr "トークンの生成"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "You need to obtain the token from a standard OAuth2 authentication server (https://www.keycloak.org/[Keycloak] for example) using the token endpoint."
msgstr "トークンエンドポイントを使用して、標準的なOAuth2認証サーバー link:https://www.keycloak.org/[(Keycloak] など)からトークンを取得する必要があります。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "You can find below a curl example of such call for a `client_credential` flow:"
msgstr "あなたは、 `client_credential` フローのためのそのような呼び出しのcurlの例を以下に見つけることができます。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "It should respond something like that..."
msgstr "これは以下のような反応をする筈です"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Finally, make a secured request to /secured/roles-allowed"
msgstr "最後に、/secured/roles-allowed へのセキュアなリクエストを行います。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Now let's use this to make a secured request to the `/secured/roles-allowed` endpoint"
msgstr "これを使って `/secured/roles-allowed` エンドポイントに安全なリクエストをしてみましょう。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Success! We now have:"
msgstr "成功! これで、以下が得られます"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "a non-anonymous caller name of client_id"
msgstr "client_id の匿名でない呼出元名"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "an authentication scheme of OAuth2"
msgstr "OAuth2 の認証方式"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Roles mapping"
msgstr "ロールマッピング"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Roles are mapped from one of the claims of the introspection endpoint response. By default, it's the `scope` claim. Roles are obtained by splitting the claim with a space separator. If the claim is an array, no splitting is done, the roles are obtained from the array."
msgstr "ロールは、イントロスペクションのエンドポイントレスポンスのクレームの1つからマッピングされます。デフォルトでは、 `scope` クレームです。ロールはクレームをスペース区切りで分割することで得られます。クレームが配列の場合、分割は行われず、ロールは配列から取得されます。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "You can customize the name of the claim to use for the roles with the `quarkus.oauth2.role-claim` property."
msgstr "`quarkus.oauth2.role-claim` プロパティーを使用して、ロールに使用するクレームの名前をカスタマイズすることができます。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "And executed using `java -jar target/quarkus-app/quarkus-run.jar`:"
msgstr "そして、 `java -jar target/quarkus-app/quarkus-run.jar` を使って実行されます。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "You can also generate the native executable with:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Integration testing"
msgstr "統合テスト"

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"If you don't want to use a real OAuth2 authorization server for your integration tests, you can use the\n"
"xref:security-properties.adoc[Properties based security] extension for your test, or mock an authorization server using Wiremock."
msgstr "統合テストに本物の OAuth2 認可サーバーを使いたくない場合は、テストに xref:security-properties.adoc[プロパティベースのセキュリティ] エクステンションを使うか、Wiremock を使って認可サーバーをモックすることができます。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "First, Wiremock needs to be added as a test dependency. For a Maven project that would happen like so:"
msgstr "最初に、 Wiremock をテストの依存関係として追加する必要があります。 Maven プロジェクトの場合は以下のようになります。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/org.wiremock/wiremock[here]."
msgstr "適切なWiremockバージョンを使用してください。利用可能なすべてのバージョンは、 link:https://search.maven.org/artifact/org.wiremock/wiremock[こちら] をご覧ください。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid ""
"In Quarkus tests when some service needs to be started before the Quarkus tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource`\n"
"annotation to specify a `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start the service and supply configuration\n"
"values that Quarkus will use."
msgstr "Quarkusのテストを実行する前にサービスを開始する必要がある場合、Quarkusのテストでは、 `@io.quarkus.test.common.QuarkusTestResource` アノテーションを利用して、サービスを開始できる `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` を指定し、Quarkusが使用する設定値を提供します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "For more details about `@QuarkusTestResource` refer to xref:getting-started-testing.adoc#quarkus-test-resource[this part of the documentation]."
msgstr "`@QuarkusTestResource` の詳細については、 xref:getting-started-testing.adoc#quarkus-test-resource[ドキュメントの当該箇所] を参照してください。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Let's create an implementation of `QuarkusTestResourceLifecycleManager` called `MockAuthorizationServerTestResource` like so:"
msgstr "このように `QuarkusTestResourceLifecycleManager` の実装である `MockAuthorizationServerTestResource` を作成してみましょう。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "The `start` method is invoked by Quarkus before any test is run and returns a `Map` of configuration properties that apply during the test execution."
msgstr "`start` メソッドは、テストを実行する前にQuarkusによって呼び出され、テスト実行中に適用される設定プロパティーの `Map` を返します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Launch Wiremock."
msgstr "Wiremockを起動します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Configure Wiremock to stub the calls to `/introspect` by returning an OAuth2 introspect response. You need to customize this line to return what's needed for your application (at least the scope property as roles are derived from the scope)."
msgstr "OAuth2のイントロスペクトレスポンスを返すことで、 `/introspect` への呼び出しをスタブ化するように Wiremock を設定します。この行をカスタマイズして、アプリケーションに必要なものを返すようにする必要があります (ロールはスコープから派生しているので、少なくともスコープのプロパティーを)。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "As the `start` method returns configuration that applies for tests, we set the `quarkus.oauth2.introspection-url` property that controls the URL of the introspect endpoint used by the OAuth2 extension."
msgstr "`start` メソッドはテストに適用する設定を返すので、OAuth2 エクステンションで使用する introspect エンドポイントの URL を制御する `quarkus.oauth2.introspection-url` プロパティーを設定します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "When all tests have finished, shutdown Wiremock."
msgstr "すべてのテストが終了したら、Wiremockをシャットダウンします。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Your test class needs to be annotated like with `@QuarkusTestResource(MockAuthorizationServerTestResource.class)` to use this `QuarkusTestResourceLifecycleManager`."
msgstr "この `QuarkusTestResourceLifecycleManager` を使用するためには、テストクラスに `@QuarkusTestResource(MockAuthorizationServerTestResource.class)` のようなアノテーションを付ける必要があります。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Below is an example of a test that uses the `MockAuthorizationServerTestResource`."
msgstr "以下は、 `MockAuthorizationServerTestResource` を使用したテストの例です。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Use the previously created `MockAuthorizationServerTestResource` as a Quarkus test resource."
msgstr "以前に作成した `MockAuthorizationServerTestResource` をQuarkusのテストリソースとして使用します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Define whatever token you want, it will not be validated by the OAuth2 mock authorization server."
msgstr "任意のトークンを定義してください。OAuth2のモック認可サーバーでは検証されません。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Use this token inside the `Authorization` header to trigger OAuth2 authentication."
msgstr "このトークンを `Authorization` ヘッダ内で使用して、OAuth2 認証を開始します。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "`@QuarkusTestResource` applies to all tests, not just `TokenSecuredResourceTest`."
msgstr "`@QuarkusTestResource` は `TokenSecuredResourceTest` だけでなく、すべてのテストに適用されます。"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "References"
msgstr "リファレンス"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "https://tools.ietf.org/html/rfc6749[OAuth2]"
msgstr "https://tools.ietf.org/html/rfc6749[OAuth2]"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "Configuration Reference"
msgstr "設定リファレンス"

#: _versions/3.27/guides/security-oauth2.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
