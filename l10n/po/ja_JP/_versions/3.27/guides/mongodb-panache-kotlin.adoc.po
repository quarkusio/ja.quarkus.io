msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "Simplified MongoDB with Panache and Kotlin"
msgstr "シンプルになったMongoDB with PanacheとKotlin"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"MongoDB is a well known NoSQL Database that is widely used. MongoDB with Panache offers a\n"
"new layer atop this familiar framework.  This guide will not dive in to the specifics of either as those are already\n"
"covered in the xref:mongodb-panache.adoc[MongoDB with Panache guide].  In this guide, we'll cover the Kotlin specific changes\n"
"needed to use MongoDB with Panache in your Kotlin-based Quarkus applications."
msgstr "MongoDBは、広く利用されている有名なNoSQLデータベースです。MongoDB with Panacheは、このよく知られたフレームワークの上に新しいレイヤーを提供します。このガイドでは、MongoDB with Panache  link:mongodb-panache.html[MongoDB with Panache] についてはすでに説明されているため詳細については説明しません。このガイドでは、KotlinベースのQuarkusアプリケーションでMongoDB with Panacheを使用するために必要なKotlin固有の変更点について説明します。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "First: an example"
msgstr "最初に:例"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"As we saw in the MongoDB with Panache guide, it allows us to extend the functionality in our entities and repositories (also known as DAOs) with some automatically\n"
"provided functionality.  When using Kotlin, the approach is very similar to what we see in the Java version with a slight\n"
"change or two.  To Panache-enable your entity, you would define it something like:"
msgstr "MongoDB with Panacheガイドで見たように、これによってエンティティやリポジトリ(DAOとも呼ばれる)の機能を、自動的に提供される機能で拡張することができます。Kotlin を使っている場合は、Java 版と同じようなアプローチになりますが、若干の変更があります。エンティティをPanache対応にするには、次のように定義します。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"As you can see our entities remain simple.  There is, however, a slight difference from the Java version.  The Kotlin\n"
"language doesn't support the notion of static methods in quite the same way as Java does.  Instead, we must use a\n"
"https://kotlinlang.org/docs/tutorials/kotlin-for-py/objects-and-companion-objects.html#companion-objects[companion object]:"
msgstr "ご覧のように、私たちのエンティティーはシンプルなままです。しかし、Java版とは少し違いがあります。Kotlin 言語は Java のように静的メソッドの概念をサポートしていません。その代わり、 link:https://kotlinlang.org/docs/tutorials/kotlin-for-py/objects-and-companion-objects.html#companion-objects[コンパニオンオブジェクト] を使わなければなりません。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"The companion object holds all the methods not related to a specific instance allowing for general management and\n"
"querying bound to a specific type."
msgstr "コンパニオンオブジェクトは、特定のインスタンスに関連しないすべてのメソッドを保持し、特定の型にバインドされた一般的な管理とクエリを可能にします。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"Here there are options, but we've chosen the `lateinit` approach.  This allows us to declare these fields as non-null\n"
"knowing they will be properly assigned either by the constructor (not shown) or by the MongoDB POJO codec loading data from the\n"
"database."
msgstr "ここでは選択肢がありますが、 `lateinit` の方法を選びました。これにより、これらのフィールドを非 null と宣言しておけば、 コンストラクタ (コードには表れていません) や MongoDB POJO コーデックがデータベースからデータを読み込む際に適切に割り当てられることがわかります。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"These types differ from the Java types mentioned in those tutorials.  For Kotlin support, all the Panache\n"
"types will be found in the `io.quarkus.mongodb.panache.kotlin` package.  This subpackage allows for the distinction\n"
"between the Java and Kotlin variants and allows for both to be used unambiguously in a single project."
msgstr "これらの型は、これらのチュートリアルで述べられているJavaの型とは異なります。Kotlinをサポートするために、Panacheのすべての型は `io.quarkus.mongodb.panache.kotlin` パッケージに含まれています。このサブパッケージでは、JavaとKotlinの型を区別することができ、1つのプロジェクトで両方を明確に使用することができます。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"In the Kotlin version, we've simply moved the bulk of the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[`active record pattern`]\n"
"functionality to the `companion object`.  Apart from this slight change, we can then work with our types in ways that map easily\n"
"from the Java side of world."
msgstr "Kotlin版では、単純に link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[`active record pattern`] の機能を `companion object` に追加しました。このわずかな変更を別にすれば、私たちは、世界のJava側から簡単にマップする方法で私たちの型を使用して作業することができます。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "Defining your entity"
msgstr "エンティティの定義"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "When using the repository pattern, you can define your entities as regular POJO."
msgstr "リポジトリパターンを使用する場合は、エンティティを通常のPOJOとして定義することができます。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "Defining your repository"
msgstr "リポジトリの定義"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"When using Repositories, you get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implement `PanacheMongoRepository`:"
msgstr "リポジトリを使用する場合、 `PanacheMongoRepository` を実装させることで、アクティブレコードパターンとまったく同じ便利なメソッドをリポジトリに注入することができます。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"All the operations that are defined on `PanacheMongoEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheMongoEntityBase` で定義されているすべての操作は、あなたのリポジトリで利用できます。そのため、これを使用することは、注入する必要があることを除けば、active record パターンを使用することとまったく同じです。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "Most useful operations"
msgstr "最も便利な操作"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書くことで実行可能な最も一般的な操作は以下の通りです。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "All `list` methods have equivalent `stream` versions."
msgstr "すべての `list` メソッドは、同等の `stream` バージョンがあります。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"For more examples, please consult the xref:mongodb-panache.adoc[Java version] for complete details.  Both APIs\n"
"are the same and work identically except for some Kotlin-specific tweaks to make things feel more natural to\n"
"Kotlin developers.  These tweaks include things like better use of nullability and the lack of `Optional` on API\n"
"methods."
msgstr "より詳しい例については、 link:mongodb-panache.html[Java版]を参照してください。どちらのAPIも同じで、Kotlin開発者がより自然に感じられるようにKotlin特有の調整を行っている以外は、同じように動作します。これらの調整には、nullabilityの使用方法の改善や、APIメソッドに `Optional` を使用しないことなどが含まれます。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "Setting up and configuring MongoDB with Panache"
msgstr "Panache による MongoDB のセットアップおよび設定"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"To get started using MongoDB with Panache with Kotlin, you can, generally, follow the steps laid out in the Java tutorial.  The biggest\n"
"change to configuring your project is the Quarkus artifact to include.  You can, of course, keep the Java version if you\n"
"need but if all you need are the Kotlin APIs then include the following dependency instead:"
msgstr "MongoDB with PanacheをKotlinで使い始めるには、一般的にはJavaのチュートリアルで説明した手順を踏むことができます。プロジェクトの設定で最も大きな変更点は、インクルードするQuarkusのアーティファクトです。もちろん、必要であればJavaバージョンを残すこともできますが、Kotlin APIだけが必要であれば、代わりに以下の依存関係をインクルードします。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid ""
"Note the addition of `-kotlin` on the end.  Generally you'll only need this version but if your project will be using\n"
"both Java and Kotlin code, you can safely include both artifacts."
msgstr "最後に `-kotlin` が追加されていることに注意してください。通常はこのバージョンのみが必要ですが、プロジェクトでJavaとKotlinの両方のコードを使用する場合は、両方のアーティファクト含めても大丈夫です。"

#: _versions/3.27/guides/mongodb-panache-kotlin.adoc
msgid "build.gradle"
msgstr "build.gradle"
