msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/appcds.adoc
msgid "AppCDS"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "This reference guide explains how to enable Application Class Data Sharing in your Quarkus applications."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "What is Application Class Data Sharing (AppCDS)?"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid ""
"link:https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html#application-class-data-sharing[Application Class Data Sharing] is a JVM feature that helps reduce the startup time and memory footprint of a JVM application.\n"
"This is achieved by having the JVM create a pre-processed shared archived of classes that are loaded at startup time.\n"
"As these classes\n"
"are loaded every time the application starts, AppCDS is a conceptually simple way of improving the application startup time,\n"
"without the application itself having to be coded or configured in a specific way.\n"
"How much of an improvement depends on many factors, such as the number of classes loaded, the underlying hardware etc."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "Vanilla AppCDS generation"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "The main downside of creating AppCDS manually for an application is that their generation requires launching the application with special flags and obtaining the archive in a step before the application is deployed to production."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "The exact process depends on the JVM version being used as newer JVM have incrementally made the process easier."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "This fact makes AppCDS difficult to use for real world deployments where a CI pipeline is responsible for building and deploying applications."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "AppCDS in Quarkus"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "Creating the archive"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid ""
"Quarkus makes AppCDS generation as simple as setting the `quarkus.package.jar.appcds.enabled` configuration property to `true`.\n"
"For an example Quarkus application using Maven (assuming it is located in `/tmp/code-with-quarkus`), the AppCDS archive can be generated by simply building the application like so:"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "When the build completes, the output will contain (among other things) the following:"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "If we take a look at `/tmp/code-with-quarkus/target/quarkus-app`, among the other files, we see `app-cds.jsa`, which is the generated AppCDS archive."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "Using the archive"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "Using the archive is done by using the `-XX:SharedArchiveFile` flag. However, a few caveats apply:"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "The paths to the Quarkus jar file and the AppCDS archive need to be exactly the same as those Quarkus used to build the archive"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "The version of the JVM used to run the application must be **exactly** the same as the one used to build the Quarkus application."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "Assuming we are using the same JVM to run the application as we used to build the application, we can launch the application like so:"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "The JVM is resilient. Faced with a situation where the archive file is not usable (for whatever reason) it will simply disable the AppCDS feature."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "If it is desirable to simply halt the execution when the archive is not usable, the following command line invocation can be used:"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "Given what was mentioned above about how the application needs to be launched in order for the archive to be built, the question arises of how Quarkus deals with this situation."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid ""
"The answer is that at application build time, right after the application archive is built, Quarkus launches the application, but only the parts of the launch process that are safe are run.\n"
"More specifically, the application is run up until the steps that actually open sockets or run application logic."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid ""
"This results in an archive generation process that on one hand is completely safe, but on the other hand is unable to archive every single class that the application might need at boot time.\n"
"As a result, users are expected to get a slightly more effective archive if they manually go through the hoops of generating the AppCDS archive."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "AppCDS has improved significantly in the latest JDK releases. This means that to ensure the best possible improvements from it, make sure your projects targets the highest possible Java version (ideally 17 or 21)."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid ""
"Starting with JDK 24, the JVM provides an evolution of the class-data sharing in the form of the AOT cache.\n"
"If you are building an application that will target JDK 24+ you can take advantage of this feature by adding the following system property when packaging your application:"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid ""
"The result of this flag (plus the `-Dquarkus.package.jar.appcds.enabled=true` original one) is the creation of an AOT cache file\n"
"named `app.aot`."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "You can use this AOT cache when launching the application like so:"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "Usage in containers"
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "When building container images using the `quarkus-container-image-jib` extension, Quarkus automatically takes care of all the steps needed to generate the archive and make it usable at runtime in the container."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid "This way, by simply setting `quarkus.package.jar.appcds.enabled` to `true`, containers using the generated image can benefit from a slight reduction in startup time and memory usage."
msgstr ""

#: _versions/3.27/guides/appcds.adoc
msgid ""
"You may see that Quarkus starts a container to generate the AppCDS archive.\n"
"It does this to ensure that the Java version of the build aligns with that of the generated container image.\n"
"It is possible to opt out of this by setting `quarkus.package.jar.appcds.use-container` to `false`.\n"
"In that case, it is your responsibility to ensure that the Java version that will run the Quarkus application matches that of the machine building it."
msgstr ""
