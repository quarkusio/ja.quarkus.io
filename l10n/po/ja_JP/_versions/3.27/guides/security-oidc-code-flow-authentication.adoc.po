msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "OpenID Connect authorization code flow mechanism for protecting web applications"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "To protect your web applications, you can use the industry-standard OpenID Connect (OIDC) Authorization Code Flow mechanism provided by the Quarkus OIDC extension."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Overview of the OIDC authorization code flow mechanism"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus OpenID Connect (OIDC) extension can protect application HTTP endpoints by using the OIDC Authorization Code Flow mechanism supported by OIDC-compliant authorization servers, such as link:https://www.keycloak.org[Keycloak]."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The Authorization Code Flow mechanism authenticates users of your web application by redirecting them to an OIDC provider, such as Keycloak, to log in.\n"
"After authentication, the OIDC provider redirects the user back to the application with an authorization code that confirms that authentication was successful.\n"
"Then, the application exchanges this code with the OIDC provider for an ID token (which represents the authenticated user), an access token, and a refresh token to authorize the user's access to the application."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The following diagram outlines the Authorization Code Flow mechanism in Quarkus."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Authorization code flow mechanism in Quarkus"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus user requests access to a Quarkus `web-app` application."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus web-app redirects the user to the authorization endpoint, that is, the OIDC provider for authentication."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC provider redirects the user to a login and authentication prompt."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "At the prompt, the user enters their user credentials."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC provider authenticates the user credentials entered and, if successful, issues an authorization code and redirects the user back to the Quarkus web-app with the code included as a query parameter."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The Quarkus web-app exchanges this authorization code with the OIDC provider for ID, access, and refresh tokens."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The authorization code flow is completed and the Quarkus web-app uses the tokens issued to access information about the user and grants the relevant role-based authorization to that user.\n"
"The following tokens are issued:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "ID token: The Quarkus `web-app` application uses the user information in the ID token to enable the authenticated user to log in securely and to provide role-based access to the web application."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Access token: The Quarkus web-app might use the access token to access the UserInfo API to get additional information about the authenticated user or to propagate it to another endpoint."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Refresh token: (Optional) If the ID and access tokens expire, the Quarkus web-app can use the refresh token to get new ID and access tokens."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "See also the xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties] reference guide."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "To learn about how you can protect web applications by using the OIDC Authorization Code Flow mechanism, see xref:security-oidc-code-flow-authentication-tutorial.adoc[Protect a web application by using OIDC authorization code flow]."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If you want to protect service applications by using OIDC Bearer token authentication, see xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For information about how to support multiple tenants, see xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If you are a Vert.x OIDC user, learn about migration options in the xref:security-vertx-oidc-to-quarkus-oidc-migration.adoc[Migrate from Vert.x OIDC to Quarkus OIDC] guide."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Using the authorization code flow mechanism"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Configuring Quarkus to support authorization code flow"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"To enable an authorization code flow authentication, the `quarkus.oidc.application-type` property must be set to `web-app`.\n"
"Usually, the Quarkus OIDC `web-app` application type must be set when your Quarkus application is a frontend application which serves HTML pages and requires an OIDC single sign-on login.\n"
"For the Quarkus OIDC `web-app` application, the authorization code flow is defined as the preferred method for authenticating users.\n"
"When your application serves HTML pages and provides REST API at the same time, and requires both the authorization code flow authentication and xref:security-oidc-bearer-token-authentication.adoc[the bearer access token authentication], the `quarkus.oidc.application-type` property can be set to `hybrid` instead.\n"
"In this case, the authorization code flow is only triggered  when an HTTP `Authorization` request header with a `Bearer` authorization scheme containing a bearer access token is not set."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Configuring access to the OIDC provider endpoint"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC `web-app` application requires URLs of the OIDC provider's authorization, token, `JsonWebKey` (JWK) set, and possibly the `UserInfo`, introspection and end-session (RP-initiated logout) endpoints."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "By convention, they are discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc.auth-server-url`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Alternatively, if the discovery endpoint is not available, or you prefer to reduce the discovery endpoint round-trip, you can disable endpoint discovery and configure relative path values.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers support metadata discovery but do not return all the endpoint URL values required for the authorization code flow to complete or to support application functions, for example, user logout.\n"
"To work around this limitation, you can configure the missing endpoint URL values locally, as outlined in the following example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can use this same configuration to override a discovered endpoint URL if that URL does not work for the local Quarkus endpoint and a more specific value is required.\n"
"For example, a provider that supports both global and application-specific end-session endpoints returns a global end-session URL such as `http://localhost:8180/oidcprovider/account/global-logout`.\n"
"This URL will log the user out of all the applications into which the user is currently logged in.\n"
"However, if the requirement is for the current application to log the user out of a specific application only, you can override the global end-session URL, by setting the `quarkus.oidc.end-session-path=logout` parameter."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC provider client authentication"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OIDC providers typically require applications to be identified and authenticated when they interact with the OIDC endpoints.\n"
"Quarkus OIDC, specifically the `quarkus.oidc.runtime.OidcProviderClient` class, authenticates to the OIDC provider when the authorization code must be exchanged for the ID, access, and refresh tokens, or when the ID and access tokens must be refreshed or introspected."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Typically, client id and client secrets are defined for a given application when it enlists to the OIDC provider.\n"
"All https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC client authentication] options are supported.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of  `client_secret_basic`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Or:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The following example shows the secret retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `client_secret_post`"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `client_secret_jwt`, where the signature algorithm is HS256:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `client_secret_jwt`, where the secret is retrieved from a xref:credentials-provider.adoc[credentials provider]:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `private_key_jwt` with the PEM key inlined in application.properties, and where the signature algorithm is `RS256`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `private_key_jwt` with the PEM key file, and where the signature algorithm is RS256:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Example of `private_key_jwt` with the keystore file, where the signature algorithm is RS256:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that a client secret does not get sent to the OIDC provider, therefore avoiding the risk of a secret being intercepted by a  'man-in-the-middle' attack."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Example how JWT Bearer token can be used to authenticate client"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Use JWT bearer token to authenticate OIDC provider client, see the link:https://www.rfc-editor.org/rfc/rfc7523#section-2.2[Using JWTs for Client Authentication] section for more information."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Path to a JWT bearer token. Quarkus loads a new token from a filesystem and reloads it when the token has expired."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Additional JWT authentication options"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If `client_secret_jwt`, `private_key_jwt`, or an Apple `post_jwt` authentication methods are used, then you can customize the JWT signature algorithm, key identifier, audience, subject and issuer.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Apple POST JWT"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The Apple OIDC provider uses a `client_secret_post` method whereby a secret is a JWT produced with a `private_key_jwt` authentication method, but with the Apple account-specific issuer and subject claims."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "In Quarkus Security, `quarkus-oidc` supports a non-standard `client_secret_post_jwt` authentication method, which you can configure as follows:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "mutual TLS (mTLS)"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Some OIDC providers might require that a client is authenticated as part of the mutual TLS  authentication process."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The following example shows how you can configure `quarkus-oidc` to support `mTLS`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "POST query"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Some providers, such as the xref:security-openid-connect-providers.adoc#strava[Strava OAuth2 provider], require client credentials be posted as HTTP POST query parameters:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Introspection endpoint authentication"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers require authentication to its introspection endpoint by using Basic authentication and with credentials that are different from the `client_id` and `client_secret`.\n"
"If you have previously configured security authentication to support either the `client_secret_basic` or `client_secret_post` client authentication methods as described in the <<oidc-provider-client-authentication,OIDC provider client authentication>> section, you might need to apply the additional configuration as follows."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If the tokens have to be introspected and the introspection endpoint-specific authentication mechanism is required, you can configure `quarkus-oidc` as follows:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC request filters"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can filter OIDC requests made by Quarkus to the OIDC provider by registering one or more `OidcRequestFilter` implementations, which can update or add new request headers, customize a request body and can also log requests."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Get `OidcConfigurationMetadata`, which contains all supported OIDC endpoint addresses."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Use `OidcConfigurationMetadata` to filter requests to the OIDC token endpoint only."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Alternatively, you can use an `@OidcEndpoint` annotation to apply this filter to responses from the OIDC discovery endpoint only:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Restrict this filter to requests targeting the OIDC discovery endpoint only."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`OidcRequestContextProperties` can be used to access request properties.\n"
"Currently, you can use a `tenand_id` key to access the OIDC tenant id and a `grant_type` key to access the grant type which the OIDC provider uses to acquire tokens.\n"
"The `grant_type` can only be set to either `authorization_code` or `refresh_token` grant type, when requests are made to the token endpoint. It is `null` in all other cases."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`OidcRequestFilter` can customize a request body by preparing an instance of `io.vertx.mutiny.core.buffer.Buffer`\n"
"and setting it on a request context, for example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC response filters"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can filter responses from the OIDC providers by registering one or more `OidcResponseFilter` implementations, which can check the response status, headers and body in order to log them or perform other actions."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can have a single filter intercepting all the OIDC responses, or use an `@OidcEndpoint` annotation to apply this filter to the specific endpoint responses only. For example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Restrict this filter to requests targeting the OIDC token endpoint only."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Check the response `Content-Type` header."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Use `OidcRequestContextProperties` request properties to check only an `authorization_code` token grant response for the `code-flow-user-info-cached-in-idtoken` tenant."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Confirm the response JSON contains an `id_token` property."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`OidcResponseFilter` can customize a response body by preparing an instance of `io.vertx.mutiny.core.buffer.Buffer`\n"
"and setting it on a response context, for example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Redirecting to and from the OIDC provider"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"When a user is redirected to the OIDC provider to authenticate, the redirect URL includes a `redirect_uri` query parameter, which indicates to the provider where the user has to be redirected to when the authentication is complete.\n"
"In our case, this is the Quarkus application."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Quarkus sets this parameter to the current application request URL by default.\n"
"For example, if a user is trying to access a Quarkus service endpoint at `http://localhost:8080/service/1`, then the `redirect_uri` parameter is set to `http://localhost:8080/service/1`.\n"
"Similarly, if the request URL is `http://localhost:8080/service/2`, then the `redirect_uri` parameter is set to `http://localhost:8080/service/2`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers require the `redirect_uri` to have the same value for a given application, for example, `http://localhost:8080/service/callback`, for all the redirect URLs.\n"
"In such cases, a `quarkus.oidc.authentication.redirect-path` property has to be set.\n"
"For example, `quarkus.oidc.authentication.redirect-path=/service/callback`, and Quarkus will set the `redirect_uri` parameter to an absolute URL such as `http://localhost:8080/service/callback`, which will be the same regardless of the current request URL."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If `quarkus.oidc.authentication.redirect-path` is set, but you need the original request URL to be restored after the user is redirected back to a unique callback URL, for example,  `http://localhost:8080/service/callback`, set `quarkus.oidc.authentication.restore-path-after-redirect` property to `true`.\n"
"This will restore the request URL such as `http://localhost:8080/service/1`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Customizing authentication requests"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "By default, only the `response_type` (set to `code`), `scope` (set to `openid`), `client_id`, `redirect_uri`, and `state` properties are passed as HTTP query parameters to the OIDC provider's authorization endpoint when the user is redirected to it to authenticate."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can add more properties to it with `quarkus.oidc.authentication.extra-params`.\n"
"For example, some OIDC providers might choose to return the authorization code as part of the redirect URI's fragment, which would break the authentication process.\n"
"The following example shows how you can work around this issue:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "See also the <<oidc-redirect-filters>> section explaining how a custom `OidcRedirectFilter` can be used to customize OIDC redirects, including those to the OIDC authorization endpoint."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Customizing the authentication error response"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"When the user is redirected to the OIDC authorization endpoint to authenticate and, if necessary, authorize the Quarkus application, this redirect request might fail, for example, when an invalid scope is included in the redirect URI.\n"
"In such cases, the provider redirects the user back to Quarkus with `error` and `error_description` parameters instead of the expected `code` parameter."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, this can happen when an invalid scope or other invalid parameters are included in the redirect to the provider."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In such cases, an HTTP `401` error is returned by default.\n"
"However, you can request that a custom public error endpoint be called to return a more user-friendly HTML error page.\n"
"To do this, set the `quarkus.oidc.authentication.error-path` property, as shown in the following example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Ensure that the property starts with a forward slash (/) character and the path is relative to the base URI of the current endpoint.\n"
"For example, if it is set to '/error' and the current request URI is `https://localhost:8080/callback?error=invalid_scope`, then a final redirect is made to `https://localhost:8080/error?error=invalid_scope`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "To prevent the user from being redirected to this page to be re-authenticated, ensure that this error endpoint is a public resource."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC redirect filters"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can register one or more `io.quarkus.oidc.OidcRedirectFilter` implementations to filter OIDC redirects to OIDC authorization and logout endpoints but also local redirects to custom error and session expired pages. Custom `OidcRedirectFilter` can add additional query parameters, response headers and set new cookies."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, the following simple custom `OidcRedirectFilter` adds an additional query parameter and a custom response header for all redirect requests that can be done by Quarkus OIDC:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Add an additional query parameter. Note the queury names and values are URL-encoded by Quarkus OIDC, a `redirect-filtered=true%20C` query parameter is added to the redirect URI in this case."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Add a custom HTTP response header."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "See also the <<customize-authentication-requests>> section how to configure additional query parameters for OIDC authorization point."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Custom `OidcRedirectFilter` for local error and session expired pages can also create secure cookies to help with generating such pages."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, let's assume you need to redirect the current user whose session has expired to a custom session expired page available at `http://localhost:8080/session-expired-page`. The following custom `OidcRedirectFilter` encrypts the user name in a custom `session_expired` cookie using an OIDC tenant client secret:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Make sure this redirect filter is only called during a redirect to the session expired page."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Access `AuthorizationCodeTokens` tokens associated with the now expired session as a `RoutingContext`  attribute."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Decode ID token claims and get a user name."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Save the user name in a JWT token encrypted with the current OIDC tenant's client secret."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Create a custom `session_expired` cookie valid for 5 seconds which joins the encrypted token and a tenant id using a \"|\" separator. Recording a tenant id in a custom cookie can help to generate correct session expired pages in a multi-tenant OIDC setup."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Next, a public JAX-RS resource which generates session expired pages can use this cookie to create a page tailored for this user and the corresponding OIDC tenant, for example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Inject `TenantConfigBean` which can be used to access all the current OIDC tenant configurations."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Split the custom cookie value into 2 parts, first part is the encrypted token, last part is the tenant id."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Get the OIDC tenant configuration."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Decrypt the cookie value using the OIDC tenant's client secret."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Remove the custom cookie."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Use the username in the decrypted token and the tenant id to generate the service expired page response."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Accessing authorization data"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can access information about authorization in different ways."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Accessing ID and access tokens"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The OIDC code authentication mechanism acquires three tokens during the authorization code flow: https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID token], access token, and refresh token."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The ID token is always a JWT token and represents a user authentication with the JWT claims.\n"
"You can use this to get the issuing OIDC endpoint, the username, and other information called _claims_.\n"
"You can access ID token claims by injecting `JsonWebToken` with an `IdToken` qualifier:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC `web-app` application usually uses the access token to access other endpoints on behalf of the currently logged-in user.\n"
"You can access the raw access token as follows:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "When an authorization code flow access token is injected as `JsonWebToken`, its verification is automatically enabled, in addition to the mandatory ID token verification. If really needed, you can disable this code flow access token verification with `quarkus.oidc.authentication.verify-access-token=false`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`AccessTokenCredential` is used if the access token issued to the Quarkus `web-app` application is opaque (binary) and cannot be parsed to a `JsonWebToken` or if the inner content is necessary for the application."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Quarkus OIDC uses the refresh token to refresh the current ID and access tokens as part of its <<session-management,session management>> process."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "User info"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the ID token does not provide enough information about the currently authenticated user, you can get more information from the `UserInfo` endpoint.\n"
"Set the `quarkus.oidc.authentication.user-info-required=true` property to request a link:https://openid.net/specs/openid-connect-core-1_0.html#UserInfo[UserInfo] JSON object from the OIDC `UserInfo` endpoint."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"A request is sent to the OIDC provider `UserInfo` endpoint by using the access token returned with the authorization code grant response, and an `io.quarkus.oidc.UserInfo` (a simple `jakarta.json.JsonObject` wrapper) object is created.\n"
"`io.quarkus.oidc.UserInfo` can be injected or accessed as a SecurityIdentity `userinfo` attribute."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.authentication.user-info-required` is automatically enabled if one of these conditions is met:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "if `quarkus.oidc.roles.source` is set to `userinfo` or `quarkus.oidc.token.verify-access-token-with-user-info` is set to `true` or `quarkus.oidc.authentication.id-token-required` is set to `false`, the current OIDC tenant must support a UserInfo endpoint in these cases."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "if `io.quarkus.oidc.UserInfo` injection point is detected but only if the current OIDC tenant supports a UserInfo endpoint."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Accessing the OIDC configuration information"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The current tenant's discovered link:https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata[OpenID Connect configuration metadata] is represented by `io.quarkus.oidc.OidcConfigurationMetadata` and can be injected or accessed as a `SecurityIdentity` `configuration-metadata` attribute."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The default tenant's `OidcConfigurationMetadata` is injected if the endpoint is public."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Mapping token claims and `SecurityIdentity` roles"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The way the roles are mapped to the SecurityIdentity roles from the verified tokens is identical to how it is done for the xref:security-oidc-bearer-token-authentication.adoc[Bearer tokens].\n"
"The only difference is that https://openid.net/specs/openid-connect-core-1_0.html#IDToken[ID token] is used as a source of the roles by default."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you use Keycloak, set a `microprofile-jwt` client scope for the ID token to contain a `groups` claim.\n"
"For more information, see the link:https://www.keycloak.org/docs/latest/server_admin/#protocol[Keycloak server administration guide]."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "However, depending on your OIDC provider, roles might be stored in the access token or the user info."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If the access token contains the roles and this access token is not meant to be propagated to the downstream endpoints, then set `quarkus.oidc.roles.source=accesstoken`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If UserInfo is the source of the roles, then set `quarkus.oidc.roles.source=userinfo`, and if needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Additionally, you can also use a custom `SecurityIdentityAugmentor` to add the roles.\n"
"For more information, see xref:security-customization.adoc#security-identity-customization[SecurityIdentity customization].\n"
"You can also map `SecurityIdentity` roles created from token claims to deployment-specific roles with the xref:security-authorize-web-endpoints-reference.adoc#map-security-identity-roles[HTTP Security policy]."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Ensuring validity of tokens and authentication data"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"A core part of the authentication process is ensuring the chain of trust and validity of the information.\n"
"This is done by ensuring tokens can be trusted."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Token verification and introspection"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The verification process of OIDC authorization code flow tokens follows the Bearer token authentication token verification and introspection logic.\n"
"For more information, see the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-verification-introspection[Token verification and introspection] section of the \"Quarkus OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"With Quarkus `web-app` applications, only the `IdToken` is verified by default because the access token is not used to access the current Quarkus web-app endpoint and is intended to be propagated to the services expecting this access token.\n"
"If you expect the access token to contain the roles required to access the current Quarkus endpoint (`quarkus.oidc.roles.source=accesstoken`), then it will also be verified."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Token introspection and UserInfo cache"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Code flow access tokens are not introspected unless they are expected to be the source of roles.\n"
"However, they will be used to get `UserInfo`.\n"
"There will be one or two remote calls with the code flow access token if the token introspection, `UserInfo`, or both are required."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For more information about using the default token cache or registering a custom cache implementation, see xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[Token introspection and UserInfo cache]."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "JSON web token claim verification"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For information about the claim verification, including the `iss` (issuer) claim, see the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-jwt-claim-verification[JSON Web Token claim verification] section.\n"
"It applies to ID tokens and also to access tokens in a JWT format, if the `web-app` application has requested the access token verification."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Jose4j Validator"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can register a custom Jose4j Validator to customize the JWT claim verification process. See the xref:security-oidc-bearer-token-authentication.adoc#jose4j-validator-bearer[Jose4j] section for more information."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Proof Key for Code Exchange (PKCE)"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "link:https://datatracker.ietf.org/doc/html/rfc7636[Proof Key for Code Exchange] (PKCE) minimizes the risk of authorization code interception."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"While PKCE is of primary importance to public OIDC clients, such as SPA scripts running in a browser, it can also provide extra protection to Quarkus OIDC `web-app` applications.\n"
"With PKCE, Quarkus OIDC `web-app` applications act as confidential OIDC clients that can securely store the client secret and use it to exchange the code for the tokens."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can enable PKCE for your OIDC web-app endpoint with a `quarkus.oidc.authentication.pkce-required` property and a 32-character secret that is required to encrypt the PKCE code verifier in the state cookie, as shown in the following example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you already have a 32-character client secret, you do not need to set the  `quarkus.oidc.authentication.pkce-secret` property unless you prefer to use a different secret key.\n"
"This secret will be auto-generated if it is not configured and if the fallback to the client secret is not possible in cases where the client secret is less than 16 characters long."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The secret key is required to encrypt a randomly generated PKCE `code_verifier` while the user is redirected with the `code_challenge` query parameter to an OIDC provider to authenticate.\n"
"The `code_verifier` is decrypted when the user is redirected back to Quarkus and sent to the token endpoint alongside the `code`, client secret, and other parameters to complete the code exchange.\n"
"The provider will fail the code exchange if a `SHA256` digest of the `code_verifier` does not match the `code_challenge` that was provided during the authentication request."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Handling and controlling the lifetime of authentication"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Another important requirement for authentication is to ensure that the data the session is based on is up-to-date without requiring the user to authenticate for every single request.\n"
"There are also situations where a logout event is explicitly requested.\n"
"Use the following key points to find the right balance for securing your Quarkus applications:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Cookies"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC adapter uses cookies to keep the session, code flow, and post-logout state.\n"
"This state is a key element controlling the lifetime of authentication data."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Use the `quarkus.oidc.authentication.cookie-path` property to ensure that the same cookie is visible when you access protected resources with overlapping or different roots.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`/index.html` and `/web-app/service`"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "By default, `quarkus.oidc.authentication.cookie-path` is set to `/` but you can change this to a more specific path if required, for example, `/web-app`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"To set the cookie path dynamically, configure the `quarkus.oidc.authentication.cookie-path-header` property.\n"
"For example, to set the cookie path dynamically by using the value of the `X-Forwarded-Prefix` HTTP header, configure the property to `quarkus.oidc.authentication.cookie-path-header=X-Forwarded-Prefix`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If `quarkus.oidc.authentication.cookie-path-header` is set but no configured HTTP header is available in the current request, then the `quarkus.oidc.authentication.cookie-path` will be checked."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If your application is deployed across multiple domains, set the `quarkus.oidc.authentication.cookie-domain` property so that the session cookie is visible to all protected Quarkus services.\n"
"For example, if you have Quarkus services deployed on the following two domains, then you must set the `quarkus.oidc.authentication.cookie-domain` property to `company.net`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "\\https://whatever.wherever.company.net/"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "\\https://another.address.company.net/"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "State cookies"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"State cookies are used to support authorization code flow completion.\n"
"When an authorization code flow is started, Quarkus creates a state cookie and a matching `state` query parameter, before redirecting the user to the OIDC provider.\n"
"When the user is redirected back to Quarkus to complete the authorization code flow, Quarkus expects that the request URI must contain the `state` query parameter and it must match the current state cookie value."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The default state cookie age is 5 mins and you can change it with a `quarkus.oidc.authentication.state-cookie-age` Duration property."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Quarkus creates a unique state cookie name every time a new authorization code flow is started to support multi-tab authentication. Many concurrent authentication requests on behalf of the same user may cause a lot of state cookies be created.\n"
"If you do not want to allow your users use multiple browser tabs to authenticate then it is recommended to disable it with `quarkus.oidc.authentication.allow-multiple-code-flows=false`. It also ensures that the same state cookie name is created for every new user authentication."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Session cookie and default TokenStateManager"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC `CodeAuthenticationMechanism` uses the default `io.quarkus.oidc.TokenStateManager` interface implementation to keep the ID, access, and refresh tokens returned in the authorization code or refresh grant responses in an encrypted session cookie."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "It makes Quarkus OIDC endpoints completely stateless and it is recommended to follow this strategy to achieve the best scalability results."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Refer to the <<db-token-state-manager>> section of this guide for information on storing tokens in the database or other server-side storage solutions. This approach is suitable if you prefer and have compelling reasons to store the token state on the server."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "See the <<custom-token-state-manager>> section for alternative methods of token storage. This is ideal for those seeking customized solutions for token state management, especially when standard server-side storage does not meet your specific requirements."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure the default `TokenStateManager` to avoid saving an access token in the session cookie and to only keep ID and refresh tokens or a single ID token only."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "An access token is only required if the endpoint needs to do the following actions:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Retrieve `UserInfo`"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Access the downstream service with this access token"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Use the roles associated with the access token, which are checked by default"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "In such cases, use the `quarkus.oidc.token-state-manager.strategy` property to configure the token state strategy as follows:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "To..."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Set the property to ..."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Keep the ID and refresh tokens only"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.token-state-manager.strategy=id-refresh-tokens`"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Keep the ID token only"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.token-state-manager.strategy=id-token`"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If your chosen session cookie strategy combines tokens and generates a large session cookie value that is greater than 4KB, some browsers might not be able to handle such cookie sizes.\n"
"This can occur when the ID, access, and refresh tokens are JWT tokens and the selected strategy is `keep-all-tokens` or with ID and refresh tokens when the strategy is `id-refresh-token`.\n"
"To work around this issue, you can set `quarkus.oidc.token-state-manager.split-tokens=true` to create a unique session token for each token.\n"
"An alternative solution is to have the tokens saved in the database.\n"
"For more information, see <<db-token-state-manager>>."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The default `TokenStateManager` encrypts the tokens before storing them in the session cookie.\n"
"The following example shows how you configure it to split the tokens and encrypt them:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The token encryption secret must be at least 32 characters long.\n"
"If this key is not configured, then either `quarkus.oidc.credentials.secret` or `quarkus.oidc.credentials.jwt.secret` will be hashed to create an encryption key."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Configure the `quarkus.oidc.token-state-manager.encryption-secret` property if Quarkus authenticates to the OIDC provider by using one of the following authentication methods:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "mTLS"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`private_key_jwt`, where a private RSA or EC key is used to sign a JWT token"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Otherwise, a random key is generated, which can be problematic if the Quarkus application is running in the cloud with multiple pods managing the requests."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can disable token encryption in the session cookie by setting `quarkus.oidc.token-state-manager.encryption-required=false`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Session cookie and custom TokenStateManager"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If you want to customize the way the tokens are associated with the session cookie, register a custom `io.quarkus.oidc.TokenStateManager` implementation as an `@ApplicationScoped` CDI bean."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For example, you might want to keep the tokens in a cache cluster and have only a key stored in a session cookie.\n"
"Note that this approach might introduce some challenges if you need to make the tokens available across multiple microservices nodes."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Here is a simple example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For information about the default `TokenStateManager` storing tokens in an encrypted session cookie, see <<token-state-manager>>."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For information about the custom Quarkus `TokenStateManager` implementation storing tokens in a database, see <<db-token-state-manager>>."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Database TokenStateManager"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If you prefer to follow a stateful token storage strategy, you can use a custom `TokenStateManager` provided by Quarkus to have your application store tokens in a database, instead of storing them in an encrypted session cookie,  which is done by default as described in the <<token-state-manager>> section."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "To use this feature, add the following extension to your project:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "This extension will replace the default `io.quarkus.oidc.TokenStateManager` with a database-based one."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC Database Token State Manager uses a Reactive SQL client under the hood to avoid blocking because the authentication is likely to happen on an IO thread."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Depending on your database, include and configure exactly one xref:reactive-sql-clients.adoc[Reactive SQL client].\n"
"The following Reactive SQL clients are supported:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive Microsoft SQL client"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive MySQL client"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive PostgreSQL client"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive Oracle client"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Reactive DB2 client"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Your application is not required to switch to using the Reactive SQL client if it already uses Hibernate ORM with one of the JDBC driver extensions."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, you already have an application that uses the Hibernate ORM extension together with a PostgreSQL JDBC Driver and your datasource is configured like this:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Now, if you decided to use OIDC Database Token State Manager, you must add the following dependencies and set a reactive driver URL:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Now, the tokens are ready to be stored in the database."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"By default, a database table used for storing tokens is created for you, however, you can disable this option with the `quarkus.oidc.db-token-state-manager.create-database-table-if-not-exists` configuration property.\n"
"Should you want the Hibernate ORM extension to create this table instead, you must just include an Entity, such as the following:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The Hibernate ORM extension will only create this table for you when the database schema is generated.\n"
"For more information, refer to the xref:hibernate-orm.adoc[Hibernate ORM] guide."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can choose a column length depending on the length of your tokens."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Redis TokenStateManager"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Another approach for a stateful token storage strategy is a custom `TokenStateManager` provided by Quarkus to have your application store tokens in a Redis cache.\n"
"If you decided to use the OIDC Redis Token State Manager, you must add the following dependency:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Quarkus stores tokens in the default Redis client.\n"
"If you prefer to use different Redis client, you can configure it like in the example below:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The `my-redis-client` name must correspond to the Redis client config key specified with `quarkus.redis.my-redis-client.*` configuration properties."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Please refer to the xref:redis-reference.adoc[Quarkus Redis Client reference] for information how to configure the Redis client."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Logout and expiration"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "There are two main ways for the authentication information to expire: the tokens expired and were not renewed or an explicit logout operation was triggered."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Let's start with explicit logout operations."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can request setting https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/Clear-Site-Data[Clear-Site-Data] directives for all of the logout operations with a `quarkus.oidc.logout.clear-site-data` configuration property. For example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "User-initiated logout"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Users can request a logout by sending a request to the Quarkus endpoint logout path set with a `quarkus.oidc.logout.path` property.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.path` is set to `/logout`, then the logout request must be sent to `https://application.com/webapp/logout`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"This logout request starts an https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout].\n"
"The user will be redirected to the OIDC provider to log out, where they can be asked to confirm the logout is indeed intended."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The user will be returned to the endpoint post-logout page once the logout has been completed and if the `quarkus.oidc.logout.post-logout-path` property is set.\n"
"For example, if the endpoint address is `https://application.com/webapp` and the `quarkus.oidc.logout.post-logout-path` is set to `/signin`, then the user will be returned to `https://application.com/webapp/signin`.\n"
"Note, this URI must be registered as a valid `post_logout_redirect_uri` in the OIDC provider."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the `quarkus.oidc.logout.post-logout-path` is set, then a `q_post_logout` cookie will be created and a matching `state` query parameter will be added to the logout redirect URI and the OIDC provider will return this `state` once the logout has been completed.\n"
"It is recommended for the Quarkus `web-app` applications to check that a `state` query parameter matches the value of the `q_post_logout` cookie, which can be done, for example, in a Jakarta REST filter."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Note that a cookie name varies when using xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy].\n"
"For example, it will be named `q_post_logout_tenant_1` for a tenant with a `tenant_1` ID, and so on."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Here is an example of how to configure a Quarkus application to initiate a logout flow:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You might also want to set `quarkus.oidc.authentication.cookie-path` to a path value common to all the application resources, which is `/` in this example.\n"
"For more information, see the <<oidc-cookies,Cookies>> section."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some OIDC providers do not support a link:https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification and do not return an OpenID Connect well-known `end_session_endpoint` metadata property.\n"
"However, this is not a problem for Quarkus because the specific logout mechanisms of such OIDC providers only differ in how the logout URL query parameters are named."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "According to the https://openid.net/specs/openid-connect-session-1_0.html#RPLogout[RP-initiated logout] specification, the `quarkus.oidc.logout.post-logout-path` property is represented as a `post_logout_redirect_uri` query parameter, which is not recognized by the providers that do not support this specification."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can use `quarkus.oidc.logout.post-logout-url-param` to work around this issue.\n"
"You can also request more logout query parameters added with `quarkus.oidc.logout.extra-params`.\n"
"For example, here is how you can support a logout with `Auth0`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Back-channel logout"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC provider can force the logout of all applications by using the authentication data.\n"
"This is known as back-channel logout.\n"
"In this case, the OIDC will call a specific URL from each application to trigger that logout."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC providers use link:https://openid.net/specs/openid-connect-backchannel-1_0.html[Back-channel logout] to log out the current user from all the applications into which this user is currently logged in, bypassing the user agent."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure Quarkus to support Back-channel logout as follows:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The absolute `back-channel logout` URL is calculated by adding `quarkus.oidc.back-channel-logout.path` to the current endpoint URL, for example, `http://localhost:8080/back-channel-logout`.\n"
"You will need to configure this URL in the admin console of your OIDC provider."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You will also need to configure a token age property for the logout token verification to succeed if your OIDC provider does not set an expiry claim in the current logout token.\n"
"For example, set `quarkus.oidc.token.age=10S` to ensure that no more than 10 seconds elapse since the logout token's `iat` (issued at) time."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Front-channel logout"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can use link:https://openid.net/specs/openid-connect-frontchannel-1_0.html[Front-channel logout] to log out the current user directly from the user agent, for example, its browser.\n"
"It is similar to <<back-channel-logout,Back-channel logout>> but the logout steps are executed by the user agent, such as the browser, and not in the background by the OIDC provider.\n"
"This option is rarely used."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure Quarkus to support Front-channel logout as follows:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "This path will be compared to the current request's path, and the user will be logged out if these paths match."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Local logout"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"<<user-initiated-logout,User-initiated logout>> will log the user out of the OIDC provider.\n"
"If it is used as single sign-on, it might not be what you require.\n"
"If, for example, your OIDC provider is Google, you will be logged out from Google and its services.\n"
"Instead, the user might just want to log out of that specific application.\n"
"Another use case might be when the OIDC provider does not have a logout endpoint."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "By using <<oidc-session,OidcSession>>, you can support a local logout, which means that only the local session cookie is cleared, as shown in the following example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Using `OidcSession` for local logout"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`io.quarkus.oidc.OidcSession` is a wrapper around the current `IdToken`, which can help to perform a <<local-logout,Local logout>>, retrieve the current session's tenant identifier, and check when the session will expire.\n"
"More useful methods will be added to it over time."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Session management"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"By default, logout is based on the expiration time of the ID token issued by the OIDC provider.\n"
"When the ID token expires, the current user session at the Quarkus endpoint is invalidated, and the user is redirected to the OIDC provider again to authenticate.\n"
"If the session at the OIDC provider is still active, users are automatically re-authenticated without needing to provide their credentials again."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The current user session can be automatically extended by enabling the `quarkus.oidc.token.refresh-expired` property.\n"
"If set to `true`, when the current ID token expires, a refresh token grant will be used to refresh the ID token as well as access and refresh tokens."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If you have a xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[single page application for service applications] where your OIDC provider script such as `keycloak.js` is managing an authorization code flow, then that script will also control the SPA authentication session lifespan."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If you work with a Quarkus OIDC `web-app` application, then the Quarkus OIDC code authentication mechanism manages the user session lifespan."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"To use the refresh token, you should carefully configure the session cookie age.\n"
"The session age should be longer than the ID token lifespan and close to or equal to the refresh token lifespan."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You calculate the session age by adding the lifespan value of the current ID token and the values of the `quarkus.oidc.authentication.session-age-extension` and `quarkus.oidc.token.lifespan-grace` properties."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You use only the `quarkus.oidc.authentication.session-age-extension` property to significantly extend the session lifespan, if required.\n"
"You use the `quarkus.oidc.token.lifespan-grace` property only to consider some small clock skews."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"When the current authenticated user returns to the protected Quarkus endpoint and the ID token associated with the session cookie has expired, then, by default, the user is automatically redirected to the OIDC Authorization endpoint to re-authenticate.\n"
"The OIDC provider might challenge the user again if the session between the user and this OIDC provider is still active, which might happen if the session is configured to last longer than the ID token."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If the `quarkus.oidc.token.refresh-expired` is set to `true`, then the expired ID token (and the access token) is refreshed by using the refresh token returned with the initial authorization code grant response.\n"
"This refresh token might also be recycled (refreshed) itself as part of this process.\n"
"As a result, the new session cookie is created, and the session is extended."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In instances where the user is not very active, you can use the `quarkus.oidc.authentication.session-age-extension` property to help handle expired ID tokens.\n"
"If the ID token expires, the session cookie might not be returned to the Quarkus endpoint during the next user request as the cookie lifespan would have elapsed.\n"
"Quarkus assumes that this request is the first authentication request.\n"
"Set `quarkus.oidc.authentication.session-age-extension` to be _reasonably_ long for your barely-active users and in accordance with your security policies."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can go one step further and proactively refresh ID tokens or access tokens that are about to expire.\n"
"Set `quarkus.oidc.token.refresh-token-time-skew` to the value you want to anticipate the refresh.\n"
"If, during the current user request, it is calculated that the current ID token will expire within this `quarkus.oidc.token.refresh-token-time-skew`, then it is refreshed, and the new session cookie is created.\n"
"This property should be set to a value that is less than the ID token lifespan; the closer it is to this lifespan value, the more often the ID token is refreshed."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can further optimize this process by having a simple JavaScript function ping your Quarkus endpoint periodically to emulate the user activity, which minimizes the time frame during which the user might have to be re-authenticated."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "When the session can not be refreshed, the currently authenticated user is redirected to the OIDC provider to re-authenticate. However, the user experience may not be ideal in such cases, if the user, after an earlier successful authentication, is suddently seeing an OIDC authentication challenge screen when trying to access an application page."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Instead, you can request that the user is redirected to a public, application specific session expired page first. This page informs the user that the session has now expired and advise to re-authenticate by following a link to a secured application welcome page. The user clicks on the link and Quarkus OIDC enforces a redirect to the OIDC provider to re-authenticate. Use `quarkus.oidc.authentication.session-expired-page` relative path property, if you'd like to do it."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, setting `quarkus.oidc.authentication.session-expired-page=/session-expired-page` will ensure that the user whose session has expired is redirected to  `http://localhost:8080/session-expired-page`, assuming the application is available at `http://localhost:8080`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "See also the <<oidc-redirect-filters>> section explaining how a custom `OidcRedirectFilter` can be used to customize OIDC redirects, including those to the session expired pages."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You cannot extend the user session indefinitely.\n"
"The returning user with the expired ID token will have to re-authenticate at the OIDC provider endpoint once the refresh token has expired."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Integration with GitHub and non-OIDC OAuth2 providers"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Some well-known providers such as GitHub or LinkedIn are not OpenID Connect providers, but OAuth2 providers that support the `authorization code flow`.\n"
"For example, link:https://docs.github.com/en/developers/apps/building-oauth-apps/authorizing-oauth-apps[GitHub OAuth2] and link:https://docs.microsoft.com/en-us/linkedin/shared/authentication/authorization-code-flow[LinkedIn OAuth2].\n"
"Remember, OIDC is built on top of OAuth2."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The main difference between OIDC and OAuth2 providers is that OIDC providers return an `ID Token` that represents a user authentication, in addition to the standard authorization code flow `access` and `refresh` tokens returned by `OAuth2` providers."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OAuth2 providers such as GitHub do not return `IdToken`, and the user authentication is implicit and indirectly represented by the `access` token.\n"
"This `access` token represents an authenticated user authorizing the current Quarkus `web-app` application to access some data on behalf of the authenticated user."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For OIDC, you validate the ID token as proof of authentication validity whereas in the case of OAuth2, you validate the access token.\n"
"This is done by subsequently calling an endpoint that requires the access token and that typically returns user information.\n"
"This approach is similar to the OIDC <<code-flow-user-info,UserInfo>> approach, with `UserInfo` fetched by Quarkus OIDC on your behalf."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, when working with GitHub, the Quarkus endpoint can acquire an `access` token, which allows the Quarkus endpoint to request a GitHub profile for the current user."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "To support the integration with such OAuth2 servers, `quarkus-oidc` needs to be configured a bit differently to allow the authorization code flow responses without `IdToken`: `quarkus.oidc.authentication.id-token-required=false`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Even though you configure the extension to support the authorization code flows without `IdToken`, an internal `IdToken` is generated to standardize the way `quarkus-oidc` operates.\n"
"You use an internal `IdToken` to support the authentication session and to avoid redirecting the user to the provider,  such as GitHub, on every request.\n"
"In this case, the `IdToken` age is set to the value of a standard `expires_in` property in the authorization code flow response.\n"
"You can use a `quarkus.oidc.authentication.internal-id-token-lifespan` property to customize the ID token age.\n"
"The default ID token age is 5 minutes, which you can extend further as described in the <<session-management,session management>> section."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "This simplifies how you handle an application that supports multiple OIDC providers."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The next step is to ensure that the returned access token can be useful and is valid to the current Quarkus endpoint.\n"
"The first way is to call the OAuth2 provider introspection endpoint by configuring `quarkus.oidc.introspection-path`, if the provider offers such an endpoint.\n"
"In this case, you can use the access token as a source of roles using `quarkus.oidc.roles.source=accesstoken`.\n"
"If no introspection endpoint is present, you can attempt instead to request <<code-flow-user-info,UserInfo>> from the provider as it will at least validate the access token.\n"
"To do so, specify `quarkus.oidc.token.verify-access-token-with-user-info=true`.\n"
"You also need to set the `quarkus.oidc.user-info-path` property to a URL endpoint that fetches the user info (or to an endpoint protected by the access token).\n"
"For GitHub, since it does not have an introspection endpoint, requesting the UserInfo is required."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Requiring <<code-flow-user-info,UserInfo>> involves making a remote call on every request."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Therefore, `UserInfo` is embedded in the internal generated `IdToken` and saved in the encrypted session cookie. It can be disabled with `quarkus.oidc.cache-user-info-in-idtoken=false`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Alternatively, you might want to consider caching `UserInfo` using a default or custom UserInfo cache provider.\n"
"For more information, see the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-token-introspection-userinfo-cache[Token Introspection and UserInfo cache] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Most well-known social OAuth2 providers enforce rate-limiting so there is a high chance you will prefer to have UserInfo cached."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OAuth2 servers might not support a well-known configuration endpoint.\n"
"In this case, you must disable the discovery and configure the authorization, token, and introspection and `UserInfo` endpoint paths manually."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For well-known OIDC or OAuth2 providers, such as Apple, Facebook, GitHub, Google, Microsoft, Spotify, and X (formerly Twitter), Quarkus can help significantly simplify your application's configuration with the `quarkus.oidc.provider` property.\n"
"Here is how you can integrate `quarkus-oidc` with GitHub after you have link:https://docs.github.com/en/developers/apps/building-oauth-apps/creating-an-oauth-app[created a GitHub OAuth application].\n"
"Configure your Quarkus endpoint like this:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For more information about configuring other well-known providers, see xref:security-openid-connect-providers.adoc[OpenID Connect providers]."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "This is all that is needed for an endpoint like this one to return the currently-authenticated user's profile with `GET http://localhost:8080/github/userinfo` and access it as the individual `UserInfo` properties:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you support more than one social provider with the help of xref:security-openid-connect-multitenancy.adoc[OpenID Connect Multi-Tenancy], for example, Google, which is an OIDC provider that returns `IdToken`, and GitHub, which is an OAuth2 provider that does not return `IdToken` and only allows access to `UserInfo`, then you can have your endpoint working with only the injected `SecurityIdentity` for both Google and GitHub flows.\n"
"A simple augmentation of `SecurityIdentity` will be required where a principal created with the internally-generated `IdToken` will be replaced with the `UserInfo`-based principal when the GitHub flow is active:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Now, the following code will work when the user signs into your application by using Google or GitHub:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Possibly a simpler alternative is to inject both `@IdToken JsonWebToken` and `UserInfo` and use `JsonWebToken` when handling the providers that return `IdToken` and use `UserInfo` with the providers that do not return `IdToken`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You must ensure that the callback path you enter in the GitHub OAuth application configuration matches the endpoint path where you want the user to be redirected after a successful GitHub authentication and application authorization.\n"
"In this case, it has to be set to `http://localhost:8080/github/userinfo`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Listening to important authentication events"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can register the `@ApplicationScoped` bean which will observe important OIDC authentication events.\n"
"When a user logs in for the first time, re-authenticates, or refreshes the session, the listener is updated.\n"
"In the future, more events might be reported.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can listen to other security events as described in the xref:security-customization.adoc#observe-security-events[Observe security events] section of the Security Tips and Tricks guide."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Token revocation"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Sometimes, you may want to revoke the current authorization code flow access and/or refresh tokens.\n"
"You can revoke tokens with `quarkus.oidc.OidcProviderClient` which provides access to the OIDC provider's UserInfo, token introspection and revocation endpoints."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, when a local logout with <<oidc-session,OidcSession>> is performed, you can use an injected `OidcProviderClient` to revoke access and refresh tokens associated with the current session:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Do the local logout by clearing the session cookie."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Revoke the authorization code flow access token."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Revoke the authorization code flow refresh token."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can also revoke tokens in the security event listeners."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, when your application supports a standard <<user-initiated-logout>>, you can catch a logout event and revoke tokens:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Revoke tokens if an RP-initiated logout event is observed."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Propagating tokens to downstream services"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For information about Authorization Code Flow access token propagation to downstream services, see the xref:security-openid-connect-client-reference.adoc#token-propagation-rest[Token Propagation] section."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Integration considerations"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Your application secured by OIDC integrates in an environment where it can be called from single-page applications.\n"
"It must work with well-known OIDC providers, run behind HTTP Reverse Proxy, require external and internal access, and so on."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "This section discusses these considerations."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Single-page applications"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can check if implementing single-page applications (SPAs) the way it is suggested in the xref:security-oidc-bearer-token-authentication.adoc#single-page-applications[Single-page applications] section of the \"OpenID Connect (OIDC) Bearer token authentication\" guide meets your requirements."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you prefer to use SPAs and JavaScript APIs such as `Fetch` or `XMLHttpRequest`(XHR) with Quarkus web applications, be aware that OIDC providers might not support cross-origin resource sharing (CORS) for authorization endpoints where the users are authenticated after a redirect from Quarkus.\n"
"This will lead to authentication failures if the Quarkus application and the OIDC provider are hosted on different HTTP domains, ports, or both."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "In such cases, set the `quarkus.oidc.authentication.java-script-auto-redirect` property to `false`, which will instruct Quarkus to return a `499` status code and a `WWW-Authenticate` header with the `OIDC` value."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The browser script must set a header to identify the current request as a JavaScript request for a `499` status code to be returned when the `quarkus.oidc.authentication.java-script-auto-redirect` property is set to `false`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If the script engine sets an engine-specific request header itself, then you can register a custom `quarkus.oidc.JavaScriptRequestChecker` bean, which will inform Quarkus if the current request is a JavaScript request. For example, if the JavaScript engine sets a header such as `HX-Request: true`, then you can have it checked like this:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "and reload the last requested page in case of a `499` status code."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Otherwise, you must also update the browser script to set the `X-Requested-With` header with the `JavaScript` value and reload the last requested page in case of a `499` status code."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Cross-origin resource sharing"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you plan to consume this application from a single-page application running on a different domain, you need to configure cross-origin resource sharing (CORS).\n"
"For more information, see the xref:security-cors.adoc#cors-filter[CORS filter] section of the \"Cross-origin resource sharing\" guide."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Calling Cloud provider services"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Google Cloud"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can have Quarkus OIDC `web-app` applications access **Google Cloud services** such as **BigQuery** on behalf of the currently authenticated users who have enabled OIDC authorization code flow permissions to such services in their Google developer consoles."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"You can do so by using https://github.com/quarkiverse[Quarkiverse] https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google Cloud Services].\n"
"You need only to add\n"
"the https://github.com/quarkiverse/quarkiverse-google-cloud-services/releases/latest[latest tag] service dependency as shown in the following example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Then, configure Google OIDC properties:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Running Quarkus application behind a reverse proxy"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC authentication mechanism can be affected if your Quarkus application is running behind a reverse proxy, gateway, or firewall when HTTP `Host` header might be reset to the internal IP address and HTTPS connection might be terminated, and so on.\n"
"For example, an authorization code flow `redirect_uri` parameter might be set to the internal host instead of the expected external one."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"In such cases, configuring Quarkus to recognize the original headers forwarded by the proxy will be required.\n"
"For more information, see the xref:http-reference.adoc#reverse-proxy[Running behind a reverse proxy] Vert.x documentation section."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For example, if your Quarkus endpoint runs in a cluster behind Kubernetes Ingress, then a redirect from the OIDC provider back to this endpoint might not work because the calculated `redirect_uri` parameter might point to the internal endpoint address.\n"
"You can resolve this problem by using the following configuration, where `X-ORIGINAL-HOST` is set by Kubernetes Ingress to represent the external endpoint address.:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.authentication.force-redirect-https-scheme` property can also be used when the Quarkus application is running behind an SSL terminating reverse proxy."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "External and internal access to the OIDC provider"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"The OIDC provider externally-accessible authorization, logout, and other endpoints can have different HTTP(S) URLs compared to the URLs auto-discovered or configured relative to the `quarkus.oidc.auth-server-url` internal URL.\n"
"In such cases, the endpoint might report an issuer verification failure and redirects to the externally-accessible OIDC provider endpoints might fail."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you work with Keycloak, then start it with a `KEYCLOAK_FRONTEND_URL` system property set to the externally-accessible base URL.\n"
"If you work with other OIDC providers, check the documentation of your provider."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC HTTP client redirects"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"OIDC providers behind a firewall may redirect Quarkus OIDC HTTP client's GET requests to some of its endpoints such as a well-known configuration endpoint.\n"
"By default, Quarkus OIDC HTTP client follows HTTP redirects automatically, excluding cookies which may have been set during the redirect request for security reasons."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If you would like, you can disable it with `quarkus.oidc.follow-redirects=false`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "When following redirects automatically is disabled, and Quarkus OIDC HTTP client receives a redirect request, it will attempt to recover only once by following the redirect URI, but only if it is exactly the same as the original request URI, and as long as one or more cookies were set during the redirect request."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC SAML identity broker"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If your identity provider does not implement OpenID Connect but only the legacy XML-based SAML2.0 SSO protocol, then Quarkus cannot be used as a SAML 2.0 adapter, similarly to how `quarkus-oidc` is used as an OIDC adapter."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"However, many OIDC providers such as Keycloak, Okta, Auth0, and Microsoft ADFS offer OIDC to SAML 2.0 bridges.\n"
"You can create an identity broker connection to a SAML 2.0 provider in your OIDC provider and use `quarkus-oidc` to authenticate your users to this SAML 2.0 provider, with the OIDC provider coordinating OIDC and SAML 2.0 communications.\n"
"As far as Quarkus endpoints are concerned, they can continue using the same Quarkus Security, OIDC API, annotations such as `@Authenticated`, `SecurityIdentity`, and so on."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For example, assume `Okta` is your SAML 2.0 provider and `Keycloak` is your OIDC provider.\n"
"Here is a typical sequence explaining how to configure `Keycloak` to broker with the `Okta` SAML 2.0 provider."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "First, create a new `SAML2` integration in your `Okta` `Dashboard/Applications`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For example, name it as `OktaSaml`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Next, configure it to point to a Keycloak SAML broker endpoint.\n"
"At this point, you need to know the name of the Keycloak realm, for example, `quarkus`, and, assuming that the Keycloak SAML broker alias is `saml`, enter the endpoint address as `http://localhost:8081/realms/quarkus/broker/saml/endpoint`.\n"
"Enter the service provider (SP) entity ID as `http://localhost:8081/realms/quarkus`, where `http://localhost:8081` is a Keycloak base address and `saml` is a broker alias:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Next, save this SAML integration and note its Metadata URL:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Next, add a SAML provider to Keycloak:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"First, as usual, create a new realm or import the existing realm to `Keycloak`.\n"
"In this case, the realm name has to be `quarkus`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Now, in the `quarkus` realm properties, navigate to `Identity Providers` and add a new SAML provider:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Note the alias is set to `saml`, `Redirect URI` is `http://localhost:8081/realms/quarkus/broker/saml/endpoint` and `Service provider entity ID` is `http://localhost:8081/realms/quarkus` - these are the same values you entered when creating the Okta SAML integration in the previous step."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Finally, set `Service entity descriptor` to point to the Okta SAML Integration Metadata URL you noted at the end of the previous step."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Next, if you want, you can register this Keycloak SAML provider as a default provider by navigating to `Authentication/browser/Identity Provider Redirector config` and setting both the `Alias` and `Default Identity Provider` properties to `saml`.\n"
"If you do not configure it as a default provider then, at authentication time, Keycloak offers 2 options:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Authenticate with the SAML provider"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Authenticate directly to Keycloak with the name and password"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Now, configure the Quarkus OIDC `web-app` application to point to the Keycloak `quarkus` realm, `quarkus.oidc.auth-server-url=http://localhost:8180/realms/quarkus`.\n"
"Then, you are ready to start authenticating your Quarkus users to the Okta SAML 2.0 provider by using an OIDC to SAML bridge that is provided by Keycloak OIDC and Okta SAML 2.0 providers."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can configure other OIDC providers to provide a SAML bridge similarly to how it can be done for Keycloak."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Testing"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Testing is often tricky when it comes to authentication to a separate OIDC-like server.\n"
"Quarkus offers several options from mocking to a local run of an OIDC provider."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Dev Services for Keycloak"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For integration testing against Keycloak, use xref:security-openid-connect-dev-services.adoc[Dev services for Keycloak].\n"
"This service initializes a test container, creates a `quarkus` realm, and configures a `quarkus-app` client with the secret `secret`.\n"
"It also sets up two users: `alice` with `admin` and `user` roles, and `bob` with the `user` role."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "First, prepare the `application.properties` file."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "If starting from an empty `application.properties` file, `Dev Services for Keycloak` automatically registers the following properties:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.auth-server-url`, which points to the running test container."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.client-id=quarkus-app`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`quarkus.oidc.credentials.secret=secret`."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"If you already have the required `quarkus-oidc` properties configured, associate `quarkus.oidc.auth-server-url` with the `prod` profile.\n"
"This ensures that `Dev Services for Keycloak` starts the container as expected.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "To import a custom realm file into Keycloak before running the tests, configure `Dev services for Keycloak` as shown:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Finally, write the test code as described in the <<code-flow-integration-testing-wiremock,Wiremock>> section.\n"
"The only difference is that `@QuarkusTestResource` is no longer required:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Wiremock"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Add the following dependency:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Prepare the REST test endpoints and set `application.properties`.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Finally, write the test code, for example:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`OidcWiremockTestResource` recognizes `alice` and `admin` users.\n"
"The user `alice` has the `user` role only by default - it can be customized with a `quarkus.test.oidc.token.user-roles` system property.\n"
"The user `admin` has the `user` and `admin` roles by default - it can be customized with a `quarkus.test.oidc.token.admin-roles` system property."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Additionally, `OidcWiremockTestResource` sets the token issuer and audience to `https://service.example.com`,  which can be customized with `quarkus.test.oidc.token.issuer` and `quarkus.test.oidc.token.audience` system properties."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`OidcWiremockTestResource` can be used to emulate all OIDC providers."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Using KeycloakTestResourceLifecycleManager"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Use `KeycloakTestResourceLifecycleManager` for your tests only if there is a good reason not to use `Dev Services for Keycloak`.\n"
"If you need to do the integration testing against Keycloak then you are encouraged to do it with <<code-flow-integration-testing-keycloak-devservices,Dev Services for Keycloak>>."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "First, add the following dependency:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "This provides `io.quarkus.test.keycloak.server.KeycloakTestResourceLifecycleManager` - an implementation of `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which starts a Keycloak container."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Then, configure the Maven Surefire plugin as follows (and similarly the Maven Failsafe plugin when testing in native image):"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"Now, set the configuration and write the test code the same way as it is described in the <<code-flow-integration-testing-wiremock,Wiremock>> section.\n"
"The only difference is the name of `QuarkusTestResource`:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"`KeycloakTestResourceLifecycleManager` registers `alice` and `admin` users.\n"
"The user `alice` has the `user` role only by default - it can be customized with a `keycloak.token.user-roles` system property.\n"
"The user `admin` has the `user` and `admin` roles by default - it can be customized with a `keycloak.token.admin-roles` system property."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"By default, `KeycloakTestResourceLifecycleManager` uses HTTPS to initialize a Keycloak instance that can be disabled by specifying `keycloak.use.https=false`.\n"
"The default realm name is `quarkus` and client id is `quarkus-web-app` - set `keycloak.realm` and `keycloak.web-app.client` system properties to customize the values if needed."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "TestSecurity annotation"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "You can use `@TestSecurity` and `@OidcSecurity` annotations to test the `web-app` application endpoint code, which depends on either one of the following injections, or all four:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "ID `JsonWebToken`"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Access `JsonWebToken`"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`UserInfo`"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "`OidcConfigurationMetadata`"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "For more information, see xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing-security-annotation[Use TestingSecurity with injected JsonWebToken]."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Checking errors in the logs"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "To see details about the token verification errors, you must enable `io.quarkus.oidc.runtime.OidcProvider` `TRACE` level logging:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "To see details about the OidcProvider client initialization errors, enable `io.quarkus.oidc.runtime.OidcRecorder` `TRACE` level logging:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "From the `quarkus dev` console, type `j` to change the application global log level."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Programmatic OIDC start-up"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "OIDC tenants can be created programmatically like in the example below:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "The code above is a programmatic equivalent to the following configuration in the `application.properties` file:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "Should you need to configure more OIDC tenant properties, use the `OidcTenantConfig` builder like in the example below:"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid ""
"For more complex setup involving multiple tenants please see the xref:security-openid-connect-multitenancy.adoc#programmatic-startup[Programmatic OIDC start-up for multitenant application]\n"
"section of the OpenID Connect Multi-Tenancy guide."
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-oidc-configuration-properties-reference.adoc[OIDC configuration properties]"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-oidc-expanded-configuration.adoc[Expanded OIDC Configuration Reference]"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-providers.adoc[Configuring well-known OpenID Connect providers]"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect and OAuth2 client and filters reference guide]"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak]"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#oidc-jwt-oauth2-comparison[Choosing between OpenID Connect, SmallRye JWT, and OAuth2 authentication mechanisms]"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-authentication-mechanisms.adoc#combining-authentication-mechanisms[Combining authentication mechanisms]"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "https://www.keycloak.org/documentation.html[Keycloak documentation]"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr ""

#: _versions/3.27/guides/security-oidc-code-flow-authentication.adoc
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr ""
