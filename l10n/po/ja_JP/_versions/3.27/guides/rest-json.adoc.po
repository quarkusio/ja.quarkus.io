msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/rest-json.adoc
msgid "Writing JSON REST Services"
msgstr "JSON RESTサービスの実装"

#: _versions/3.27/guides/rest-json.adoc
msgid "JSON is now the _lingua franca_ between microservices."
msgstr "JSON は今やマイクロサービス間の _共通言語_ となっています。"

#: _versions/3.27/guides/rest-json.adoc
msgid "In this guide, we see how you can get your REST services to consume and produce JSON payloads."
msgstr "このガイドでは、REST サービスが JSON ペイロードを消費および生成する方法を見ていきます。"

#: _versions/3.27/guides/rest-json.adoc
msgid "there is another guide if you need a xref:rest-client.adoc[REST client] (including support for JSON)."
msgstr "xref:rest-client.adoc[RESTクライアント] （JSONのサポートを含む）が必要な場合は、別のガイドがあります。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"This is an introduction to writing JSON REST services with Quarkus.\n"
"A more detailed guide about Quarkus REST (formerly RESTEasy Reactive) is available xref:rest.adoc[here]."
msgstr ""
"QuarkusでJSON RESTサービスを記述する方法を紹介します。\n"
"Quarkus REST（旧RESTEasy Reactive）のより詳細なガイドは xref:rest.adoc[こちら] をご覧ください。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.27/guides/rest-json.adoc
msgid "Architecture"
msgstr "アーキテクチャ"

#: _versions/3.27/guides/rest-json.adoc
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr "このガイドで構築されるアプリケーションは非常にシンプルです:ユーザーはフォームを使用してリストに要素を追加することができ、リストが更新されます。"

#: _versions/3.27/guides/rest-json.adoc
msgid "All the information between the browser and the server are formatted as JSON."
msgstr "ブラウザとサーバー間の情報はすべて JSON 形式になっています。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.27/guides/rest-json.adoc
msgid "The solution is located in the `rest-json-quickstart` link:{quickstarts-tree-url}/rest-json-quickstart[directory]."
msgstr "ソリューションは `rest-json-quickstart` link:{quickstarts-tree-url}/rest-json-quickstart[ディレクトリ] にあります。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.27/guides/rest-json.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"This command generates a new project importing the Quarkus REST/Jakarta REST and https://github.com/FasterXML/jackson[Jackson] extensions,\n"
"and in particular adds the following dependency:"
msgstr ""
"このコマンドは、Quarkus REST/Jakarta RESTおよび link:https://github.com/FasterXML/jackson[Jackson] エクステンションをインポートする新しいプロジェクトを生成し、\n"
"特に以下の依存関係を追加します："

#: _versions/3.27/guides/rest-json.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/rest-json.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/rest-json.adoc
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need to do it manually."
msgstr "ユーザーエクスペリエンスを向上させるために、Quarkusは3つのJackson link:https://github.com/FasterXML/jackson-modules-java8[Java 8モジュール] を登録しているので、手動で登録する必要はありません。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] so, if you prefer JSON-B over Jackson, you can create a project relying on the Quarkus REST JSON-B extension instead:"
msgstr "Quarkusは link:https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] もサポートしているため、JacksonよりもJSON-Bを好む場合は、代わりにQuarkus REST JSON-Bエクステンションに依存するプロジェクトを作成できます："

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"This command generates a new project importing the Quarkus REST/Jakarta REST and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions,\n"
"and in particular adds the following dependency:"
msgstr ""
"このコマンドは、Quarkus REST/Jakarta RESTおよび link:https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] エクステンションをインポートする新しいプロジェクトを生成し、\n"
"特に以下の依存関係を追加します："

#: _versions/3.27/guides/rest-json.adoc
msgid "For more information about Quarkus REST, please refer to the xref:rest.adoc[dedicated guide]."
msgstr "Quarkus RESTの詳細については、 xref:rest.adoc[専用ガイド] を参照してください。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Creating your first JSON REST service"
msgstr "初めてのJSON RESTサービスの作成"

#: _versions/3.27/guides/rest-json.adoc
msgid "In this example, we will create an application to manage a list of fruits."
msgstr "この例では、果物のリストを管理するアプリケーションを作成します。"

#: _versions/3.27/guides/rest-json.adoc
msgid "First, let's create the `Fruit` bean as follows:"
msgstr "まず、以下のように `Fruit` Bean を作成してみましょう。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr "派手なことは何もありません。注意すべき重要なことは、デフォルトのコンストラクタを持つことはJSONシリアライズレイヤーで必須であるということです。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr "次に、 `org.acme.rest.json.FruitResource` クラスを以下のように作成します。"

#: _versions/3.27/guides/rest-json.adoc
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the Jakarta REST annotations."
msgstr "実装は非常に簡単で、Jakarta RESTアノテーションを使用してエンドポイントを定義するだけです。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson],\n"
"depending on the extension you chose when initializing the project."
msgstr "`Fruit` オブジェクトは、プロジェクトの初期化時に選択したエクステンションに応じて、 https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] または link:https://github.com/FasterXML/jackson[Jackson] によって自動的にシリアライズ/デシリアライズされます。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"When a JSON extension is installed such as `quarkus-rest-jackson` or `quarkus-rest-jsonb`, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via\n"
"`@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream`\n"
"respectively)."
msgstr ""
"`quarkus-rest-jackson` や `quarkus-rest-jsonb` などのJSONエクステンションがインストールされている場合、\n"
"メディアタイプが `@Produces` や `@Consumes` アノテーションで明示的に設定されていない限り、Quarkusはほとんどの返り値にデフォルトで `application/json` メディアタイプを使用します（よく知られている `String` や `File` などのタイプには例外があり、デフォルトはそれぞれ `text/plain` や `application/octet-stream` です）。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Configuring JSON support"
msgstr "JSON サポートの設定"

#: _versions/3.27/guides/rest-json.adoc
msgid "Jackson"
msgstr "Jackson"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (and consumed by the Quarkus extensions) is configured to ignore unknown properties\n"
"(by disabling the `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` feature)."
msgstr "Quarkusでは、CDI経由で取得した(そしてQuarkusのエクステンションによって消費される)デフォルトのJackson `ObjectMapper` は、未知のプロパティーを無視するように設定されています( `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` 機能を無効にすることで)。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"You can restore the default behavior of Jackson by setting `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties`\n"
"or on a per-class basis via `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr "`application.properties` で `quarkus.jackson.fail-on-unknown-properties=true` を設定するか、 クラスごとに `@JsonIgnoreProperties(ignoreUnknown = false)` を設定することで、Jackson のデフォルトの動作を復元することができます。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Furthermore, the `ObjectMapper` is configured to format dates and time in ISO-8601\n"
"(by disabling the `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` feature)."
msgstr "さらに、 `ObjectMapper` 、日付と時刻をISO-8601でフォーマットするように設定されています（ `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` の機能を無効にすることで）。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"The default behaviour of Jackson can be restored by setting `quarkus.jackson.write-dates-as-timestamps=true`\n"
"in your `application.properties`. If you want to change the format for a single field, you can use the\n"
"`@JsonFormat` annotation."
msgstr "`application.properties` で `quarkus.jackson.fail-on-unknown-properties=true` を設定するか、 `@JsonIgnoreProperties(ignoreUnknown = false)` を経由してクラスごとに設定することで、Jackson のデフォルトの動作を復元することができます。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Also, Quarkus makes it very easy to configure various Jackson settings via CDI beans.\n"
"The simplest (and suggested) approach is to define a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer`\n"
"inside of which any Jackson configuration can be applied."
msgstr "また、Quarkusは、CDI Bean を介して、様々なJackson設定を非常に簡単に設定することができます。最も単純な(そして推奨される)アプローチは、 `io.quarkus.jackson.ObjectMapperCustomizer` 型の CDI Bean を定義し、その中で、Jackson の設定を適用することです。"

#: _versions/3.27/guides/rest-json.adoc
msgid "An example where a custom module needs to be registered would look like so:"
msgstr "カスタムモジュールを登録する必要がある場合の例は次のようになります。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Users can even provide their own `ObjectMapper` bean if they so choose.\n"
"If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.\n"
"Failure to do so will prevent Jackson specific customizations provided by various extensions from being applied."
msgstr "ユーザーは、選択すれば自分の `ObjectMapper` Beanを提供することもできます。この場合、 `ObjectMapper` を生成する CDI プロデューサの中で、すべての `io.quarkus.jackson.ObjectMapperCustomizer` Bean を手動で注入して適用することが非常に重要です。これを怠ると、様々なエクステンションによって提供される Jackson 固有のカスタマイズが適用されなくなります。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Mixin support"
msgstr "Mixinサポート"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Quarkus automates the registration of Jackson's Mixin support, via the `io.quarkus.jackson.JacksonMixin` annotation.\n"
"This annotation can be placed on classes that are meant to be used as Jackson mixins while the classes they are meant to customize\n"
"are defined as the value of the annotation."
msgstr "Quarkus は、 `io.quarkus.jackson.JacksonMixin` アノテーションを介して、Jackson の Mixin サポートの登録を自動化します。 このアノテーションは、Jackson mixin として使用することを意図したクラスに配置できますが、カスタマイズすることを意図したクラスはアノテーションの値として定義されます。"

#: _versions/3.27/guides/rest-json.adoc
msgid "JSON-B"
msgstr "JSON-B"

#: _versions/3.27/guides/rest-json.adoc
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr "上記のように、Quarkusでは、 `quarkus-resteasy-jsonb` エクステンションを使用することで、Jacksonの代わりにJSON-Bを使用するオプションを提供しています。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Following the same approach as described in the previous section, JSON-B can be configured using a `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr "前項と同様のアプローチで、 `io.quarkus.jsonb.JsonbConfigCustomizer` beanを使用してJSON-Bを設定することができます。"

#: _versions/3.27/guides/rest-json.adoc
msgid "If for example a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr "例えば、 `FooSerializer` という名前のカスタムシリアライザを `com.example.Foo` タイプで JSON-B で登録する必要がある場合、以下のような Bean を追加すれば十分です。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"A more advanced option would be to directly provide a bean of `jakarta.json.bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to provide a bean of type `jakarta.json.bind.Jsonb` (with a `Singleton` scope).\n"
"If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `jakarta.json.bind.Jsonb`.\n"
"Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr "より高度なオプションは， `jakarta.json.bind.JsonbConfig` の Bean を( `Dependent` スコープで)直接提供するか，極端な場合， `jakarta.json.bind.Jsonb` タイプの Bean を( `Singleton` スコープで)提供することでしょう。後者の方法を利用する場合、 `jakarta.json.bind.Jsonb` を生成するCDIプロデューサーにおいて、すべての `io.quarkus.jsonb.JsonbConfigCustomizer` Beanを手動で注入し適用することが非常に重要です。これを怠ると、さまざまなエクステンションが提供するJSON-B固有のカスタマイズが適用されなくなります。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Creating a frontend"
msgstr "フロントエンドの作成"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Now let's add a simple web page to interact with our `FruitResource`.\n"
"Quarkus automatically serves static resources located under the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this link:{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""
"それでは、 `FruitResource` とやり取りするための簡単なウェブページを追加してみましょう。\n"
"Quarkusは自動的に、 `META-INF/resources` ディレクトリの下にある静的リソースを提供します。 \n"
"`src/main/resources/META-INF/resources` ディレクトリに、この link:{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] ファイルのコンテンツを含む `fruits.html` ファイルを追加します。"

#: _versions/3.27/guides/rest-json.adoc
msgid "You can now interact with your REST service:"
msgstr "これで、REST サービスと対話できるようになりました。"

#: _versions/3.27/guides/rest-json.adoc
msgid "start Quarkus with:"
msgstr "Quarkusを起動します。"

#: _versions/3.27/guides/rest-json.adoc
msgid "CLI"
msgstr "コマンドラインインタフェース"

#: _versions/3.27/guides/rest-json.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/3.27/guides/rest-json.adoc
msgid "Gradle"
msgstr "Gradle"

#: _versions/3.27/guides/rest-json.adoc
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr " `http://localhost:8080/fruits.html` をブラウザで開く"

#: _versions/3.27/guides/rest-json.adoc
msgid "add new fruits to the list via the form"
msgstr "フォームを使って新しいフルーツをリストに追加します。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Building a native executable"
msgstr "ネイティブ実行可能ファイルの構築"

#: _versions/3.27/guides/rest-json.adoc
msgid "You can build a native executable with the usual command:"
msgstr "通常のコマンドでネイティブ実行可能ファイルをビルドすることができます:"

#: _versions/3.27/guides/rest-json.adoc
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr "実行は簡単で、 `./target/rest-json-quickstart-1.0-SNAPSHOT-runner` を実行するだけです。"

#: _versions/3.27/guides/rest-json.adoc
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr "その後、ブラウザで `http://localhost:8080/fruits.html` を開いてアプリケーションを使用します。"

#: _versions/3.27/guides/rest-json.adoc
msgid "About serialization"
msgstr "シリアライゼーションについて"

#: _versions/3.27/guides/rest-json.adoc
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr "JSONシリアライズライブラリは、Javaのリフレクションを使用してオブジェクトのプロパティーを取得してシリアライズします。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"When using native executables with GraalVM, all classes that will be used with reflection need to be registered.\n"
"The good news is that Quarkus does that work for you most of the time.\n"
"So far, we haven't registered any class, not even `Fruit`, for reflection usage and everything is working fine."
msgstr "GraalVMでネイティブ実行可能ファイルを使用する場合、リフレクションで使用されるすべてのクラスを登録する必要があります。良いニュースは、Quarkusがほとんどの場合、その作業を代行してくれるということです。これまでのところ、 `Fruit` でさえ、リフレクトを使用するためのクラスを登録しておらず、すべてが正常に動作しています。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.\n"
"When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr "Quarkusは、RESTメソッドからシリアライズされた型を推論することができる場合に、何らかのマジックを実行します。以下のようなRESTメソッドがある場合、Quarkusは、 `Fruit` がシリアライズされると判断します。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Quarkus does that for you automatically by analyzing the REST methods at build time\n"
"and that's why we didn't need any reflection registration in the first part of this guide."
msgstr "Quarkusは、ビルド時にRESTメソッドを分析することで、自動的にそのような処理を行ってくれます。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Another common pattern in the Jakarta REST world is to use the `Response` object.\n"
"`Response` comes with some nice perks:"
msgstr "Jakarta RESTの世界でよく見られるもう一つのパターンは、 `Response` オブジェクトを使うことです。 `Response` には、いくつかの良い特典があります:"

#: _versions/3.27/guides/rest-json.adoc
msgid "you can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance);"
msgstr "メソッドで何が起こるかによって異なるエンティティータイプを返すことができます (例えば `Legume` や `Error` )。"

#: _versions/3.27/guides/rest-json.adoc
msgid "you can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr " `Response` の属性を設定することができます (エラーが発生した時にステータスを知ることができます)。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Your REST method then looks like this:"
msgstr "RESTメソッドは次のようになります。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"It is not possible for Quarkus to determine at build time the type included in the `Response` as the information is not available.\n"
"In this case, Quarkus won't be able to automatically register for reflection the required classes."
msgstr "`Response` に含まれるタイプは情報がないため、Quarkusがビルド時に判断することはできません。この場合、Quarkusは必要なクラスを自動的に反映登録することができません。"

#: _versions/3.27/guides/rest-json.adoc
msgid "This leads us to our next section."
msgstr "これが次のセクションにつながります。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Using Response"
msgstr "レスポンスの利用"

#: _versions/3.27/guides/rest-json.adoc
msgid "Let's create the `Legume` class which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr "`Fruit` クラスと同じモデルに従って、JSON としてシリアライズされる `Legume` クラスを作成してみましょう。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Now let's create a `LegumeResource` REST service with only one method which returns the list of legumes."
msgstr "それでは、マメ科植物のリストを返すメソッドを一つだけ持つ `LegumeResource` REST サービスを作成してみましょう。"

#: _versions/3.27/guides/rest-json.adoc
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr "このメソッドは `Response` を返し、 `Legume` のリストではありません。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Now let's add a simple web page to display our list of legumes.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this\n"
"{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr "ここで、マメ科植物のリストを表示するための簡単なウェブページを追加してみましょう。 `src/main/resources/META-INF/resources` ディレクトリーに、この {quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] ファイルの内容を含む `legumes.html` ファイルを追加します。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Open a browser to http://localhost:8080/legumes.html, and you will see our list of legumes."
msgstr "ブラウザーを開いて http://localhost:8080/legumes.html にアクセスすると、マメ科植物のリストが表示されます。"

#: _versions/3.27/guides/rest-json.adoc
msgid "The interesting part starts when running the application as a native executable:"
msgstr "興味深い部分は、アプリケーションをネイティブ実行可能ファイルとして実行するときに始まります。"

#: _versions/3.27/guides/rest-json.adoc
msgid "create the native executable with:"
msgstr "以下でネイティブ実行可能ファイルを作成します。"

#: _versions/3.27/guides/rest-json.adoc
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr "`./target/rest-json-quickstart-1.0-SNAPSHOT-runner` で実行します"

#: _versions/3.27/guides/rest-json.adoc
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr "ブラウザーを起動し、 http://localhost:8080/legumes.html にアクセスします。"

#: _versions/3.27/guides/rest-json.adoc
msgid "No legumes there."
msgstr "そこには豆類はありません。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"As mentioned above, the issue is that Quarkus was not able to determine the `Legume` class will require some reflection by analyzing the REST endpoints.\n"
"The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list, so it does not serialize the fields' data."
msgstr "上記のように、問題は Quarkus が、 REST エンドポイントを分析することで `Legume` クラスが何らかのリフレクションを必要とすることを判断できなかったことです。 JSON シリアライズライブラリーは、 `Legume` のフィールドのリストを取得しようとすると空のリストを取得するため、フィールドのデータをシリアライズしません。"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.\n"
"GraalVM will simply return an empty list of fields."
msgstr "現時点では、JSON-BやJacksonがクラスのフィールドのリストを取得しようとしたときに、そのクラスがリフレクションに登録されていない場合、例外はスローされません。GraalVMは単に空のフィールドのリストを返します。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr "うまくいけば、将来的にはこれが変化して、エラーがより明白になるでしょう。"

#: _versions/3.27/guides/rest-json.adoc
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr "`Legume` クラスに `@RegisterForReflection` アノテーションを追加することで、手動で `Legume` を リフレクション用に登録することができます。"

#: _versions/3.27/guides/rest-json.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr "`@RegisterForReflection` アノテーションは、ネイティブコンパイル時にクラスとそのメンバーを保持するようQuarkusに指示します。 `@RegisterForReflection` アノテーションの詳細については、 link:writing-native-applications-tips.html#registerForReflection[ネイティブアプリケーションのヒント]のページを参照してください。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Let's do that and follow the same steps as before:"
msgstr "それを実行して、今までと同じ手順を踏んでみましょう。"

#: _versions/3.27/guides/rest-json.adoc
msgid "hit `Ctrl+C` to stop the application"
msgstr "`Ctrl+C` を叩いてアプリケーションを停止させる"

#: _versions/3.27/guides/rest-json.adoc
msgid "This time, you can see our list of legumes."
msgstr "今回はマメ科の一覧が表示されました。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Being reactive"
msgstr "リアクティブであること"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"You can return _reactive types_ to handle asynchronous processing.\n"
"Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr "非同期処理を処理するために _リアクティブ型_ を返すことができます。Quarkusでは、リアクティブで非同期なコードを書くために link:https://smallrye.io/smallrye-mutiny[Mutiny] の使用を推奨しています。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Quarkus REST is naturally integrated with Mutiny."
msgstr "Quarkus RESTは当然Mutinyと統合されています。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Your endpoints can return `Uni` or `Multi` instances:"
msgstr "そして、エンドポイントは `Uni` や `Multi` のインスタンスを返すことができます:"

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Use `Uni` when you have a single result.\n"
"Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr "単一の結果がある場合は `Uni` を使用します。 `Multi` は、非同期的に放出される可能性のある複数の項目がある場合に使用します。"

#: _versions/3.27/guides/rest-json.adoc
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr "`Uni` と `Response` を使用して、非同期 HTTP レスポンスを返すことができます: `Uni<Response>` ."

#: _versions/3.27/guides/rest-json.adoc
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "Mutinyについての詳細は、 xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] に記載されています。"

#: _versions/3.27/guides/rest-json.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _versions/3.27/guides/rest-json.adoc
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well known technologies."
msgstr "Quarkusを使用したJSON RESTサービスの作成は、実績のあるよく知られたテクノロジーに依存しているため、簡単に行えます。"

#: _versions/3.27/guides/rest-json.adoc
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr "いつものように、Quarkusは、アプリケーションをネイティブ実行可能ファイルとして実行する際に、水面下の作業をさらに簡略化しています。"

#: _versions/3.27/guides/rest-json.adoc
msgid "There is only one thing to remember: if you use `Response` and Quarkus can't determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr "覚えておくべきことは一つだけあります。 `Response` を使用していて、Quarkus がシリアライズされているBeanを特定できない場合は、 `@RegisterForReflection` を使ってアノテーションを付ける必要があります。"
