msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/rest-json.adoc
msgid "Writing JSON REST Services"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "JSON is now the _lingua franca_ between microservices."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "In this guide, we see how you can get your REST services to consume and produce JSON payloads."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "there is another guide if you need a xref:rest-client.adoc[REST client] (including support for JSON)."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"This is an introduction to writing JSON REST services with Quarkus.\n"
"A more detailed guide about Quarkus REST (formerly RESTEasy Reactive) is available xref:rest.adoc[here]."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "The application built in this guide is quite simple: the user can add elements in a list using a form and the list is updated."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "All the information between the browser and the server are formatted as JSON."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "The solution is located in the `rest-json-quickstart` link:{quickstarts-tree-url}/rest-json-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"This command generates a new project importing the Quarkus REST/Jakarta REST and https://github.com/FasterXML/jackson[Jackson] extensions,\n"
"and in particular adds the following dependency:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "To improve user experience, Quarkus registers the three Jackson https://github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need to do it manually."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Quarkus also supports https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] so, if you prefer JSON-B over Jackson, you can create a project relying on the Quarkus REST JSON-B extension instead:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"This command generates a new project importing the Quarkus REST/Jakarta REST and https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] extensions,\n"
"and in particular adds the following dependency:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "For more information about Quarkus REST, please refer to the xref:rest.adoc[dedicated guide]."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Creating your first JSON REST service"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "In this example, we will create an application to manage a list of fruits."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "First, let's create the `Fruit` bean as follows:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Nothing fancy. One important thing to note is that having a default constructor is required by the JSON serialization layer."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Now, create the `org.acme.rest.json.FruitResource` class as follows:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "The implementation is pretty straightforward, and you just need to define your endpoints using the Jakarta REST annotations."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"The `Fruit` objects will be automatically serialized/deserialized by https://eclipse-ee4j.github.io/jsonb-api/[JSON-B] or https://github.com/FasterXML/jackson[Jackson],\n"
"depending on the extension you chose when initializing the project."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"When a JSON extension is installed such as `quarkus-rest-jackson` or `quarkus-rest-jsonb`, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via\n"
"`@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream`\n"
"respectively)."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Configuring JSON support"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Jackson"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"In Quarkus, the default Jackson `ObjectMapper` obtained via CDI (and consumed by the Quarkus extensions) is configured to ignore unknown properties\n"
"(by disabling the `DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES` feature)."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"You can restore the default behavior of Jackson by setting `quarkus.jackson.fail-on-unknown-properties=true` in your `application.properties`\n"
"or on a per-class basis via `@JsonIgnoreProperties(ignoreUnknown = false)`."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Furthermore, the `ObjectMapper` is configured to format dates and time in ISO-8601\n"
"(by disabling the `SerializationFeature.WRITE_DATES_AS_TIMESTAMPS` feature)."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"The default behaviour of Jackson can be restored by setting `quarkus.jackson.write-dates-as-timestamps=true`\n"
"in your `application.properties`. If you want to change the format for a single field, you can use the\n"
"`@JsonFormat` annotation."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Also, Quarkus makes it very easy to configure various Jackson settings via CDI beans.\n"
"The simplest (and suggested) approach is to define a CDI bean of type `io.quarkus.jackson.ObjectMapperCustomizer`\n"
"inside of which any Jackson configuration can be applied."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "An example where a custom module needs to be registered would look like so:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Users can even provide their own `ObjectMapper` bean if they so choose.\n"
"If this is done, it is very important to manually inject and apply all `io.quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that produces `ObjectMapper`.\n"
"Failure to do so will prevent Jackson specific customizations provided by various extensions from being applied."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Mixin support"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Quarkus automates the registration of Jackson's Mixin support, via the `io.quarkus.jackson.JacksonMixin` annotation.\n"
"This annotation can be placed on classes that are meant to be used as Jackson mixins while the classes they are meant to customize\n"
"are defined as the value of the annotation."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "JSON-B"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "As stated above, Quarkus provides the option of using JSON-B instead of Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Following the same approach as described in the previous section, JSON-B can be configured using a `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "If for example a custom serializer named `FooSerializer` for type `com.example.Foo` needs to be registered with JSON-B, the addition of a bean like the following would suffice:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"A more advanced option would be to directly provide a bean of `jakarta.json.bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to provide a bean of type `jakarta.json.bind.Jsonb` (with a `Singleton` scope).\n"
"If the latter approach is leveraged it is very important to manually inject and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI producer that produces `jakarta.json.bind.Jsonb`.\n"
"Failure to do so will prevent JSON-B specific customizations provided by various extensions from being applied."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Creating a frontend"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Now let's add a simple web page to interact with our `FruitResource`.\n"
"Quarkus automatically serves static resources located under the `META-INF/resources` directory.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `fruits.html` file with the content from this link:{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "You can now interact with your REST service:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "start Quarkus with:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "CLI"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Maven"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Gradle"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "add new fruits to the list via the form"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Building a native executable"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "You can build a native executable with the usual command:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Running it is as simple as executing `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "You can then point your browser to `http://localhost:8080/fruits.html` and use your application."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "About serialization"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "JSON serialization libraries use Java reflection to get the properties of an object and serialize them."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"When using native executables with GraalVM, all classes that will be used with reflection need to be registered.\n"
"The good news is that Quarkus does that work for you most of the time.\n"
"So far, we haven't registered any class, not even `Fruit`, for reflection usage and everything is working fine."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Quarkus performs some magic when it is capable of inferring the serialized types from the REST methods.\n"
"When you have the following REST method, Quarkus determines that `Fruit` will be serialized:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Quarkus does that for you automatically by analyzing the REST methods at build time\n"
"and that's why we didn't need any reflection registration in the first part of this guide."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Another common pattern in the Jakarta REST world is to use the `Response` object.\n"
"`Response` comes with some nice perks:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "you can return different entity types depending on what happens in your method (a `Legume` or an `Error` for instance);"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "you can set the attributes of the `Response` (the status comes to mind in the case of an error)."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Your REST method then looks like this:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"It is not possible for Quarkus to determine at build time the type included in the `Response` as the information is not available.\n"
"In this case, Quarkus won't be able to automatically register for reflection the required classes."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "This leads us to our next section."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Using Response"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Let's create the `Legume` class which will be serialized as JSON, following the same model as for our `Fruit` class:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Now let's create a `LegumeResource` REST service with only one method which returns the list of legumes."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Now let's add a simple web page to display our list of legumes.\n"
"In the `src/main/resources/META-INF/resources` directory, add a `legumes.html` file with the content from this\n"
"{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Open a browser to http://localhost:8080/legumes.html, and you will see our list of legumes."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "The interesting part starts when running the application as a native executable:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "create the native executable with:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "execute it with `./target/rest-json-quickstart-1.0.0-SNAPSHOT-runner`"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "No legumes there."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"As mentioned above, the issue is that Quarkus was not able to determine the `Legume` class will require some reflection by analyzing the REST endpoints.\n"
"The JSON serialization library tries to get the list of fields of `Legume` and gets an empty list, so it does not serialize the fields' data."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"At the moment, when JSON-B or Jackson tries to get the list of fields of a class, if the class is not registered for reflection, no exception will be thrown.\n"
"GraalVM will simply return an empty list of fields."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Hopefully, this will change in the future and make the error more obvious."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "We can register `Legume` for reflection manually by adding the `@RegisterForReflection` annotation on our `Legume` class:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "The `@RegisterForReflection` annotation instructs Quarkus to keep the class and its members during the native compilation. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Let's do that and follow the same steps as before:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "hit `Ctrl+C` to stop the application"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "This time, you can see our list of legumes."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Being reactive"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"You can return _reactive types_ to handle asynchronous processing.\n"
"Quarkus recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write reactive and asynchronous code."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Quarkus REST is naturally integrated with Mutiny."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Your endpoints can return `Uni` or `Multi` instances:"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid ""
"Use `Uni` when you have a single result.\n"
"Use `Multi` when you have multiple items that may be emitted asynchronously."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "You can use `Uni` and `Response` to return asynchronous HTTP responses: `Uni<Response>`."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "More details about Mutiny can be found in xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Conclusion"
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "Creating JSON REST services with Quarkus is easy as it relies on proven and well known technologies."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "As usual, Quarkus further simplifies things under the hood when running your application as a native executable."
msgstr ""

#: _versions/3.27/guides/rest-json.adoc
msgid "There is only one thing to remember: if you use `Response` and Quarkus can't determine the beans that are serialized, you need to annotate them with `@RegisterForReflection`."
msgstr ""
