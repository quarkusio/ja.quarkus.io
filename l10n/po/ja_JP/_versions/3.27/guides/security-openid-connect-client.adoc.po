msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "OpenID Connect client and token propagation quickstart"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Learn how to use OpenID Connect (OIDC) and OAuth2 clients with filters to get, refresh, and propagate access tokens in your applications."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "For more information about `OIDC Client` and `Token Propagation` support in Quarkus, see the xref:security-openid-connect-client-reference.adoc[OpenID Connect (OIDC) and OAuth2 client and filters reference guide]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "To protect your applications by using Bearer Token Authorization, see the xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect (OIDC) Bearer token authentication] guide."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"In this example, an application is built with two Jakarta REST resources, `FrontendResource` and `ProtectedResource`.\n"
"Here, `FrontendResource` uses one of three methods to propagate access tokens to `ProtectedResource`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "It can get a token by using an OIDC client filter before propagating it."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "It can get a token by using a programmatically created OIDC client and propagate it by passing it to a REST client method as an HTTP `Authorization` header value."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "It can use an OIDC token propagation filter to propagate the incoming access token."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`FrontendResource` has eight endpoints:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`/frontend/user-name-with-oidc-client-token`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`/frontend/admin-name-with-oidc-client-token`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`/frontend/user-name-with-oidc-client-token-header-param`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`/frontend/admin-name-with-oidc-client-token-header-param`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`/frontend/user-name-with-oidc-client-token-header-param-blocking`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`/frontend/admin-name-with-oidc-client-token-header-param-blocking`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`/frontend/user-name-with-propagated-token`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`/frontend/admin-name-with-propagated-token`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"When either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` endpoint is called, `FrontendResource` uses a REST client with an OIDC client filter to get and propagate an access token to `ProtectedResource` .\n"
"When either `/frontend/user-name-with-oidc-client-token-header-param` or `/frontend/admin-name-with-oidc-client-token-header-param` endpoint is called, `FrontendResource` uses a programmatically created OIDC client to get and propagate an access token to `ProtectedResource` by passing it to a REST client method as an HTTP `Authorization` header value.\n"
"When either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` endpoint is called, `FrontendResource` uses a REST client with `OIDC Token Propagation Filter` to propagate the current incoming access token to `ProtectedResource`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`ProtectedResource` has two endpoints:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`/protected/user-name`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`/protected/admin-name`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"Both endpoints return the username extracted from the incoming access token, which was propagated to `ProtectedResource` from `FrontendResource`.\n"
"The only difference between these endpoints is that calling `/protected/user-name` is only allowed if the current access token has a `user` role, and calling `/protected/admin-name` is only allowed if the current access token has an `admin` role."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "The solution is in the `security-openid-connect-client-quickstart` link:{quickstarts-tree-url}/security-openid-connect-client-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"First, you need a new project.\n"
"Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "It generates a Maven project, importing the `oidc`, `rest-client-oidc-filter`, `rest-client-oidc-token-propagation`, and `rest` extensions."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "If you already have your Quarkus project configured, you can add these extensions to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "It adds the following extensions to your build file:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Writing the application"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Start by implementing `ProtectedResource`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"`ProtectedResource` returns a name from both `userName()` and `adminName()` methods.\n"
"The name is extracted from the current `JsonWebToken`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Next, add the following REST clients:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`RestClientWithOidcClientFilter`, which uses an OIDC client filter provided by the `quarkus-rest-client-oidc-filter` extension to get and propagate an access token."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`RestClientWithTokenHeaderParam`, which accepts a token already acquired by the programmatically created OidcClient as an HTTP `Authorization` header value."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`RestClientWithTokenPropagationFilter`, which uses an OIDC token propagation filter provided by the `quarkus-rest-client-oidc-token-propagation` extension to get and propagate an access token."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Add the `RestClientWithOidcClientFilter` REST client:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Register an OIDC client filter with the REST client to get and propagate the tokens."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Add the `RestClientWithTokenHeaderParam` REST client:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`RestClientWithTokenHeaderParam` REST client expects that the tokens will be passed to it as HTTP `Authorization` header values."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Add the `RestClientWithTokenPropagationFilter` REST client:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Register an OIDC token propagation filter with the REST client to propagate the incoming already-existing tokens."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"Do not use the `RestClientWithOidcClientFilter` and `RestClientWithTokenPropagationFilter` interfaces in the same REST client because they can conflict, leading to issues.\n"
"For example, the OIDC client filter can override the token from the OIDC token propagation filter, or the propagation filter might not work correctly if it attempts to propagate a token when none is available, expecting the OIDC client filter to obtain a new token instead."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Also, add `OidcClientCreator` to create an OIDC client programmatically at startup. `OidcClientCreator` supports `RestClientWithTokenHeaderParam` REST client calls:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`OidcClients` can be used to retrieve the already initialized, named OIDC clients and create new OIDC clients on demand."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Now, finish creating the application by adding `FrontendResource`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`FrontendResource` uses the injected `RestClientWithOidcClientFilter` REST client with the OIDC client filter to get and propagate an access token to `ProtectedResource` when either `/frontend/user-name-with-oidc-client-token` or `/frontend/admin-name-with-oidc-client-token` is called."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`FrontendResource` uses the injected `RestClientWithTokenPropagationFilter` REST client with the OIDC token propagation filter to propagate the current incoming access token to `ProtectedResource` when either `/frontend/user-name-with-propagated-token` or `/frontend/admin-name-with-propagated-token` is called."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`FrontendResource` uses the programmatically created OIDC client to get and propagate an access token to `ProtectedResource` by passing it directly to the injected `RestClientWithTokenHeaderParam` REST client's method as an HTTP `Authorization` header value, when either `/frontend/user-name-with-oidc-client-token-header-param` or `/frontend/admin-name-with-oidc-client-token-header-param` is called."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Sometimes, one may have to acquire tokens in a blocking manner before propagating them with the REST client. This example shows how to acquire the tokens in such cases."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "`io.quarkus.oidc.client.runtime.TokensHelper` is a useful tool when OIDC client is used directly, without the OIDC client filter. To use `TokensHelper`, pass OIDC Client to it to get the tokens and `TokensHelper` acquires the tokens and refreshes them if necessary in a thread-safe way."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Finally, add a Jakarta REST `ExceptionMapper`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"This exception mapper is only added to verify during the tests that `ProtectedResource` returns `403` when the token has no expected role.\n"
"Without this mapper, Quarkus REST (formerly RESTEasy Reactive) would correctly convert the exceptions that escape from REST client calls to `500` to avoid leaking the information from the downstream resources such as `ProtectedResource`.\n"
"However, in the tests, it would not be possible to assert that `500` is caused by an authorization exception instead of some internal error."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Configuring the application"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Having prepared the code, you configure the application:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"The preceding configuration references Keycloak, which is used by `ProtectedResource` to verify the incoming access tokens and by `OidcClient` to get the tokens for a user `alice` by using a `password` grant.\n"
"Both REST clients point to ``ProtectedResource``'s HTTP address."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"Adding a `%prod.` profile prefix to `quarkus.oidc.auth-server-url` ensures that `Dev Services for Keycloak` launches a container for you when the application is run in dev or test modes.\n"
"For more information, see the <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Starting and configuring the Keycloak server"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"Do not start the Keycloak server when you run the application in dev or test modes; `Dev Services for Keycloak` launches a container.\n"
"For more information, see the <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section.\n"
"Ensure you put the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] on the classpath, in the `target/classes` directory.\n"
"This placement ensures that the file is automatically imported in dev mode.\n"
"However, if you have already built a link:{quickstarts-tree-url}/security-openid-connect-quickstart[complete solution], you do not need to add the realm file to the classpath because the build process has already done so."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "To start a Keycloak Server, you can use Docker and just run the following command:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Set `{keycloak.version}` to `26.3.0` or later."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "You can access your Keycloak Server at http://localhost:8180[localhost:8180]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"Log in as the `admin` user to access the Keycloak Administration Console.\n"
"The password is `admin`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"Import the link:{quickstarts-tree-url}/security-openid-connect-client-quickstart/config/quarkus-realm.json[realm configuration file] to create a new realm.\n"
"For more details, see the Keycloak documentation about how to https://www.keycloak.org/docs/latest/server_admin/index.html#_create-realm[create a new realm]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"This `quarkus` realm file adds a `frontend` client, and `alice` and `admin` users.\n"
"`alice` has a `user` role.\n"
"`admin` has both `user` and `admin` roles."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Running the application in dev mode"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "To run the application in a dev mode, use:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "xref:security-openid-connect-dev-services.adoc[Dev Services for Keycloak] launches a Keycloak container and imports `quarkus-realm.json`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Open a xref:dev-ui.adoc[Dev UI] available at http://localhost:8080/q/dev-ui[/q/dev-ui] and click a `Keycloak provider` link in the *OpenID Connect Dev UI* card."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "When asked, log in to a `Single Page Application` provided by the OpenID Connect Dev UI:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"Log in as `admin`, with the password, `admin`.\n"
"This user has both `admin` and `user` roles."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Access `/frontend/user-name-with-propagated-token`, which returns `200`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Access `/frontend/admin-name-with-propagated-token`, which returns `200`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"Log out and back in as `alice` with the password, `alice`.\n"
"This user has a `user` role."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Access `/frontend/admin-name-with-propagated-token`, which returns `403`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "You have tested that `FrontendResource` can propagate the access tokens from the OpenID Connect Dev UI."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Running the application in JVM mode"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "After exploring the application in dev mode, you can run it as a standard Java application."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "First, compile it:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Then, run it:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Running the application in native mode"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "You can compile this demo into native code; no modifications are required."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"This implies that you no longer need to install a JVM on your\n"
"production environment, as the runtime technology is included in\n"
"the produced binary and optimized to run with minimal resources."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"Compilation takes longer, so this step is turned off by default.\n"
"To build again, enable the `native` profile:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "After a little while, when the build finishes, you can run the native binary directly:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Testing the application"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "For more information about testing your application in dev mode, see the preceding <<oidc-client-keycloak-dev-mode,Running the application in dev mode>> section."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "You can test the application launched in JVM or Native modes with `curl`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Obtain an access token for `alice`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Use this token to call `/frontend/user-name-with-propagated-token`. This command returns the `200` status code and the name `alice`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Use the same token to call `/frontend/admin-name-with-propagated-token`. In contrast to the preceding command, this command returns `403` because `alice` has only a `user` role:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Next, obtain an access token for `admin`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Use this token to call `/frontend/user-name-with-propagated-token`. This command returns a `200` status code and the name `admin`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Use the same token to call `/frontend/admin-name-with-propagated-token`. This command also returns the `200` status code and the name `admin` because `admin` has both `user` and `admin` roles:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid ""
"Next, check the `FrontendResource` methods, which do not propagate the existing tokens but use `OidcClient` to get and propagate the tokens.\n"
"As already shown, `OidcClient` is configured to get the tokens for the `alice` user."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "This command returns the `200` status code and the name `alice`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "In contrast with the preceding command, this command returns a `403` status code."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Next, test that the programmatically created OIDC client correctly acquires and propagates the token with `RestClientWithTokenHeaderParam` both in reactive and imperative (blocking) modes."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Call the `/user-name-with-oidc-client-token-header-param`. This command returns the `200` status code and the name `alice`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Call the `/admin-name-with-oidc-client-token-header-param`. In contrast with the preceding command, this command returns a `403` status code:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Next, test the endpoints which use OIDC client in in the blocking mode."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Call the `/user-name-with-oidc-client-token-header-param-blocking`. This command returns the `200` status code and the name `alice`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "Call the `/admin-name-with-oidc-client-token-header-param-blocking`. In contrast with the preceding command, this command returns a `403` status code:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "xref:security-openid-connect-client-reference.adoc[OpenID Connect Client and Token Propagation Reference Guide]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
