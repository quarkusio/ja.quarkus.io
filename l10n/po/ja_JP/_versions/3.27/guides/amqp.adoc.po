msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/amqp.adoc
msgid "Getting Started to Quarkus Messaging with AMQP 1.0"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "This guide demonstrates how your Quarkus application can utilize Quarkus Messaging to interact with AMQP 1.0."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"If you want to use RabbitMQ, you should use the xref:rabbitmq.adoc[Quarkus Messaging RabbitMQ extension].\n"
"Alternatively, if you want to use RabbitMQ with AMQP 1.0 you need to enable the AMQP 1.0 plugin in the RabbitMQ broker;\n"
"check the https://smallrye.io/smallrye-reactive-messaging/smallrye-reactive-messaging/3.9/amqp/amqp.html#amqp-rabbitmq[connecting to RabbitMQ]\n"
"documentation."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"In this guide, we are going to develop two applications communicating with an AMQP broker.\n"
"We will use https://activemq.apache.org/components/artemis/[Artemis], but you can use any AMQP 1.0 broker.\n"
"The first application sends a _quote request_ to an AMQP queue and consumes messages from the _quote_ queue.\n"
"The second application receives the _quote request_ and sends a _quote_ back."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"The first application, the `producer`, will let the user request some quotes over an HTTP endpoint.\n"
"For each quote request, a random identifier is generated and returned to the user, to put the quote request on _pending_.\n"
"At the same time the generated request id is sent over the `quote-requests` queue."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "The second application, the `processor`, in turn, will read from the `quote-requests` queue put a random price to the quote, and send it to a queue named `quotes`."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"Lastly, the `producer` will read the quotes and send them to the browser using server-sent events.\n"
"The user will therefore see the quote price updated from _pending_ to the received price in real-time."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create applications step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "The solution is located in the `amqp-quickstart` link:{quickstarts-tree-url}/amqp-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Creating the Maven Project"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "First, we need to create two projects: the _producer_ and the _processor_."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "To create the _producer_ project, in a terminal run:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "This command creates the project structure and select the two Quarkus extensions we will be using:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Quarkus REST (formerly RESTEasy Reactive) and its Jackson support to handle JSON payloads"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "The Reactive Messaging AMQP connector"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "To create the _processor_ project, from the same directory, run:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "At that point you should have the following structure:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Open the two projects in your favorite IDE."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "The Quote object"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"The `Quote` class will be used in both `producer` and `processor` projects.\n"
"For the sake of simplicity we will duplicate the class.\n"
"In both projects, create the `src/main/java/org/acme/amqp/model/Quote.java` file, with the following content:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"JSON representation of `Quote` objects will be used in messages sent to the AMQP queues\n"
"and also in the server-sent events sent to browser clients."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Quarkus has built-in capabilities to deal with JSON AMQP messages."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "@RegisterForReflection"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"The `@RegisterForReflection` annotation instructs Quarkus to keep the class, its fields, and methods when creating a native executable.\n"
"This is crucial when we later run our applications as native executables within containers.\n"
"Without this annotation, the native compilation process would discard the fields and methods during the dead-code elimination phase, which would lead to runtime errors.\n"
"More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Sending quote request"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Inside the `producer` project locate the generated  `src/main/java/org/acme/amqp/producer/QuotesResource.java` file, and update the content to be:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Inject a Reactive Messaging `Emitter` to send messages to the `quote-requests` channel."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "On a post request, generate a random UUID and send it to the AMQP queue using the emitter."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"The `quote-requests` channel is going to be managed as a AMQP queue, as that's the only connector on the classpath.\n"
"If not indicated otherwise, like in this example, Quarkus uses the channel name as AMQP queue name.\n"
"So, in this example, the application sends messages to the `quote-requests` queue."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "When you have multiple connectors, you would need to indicate which connector you want to use in the application configuration."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Processing quote requests"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"Now let's consume the quote request and give out a price.\n"
"Inside the `processor` project, locate the `src/main/java/org/acme/amqp/processor/QuoteProcessor.java` file and add the following:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Indicates that the method consumes the items from the `requests` channel"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Indicates that the objects returned by the method are sent to the `quotes` channel"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Indicates that the processing is _blocking_ and cannot be run on the caller thread."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "The `process` method is called for every AMQP message from the `quote-requests` queue, and will send a `Quote` object to the `quotes` queue."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"Because we want to consume messages from the `quotes-requests` queue into the `requests` channel, we need to configure this association.\n"
"Open the `src/main/resources/application.properties` file and add:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "The configuration properties are structured as follows:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "In our case, we want to configure the `address` attribute to indicate the name of the queue."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Receiving quotes"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"Back to our `producer` project.\n"
"Let's modify the `QuotesResource` to consume quotes, bind it to an HTTP endpoint to send events to clients:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Injects the `quotes` channel using the `@Channel` qualifier"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Returns the stream (_Reactive Stream_)"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "The HTML page"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Final touch, the HTML page reading the converted prices using SSE."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Create inside the `producer` project `src/main/resources/META-INF/resources/quotes.html` file, with the following content:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"Nothing spectacular here.\n"
"On each received quote, it updates the page."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Get it running"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "You just need to run both applications using:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "And, in a separate terminal:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"Quarkus starts a AMQP broker automatically, configures the application and shares the broker instance between different applications.\n"
"See xref:amqp-dev-services.adoc[Dev Services for AMQP] for more details."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Open `http://localhost:8080/quotes.html` in your browser and request some quotes by clicking the button."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Running in JVM or Native mode"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"When not running in dev or test mode, you will need to start your AMQP broker.\n"
"You can follow the instructions from the https://activemq.apache.org/components/artemis/documentation/latest/using-server.html[Apache ActiveMQ Artemis website] or create a `docker-compose.yaml` file with the following content:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"Note how the AMQP broker location is configured.\n"
"The `amqp.host` and `amqp.port` (`AMQP_HOST` and `AMQP_PORT` environment variables) properties configure location."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "First, make sure you stopped the applications, and build both applications in JVM mode with:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"Once packaged, run `docker compose up --build`.\n"
"The UI is exposed on http://localhost:8080/quotes.html"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "To run your applications as native, first we need to build the native executables:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"The `-Dquarkus.native.container-build=true` instructs Quarkus to build Linux 64bits native executables, who can run inside containers.\n"
"Then, run the system using:"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "As before, the UI is exposed on http://localhost:8080/quotes.html"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid "Going further"
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"This guide has shown how you can interact with AMQP 1.0 using Quarkus.\n"
"It utilizes https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive Messaging] to build data streaming applications."
msgstr ""

#: _versions/3.27/guides/amqp.adoc
msgid ""
"If you did the Kafka quickstart, you have realized that it's the same code.\n"
"The only difference is the connector configuration and the JSON mapping."
msgstr ""
