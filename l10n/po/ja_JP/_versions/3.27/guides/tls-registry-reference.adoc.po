msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "TLS registry reference"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The TLS Registry is a Quarkus extension that centralizes TLS configuration, making it easier to manage and maintain secure connections across your application.\n"
"When defining TLS configurations in a single centralized location, you can use the TLS Registry to reference these configurations from multiple components within the application, which ensures consistency and reduces the potential for configuration errors."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The TLS Registry consolidates settings and supports multiple named configurations.\n"
"Therefore, you can tailor TLS settings for different application parts.\n"
"This flexibility is particularly useful when different components require distinct security configurations."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The TLS Registry extension is automatically included in your project when you use compatible extensions, such as Quarkus REST, gRPC, SmallRye GraphQL Client\n"
", or Reactive Routes\n"
"."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "As a result, applications that use the TLS Registry can be ready to handle secure communications out of the box."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"TLS Registry also provides automatic certificate reloading\n"
", integration with Let's Encrypt (ACME)\n"
", support for Kubernetes Cert-Manager,\n"
"and compatibility with various keystore formats, such as PKCS12, PEM, and JKS."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Using the TLS registry"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"To configure a TLS connection, including key and truststores, use the `+quarkus.tls.*+` properties.\n"
"These properties are required for:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Setting up the default TLS configuration, defined directly under `+quarkus.tls.*+`"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Creating separate, named configurations by using `+quarkus.tls.<name>.*+`.\n"
"By specifying the `+quarkus.tls.<name>.*+` properties, you can adapt the TLS settings for a specific component."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The default TLS configuration is not a fallback or global configuration.\n"
"Each named TLS configuration, or \"TLS bucket,\" must provide its own properties.\n"
"For instance, `quarkus.tls.reload-period` will only be applied to the default TLS configuration."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"As described in detail link:https://github.com/quarkusio/quarkus/blob/main/adr/0004-using-the-tls-registry-for-clients.adoc#configuring-clients-with-the-tls-registry[here], Quarkus client extensions (such as REST, GRPC, and so on) ignore properties defined in default (that is, unnamed) TLS configurations.\n"
"The `quarkus.tls.trust-all` property is the only exception."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Configuring HTTPS for a HTTP server"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To ensure secure client-server communication, the client is often required to verify the server's authenticity."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The server must use a keystore that contains its certificate and private key."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The client needs to be configured with a truststore to validate the server's certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"During the TLS handshake, the server presents its certificate, which the client then validates.\n"
"This prevents man-in-the-middle attacks and secures data transmission."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The following sections guide you through setting up HTTPS by using PEM or PKCS12 keystore types.\n"
"In addition, they provide information on how to use named configurations to specify and manage multiple TLS setups at once, which makes it possible for you to define distinct settings for each."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Use one of the following configuration examples based on your keystore type:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "*By using PEM files:*"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "*By using a `p12` (PKCS12) keystore:*"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "*Distinguishing multiple configurations with names:*"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Configuring HTTPS for a client"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The following example configures a gRPC client named \"hello\" to use HTTPS with a truststore from the default TLS configuration:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Configuring mTLS"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To set up mutual TLS (mTLS) in your {project-name} application, configure the server and the client by creating and managing both a keystore and a truststore for each:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "*Server keystore*: Contains the server's certificate and private key."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "*Client keystore*: Contains the client's certificate and private key."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "*Server truststore*: Stores the client's certificate for authenticating the client."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "*Client truststore*: Stores the server's certificate for authenticating the server."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "An example configuration for specifying keystores and truststores:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "This configuration enables mTLS by ensuring that both the server and client validate each other's certificates, which provides an additional layer of security."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Referencing a TLS configuration"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To reference an example _named_ configuration that you created by using the `quarkus.tls.<name>.*` properties as explained in <<using-the-tls-registry>>, use the `tls-configuration-name` property as shown in the following examples:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Example configuration for the core HTTP server:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Example configuration for a gRPC client:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Example configuration for a SmallRye GraphQL client:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"When using the Typesafe GraphQL client with a certificate reloading mechanism, as described in the <<reloading-certificates>> section, it is essential to override the bean's scope to `RequestScoped` or another similar scope shorter than the application.\n"
"This is because, by default, the Typesafe client is an application-scoped bean.\n"
"Shortening the scope guarantees that new instances of the bean created after a certificate reload will be configured with the latest certificate.\n"
"Dynamic clients are `@Dependent` scoped; inject them into components with an appropriate scope."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Referencing the default truststore of SunJSSE"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"JDK distributions typically contain a truststore in the `$JAVA_HOME/lib/security/cacerts` file.\n"
"This truststore is used as a default truststore by SunJSSE, the default implementation of the Java Secure Socket Extension (JSSE).\n"
"SSL/TLS capabilities provided by SunJSSE are leveraged by various Java Runtime components, such as `javax.net.ssl.HttpsURLConnection` and others."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Although Quarkus extensions typically do not honor the default truststore of SunJSSE, it is still practical to use it in some situations.\n"
"This applies when migrating from legacy technologies or running on a Linux distribution where the SunJSSE truststore is synchronized with the operating system (OS)."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To simplify the use of the SunJSSE truststore, Quarkus TLS Registry provides a TLS configuration under the name `javax.net.ssl` that mimics the default behavior of SunJSSE:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "If the `javax.net.ssl.trustStore` system property is defined, its value is honored as a truststore."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Otherwise, the paths `$JAVA_HOME/lib/security/jssecacerts` and `$JAVA_HOME/lib/security/cacerts` are checked, and the first existing file is used as a truststore."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "If neither condition is met, an `IllegalStateException` is thrown."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The password for opening the truststore is taken from the `javax.net.ssl.trustStorePassword` system property.\n"
"If this property is not set, the default password `changeit` is used."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The `javax.net.ssl` configuration can be used as a value for various `*.tls-configuration-name` properties, as shown below:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The `javax.net.ssl` TLS configuration can be neither customized nor overridden."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Configuring TLS"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"TLS configuration primarily involves managing keystores and truststores.\n"
"The specific setup depends on the format used, such as PEM, P12, or JKS."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The following sections outline the various properties available for configuring TLS."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Key stores"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Key stores store private keys and certificates.\n"
"They are mainly used on the server side but can also be used on the client side when mTLS is used."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "PEM keystores"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Privacy Enhanced Mail (PEM) keystores are composed of a list of file pairs:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "*The certificate file* - a `.crt` or `.pem` file."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "*The private key file* - often a `.key` file."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure a PEM keystore:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"In most cases, you only need a single pair consisting of a certificate and a private key.\n"
"Even if the certificate is part of a certificate chain, it includes only one private key that corresponds to the end-entity certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"When multiple pairs are configured, the selection of one of the configured pairs of certificates and private keys is based on Server Name Indication (SNI).\n"
"The client sends the name of the server to which the client is attempting to connect, and the server selects the appropriate pair of certificates and private keys.\n"
"To use this feature, ensure that xref:./tls-registry-reference.adoc#sni[SNI] is enabled on both the client and server."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"When configuring multiple key pairs or certificate pairs, the server executes the configured pairs in a lexicographical order of their names by default, as demonstrated with `store.pem.a` and `store.pem.b` in the previous example.\n"
"The pair with the lowest lexicographical order is executed first.\n"
"To change this, you can define the order by using the `quarkus.tls.key-store.pem.order` property.\n"
"For example, `quarkus.tls.key-store.pem.order=b,c,a`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "This setting is important when using SNI, because it uses the first specified pair as the default."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "When using PEM keystore, the following formats are supported:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "PKCS#8 private key (unencrypted)"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "PKCS#1 RSA private key (unencrypted)"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Encrypted PKCS#8 private key (encrypted with AES-128-CBC)"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "In the later case, the `quarkus.tls.key-store.pem.password` or `quarkus.tls.key-store.pem.<name>.password` property must be set to the password used to decrypt the private key."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "An encrypted PEM keystore configuration example:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "PKCS12 keystores"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "PKCS12 keystores are single files that contain the certificate and the private key."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure a PKCS12 keystore:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "`.p12` files are password-protected, so you need to provide the password to open the keystore."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"These files can include more than one certificate and private key.\n"
"If this is the case, take either of the following actions:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Provide and configure the alias of the certificate and the private key you want to use:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Alternatively, use SNI to select the appropriate certificate and private key.\n"
"Note that all keys must use the same password."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "JKS keystores"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "JKS keystores are single files that contain the certificate and the private key for the server or client, used to authenticate and establish secure communications in TLS/SSL connections."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"JKS is an old but still widely used Java-specific format.\n"
"However, to work with this format, you must use specific, and nowadays also deprecated, Java tooling.\n"
"Thus, its use with your {project-name} application is not recommended."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Additionally, OpenShift cert-manager or Let's Encrypt does not typically provide JKS and remains PEM-only."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure a JKS keystore:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"`.jks` files are password-protected, so you need to provide the password to open the keystore.\n"
"Also, they can include more than one certificate and private key.\n"
"If this is the case:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Provided keystores"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "If you need more control over the keystore used in a TLS configuration, you can provide a CDI bean implementing the `io.quarkus.tls.runtime.KeyStoreProvider` interface. Quarkus calls `KeyStoreProvider::getKeyStore` when the TLS configuration is <<startup-checks,initially created>> and any time the configuration is <<reloading-certificates,reloaded>>. The resulting keystore and options are then made available via `TlsConfiguration::getKeyStore` and `TlsConfiguration::getKeyStoreOptions`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Example KeyStoreProvider"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The CDI bean implementing the `KeyStoreProvider` interface can be `@ApplicationScoped`, `@Singleton` or `@Dependent`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Use the `@Identifier` qualifier to indicate a named TLS configuration for which to provide keystore options. Omit the qualifier (or use `@Default` explicitly) to indicate the default TLS configuration. See <<referencing-a-tls-configuration>> for more details."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Other CDI beans can be injected for runtime access to keystore material."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "SNI"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Server Name Indication (SNI) is a TLS extension that makes it possible for a client to specify the host name to which it attempts to connect during the TLS handshake.\n"
"SNI enables a server to present different TLS certificates for multiple domains on a single IP address, which facilitates secure communication for virtual hosting scenarios."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To enable SNI:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "With SNI enabled, the client indicates the server name during the TLS handshake, which allows the server to select the appropriate certificate:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"When configuring the keystore with PEM files, multiple certificate (CRT) and key files must be provided.\n"
"CRT is a common file extension for X.509 certificate files, typically in PEM (Privacy-Enhanced Mail) format.\n"
"These files contain the public certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"When configuring the keystore with a JKS or P12 file, the server selects the appropriate certificate based on the SNI host name provided by the client during the TLS handshake.\n"
"The server matches the SNI hostname with the common name (CN) or subject alternative names (SAN) configured in the certificates stored in the keystore.\n"
"All keystore and alias passwords must be identical."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Credential providers"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "You can use a credential provider instead of passing the keystore password and alias password in the configuration."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"A credential provider offers a way to retrieve the keystore and alias password.\n"
"Note that the credential provider is only used if the password or alias password is not set in the configuration."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure a credential provider:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The credential provider can only be used with PKCS12 and JKS keystores."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Trust stores"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Trust stores are used to store the certificates of the trusted parties.\n"
"In regular TLS, the client uses a truststore to authenticate the server.\n"
"With mutual TLS (mTLS), both the server and the client use truststores to authenticate each other."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "PEM truststores"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"PEM truststores are composed of a list of `.crt` or `.pem` files.\n"
"Each of them contains a certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure a PEM truststore:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "PKCS12 truststores"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"PKCS12 truststores are a single file containing the certificates.\n"
"You can use the alias to select the appropriate certificate when multiple certificates are included."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure a PKCS12 truststore:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"`.p12` files are password-protected, so you need to provide the password to open the truststore.\n"
"However, unlike keystores, the alias does not require a password because it contains a public certificate, not a private key."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "JKS truststores"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"JKS truststores are single files that contain multiple certificates.\n"
"You can use the alias to select the appropriate certificate when multiple certificates are present.\n"
"However, avoid using the JKS format, because it is less secure than PKCS12."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure a JKS truststore:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"`.jks` files are password-protected, so you need to provide the password to open the truststore.\n"
"However, unlike keystores, the alias does not require a password because it contains a public certificate, not a private key."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Provided truststores"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "If you need more control over the truststore used in a TLS configuration, you can provide a CDI bean implementing the `io.quarkus.tls.runtime.TrustStoreProvider` interface. Quarkus calls `TrustStoreProvider::getTrustStore` when the TLS configuration is <<startup-checks,initially created>> and any time the configuration is <<reloading-certificates,reloaded>>. The resulting truststore and options are then made available via `TlsConfiguration::getTrustStore` and `TlsConfiguration::getTrustStoreOptions`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Example TrustStoreProvider"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The CDI bean implementing the `TrustStoreProvider` interface can be `@ApplicationScoped`, `@Singleton` or `@Dependent`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Use the `@Identifier` qualifier to indicate a named TLS configuration for which to provide truststore options. Omit the qualifier (or use `@Default` explicitly) to indicate the default TLS configuration. See <<referencing-a-tls-configuration>> for more details."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Other CDI beans can be injected for runtime access to truststore material."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Instead of passing the truststore password in the configuration, you can use a credential provider.\n"
"A credential provider allows you to retrieve passwords and other credentials.\n"
"Note that the credential provider is used only if the password is not set in the configuration."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The credential provider can only be used with PKCS12 and JKS truststores."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Other properties"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "While keystores and truststores are the most important properties, there are other properties you can use to configure TLS."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "While the following examples use the _default_ configuration, you can use the _named_ configuration by prefixing the properties with the configuration's name."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Cipher suites"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Cipher suites are a list of ciphers that you can use during the TLS handshake.\n"
"You can configure an ordered list of enabled cipher suites.\n"
"If not configured, a reasonable default is selected from the built-in ciphers.\n"
"However, when specified, your configuration precedes the default suite defined by the SSL engine in use."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure the cipher suites:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "TLS protocol versions"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The TLS protocol versions are the list of protocols that can be used during the TLS handshake.\n"
"Enabled TLS protocol versions are specified as an ordered list separated by commas.\n"
"The relevant configuration property is `quarkus.tls.protocols` or `quarkus.tls.<name>.protocols` for named TLS configurations.\n"
"It defaults to `TLSv1.3, TLSv1.2` if not configured."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The available options are `TLSv1`, `TLSv1.1`, `TLSv1.2`, and `TLSv1.3`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "For example, to only enable `TLSv1.3`:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Handshake timeout"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"When a TLS connection is established, the handshake phase is the first step.\n"
"During this phase, the client and server exchange information to establish the connection, which typically includes the cipher suite, the TLS protocol version, and the certification validation."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure the timeout for the handshake phase:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "ALPN"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Application-Layer Protocol Negotiation (ALPN) is a TLS extension that allows the client and server to negotiate which protocol they will use for communication during the TLS handshake.\n"
"ALPN enables more efficient communication by allowing the client to indicate its preferred application protocol to the server before establishing the TLS connection."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "This helps in scenarios like HTTP/2, where multiple protocols might be available, allowing for faster protocol selection."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "ALPN is enabled by default."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To disable it:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Disabling ALPN is not recommended for non-experts, as it can lead to performance degradation, protocol negotiation issues, and unexpected behavior, particularly with protocols like HTTP/2.\n"
"However, disabling ALPN can be useful for diagnosing native inconsistencies or testing performance in specific edge cases where protocol negotiation causes conflicts."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Certificate Revocation List (CRL)"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"A Certificate Revocation List (CRL) is a list of certificates that the issuing Certificate Authority (CA) revoked before their scheduled expiration date.\n"
"When a certificate is compromised, no longer needed, or deemed invalid, the CA adds it to the CRL to inform relying parties not to trust it anymore."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "You can configure the CRL with the list of certificate files you no longer trust by using the DER or PKCS#7 (P7B) formats."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "For the DER format, pass DER-encoded CRLs."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "For the PKCS#7 format, pass the `SignedData` object, where the only significant field is `crls`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure the CRL:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Trusting all certificates and hostname verification"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"You can configure your TLS connection to trust all certificates and disable the hostname verification.\n"
"Note that these are two different processes:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Trusting all certificates ignores the certificate validation, so all certificates are trusted.\n"
"This method is useful for testing with self-signed certificates, but it should not be used in production."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Hostname verification is the process of verifying the server's identity."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "It is useful to prevent man-in-the-middle attacks and often defaults to `HTTPS` or `LDAPS`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "These two properties should not be used in production."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To trust all certificates:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To disable hostname verification:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Preventing client renegotiation"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Client-initiated renegotiation allows a client to request new session parameters, such as a different cipher suite, during an established TLS connection.\n"
"While this feature can provide flexibility, it also introduces a potential security risk when using TLS 1.2."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "When a client initiates a new TLS handshake, the server typically consumes significantly more CPU resources than the client. This resource asymmetry can be exploited to launch denial-of-service (DoS) attacks, overwhelming the server with renegotiation requests."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "TLS 1.3 completely removes support for renegotiation, effectively closing this potential attack vector."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To secure TLS 1.2 and earlier, set `jdk.tls.rejectClientInitiatedRenegotiation` to `true` to prevent client-initiated renegotiation."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "If you are using the Quarkus-provided `Dockerfile` in JVM mode, you can disable renegotiation by adding the property to the `JAVA_OPTS_APPEND` environment variable:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Configuration reference"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The following table lists the supported properties:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The registry API"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "While extensions automatically use the TLS registry, you can also access the TLS configuration programmatically through the registry API."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"To access the TLS configuration, inject the `TlsConfigurationRegistry` bean.\n"
"You can retrieve a named TLS configuration by calling `get(\"<NAME>\")` or the default configuration by calling `getDefault()`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The `TlsConfiguration` object contains the keystores, truststores, cipher suites, protocols, and other properties.\n"
"It also provides a way to create an `SSLContext` from the configuration."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "You can also use the `TlsConfiguration` object to configure the Vert.x client or server, such as `KeyCertOptions`, `TrustOptions`, and so on."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Registering a certificate from an extension"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"This section is only for extension developers.\n"
"An extension can register a certificate in the TLS registry.\n"
"This is useful when an extension needs to provide a certificate to the application or provides a different format."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To register a certificate in the TLS registry by using the extension, the _processor_ extension must produce a `TlsCertificateBuildItem` composed of a name and a `CertificateSupplier`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The certificate supplier is a runtime object generally retrieved by using a recorder method."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "An example of a certificate supplier:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Startup checks"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "When an application that uses the TLS extension starts, the TLS registry performs several checks to ensure the configuration is correct:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Keystores and truststores are accessible."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Aliases are available and accessible in the keystores and truststores."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Certificates are valid."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Cipher suites and protocols are valid."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Certificate Revocation Lists (CRLs) are valid."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "If any of these checks fail, the application will not start."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Reloading certificates"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The `TlsConfiguration` obtained from the `TLSConfigurationRegistry` includes a mechanism for reloading certificates.\n"
"The `reload` method refreshes the keystores, truststores, and CRLs, typically by reloading them from the file system."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The reload operation is not automatic and must be triggered manually.\n"
"Additionally, the `TlsConfiguration` implementation must support reloading, as is the case for the configured certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The `reload` method returns a `boolean` indicating whether the reload was successful.\n"
"A value of `true` means the reload operation was successful, not necessarily that there were updates to the certificates."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "After a `TlsConfiguration` has been reloaded, servers and clients using this configuration may need to perform specific actions to apply the new certificates."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The preferred approach for informing clients and servers about the certificate reload is to fire a CDI event of type `io.quarkus.tls.CertificateUpdatedEvent`.\n"
"To do so, inject a CDI event of this type and fire it when a reload occurs."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "An example of manually reloading a TLS configuration and notifying components by firing a `CertificateUpdatedEvent` and reacting to it:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Periodic reloading"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The TLS registry includes a built-in mechanism for periodically checking the file system for changes and reloading certificates.\n"
"The `reload-period` property specifies the interval for reloading certificates and emits a `CertificateUpdatedEvent` each time certificates are reloaded."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure periodic certificate reloading:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "For each named configuration, you can set a specific reload period:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Impacted servers and clients might need to listen to the `CertificateUpdatedEvent` to apply the new certificates.\n"
"This is automatically handled for the Quarkus HTTP, REST, gRPC, and WebSocket servers, as well as the management interface if enabled.\n"
"On the client side, Quarkus REST Client automatically handles certificate update events."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "In Quarkus dev mode, when files are touched, it will trigger the `CertificateUpdatedEvent` much more frequently."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Using Kubernetes secrets or cert-manager"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "When running in Kubernetes, you can use Kubernetes secrets to store the keystores and truststores."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Using Kubernetes secrets"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "By using the secret below as an example, create a secret with the keystores and truststores to use Kubernetes secrets:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Mount the secret as a volume in the pod, which is the easiest way to use these certificates:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Configure the TLS registry to use the certificates:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "You can combine this with the periodic reloading to automatically reload the certificates when they change."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Using cert-manager"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"When running in Kubernetes, you can use cert-manager to generate and renew certificates automatically.\n"
"Cert-manager produces a secret containing the keystores and truststores.\n"
"Configuring the TLS registry is the same as when using Kubernetes secrets.\n"
"The generated secret includes the following files:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "`tls.crt` for the certificate"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "`tls.key` for the private key"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "`ca.crt` for the CA certificate (if needed)"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To configure automatic certificate renewal, use the periodic reloading mechanism:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Working with OpenShift serving certificates"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"When running your application in OpenShift, you can use the link:https://docs.openshift.com/container-platform/4.16/security/certificates/service-serving-certificate.html[OpenShift serving certificates] to generate and renew TLS certificates automatically.\n"
"The Quarkus TLS registry can use these certificates and Certificate Authority (CA) files to handle HTTPS traffic and validate certificates securely."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Acquiring a certificate"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"To have OpenShift generate a serving certificate, annotate an existing _Service_ object.\n"
"The generated certificate will be stored in a secret, which you can then mount in your pod."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The following snippet uses an example _Service_ object with an annotation for generating a TLS certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "View the configuration of the _Service_ object:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To generate a certificate, add his annotation to your already created OpenShift `service`:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The annotation `service.beta.openshift.io/serving-cert-secret-name` instructs OpenShift to generate a certificate and store it in a secret named `my-tls-secret`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Mount the secret as a volume in your pod by updating your _Deployment_ configuration:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Define a volume to mount the secret.\n"
"Use the same name as the secret declared above."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Set up the keystore with the paths to the certificate and private key.\n"
"This can be configured by using environment variables or configuration files.\n"
"This example uses environment variables.\n"
"OpenShift serving certificates always create the `tls.crt` and `tls.key` files."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Mount the secret in the container.\n"
"Ensure that the path matches the one used in the configuration (here `/etc/tls`)."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Configure the port to serve HTTPS."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Deploy your application to use the certificate generated by OpenShift.\n"
"This will make the service available over HTTPS."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "By setting the `quarkus.tls.key-store.pem.acme.cert` and `quarkus.tls.key-store.pem.acme.key` variables or their environment variable variant, the TLS registry will use the certificate and private key from the secret."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"This configures the default keystore for the Quarkus HTTP server, which allows the server to use the certificate.\n"
"For information about using this certificate in a named configuration, see xref:referencing-a-tls-configuration[]."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Trusting the Certificate Authority (CA)"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "<<acquiring-a-certificate>>"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Now that your service uses a certificate issued by OpenShift, configure your client applications to trust this certificate.\n"
"To do so, create a ConfigMap that holds the CA certificate, and then configure the pod to mount it.\n"
"The following steps use a Quarkus REST client as an example, but the same approach applies to any client."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Start by defining an _empty_ ConfigMap, which will be populated with the CA certificate:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The `service.beta.openshift.io/inject-cabundle` annotation is used to inject the CA certificate into the ConfigMap.\n"
"Note that the ConfigMap initially has no data — it is empty.\n"
"During its processing, OpenShift injects the CA certificate into the ConfigMap in the `service-ca.crt` file."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Mount the ConfigMap by adding a volume and mounting it in your _Deployment_ configuration:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Mount the ConfigMap in the container.\n"
"Ensure that the path matches the one used in the configuration (in this example `/deployments/tls`)."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Define a volume to mount the ConfigMap and reference the ConfigMap that receives the CA certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Configure the REST client to use this CA certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Consider the following REST client interface:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Configure the base URI and the configuration key.\n"
"The name must be in the format `<service-name>.<namespace>.svc`.\n"
"Otherwise, the certificate will not be trusted.\n"
"Ensure that the `configKey` is also configured."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Configure the REST client to trust the CA certificate generated by OpenShift:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Configure the `hero` REST client with the TLS configuration named `my-service-tls`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Set up the `my-service-tls` TLS configuration, specifically the truststore with the CA certificate.\n"
"Ensure the path matches the one used in the Kubernetes _Deployment_ configuration.\n"
"The file is always named `service-ca.crt`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Certificate renewal"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"OpenShift automatically renews the serving certificates it generates.\n"
"When the certificate is renewed, the secret is updated with the new certificate and private key."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To ensure your application uses the new certificate, you can use the periodic reloading feature of the Quarkus TLS registry."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "By setting the `reload-period` property, the TLS registry will periodically check the keystores and truststores for changes and reload them if needed:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Optionally, implement a custom mechanism to reload the certificates when the secret is updated.\n"
"See <<reloading-certificates>> for more information."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Quarkus CLI commands and development Certificate Authority"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The TLS registry provides Quarkus CLI commands to generate a development Certificate Authority (CA) and trusted certificates.\n"
"This avoids having to use self-signed certificates locally."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The following snippet shows the description of the `quarkus tls` command, containing two sub-commands:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "This is useful for local development, as it allows Quarkus to act as its own certificate authority, which can be used to sign other certificates."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "This is useful when creating a certificate for secure communication between your application and external services or clients during development."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"In most cases, you generate the Quarkus Development CA once and then generate certificates signed by this CA.\n"
"The Quarkus Development CA is a Certificate Authority that can be used to sign certificates locally.\n"
"It is only valid for development purposes and only trusted on the local machine.\n"
"The generated CA is located in `$HOME/.quarkus/quarkus-dev-root-ca.pem`, and installed in the system truststore."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Understanding self-signed versus CA-signed certificates"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "When developing with TLS, you can use two types of certificates:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"**Self-signed certificate**: The certificate is signed by the same entity that uses it.\n"
"It is not trusted by default.\n"
"This type of certificate is typically used when a Certificate Authority (CA) is unavailable or when a simple setup is needed.\n"
"It is not suitable for production and is intended only for development."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"**CA-signed certificate**: The certificate is signed by a Certificate CA, a trusted entity.\n"
"This certificate is trusted by default and is the standard choice for production environments."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"While you can use a self-signed certificate for local development, it has limitations.\n"
"Browsers and tools like `curl`, `wget`, and `httpie` typically do not trust self-signed certificates, requiring manual import of the CA in your operating system."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"To avoid this issue, use a development CA to sign certificates and install the CA in the system truststore.\n"
"This ensures that the system trusts all certificates signed by the CA.\n"
"Quarkus simplifies the generation of a development CA and the certificates that are signed by this CA."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Generate a development CA"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The development CA is a Certificate Authority that can be used to sign certificates locally.\n"
"Note that the generated CA is only valid for development purposes and can only be trusted on the local machine."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "To generate a development CA:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"`--install` installs the CA in the system truststore.\n"
"Windows, Mac, and Linux (Fedora and Ubuntu) are supported.\n"
"However, depending on your browser, you might need to import the generated CA manually.\n"
"Refer to your browser's documentation for more information.\n"
"The generated CA is located in `$HOME/.quarkus/quarkus-dev-root-ca.pem`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"`--renew` renews the CA if it already exists.\n"
"When this option is used, the private key is changed, so you need to regenerate the certificates signed by the CA.\n"
"If the CA expires, it will automatically renew without requiring the `--renew` option."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "`--truststore` also generates a PKCS12 truststore containing the CA certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "When installing the certificate, your system might ask for your password to install the certificate in the system truststore or ask for confirmation in a dialog on Windows."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "On Windows, run as administrator from an elevated terminal to install the CA in the system truststore."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Generating a trusted (signed) certificate"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "<<generate-a-development-ca>>"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"After installing the Quarkus Development CA, generate a trusted certificate.\n"
"This certificate will be signed by the Quarkus Development CA and trusted by your system."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "This command generates a certificate signed by the Quarkus Development CA, which your system will trust if properly installed or imported."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The certificate is stored in `./.certs/`.\n"
"Two files are generated:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"`$NAME-keystore.p12`: Contains the private key and the certificate.\n"
"It is password-protected."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "`$NAME-truststore.p12`: Contains the CA certificate, which you can use as a truststore, for example, for testing."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Additional options are available:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "A `.env` file is also generated when generating the certificate, making the Quarkus dev mode aware of these certificates."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Run your application in dev mode to use these certificates:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Open the Dev UI by using HTTPS: `https://localhost:8443/q/dev` or by issuing a `curl` request:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Quarkus generates a self-signed certificate if the Quarkus Development CA is not installed."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Generating a self-signed certificate"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Even if the Quarkus Development CA is installed, you can generate a self-signed certificate:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "This generates a self-signed certificate that the Quarkus Development CA does not sign."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Uninstalling the Quarkus Development CA"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Uninstalling the Quarkus Development CA from your system depends on your OS."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Deleting the CA certificate on Windows"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "List the CA certificate on Windows by using the Powershell terminal with administrator rights:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Delete the stored CA certificate and replace `$Serial_Number` with the serial number of the CA certificate:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Deleting the CA certificate on Linux"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "On Fedora:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "On Ubuntu:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Deleting the CA certificate on Mac"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "On Mac:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Automatic certificate management with Let's Encrypt"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "link:https://letsencrypt.org[Let's Encrypt] is a free, automated certificate authority provided by link:https://www.abetterinternet.org/[Internet Security Research Group]."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Let's Encrypt uses link:https://datatracker.ietf.org/doc/html/rfc8555[Automated certificate management environment (ACME) protocol] to support automatic certificate issuance and renewal.\n"
"To learn more about Let's Encrypt and ACME, see link:https://letsencrypt.org/docs/[Let's Encrypt documentation]."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The TLS registry extension allows a CLI ACME client to issue and renew Let's Encrypt certificates.\n"
"Your application uses this TLS registry extension to resolve ACME protocol challenges."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Follow the steps below to have your Quarkus application prepared and automatically updated with new and renewed Let's Encrypt certificates."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Ensure that a fully resolvable DNS domain name is available that you can use to access your application.\n"
"You can use this domain name to create a Let's Encrypt account and pass the Let's Encrypt ACME challenges to prove that you own this domain.\n"
"You can use link:https://ngrok.com/[ngrok] to start experimenting with the Quarkus Let's Encrypt ACME feature; for more information, see the <<lets-encrypt-ngrok,Testing with ngrok>> section below."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Your Quarkus HTTPS application must use a _build-time_ property to enable a Let's Encrypt ACME challenge route:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The TLS registry can manage the challenge process from either the main HTTP interface or the management interface.\n"
"Using a management interface is **strongly** recommended to let Quarkus deal with ACME challenge configuration separately from the main application's deployment and security requirements:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Port 80"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"The Let's Encrypt ACME challenge requires that the application is reachable on port `80`, essentially `http://your-dns-name`.\n"
"Ensure the port `80` is accessible from the Internet.\n"
"It might require an explicit security policy depending on your hosting provider."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"We also recommend setting `quarkus.http.insecure-requests` to `redirect` to redirect all HTTP requests to HTTPS.\n"
"The ACME challenge accepts self-signed certificates and up to 10 redirections:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The challenge is served from the primary HTTP interface, which is accessible from your DNS domain name."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Do not start your application yet."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Application preparation"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Before you request a Let's Encrypt certificate:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Move to the root directory of your application."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Run the TLS registry Let's Encrypt CLI `prepare` command:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The `prepare` command does the following:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Creates a `.letsencrypt` folder in your application's root directory."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Creates a self-signed domain certificate and private key for your application configured in the previous <<lets-encrypt-prerequisites,Let's Encrypt prerequisites>> step to start and accept HTTPS requests."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Creates a `.env` configuration file in the root directory of your application and configures it to use the self-signed domain certificate and private key until you obtain the Let's Encrypt certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The following snippet shows an example of the generated `.env` file:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "The `.env` file does not contain the `quarkus.tls.lets-encrypt.enabled` and `quarkus.management.enabled` properties as they are build-time properties that require a rebuild of the application."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Starting your application"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Start your application:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Access your application endpoint by using `https://your-domain-name:8443/`; for example, `https://your-domain-name:8443/hello`, and accept a self-signed certificate in the browser."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Keep the application running and request your first Let's Encrypt certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Issue a certificate"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "From the application directory, run the `issue-certificate` command to acquire your first Let's Encrypt certificate:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Set your domain name."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Provide your contact email address that Let's Encrypt can use to contact you in case of any issues with your Let's Encrypt account."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Set your application management URL, which you can use to handle ACME challenges.\n"
"Use `https://localhost:8443/` if you choose not to enable a management router in the <<lets-encrypt-prerequisites,Let's Encrypt prerequisites>> step."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "During the processing of the `issue-certificate` command, the TLS registry CLI performs the following tasks:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Checks if the application is prepared to serve the challenge."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Creates and records Let's Encrypt account information."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Issues a Let's Encrypt certificate request."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Interacts with the Quarkus application to resolve ACME challenges."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"When the Let's Encrypt certificate chain and private key have been successfully acquired, they are converted to PEM format and copied to your application's `.letsencrypt` folder.\n"
"The TLS registry is informed that a new certificate and private key are ready and reloads them automatically."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Access your application's endpoint using `https://your-domain-name:8443/` again.\n"
"Confirm in the browser that the Let's Encrypt certificate authority is now signing your domain certificate."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Note that currently, the `issue-certificate` command implicitly creates a Let's Encrypt account to make it easy for users to get started with the ACME protocol.\n"
"Support for the Let's Encrypt account management will evolve further."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Renewing a certificate"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Renewing certificates is similar to issuing the first certificate, but it requires an existing account created during the <<lets-encrypt-issue-certificate,Issue certificates with Let's Encrypt>> step."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Run the following command to renew your Let's Encrypt certificate and set your domain DNS name:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "During this command, TLS registry CLI reads a Let's Encrypt account information recorded during the <<lets-encrypt-issue-certificate,Issue certificates with Let's Encrypt>> step, issues a Let's Encrypt certificate request, and communicates with a Quarkus application to have ACME challenges resolved."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"Once the Let's Encrypt certificate chain and private key have been successfully renewed, they are converted to PEM format and copied to your application's `.letsencrypt` folder.\n"
"The TLS registry is notified when a new certificate and private key are ready, and it automatically reloads them."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Testing with ngrok"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "link:https://ngrok.com/[ngrok] can be used to provide a secure HTTPS tunnel to your application running on localhost, and make it easy to test HTTPS based applications."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "ngrok provides a simplified way of getting started with the Quarkus Let's Encrypt ACME feature."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Initiate testing by asking ngrok to reserve a domain:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"You can use link:https://github.com/quarkiverse/quarkus-ngrok[Quarkiverse ngrok] in dev mode or reserve it directly in the ngrok dashboard.\n"
"Unfortunately, you cannot use your ngrok domain to test the Quarkus Let's Encrypt ACME feature immediately.\n"
"This is because ngrok itself uses Let's Encrypt and intercepts ACME challenges that are meant to be handled by the Quarkus application instead."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Therefore, remove the ngrok Let's Encrypt certificate policy from your ngrok domain:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "`YOUR-RESERVED-DOMAIN-ID` is your reserved domain's id which starts from `rd_`, you can find it in the link:https://dashboard.ngrok.com/cloud-edge/domains[ngrok dashboard domains section]."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Because ngrok only forwards ACME challenges over HTTP, start ngrok by using the following command:"
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid ""
"`8080` is the localhost HTTP port your application is listening on.\n"
"Note that the application will be accessible from `http://YOUR-NGROK-DOMAIN` on port `80` but redirected to your local machine on port `8080`."
msgstr ""

#: _versions/3.27/guides/tls-registry-reference.adoc
msgid "Test the Quarkus Let's Encrypt ACME feature from your local machine."
msgstr ""
