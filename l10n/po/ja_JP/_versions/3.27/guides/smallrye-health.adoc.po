msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/smallrye-health.adoc
msgid "SmallRye Health"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"This guide demonstrates how your Quarkus application can use https://github.com/smallrye/smallrye-health/[SmallRye Health]\n"
"an implementation of the https://github.com/eclipse/microprofile-health/[MicroProfile Health] specification."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"SmallRye Health allows applications to provide information about their state\n"
"to external viewers which is typically useful in cloud environments where automated\n"
"processes must be able to determine whether the application should be discarded\n"
"or restarted."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"In this guide, we build a simple REST application that exposes MicroProfile Health\n"
"functionalities at the `/q/health/live` and `/q/health/ready` endpoints according to the\n"
"specification."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the\n"
"application step by step. However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an\n"
"{quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"The solution is located in the `microprofile-health-quickstart`\n"
"{quickstarts-tree-url}/microprofile-health-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Creating the Maven Project"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "This command generates a project, importing the `smallrye-health` extension."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `smallrye-health` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Running the health check"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Importing the `smallrye-health` extension directly exposes three REST endpoints:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "`/q/health/live` - The application is up and running."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "`/q/health/ready` - The application is ready to serve requests."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "`/q/health/started` - The application is started."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "`/q/health` - Accumulating all health check procedures in the application."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "To check that the `smallrye-health` extension is working as expected:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "start your Quarkus application with:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "CLI"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Maven"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Gradle"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"access the `http://localhost:8080/q/health/live` endpoint using your browser or\n"
"`curl http://localhost:8080/q/health/live`"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "All `health` REST endpoints return a simple JSON object with two fields:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "`status` -- the overall result of all the health check procedures"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "`checks` -- an array of individual checks"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"The general `status` of the health check is computed as a logical AND of all the\n"
"declared health check procedures. The `checks` array is empty as we have not specified\n"
"any health check procedure yet so let's define some."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Management interface"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"By default, the health checks are exposed on the main HTTP server.\n"
"You can expose them on a separate network interface and port by enabling the management interface with the\n"
"`quarkus.management.enabled=true` property.\n"
"Refer to the xref:./management-interface-reference.adoc[management interface reference] for more information."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Creating your first health check"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "In this section, we create our first simple health check procedure."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Create the `org.acme.microprofile.health.SimpleHealthCheck` class:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "It's recommended to annotate the health check class with `@ApplicationScoped` or the `@Singleton` scope so that a single bean instance is used for all health check requests."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "If a bean class annotated with one of the health check annotations declares no scope then the `@Singleton` scope is used automatically."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "As you can see, the health check procedures are defined as CDI beans that implement the `HealthCheck` interface and are annotated with one of the health check qualifiers, such as:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "`@Liveness` - the liveness check accessible at `/q/health/live`"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "`@Readiness` - the readiness check accessible at `/q/health/ready`"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"`HealthCheck` is a functional interface whose single method `call` returns a\n"
"`HealthCheckResponse` object which can be easily constructed by the fluent builder\n"
"API shown in the example."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"As we have started our Quarkus application in dev mode simply repeat the request\n"
"to `http://localhost:8080/q/health/live` by refreshing your browser window or by\n"
"using `curl http://localhost:8080/q/health/live`. Because we defined our health check\n"
"to be a liveness procedure (with `@Liveness` qualifier) the new health check procedure\n"
"is now present in the `checks` array."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"Congratulations! You've created your first Quarkus health check procedure. Let's\n"
"continue by exploring what else can be done with SmallRye Health."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Adding a readiness health check procedure"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"In the previous section, we created a simple liveness health check procedure which states\n"
"whether our application is running or not. In this section, we will create a readiness\n"
"health check which will be able to state whether our application is able to process\n"
"requests."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"We will create another health check procedure that simulates a connection to\n"
"an external service provider such as a database. For starters, we will always return\n"
"the response indicating the application is ready."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Create `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"If you now rerun the health check at `http://localhost:8080/q/health/live` the `checks`\n"
"array will contain only the previously defined `SimpleHealthCheck` as it is the only\n"
"check defined with the `@Liveness` qualifier. However, if you access\n"
"`http://localhost:8080/q/health/ready` (in the browser or with\n"
"`curl http://localhost:8080/q/health/ready`) you will see only the\n"
"`Database connection health check` as it is the only health check defined with the\n"
"`@Readiness` qualifier as the readiness health check procedure."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "If you access `http://localhost:8080/q/health` you will get back both checks."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"More information about which health check procedures should be used in which situation\n"
"is detailed in the MicroProfile Health specification. Generally, the liveness\n"
"procedures determine whether the application should be restarted while readiness\n"
"procedures determine whether it makes sense to contact the application with requests."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Adding a startup health check procedure"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "The third and final type of health check procedures is startup. Startup procedures are defined as an option for slow starting containers (should not be needed in Quarkus) to delay the invocations of liveness probe which will take over from startup once the startup responds UP for the first time. Startup health checks are defined with the `@Startup` qualifier."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Please make sure that you import the microprofile `org.eclipse.microprofile.health.Startup` annotation since there is an unfortunate clash with `io.quarkus.runtime.Startup`."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Create `org.acme.microprofile.health.StartupHealthCheck` class:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "The startup health check will be available either at `http://localhost:8080/q/health/started` or together with other health check procedure at `http://localhost:8080/q/health`."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Negative health check procedures"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"In this section, we extend our `Database connection health check` with the option of\n"
"stating that our application is not ready to process requests as the underlying\n"
"database connection cannot be established. For simplicity reasons, we only determine\n"
"whether the database is accessible or not by a configuration property."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Update the `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"Until now, we used a simplified method of building a `HealthCheckResponse`\n"
"through the `HealthCheckResponse#up(String)` (there is also\n"
"`HealthCheckResponse#down(String)`) which will directly build the response object.\n"
"From now on, we utilize the full builder capabilities provided by the\n"
"`HealthCheckResponseBuilder` class."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"If you now rerun the readiness health check (at `http://localhost:8080/q/health/ready`)\n"
"the overall `status` should be DOWN. You can also check the liveness check at\n"
"`http://localhost:8080/q/health/live` which will return the overall `status` UP because\n"
"it isn't influenced by the readiness checks."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"As we shouldn't leave this application with a readiness check in a DOWN state and\n"
"because we are running Quarkus in dev mode you can add `database.up=true` in\n"
"`src/main/resources/application.properties` and rerun the readiness health check again\n"
"-- it should be up again."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Adding user-specific data to the health check response"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"In previous sections, we saw how to create simple health checks with only the minimal\n"
"attributes, namely, the health check name and its status (UP or DOWN). However, the\n"
"MicroProfile Health specification also provides a way for the applications to supply\n"
"arbitrary data in the form of key-value pairs sent to the consuming end. This can be\n"
"done by using the `withData(key, value)` method of the health check response\n"
"builder API."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Let's create a new health check procedure `org.acme.microprofile.health.DataHealthCheck`:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"If you rerun the liveness health check procedure by accessing the `/q/health/live`\n"
"endpoint you can see that the new health check `Health check with data` is present\n"
"in the `checks` array. This check contains a new attribute called `data` which is a\n"
"JSON object consisting of the properties we have defined in our health check procedure."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"This functionality is specifically useful in failure scenarios where you can pass the\n"
"error along with the health check response."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Context propagation into the health check invocations"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "For performance reasons, the context (e.g., CDI or security context) is not propagated into each health check invocation. However, if you need to enable this functionality you can set the config property `quarkus.smallrye-health.context-propagation=true` to allow the context propagation into every health check call."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Reactive health checks"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "MicroProfile Health currently doesn't support returning reactive types, but SmallRye Health does."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"If you want to provide a reactive health check, you can implement the `io.smallrye.health.api.AsyncHealthCheck` interface instead of the `org.eclipse.microprofile.health.HealthCheck` one.\n"
"The `io.smallrye.health.api.AsyncHealthCheck` interface allows you to return a `Uni<HealthCheckResponse>`."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "The following example shows a reactive liveness check:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Health status change observers"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"If you need to react to change of the health status of your application, the Smallrye Health\n"
"extension provides a CDI event that can notify you about the individual health status changes."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"To observe the health status change, you can observe the `io.smallrye.health.api.event.HealthStatusChangeEvent`\n"
"with the standard CDI observation mechanism. Since we cannot guarantee that the observer method\n"
"runs all the time on the worker thread (meaning it can run on the event loop thread), it's\n"
"recommended that you never block in the in observer method."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Extension health checks"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Some extension may provide default health checks, including the extension will automatically register its health checks."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"For example, `quarkus-agroal` that is used to manage Quarkus datasource(s) automatically register a readiness health check\n"
"that will validate each datasource: xref:datasource.adoc#datasource-health-check[Datasource Health Check]."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "You can disable extension health checks via the property `quarkus.health.extensions.enabled` so none will be automatically registered."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Health UI"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Experimental - not included in the MicroProfile specification"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "`health-ui` allows you to see your Health Checks in a Web GUI."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "The Quarkus `smallrye-health` extension ships with `health-ui` and enables it by default in dev and test modes, but it can also be explicitly configured for production mode as well."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "`health-ui` can be accessed from http://localhost:8080/q/health-ui/ ."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "image:health-ui-screenshot01.png[alt=Health UI]"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"By default, the health checks are exposed on the main HTTP server.\n"
"You can expose them on a separate network interface and port by setting `quarkus.management.enabled=true` in your application configuration.\n"
"Note that this property is a build-time property.\n"
"The value cannot be overridden at runtime."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"If you enable the management interface without customizing the management network interface and port, the health checks are exposed under: `http://0.0.0.0:9000/q/health`.\n"
"You can configure the _path_ (the `health` segment in the previous URL) using the `quarkus.smallrye-health.root-path` property."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Refer to the xref:./management-interface-reference.adoc[management interface reference] for more information."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Conclusion"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"SmallRye Health provides a way for your application to distribute information\n"
"about its healthiness state to state whether it is able to function properly.\n"
"Liveness checks are utilized to tell whether the application should be restarted and\n"
"readiness checks are used to tell whether the application is able to process requests."
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "All that is needed to enable the SmallRye Health features in Quarkus is:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid ""
"adding the `smallrye-health` Quarkus extension to your project using the\n"
"`quarkus-maven-plugin`:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "or simply adding the following Maven dependency:"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "Configuration Reference"
msgstr ""

#: _versions/3.27/guides/smallrye-health.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
