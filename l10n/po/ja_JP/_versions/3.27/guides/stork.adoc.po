msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/stork.adoc
msgid "Getting Started with SmallRye Stork"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"The essence of distributed systems resides in the interaction between services.\n"
"In modern architecture, you often have multiple instances of your service to share the load or improve the resilience by redundancy.\n"
"But how do you select the best instance of your service?\n"
"That's where https://smallrye.io/smallrye-stork[SmallRye Stork] helps.\n"
"Stork is going to choose the most appropriate instance.\n"
"It offers:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Extensible service discovery mechanisms"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Built-in support for Consul and Kubernetes"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Customizable client load-balancing strategies"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "In this guide, we will build an application composed of:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "A simple blue service exposed on port 9000"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "A simple red service exposed on port 9001"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "A REST Client calling the blue or red service (the selection is delegated to Stork)"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "A REST endpoint using the REST client and calling the services"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "The blue and red services are registered in https://www.consul.io/[Consul]."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"For the sake of simplicity, everything (except Consul) will be running in the same Quarkus application.\n"
"Of course, each component will run in its own process in the real world."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the applications step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "The solution is located in the `stork-quickstart` link:{quickstarts-tree-url}/stork-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Discovery and selection"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Before going further, we need to discuss discovery vs. selection."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"Service discovery is the process of locating service instances.\n"
"It produces a list of service instances that is potentially empty (if no service matches the request) or contains multiple service instances."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"Service selection, also called load-balancing, chooses the best instance from the list returned by the discovery process.\n"
"The result is a single service instance or an exception when no suitable instance can be found."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"Stork handles both discovery and selection.\n"
"However, it does not handle the communication with the service but only provides a service instance.\n"
"The various integrations in Quarkus extract the location of the service from that service instance."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Bootstrapping the project"
msgstr ""

#: _versions/3.27/guides/stork.adoc
#, fuzzy
msgid "Create a Quarkus project importing the quarkus-rest-client, quarkus-rest, and quarkus-smallrye-stork extensions using your favorite approach:"
msgstr "quarkus-rest-client、quarkus-rest、quarkus-smallrye-storkの各拡張をインポートして、Quarkusプロジェクトを作成します："

#: _versions/3.27/guides/stork.adoc
msgid "In the generated project, also add the following dependencies:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"`stork-service-discovery-consul` provides an implementation of service discovery for Consul.\n"
"`smallrye-mutiny-vertx-consul-client` is a Consul client which we will use to register our services in Consul."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "The Blue and Red services"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Let's start with the very beginning: the service we will discover, select and call."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Create the `src/main/java/org/acme/services/BlueService.java` with the following content:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"It creates a new HTTP server (using Vert.x) and implements our simple service when the application starts.\n"
"For each HTTP request, it sends a response with \"Hello from Blue!\" as the body."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Following the same logic, create the `src/main/java/org/acme/services/RedService.java` with the following content:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "This time, it writes \"Hello from Red!\"."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Service registration in Consul"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Now that we have implemented our services, we need to register them into Consul."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Stork is not limited to Consul and integrates with other service discovery mechanisms."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Create the `src/main/java/org/acme/services/Registration.java` file with the following content:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"When the application starts, it connects to Consul using the Vert.x Consul Client and registers our two instances.\n"
"Both registration uses the same name (`my-service`), but different ids to indicate that it's two instances of the same _service_."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "The REST Client interface and the front end API"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "So far, we didn't use Stork; we just scaffolded the services we will be discovering, selecting, and calling."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"We will call the services using the REST Client.\n"
"Create the `src/main/java/org/acme/MyService.java` file with the following content:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"It's a straightforward REST client interface containing a single method. However, note the `baseUri` attribute.\n"
"It starts with `stork://`.\n"
"It instructs the REST client to delegate the discovery and selection of the service instances to Stork.\n"
"Notice the `my-service` part in the URL.\n"
"It is the service name we will be using in the application configuration."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"It does not change how the REST client is used.\n"
"Create the `src/main/java/org/acme/FrontendApi.java` file with the following content:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "It injects and uses the REST client as usual."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Stork Filter"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"The `baseUri` configured in the REST client will be processed by `StorkClientRequestFilter` class, this is a https://quarkus.io/specs/jaxrs/2.1/index.html#filters[Jakarta REST filter].\n"
"If you need to process the metadata associated with a message: HTTP headers, query parameters, media type, and other metadata, you can implement another filter to configure what you need.\n"
"Let’s implement a custom filter to add logging capability to our service. We create `CustomLoggingFilter` and annotating it with the @Provider annotation:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"The order in which filters are executed is defined by https://quarkus.io/specs/jaxrs/2.1/index.html#priorities[Priorities].\n"
"Note that `CustomLoggingFilter` is using a default value, so the user-level priority and the `StorkClientRequestFilter` uses the security authentication filter priority. This means that `StorkClientRequestFilter` will be executed before our `CustomLoggingFilter`.\n"
"Use `@Priority` annotation to change this behaviour."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Stork configuration"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "The system is almost complete. We only need to configure Stork and the `Registration` bean."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "In the `src/main/resources/application.properties`, add:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "The first two lines provide the Consul location used by the `Registration` bean."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"The other properties are related to Stork.\n"
"`stork.my-service.service-discovery` indicates which type of service discovery we will be using to locate the `my-service` service.\n"
"In our case, it's `consul`.\n"
"`quarkus.stork.my-service.service-discovery.consul-host` and `quarkus.stork.my-service.service-discovery.consul-port` configures the access to Consul.\n"
"Finally, `quarkus.stork.my-service.load-balancer.type` configures the service selection.\n"
"In our case, we use a `round-robin`."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Running the application"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"We're done!\n"
"So, let's see if it works."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "First, start Consul:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "If you start Consul differently, do not forget to edit the application configuration."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Then, package the application:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "And run it:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "In another terminal, run:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "The responses alternate between `Hello from Red!` and `Hello from Blue!`."
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "You can compile this application into a native executable:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "And start it with:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "Going further"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid ""
"This guide has shown how to use SmallRye Stork to discover and select your services.\n"
"You can find more about Stork in:"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "the xref:stork-reference.adoc[Stork reference guide],"
msgstr ""

#: _versions/3.27/guides/stork.adoc
msgid "the https://smallrye.io/smallrye-stork[SmallRye Stork website]."
msgstr ""
