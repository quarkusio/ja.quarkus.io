msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Cross-Site Request Forgery Prevention"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "https://owasp.org/www-community/attacks/csrf[Cross-Site Request Forgery (CSRF)] is an attack that forces an end user to execute unwanted actions on a web application in which they are currently authenticated."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Quarkus Security provides a CSRF prevention feature which implements https://cheatsheetseries.owasp.org/cheatsheets/Cross-Site_Request_Forgery_Prevention_Cheat_Sheet.html#double-submit-cookie[Double Submit Cookie] and <<csrf-request-header>> techniques."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid ""
"`Double Submit Cookie` technique requires that the CSRF token sent as `HTTPOnly`, optionally signed, cookie to the client, and\n"
"directly embedded in a hidden form input of server-side rendered HTML forms, or submitted as a request header value."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "The extension consists of a xref:rest.adoc[Quarkus REST (formerly RESTEasy Reactive)] server filter which creates and verifies CSRF tokens in `application/x-www-form-urlencoded` and `multipart/form-data` forms and a Qute HTML form parameter provider which supports the xref:qute-reference.adoc#injecting-beans-directly-in-templates[injection of CSRF tokens in Qute templates]."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Creating the Project"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid ""
"First, we need a new project.\n"
"Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "This command generates a project which imports the `rest-csrf` extension."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `rest-csrf` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Next, let's add a `csrfToken.html` Qute template producing an HTML form in the `src/main/resources/templates` folder:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "This expression is used to inject a CSRF token into a hidden form field. This token will be verified by the CSRF filter against a CSRF cookie."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Now let's create a resource class which returns an HTML form and handles form POST requests:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Inject the `csrfToken.html` as a `Template`."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Return the HTML form with a hidden form field containing a CSRF token created by the CSRF filter."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Handle the POST form request, this method can only be invoked if the CSRF filter has successfully verified the token."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "The form POST request will fail with HTTP status `400` if the filter finds the hidden CSRF form field is missing, the CSRF cookie is missing, or if the CSRF form field and CSRF cookie values do not match."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "At this stage no additional configuration is needed - by default the CSRF form field and cookie name will be set to `csrf-token`, and the filter will verify the token. But you can change these names if you would like:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Sign CSRF token"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "You can get `HMAC` signatures created for the generated CSRF tokens and have these `HMAC` values stored as CSRF token cookies if you would like to avoid the risk of the attackers recreating the CSRF cookie token. All you need to do is to configure a token signature secret which must be at least 32 characters long:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "CSRF Request Header"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "If HTML `form` tags are not used and you need to pass CSRF token as a header, then inject the header name and token, for example, into HTMX:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "This expression is used to inject a CSRF token header and token. This token will be verified by the CSRF filter against a CSRF cookie."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Default header name is `X-CSRF-TOKEN`, you can customize it with `quarkus.rest-csrf.token-header-name`, for example:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "If you need to access the CSRF cookie from JavaScript in order to pass its value as a header, use `{inject:csrf.cookieName}` and `{inject:csrf.headerName}` to inject the cookie name which has to be read as a CSRF header value and allow accessing this cookie:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Cross-origin resource sharing"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "If you would like to enforce CSRF prevention in a Cross-origin environment, please avoid supporting all Origins."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Restrict supported Origins to trusted Origins only, see xref:security-cors.adoc#cors-filter[CORS filter] section of the \"Cross-origin resource sharing\" guide for more information."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Restrict CSRF token verification"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Your Jakarta REST endpoint may accept not only HTTP POST requests with `application/x-www-form-urlencoded` or `multipart/form-data` payloads but also payloads with other media types, either on the same or different URL paths, and therefore you would like to avoid verifying the CSRF token in such cases, for example:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "POST form request to `/user`, CSRF token verification is enforced by the CSRF filter"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "POST json request to `/user`, CSRF token verification is not needed"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "POST json request to `/users`, CSRF token verification is not needed"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "As you can see a CSRF token verification will be required at the `/service/user` path accepting the `application/x-www-form-urlencoded` payload, but `User` JSON representation posted to both `/service/user` and `/service/users` method will have no CSRF token and therefore the token verification has to be skipped in these cases by restricting it to the specific `/service/user` request path but also allowing not only `application/x-www-form-urlencoded` on this path:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Verify CSRF token in the application code"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "If you prefer to compare the CSRF form field and cookie values in the application code then you can do it as follows:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Compare the CSRF form field and cookie values and fail with HTTP status `400` if they don't match."
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Also disable the token verification in the filter:"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "Configuration Reference"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "https://owasp.org/www-community/attacks/csrf[OWASP Cross-Site Request Forgery]"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "xref:rest.adoc[Quarkus REST]"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "xref:qute-reference.adoc[Qute Reference]"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "xref:security-cors.adoc#cors-filter[Cross-origin resource sharing]"
msgstr ""

#: _versions/3.27/guides/security-csrf-prevention.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
