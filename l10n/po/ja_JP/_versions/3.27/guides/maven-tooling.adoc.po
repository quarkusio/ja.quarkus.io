msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Quarkus and Maven"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Use Maven to create a new project, add or remove extensions, launch development mode, debug your application, and build your application into a jar, native executable, or container-friendly executable. Import your project into your favorite IDE using Maven project metadata."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Creating a new project"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "You can scaffold a new Maven project with:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "If you are using the CLI, you can get the list of available options with:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "If you are using the Maven command, the following table lists the attributes you can pass to the `create` command:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Attribute"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Default Value"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Description"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`projectGroupId`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`org.acme.sample`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The group id of the created project"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`projectArtifactId`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "_mandatory_"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The artifact id of the created project. Not passing it triggers the interactive mode."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`projectVersion`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`1.0.0-SNAPSHOT`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The version of the created project"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`platformGroupId`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`{quarkus-platform-groupid}`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The group id of the target platform."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`platformArtifactId`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`quarkus-bom`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The artifact id of the target platform BOM."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`platformVersion`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The version currently recommended by the xref:extension-registry-user.adoc[Quarkus Extension Registry]"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The version of the platform you want the project to use. It can also accept a version range, in which case the latest from the specified range will be used."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`javaVersion`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "17"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The version of Java you want the project to use."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`className`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "_Not created if omitted_"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The fully qualified name of the generated resource"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`path`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`/hello`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The resource path, only relevant if `className` is set."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`extensions`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "_[]_"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The list of extensions to add to the project (comma-separated)"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`quarkusRegistryClient`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`true`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Whether Quarkus should use the online registry to resolve extension catalogs. If this is set to false, the extension catalog will be narrowed to the defined (or default) platform BOM."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "By default, the command will target the `{quarkus-platform-groupid}:quarkus-bom:{quarkus-version}` platform release (unless the coordinates of the desired platform release have been specified)."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The project is generated in a directory named after the passed artifactId.\n"
"If the directory already exists, the generation fails."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"A pair of Dockerfiles for native and jvm mode are also generated in `src/main/docker`.\n"
"Instructions to build the image and run the container are written in those Dockerfiles."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Dealing with extensions"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "From inside a Quarkus project, you can obtain a list of the available extensions with:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "You can add an extension using:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Extensions are passed using a comma-separated list."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The extension name is the GAV name of the extension: e.g., `io.quarkus:quarkus-agroal`.\n"
"However, you can pass a partial name, and Quarkus will do its best to find the right extension.\n"
"For example, `agroal`, `Agroal`, or `agro` will expand to `io.quarkus:quarkus-agroal`.\n"
"If no extension is found or more than one extension matches, you will see a red check mark ‚ùå in the command result."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "You can install all extensions which match a globbing pattern :"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Configuring `javac` options"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The Quarkus Maven plugin makes use of `javac`,\n"
"and by default it picks up compiler flags to pass to\n"
"`javac` from `maven-compiler-plugin`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"If you need to customize the compiler flags used by the plugin, like in <<dev-mode,development mode>>, add a `configuration` section to the `plugin` block and set the `compilerArgs` property just as you would when configuring `maven-compiler-plugin`.\n"
"You can also set `source`, `target`, and `jvmArgs`.\n"
"For example, to pass `--enable-preview` to both the JVM and `javac`:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Because the Quarkus Maven plugin itself runs in the JVM started by Maven,\n"
"and because some (rare) Quarkus extensions need to load application classes during the build,\n"
"it may be necessary to pass the same flags to the JVM running Maven."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "To that end, you can use https://maven.apache.org/configure.html#maven_opts-environment-variable[`MAVEN_OPTS`]:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "CLI"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Maven"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"**Alternatively**, you can simply create the file\n"
"https://maven.apache.org/configure.html#mvn-jvm-config-file[`.mvn/jvm.config`] at the root of your project:\n"
"and any options you put in that file will be picked up by Maven, without having to set `MAVEN_OPTS`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Development mode"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Quarkus comes with a built-in development mode.\n"
"Run your application with:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"You can then update the application sources, resources and configurations.\n"
"The changes are automatically reflected in your running application.\n"
"This is great to do development spanning UI and database as you see changes reflected immediately."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Dev mode enables hot deployment with background compilation, which means\n"
"that when you modify your Java files or your resource files and refresh your browser these changes will automatically take effect.\n"
"This works too for resource files like the configuration property file.\n"
"The act of\n"
"refreshing the browser triggers a scan of the workspace, and if any changes are detected the Java files are compiled,\n"
"and the application is redeployed, then your request is serviced by the redeployed application. If there are any issues\n"
"with compilation or deployment an error page will let you know."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Hit `CTRL+C` to stop the application."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "By default, `quarkus:dev` sets the debug host to `localhost` (for security reasons). If you need to change this, for example to enable debugging on all hosts, you can use the `-DdebugHost` option like so:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Remote Development Mode"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"It is possible to use development mode remotely, so that you can run Quarkus in a container environment (such as OpenShift)\n"
"and have changes made to your local files become immediately visible."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "This allows you to develop in the same environment you will actually run your app in, and with access to the same services."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Do not use this in production. This should only be used in a development environment. You should not run production application in dev mode."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "To do this you must build a mutable application, using the `mutable-jar` format. Set the following properties in `application.properties`:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"This tells Quarkus to use the mutable-jar format. Mutable applications also include the deployment time parts of Quarkus,\n"
"so they take up a bit more disk space. If run normally they start just as fast and use the same memory as an immutable application,\n"
"however they can also be started in dev mode."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The password that is used to secure communication between the remote side and the local side."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The URL that your app is going to be running in dev mode at. This is only needed on the local side, so you\n"
"may want to leave it out of the properties file and specify it as a system property on the command line."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The `mutable-jar` is then built in the same way that a regular Quarkus jar is built, i.e. by issuing:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Before you start Quarkus on the remote host set the environment variable `QUARKUS_LAUNCH_DEVMODE=true`. If you are\n"
"on bare metal you can set it via the `export QUARKUS_LAUNCH_DEVMODE=true` command and then run the application with the proper `java -jar ...` command to run the application."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"If you plan on running the application via Docker, then you'll need to add `-e QUARKUS_LAUNCH_DEVMODE=true` to the `docker run` command.\n"
"When the application starts you should now see the following line in the logs: `Profile dev activated. Live Coding activated`. You will also need to give the application the rights to update the deployment resources by adding `RUN chmod o+rw -R /deployments` after the `COPY` commands into your Dockerfile. For security reasons, this option should not be added to the production Dockerfile."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The remote side does not need to include Maven or any other development tools. The normal `fast-jar` Dockerfile\n"
"that is generated with a new Quarkus application is all you need. If you are using bare metal launch the Quarkus runner\n"
"jar, do not attempt to run normal dev mode."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Now you need to connect your local agent to the remote host, using the `remote-dev` command:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Now every time you refresh the browser you should see any changes you have made locally immediately visible in the remote\n"
"app. This is done via an HTTP based long polling transport, that will synchronize your local workspace and the remote\n"
"application via HTTP calls."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"If you do not want to use the HTTP feature then you can simply run the `remote-dev` command without specifying the URL.\n"
"In this mode the command will continuously rebuild the local application, so you can use an external tool such as odo or\n"
"rsync to sync to the remote application."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "All the config options are shown below:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"It is recommended you use SSL when using remote dev mode, however even if you are using an unencrypted connection\n"
"your password is never sent directly over the wire. For the initial connection request the password is hashed with the\n"
"initial state data, and subsequent requests hash it with a random session id generated by the server and any body contents\n"
"for POST requests, and the path for DELETE requests, as well as an incrementing counter to prevent replay attacks."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Extension provided Dev mode Java options"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Some extensions may provide pre-configured Java options that should be added to the command line launching an application in Dev mode."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Let's suppose there are couple of extensions `quarkus-blue` and `quarkus-red` in an application that provide Java options for Dev mode.\n"
"The logs may look something like this"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "A user may choose to disable all the Java options provided by extensions by configuring `disableAll` parameter such as"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Or disable Java options provided by specific extensions by configuring Maven coordinates patterns, such as"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "With this configuration the logs will look like"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Debugging"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "In development mode, Quarkus starts by default with debug mode enabled, listening to port `5005` without suspending the JVM."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "This behavior can be changed by giving the `debug` system property one of the following values:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`false` - the JVM will start with debug mode disabled"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`true` - The JVM is started in debug mode and will be listening on port `5005`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`client` - the JVM will start in client mode and attempt to connect to `localhost:5005`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`{port}` - The JVM is started in debug mode and will be listening on `{port}`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "An additional system property `suspend` can be used to suspend the JVM, when launched in debug mode. `suspend` supports the following values:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`y` or `true` - The debug mode JVM launch is suspended"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`n` or `false` - The debug mode JVM is started without suspending"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "You can also run a Quarkus application in debug mode with a suspended JVM using:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Then, attach your debugger to `localhost:5005`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Import in your IDE"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Once you have a <<project-creation,project generated>>, you can import it in your favorite IDE.\n"
"The only requirement is the ability to import a Maven project."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "**Eclipse**"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"In Eclipse, click on: `File -> Import`.\n"
"In the wizard, select: `Maven -> Existing Maven Project`.\n"
"On the next screen, select the root location of the project.\n"
"The next screen list the found modules; select the generated project and click on `Finish`. Done!"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "In a separated terminal, run:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "and enjoy a highly productive environment."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "**IntelliJ IDEA**"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "In IntelliJ IDEA:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "From inside IntelliJ IDEA select `File -> New -> Project From Existing Sources...` or, if you are on the welcome dialog, select `Import project`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Select the project root"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Select `Import project from external model` and `Maven`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Next a few times (review the different options if needed)"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "On the last screen click on Finish"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "In a separated terminal or in the embedded terminal, run:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Enjoy!"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "**Apache NetBeans**"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "In NetBeans:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Select `File -> Open Project`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Click on `Open Project`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "In a separated terminal or the embedded terminal, go to the project root and run:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "**Visual Studio Code**"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Open the project directory in VS Code. If you have installed the Java Extension Pack (grouping a set of Java extensions), the project is loaded as a Maven project."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Logging Quarkus application build classpath tree"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Usually, dependencies of an application (which is a Maven project) could be displayed using `mvn dependency:tree` command. In case of a Quarkus application, however, this command will list only the runtime dependencies of the application.\n"
"Given that the Quarkus build process adds deployment dependencies of the extensions used in the application to the original application classpath, it could be useful to know which dependencies and which versions end up on the build classpath.\n"
"Luckily, the `quarkus` Maven plugin includes the `dependency-tree` goal which displays the build dependency tree for the application."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Executing `./mvnw quarkus:dependency-tree` on your project should result in an output similar to:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The goal accepts the following optional parameters:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`mode` - the default value is `prod`, i.e. the production build dependency tree. Alternatively, it accepts values `test` to display the test dependency tree and `dev` to display the dev mode dependency tree;"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`outputFile` - specifies the file to persist the dependency tree to;"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`appendOutput` - the default value is `false`, indicates whether the output to the command should be appended to the file specified with the `outputFile` parameter or it should be overridden."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Downloading Maven artifact dependencies for offline development and testing"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Quarkus extension dependencies are divided into the runtime extension dependencies that end up on the application runtime classpath and the deployment (or build time) extension dependencies that are resolved by Quarkus only at application build time to create\n"
"the build classpath. Application developers are expected to express dependencies only on the runtime artifacts of Quarkus extensions. As a consequence, the deployment extension dependencies aren't visible to Maven plugins that aren't aware of the Quarkus\n"
"extension dependency model, such as the `maven-dependency-plugin`, `go-offline-maven-plugin`, etc. That means those plugins can not be used to pre-download all the application dependencies to be able to build and test the application later in offline mode."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "To enable the use-case of building and testing a Quarkus application offline, the `quarkus-maven-plugin` includes the `go-offline` goal that could be called from the command line like this:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "This goal will resolve all the runtime, build time, test and dev mode dependencies of the application downloading them to the configured local Maven repository."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Building a native executable"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Native executables make Quarkus applications ideal for containers and serverless workloads."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Make sure to have `GRAALVM_HOME` configured and pointing to the latest release of GraalVM {graalvm-version}.\n"
"Verify that your `pom.xml` has the proper `native` profile as shown in <<build-tool-maven>>."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Create a native executable using:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "A native executable will be present in `target/`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "To run Integration Tests on the native executable, make sure to have the proper <<build-tool-maven,Maven plugin configured>> and launch the `verify` goal."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Build a container friendly executable"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The native executable will be specific to your operating system.\n"
"To create an executable that will run in a container, use the following:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The produced executable will be a 64-bit Linux executable, so depending on your operating system, it may no longer be runnable.\n"
"However, it's not an issue as we are going to copy it to a Docker container.\n"
"Note that in this case the build itself runs in a Docker container too, so you don't need to have GraalVM installed locally."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "By default, the native executable will be generated using the `quay.io/quarkus/ubi9-quarkus-mandrel-builder-image:{mandrel-flavor}` Docker image."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"If you want to build a native executable with a different Docker image (for instance to use a different GraalVM version),\n"
"use the `-Dquarkus.native.builder-image=<image name>` build argument."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The list of the available Docker images can be found on https://quay.io/repository/quarkus/ubi9-quarkus-mandrel-builder-image?tab=tags[quay.io].\n"
"Be aware that a given Quarkus version might not be compatible with all the images available."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Starting from Quarkus 3.19, the _builder_ image is based on UBI 9, and thus requires an UBI 9 base image if you want to run the native executable in a container.\n"
"You can switch back to UBI 8, by setting the `quarkus.native.builder-image` property to one of the available image from the https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[quay.io repository].\n"
"For example ``quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}` is using UBI 8, and so the resulting native executable will be compatible with UBI 8 base images."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "You can follow the xref:building-native-image.adoc[Build a native executable guide] as well as xref:deploying-to-kubernetes.adoc[Deploying Application to Kubernetes and OpenShift] for more information."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Maven configuration"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "If you have not used <<project-creation,project scaffolding>>, add the following elements in your `pom.xml`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Disable running of integration tests (test names `*IT` and annotated with `@QuarkusIntegrationTest`) on all builds. To run these tests all the time, either remove this property, set its value to `false`, or set `-DskipITs=false` on the command line when you run the build. +\n"
"As mentioned below, this is overridden in the `native` profile."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Optionally use a BOM file to omit the version of the different Quarkus dependencies."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Use the Quarkus Maven plugin that will hook into the build process."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Enabling Maven plugin extensions will register a Quarkus `MavenLifecycleParticipant` which will make sure the Quarkus classloaders used during the build are properly closed. During the `generate-code` and `generate-code-tests` goals the Quarkus application bootstrap is initialized and re-used in the `build` goal (which actually builds and packages a production application). The Quarkus classloaders will be properly closed in the `build` goal of the `quarkus-maven-plugin`. However, if the build fails in between the `generate-code` or `generate-code-tests` and `build` then the Quarkus augmentation classloader won't be properly closed, which may lead to locking of JAR files that happened to be on the classpath on Windows OS."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Add system properties to `maven-surefire-plugin`. +\n"
"`maven.home` is only required if you have custom configuration in `${maven.home}/conf/settings.xml`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"If you want to test the artifact produced by your build with Integration Tests, add the following plugin configuration. Test names `*IT` and annotated with `@QuarkusIntegrationTest` will be run against the artifact produced by the build (JAR file, container image, etc). See the xref:getting-started-testing.adoc#quarkus-integration-test[Integration Testing guide] for more info. +\n"
"`maven.home` is only required if you have custom configuration in `${maven.home}/conf/settings.xml`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Use a specific `native` profile for native executable building."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Enable the `native` package type. The build will therefore produce a native executable."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Always run integration tests when building a native image (test names `*IT` and annotated with `@QuarkusIntegrationTest`). +\n"
"If you do not wish to run integration tests when building a native image, simply remove this property altogether or set its value to `true`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Using fast-jar"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`fast-jar` is the default quarkus package type."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The result of the build is a directory under `target` named `quarkus-app`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "You can run the application using: `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"In order to successfully run the produced jar, you need to have the entire contents of the `quarkus-app` directory. If any of the files are missing, the application will not start or\n"
"might not function correctly."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The `fast-jar` packaging results in creating an artifact that starts a little faster and consumes slightly less memory than a legacy Quarkus jar\n"
"because it has indexed information about which dependency jar contains classes and resources. It can thus avoid the lookup into potentially every jar\n"
"on the classpath that the legacy jar necessitates, when loading a class or resource."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Uber-Jar Creation"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"Quarkus Maven plugin supports the generation of Uber-Jars by specifying a `quarkus.package.jar.type=uber-jar` configuration option in your `application.properties`\n"
"(or `<quarkus.package.jar.type>uber-jar</quarkus.package.jar.type>` in your `pom.xml`)."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The original jar will still be present in the `target` directory, but it will be renamed to contain the `.original` suffix."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"When building an Uber-Jar you can specify entries that you want to exclude from the generated jar by using the `quarkus.package.ignored-entries` configuration\n"
"option, this takes a comma separated list of entries to ignore."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Uber-Jar creation by default excludes link:https://docs.oracle.com/javase/tutorial/deployment/jar/intro.html[signature files] that might be present in the dependencies of the application."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Uber-Jar's final name is configurable via a Maven's build settings `finalName` option."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Uber-Jar file name suffix"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"By default the generated uber JAR file name will have the `-runner` suffix, unless it was overridden by configuring a custom one with `quarkus.package.jar.runner-suffix` configuration option.\n"
"If the runner suffix is not desired, it can be disabled by setting `quarkus.package.jar.add-runner-suffix` configuration option to `false`, in which case the uber JAR will replace the original JAR\n"
"file generated by `maven-jar-plugin` for the application module."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Attaching Uber-Jar file as the main project artifact"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"As long as an Uber-Jar file name is created by appending a suffix, such as `runner`, to the original project JAR file name, the Uber-Jar file name suffix will also be used as the Maven\n"
"artifact classifier for the Uber-Jar artifact. There are two ways to attach an Uber-Jar as the main project artifact (without the classifier):"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "set `quarkus.package.jar.add-runner-suffix=false`, which will disable the addition of the file name suffix and, by doing that, will replace the original project JAR on the file system;"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "set `attachRunnerAsMainArtifact` parameter of the `quarkus:build` goal to `true`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Working with multi-module projects"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "By default, Quarkus will not discover CDI beans inside another module."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The best way to enable CDI bean discovery for a module in a multi-module project would be to include the `jandex-maven-plugin`,\n"
"unless it is the main application module already configured with the quarkus-maven-plugin, in which case it will be indexed automatically."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "More information on this topic can be found on the xref:cdi-reference.adoc#bean_discovery[Bean Discovery] section of the CDI guide."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Maven test plugin configuration"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`maven-surefire-plugin` and `maven-failsafe-plugin` configurations showed above will work in most cases. However, there could be cases when extra configuration will be required."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The reason is that, Quarkus may need to re-resolve application dependencies during the test phase to set up the test classpath for the tests. The original Maven resolver used in previous build phases\n"
"will not be available in the test process and, as a conseqence, Quarkus will need to initialize a new one. To make sure the new resolver is initialized correctly, the relevant configuration options\n"
"will need to be passed to the test process."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Maven user settings"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"A path to the Maven user settings file may need to be passed to test processes, for example, in case the Maven build process was not launched using the default `mvn` scripts included in the Maven distribution.\n"
"It could be done in the following way:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Remote repository access through authenticated HTTPS"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "In case a remote Maven repository requires link:https://maven.apache.org/guides/mini/guide-repository-ssl.html[authenticated HTTPS access configuration], some or all of the following properties will need to be passed to the test plugins:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Building with a specific configuration profile"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Quarkus supports xref:config-reference.adoc#profiles[configuration profiles] in order to provide a specific configuration according to the target environment."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The profile can be provided directly in the Maven build's command thanks to the system property `quarkus.profile` with a command of type:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "However, it is also possible to specify the profile directly in the POM file of the project using project properties, the Quarkus Maven plugin configuration properties or system properties set in the Quarkus Maven plugin configuration."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "In order of precedence (greater precedence first):"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "1. System properties set in the Quarkus Maven plugin configuration"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The default configuration profile of this project is `prod-aws`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "2. Quarkus Maven plugin configuration properties"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "3. Project properties"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Whatever the approach is chosen, the profile can still be overridden with the `quarkus.profile` system property or the `QUARKUS_PROFILE` environment variable."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Building several artifacts from a single module"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"In some particular use cases, it can be interesting to build several artifacts of your application from the same module.\n"
"A typical example is when you want to build your application with different configuration profiles."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "In that case, it is possible to add as many executions as needed to the Quarkus Maven plugin configuration."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Below is an example of a Quarkus Maven plugin configuration that will produce two builds of the same application: one using the `prod-oracle` profile and the other one using the `prod-postgresql` profile."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The default configuration profile of the first execution of the plugin is `prod-oracle`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The output directory of the first execution of the plugin is set to `oracle-quarkus-app` instead of `quarkus-app` to have a dedicated directory."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The default configuration profile of the second execution of the plugin is `prod-postgresql`."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The output directory of the second execution of the plugin is set to `postgresql-quarkus-app` instead of `quarkus-app` to have a dedicated directory."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "With the configuration above, both profile builds will be using the same dependencies, so if we added dependencies on the Oracle and PostgreSQL drivers to the application, both of the drivers will appear in both builds."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "To isolate profile-specific dependencies from other profiles, the JDBC drivers could be added as optional dependencies to the application but configured to be included in each profile that requires them, e.g.:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The JDBC driver of PostgreSQL is defined as an optional dependency"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "For backward compatibility reasons, it is necessary to explicitly indicate that the optional dependencies need to be filtered."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Only the optional dependency corresponding to the JDBC driver of PostgreSQL is expected in the final artifact."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "If you have more than one optional dependency to declare in the `quarkus.package.jar.included-optional-dependencies` tag, make sure they are separated with `,` (e.g. `org.postgresql:postgresql::jar,com.foo:bar::jar`)."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Configuring the Project Output"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"There are a several configuration options that will define what the output of your project build will be.\n"
"These are provided in `application.properties` the same as any other config property."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The properties are shown below:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Custom test configuration profile in JVM mode"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"By default, Quarkus tests in JVM mode are run using the `test` configuration profile. If you are not familiar with Quarkus\n"
"configuration profiles, everything you need to know is explained in the\n"
"xref:config-reference.adoc#profiles[Configuration Profiles Documentation]."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"It is however possible to use a custom configuration profile for your tests with the Maven Surefire and Maven Failsafe\n"
"configurations shown below. This can be useful if you need for example to run some tests using a specific database which is not\n"
"your default testing database."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The `foo` configuration profile will be used to run the tests."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"It is not possible to use a custom test configuration profile in native mode for now. Native tests are always run using the\n"
"`prod` profile."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Bootstrap Maven properties"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Quarkus bootstrap includes a Maven resolver implementation that is used to resolve application runtime and build time dependencies. The Quarkus Maven resolver is initialized from the same Maven command line that launched the build, test or dev mode. Typically, there is no need to add any extra configuration for it. However, there could be cases where an extra configuration option may be necessary to properly resolve application dependencies in test or dev modes, or IDEs."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Maven test plugins (such as `surefire` and `failsafe`), for example, are not propagating build system properties to the running tests by default. Which means some system properties set by the Maven CLI aren't available for the Quarkus Maven resolver initialized for the tests, which may result in test dependencies being resolved using different settings than the main Maven build."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Here is a list of system properties the Quarkus bootstrap Maven resolver checks during its initialization."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Property name"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`maven.home`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`MAVEN_HOME` envvar"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The Maven home dir is used to resolve the global settings file unless it was explicitly provided on the command line with the `-gs` argument"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`maven.settings`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`~/.m2/settings.xml`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Unless the custom settings file has been provided with the `-s` argument, this property can be used to point the resolver to a custom Maven settings file"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`maven.repo.local`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`~/.m2/repository`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "This property could be used to configure a custom local Maven repository directory, if it is different from the default one and the one specified in the `settings.xml`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`maven.top-level-basedir`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "none"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "This property may be useful to help the Maven resolver identify the top-level Maven project in the workspace. By default, the Maven resolver will be discovering a project's workspace by navigating the parent-module POM relationship. However, there could be project layouts that are using an aggregator module which isn't appearing as the parent for its modules. In this case, this property will help the Quarkus Maven resolver to properly discover the workspace."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`quarkus.bootstrap.effective-model-builder`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`false`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "By default, the Quarkus Maven resolver is reading project's POMs directly when discovering the project's layout. While in most cases it works well enough and relatively fast, reading raw POMs has its limitation. E.g. if a POM includes modules in a profile, these modules will not be discovered. This system property enables project's layout discovery based on the effective POM models, that are properly interpolated, instead of the raw ones. The reason this option is not enabled by default is it may appear to be significantly more time-consuming that could increase, e.g. CI testing times. Until there is a better approach found that could be used by default, projects that require it should enable this option."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`quarkus.bootstrap.legacy-model-resolver`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "This *system* or *POM* property can be used to enable the legacy `ApplicationModel` resolver implementation. The property was introduced in Quarkus 3.19.0 and will be removed once the legacy implementation is known to be not in demand."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "These system properties above could be added to, e.g., a `surefire` and/or `failsafe` plugin configuration as"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Propagate `maven.home` system property set by the Maven CLI to the tests"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Set the Maven local repository directory for the tests"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Set the Maven settings file the tests"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Point to the top-level project directory for the tests"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Enable effective POM-based project layout discovery"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Top-level vs Multi-module project directory"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"In Maven there appears to be a notion of the top-level project (that is exposed as a project property `${session.topLevelProject.basedir.absolutePath}`)\n"
"and the multi-module project directory (that is available as property `${maven.multiModuleProjectDirectory}`). These directories might not always match!"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`maven.multiModuleProjectDirectory` is meant to be consulted by the Maven code itself and not something to be relied upon by user code. So, if you find it useful, use it at your own risk!"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The `${maven.multiModuleProjectDirectory}` will be resolved to the first directory that contains `.mvn` directory as its child going up the workspace file system tree\n"
"starting from the current directory (or the one specified with the `-f` argument) from which the `mvn` command was launched. If the `.mvn` directory was not found, however,\n"
"the `${maven.multiModuleProjectDirectory}` will be pointing to the directory from which the `mvn` command was launched (or the one targeted with the `-f` argument)."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The `${session.topLevelProject.basedir.absolutePath}` will be pointing either to the directory from which the `mvn` command was launched or to the directory targeted with\n"
"the `-f` argument, if it was specified."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Quarkus project info"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid ""
"The Quarkus Maven plugin includes a goal called `info` (currently marked as 'experimental') that logs Quarkus-specific information about the project, such as: the imported Quarkus platform BOMs and the Quarkus extensions found among the project dependencies.\n"
"In a multi-module project `quarkus:info` will assume that the current module, in which it is executed, is the main module of the application."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The report generated by `quarkus:info` is not currently including the Quarkus Maven plugin information, however it's planned to be added in the future releases."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Here is an example `info` output for a simple project:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Quarkus platform BOMs imported in the project (BOMs imported by parent POMs will also be reported)"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Direct Quarkus extension dependencies managed by the `quarkus-bom`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Direct Quarkus extension dependencies managed by the `quarkus-camel-bom`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Direct Quarkus extensions dependencies that aren't managed by Quarkus BOMs but found in the Quarkus extension registry"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`quarkus:info` will also report Quarkus extensions that aren't found in the Quarkus extension registries if those are present among the project dependencies, indicating they have an 'unknown origin'."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Highlighting misaligned versions"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "`quarkus:info` will also highlight basic Quarkus dependency version misalignments, in case they are detected. For example, if we modify the project mentioned above by removing the `camel-quarkus-rabbitmq` extension from the dependencies and adding a `2.6.3.Final` `<version>` element to the `quarkus-rest` dependency that is managed by the `quarkus-bom` and then run `quarkus:info` again, we'll see something like:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The `quarkus-camel-bom` import is now reported as 'unnecessary' since none of the Quarkus extensions it includes are found among the project dependencies"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The version `2.6.3.Final` of the `quarkus-resteasy-reactive` is now reported as being misaligned with the version managed by the Quarkus platform BOM imported in the project, which is {quarkus-version}"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Quarkus project update"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The `quarkus:update` goal (currently marked as 'experimental') provided by the Quarkus Maven plugin can be used to check whether there are Quarkus-related updates available for a project, such as: new releases of the relevant Quarkus platform BOMs and non-platform Quarkus extensions present in the project. In a multi-module project the `update` goal is meant to be executed from the main Quarkus application module."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "At this point, the `quarkus:update` goal does not actually apply the recommended updates but simply reports what they are and how to apply them manually."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The Quarkus Maven plugin version isn't currently included in the update report, however it's planned to be added in the future releases."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The way `quarkus:update` works, first, all the direct Quarkus extension dependencies of the project are collected (those that are managed by the Quarkus platform BOMs and those that aren't but found in the Quarkus extension registries). Then the configured Quarkus extension registries (typically the `registry.quarkus.io`) will be queried for the latest recommended/supported Quarkus platform versions and non-platform Quarkus extensions compatible with them. The algorithm will then select the latest compatible combination of all the extensions found in the project, assuming such a combination actually exists. Otherwise, no updates will be suggested."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Assuming we have a project including Kogito, Camel and core Quarkus extensions available in the Quarkus platform based on Quarkus `2.7.1.Final`, the output of the `quarkus:update` would look like:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "A list of currently recommended Quarkus platform BOM updates"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Typically, a single project property will be used to manage all the Quarkus platform BOMs but the implementation isn't currently smart enough to point that out and will report updates for each BOM individually."
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "If we modify the project to remove all the Camel Quarkus extensions from the project, change the version of the `quarkus-resteasy-reactive` extension to `2.6.3.Final` and downgrade `quarkus-prettytime` which is not included in the Quarkus platform BOMs to `0.2.0`, `quarkus:update` will report something like:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "A list of the currently recommended Quarkus platform BOM updates for the project"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Given that the project does not include any Camel Quarkus extensions, the BOM import is recommended to be removed"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "An outdated version of the `quarkus-resteasy-reactive` is recommended to be removed in favor of the one managed by the `quarkus-bom`"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "The latest compatible version of the `quarkus-prettytime` extension"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "Quarkus project rectify"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "As was mentioned above, `quarkus:info`, besides reporting Quarkus platform and extension versions, performs a quick version alignment check, to make sure the extension versions used in the project are compatible with the imported Quarkus platform BOMs. If misalignments are detected, the following warning message will be logged:"
msgstr ""

#: _versions/3.27/guides/maven-tooling.adoc
msgid "When the `rectify` option is enabled, `quarkus:update`, instead of suggesting the latest recommended Quarkus version updates, will log update instructions to simply align the extension dependency versions found in the project with the currently imported Quarkus platform BOMs."
msgstr ""
