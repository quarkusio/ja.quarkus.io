msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Migrate from Vert.x OIDC to Quarkus OIDC"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Learn how to migrate your Vert.x OIDC application to Quarkus and choose to either retain Vert.x OIDC or replace it with Quarkus OIDC."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "We will start with an original Vert.x https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] `how-to` tutorial which shows how a https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app[GitHub OAuth2 application] can be implemented with Vert.x OIDC. You may have already worked through this tutorial before as a Vert.x OIDC user."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid ""
"Even though GitHub supports `OAuth2` only, we will use a `Vert.x OIDC` term.\n"
"OIDC is built on top of OAuth2 and the Vert.x https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] tutorial also https://how-to.vertx.io/web-and-oauth2-oidc/#openid-connect[talks about OIDC]."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Next, you will learn how to migrate the Vert.x application to Quarkus, while `completely retaining` the Vert.x OIDC code."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Finally, an option of replacing the Vert.x OIDC with Quarkus OIDC will be explained for you to analyze and consider implementing it."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Vert.x OIDC on Vert.x"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Let's start with the https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] `how-to` tutorial."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Create the project], you should end up with a `pom.xml` which contains the following properties and dependencies:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Register the GitHub application as described in the https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] tutorial, the only difference is that you should register a `http://localhost:8080/login` callback url, instead of `http://localhost:8080/callback`."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The final version of the `MainVerticle` Java class looks like this:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Initialize Handlebars templating engine."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Create Vert.x router."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Register Vert.x OIDC session handler which keeps the session details in memory."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Create a route handler to support a welcome page at the `http://localhost:8080` address."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Initialize OAuth2 GitHub provider with a Vert.x instance, and GitHub client id and secret properties."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Register OAuth2 handler to secure the `http://localhost:8080/protected` endpoint. This handler uses the GitHub provider to authenticate users and requests a `user:email` scope when redirecting users to GitHub. The handler is set up with a callback route which uses a returned authorizaion code and the provided `http://localhost:8080/login` redirect URL to complete the authorization code flow and acquire a GitHub access token."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Do not allow access to the `http://localhost:8080/protected` endpoint if the GitHub access token does not have a `user:email` scope. Please note that while the `PermissionBasedAuthorization` capability to constrain access tokens is great, applying it in the context of this application is not necessary: authorization code flow access tokens, and GitHub access tokens in particular, are not meant to control access to the application that acquired them but for this application to use them on behalf of the authenticated user to access another API, such as GitHub API, as indeed, is demonsrtated below."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The `ProtectedProfileHandler` Java class returns a list of user emails and looks exactly as shown in the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Fetch the user emails with Vert.x WebClient"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Use the GitHub access token to access GitHub API"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Update UserInfo with a JSON array containing private emails and pass it to the `protected.hbs` template."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Finally, create `index.hbs` and `protected.hbs` templates in the `src/main/resources/views` directory, copy their content from the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Compile and run the application as `java -jar target/oauth-oidc-1.0.0-SNAPSHOT-fat.jar`, go to `http://localhost:8080` and follow the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial to login to GitHub and get your GitHub account email(s) displayed."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "When you accessed the `http://localhost:8080/protected` page the first time, the following redirects happened:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "You were redirected by Vert.x OIDC to GitHub to login."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "You were redirected by GitHub to the `http://localhost:8080/login` callback route handler which completed the authorization code flow and acquired the GitHub access token."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "You were redirected by Vert.x OIDC to the `original` request URL, `http://localhost:8080/protected`."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Vert.x OIDC on Quarkus"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "We have worked through the original https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial in the <<vertx-oidc-vertx>> section, and now we can start planning moving the Vert.x applicaton to Quarkus, while retaining Vert.x OIDC."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Let's update `pom.xml` as follows:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Compared to the pom.xml from the <<vertx-oidc-vertx>> section, this pom.xml retains only two original Vert.x dependencies in the `io.vertx` group, `vertx-web-client` to support GitHub API calls, and `vertx-auth-oauth2` to continue securing the protected endpoint with the Vert.x GitHub OAuth2 provider."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "We also introduce two Quarkus dependencies in the `io.quarkus` group, `quarkus-vertx-http`, and `quarkus-qute` which provides https://quarkus.io/guides/qute[Qute Templating Engine] and replaces the Handlebars engine used in the <<vertx-oidc-vertx>> section."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The `MainVerticle` Java class has been converted to a CDI `ApplicationScoped` `GitHubProfileService` Java bean class which registeres the Vert.x route and handlers on the start-up:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Initialize OAuth2 GitHub provider with an injected Vert.x instance, and GitHub client id and secret properties."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Setup a router at the start up, nearly exactly as it was done in the `MainVerticle` class in the <<vertx-oidc-vertx>> section, with only a small difference, see the next point."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Pass the injected Qute `userEmail` template to the `ProtectedProfileHandler`."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The `ProtectedProfileHandler` Java class remains similar to how it was implemented in the <<vertx-oidc-vertx>> section, but now it works with the Qute template and looks like this:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Update UserInfo with a JSON array containing private emails, pass it to the `userEmail` template and render it asynchronously."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The `index.hbs` has been renamed to the `index.html` Qute template and moved to the `src/main/resources/META-INF/resources/` directory, its content remains the same."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The `protected.hbs` has been converted to the `userEmail.html` Qute template and moved to the `src/main/templates` directory. It has been updated to follow Qute rules:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "This simple template is quite similar to the Handlebars template you created in the the <<vertx-oidc-vertx>> section. Please see the https://quarkus.io/guides/qute-reference[Qute Reference Guide] for more details."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Now, you can compile and run the application but let's start it the dev mode with `mvn quarkus:dev`."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Go to `http://localhost:8080` and follow the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial to login to GitHub and get your GitHub account email(s) displayed."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The same sequence of redirects that is described in the end of the <<vertx-oidc-vertx>> section also happened in this application, after you accessed `http://localhost:8080/protected`."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "At this point, if you prefer, you can continue learning working with Quarkus, while keeping your existing Veert.x OIDC code."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "You may also want to have a look at https://quarkus.io/guides/security-authorize-web-endpoints-reference[how to apply authorization rules to the HTTP request paths], without having to use annotations."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "If you would like to learn how to migrate Vert.x OIDC to Quarkus OIDC, please follow to the next <<vertx-oidc-to-quarkus-oidc>> section."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Migrate to Quarkus OIDC"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "We started with working through the original https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial in the <<vertx-oidc-vertx>> section. And in the <<vertx-oidc-quarkus>> section, we converted it to run on Quarkus, while retaining Vert.x OIDC."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "In this section, you are going to learn how the Vert.x OIDC code can be converted to Quarkus OIDC."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Let's start with updating the `pom.xml`, it should look like this:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Compared to the pom.xml from the <<vertx-oidc-quarkus>> section above, this pom.xml no longer has dependencies in the `io.vertx` group but retains two Quarkus dependencies in the `io.quarkus` group, `quarkus-vertx-http` and `quarkus-qute`, and adds several more Quarkus dependencies."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid ""
"The `quarkus-oidc` extension is used to protect the secured endpoint and manage the GitHub OAuth2 authentication.\n"
"The `quarkus-rest` extension is used to support JAX-RS REST endpoints, while the `quarkus-rest-qute` extension makes it easier to render Qute templates with JAX-RS."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The `quarkus-rest-client-oidc-token-propagation` extension supports an easy access token propagation with the REST client, and the `quarkus-rest-client-jackson` helps to convert REST client responses in JSON format to Java beans and records with Jackson."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The `GitHubProfileService` has now become a JAX-RS REST class:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Require an authenticated access to the `/protected` endpoint."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Inject GitHub specific UserInfo representation."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Inject GitHub API REST client that is used to request user emails."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Inject the current OIDC session."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "JAX-RS method that returns a `userEmail` template instance to be rendered. You do not have to use `Uni` but since you are migrating from Vert.x, you are surely very comfortable with the reactive code supported by `Uni` in Quarkus."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Use the injected REST client to access GitHub API and request the private user emails"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "If the request to the GitHub API succeeded, initialize a template instance with the user email and the returned set of the private email addresses"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "If the request to the GitHub API failed, clear a session cookie by performing a local session logout and return HTTP 401 status."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "To acquire the private user emails, `GitHubApiClient` REST Client is used:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Register a REST client, use the `github-api-client` configuration key"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Request the access token propagation."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Return a set of private emails. As in the previous example, you do not have to use `Uni` but having `Uni` aligns better with the JAX-RS method which calls this method and returns a `Uni` response in the `GitHubProfileService` JAX-RS resource above."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The configuration in the `application.properties` looks like this:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Enable the Quarkus GitHub provider"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "By default, when the Quarkus GitHub provider acquires the access token, it sends the client id and secret as the encoded HTTP Authorization `Basic` scheme value. In some regions, GitHub may not support such an option, see the comment in the `application.properties` above how to enable a `client_secret_post` method instead, for the client id and secret be sent as form parameters."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Declare a callback `/login` path."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Restore the original `/protected` request path once the authorization code flow has been complete. You may recall that in the examples with Vert.x OIDC in the <<vertx-oidc-vertx>> and <<vertx-oidc-vertx>> sections, the original request path is restored by default, without users having to do anything at all. However, by default, Quarkus OIDC gives access to the callback resource, `but only after it has completed the authorization code flow`, see the next <<vertx-oidc-to-quarkus-oidc-custom-callback>> section for more details."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "In Quarkus security, the resource is secured if it is either annotated with one of the security annotations such as `@Authenticated` or its endpoint path is secured in the configured HTTP security policy. The `/login` callback resource is virtual - neither JAX-RS method nor an additional callback handler is allocated to process it, therefore it must be secured with the HTTP security policy configuration, for the Quarkus OIDC authentication mechanism to secure it."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Configure the `github-api-client` REST Client base URL."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Log REST Client request and response data."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The `index.html` Qute template in the `src/main/resources/META-INF/resources/` directory and the `userEmail.html` Qute template in the `src/main/templates` directory remain unchanged."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Now, start the application in the dev mode with `mvn quarkus:dev`."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Go to `http://localhost:8080`, login to GitHub and get your GitHub account email(s) displayed."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "You were redirected by Quarkus OIDC to GitHub to login."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "You were redirected by GitHub to the `http://localhost:8080/login` virtual callback handler, Quarkus OIDC completed the authorization code flow and acquired the GitHub access token."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "You were redirected by Quarkus OIDC to the `original` request URL, `http://localhost:8080/protected`. The OIDC redirect query parameters such as `code` and `state` are also dropped during this final redirect."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Migrate to Quarkus OIDC with the custom callback method"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "When we worked with the first <<vertx-oidc-to-quarkus-oidc,Vertx OIDC to Quarkus OIDC migration example>>, we had to configure Quarkus OIDC to restore the original request URL, after the authorization code flow is complete."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "In this section, we are going to look at the alternative, default option, where a custom callback handler is called, but after Quarkus OIDC has completed the authorization code flow."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Typically, in production, users that must login are guided to the central login URL first, as opposed to them accessing random secured paths and expecting to be returned to the very same original request paths, likely missing the context available from the central login endpoint. Instead, once the user lands at the secured central login page, this page redirects users further according to the application flow."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "By nominating the central login endpoint as a callback URL, you have the authenticated users landing on this login endpoint once the authorization code flow is complete without requiring Quarkus OIDC to keep the original request URL as the authorization code flow state to be able to restore it, and also making it possible to secure the callback endpoints with the security annotations."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Let's have a look at how it can be done."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The dependencies remain the same as in <<vertx-oidc-to-quarkus-oidc>> section, but we add one more JAX-RS resource that manages a login callback:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "`LoginService` is a secured callback handler which gets control once Quarkus OIDC completes the authorization code flow."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Do whatever is required by the application once the authenticated users land on this page. In this case, they are redirected to the secured `/protected` resource. This `/protected` endpoint may be an internal endpoint. If the secured `/protected` endpoint is also publicly accessible and unauthenticated users try to access it, then they will still land on this `LoginService` page first after authenticating with GitHub, and be redirected to the `/protected` page next."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "`GitHubProfileService` and `GitHubApiClient` classes remain the same as in the <<vertx-oidc-to-quarkus-oidc>> section."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The configuration looks much simpler now:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "You were redirected by Quarkus OIDC to GitHub to login"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "You were redirected by GitHub to the `http://localhost:8080/login` callback handler, but Quarkus OIDC completes the authorization code flow and acquires the GitHub access token first."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Before the `/login` handler is given control, Quarkus OIDC removes the OIDC redirect `code` and `state` properties and redirects the user to the same `/login` endpoint - this is done to minimize a risk of these parameters remaining visible in the user browser if the applications returns an application error after completing the authorization code flow, with the `code` and `state` query parameters still present in the current browser view. If preferred, this final redirect can be disabled with `quarkus.oidc.authentication.remove-redirect-parameters=false`."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Enforce GitHub access token scope in Quarkus OIDC"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Both the <<vertx-oidc-vertx>> and <<vertx-oidc-quarkus>> sections demonstrate how you can retrict access to the Vert.x OIDC application by enforcing that the GitHub access token has a `user:email` scope."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Also, in the <<vertx-oidc-vertx>> section, we also commented that GitHub access tokens are meant to be used to access GitHub API, and not the application that acquired them, and therefore enforcing a GitHub access token `user:email` scope was not necessary."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "If you do wish to continue enforcing a GitHub access token `user:email` scope after migrating to Quarkus OIDC, you can do as follows."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "First, replace the `@Authenticated` annotation with `@PermissionsAllowed(\"user:email\")`, with the latter implying the former and requiring a user authentication too:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "And add the following configuration property: `quarkus.oidc.roles.source=accesstoken`."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The reason you have to add this property is because with the authorization code flow, Quarkus OIDC treats the ID token as the primary token that controls access to the application into where the user has logged in, it uses the access token to access downstream services as required by the application on behalf of the authenticated user who authorized the application to do it."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "When Quarkus OIDC works with the pure OAuth2 providers such as GitHub, it generates an internal ID token to represent the user authentication. The GitHub access token is still meant to access GitHub API."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "This is why you have to set `quarkus.oidc.roles.source=accesstoken`, when you prefer to use an access token acquired by the application during the authorizatuion code flow to access this very same application."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Session management in Vertx OIDC and Quarkus OIDC"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Vert.x OIDC is `stateful` and some users may assume that, therefore, Vert.x OIDC does not use cookies. It is not the case: it uses an opaque session cookie to track both the authorization code flow progress and the authenticated user session."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "When you run an application created in either the <<vertx-oidc-vertx>> or <<vertx-oidc-quarkus>> sections, you can use your browser's developer tools to observe that an opaque `vertx-web-session` session cookie is used to track the user session:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The state associated with the current user session is stored on the server."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Now, when you run an application created in either the <<vertx-oidc-to-quarkus-oidc>> or <<vertx-oidc-to-quarkus-oidc-custom-callback>> sections, you can observe that Quarkus OIDC also uses a `q_session` session cookie but it is significantly larger in size:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "It is due to the fact that Quarkus OIDC is `stateless` by default. It encrypts the user session details in the session cookie and no user session related content is stored on the server. This approach offers significantly higher WEB-scale level capabilities."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Is it less secure than the `stateful` approach ? It is hard to give a precise answer. The `stateful` approach does not protect the session cookie, if the attacker gets hold of it, the secure access is compromised. Thefore, with either approach, using HTTPS and applying additional CORS and CSRF controls must be considered."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "For the `stateless` approach, Quarkus allows users to configure a session cookie encryption key, fallbacks to the client secret and finally to a generated secure random key to apply a JSON Web Encryption (JWE) to encrypt a generated content encryption key with the symmetric `A256GCMKW` algorithm and the `A256GCM` algorithm to encrypt the actual session cookie content."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "However, if you do prefer to continue following a stateful approach, you can easily achieve it with Quarkus OIDC."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "The session state that Quarkus OIDC keeps includes the ID, access and refresh tokens. Additionally, if the authorization code grant response returns the access token expiry and scope properties, then their values are also stored."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "To start with, you can register a custom `quarkus.oidc.TokenStateManager` and implement a required session state storage mechanism. For example, Quarkus OIDC does not ship an in-memory `TokenStateManager` because it does not really work after restarts or across multiple pods, but you can implement the one in order to start experimenting with the custom `TokenStateManager`."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Additionally, Quarkus OIDC ships both a database-aware `TokenStateManager` that can integrate with most known databases and a Redis `TokenStateManager`. See the https://quarkus.io/guides/security-oidc-code-flow-authentication#handling-and-controlling-the-lifetime-of-authentication[section] for mor details."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Let's see how it works with the Redis `TokenStateManager`."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Update the pom.xml from either the <<vertx-oidc-to-quarkus-oidc>> or <<vertx-oidc-to-quarkus-oidc-custom-callback>> sections by adding this single dependency:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "It is all that you need to do to start using the Redis `TokenStateManager`."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Clear the cookies in the browser, access the protected endpoint again and now you can observe an opaque `q_session` session cookie only:"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "You may also observe that Vert.x OIDC uses a session cookie to track the authorization code flow progress as well as the authenticated user's session."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "On the other hand, Quarkus OIDC uses a dedicated `q_auth_<uuid>` state cookie while the authorization code flow is in progress and only creates a session cookie once the code flow is complete. The state cookie names are also unique allowing for a multi-tab authentication."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Help with the migration"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "If you are considering to migrate from Vert.x OIDC to Quarkus OIDC and have questions that may not have been answered in this guide, please https://quarkus.io/support/[reach out to the Quarkus team]."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "Please also see the <<references>> for more information."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow authentication]."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect bearer access token authentication]."
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]"
msgstr ""

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "xref:security-oidc-expanded-configuration.adoc[Expanded OIDC Configuration Reference]"
msgstr ""
