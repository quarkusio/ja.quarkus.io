msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Migrate from Vert.x OIDC to Quarkus OIDC"
msgstr "Vert.x OIDCからQuarkus OIDCへの移行"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Learn how to migrate your Vert.x OIDC application to Quarkus and choose to either retain Vert.x OIDC or replace it with Quarkus OIDC."
msgstr "Vert.x OIDCアプリケーションをQuarkusに移行し、Vert.x OIDCを保持するか、Quarkus OIDCに置き換えるかを選択する方法について説明します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "We will start with an original Vert.x https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] `how-to` tutorial which shows how a https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app[GitHub OAuth2 application] can be implemented with Vert.x OIDC. You may have already worked through this tutorial before as a Vert.x OIDC user."
msgstr "`how-to` このチュートリアルでは、Vert.x OIDC を使用して link:https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authenticating-to-the-rest-api-with-an-oauth-app[GitHub OAuth2 アプリケーションを] 実装する方法を説明します。このチュートリアルは、Vert.x OIDC ユーザーであれば、すでにご覧になったことがあるかもしれません。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid ""
"Even though GitHub supports `OAuth2` only, we will use a `Vert.x OIDC` term.\n"
"OIDC is built on top of OAuth2 and the Vert.x https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] tutorial also https://how-to.vertx.io/web-and-oauth2-oidc/#openid-connect[talks about OIDC]."
msgstr "GitHub がサポートしているのは `OAuth2` だけですが、ここでは `Vert.x OIDC` の用語を使います。OIDC は OAuth2 の上に構築されており、チュートリアルの Vert.x link:https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] でも link:https://how-to.vertx.io/web-and-oauth2-oidc/#openid-connect[OIDC について触れています] 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Next, you will learn how to migrate the Vert.x application to Quarkus, while `completely retaining` the Vert.x OIDC code."
msgstr "次に、Vert.x OIDCコード（ `completely retaining` ）を使用しながら、Vert.xアプリケーションをQuarkusに移行する方法を学びます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Finally, an option of replacing the Vert.x OIDC with Quarkus OIDC will be explained for you to analyze and consider implementing it."
msgstr "最後に、Vert.x OIDCをQuarkus OIDCに置き換えるオプションについて説明します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Vert.x OIDC on Vert.x"
msgstr "Vert.x上のOIDC"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Let's start with the https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] `how-to` tutorial."
msgstr "まずは、 link:https://how-to.vertx.io/web-and-oauth2-oidc/[OAuth2/OpenID Connect] `how-to` link:https://how-to.vertx.io/web-and-oauth2-oidc/[チュートリアルを使ってウェブアプリケーションのセキュリティを確保する] ところから始めましょう。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Create the project], you should end up with a `pom.xml` which contains the following properties and dependencies:"
msgstr "link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[プロジェクトを作成] すると、以下のプロパティと依存関係を含む `pom.xml` が作成されます："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Register the GitHub application as described in the https://how-to.vertx.io/web-and-oauth2-oidc/[Securing a Web Application with OAuth2/OpenID Connect] tutorial, the only difference is that you should register a `http://localhost:8080/login` callback url, instead of `http://localhost:8080/callback`."
msgstr "チュートリアルの「 link:https://how-to.vertx.io/web-and-oauth2-oidc/[OAuth2/OpenID Connect を使ったウェブアプリケーションのセキュリティ確保] 」で説明したとおりに GitHub アプリケーションを登録します。 `http://localhost:8080/login` コールバック URL を登録することです。 `http://localhost:8080/callback` ."

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The final version of the `MainVerticle` Java class looks like this:"
msgstr "`MainVerticle` Javaクラスの最終バージョンは次のようになります："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Initialize Handlebars templating engine."
msgstr "Handlebarsテンプレート・エンジンを初期化します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Create Vert.x router."
msgstr "Vert.xルーターを作成します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Register Vert.x OIDC session handler which keeps the session details in memory."
msgstr "セッションの詳細をメモリに保持するVert.x OIDCセッションハンドラを登録します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Create a route handler to support a welcome page at the `http://localhost:8080` address."
msgstr "のウェルカムページをサポートするルートハンドラを作成します。 `http://localhost:8080` アドレスに"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Initialize OAuth2 GitHub provider with a Vert.x instance, and GitHub client id and secret properties."
msgstr "OAuth2 GitHub プロバイダーを Vert.x インスタンスと GitHub クライアント ID および secret プロパティで初期化します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Register OAuth2 handler to secure the `http://localhost:8080/protected` endpoint. This handler uses the GitHub provider to authenticate users and requests a `user:email` scope when redirecting users to GitHub. The handler is set up with a callback route which uses a returned authorizaion code and the provided `http://localhost:8080/login` redirect URL to complete the authorization code flow and acquire a GitHub access token."
msgstr "OAuth2ハンドラを登録して `http://localhost:8080/protected` ハンドラを登録します。このハンドラは GitHub プロバイダを使用してユーザーを認証し、GitHub にリダイレクトする際に `user:email` スコープを要求します。このハンドラにはコールバックルートが設定されており、返された認証コードと指定された `http://localhost:8080/login` リダイレクト URL を使って認証コードのフローを完了させ、GitHub アクセストークンを取得します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Do not allow access to the `http://localhost:8080/protected` endpoint if the GitHub access token does not have a `user:email` scope. Please note that while the `PermissionBasedAuthorization` capability to constrain access tokens is great, applying it in the context of this application is not necessary: authorization code flow access tokens, and GitHub access tokens in particular, are not meant to control access to the application that acquired them but for this application to use them on behalf of the authenticated user to access another API, such as GitHub API, as indeed, is demonsrtated below."
msgstr "エンドポイントへのアクセスを許可しないでください。 `http://localhost:8080/protected` GitHub アクセストークンが `user:email` のスコープを持っていない場合は、エンドポイントへのアクセスを許可しないようにしましょう。アクセストークンを制約する `PermissionBasedAuthorization` の機能は素晴らしいものですが、このアプリケーションの文脈でそれを適用する必要はないことに注意しましょう。認証コードフローで使うアクセストークン、特に GitHub アクセストークンは、それを取得したアプリケーションのアクセスを制御するためのものではなく、このアプリケーションが認証済みユーザーに代わって GitHub API などの別の API にアクセスするためのものです。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `ProtectedProfileHandler` Java class returns a list of user emails and looks exactly as shown in the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial:"
msgstr "`ProtectedProfileHandler` Javaクラスは、 link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[OAuth2/OpenID Connect] チュートリアルを link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[使ったWebアプリケーションのセキュリティで] 示したように、ユーザーの電子メールのリストを返します："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Fetch the user emails with Vert.x WebClient"
msgstr "Vert.x WebClientでユーザーEメールを取得"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Use the GitHub access token to access GitHub API"
msgstr "GitHub API にアクセスするには GitHub アクセストークンを使用します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Update UserInfo with a JSON array containing private emails and pass it to the `protected.hbs` template."
msgstr "プライベートメールを含むJSON配列でUserInfoを更新し、 `protected.hbs` テンプレートに渡します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Finally, create `index.hbs` and `protected.hbs` templates in the `src/main/resources/views` directory, copy their content from the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial."
msgstr "最後に、 `src/main/resources/views` ディレクトリに `index.hbs` と `protected.hbs` のテンプレートを作成し、 link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[OAuth2/OpenID Connect による Web アプリケーションの保護] チュートリアルの内容をコピーします。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Compile and run the application as `java -jar target/oauth-oidc-1.0.0-SNAPSHOT-fat.jar`, go to `http://localhost:8080` and follow the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial to login to GitHub and get your GitHub account email(s) displayed."
msgstr "アプリケーションをコンパイルして `java -jar target/oauth-oidc-1.0.0-SNAPSHOT-fat.jar` として実行します。 `http://localhost:8080` にアクセスし、 link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] チュートリアルにしたがって GitHub にログインし、GitHub アカウントのメールを表示させましょう。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "When you accessed the `http://localhost:8080/protected` page the first time, the following redirects happened:"
msgstr "初めて `http://localhost:8080/protected` ページに初めてアクセスしたとき、次のようなリダイレクトが起こりました："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by Vert.x OIDC to GitHub to login."
msgstr "ログインするために Vert.x OIDC から GitHub にリダイレクトされました。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by GitHub to the `http://localhost:8080/login` callback route handler which completed the authorization code flow and acquired the GitHub access token."
msgstr "GitHub からリダイレクトされたのは `http://localhost:8080/login` にリダイレクトされ、認証コードフローを完了して GitHub アクセストークンを取得しました。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by Vert.x OIDC to the `original` request URL, `http://localhost:8080/protected`."
msgstr "Vert.x OIDC から `original` リクエスト URL にリダイレクトされました、 `http://localhost:8080/protected` ."

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Vert.x OIDC on Quarkus"
msgstr "QuarkusのVert.x OIDC"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "We have worked through the original https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial in the <<vertx-oidc-vertx>> section, and now we can start planning moving the Vert.x applicaton to Quarkus, while retaining Vert.x OIDC."
msgstr "チュートリアルの「 link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect」（] <<vertx-oidc-vertx>> ）を完了し、Vert.x OIDCを保持したまま、Vert.xアプリケーションをQuarkusに移行する計画を開始できます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Let's update `pom.xml` as follows:"
msgstr "`pom.xml` ："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Compared to the pom.xml from the <<vertx-oidc-vertx>> section, this pom.xml retains only two original Vert.x dependencies in the `io.vertx` group, `vertx-web-client` to support GitHub API calls, and `vertx-auth-oauth2` to continue securing the protected endpoint with the Vert.x GitHub OAuth2 provider."
msgstr "<<vertx-oidc-vertx>> セクションの pom.xml と比較すると、この pom.xml は `io.vertx` グループでオリジナルの Vert.x 依存関係を 2 つだけ保持しています。 `vertx-web-client` は GitHub API 呼び出しをサポートするため、 `vertx-auth-oauth2` は Vert.x GitHub OAuth2 プロバイダで保護されたエンドポイントを引き続き保護するためです。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "We also introduce two Quarkus dependencies in the `io.quarkus` group, `quarkus-vertx-http`, and `quarkus-qute` which provides https://quarkus.io/guides/qute[Qute Templating Engine] and replaces the Handlebars engine used in the <<vertx-oidc-vertx>> section."
msgstr "`io.quarkus` また、 link:https://quarkus.io/guides/qute[Qute Templating Engineを] 提供し、 <<vertx-oidc-vertx>> セクションで使用されているHandlebarsエンジンを置き換える、 `quarkus-vertx-http` 、 `quarkus-qute` 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `MainVerticle` Java class has been converted to a CDI `ApplicationScoped` `GitHubProfileService` Java bean class which registeres the Vert.x route and handlers on the start-up:"
msgstr "`MainVerticle` Javaクラスは、起動時にVert.xルートとハンドラを登録するCDI `ApplicationScoped` `GitHubProfileService` Javaビーンクラスに変換されました："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Initialize OAuth2 GitHub provider with an injected Vert.x instance, and GitHub client id and secret properties."
msgstr "注入された Vert.x インスタンスと GitHub クライアント ID および secret プロパティで OAuth2 GitHub プロバイダを初期化します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Setup a router at the start up, nearly exactly as it was done in the `MainVerticle` class in the <<vertx-oidc-vertx>> section, with only a small difference, see the next point."
msgstr "<<vertx-oidc-vertx>> の `MainVerticle` クラスで行ったのとほぼ同じように、スタートアップ時にルーターをセットアップします。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Pass the injected Qute `userEmail` template to the `ProtectedProfileHandler`."
msgstr "注入されたQute `userEmail` テンプレートを `ProtectedProfileHandler` に渡します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `ProtectedProfileHandler` Java class remains similar to how it was implemented in the <<vertx-oidc-vertx>> section, but now it works with the Qute template and looks like this:"
msgstr "`ProtectedProfileHandler` Javaクラスは、 <<vertx-oidc-vertx>> セクションで実装されたものと同様ですが、Quteテンプレートと連動するようになり、以下のようになります："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Update UserInfo with a JSON array containing private emails, pass it to the `userEmail` template and render it asynchronously."
msgstr "プライベートメールを含むJSON配列でUserInfoを更新し、 `userEmail` テンプレートに渡し、非同期にレンダリングします。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `index.hbs` has been renamed to the `index.html` Qute template and moved to the `src/main/resources/META-INF/resources/` directory, its content remains the same."
msgstr "`index.hbs` は `index.html` Qute テンプレートに名前を変え、 `src/main/resources/META-INF/resources/` ディレクトリに移動しました。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `protected.hbs` has been converted to the `userEmail.html` Qute template and moved to the `src/main/templates` directory. It has been updated to follow Qute rules:"
msgstr "`protected.hbs` は `userEmail.html` Qute テンプレートに変換され、 `src/main/templates` ディレクトリに移動されました。Quteのルールに従って更新されています："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "This simple template is quite similar to the Handlebars template you created in the the <<vertx-oidc-vertx>> section. Please see the https://quarkus.io/guides/qute-reference[Qute Reference Guide] for more details."
msgstr "このシンプルなテンプレートは、 <<vertx-oidc-vertx>> セクションで作成したハンドルバーテンプレートとよく似ています。詳しくは、 link:https://quarkus.io/guides/qute-reference[Quteリファレンスガイドを] ご覧ください。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Now, you can compile and run the application but let's start it the dev mode with `mvn quarkus:dev`."
msgstr "さて、アプリケーションをコンパイルして実行することができますが、 `mvn quarkus:dev` でdevモードを起動してみましょう。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Go to `http://localhost:8080` and follow the https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial to login to GitHub and get your GitHub account email(s) displayed."
msgstr "にアクセスし `http://localhost:8080` にアクセスし、 link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] チュートリアルにしたがって GitHub にログインし、GitHub アカウントのメールを表示させましょう。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The same sequence of redirects that is described in the end of the <<vertx-oidc-vertx>> section also happened in this application, after you accessed `http://localhost:8080/protected`."
msgstr "<<vertx-oidc-vertx>> セクションの最後で説明したリダイレクトのシーケンスと同じことが、このアプリケーションでも起こりました。 `http://localhost:8080/protected` ."

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "At this point, if you prefer, you can continue learning working with Quarkus, while keeping your existing Veert.x OIDC code."
msgstr "この時点で、既存のVeert.x OIDCコードを保持したまま、Quarkusを使用して学習を続けることができます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You may also want to have a look at https://quarkus.io/guides/security-authorize-web-endpoints-reference[how to apply authorization rules to the HTTP request paths], without having to use annotations."
msgstr "また、アノテーションを使用せずに link:https://quarkus.io/guides/security-authorize-web-endpoints-reference[HTTP リクエストパスに認可ルールを適用する方法も見て] おきましょう。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "If you would like to learn how to migrate Vert.x OIDC to Quarkus OIDC, please follow to the next <<vertx-oidc-to-quarkus-oidc>> section."
msgstr "Vert.x OIDCをQuarkus OIDCに移行する方法については、次の <<vertx-oidc-to-quarkus-oidc>> 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Migrate to Quarkus OIDC"
msgstr "Quarkus OIDCへの移行"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "We started with working through the original https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] tutorial in the <<vertx-oidc-vertx>> section. And in the <<vertx-oidc-quarkus>> section, we converted it to run on Quarkus, while retaining Vert.x OIDC."
msgstr "まず、 <<vertx-oidc-vertx>> のセクションで、オリジナルのチュートリアル「 link:https://how-to.vertx.io/web-and-oauth2-oidc/#create-a-project[Securing a Web Application with OAuth2/OpenID Connect] 」を読みました。そして、 <<vertx-oidc-quarkus>> セクションでは、Vert.x OIDC を保持したまま、Quarkus で実行できるように変換しました。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "In this section, you are going to learn how the Vert.x OIDC code can be converted to Quarkus OIDC."
msgstr "このセクションでは、Vert.x OIDCコードをQuarkus OIDCに変換する方法について説明します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Let's start with updating the `pom.xml`, it should look like this:"
msgstr "まずは `pom.xml` を更新するところから始めましょう："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Compared to the pom.xml from the <<vertx-oidc-quarkus>> section above, this pom.xml no longer has dependencies in the `io.vertx` group but retains two Quarkus dependencies in the `io.quarkus` group, `quarkus-vertx-http` and `quarkus-qute`, and adds several more Quarkus dependencies."
msgstr "上記の <<vertx-oidc-quarkus>> セクションのpom.xmlと比較すると、このpom.xmlには `io.vertx` グループの依存関係はなくなりますが、 `io.quarkus` グループの2つのQuarkus依存関係、 `quarkus-vertx-http` と `quarkus-qute` は保持され、さらにいくつかのQuarkus依存関係が追加されます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid ""
"The `quarkus-oidc` extension is used to protect the secured endpoint and manage the GitHub OAuth2 authentication.\n"
"The `quarkus-rest` extension is used to support JAX-RS REST endpoints, while the `quarkus-rest-qute` extension makes it easier to render Qute templates with JAX-RS."
msgstr "`quarkus-oidc` 拡張モジュールは、保護されたエンドポイントを保護し、GitHub OAuth2 認証を管理するために使用されます。 `quarkus-rest` 拡張モジュールは JAX-RS REST エンドポイントをサポートし、 `quarkus-rest-qute` 拡張モジュールは JAX-RS による Qute テンプレートのレンダリングを簡単にします。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `quarkus-rest-client-oidc-token-propagation` extension supports an easy access token propagation with the REST client, and the `quarkus-rest-client-jackson` helps to convert REST client responses in JSON format to Java beans and records with Jackson."
msgstr "`quarkus-rest-client-oidc-token-propagation` 拡張は、REST クライアントとの簡単なアクセストークンの伝播をサポートし、 `quarkus-rest-client-jackson` は、JSON フォーマットの REST クライアントのレスポンスを Java Bean や Jackson のレコードに変換するのに役立ちます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `GitHubProfileService` has now become a JAX-RS REST class:"
msgstr "`GitHubProfileService` は JAX-RS REST クラスになりました："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Require an authenticated access to the `/protected` endpoint."
msgstr "`/protected` エンドポイントへの認証アクセスを必要とします。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Inject GitHub specific UserInfo representation."
msgstr "GitHub 固有の UserInfo 表現を注入します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Inject GitHub API REST client that is used to request user emails."
msgstr "GitHub API REST クライアントをインジェクトします。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Inject the current OIDC session."
msgstr "現在のOIDCセッションをインジェクトします。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "JAX-RS method that returns a `userEmail` template instance to be rendered. You do not have to use `Uni` but since you are migrating from Vert.x, you are surely very comfortable with the reactive code supported by `Uni` in Quarkus."
msgstr "JAX-RS メソッドは、レンダリングする `userEmail` テンプレートインスタンスを返します。 `Uni` を使用する必要はありませんが、Vert.x からの移行であるため、Quarkus の `Uni` でサポートされているリアクティブコードに非常に慣れているはずです。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Use the injected REST client to access GitHub API and request the private user emails"
msgstr "注入されたRESTクライアントを使用してGitHub APIにアクセスし、非公開ユーザーのメールをリクエストします。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "If the request to the GitHub API succeeded, initialize a template instance with the user email and the returned set of the private email addresses"
msgstr "GitHub API へのリクエストに成功したら、ユーザーのメールアドレスと返された非公開メールアドレスのセットでテンプレートのインスタンスを初期化します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "If the request to the GitHub API failed, clear a session cookie by performing a local session logout and return HTTP 401 status."
msgstr "GitHub API へのリクエストに失敗した場合は、ローカルセッションのログアウトを実行してセッション Cookie をクリアし、HTTP 401 ステータスを返します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "To acquire the private user emails, `GitHubApiClient` REST Client is used:"
msgstr "プライベートユーザーのメールを取得するには、 `GitHubApiClient` REST Clientを使用します："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Register a REST client, use the `github-api-client` configuration key"
msgstr "REST クライアントを登録するには、 `github-api-client` 設定キーを使用します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Request the access token propagation."
msgstr "アクセストークンの伝搬を要求します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Return a set of private emails. As in the previous example, you do not have to use `Uni` but having `Uni` aligns better with the JAX-RS method which calls this method and returns a `Uni` response in the `GitHubProfileService` JAX-RS resource above."
msgstr "プライベート・メールのセットを返します。前の例のように、 `Uni` を使用する必要はありませんが、 `Uni` を使用することで、このメソッドを呼び出し、 `Uni` レスポンスを返す JAX-RS メソッドと、上記の `GitHubProfileService` JAX-RS リソースの整合性がとれます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The configuration in the `application.properties` looks like this:"
msgstr "`application.properties` のコンフィギュレーションは以下のようになっています："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Enable the Quarkus GitHub provider"
msgstr "Quarkus GitHubプロバイダーを有効にします。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "By default, when the Quarkus GitHub provider acquires the access token, it sends the client id and secret as the encoded HTTP Authorization `Basic` scheme value. In some regions, GitHub may not support such an option, see the comment in the `application.properties` above how to enable a `client_secret_post` method instead, for the client id and secret be sent as form parameters."
msgstr "デフォルトでは、Quarkus GitHub プロバイダがアクセストークンを取得する際に、クライアント ID と secret をエンコードした HTTP Authorization `Basic` スキームの値として送信します。地域によっては GitHub がこのようなオプションをサポートしていないこともあります。その場合は、上記の `application.properties` にあるコメントで `client_secret_post` メソッドを有効にして、クライアント ID と secret をフォームのパラメータとして送信する方法を参照してください。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Declare a callback `/login` path."
msgstr "コールバック `/login` パスを宣言します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Restore the original `/protected` request path once the authorization code flow has been complete. You may recall that in the examples with Vert.x OIDC in the <<vertx-oidc-vertx>> and <<vertx-oidc-vertx>> sections, the original request path is restored by default, without users having to do anything at all. However, by default, Quarkus OIDC gives access to the callback resource, `but only after it has completed the authorization code flow`, see the next <<vertx-oidc-to-quarkus-oidc-custom-callback>> section for more details."
msgstr "認証コードフローが完了したら、元の `/protected` リクエストパスを復元します。 <<vertx-oidc-vertx>> と <<vertx-oidc-vertx>> セクションのVert.x OIDCを使った例では、デフォルトで元のリクエストパスが復元され、ユーザーは何もする必要がないことを思い出してください。しかし、デフォルトではQuarkus OIDCはコールバックリソースにアクセスできます。 `but only after it has completed the authorization code flow` 、詳細は次の <<vertx-oidc-to-quarkus-oidc-custom-callback>> セクションを参照してください。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "In Quarkus security, the resource is secured if it is either annotated with one of the security annotations such as `@Authenticated` or its endpoint path is secured in the configured HTTP security policy. The `/login` callback resource is virtual - neither JAX-RS method nor an additional callback handler is allocated to process it, therefore it must be secured with the HTTP security policy configuration, for the Quarkus OIDC authentication mechanism to secure it."
msgstr "Quarkusのセキュリティでは、リソースが `@Authenticated` などのセキュリティアノテーションでアノテーションされているか、設定されたHTTPセキュリティポリシーでエンドポイントパスが保護されている場合、リソースは保護されます。 `/login` コールバックリソースは仮想リソースです。JAX-RS メソッドも追加のコールバックハンドラも、このリソースを処理するために割り当てられているわけではありません。したがって、Quarkus OIDC 認証メカニズムがこのリソースを保護するためには、HTTP セキュリティポリシー設定で保護する必要があります。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Configure the `github-api-client` REST Client base URL."
msgstr "`github-api-client` REST Client のベース URL を設定します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Log REST Client request and response data."
msgstr "REST クライアントのリクエストとレスポンスのデータを記録します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The `index.html` Qute template in the `src/main/resources/META-INF/resources/` directory and the `userEmail.html` Qute template in the `src/main/templates` directory remain unchanged."
msgstr "`src/main/resources/META-INF/resources/` ディレクトリの `index.html` Qute テンプレートと、 `src/main/templates` ディレクトリの `userEmail.html` Qute テンプレートは変更されません。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Now, start the application in the dev mode with `mvn quarkus:dev`."
msgstr "ここで、 `mvn quarkus:dev` を使ってアプリケーションをdevモードで起動します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Go to `http://localhost:8080`, login to GitHub and get your GitHub account email(s) displayed."
msgstr "にアクセスしてください。 `http://localhost:8080` で GitHub にログインし、GitHub アカウントの email を取得してください。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by Quarkus OIDC to GitHub to login."
msgstr "ログインするためにQuarkus OIDCからGitHubにリダイレクトされました。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by GitHub to the `http://localhost:8080/login` virtual callback handler, Quarkus OIDC completed the authorization code flow and acquired the GitHub access token."
msgstr "にリダイレクトされました。 `http://localhost:8080/login` 仮想コールバックハンドラーにリダイレクトされると、Quarkus OIDCは認証コードフローを完了し、GitHubアクセストークンを取得します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by Quarkus OIDC to the `original` request URL, `http://localhost:8080/protected`. The OIDC redirect query parameters such as `code` and `state` are also dropped during this final redirect."
msgstr "Quarkus OIDCによって、 `original` リクエストURLにリダイレクトされました、 `http://localhost:8080/protected` . `code` や `state` などのOIDCリダイレクトクエリパラメータも、この最終リダイレクト中に削除されます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Migrate to Quarkus OIDC with the custom callback method"
msgstr "カスタムコールバックメソッドによるQuarkus OIDCへの移行"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "When we worked with the first <<vertx-oidc-to-quarkus-oidc,Vertx OIDC to Quarkus OIDC migration example>>, we had to configure Quarkus OIDC to restore the original request URL, after the authorization code flow is complete."
msgstr "最初の xref:vertx-oidc-to-quarkus-oidc[Vertx OIDCからQuarkus OIDCへの移行の例では] 、認証コードフローが完了した後、元のリクエストURLを復元するようにQuarkus OIDCを設定する必要がありました。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "In this section, we are going to look at the alternative, default option, where a custom callback handler is called, but after Quarkus OIDC has completed the authorization code flow."
msgstr "このセクションでは、Quarkus OIDCが認証コードフローを完了した後に、カスタムコールバックハンドラが呼び出される、デフォルトのオプションについて説明します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Typically, in production, users that must login are guided to the central login URL first, as opposed to them accessing random secured paths and expecting to be returned to the very same original request paths, likely missing the context available from the central login endpoint. Instead, once the user lands at the secured central login page, this page redirects users further according to the application flow."
msgstr "通常、本番環境では、ログインが必要なユーザは、最初に中央のログイン URL に誘導されます。ランダムなセキュリティで保護されたパスにアクセスし、中央のログインエンドポイントから利用可能なコンテキストを見逃して、まったく同じ元のリクエストパスに戻されることを期待するのとは対照的です。その代わりに、ユーザーがセキュアな中央ログインページに到着すると、このページはアプリケーションフローに従ってユーザーをさらにリダイレクトします。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "By nominating the central login endpoint as a callback URL, you have the authenticated users landing on this login endpoint once the authorization code flow is complete without requiring Quarkus OIDC to keep the original request URL as the authorization code flow state to be able to restore it, and also making it possible to secure the callback endpoints with the security annotations."
msgstr "コールバックURLとして中央のログインエンドポイントを指定することで、認証コードフローが完了すると、認証されたユーザーはこのログインエンドポイントに着地します。このとき、Quarkus OIDCが元のリクエストURLを認証コードフローの状態として保持し、復元できるようにする必要はありません。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Let's have a look at how it can be done."
msgstr "では、その方法を見てみましょう。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The dependencies remain the same as in <<vertx-oidc-to-quarkus-oidc>> section, but we add one more JAX-RS resource that manages a login callback:"
msgstr "依存関係は <<vertx-oidc-to-quarkus-oidc>> のセクションと同じですが、ログインコールバックを管理する JAX-RS リソースを1つ追加します："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "`LoginService` is a secured callback handler which gets control once Quarkus OIDC completes the authorization code flow."
msgstr "`LoginService` は、Quarkus OIDCが認証コードフローを完了すると、制御を取得する保護されたコールバックハンドラです。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Do whatever is required by the application once the authenticated users land on this page. In this case, they are redirected to the secured `/protected` resource. This `/protected` endpoint may be an internal endpoint. If the secured `/protected` endpoint is also publicly accessible and unauthenticated users try to access it, then they will still land on this `LoginService` page first after authenticating with GitHub, and be redirected to the `/protected` page next."
msgstr "認証されたユーザがこのページに到着したら、アプリケーションに必要なことを何でも行ってください。この場合、セキュリティで保護された `/protected` リソースにリダイレクトされます。この `/protected` エンドポイントは内部エンドポイントかもしれません。セキュリティで保護された `/protected` エンドポイントも一般に公開されており、認証されていないユーザーがアクセスしようとした場合は、GitHub で認証した後にまずこの `LoginService` ページにたどり着き、次に `/protected` ページにリダイレクトされます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "`GitHubProfileService` and `GitHubApiClient` classes remain the same as in the <<vertx-oidc-to-quarkus-oidc>> section."
msgstr "`GitHubProfileService` と のクラスは のセクションと同じです。 `GitHubApiClient` <<vertx-oidc-to-quarkus-oidc>> "

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The configuration looks much simpler now:"
msgstr "コンフィギュレーションはかなりシンプルになりました："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by Quarkus OIDC to GitHub to login"
msgstr "ログインするためにQuarkus OIDCからGitHubにリダイレクトされました。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You were redirected by GitHub to the `http://localhost:8080/login` callback handler, but Quarkus OIDC completes the authorization code flow and acquires the GitHub access token first."
msgstr "GitHub からは `http://localhost:8080/login` コールバックハンドラにリダイレクトされましたが、Quarkus OIDC は認証コードフローを完了させ、先に GitHub アクセストークンを取得します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Before the `/login` handler is given control, Quarkus OIDC removes the OIDC redirect `code` and `state` properties and redirects the user to the same `/login` endpoint - this is done to minimize a risk of these parameters remaining visible in the user browser if the applications returns an application error after completing the authorization code flow, with the `code` and `state` query parameters still present in the current browser view. If preferred, this final redirect can be disabled with `quarkus.oidc.authentication.remove-redirect-parameters=false`."
msgstr "QuarkusのOIDCでは、 `/login` ハンドラが制御される前に、OIDCリダイレクトの `code` と `state` プロパティを削除し、同じ `/login` エンドポイントにユーザーをリダイレクトします。これは、認証コードフローの完了後にアプリケーションがアプリケーションエラーを返した場合に、現在のブラウザビューに `code` と `state` クエリパラメータが表示されたまま、これらのパラメータがユーザーブラウザに表示されたままになるリスクを最小限に抑えるために行われます。必要であれば、この最後のリダイレクトを `quarkus.oidc.authentication.remove-redirect-parameters=false` で無効にすることもできます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Enforce GitHub access token scope in Quarkus OIDC"
msgstr "Quarkus OIDCでのGitHubアクセストークンスコープの強制"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Both the <<vertx-oidc-vertx>> and <<vertx-oidc-quarkus>> sections demonstrate how you can retrict access to the Vert.x OIDC application by enforcing that the GitHub access token has a `user:email` scope."
msgstr "<<vertx-oidc-vertx>> と <<vertx-oidc-quarkus>> の両セクションは、GitHub アクセストークンが `user:email` スコープを持つことを強制することで、Vert.x OIDC アプリケーションへのアクセスを制限する方法を示しています。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Also, in the <<vertx-oidc-vertx>> section, we also commented that GitHub access tokens are meant to be used to access GitHub API, and not the application that acquired them, and therefore enforcing a GitHub access token `user:email` scope was not necessary."
msgstr "また、 <<vertx-oidc-vertx>> セクションでは、GitHub アクセストークンは GitHub API にアクセスするために使われるものであり、それを取得したアプリケーションに使われるものではないため、GitHub アクセストークン `user:email` のスコープを強制する必要はないともコメントしています。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "If you do wish to continue enforcing a GitHub access token `user:email` scope after migrating to Quarkus OIDC, you can do as follows."
msgstr "Quarkus OIDCに移行した後も、GitHubのアクセストークン `user:email` 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "First, replace the `@Authenticated` annotation with `@PermissionsAllowed(\"user:email\")`, with the latter implying the former and requiring a user authentication too:"
msgstr "まず、 `@Authenticated` のアノテーションを、 `@PermissionsAllowed(\"user:email\")` に置き換えます。後者は前者を意味し、ユーザー認証も必要とします："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "And add the following configuration property: `quarkus.oidc.roles.source=accesstoken`."
msgstr "そして、以下の構成プロパティを追加します： `quarkus.oidc.roles.source=accesstoken` ."

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The reason you have to add this property is because with the authorization code flow, Quarkus OIDC treats the ID token as the primary token that controls access to the application into where the user has logged in, it uses the access token to access downstream services as required by the application on behalf of the authenticated user who authorized the application to do it."
msgstr "このプロパティを追加する必要があるのは、認証コードフローでは、Quarkus OIDCはIDトークンを、ユーザーがログインしたアプリケーションへのアクセスを制御するプライマリトークンとして扱うためです。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "When Quarkus OIDC works with the pure OAuth2 providers such as GitHub, it generates an internal ID token to represent the user authentication. The GitHub access token is still meant to access GitHub API."
msgstr "Quarkus OIDCがGitHubのような純粋なOAuth2プロバイダーと連携する場合、ユーザー認証を表す内部IDトークンが生成されます。GitHubのアクセストークンは、GitHub APIにアクセスするためのものです。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "This is why you have to set `quarkus.oidc.roles.source=accesstoken`, when you prefer to use an access token acquired by the application during the authorizatuion code flow to access this very same application."
msgstr "このため、認可コードフロー中にアプリケーションが取得したアクセストークンを、同じアプリケーションにアクセスするために使用したい場合は、 `quarkus.oidc.roles.source=accesstoken` を設定する必要があります。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Session management in Vertx OIDC and Quarkus OIDC"
msgstr "Vertx OIDCとQuarkus OIDCのセッション管理"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Vert.x OIDC is `stateful` and some users may assume that, therefore, Vert.x OIDC does not use cookies. It is not the case: it uses an opaque session cookie to track both the authorization code flow progress and the authenticated user session."
msgstr "Vert.x OIDC は `stateful` であるため、Vert.x OIDC はクッキーを使用しないと思い込んでいるユーザーもいるかもしれません。認証コードフローの進行と認証されたユーザーセッションの両方を追跡するために、不透明なセッションクッキーを使用します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "When you run an application created in either the <<vertx-oidc-vertx>> or <<vertx-oidc-quarkus>> sections, you can use your browser's developer tools to observe that an opaque `vertx-web-session` session cookie is used to track the user session:"
msgstr "<<vertx-oidc-vertx>> または <<vertx-oidc-quarkus>> セクションのいずれかで作成されたアプリケーションを実行するとき、ブラウザの開発者ツールを使って、不透明な `vertx-web-session` セッションクッキーがユーザセッションを追跡するために使われていることを観察することができます："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The state associated with the current user session is stored on the server."
msgstr "現在のユーザーセッションに関連する状態は、サーバーに保存されます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Now, when you run an application created in either the <<vertx-oidc-to-quarkus-oidc>> or <<vertx-oidc-to-quarkus-oidc-custom-callback>> sections, you can observe that Quarkus OIDC also uses a `q_session` session cookie but it is significantly larger in size:"
msgstr "ここで、 <<vertx-oidc-to-quarkus-oidc>> または <<vertx-oidc-to-quarkus-oidc-custom-callback>> のいずれかのセクションで作成したアプリケーションを実行すると、Quarkus OIDC も `q_session` セッションクッキーを使用しますが、サイズがかなり大きいことがわかります："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "It is due to the fact that Quarkus OIDC is `stateless` by default. It encrypts the user session details in the session cookie and no user session related content is stored on the server. This approach offers significantly higher WEB-scale level capabilities."
msgstr "これは、Quarkus OIDCがデフォルトで `stateless` 。これは、セッションクッキー内のユーザーセッションの詳細を暗号化し、ユーザーセッションに関連するコンテンツがサーバーに保存されないためです。このアプローチは、著しく高いWEBスケールレベルの機能を提供します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Is it less secure than the `stateful` approach ? It is hard to give a precise answer. The `stateful` approach does not protect the session cookie, if the attacker gets hold of it, the secure access is compromised. Thefore, with either approach, using HTTPS and applying additional CORS and CSRF controls must be considered."
msgstr "`stateful` 。正確な答えを出すのは難しいです。 `stateful` アプローチはセッションクッキーを保護しません。もし攻撃者がクッキーを入手すれば、安全なアクセスは損なわれます。したがって、どちらのアプローチでも、HTTPS を使用し、追加の CORS と CSRF 制御を適用することを考慮しなければなりません。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "For the `stateless` approach, Quarkus allows users to configure a session cookie encryption key, fallbacks to the client secret and finally to a generated secure random key to apply a JSON Web Encryption (JWE) to encrypt a generated content encryption key with the symmetric `A256GCMKW` algorithm and the `A256GCM` algorithm to encrypt the actual session cookie content."
msgstr "`stateless` 。Quarkusでは、セッションCookieの暗号化キー、クライアントシークレットへのフォールバック、そして最後に生成された安全なランダムキーを設定して、JSON Web Encryption（JWE）を適用し、生成されたコンテンツ暗号化キーを対称 `A256GCMKW` アルゴリズムで暗号化し、 `A256GCM` アルゴリズムで実際のセッションCookieコンテンツを暗号化することができます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "However, if you do prefer to continue following a stateful approach, you can easily achieve it with Quarkus OIDC."
msgstr "しかし、ステートフルなアプローチを継続したい場合は、Quarkus OIDCを使用すれば簡単に実現できます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "The session state that Quarkus OIDC keeps includes the ID, access and refresh tokens. Additionally, if the authorization code grant response returns the access token expiry and scope properties, then their values are also stored."
msgstr "Quarkus OIDCが保持するセッション状態には、ID、アクセストークン、リフレッシュトークンが含まれます。さらに、認可コード付与レスポンスがアクセストークンの有効期限とスコープのプロパティを返す場合、それらの値も保存されます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "To start with, you can register a custom `quarkus.oidc.TokenStateManager` and implement a required session state storage mechanism. For example, Quarkus OIDC does not ship an in-memory `TokenStateManager` because it does not really work after restarts or across multiple pods, but you can implement the one in order to start experimenting with the custom `TokenStateManager`."
msgstr "手始めに、カスタム `quarkus.oidc.TokenStateManager` を登録し、必要なセッション状態保存メカニズムを実装することができます。たとえば、Quarkus OIDCでは、インメモリ `TokenStateManager` 、再起動の後や複数のポッドにまたがって実際に動作しないため、出荷されていませんが、カスタム `TokenStateManager` の実験を開始するために、実装することができます。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Additionally, Quarkus OIDC ships both a database-aware `TokenStateManager` that can integrate with most known databases and a Redis `TokenStateManager`. See the https://quarkus.io/guides/security-oidc-code-flow-authentication#handling-and-controlling-the-lifetime-of-authentication[section] for mor details."
msgstr "さらに、Quarkus OIDCには、ほとんどの既知のデータベースと統合できるデータベース対応 `TokenStateManager` 、Redis `TokenStateManager` 。詳細は link:https://quarkus.io/guides/security-oidc-code-flow-authentication#handling-and-controlling-the-lifetime-of-authentication[セクションを] 参照してください。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Let's see how it works with the Redis `TokenStateManager`."
msgstr "それでは、Redis `TokenStateManager` でどのように動作するか見てみましょう。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Update the pom.xml from either the <<vertx-oidc-to-quarkus-oidc>> or <<vertx-oidc-to-quarkus-oidc-custom-callback>> sections by adding this single dependency:"
msgstr "pom.xmlを <<vertx-oidc-to-quarkus-oidc>> または <<vertx-oidc-to-quarkus-oidc-custom-callback>> セクションから更新し、依存関係を1つ追加します："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "It is all that you need to do to start using the Redis `TokenStateManager`."
msgstr "Redis `TokenStateManager` を使い始めるために必要なことはこれだけです。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Clear the cookies in the browser, access the protected endpoint again and now you can observe an opaque `q_session` session cookie only:"
msgstr "ブラウザのクッキーを消去し、保護されたエンドポイントに再度アクセスすると、 `q_session` セッション・クッキーのみが不透明になります："

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "You may also observe that Vert.x OIDC uses a session cookie to track the authorization code flow progress as well as the authenticated user's session."
msgstr "また、Vert.x OIDCはセッションクッキーを使用して、認証コードフローの進行状況と認証ユーザーのセッションを追跡します。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "On the other hand, Quarkus OIDC uses a dedicated `q_auth_<uuid>` state cookie while the authorization code flow is in progress and only creates a session cookie once the code flow is complete. The state cookie names are also unique allowing for a multi-tab authentication."
msgstr "一方、Quarkus OIDCでは、認証コードフローが進行している間は専用のステートクッキー（ `q_auth_<uuid>` ）を使用し、コードフローが完了した時点でセッションクッキーのみを作成します。ステートクッキーの名前も一意であるため、マルチタブ認証が可能です。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Help with the migration"
msgstr "移住のお手伝い"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "If you are considering to migrate from Vert.x OIDC to Quarkus OIDC and have questions that may not have been answered in this guide, please https://quarkus.io/support/[reach out to the Quarkus team]."
msgstr "Vert.x OIDCからQuarkus OIDCへの移行を検討中で、このガイドに記載されていない質問がある場合は、 link:https://quarkus.io/support/[Quarkusチームまでお問い合わせ] ください。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "Please also see the <<references>> for more information."
msgstr "詳しくは <<references>> もご覧ください。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "References"
msgstr "リファレンス"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr "xref:security-overview.adoc[Quarkus Securityの概要]"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "xref:security-oidc-code-flow-authentication.adoc[OpenID Connect authorization code flow authentication]."
msgstr "xref:security-oidc-code-flow-authentication.adoc[OpenID Connect認証コードフロー認証] 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "xref:security-oidc-bearer-token-authentication.adoc[OpenID Connect bearer access token authentication]."
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OpenID Connectのベアラアクセストークン認証] 。"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
msgid "xref:security-openid-connect-multitenancy.adoc[Using OpenID Connect Multi-Tenancy]"
msgstr "xref:security-openid-connect-multitenancy.adoc[OpenID Connect マルチテナンシーの使用]"

#: _versions/3.27/guides/security-vertx-oidc-to-quarkus-oidc-migration.adoc
#, fuzzy
msgid "xref:security-oidc-expanded-configuration.adoc[Expanded OIDC Configuration Reference]"
msgstr "xref:security-oidc-expanded-configuration.adoc[拡張OIDC構成リファレンス]"
