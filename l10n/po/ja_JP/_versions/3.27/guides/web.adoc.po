msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/web.adoc
msgid "Quarkus for the Web"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Quarkus provides several extensions to create web applications, this document aims to provide directions on which extension to use for different use cases."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "The basics"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Serving static resources"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Let's assume you have a Quarkus backend, and you want to serve static files. This is the most basic case, it is supported out of the box with all our Vert.x based extensions, you must place them in the `META-INF/resources` directory of your application."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "You can find more information in the xref:http-reference.adoc#serving-static-resources[HTTP reference guide]."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Serving scripts, styles, and web libraries"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "However, if you want to insert scripts, styles, and libraries in your web pages, you have 3 options:"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Consume libraries from public CDNs such as cdnjs, unpkg, jsDelivr and more, or copy them to your `META-INF/resources` directory."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Use runtime web dependencies such as https://mvnpm.org[mvnpm] or https://www.webjars.org[WebJars], when added to your pom.xml or build.gradle they can be directly xref:web-dependency-locator.adoc[accessed from your web pages]."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Package your scripts (js, ts), styles (css, scss), and web dependencies together using a bundler (see xref:#bundling[below])."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "*We recommend using a bundler for production* as it offers better control, consistency, security, and performance. The good news is that Quarkus makes it really easy and fast with the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler extension]."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Bundling scripts, styles, and libraries"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "There are two ways to bundle your web assets:"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Using https://docs.quarkiverse.io/quarkus-web-bundler/dev/[the Quarkus Web Bundler extension], which is the recommended way. Without any configuration, it puts everything together in an instant, and follows good practices such as dead-code elimination, minification, caching, and more."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Using a custom bundler such as Webpack, Parcel, Rollup, etc. This can be easily integrated with Quarkus using the https://docs.quarkiverse.io/quarkus-quinoa/dev/[Quarkus Quinoa extension]."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Server-side rendering (SSR)"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "For templating and server-side rendering with Quarkus, there are different engines available such as xref:qute.adoc[Qute] or https://docs.quarkiverse.io/quarkus-freemarker/dev/[Freemarker] and others."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Qute Web"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Qute is designed specifically to meet the Quarkus needs, and help you deal with templates, snippets, and partials and render the data from your storage. It is inspired by the most famous template engines, it is fast, type-safe, works in native, and has a lot of nice features."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "To install Qute Web, follow xref:qute.adoc#serving-templates[the instructions]."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Here is a simple example of a Qute template:"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "src/main/resources/templates/pub/index.html"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "With the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler extension], this expression will be replaced by the bundled scripts and styles."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "You can directly use the HTTP parameters in your templates."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "This expression is validated. Try to change the expression to `cdi:Product.notHere` and the build will fail."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "If you install xref:ide-tooling.adoc[Quarkus IDEs plugins], you will have autocompletion, link to implementation and validation."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Model-View-Controller (MVC)"
msgstr ""

#: _versions/3.27/guides/web.adoc
#, fuzzy
msgid "The MVC approach is also made very easy with Quarkus thanks to Qute."
msgstr "Quarkusでは、QuteのおかげでMVCアプローチも非常に簡単です。"

#: _versions/3.27/guides/web.adoc
#, fuzzy
msgid "Associated with the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler extension], the road is open to build modern web applications for all your needs."
msgstr "link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundlerエクステンションと] 連携することで、あらゆるニーズに対応するモダンなWebアプリケーションを構築する道が開けます。"

#: _versions/3.27/guides/web.adoc
msgid "src/main/java/rest/Todos.java"
msgstr ""

#: _versions/3.27/guides/web.adoc
#, fuzzy
msgid "Check out https://www.youtube.com/watch?v=JNmHN5mK180[Quarkus Insights Episode #178]. You can also give it a try using https://github.com/quarkusio/quarkus-web-lab[the web-lab repo]."
msgstr "link:https://www.youtube.com/watch?v=JNmHN5mK180[Quarkus Insights Episode #178を] ご覧ください。また、 link:https://github.com/quarkusio/quarkus-web-lab[Web-labのレポを使って] 試すこともできます。"

#: _versions/3.27/guides/web.adoc
msgid "Single Page Applications"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Quarkus provides very solid tools for creating or integrating Single Page Applications to Quarkus (React, Angular, Vue, …), here are 3 options:"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "https://docs.quarkiverse.io/quarkus-quinoa/dev/[Quarkus Quinoa] bridges your npm-compatible web application and Quarkus for both dev and prod. No need to install Node.js or configure your framework, it will detect it and use sensible defaults."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "The https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler] is also a good approach, it is closer to the Java ecosystem and removes a lot of boilerplate and configuration, it is fast and efficient. For examples of such SPAs, see https://github.com/quarkusio/code.quarkus.io[code.quarkus.io] and https://github.com/mvnpm/mvnpm[mvnpm.org]."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Your automation using the https://github.com/eirslett/frontend-maven-plugin[maven-frontend-plugin] or similar tools."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Full-stack microservices (Micro-frontends)"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Quarkus is an excellent choice for both full-stack web components and full-stack microservices aka Micro-frontends. By utilizing the Web Bundler or Quinoa, you can significantly reduce boilerplate code and manage multiple services efficiently without much configuration duplication."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "For example the https://github.com/quarkusio/search.quarkus.io[Quarkus documentation search engine] on https://quarkus.io[quarkus.io] uses the Web Bundler to create a full-stack web-component. With Lit Element for the web-component and OpenSearch for the indexation it is a nice way to enhance the static web-site experience in a dynamic way."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "More content about this is coming soon..."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Other ways"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "We described Quarkus most common ways to create web applications but there are other options:"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "https://quarkus.io/extensions/com.vaadin/vaadin-quarkus-extension/[Vaadin Flow extension], for this unique framework that lets you build web apps directly from Java code without writing HTML or JavaScript."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "JavaServer Faces (jsf) is a specification for building component-based web apps in Java. It available in Quarkus, the https://quarkus.io/extensions/org.apache.myfaces.core.extensions.quarkus/myfaces-quarkus/[MyFaces] extension is an implementation of Faces for Quarkus. https://quarkus.io/extensions/io.quarkiverse.primefaces/quarkus-primefaces/[PrimeFaces] is a Faces components suite, and https://quarkus.io/extensions/io.quarkiverse.omnifaces/quarkus-omnifaces/[OmniFaces], a utility library. More information is available in https://www.melloware.com/quarkus-faces-using-jsf-with-quarkus/[this blog post]."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Create xref:building-my-first-extension.adoc[a new extension] for your favorite web framework."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Testing your web applications"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "For testing web applications, https://docs.quarkiverse.io/quarkus-playwright/dev/[Quarkus Playwright] is very easy to use. You can create effective cross-browser end-to-end tests mimicking user interaction and making sure your web application is working as a whole. The big advantage is that it benefits from all dev-services and Quarkus mocking features."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Q&A"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Why is Quarkus a very good option for Web Applications compared to other frameworks?"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Quarkus is well known for its backend extensions ecosystem and developer experience, if you combine it with great extensions for frontend, then it is a perfect mix! All the testing and dev-mode features are now available for both frontend and backend."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "What are the advantages of SSR (Server Side Rendering) over SPA (Single Page App)?"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Here are the benefits of performing rendering work on the server:"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "*Data Retrieval:* Fetching data on the server, closer to the data source. This enhances performance by reducing the time needed to retrieve data for rendering and minimizes client requests."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "*Enhanced Security:* Storage of sensitive data and logic is happening on the server, such as tokens and API keys, without exposing them to client-side risks."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "*Caching Efficiency:* Server-side rendering allows for result caching, which can be reused across users and subsequent requests. This optimizes performance and lowers costs by reducing rendering and data fetching per request."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "*Improved Initial Page Load and First Contentful Paint (FCP):* Generating HTML on the server enables users to view the page immediately, eliminating the need to wait for client-side JavaScript to download, parse, and execute for rendering."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "*Search Engine Optimization (SEO) and Social Media Shareability:* The rendered HTML aids search engine indexing and social network previews, enhancing discoverability and shareability."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "I am hesitating between Quinoa and the Web Bundler, how should I make my decision?"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "You have to think that the bundled output is essentially the same with both solutions. Also, switching from one to the other is not a big deal, the choice is about the developer experience and finding the best fit for your team."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "Some guidelines:"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "*Go for Quinoa:*"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "You have an existing frontend configured with a npm-compatible build tool, Quinoa is the most direct option."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "You have a dedicated frontend team familiar with tools such as NPM, Yarn and other for building Single Page Apps."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "You want to write Javascript unit tests (such as Jest, Jasmine, ..), it is not possible with the Web Bundler. However, you could publish a components library on NPM and consume it from the Web Bundler."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "You use very specific bundling options or specific tools in your build process"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "You love package.json and configurations tweaking"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "*Go for Web Bundler:*"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "For simple web applications, the Web Bundler is the easiest and fastest way to get started"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid ""
"You prefer to stay close to the Maven/Gradle ecosystem\n"
"(Node.js is not needed), it uses an extremely fast bundler for the web (esbuild)"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "You want to reduce boilerplate and configuration"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "How do I scale a Quarkus Web Application?"
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid ""
"Serving a few static pages and scripts from an existing Quarkus backend is not a big overhead, so scaling the full app is usually the simplest option.\n"
"You could also split it in two services: one for the backend and one for the frontend. However, in most cases, this approach wouldn’t yield substantial benefits compared to the initial method."
msgstr ""

#: _versions/3.27/guides/web.adoc
msgid "If your application involves a substantial number of static resources, consider using a CDN. Both the Web Bundler and Quinoa can be configured to work seamlessly with a CDN, providing improved performance and distribution of assets."
msgstr ""
