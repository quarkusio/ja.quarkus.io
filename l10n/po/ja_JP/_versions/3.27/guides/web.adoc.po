msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/web.adoc
msgid "Quarkus for the Web"
msgstr "Web 向け Quarkus"

#: _versions/3.27/guides/web.adoc
msgid "Quarkus provides several extensions to create web applications, this document aims to provide directions on which extension to use for different use cases."
msgstr "Quarkus は Web アプリケーションを作成するためのエクステンションをいくつか提供しており、このドキュメントではさまざまなユースケースでどのエクステンションを使用するかに関して説明することを目的としています。"

#: _versions/3.27/guides/web.adoc
msgid "The basics"
msgstr "基本情報"

#: _versions/3.27/guides/web.adoc
msgid "Serving static resources"
msgstr "静的リソースの提供"

#: _versions/3.27/guides/web.adoc
msgid "Let's assume you have a Quarkus backend, and you want to serve static files. This is the most basic case, it is supported out of the box with all our Vert.x based extensions, you must place them in the `META-INF/resources` directory of your application."
msgstr "まず、Quarkus のバックエンドがあり、静的ファイルを提供すると仮定します。これは最も基本的なケースで、すべての Vert.x ベースのエクステンションですぐに使用できますが、アプリケーションの `META-INF/resources` ディレクトリーに配置する必要があります。"

#: _versions/3.27/guides/web.adoc
msgid "You can find more information in the xref:http-reference.adoc#serving-static-resources[HTTP reference guide]."
msgstr "詳しくは xref:http-reference.adoc#serving-static-resources[HTTPリファレンスガイド] をご覧ください。"

#: _versions/3.27/guides/web.adoc
msgid "Serving scripts, styles, and web libraries"
msgstr "スクリプト、スタイル、Web ライブラリーの提供"

#: _versions/3.27/guides/web.adoc
msgid "However, if you want to insert scripts, styles, and libraries in your web pages, you have 3 options:"
msgstr "ただし、Web ページにスクリプト、スタイル、ライブラリーを挿入する場合は、次の 3 つのオプションがあります。"

#: _versions/3.27/guides/web.adoc
msgid "Consume libraries from public CDNs such as cdnjs, unpkg, jsDelivr and more, or copy them to your `META-INF/resources` directory."
msgstr "cdnjs、unpkg、jsDelivr などのパブリック CDN からライブラリーを使用するか、それらを `META-INF/resources` ディレクトリーにコピーします。"

#: _versions/3.27/guides/web.adoc
msgid "Use runtime web dependencies such as https://mvnpm.org[mvnpm] or https://www.webjars.org[WebJars], when added to your pom.xml or build.gradle they can be directly xref:web-dependency-locator.adoc[accessed from your web pages]."
msgstr "https://mvnpm.org[mvnpm] や https://www.webjars.org[WebJars] などのランタイム Web 依存関係を使用します。pom.xml または build.gradle に追加すると、xref:web-dependency-locator.adoc[Web ページから直接アクセス] できるようになります。"

#: _versions/3.27/guides/web.adoc
msgid "Package your scripts (js, ts), styles (css, scss), and web dependencies together using a bundler (see xref:#bundling[below])."
msgstr "バンドラーを使用して、スクリプト (js、ts)、スタイル (css、scss)、および Web 依存関係をパッケージ化します (xref:#bundling[下記] を参照)。"

#: _versions/3.27/guides/web.adoc
msgid "*We recommend using a bundler for production* as it offers better control, consistency, security, and performance. The good news is that Quarkus makes it really easy and fast with the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler extension]."
msgstr "制御性、一貫性、セキュリティー、パフォーマンスが向上するため、*実稼働環境ではバンドラーを使用することを推奨します*。Quarkus では https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler エクステンション] を使用することで、バンドラーの使用が簡単かつ迅速になります。"

#: _versions/3.27/guides/web.adoc
msgid "Bundling scripts, styles, and libraries"
msgstr "スクリプト、スタイル、ライブラリーのバンドル"

#: _versions/3.27/guides/web.adoc
msgid "There are two ways to bundle your web assets:"
msgstr "Web アセットをバンドルする方法は 2 つあります。"

#: _versions/3.27/guides/web.adoc
msgid "Using https://docs.quarkiverse.io/quarkus-web-bundler/dev/[the Quarkus Web Bundler extension], which is the recommended way. Without any configuration, it puts everything together in an instant, and follows good practices such as dead-code elimination, minification, caching, and more."
msgstr "推奨の方法として、 https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler エクステンション] を使用します。設定なしですべてを瞬時にまとめ、デッドコードの除去、縮小、キャッシュなどの適切なプラクティスに従います。"

#: _versions/3.27/guides/web.adoc
msgid "Using a custom bundler such as Webpack, Parcel, Rollup, etc. This can be easily integrated with Quarkus using the https://docs.quarkiverse.io/quarkus-quinoa/dev/[Quarkus Quinoa extension]."
msgstr "Webpack、Parcel、Rollupなどのカスタムバンドラーを使用します。 link:https://docs.quarkiverse.io/quarkus-quinoa/dev/[Quarkus Quinoaエクステンション] を使用すると、Quarkusと簡単に統合できます。"

#: _versions/3.27/guides/web.adoc
msgid "Server-side rendering (SSR)"
msgstr "Server-side rendering (SSR)"

#: _versions/3.27/guides/web.adoc
msgid "For templating and server-side rendering with Quarkus, there are different engines available such as xref:qute.adoc[Qute] or https://docs.quarkiverse.io/quarkus-freemarker/dev/[Freemarker] and others."
msgstr "Quarkus を使用したテンプレート作成と server-side rendering には、xref:qute.adoc[Qute] や https://docs.quarkiverse.io/quarkus-freemarker/dev/[Freemarker] などのさまざまなエンジンが利用できます。"

#: _versions/3.27/guides/web.adoc
msgid "Qute Web"
msgstr "Qute Web"

#: _versions/3.27/guides/web.adoc
msgid "Qute is designed specifically to meet the Quarkus needs, and help you deal with templates, snippets, and partials and render the data from your storage. It is inspired by the most famous template engines, it is fast, type-safe, works in native, and has a lot of nice features."
msgstr "Qute は Quarkus の要件を満たすように特別に設計されており、テンプレート、スニペット、部分的な処理やストレージからのデータのレンダリングに役立ちます。最も一般的に使用されているテンプレートエンジンにヒントを得たもので、高速、型安全、ネイティブで動作し、多くの優れた機能を備えています。"

#: _versions/3.27/guides/web.adoc
msgid "To install Qute Web, follow xref:qute.adoc#serving-templates[the instructions]."
msgstr "Qute Web をインストールするには、xref:qute.adoc#serving-templates[手順] に従ってください。"

#: _versions/3.27/guides/web.adoc
msgid "Here is a simple example of a Qute template:"
msgstr "以下は Qute テンプレートの簡単な例です。"

#: _versions/3.27/guides/web.adoc
msgid "src/main/resources/templates/pub/index.html"
msgstr "src/main/resources/templates/pub/index.html"

#: _versions/3.27/guides/web.adoc
msgid "With the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler extension], this expression will be replaced by the bundled scripts and styles."
msgstr "https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler エクステンション] を使用すると、この式はバンドルされたスクリプトとスタイルに置き換えられます。"

#: _versions/3.27/guides/web.adoc
msgid "You can directly use the HTTP parameters in your templates."
msgstr "テンプレート内で HTTP パラメーターを直接使用できます。"

#: _versions/3.27/guides/web.adoc
msgid "This expression is validated. Try to change the expression to `cdi:Product.notHere` and the build will fail."
msgstr "この式は検証されます。式を `cdi:Product.notHere` に変更してみてください。ビルドは失敗します。"

#: _versions/3.27/guides/web.adoc
msgid "If you install xref:ide-tooling.adoc[Quarkus IDEs plugins], you will have autocompletion, link to implementation and validation."
msgstr "xref:ide-tooling.adoc[Quarkus IDE プラグイン] をインストールすると、自動補完、実装へのリンク、検証が利用できるようになります。"

#: _versions/3.27/guides/web.adoc
msgid "Model-View-Controller (MVC)"
msgstr "Model-View-Controller (MVC)"

#: _versions/3.27/guides/web.adoc
#, fuzzy
msgid "The MVC approach is also made very easy with Quarkus thanks to Qute."
msgstr "Quarkusでは、QuteのおかげでMVCアプローチも非常に簡単です。"

#: _versions/3.27/guides/web.adoc
#, fuzzy
msgid "Associated with the https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundler extension], the road is open to build modern web applications for all your needs."
msgstr "link:https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Web Bundlerエクステンションと] 連携することで、あらゆるニーズに対応するモダンなWebアプリケーションを構築する道が開けます。"

#: _versions/3.27/guides/web.adoc
msgid "src/main/java/rest/Todos.java"
msgstr "src/main/java/rest/Todos.java"

#: _versions/3.27/guides/web.adoc
#, fuzzy
msgid "Check out https://www.youtube.com/watch?v=JNmHN5mK180[Quarkus Insights Episode #178]. You can also give it a try using https://github.com/quarkusio/quarkus-web-lab[the web-lab repo]."
msgstr "link:https://www.youtube.com/watch?v=JNmHN5mK180[Quarkus Insights Episode #178を] ご覧ください。また、 link:https://github.com/quarkusio/quarkus-web-lab[Web-labのレポを使って] 試すこともできます。"

#: _versions/3.27/guides/web.adoc
msgid "Single Page Applications"
msgstr "シングルページアプリケーション"

#: _versions/3.27/guides/web.adoc
msgid "Quarkus provides very solid tools for creating or integrating Single Page Applications to Quarkus (React, Angular, Vue, …), here are 3 options:"
msgstr "Quarkus は、シングルページアプリケーション (React、Angular、Vue など) を作成または Quarkus に統合するための非常に堅牢なツールを提供します。以下に 3 つのオプションを紹介します。"

#: _versions/3.27/guides/web.adoc
msgid "https://docs.quarkiverse.io/quarkus-quinoa/dev/[Quarkus Quinoa] bridges your npm-compatible web application and Quarkus for both dev and prod. No need to install Node.js or configure your framework, it will detect it and use sensible defaults."
msgstr "link:https://docs.quarkiverse.io/quarkus-quinoa/dev/[Quarkus Quinoa] 、はnpm互換のウェブアプリケーションとQuarkusの橋渡しをします。Node.jsをインストールしたり、フレームワークを設定したりする必要はありません。"

#: _versions/3.27/guides/web.adoc
msgid "The https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler] is also a good approach, it is closer to the Java ecosystem and removes a lot of boilerplate and configuration, it is fast and efficient. For examples of such SPAs, see https://github.com/quarkusio/code.quarkus.io[code.quarkus.io] and https://github.com/mvnpm/mvnpm[mvnpm.org]."
msgstr "https://docs.quarkiverse.io/quarkus-web-bundler/dev/[Quarkus Web Bundler]。こちらも適切なアプローチです。Java エコシステムに近いため、多くのボイラープレートや設定が不要になり、高速かつ効率的です。このような SPA の例については、 https://github.com/quarkusio/code.quarkus.io[code.quarkus.io] および https://github.com/mvnpm/mvnpm[mvnpm.org] を参照してください。"

#: _versions/3.27/guides/web.adoc
msgid "Your automation using the https://github.com/eirslett/frontend-maven-plugin[maven-frontend-plugin] or similar tools."
msgstr "link:https://github.com/eirslett/frontend-maven-plugin[maven-frontend-plugin] または同様のツールを使用した自動化。"

#: _versions/3.27/guides/web.adoc
msgid "Full-stack microservices (Micro-frontends)"
msgstr "フルスタックマイクロサービス (マイクロフロントエンド)"

#: _versions/3.27/guides/web.adoc
msgid "Quarkus is an excellent choice for both full-stack web components and full-stack microservices aka Micro-frontends. By utilizing the Web Bundler or Quinoa, you can significantly reduce boilerplate code and manage multiple services efficiently without much configuration duplication."
msgstr "Quarkus は、フルスタック Web コンポーネントとフルスタックマイクロサービス (マイクロフロントエンドとも呼ばれます) の両方に最適です。Web Bundler または Quinoa を利用することで、ボイラープレートコードを大幅に削減し、設定の重複をほとんど発生させずに複数のサービスを効率的に管理できます。"

#: _versions/3.27/guides/web.adoc
msgid "For example the https://github.com/quarkusio/search.quarkus.io[Quarkus documentation search engine] on https://quarkus.io[quarkus.io] uses the Web Bundler to create a full-stack web-component. With Lit Element for the web-component and OpenSearch for the indexation it is a nice way to enhance the static web-site experience in a dynamic way."
msgstr "たとえば、 https://quarkus.io[quarkus.io] の https://github.com/quarkusio/search.quarkus.io[Quarkus ドキュメント検索エンジン] は、Web Bundler を使用してフルスタックの Web コンポーネントを作成します。Web コンポーネントに Lit Element、インデックス作成に OpenSearch を使用すると、静的な Web サイトのエクスペリエンスを動的に強化できます。"

#: _versions/3.27/guides/web.adoc
msgid "More content about this is coming soon..."
msgstr "これに関するさらなるコンテンツは近日公開予定です。"

#: _versions/3.27/guides/web.adoc
msgid "Other ways"
msgstr "他の方法"

#: _versions/3.27/guides/web.adoc
msgid "We described Quarkus most common ways to create web applications but there are other options:"
msgstr "Quarkus で Web アプリケーションを作成する最も一般的な方法について説明しましたが、他にもオプションがあります。"

#: _versions/3.27/guides/web.adoc
msgid "https://quarkus.io/extensions/com.vaadin/vaadin-quarkus-extension/[Vaadin Flow extension], for this unique framework that lets you build web apps directly from Java code without writing HTML or JavaScript."
msgstr "https://quarkus.io/extensions/com.vaadin/vaadin-quarkus-extension/[Vaadin Flow エクステンション] は、HTML や JavaScript を記述せずに Java コードから直接 Web アプリケーションを構築できるユニークなフレームワークです。"

#: _versions/3.27/guides/web.adoc
msgid "JavaServer Faces (jsf) is a specification for building component-based web apps in Java. It available in Quarkus, the https://quarkus.io/extensions/org.apache.myfaces.core.extensions.quarkus/myfaces-quarkus/[MyFaces] extension is an implementation of Faces for Quarkus. https://quarkus.io/extensions/io.quarkiverse.primefaces/quarkus-primefaces/[PrimeFaces] is a Faces components suite, and https://quarkus.io/extensions/io.quarkiverse.omnifaces/quarkus-omnifaces/[OmniFaces], a utility library. More information is available in https://www.melloware.com/quarkus-faces-using-jsf-with-quarkus/[this blog post]."
msgstr "JavaServer Faces (jsf) は、Java でコンポーネントベースの Web アプリケーションを構築するための仕様です。これは Quarkus で利用可能で、 https://quarkus.io/extensions/org.apache.myfaces.core.extensions.quarkus/myfaces-quarkus/[MyFaces] エクステンションは Quarkus 用の Faces の実装です。 https://quarkus.io/extensions/io.quarkiverse.primefaces/quarkus-primefaces/[PrimeFaces] は Faces コンポーネントスイートであり、 https://quarkus.io/extensions/io.quarkiverse.omnifaces/quarkus-omnifaces/[OmniFaces] はユーティリティーライブラリーです。詳細は、 https://www.melloware.com/quarkus-faces-using-jsf-with-quarkus/[このブログ投稿] を参照してください。"

#: _versions/3.27/guides/web.adoc
msgid "Create xref:building-my-first-extension.adoc[a new extension] for your favorite web framework."
msgstr "お気に入りの Web フレームワーク用の xref:building-my-first-extension.adoc[新しいエクステンション] を作成します。"

#: _versions/3.27/guides/web.adoc
msgid "Testing your web applications"
msgstr "Web アプリケーションのテスト"

#: _versions/3.27/guides/web.adoc
msgid "For testing web applications, https://docs.quarkiverse.io/quarkus-playwright/dev/[Quarkus Playwright] is very easy to use. You can create effective cross-browser end-to-end tests mimicking user interaction and making sure your web application is working as a whole. The big advantage is that it benefits from all dev-services and Quarkus mocking features."
msgstr "Web アプリケーションのテストには、 https://docs.quarkiverse.io/quarkus-playwright/dev/[Quarkus Playwright] が非常に便利です。ユーザー操作を模倣し、Web アプリケーション全体が動作していることを確認できる、効果的なクロスブラウザーエンドツーエンドテストを作成できます。大きな利点は、すべての開発サービスと Quarkus のモック機能を利用できることです。"

#: _versions/3.27/guides/web.adoc
msgid "Q&A"
msgstr "Q&A"

#: _versions/3.27/guides/web.adoc
msgid "Why is Quarkus a very good option for Web Applications compared to other frameworks?"
msgstr "他のフレームワークと比較して、Quarkus が Web アプリケーションにとって非常に優れた選択肢であるのはなぜですか?"

#: _versions/3.27/guides/web.adoc
msgid "Quarkus is well known for its backend extensions ecosystem and developer experience, if you combine it with great extensions for frontend, then it is a perfect mix! All the testing and dev-mode features are now available for both frontend and backend."
msgstr "Quarkus は、バックエンドのエクステンションのエコシステムと開発者エクスペリエンスなどが、よく知られていますが、これをフロントエンドの優れたエクステンションと組み合わせると、完璧な組み合わせになります。すべてのテスト機能と開発モード機能が、フロントエンドとバックエンドの両方で利用できるようになりました。"

#: _versions/3.27/guides/web.adoc
msgid "What are the advantages of SSR (Server Side Rendering) over SPA (Single Page App)?"
msgstr "SPA (シングルページアプリケーション) と比較した SSR (サーバーサイドレンダリング) の利点は何ですか?"

#: _versions/3.27/guides/web.adoc
msgid "Here are the benefits of performing rendering work on the server:"
msgstr "サーバー上でレンダリング作業を実行する利点は次のとおりです。"

#: _versions/3.27/guides/web.adoc
msgid "*Data Retrieval:* Fetching data on the server, closer to the data source. This enhances performance by reducing the time needed to retrieve data for rendering and minimizes client requests."
msgstr "*データ取得:* データソースに近いサーバー上でデータを取得します。これにより、レンダリング用のデータ取得に必要な時間が短縮され、クライアント要求が最小限に抑えられるため、パフォーマンスが向上します。"

#: _versions/3.27/guides/web.adoc
msgid "*Enhanced Security:* Storage of sensitive data and logic is happening on the server, such as tokens and API keys, without exposing them to client-side risks."
msgstr "*セキュリティーの強化:* トークンや API キーなどの機密データやロジックは、クライアント側のリスクにさらされることなく、サーバー上で保存されます。"

#: _versions/3.27/guides/web.adoc
msgid "*Caching Efficiency:* Server-side rendering allows for result caching, which can be reused across users and subsequent requests. This optimizes performance and lowers costs by reducing rendering and data fetching per request."
msgstr "*キャッシュの効率:* サーバー側レンダリングにより結果をキャッシュできるため、ユーザー間および後続のリクエスト間で再利用できます。これにより、リクエストごとのレンダリングとデータ取得が削減され、パフォーマンスの最適化およびコスト削減が実現できます。"

#: _versions/3.27/guides/web.adoc
msgid "*Improved Initial Page Load and First Contentful Paint (FCP):* Generating HTML on the server enables users to view the page immediately, eliminating the need to wait for client-side JavaScript to download, parse, and execute for rendering."
msgstr "*初期ページ読み込みと First Contentful Paint (FCP) の改善:* サーバー上で HTML を生成することで、ユーザーはページをすぐに表示できるようになり、クライアント側の JavaScript のダウンロード、解析、レンダリングが実行されるのを待つ必要がなくなります。"

#: _versions/3.27/guides/web.adoc
msgid "*Search Engine Optimization (SEO) and Social Media Shareability:* The rendered HTML aids search engine indexing and social network previews, enhancing discoverability and shareability."
msgstr "*検索エンジン最適化 (SEO) とソーシャルメディアの共有可能性:* レンダリングされた HTML は、検索エンジンのインデックス作成とソーシャルネットワークのプレビューに役立ち、発見可能性と共有可能性を高めます。"

#: _versions/3.27/guides/web.adoc
msgid "I am hesitating between Quinoa and the Web Bundler, how should I make my decision?"
msgstr "Quinoa と Web Bundler のどちらにするか迷っています。どのように決めればよいでしょうか?"

#: _versions/3.27/guides/web.adoc
msgid "You have to think that the bundled output is essentially the same with both solutions. Also, switching from one to the other is not a big deal, the choice is about the developer experience and finding the best fit for your team."
msgstr "バンドルされた出力は、どちらのソリューションでも本質的には同じであると考えなければなりません。また、どちらか一方から他方に切り替えることは重大ではないため、開発者のエクスペリエンスとチームに最適なものを見つけることが重要です。"

#: _versions/3.27/guides/web.adoc
msgid "Some guidelines:"
msgstr "ガイドラインが複数あります。"

#: _versions/3.27/guides/web.adoc
msgid "*Go for Quinoa:*"
msgstr "*以下の場合は Quinoa を利用してください*"

#: _versions/3.27/guides/web.adoc
msgid "You have an existing frontend configured with a npm-compatible build tool, Quinoa is the most direct option."
msgstr "npm 互換のビルドツールで設定された既存のフロントエンドがある。Quinoa が最も直接的なオプションです。"

#: _versions/3.27/guides/web.adoc
msgid "You have a dedicated frontend team familiar with tools such as NPM, Yarn and other for building Single Page Apps."
msgstr "Single Page App を構築するための NPM、Yarn などのツールに精通した専任のフロントエンドチームがある。"

#: _versions/3.27/guides/web.adoc
msgid "You want to write Javascript unit tests (such as Jest, Jasmine, ..), it is not possible with the Web Bundler. However, you could publish a components library on NPM and consume it from the Web Bundler."
msgstr "Javascript ユニットテスト (Jest、Jasmine など) を記述する。Web Bundler では不可能ですが、NPM でコンポーネントライブラリーを公開し、Web Bundler から使用することはできます。"

#: _versions/3.27/guides/web.adoc
msgid "You use very specific bundling options or specific tools in your build process"
msgstr "ビルドプロセスで特定のバンドルオプションやツールを使用している。"

#: _versions/3.27/guides/web.adoc
msgid "You love package.json and configurations tweaking"
msgstr "package.json と設定の調整を好む。"

#: _versions/3.27/guides/web.adoc
msgid "*Go for Web Bundler:*"
msgstr "*以下の場合は Web Bundler を利用してください*"

#: _versions/3.27/guides/web.adoc
msgid "For simple web applications, the Web Bundler is the easiest and fastest way to get started"
msgstr "シンプルなウェブアプリケーション。Web バンドラーは最も簡単で最速の方法です。"

#: _versions/3.27/guides/web.adoc
msgid ""
"You prefer to stay close to the Maven/Gradle ecosystem\n"
"(Node.js is not needed), it uses an extremely fast bundler for the web (esbuild)"
msgstr ""
"Maven/Gradle エコシステムに近い状態を維持することを好む。\n"
"(Node.js は必要ありません)、Web 用の非常に高速なバンドラー (esbuild) を使用します。"

#: _versions/3.27/guides/web.adoc
msgid "You want to reduce boilerplate and configuration"
msgstr "ボイラープレートや設定を減らしたい。"

#: _versions/3.27/guides/web.adoc
msgid "How do I scale a Quarkus Web Application?"
msgstr "Quarkus Web アプリケーションをスケーリングするにはどうすればよいですか?"

#: _versions/3.27/guides/web.adoc
msgid ""
"Serving a few static pages and scripts from an existing Quarkus backend is not a big overhead, so scaling the full app is usually the simplest option.\n"
"You could also split it in two services: one for the backend and one for the frontend. However, in most cases, this approach wouldn’t yield substantial benefits compared to the initial method."
msgstr ""
"既存の Quarkus バックエンドからいくつかの静的ページとスクリプトを提供してもオーバーヘッドは大きくないため、通常は完全なアプリケーションをスケーリングするのが最も簡単なオプションです。\n"
"バックエンド用とフロントエンド用の 2 つのサービスに分割することもできます。ただし、ほとんどの場合、このアプローチでは最初の方法に比べて大きなメリットは得られません。"

#: _versions/3.27/guides/web.adoc
msgid "If your application involves a substantial number of static resources, consider using a CDN. Both the Web Bundler and Quinoa can be configured to work seamlessly with a CDN, providing improved performance and distribution of assets."
msgstr "アプリケーションに大量の静的リソースが含まれる場合は、CDN の使用を検討してください。Web Bundler と Quinoa はどちらも CDN とシームレスに連携するように設定できるため、アセットのパフォーマンスと配布が向上します。"
