msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Tips for writing native applications"
msgstr "ネイティブ・アプリケーションを作成するためのヒント"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "This guide contains various tips and tricks for getting around problems that might arise when attempting to run Java applications as native executables."
msgstr "このガイドには、Java アプリケーションをネイティブ実行可能ファイルとして実行しようとしたときに発生する可能性のある問題を回避するためのさまざまなヒントやコツが記載されています。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Note that we differentiate two contexts where the solution applied might be different:"
msgstr "適用されるソリューションが異なる可能性のある 2 つの文脈を区別していることに注意してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "in the context of an application, you will rely on configuring the `native-image` configuration by tweaking your `pom.xml`;"
msgstr "アプリケーションのコンテキストでは、 `pom.xml` を変更した `native-image` 設定に依存することになります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "in the context of an extension, Quarkus offers a lot of infrastructure to simplify all of this."
msgstr "エクステンションのコンテキストでは、Quarkus はこれらすべてを簡素化するための多くのインフラストラクチャーを提供しています。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Please refer to the appropriate section depending on your context."
msgstr "コンテキストに応じて適切なセクションを参照してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Supporting native in your application"
msgstr "アプリケーションでのネイティブのサポート"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "GraalVM imposes a number of constraints and making your application a native executable might require a few tweaks."
msgstr "GraalVM は多くの制約を課しており、アプリケーションをネイティブ実行可能なものにするには、いくつかの調整が必要になるかもしれません。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Including resources"
msgstr "リソースを含む"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"By default, when building a native executable, GraalVM will not include any of the resources that are on the classpath into the native executable it creates.\n"
"Resources that are meant to be part of the native executable need to be configured explicitly."
msgstr "デフォルトでは、ネイティブ実行可能ファイルをビルドする際に、GraalVM はクラスパス上にあるリソースを、作成するネイティブ実行可能ファイルには含めません。ネイティブ実行可能ファイルの一部となるリソースは、明示的に設定する必要があります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Quarkus automatically includes the resources present in `META-INF/resources` (the web resources) but, outside this directory, you are on your own."
msgstr "Quarkus では、 `META-INF/resources` (Web リソース) にあるリソースを自動的にインクルードしますが、このディレクトリー以外の場所は自分で設定する必要があります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"Note that you need to be extremely careful here as anything in `META-INF/resources` will be exposed as static web resources.\n"
"So this directory is not a shortcut for \"let's automatically include these resources in the native executable\" and should only be used for static web resources."
msgstr "`META-INF/resources` にあるものはすべて、静的な Web リソースとして公開されるので、ここでは非常に注意が必要です。このディレクトリーは、「これらのリソースを自動的にネイティブ実行可能ファイルに含める」ためのショートカットではなく、静的な Web リソースのためにのみ使用する必要があります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Other resources should be declared explicitly."
msgstr "その他のリソースは明示的に宣言する必要があります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Using the `quarkus.native.resources.includes` configuration property"
msgstr "`quarkus.native.resources.includes` 設定プロパティの使用"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"To include more resources in the native executable, the easiest way is to use the `quarkus.native.resources.includes` configuration property,\n"
"and its counterpart to exclude resources `quarkus.native.resources.excludes`."
msgstr "より多くのリソースをネイティブ実行可能ファイルに含めるには、 `quarkus.native.resources.includes` という設定プロパティーと、 `quarkus.native.resources.excludes` リソースを除外するための `quarkus.native.resources.excludes` を使用するのが最も簡単です。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Both configuration properties support glob patterns."
msgstr "どちらの設定プロパティーもグロブパターンに対応しています。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "For instance, having the following properties in your `application.properties`:"
msgstr "たとえば、 `application.properties` で以下のプロパティーを使用すると"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "will include:"
msgstr "以下が含まれます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "all files in the `foo/` directory and its subdirectories except for files in `foo/private/` and its subdirectories,"
msgstr "`foo/` ディレクトリーとそのサブディレクトリーにあるすべてのファイルのうち、 `foo/private/` とそのサブディレクトリーにあるファイルを除く。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "all text files in the `bar/` directory and its subdirectories."
msgstr "`bar/` ディレクトリーとそのサブディレクトリーにあるすべてのテキストファイル。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Using a configuration file"
msgstr "設定ファイルの使用"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"If globs are not sufficiently precise for your use case and you need to rely on regular expressions, or if you prefer relying on the GraalVM infrastructure,\n"
"you can also create a `resource-config.json` JSON file defining which resources should be included.\n"
"This, and other native image configuration files, should be placed under the `src/main/resources/META-INF/native-image/<group-id>/<artifact-id>` folder.\n"
"This way they will be automatically parsed by the native build, without additional configuration."
msgstr ""
"globs ではユースケースに十分な精度がなく、正規表現に頼る必要がある場合、または GraalVM インフラストラクチャーに頼ることを好む場合は、\n"
"また、含めるリソースを定義する `resource-config.json` JSON ファイルを作成することもできます。\n"
"これと他のネイティブイメージ設定ファイルは、 `src/main/resources/META-INF/native-image/<group-id>/<artifact-id> フォルダーに配置する必要があります。\n"
"こうすることで、追加の設定なしでネイティブビルドによって自動的に解析されます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Relying on the GraalVM infrastructure means that you are responsible for keeping the configuration file up to date as new Mandrel and GraalVM versions are released."
msgstr "GraalVMインフラストラクチャに依存するということは、新しいMandrelとGraalVMのバージョンがリリースされるたびに、設定ファイルを最新の状態に保つ責任があるということです。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Please also note that the `resource-config.json` file will be overwritten by Quarkus if placed directly under `src/main/resources/META-INF/native-image/` as Quarkus generates its own configuration file in this directory."
msgstr "また、Quarkus はこのディレクトリーに独自の設定ファイルを生成するため、`src/main/resources/META-INF/native-image/` に配置すると、`resource-config.json` ファイルは Quarkus によって上書きされることにも注意してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "An example of such a file is the following:"
msgstr "このようなファイルの例を以下に示します："

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"The patterns are valid Java regexps.\n"
"Here we include all the XML files and JSON files into the native executable."
msgstr "このパターンは有効な Java 正規表現です。ここでは、すべての XML ファイルと JSONファイル をネイティブ実行可能ファイルに含めています。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "For more information about this topic, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/dynamic-features/Resources/[GraalVM Accessing Resources in Native Image] guide."
msgstr "このトピックの詳細については、 link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/dynamic-features/Resources/[ネイティブ・イメージでリソースにアクセスするGraalVM] ガイドを参照してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Registering for reflection"
msgstr "リフレクションのための登録"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"When building a native executable, GraalVM operates with a closed world assumption.\n"
"It analyzes the call tree and removes all the classes/methods/fields that are not used directly."
msgstr "ネイティブ実行可能ファイルを構築する際、GraalVM はクローズな環境を想定して動作します。これは、コールツリーを解析し、直接使用しないクラス/メソッド/フィールドをすべて削除します。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"The elements used via reflection are not part of the call tree so they are dead code eliminated (if not called directly in other cases).\n"
"To include these elements in your native executable, you need to register them for reflection explicitly."
msgstr "リフレクションで使用される要素はコールツリーの一部ではないので、デッドコードとして排除されます (他のケースでは直接呼び出されない場合)。ネイティブ実行可能ファイルにこれらの要素を含めるには、リフレクションに明示的に登録する必要があります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "This is a very common case as JSON libraries typically use reflection to serialize the objects to JSON:"
msgstr "これは、JSONライブラリがリフレクションを使用してオブジェクトをJSONにシリアライズするのが一般的なので、非常によくあるケースです。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "If we were to use the code above, we would get an exception like the following when using the native executable:"
msgstr "上記のコードを使用した場合、ネイティブ実行可能ファイルを使用すると以下のような例外が発生します。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "or if you are using Jackson:"
msgstr "または Jackson を使用している場合。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "An even nastier possible outcome could be for no exception to be thrown, but instead the JSON result would be completely empty."
msgstr "さらに厄介なのは、例外がスローされずに JSON の結果が完全に空になってしまうことです。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "There are two different ways to fix this type of issues."
msgstr "このタイプの問題を解決するには、2 つの方法があります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Using the @RegisterForReflection annotation"
msgstr "@RegisterForReflection アノテーションの使用"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "The easiest way to register a class for reflection is to use the `@RegisterForReflection` annotation:"
msgstr "リフレクション用のクラスを登録する最も簡単な方法は、 `@RegisterForReflection` アノテーションを使用することです。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "If your class is in a third-party jar, you can do it by using an empty class that will host the `@RegisterForReflection` for it."
msgstr "クラスがサードパーティの jar にある場合は、そのクラスの `@RegisterForReflection` をホストする空のクラスを使用することで行うことができます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Note that `MyClassRequiringReflection` and  `MySecondClassRequiringReflection` will be registered for reflection but not `MyReflectionConfiguration`."
msgstr "なお、 `MyClassRequiringReflection` と `MySecondClassRequiringReflection` はリフレクションに登録されますが、 `MyReflectionConfiguration` は登録されません。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "This feature is handy when using third-party libraries using object mapping features (such as Jackson or GSON):"
msgstr "この機能は、オブジェクトマッピング機能を使用するサードパーティのライブラリ（JacksonやGSONなど）を使用する際に便利です。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Note: By default the `@RegisterForReflection` annotation will also register any potential nested classes for reflection. If you want to avoid this behavior, you can set the `ignoreNested` attribute to `true`."
msgstr "注記: デフォルトでは、`@RegisterForReflection` アノテーションは、リフレクションの対象となる可能性のあるネストされたクラスも登録します。この動作を回避するには、`ignoreNested` 属性を `true` に設定します。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "You can also use a configuration file to register classes for reflection, if you prefer relying on the GraalVM infrastructure."
msgstr "また、GraalVMインフラストラクチャに依存することを好むなら、リフレクションのためにクラスを登録するために設定ファイルを使用することもできます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "As an example, in order to register all methods of class `com.acme.MyClass` for reflection, we create `reflect-config.json` (the most common location is within `src/main/resources`)"
msgstr "たとえば、クラス `com.acme.MyClass` のすべてのメソッドをリフレクション用に登録するには、`reflect-config.json` を作成します (最も一般的な場所は `src/main/resources` 内です)。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "For more information about the format of this file, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/dynamic-features/Reflection/[GraalVM Reflection in Native Image] guide."
msgstr "このファイルのフォーマットの詳細については、 link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/dynamic-features/Reflection/[ネイティブイメージにおけるGraalVMリフレクション] ガイドを参照してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"The final order of business is to make the configuration file known to the `native-image` executable.\n"
"To do that, place the configuration file under the `src/main/resources/META-INF/native-image/<group-id>/<artifact-id>` folder.\n"
"This way they will be automatically parsed by the native build, without additional configuration."
msgstr ""
"最後の作業として、設定ファイルを `native-image` 実行可能ファイルに認識させます。\n"
"そのためには、設定ファイルを `src/main/resources/META-INF/native-image/<group-id>/<artifact-id> フォルダーに配置します。\n"
"こうすることで、追加の設定なしでネイティブビルドによって自動的に解析されます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Registering for proxy"
msgstr "プロキシーの登録"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Analogous to `@RegisterForReflection`, you can use `@RegisterForProxy` to register interfaces for dynamic proxy:"
msgstr "`@RegisterForReflection` と同様に、`@RegisterForProxy` を使用して動的プロキシーのインターフェイスを登録できます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Note that `MyInterface` and all its super interfaces will be registered."
msgstr "`MyInterface` とそのすべてのスーパーインターフェイスが登録されることに注意してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Also, in case the interface is in a third-party jar, you can do it by using an empty class that will host the `@RegisterForProxy` for it."
msgstr "また、インターフェイスがサードパーティーの jar 内にある場合は、`@RegisterForProxy` をホストする空のクラスを使用して実行できます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Note that the order of the specified proxy interfaces is significant. For more information, see link:https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/reflect/Proxy.html[Proxy javadoc]."
msgstr "指定されたプロキシーインターフェイスの順序は重要であることに注意してください。詳細は、link:https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/reflect/Proxy.html[Proxy javadoc] を参照してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
#, fuzzy
msgid "Registering resource bundles and resource files"
msgstr "リソースバンドルとリソースファイルの登録"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
#, fuzzy
msgid "Resource bundles can be registered to be included in the native image by using `@RegisterResourceBundle`:"
msgstr "リソースバンドルは、 `@RegisterResourceBundle` を使用して、ネイティブイメージに含めるように登録できます："

#: _versions/3.27/guides/writing-native-applications-tips.adoc
#, fuzzy
msgid "Other resources files can be registered to be included in the native image by using `@RegisterResources`:"
msgstr "その他のリソースファイルは、 `@RegisterResources` を使って、ネイティブイメージに含まれるように登録することができます："

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Delaying class initialization"
msgstr "クラスの初期化を遅らせる"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "By default, Quarkus initializes all classes at build time."
msgstr "デフォルトでは、Quarkus はビルド時にすべてのクラスを初期化します。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"There are cases where the initialization of certain classes is done in a static block needs to be postponed to runtime.\n"
"Typically, omitting such configuration would result in a runtime exception like the following:"
msgstr "特定のクラスの初期化が静的ブロックで行われる場合、実行時に延期する必要がある場合があります。通常、このような設定を省略すると、以下のような実行時例外が発生します。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Another common source of errors is when the image heap taken by GraalVM contains a `Random`/`SplittableRandom` instance:"
msgstr "もう一つのよくあるエラーの原因は、GraalVMによって取得されたイメージヒープが `Random` / `SplittableRandom` インスタンスを含んでいる場合です。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"Which is more often than not caused by Quarkus initializing at build time a class with a static `Random`/`SplittableRandom` field,\n"
"causing this particular instance to be tentatively included in the image heap."
msgstr "これは、Quarkus がビルド時に静的な `Random`/`SplittableRandom` フィールドを持つクラスを初期化し、この特定のインスタンスがイメージヒープに一時的に含まれることが原因である場合がほとんどです。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "You can find detailed information about this `Random`/`SplittableRandom` issue in https://foivos.zakkak.net/tutorials/working-with-randoms-native-images/[this blog post]."
msgstr "この `Random`/`SplittableRandom` の問題については、 https://foivos.zakkak.net/tutorials/working-with-randoms-native-images/[このブログ記事] に詳細な情報があります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"In these cases, delaying the infringing class initialization at runtime might be the solution and, to achieve that,\n"
"you can use the `--initialize-at-run-time=<package or class>` configuration knob."
msgstr "これらの場合、実行時に違反しているクラスの初期化を遅らせることが解決策になる可能性があり、それを達成するには、 `--initialize-at-run-time=<package or class>` 設定ノブを使用できます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "It should be added to the `native-image` configuration using the `quarkus.native.additional-build-args` configuration property as shown in the examples above."
msgstr "上記の例のように、 `quarkus.native.additional-build-args` 設定プロパティーを使用して `native-image` 設定に追加する必要があります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "For more information, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[GraalVM Class Initialization in Native Image] guide."
msgstr "詳細については、 link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[ネイティブ・イメージにおけるGraalVMクラスの初期化] ガイドを参照してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"When multiple classes or packages need to be specified via the `quarkus.native.additional-build-args` configuration property, the `,` symbol needs to be escaped.\n"
"An example of this is the following:"
msgstr "`quarkus.native.additional-build-args` 設定プロパティーを介して複数のクラスやパッケージを指定する必要がある場合は、 `,` シンボルをエスケープする必要があります。その例を以下に示します。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "and in the case of using the Maven configuration instead of `application.properties`:"
msgstr "`application.properties` の代わりに Maven 設定を使用する場合。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Managing Proxy Classes"
msgstr "プロキシークラスの管理"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "While writing native application you'll need to define proxy classes at image build time by specifying the list of interfaces that they implement."
msgstr "ネイティブアプリケーションを書く際には、実装するインターフェースのリストを指定して、イメージのビルド時にプロキシークラスを定義する必要があります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "In such a situation, the error you might encounter is:"
msgstr "このような状況では、以下のようなエラーが発生します。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"To solve the issue you can create a `proxy-config.json` file under the `src/main/resources/META-INF/native-image/<group-id>/<artifact-id>` folder.\n"
"For more information about the format of the `proxy-config.json`, see the https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/metadata/#dynamic-proxy-metadata-in-json[Dynamic Proxy Metadata in JSON] documentation."
msgstr ""
"この問題を解決するには、`src/main/resources/META-INF/native-image/<group-id>/<artifact-id>` フォルダーの `proxy-config.json` ファイルを作成します。\n"
"`proxy-config.json` のフォーマットの詳細は、https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/metadata/#dynamic-proxy-metadata-in-json[Dynamic Proxy Metadata in JSON] ドキュメントを参照してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Alternatively, you can create a quarkus extension and register the proxy classes as described in <<managing-proxy-classes-extension>>."
msgstr "または、quarkus エクステンションを作成し、プロキシークラスを <<managing-proxy-classes-extension>> で説明されているように登録することもできます。。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Modularity Benefits"
msgstr "モジュール化のメリット"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"During native executable build time GraalVM analyses the application's call tree and generates a code-set that includes all the code it needs.\n"
"Having a modular codebase is key to avoiding problems with unused or optional parts of your application,\n"
"while at the same time reducing both native executable build times and size.\n"
"In this section you will learn about the details behind the benefits of modularity for native applications."
msgstr "ネイティブ実行可能ファイルのビルド時に、GraalVM はアプリケーションのコールツリーを分析し、必要なすべてのコードを含むコードセットを生成します。モジュラーコードベースを使用することは、アプリケーションの未使用部分またはオプション部分の問題を回避すると同時に、ネイティブ実行可能ファイルのビルド時間とサイズの両方を削減するための鍵となります。このセクションでは、ネイティブアプリケーションのモジュール化の利点の背後にある詳細について学習します。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"When code is not modular enough, generated native executables can end up with more code than what the user needs.\n"
"If a feature is not used and the code gets compiled into the native executable,\n"
"this is a waste of native compilation time and memory usage, as well as native executable disk space and starting heap size.\n"
"Even more problems arise when third party libraries or specialized API subsystems are used which cause native compilation or runtime errors,\n"
"and their use is not modularised enough.\n"
"A recent problem can be found in the JAXB library,\n"
"which is capable of deserializing XML files containing images using Java’s AWT APIs.\n"
"The vast majority of Quarkus XML users don’t need to deserialize images,\n"
"so there shouldn’t be a need for users applications to include Java AWT code,\n"
"unless they specifically configure Quarkus to add the JAXB AWT code to the native executable.\n"
"However, because JAXB code that uses AWT is in the same jar as the rest of the XML parsing code,\n"
"achieving this separation was rather complex and required the use of Java bytecode substitutions to get around it.\n"
"These substitutions are hard to maintain and can easily break, hence they should be one's last resort."
msgstr "コードが十分にモジュール化されていない場合、生成されたネイティブ実行可能ファイルには、ユーザーが必要とする以上のコードが含まれてしまうことがあります。機能が使用されず、コードがネイティブ実行可能ファイルにコンパイルされる場合、ネイティブコンパイル時間とメモリ使用量、さらにネイティブ実行可能ファイルのディスクスペースと起動ヒープサイズの無駄となります。さらに、ネイティブコンパイルやランタイムエラーを引き起こすサードパーティライブラリや特殊なAPIサブシステムが使用され、それらの使用が十分にモジュール化されていない場合には、さらに問題が発生します。最近の問題としては、JavaのAWT APIを使用して画像を含むXMLファイルをデシリアライズできるJAXBライブラリが挙げられます。Quarkus XMLユーザーの大半は画像をデシリアライズする必要がないため、ネイティブ実行可能ファイルにJAXB AWTコードを追加するようQuarkusを特別に設定しない限り、ユーザーアプリケーションにJava AWTコードを含める必要はないはずです。しかし、AWTを使用するJAXBコードは、残りのXMLパースコードと同じjarにあるため、この分離を達成するのはかなり複雑で、Javaバイトコード置換を使用して回避する必要がありました。このような置換はメンテナンスが難しく、簡単に壊れてしまうので、最後の手段であるべきです。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"A modular codebase is the best way to avoid these kind of issues.\n"
"Taking the JAXB/AWT problem above,\n"
"if the JAXB code that dealt with images was in a separate module or jar (e.g. `jaxb-images`),\n"
"then Quarkus could choose not to include that module unless the user specifically requested the need to serialize/deserialize XML files containing images at build time."
msgstr "モジュール式のコードベースは、この種の問題を回避するための最良の方法です。上記の JAXB/AWT の問題を考えると、イメージを扱う JAXB コードが別のモジュールまたは jar (例: `jaxb-images`) にあった場合、Quarkus は、構築時に画像を含むXMLファイルをシリアライズ/デシリアライズする必要があるとユーザーが特に要求しない限り、そのモジュールを含めないように選択することができます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"Another benefit of modular applications is that they can reduce the code-set that will need to get into the native executable.\n"
"The smaller the code-set, the faster the native executable builds will be and the smaller the native executable produced."
msgstr "モジュラーアプリケーションのもう 1 つの利点は、ネイティブ実行可能ファイルに組み込む必要があるコードセットを削減できることです。コードセットが小さいほど、ネイティブ実行可能ファイルのビルドが高速になり、生成されるネイティブ実行可能ファイルが小さくなります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"The key takeaway point here is the following:\n"
"Keeping optional features, particularly those that depend on third party libraries or API subsystems with a big footprint,\n"
"in separate modules is the best solution."
msgstr "ここで重要なポイントは次のとおりです。オプションの機能、特に大きなフットプリントを持つサードパーティーのライブラリーや API サブシステムに依存する機能は、別のモジュールに保持することが最善のソリューションです。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"How do I know if my application suffers from similar problems?\n"
"Aside from a deep study of the application,\n"
"finding usages of\n"
"https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.html[Maven optional dependencies]\n"
"is a clear indicator that your application might suffer from similar problems.\n"
"These type of dependencies should be avoided,\n"
"and instead code that interacts with optional dependencies should be moved into separate modules."
msgstr "アプリケーションに同様の問題があるかどうかを確認するにはどうすればよいですか? アプリケーションの詳細な調査は別として、 https://maven.apache.org/guides/introduction/introduction-to-optional-and-excludes-dependencies.htmlMaven のオプションの依存関係 の使用法を見つけることは、アプリケーションで同様の問題が発生する可能性があります。この種の依存関係は避けるべきであり、代わりに、オプションの依存関係と対話するコードは別のモジュールに移動する必要があります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Enforcing Singletons"
msgstr "シングルトンの強制"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"As already explained in the <<delay-class-init-in-your-app,delay class initialization>> section,\n"
"Quarkus marks all code to be initialized at build time by default.\n"
"This means that, unless marked otherwise,\n"
"static variables will be assigned at build time,\n"
"and static blocks will be executed at build time too."
msgstr "<<delay-class-init-in-your-app,delay class initialization>> セクションですでに説明したように、Quarkus はデフォルトでビルド時にすべてのコードを初期化するようマークします。つまり、特に指定がない限り、静的変数はビルド時に代入され、静的ブロックもビルド時に実行されます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"This can cause values in Java programs that would normally vary from one run to another,\n"
"to always return a constant value.\n"
"E.g. a static field that is assigned the value of `System.currentTimeMillis()`\n"
"will always return the same value when executed as a Quarkus native executable."
msgstr "これにより、通常は実行ごとに異なるJavaプログラムの値が、常に一定の値として返されるようになります。例えば、 `System.currentTimeMillis()` という値が割り当てられている静的フィールドは、Quarkus ネイティブ実行可能ファイルとして実行されると、常に同じ値を返します。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"Singletons that rely on static variable initialization will suffer similar problems.\n"
"For example, imagine you have a singleton based around static initialization along with a REST endpoint to query it:"
msgstr "静的変数の初期化に依存するシングルトンは、同様の問題に悩まされます。たとえば、クエリーを実行する REST エンドポイントと共に、静的初期化に基づくシングルトンがあるとします。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"When the `singletons/static` endpoint is queried,\n"
"it will always return the same value,\n"
"even after the application is restarted:"
msgstr " `singletons/static` のエンドポイントに問い合わせると、アプリケーションを再起動しても常に同じ値が返されます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Singletons that rely on `enum` classes are also affected by the same issue:"
msgstr "`enum` クラスに依存しているシングルトンも同じ問題の影響を受けます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"When the `singletons/enum` endpoint is queried,\n"
"it will always return the same value,\n"
"even after the application is restarted:"
msgstr "`singletons/enum` エンドポイントがクエリーされると、アプリケーションが再起動された後でも、常に同じ値が返されます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "One way to fix it is to build singletons using CDI's `@Singleton` annotation:"
msgstr "これを修正する 1 つの方法は、CDI の `@Singleton` アノテーションを使用してシングルトンを構築することです。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"After each restart,\n"
"querying `singletons/cdi` will return a different value,\n"
"just like it would in JVM mode:"
msgstr "再起動するたびに、 `singletons/cdi` をクエリすると、JVM モードと同じように、異なる値が返却されます:"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"An alternative way to enforce a singleton while relying static fields, or enums,\n"
"is to <<delay-class-init-in-your-app,delay its class initialization until run time>>.\n"
"The nice advantage of CDI-based singletons is that your class initialization is not constrained,\n"
"so you can freely decide whether it should be build-time or run-time initialized,\n"
"depending on your use case."
msgstr "静的フィールドや列挙型に依存しながらシングルトンを強制する別の方法は、<<delay-class-init-in-your-app,実行時までクラス初期化を遅延させる>> ことです。CDIベースのシングルトンの良い利点は、クラスの初期化が制約されないので、ユースケースに応じて、ビルド時または実行時に初期化されるべきかを自由に決定できることです。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Beware of common Java API overrides"
msgstr "よくある Java API オーバーライドの注意点"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"Certain commonly used Java methods are overridden by user classes,\n"
"e.g. `toString`, `equals`, `hashCode`...etc.\n"
"The majority of overrides do not cause problems,\n"
"but if they use third party libraries (e.g. for additional formatting),\n"
"or use dynamic language features (e.g. reflection or proxies),\n"
"they can cause native image build to fail.\n"
"Some of those failures might be solvable via configuration,\n"
"but others can be more tricky to handle."
msgstr "特定の一般的に使用される Java メソッドは、`toString`、`equals`、`hashCode` などのユーザークラスによってオーバーライドされます。オーバーライドの大部分は問題を引き起こしませんが、サードパーティーのライブラリー (追加の書式設定など) や動的言語機能 (リフレクションやプロキシーなど) を使用したりすると、ネイティブイメージのビルドが失敗する可能性があります。これらの障害の中には、設定によって解決できるものもありますが、処理がより難しいものもあります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid ""
"From a GraalVM points-to analysis perspective,\n"
"what happens in these method overrides matters,\n"
"even if the application does not explicitly call them.\n"
"This is because these methods are used throughout the JDK,\n"
"and all it takes is for one of those calls to be done on an unconstrained type,\n"
"e.g. `java.lang.Object`,\n"
"for the analysis to have to pull all implementations of that particular method."
msgstr "GraalVM ポイントツー分析の観点からは、アプリケーションが明示的に呼び出さなくても、これらのメソッドオーバーライドで何が起こるかが問題になります。これは、これらのメソッドが JDK 全体で使用されているためであり、これらの呼び出しの 1 つが制約のない型 (たとえば、 `java.lang.Object`) で実行されるだけで、分析でその特定のすべての実装をプルする必要があるためです。方法。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Supporting native in a Quarkus extension"
msgstr "Quarkus エクステンションでネイティブをサポートする"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Supporting native in a Quarkus extension is even easier as Quarkus provides a lot of tools to simplify all this."
msgstr "Quarkus のエクステンションでのネイティブのサポートは、Quarkus がこれらすべてを単純化するための多くのツールを提供しているため、さらに簡単になりました。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Everything described here will only work in the context of Quarkus extensions, it won't work in an application."
msgstr "ここで説明したことはすべて、Quarkus エクステンションのコンテキストでのみ機能し、アプリケーションでは機能しません。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Register reflection"
msgstr "リフレクションの登録"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Quarkus makes registration of reflection in an extension a breeze by using `ReflectiveClassBuildItem`, thus eliminating the need for a JSON configuration file."
msgstr "Quarkus では、 `ReflectiveClassBuildItem` を使用することで、エクステンションへのリフレクションの登録が簡単になり、JSON 設定ファイルが不要になります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "To register a class for reflection, one would need to create a Quarkus processor class and add a build step that registers reflection:"
msgstr "リフレクション用のクラスを登録するには、Quarkus プロセッサークラスを作成し、リフレクションを登録するビルドステップを追加する必要があります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "For more information about reflection in GraalVM, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/dynamic-features/Reflection/[GraalVM Reflection in Native Image] guide."
msgstr "GraalVMにおけるリフレクションの詳細については、 link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/dynamic-features/Reflection/[ネイティブイメージにおけるGraalVM リフレクション] ガイドを参照してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "In the context of an extension, Quarkus eliminates the need for a JSON configuration file by allowing extension authors to specify a `NativeImageResourceBuildItem`:"
msgstr "エクステンションのコンテキストでは、Quarkus は、エクステンションの作成者が `NativeImageResourceBuildItem` .NET Frameworkを指定できるようにすることで、JSON 設定ファイルの必要性を排除しています。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "For more information about GraalVM resource handling in native executables, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/dynamic-features/Resources/[GraalVM Accessing Resources in Native Image] guide."
msgstr "ネイティブ実行可能ファイルでのGraalVMリソースの取り扱いについては、 link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/dynamic-features/Resources/[ネイティブ・イメージでのGraalVMリソース・アクセス] ガイドを参照してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Delay class initialization"
msgstr "クラスの初期化を遅らせる"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Quarkus simplifies things by allowing extensions authors to simply register a `RuntimeInitializedClassBuildItem`. A simple example of doing so could be:"
msgstr "Quarkus では、エクステンションの作成者が簡単に `RuntimeInitializedClassBuildItem` を登録できるようにすることで、物事を簡素化しています。簡単な例としては、次のようなものが考えられます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Using such a construct means that a `--initialize-at-run-time` option will automatically be added to the `native-image` command line."
msgstr "このような構文を使用すると、 `--initialize-at-run-time` オプションが自動的に `native-image` コマンドラインに追加されることを意味します。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "For more information about the `--initialize-at-run-time` option, see the link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[GraalVM Class Initialization in Native Image] guide."
msgstr "`--initialize-at-run-time` オプションの詳細については、 link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/optimizations-and-performance/ClassInitialization/[ネイティブ・イメージにおけるGraalVMクラスの初期化] ガイドを参照してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Similarly, Quarkus allows extensions authors to register a `NativeImageProxyDefinitionBuildItem`. An example of doing so is:"
msgstr "同様に、Quarkus では拡張機能の作成者が `NativeImageProxyDefinitionBuildItem` を登録できます。その例は次のとおりです。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "This will allow Quarkus to generate the necessary configuration for handling the proxy class."
msgstr "これにより、Quarkus はプロキシークラスを処理するために必要な設定を生成できるようになります。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Alternatively, you may create a `proxy-config.json` as described in <<managing-proxy-classes-app>>."
msgstr "または、<<managing-proxy-classes-app>> で説明されているように `proxy-config.json` を作成することもできます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "In both cases the configuration will be automatically parsed by the native build, without additional configuration."
msgstr "どちらの場合も、追加の設定なしで、ネイティブビルドによって設定が自動的に解析されます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "For more information about using Proxy Classes in native executables, see https://www.graalvm.org/jdk21/reference-manual/native-image/dynamic-features/DynamicProxy/[Dynamic Proxy in Native Image] and https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/guides/configure-dynamic-proxies/[GraalVM Configure Dynamic Proxies Manually]."
msgstr "ネイティブ実行ファイルでのプロキシークラスの使用の詳細は、https://www.graalvm.org/jdk21/reference-manual/native-image/dynamic-features/DynamicProxy/[Dynamic Proxy in Native Image] および https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/guides/configure-dynamic-proxies/[GraalVM Configure Dynamic Proxies Manually] を参照してください。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "Logging with Native Image"
msgstr "ネイティブイメージでのロギング"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "If you are using dependencies that require logging components such as Apache Commons Logging or Log4j and are experiencing a `ClassNotFoundException` when building the native executable, you can resolve this by excluding the logging library and adding the corresponding JBoss Logging adapter."
msgstr "Apache Commons Logging や Log4j などのロギングコンポーネントを必要とする依存関係を使用していて、ネイティブ実行可能ファイルをビルドする際に `ClassNotFoundException` が発生する場合、ロギングライブラリーを除外し、対応する JBoss Logging アダプターを追加することで解決できます。"

#: _versions/3.27/guides/writing-native-applications-tips.adoc
msgid "For more details please refer to the xref:logging.adoc#logging-apis[Logging guide]."
msgstr "詳細は、xref:logging.adoc#logging-apis[ログ記録ガイド] を参照してください。"
