msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "AWS Lambda with Quarkus REST, Undertow, or Reactive Routes"
msgstr "Quarkus REST、Undertow、またはReactive Routesを使用したAWS Lambda"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"With Quarkus you can deploy your favorite Java HTTP frameworks as AWS Lambda's using either the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html[AWS Gateway HTTP API]\n"
"or https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html[AWS Gateway REST API].  This means that you can deploy your microservices written with Quarkus REST (our Jakarta REST implementation),\n"
"Undertow (servlet), Reactive Routes, xref:funqy-http.adoc[Funqy HTTP] or any other Quarkus HTTP framework as an AWS Lambda."
msgstr ""
"Quarkus を使用すると、 https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html[AWS Gateway HTTP API]  または https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html[AWS Gateway REST API]を使用して、\n"
"お気に入りの Java HTTP フレームワークを AWS Lambda としてデプロイできます。\n"
"これは、Quarkus REST(Jakarta REST 実装)、Undertow (サーブレット)、Reactive Routes、xref:funqy-http.adoc[Funqy HTTP]、または AWS Lambda としてのその他の Quarkus HTTP フレームワークで記述されたマイクロサービスをデプロイできることを意味します"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "You should only use single HTTP framework together with AWS Lambda extension to avoid unexpected conflicts and errors."
msgstr "予期しない競合やエラーを回避するには、AWS Lambda エクステンションと一緒に単一の HTTP フレームワークのみを使用する必要があります。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"You can deploy your Lambda as a pure Java jar, or you can compile your project to a native image and deploy that for a smaller\n"
"memory footprint and startup time.  Our integration also generates SAM deployment files that can be consumed by https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[Amazon's SAM framework]."
msgstr "Lambda を純粋な Java jar としてデプロイすることもできますし、プロジェクトをネイティブイメージにコンパイルしてデプロイすることで、より少ないメモリーフットプリントと起動時間を実現することもできます。また、統合により、 https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/what-is-sam.html[AmazonのSAM framework] で使用できるSAMデプロイメントファイルも生成されます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"Quarkus has a different extension for each Gateway API.  The HTTP Gateway API is implemented within the `quarkus-amazon-lambda-http` extension.\n"
"The REST Gateway API is implemented within the `quarkus-amazon-lambda-rest` extension.  If you are confused on which Gateway product to use,\n"
"Amazon has a https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html[great guide] to help you navigate this decision."
msgstr "Quarkusでは、ゲートウェイAPIごとに異なるエクステンションを用意しています。HTTP Gateway APIは、 `quarkus-amazon-lambda-http` のエクステンションで実装されています。REST Gateway APIは、 `quarkus-amazon-lambda-rest` のエクステンションで実装されています。どのGateway製品を使用すべきか迷っている場合は、Amazonが決断を助ける為に link:https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html[素晴らしいガイド]を提供しています。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Like most Quarkus extensions, the Quarkus AWS Lambda HTTP/REST extensions support Live Coding."
msgstr "Quarkus AWS Lambda HTTP/REST エクステンションは、大概の Quarkus エクステンションと同様、ライブコーディングをサポートしています。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "https://aws.amazon.com[An Amazon AWS account]"
msgstr "https://aws.amazon.com[Amazon AWS account]"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"
msgstr "https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install.html[AWS SAM CLI]"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Getting Started"
msgstr "はじめに"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"This guide walks you through generating an example Java project via a Maven archetype.  Later on, it walks through the structure\n"
"of the project so you can adapt any existing projects you have to use AWS Lambda."
msgstr ""
"このガイドでは、Maven アーキタイプを使用してサンプル Java プロジェクトを生成する手順を説明します。その後、プロジェクトの構造について説明しているため、\n"
"既存のプロジェクトを AWS Lambda を使用するように適応させることができます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Installing AWS bits"
msgstr "AWS ビットのインストール"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"Installing all the AWS bits is probably the most difficult thing about this guide.  Make sure that you follow all the steps\n"
"for installing AWS SAM CLI."
msgstr "AWSのすべてのツールをインストールすることは、おそらくこのガイドでは最も難しいことです。AWS CLIをインストールするためのすべての手順に従っていることを確認してください。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Creating the Maven Deployment Project"
msgstr "デプロイ用のMavenプロジェクトを作成する"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Create the Quarkus AWS Lambda Maven project using our Maven Archetype."
msgstr "Maven Archetype を使用して Quarkus AWS Lambda Maven プロジェクトを作成します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "If you want to use the AWS Gateway HTTP API, generate your project with this script:"
msgstr "AWS Gateway HTTP APIを使用する場合は、このスクリプトでプロジェクトを生成します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "If you want to use the AWS Gateway REST API, generate your project with this script:"
msgstr "AWS Gateway REST APIを使用する場合は、このスクリプトでプロジェクトを生成します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Build and Deploy"
msgstr "ビルドとデプロイ"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Build the project:"
msgstr "プロジェクトをビルドします。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"This will compile the code and run the unit tests included within the generated project.\n"
"Unit testing is the same as any other Java project and does not require running on Amazon.  Quarkus dev mode is also\n"
"available with this extension."
msgstr "これでコードがコンパイルされ、生成されたプロジェクト内に含まれるユニットテストが実行されます。ユニットテストは他のJavaプロジェクトと同じで、Amazonで実行する必要はありません。Quarkus dev モードもこのエクステンションで利用できます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"If you want to build a native executable, make sure you have GraalVM installed correctly and just add a `native` property\n"
"to the build"
msgstr "ネイティブ実行可能ファイルをビルドする場合は、GraalVM が正しくインストールされていることを確認し、ビルドに `native` プロパティーを追加してください。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"If you are building on a non-Linux system, you will need to also pass in a property instructing quarkus to use a Docker build as Amazon\n"
"Lambda requires Linux binaries.  You can do this by passing `-Dquarkus.native.container-build=true` to your build command.\n"
"This requires you to have Docker installed locally, however."
msgstr "Linux 以外のシステムでビルドしている場合は、Amazon Lambda が Linux バイナリーを必要とするため、Docker ビルドを使用するように Quarkus に指示するプロパティーも渡す必要があります。これを行うには、ビルドコマンドに `-Dquarkus.native.container-build=true` を渡します。ただし、これには Docker をローカルにインストールする必要があります。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"According to the https://docs.aws.amazon.com/linux/al2023/ug/system-requirements.html#system-requirements-cpu-x86-64[AWS documentation], AL2023\n"
"x86-64 binaries are built for the x86-64-**v2** revision of the x86-64 architecture.\n"
"In Quarkus, the default value of xref:building-native-image.adoc#quarkus-core_quarkus-native-march[quarkus.native.march] is x86-64-**v3**.\n"
"This could cause\n"
"https://repost.aws/questions/QUBVnl6hn-Toe1LPr1qjOXzg/lambda-failed-with-java-compiled-into-machine-code[issues] if AWS Lambda provisions older\n"
"hardware.\n"
"To maximize Lambda compatibility, you can set `quarkus.native.march` to `x86-64-v2`.\n"
"See the xref:native-reference.adoc#work-around-missing-cpu-features[Native Reference] guide for more information."
msgstr ""
"https://docs.aws.amazon.com/linux/al2023/ug/system-requirements.html#system-requirements-cpu-x86-64[AWS ドキュメント] によると、AL2023\n"
"x86-64 バイナリーは、x86-64 アーキテクチャーの x86-64-**v2** リビジョン用に構築されています。\n"
"Quarkus では、xref:building-native-image.adoc#quarkus-core_quarkus-native-march[quarkus.native.march] のデフォルト値は x86-64-**v3** です。\n"
"これが原因で、\n"
"https://repost.aws/questions/QUBVnl6hn-Toe1LPr1qjOXzg/lambda-failed-with-java-compiled-into-machine-code[issues] AWS Lambda が古いバージョンのハードウェア\n"
"をプロビジョニングする場合\n"
"Lambda の互換性を最大限に高めるには、 `quarkus.native.march` を `x86-64-v2` に設定できます。\n"
"詳細は、xref:native-reference.adoc#work-around-missing-cpu-features[ネイティブリファレンス] ガイドを参照してください。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Extra Build Generated Files"
msgstr "ビルド時に追加生成されるファイル"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"After you run the build, there are a few extra files generated by the Quarkus lambda extension you are using.  These files\n"
"are in the build directory:  `target/` for Maven, `build/` for Gradle."
msgstr "ビルドを実行すると、Quarkus lambda エクステンションで生成されるいくつかの追加ファイルがあります。これらのファイルはビルドディレクトリーにあります: Maven なら `target/`、Gradle なら `build/` です。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`function.zip` - lambda deployment file"
msgstr "`function.zip` - Lambda デプロイファイル"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`sam.jvm.yaml` - sam cli deployment script"
msgstr "`sam.jvm.yaml` - SAM CLI デプロイメントスクリプト"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`sam.native.yaml` - sam cli deployment script for native"
msgstr "`sam.native.yaml` - ネイティブ用の SAM CLI デプロイメントスクリプト"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Live Coding and Simulating AWS Lambda Environment Locally"
msgstr "AWS Lambda 環境のローカルでのライブコーディングとシミュレーション"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"In dev and test mode, Quarkus will start a mock AWS Lambda event server\n"
"that will convert HTTP requests to the corresponding API Gateway event types and post them to the underlying\n"
"Quarkus HTTP lambda environment for processing.  This simulates the AWS Lambda environment\n"
"as much as possible locally without requiring tools like Docker and SAM CLI."
msgstr "開発モードおよびテストモードでは、Quarkus は模擬 AWS Lambda イベントサーバーを起動し、対応する API Gateway イベントタイプに HTTP リクエストを変換し、処理のために基盤となる Quarkus HTTP Lambda 環境に送信します。これにより、Docker や SAM CLI などのツールを必要とせずに、AWS Lambda 環境を可能な限りローカルでシミュレートします。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"When using Quarkus Dev Mode just invoke HTTP requests on `http://localhost:8080`\n"
"as you normally would when testing your REST endpoints.  This request will hit the Mock Event Server and will\n"
"be converted to the API Gateway json message that is consumed by the Quarkus Lambda Poll loop."
msgstr "Quarkus Dev Mode を使用する場合は、REST エンドポイントをテストする場合と同じように、 `http://localhost:8080` で HTTP リクエストを呼び出すだけです。このリクエストは Mock Event Server にヒットし、Quarkus Lambda Poll ループによって消費される API Gateway json メッセージに変換されます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"For testing, Quarkus starts up a separate Mock Event server under port 8081.  The default port for Rest Assured is\n"
"automatically set to 8081 by Quarkus, so you don't have to worry about setting this up."
msgstr "テストのために、Quarkus はポート 8081 で別の Mock Event サーバーを起動します。Rest Assured のデフォルトポートは Quarkus によって自動的に 8081 に設定されるため、これを設定する必要はありません。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"If you want to simulate more complex\n"
"API Gateway events in your tests, then manually do an HTTP POST to `http://localhost:8080/\\_lambda_` (port 8081 in test mode) with\n"
"the raw API Gateway json events.  These events will be placed directly on the Quarkus Lambda poll loop\n"
"for processing.  Here's an example of that:"
msgstr "テストでより複雑な API Gateway イベントをシミュレートする場合は、生の API Gateway json イベントを使用して `http://localhost:8080/\\_lambda_` (テストモードではポート 8081) に対して手動で HTTP POST を実行します。これらのイベントは、処理のために Quarkus Lambda ポーリングループに直接配置されます。その例を次に示します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "The above example simulates sending a Cognito principal with an HTTP request to your HTTP Lambda."
msgstr "上記の例は、HTTP リクエストを含む Cognito プリンシパルを HTTP Lambda に送信することをシミュレートしています。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"If you want to hand code raw events for the AWS HTTP API, the AWS Lambda library has the request event type which is\n"
"`com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent` and the response event type\n"
"of `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPResponse`.  This corresponds\n"
"to the `quarkus-amazon-lambda-http` extension and the AWS HTTP API."
msgstr "AWS HTTP API の生のイベントをハンドコードする場合、AWS Lambda ライブラリーのリクエストイベントタイプは `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent` で、レスポンスイベントタイプは `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPResponse` です。これは、 `quarkus-amazon-lambda-http` エクステンションおよび AWS HTTP API に対応します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"If you want to hand code raw events for the AWS REST API, Quarkus has its own implementation:  `io.quarkus.amazon.lambda.http.model.AwsProxyRequest`\n"
"and `io.quarkus.amazon.lambda.http.model.AwsProxyResponse`.  This corresponds\n"
"to `quarkus-amazon-lambda-rest` extension and the AWS REST API."
msgstr "AWS REST API の生のイベントをハンドコードする場合、Quarkus には独自の実装 (`io.quarkus.amazon.lambda.http.model.AwsProxyRequest` および `io.quarkus.amazon.lambda.http.model.AwsProxyResponse`) があります。これは、 `quarkus-amazon-lambda-rest` エクステンションおよび AWS REST API に対応します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"The mock event server is also started for `@QuarkusIntegrationTest` tests so will work\n"
"with native binaries too.  All this provides similar functionality to the SAM CLI local testing, without the overhead of Docker."
msgstr "モックイベントサーバは `@QuarkusIntegrationTest` のテストでも起動されるので、ネイティブバイナリでも動作します。このように、SAM CLI のローカルテストと同様の機能を、Docker のオーバーヘッドなしに提供します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"Finally, if port 8080 or port 8081 is not available on your computer, you can modify the dev\n"
"and test mode ports with application.properties"
msgstr "最後に、ポート 8080 またはポート 8081 がコンピューターで使用できない場合は、application.properties を使用して開発モードとテストモードのポートを変更できます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "A port value of zero will result in a randomly assigned port."
msgstr "ポート値がゼロの場合、ポートはランダムに割り当てられます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "To turn off the mock event server:"
msgstr "モック・イベント・サーバーをオフにする方法:"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Simulate AWS Lambda Deployment with SAM CLI"
msgstr "SAM CLI を使用した AWS Lambda デプロイメントのシミュレート"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"The AWS SAM CLI allows you to run your lambda's locally on your laptop in a simulated Lambda environment.  This requires Docker to be installed.\n"
"After you have built your Maven project, execute this command:"
msgstr "AWS SAM CLI を使用すると、ラップトップ上で Lambda をシミュレートした環境でローカルに実行することができます。このためには Docker をインストールする必要があります。Maven プロジェクトをビルドした後、以下のコマンドを実行してください"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"This will start a Docker container that mimics Amazon's Lambda's deployment environment. Once the environment\n"
"is started you can invoke the example lambda in your browser by going to:"
msgstr "これで Amazon の Lambda のデプロイ環境を模した Docker コンテナーが起動します。環境が起動したら、ブラウザで以下を開くとサンプルの Lambda を実行できます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "http://127.0.0.1:3000/hello"
msgstr "http://127.0.0.1:3000/hello"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"In the console you'll see startup messages from the lambda.  This particular deployment starts a JVM and loads your\n"
"lambda as pure Java."
msgstr "コンソールには、ラムダからの起動メッセージが表示されます。この特定のデプロイメントでは、JVM を起動し、純粋な Java として Lambda をロードします。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Deploy to AWS"
msgstr "AWS にデプロイする"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"Answer all the questions and your lambda will be deployed and the necessary hooks to the API Gateway will be set up. If\n"
"everything deploys successfully, the root URL of your microservice will be output to the console.  Something like this:"
msgstr "すべての質問に答えると、 Lambda がデプロイされ、API Gatewayへの必要なフックが設定されます。すべてが正常にデプロイされると、マイクロサービスのルート URL がコンソールに出力されます。このような感じです。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"Key                 LambdaHttpApi\n"
"Description         URL for application\n"
"Value               https://234asdf234as.execute-api.us-east-1.amazonaws.com/"
msgstr ""

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "The `Value` attribute is the root URL for your lambda. Copy it to your browser and add `hello` at the end."
msgstr "`Value` 属性は Lambda のルート URL です。これをブラウザにコピーして、最後に `hello` を追加します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"Responses for binary types will be automatically encoded with base64.  This is different from the behavior using\n"
"`quarkus:dev` which will return the raw bytes.  Amazon's API has additional restrictions requiring the base64 encoding.\n"
"In general, client code will automatically handle this encoding but in certain custom situations, you should be aware\n"
"you may need to manually manage that encoding."
msgstr "バイナリー型のレスポンスは自動的にbase64でエンコードされます。これは、生のバイトを返す `quarkus:dev` を使用した動作とは異なります。Amazon の API には、base64 エンコーディングを必要とする追加の制限があります。一般的に、クライアントコードは自動的にこのエンコーディングを処理しますが、特定のカスタムな状況では、手動でエンコーディングを管理する必要があるかもしれないことを認識しておく必要があります。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Deploying a native executable"
msgstr "ネイティブ実行可能ファイルのデプロイ"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "To deploy a native executable, you must build it with GraalVM."
msgstr "ネイティブ実行可能ファイルをデプロイするには、GraalVM を使用してビルドする必要があります。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "You can then test the executable locally with sam local"
msgstr "その後、ローカルで sam local を使って実行可能ファイルをテストすることができます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "To deploy to AWS Lambda:"
msgstr "AWS Lambda へのデプロイ"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Examine the POM"
msgstr "POM を調べる"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"There is nothing special about the POM other than the inclusion of the `quarkus-amazon-lambda-http` extension\n"
"(if you are deploying an AWS Gateway HTTP API) or the `quarkus-amazon-lambda-rest` extension (if you are deploying an AWS Gateway REST API).\n"
"These extensions automatically generate everything you might need for your lambda deployment."
msgstr "POM には `quarkus-amazon-lambda-http` エクステンション(AWS Gateway HTTP APIでデプロイしている場合) か `quarkus-amazon-lambda-rest` エクステンション( AWS Gateway REST APIでデプロイしている場合)が依存関係として含まれている以外に特別なことは何もありません。これらのエクステンションは Lambda のデプロイに必要なものをすべて自動的に生成します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"Also, at least in the generated Maven archetype `pom.xml`, the `quarkus-rest`, `quarkus-reactive-routes`, and `quarkus-undertow`\n"
"dependencies are all optional.  Pick which HTTP framework(s) you want to use (Jakarta REST, Reactive Routes, and/or Servlet) and\n"
"remove the other dependencies to shrink your deployment."
msgstr ""
"また、少なくとも生成された Maven アーキタイプ `pom.xml` では、 `quarkus-rest`、 `quarkus-reactive-routes`、 `quarkus-undertow`\n"
"依存関係はすべてオプションです。使用する HTTP フレームワーク (Jakarta REST、Reactive Routes、Servlet) を選択し、\n"
"デプロイメントを縮小するには、他の依存関係を削除します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Examine sam.yaml"
msgstr "sam.yaml を調べる"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"The `sam.yaml` syntax is beyond the scope of this document.  There's a couple of things that must be highlighted just in case you are\n"
"going to craft your own custom `sam.yaml` deployment files."
msgstr "`sam.yaml` の構文はこのドキュメントの範囲を超えています。しかし、カスタムの `sam.yaml` デプロイメントファイルを作成しようとしている場合、幾つかの強調しなければならないことがあります。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"The first thing to note is that for pure Java lambda deployments require a specific handler class.\n"
"Do not change the Lambda handler name."
msgstr "最初に注意することは、純粋なJavaラムダデプロイメントには特定のハンドラークラスが必要であるということです。 Lambdaハンドラー名は変更しないでください。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "This handler is a bridge between the lambda runtime and the Quarkus HTTP framework you are using (Jakarta REST, Servlet, etc.)"
msgstr "このハンドラは、lambdaランタイムと使用しているQuarkus HTTPフレームワーク（Jakarta REST、Servletなど）の間のブリッジとなります。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"If you want to go native, there's an environment variable that must be set for native GraalVM deployments.  If you look at `sam.native.yaml`\n"
"you'll see this:"
msgstr "ネイティブを利用する場合は、ネイティブのGraalVMデプロイメント用に設定する必要のある環境変数があります。 `sam.native.yaml` を見ると、次のことがわかります。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "This environment variable resolves some incompatibilities between Quarkus and the AWS Lambda Custom Runtime environment."
msgstr "この環境変数は、Quarkus と AWS Lambda カスタムランタイム環境間で互換性が保てない問題について解決します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"Finally, there is one specific thing for AWS Gateway REST API deployments.\n"
"That API assumes that HTTP response bodies are text unless you explicitly tell it which media types are\n"
"binary through configuration.  To make things easier, the Quarkus extension forces a binary (base 64) encoding of all\n"
"HTTP response messages and the `sam.yaml` file must configure the API Gateway to assume all media types are binary:"
msgstr "最後に、AWS Gateway RESTAPIへのデプロイに固有のことが一つあります。そのAPIは、設定でどのメディアタイプがバイナリーであるかを明示的に指定しない限り、HTTPレスポンスボディはテキストであることを想定しています。より簡単にするために、QuarkusエクステンションはすべてのHTTP応答メッセージのバイナリー(ベース64)エンコーディングを強制します。 `sam.yaml` ファイルでは、すべてのメディアタイプがバイナリーであると仮定するようにAPI Gatewayを設定する必要があります。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Injectable AWS Context Variables"
msgstr "注入可能なAWSコンテキスト変数"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"If you are using Quarkus REST and Jakarta REST, you can inject various AWS Context variables into your Jakarta REST resource classes\n"
"using the Jakarta REST `@Context` annotation or anywhere else with the CDI `@Inject` annotation."
msgstr ""
"Quarkus REST と Jakarta REST を使用している場合、Jakarta REST `@Context` アノテーションを使用して Jakarta REST リソースクラスに、\n"
"CDI `@Inject` アノテーションを使用して他の場所にさまざまな AWS Context 変数を注入できます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"For the AWS HTTP API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and\n"
"`com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent`.  Here is an example:"
msgstr "AWS HTTP APIでは、AWS変数 `com.amazonaws.services.lambda.runtime.Context` および `com.amazonaws.services.lambda.runtime.events.APIGatewayV2HTTPEvent` を注入することができます。以下はその例です。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"For the AWS REST API you can inject the AWS variables `com.amazonaws.services.lambda.runtime.Context` and\n"
"`io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext`.  Here is an example:"
msgstr "AWS REST APIでは、AWS変数 `com.amazonaws.services.lambda.runtime.Context` と `io.quarkus.amazon.lambda.http.model.AwsProxyRequestContext` を注入することができます。以下はその例です。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Tracing with AWS XRay and GraalVM"
msgstr "AWS XRay および GraalVM を使用したトレース"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"If you are building native images, and want to use https://aws.amazon.com/xray[AWS X-Ray Tracing] with your lambda\n"
"you will need to include `quarkus-amazon-lambda-xray` as a dependency in your pom.  The AWS X-Ray\n"
"library is not fully compatible with GraalVM, so we had to do some integration work to make this work."
msgstr "ネイティブイメージをビルドしていて、Lambda で link:https://aws.amazon.com/xray[AWS X-Ray Tracing] を使いたい場合は、 `quarkus-amazon-lambda-xray` を依存関係として pom に含める必要があります。AWS X-Ray ライブラリは GraalVM との完全な互換性がないため、これを動作させるためにいくつかの統合作業をしなければなりませんでした。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Security Integration"
msgstr "セキュリティー統合"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"When you invoke an HTTP request on the API Gateway, the Gateway turns that HTTP request into a JSON event document that is\n"
"forwarded to a Quarkus Lambda.  The Quarkus Lambda parses this json and converts in into an internal representation of an HTTP\n"
"request that can be consumed by any HTTP framework Quarkus supports (Jakarta REST, servlet, Reactive Routes)."
msgstr "API GatewayでHTTPリクエストを呼び出すと、GatewayはそのHTTPリクエストをJSONイベントドキュメントに変換し、Quarkus Lambdaに転送されます。Quarkus LambdaはこのJSONを解析し、QuarkusがサポートするあらゆるHTTPフレームワーク（Jakarta REST、サーブレット、Reactive Routes）で使用できるHTTPリクエストの内部表現に変換します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"API Gateway supports many ways to securely invoke on your HTTP endpoints that are backed by Lambda and Quarkus.\n"
"If you enable it, Quarkus will automatically parse relevant parts of the https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html[event json document]\n"
"and look for security based metadata and register a `java.security.Principal` internally that can be looked up in Jakarta REST\n"
"by injecting a `jakarta.ws.rs.core.SecurityContext`, via `HttpServletRequest.getUserPrincipal()` in servlet, and `RouteContext.user()` in Reactive Routes.\n"
"If you want more security information, the `Principal` object can be typecast to\n"
"a class that will give you more information."
msgstr ""
"API Gateway は、Lambda および Quarkus がサポートする HTTP エンドポイントで安全に呼び出すためのさまざまな方法をサポートしています。\n"
"これを有効にすると、Quarkus は https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-lambda.html[event json document] の関連部分を自動的に解析して、セキュリティーベースのメタデータを検索し、\n"
"サーブレットの `HttpServletRequest.getUserPrincipal()` および Reactive Routes の `RouteContext.user()` を介して `javax.ws.rs.core.SecurityContext` を挿入することにより、Quarkus REST で検索できる `jakarta.security.Principal` \n"
"を内部的に登録します。\n"
"より多くのセキュリティー情報が必要な場合は、\n"
"`Principal` オブジェクトをクラスに型キャストしてより多くの情報を提供できます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "To enable this security feature, add this to your `application.properties` file:"
msgstr "このセキュリティー機能を有効にするには、これを `application.properties` ファイルに追加します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "quarkus.lambda-http.enable-security=true"
msgstr "quarkus.lambda-http.enable-security=true"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Here's how its mapped:"
msgstr "マッピング方法は次のとおりです。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "HTTP `quarkus-amazon-lambda-http`"
msgstr "HTTP `quarkus-amazon-lambda-http`"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Auth Type"
msgstr "認証タイプ"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Principal Class"
msgstr "プリンシパルクラス"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Json path of Principal Name"
msgstr "プリンシパル名の Json パス"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Cognito JWT"
msgstr "Cognito JWT"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`io.quarkus.amazon.lambda.http.CognitoPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.CognitoPrincipal`"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`requestContext.authorizer.jwt.claims.cognito:username`"
msgstr "`requestContext.authorizer.jwt.claims.cognito:username`"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "IAM"
msgstr "IAM"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`io.quarkus.amazon.lambda.http.IAMPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.IAMPrincipal`"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`requestContext.authorizer.iam.userId`"
msgstr "`requestContext.authorizer.iam.userId`"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Custom Lambda"
msgstr "カスタム Lambda"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`io.quarkus.amazon.lambda.http.CustomPrincipal`"
msgstr "`io.quarkus.amazon.lambda.http.CustomPrincipal`"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`requestContext.authorizer.lambda.principalId`"
msgstr "`requestContext.authorizer.lambda.principalId`"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "REST `quarkus-amazon-lambda-rest`"
msgstr "REST `quarkus-amazon-lambda-rest`"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Cognito"
msgstr "Cognito"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`requestContext.authorizer.claims.cognito:username`"
msgstr "`requestContext.authorizer.claims.cognito:username`"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`requestContext.identity.user`"
msgstr "`requestContext.identity.user`"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "`requestContext.authorizer.principalId`"
msgstr "`requestContext.authorizer.principalId`"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"If the `cognito:groups` claim is present, then Quarkus will extract and map those groups\n"
"to Quarkus roles which can then be used in authorization with annotations like `@RolesAllowed`.\n"
"If you do not want to map `cognito:groups` to Quarkus roles, then you must explicitly disable it\n"
"in configuration:"
msgstr "`cognito:groups` が存在する場合、Quarkus はこれらのグループを抽出して Quarkus のロールにマッピングし、 `@RolesAllowed` のようなアノテーションを使用して認証に使用することができます。 `cognito:groups` をQuarkusのロールにマッピングしたくない場合は、設定で明示的に無効にする必要があります:"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "quarkus.lambda-http.map-cognito-to-roles=false"
msgstr "quarkus.lambda-http.map-cognito-to-roles=false"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "You can also specify a different Cognito claim to extract roles from:"
msgstr "また、ロールを抽出するために、別のCognitoクレームを指定することもできます:"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "quarkus.lambda-http.cognito-role-claim=cognito:roles"
msgstr "quarkus.lambda-http.cognito-role-claim=cognito:roles"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"By default, it expects roles in a space delimited list enclosed in brackets i.e. `[ user admin ]`.\n"
"You can specify the regular expression to use to find individual roles in the claim string too:"
msgstr "デフォルトでは、ロールが括弧で囲んだスペース区切りのリスト（例： `[ user admin ]` ）に入っていることを想定しています。クレーム文字列から個々のロールを検索するために使用する正規表現を指定することも可能です:"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "quarkus.lambda-http.cognito-claim-matcher=[^\\[\\] \\t]+"
msgstr "quarkus.lambda-http.cognito-claim-matcher=[^\\[\\] \\\t]+"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Custom Security Integration"
msgstr "カスタムセキュリティーの統合"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"The default support for AWS security only maps the principal name to Quarkus security\n"
"APIs and does nothing to map claims or roles or permissions.  You have full control on\n"
"how security metadata in the lambda HTTP event is mapped to Quarkus Security APIs using\n"
"implementations of the `io.quarkus.amazon.lambda.http.LambdaIdentityProvider`\n"
"interface.  By implementing this interface, you can do things like define role mappings for your principal\n"
"or publish additional attributes provided by IAM or Cognito or your Custom Lambda security integration."
msgstr "AWSセキュリティのデフォルトサポートは、プリンシパル名をQuarkusセキュリティAPIにマッピングするだけで、クレームやロール、パーミッションのマッピングは何も行いません。 `io.quarkus.amazon.lambda.http.LambdaIdentityProvider` インターフェースの実装を使用して、ラムダHTTPイベントのセキュリティメタデータがQuarkus Security APIにマッピングされる方法を完全に制御することができます。このインターフェースを実装することで、プリンシパルのロールマッピングを定義したり、IAMやCognito、カスタムLambdaセキュリティ統合によって提供される追加属性を公開したりすることができます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"For HTTP, the important method to override is `LambdaIdentityProvider.authenticate(APIGatewayV2HTTPEvent event)`.  From this\n"
"you will allocate a SecurityIdentity based on how you want to map security data from `APIGatewayV2HTTPEvent`"
msgstr "HTTP の場合、オーバーライドする重要なメソッドは `LambdaIdentityProvider.authenticate(APIGatewayV2HTTPEvent event)` です。ここで、 `APIGatewayV2HTTPEvent` からセキュリティーデータをマッピングする方法に基づいて SecurityIdentity を割り当てます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"For REST, the important method to override is `LambdaIdentityProvider.authenticate(AwsProxyRequest event)`.  From this\n"
"you will allocate a SecurityIdentity based on how you want to map security data from `AwsProxyRequest`."
msgstr "REST の場合、オーバーライドする重要なメソッドは `LambdaIdentityProvider.authenticate(AwsProxyRequest event)` です。ここで、 `AwsProxyRequest` からセキュリティーデータをマップする方法に基づいて SecurityIdentity を割り当てます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Your implemented provider must be a CDI bean.  Here's an example:"
msgstr "実装するプロバイダーは CDI Bean である必要があります。次に例を示します。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Here's the same example, but with the AWS Gateway REST API:"
msgstr "次も同じ例ですが、AWS Gateway REST API を使用しています。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"Quarkus should automatically discover this implementation and use it instead of the default implementation\n"
"discussed earlier."
msgstr "Quarkus は、この実装を自動的に検出し、前述のデフォルトの実装の代わりに使用する必要があります。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "Simple SAM Local Principal"
msgstr "単純な SAM ローカルプリンシパル"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid ""
"If you are testing your application with `sam local` you can\n"
"hardcode a principal name to use when your application runs by setting\n"
"the `QUARKUS_AWS_LAMBDA_FORCE_USER_NAME` environment variable"
msgstr "`sam local` を使用してアプリケーションをテストしている場合は、 `QUARKUS_AWS_LAMBDA_FORCE_USER_NAME` 環境変数を設定することで、アプリケーションの実行時に使用するプリンシパル名をハードコーディングできます。"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "SnapStart"
msgstr "SnapStart"

#: _versions/3.27/guides/aws-lambda-http.adoc
msgid "To optimize your application for Lambda SnapStart, check xref:aws-lambda-snapstart.adoc[the SnapStart Configuration Documentation]."
msgstr "アプリケーションをLambda SnapStartに最適化するには、 xref:aws-lambda-snapstart.adoc[SnapStart構成ドキュメント] を参照してください。"
