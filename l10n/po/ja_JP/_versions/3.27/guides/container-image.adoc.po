msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/container-image.adoc
msgid "Container Images"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Quarkus provides extensions for building (and pushing) container images. Currently, it supports:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "<<#jib,Jib>>"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "<<#docker,Docker>>"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "<<#podman,Podman>>"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "<<#openshift,OpenShift>>"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "<<#buildpack,Buildpack>>"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Container Image extensions"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Jib"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid ""
"The extension `quarkus-container-image-jib` is powered by https://github.com/GoogleContainerTools/jib[Jib] for performing container image builds.\n"
"The major benefit of using Jib with Quarkus is that all the dependencies (everything found under `target/lib`) are cached in a different layer than the actual application making rebuilds really fast and small (when it comes to pushing).\n"
"Another important benefit of using this extension is that it provides the ability to create a container image without having to have any dedicated client side tooling (like Docker) or running daemon processes (like the Docker daemon)\n"
"when all that is needed is the ability to push to a container image registry."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "To use this feature, add the following extension to your project:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid ""
"In situations where all that is needed to build a container image and no push to a registry is necessary (essentially by having set `quarkus.container-image.build=true` and left `quarkus.container-image.push` unset - it defaults to `false`), then this extension creates a container image and registers\n"
"it with the Docker daemon. This means that although Docker isn't used to build the image, it is nevertheless necessary. Also note that using this mode, the built container image *will*\n"
"show up when executing `docker images`."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Including extra files"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid ""
"There are cases when additional files (other than ones produced by the Quarkus build) need to be added to a container image.\n"
"To support these cases, Quarkus copies any file under `src/main/jib` into the built container image (which is essentially the same\n"
"idea that the Jib Maven and Gradle plugins support).\n"
"For example, the presence of `src/main/jib/foo/bar` would result in  `/foo/bar` being added into the container filesystem."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "JVM Debugging"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "There are cases where the built container image may need to have Java debugging conditionally enabled at runtime."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid ""
"When the base image has not been changed (and therefore `ubi9/openjdk-17-runtime`, or `ubi9/openjdk-21-runtime` is used), then the `quarkus.jib.jvm-additional-arguments` configuration property can be used in order to\n"
"make the JVM listen on the debug port at startup."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "The exact configuration is:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Other base images might provide launch scripts that enable debugging when an environment variable is set, in which case you would set than environment variable when launching the container."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Custom Entrypoint"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "The `quarkus.jib.jvm-entrypoint` configuration property can be used to completely override the container entry point and can thus be used to either hard code the JVM debug configuration or point to a script that handles the details."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "For example, if the base images `ubi9/openjdk-17-runtime` or  `ubi9/openjdk-21-runtime` are used to build the container, the entry point can be hard-coded on the application properties file."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Example application.properties"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Or a custom start-up script can be created and referenced on the properties file. This approach works better if there's a need to set application params using environment variables:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Example src/main/jib/home/jboss/run-java.sh"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "`/home/jboss` is the WORKDIR for all quarkus binaries in the base images `ubi9/openjdk-17-runtime` and `ubi9/openjdk-21-runtime` (https://catalog.redhat.com/software/containers/ubi9/openjdk-21-runtime/6501ce769a0d86945c422d5f?container-tabs=dockerfile[Dockerfile for ubi9/openjdk-17-runtime, window=\"_blank\"])"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Multi-module projects and layering"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid ""
"When building a multi-module project containing a Quarkus application as one module and various supporting project dependencies as other modules,\n"
"Quarkus supports placing these supporting modules in a separate container image layer from the rest of the application dependencies, with the expectation\n"
"that these supporting modules will change more frequently than the regular application dependencies - thus making a rebuild faster if the\n"
"application dependencies have not changed."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid ""
"To enable this feature, the property `quarkus.bootstrap.workspace-discovery` needs to be set to `true` either as a system property\n"
"when invoking the build tool, either as a build tool property. Setting this property in `application.properties` will **not** work because\n"
"this property needs to be known very early on in the build process."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "AppCDS"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid ""
"Quarkus supports generating and including an link:https://docs.oracle.com/en/java/javase/17/docs/specs/man/java.html#application-class-data-sharing[Application Class Data Sharing] archive when generating a container image using Jib.\n"
"See the xref:appcds.adoc[AppCDS documentation] for more details."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Docker"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "The extension `quarkus-container-image-docker` is using the Docker binary and the generated Dockerfiles under `src/main/docker` in order to perform Docker builds."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "To use this feature, add the following extension to your project."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "The `quarkus-container-image-docker` extension is capable of https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images/[creating multi-platform (or multi-arch)] images using https://docs.docker.com/engine/reference/commandline/buildx_build/[`docker buildx build`]. See the `quarkus.docker.buildx.*` configuration items in the <<#DockerOptions,Docker Options>> section below."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "`docker buildx build` ONLY supports https://docs.docker.com/engine/reference/commandline/buildx_build/#load[loading the result of a build] to `docker images` when building for a single platform. Therefore, if you specify more than one argument in the `quarkus.docker.buildx.platform` property, the resulting images will not be loaded into `docker images`. If `quarkus.docker.buildx.platform` is omitted or if only a single platform is specified, it will then be loaded into `docker images`."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "This means that if you want to build images for more than one platform at a time (i.e. `quarkus.docker.buildx.platform=linux/amd64,linux/arm64`), you need to push the images (`quarkus.container-image.push=true`) directly as part of the build process. Docker buildx does not support loading into the local registry when building multi-platform images."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Podman"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "The extension `quarkus-container-image-podman` uses https://podman.io/[Podman] and the generated `Dockerfiles` under `src/main/docker` in order to perform container builds."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "When to use Docker vs Podman extension"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "The <<#docker,Docker extension>> is and has always been backwards-compatible with Podman because Podman exposes a https://podman.io/docs/installation[Docker-compatible API]. You can build container images with Podman using the Docker extension (see the https://quarkus.io/guides/podman[Using Podman with Quarkus guide])."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Use either the `quarkus-container-image-docker` or `quarkus-container-image-podman` extension when doing things specific to either Docker or Podman, respectively."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "For example, building multi-platform images is implemented differently for Docker and Podman. Docker uses https://docs.docker.com/engine/reference/commandline/buildx_build/[the buildx plugin] whereas Podman can build multi-platform images https://docs.podman.io/en/latest/markdown/podman-build.1.html#platform-os-arch-variant[natively]. Because of this, you would need to use the specific extension to perform that function."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "OpenShift"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
#, fuzzy
msgid ""
"The extension `quarkus-container-image-openshift` is using OpenShift binary builds in order to perform container builds inside the OpenShift cluster.\n"
"The idea behind the binary build is that you just upload the artifact and its dependencies to the cluster and during the build they will be merged to a builder image (defaults to `ubi9/openjdk-17` or `ubi9/openjdk-21`)."
msgstr "`quarkus-container-image-openshift` という拡張は、OpenShift クラスタ内でコンテナのビルドを実行するために OpenShift のバイナリビルドを使用しています。バイナリビルドの背後にある考え方は、アーティファクトとその依存関係をクラスタにアップロードするだけで、ビルド中にそれらがビルダーイメージ（デフォルトは `ubi9/openjdk-17` または `ubi9/openjdk-21` ）にマージされるということです。"

#: _versions/3.27/guides/container-image.adoc
msgid "The benefit of this approach, is that it can be combined with OpenShift's `DeploymentConfig` that makes it easy to roll out changes to the cluster."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid ""
"OpenShift builds require creating a `BuildConfig` and two `ImageStream` resources, one for the builder image and one for the output image.\n"
"The creation of such objects is being taken care of by the Quarkus Kubernetes extension."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Buildpack"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid ""
"The extension `quarkus-container-image-buildpack` is using buildpacks in order to perform container image builds.\n"
"Under the hood buildpacks will use a Docker daemon for the actual build.\n"
"While buildpacks support alternatives to Docker, this extension will only work with Docker."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Additionally, the user will have to configure which build image to use (no default image is provided). For example:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "or for native:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "When using the buildpack container image extension it is strongly advised to avoid adding `quarkus.container-image.build=true` in your properties configuration as it might trigger nesting builds within builds. It's preferable to pass it as an option to the build command instead."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Building"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "To build a container image for your project, `quarkus.container-image.build=true` needs to be set using any of the ways that Quarkus supports."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "If you ever want to build a native container image and already have an existing native image you can set `-Dquarkus.native.reuse-existing=true` and the native image build will not be re-run."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Using @QuarkusIntegrationTest"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "To run tests on the resulting image, `quarkus.container-image.build=true` needs to be set using any of the ways that Quarkus supports."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Maven"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Gradle"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Pushing"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "To push a container image for your project, `quarkus.container-image.push=true` needs to be set using any of the ways that Quarkus supports."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "If no registry is set (using `quarkus.container-image.registry`) then `docker.io` will be used as the default."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Selecting among multiple extensions"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "It does not make sense to use multiple extension as part of the same build. When multiple container image extensions are present, an error will be raised to inform the user. The user can either remove the unneeded extensions or select one using `application.properties`."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "For example, if both `container-image-docker` and `container-image-podman` are present and the user needs to use `container-image-docker`:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Integrating with `systemd-notify`"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "If you are building a container image in order to deploy your Quarkus application as a Linux service with Podman and Systemd, you might want to consider including the https://docs.quarkiverse.io/quarkus-systemd-notify/dev/index.html[Quarkus Systemd Notify Extension] as part of your application, with:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Customizing"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "The following properties can be used to customize the container image build process."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Container Image Options"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Using CI Environments"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid ""
"Various CI environments provide a ready to use container-image registry which can be combined with the container-image Quarkus extensions in order to\n"
"effortlessly create and push a Quarkus application to said registry."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid ""
"For example, https://gitlab.com/[GitLab] provides such a registry and in the provided CI environment,\n"
"makes available the `CI_REGISTRY_IMAGE` environment variable\n"
"(see GitLab's https://docs.gitlab.com/ee/ci/variables/[documentation]) for more information), which can be used in Quarkus like so:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "See xref:config-reference.adoc#with-environment-variables[this] for more information on how to combine properties with environment variables."
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Jib Options"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "In addition to the generic container image options, the `container-image-jib` also provides the following options:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Docker Options"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "In addition to the generic container image options, the `container-image-docker` also provides the following options:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-2\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "Podman Options"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "In addition to the generic container image options, the `container-image-podman` also provides the following options:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-3\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "OpenShift  Options"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "In addition to the generic container image options, the `container-image-openshift` also provides the following options:"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-4\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/container-image.adoc
#, fuzzy
msgid "Buildpack Options"
msgstr "ビルドパックオプション"

#: _versions/3.27/guides/container-image.adoc
#, fuzzy
msgid "In addition to the generic container image options, the `container-image-buildpack` also provides the following options:"
msgstr "一般的なコンテナ・イメージ・オプションに加えて、 `container-image-buildpack` には以下のオプションもあります："

#: _versions/3.27/guides/container-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-5\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
