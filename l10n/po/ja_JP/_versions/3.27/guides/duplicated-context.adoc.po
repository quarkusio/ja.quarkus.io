msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Duplicated context, context locals, asynchronous processing and propagation"
msgstr "コンテキストの重複、コンテキストローカル、非同期処理と伝播"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"When using a traditional, blocking, and synchronous framework, processing of each request is performed in a dedicated thread.\n"
"So, the same thread is used for the entire processing.\n"
"You know that this thread will not be used to execute anything else until the completion of the processing.\n"
"When you need to propagate data along the processing, such as the security principal or a trace id, you can use `ThreadLocals`.\n"
"The propagated data is cleared once the processing is complete."
msgstr ""
"伝統的な、ブロッキング、同期フレームワークを使う場合、各リクエストの処理は専用のスレッドで実行されます。\n"
"つまり、処理全体に対して同じスレッドが使われます。\n"
"このスレッドは、処理が完了するまで他の実行に使われることはありません。\n"
"セキュリティプリンシパルやトレース ID のような、処理に沿ったデータの伝搬が必要な場合は、 `ThreadLocals` を使うことができます。\n"
"伝搬されたデータは、処理が完了するとクリアされます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"When using a reactive and asynchronous execution model, you cannot use the same mechanism.\n"
"To avoid using many process threads, and reduce resource usage (and also increase the concurrency of the application), the same thread can be used to handle multiple concurrent processing.\n"
"Thus, you cannot use `ThreadLocals` as the values would be leaked between the various concurrent processing."
msgstr ""
"リアクティブ実行モデルと非同期実行モデルを使用する場合、同じメカニズムを使用することはできません。\n"
"多くのプロセススレッドを使用せず、リソースの使用量を減らす（アプリケーションの並行性を高める）ために、同じスレッドを使用して複数の並行処理を処理することができます。\n"
"したがって、 `ThreadLocals` を使用することはできません。さまざまな並行処理の間で値が漏れてしまうからです。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"Vert.x _duplicated context_ is a construct that provides the same kind of propagation but for asynchronous processing.\n"
"It can also be used with synchronous code."
msgstr "Vert.xの _複製コンテキスト_ は、同じような伝搬を提供する構造体ですが、非同期処理用です。同期コードでも使用できます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "This document explains duplicated contexts, how to retrieve one, use it, and how it's propagated along the (asynchronous) processing."
msgstr "このドキュメントでは、複製コンテキストについて、その取得方法、使用方法、（非同期）処理での伝搬方法を説明します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "The reactive model"
msgstr "リアクティブ・モデル"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "This section is not an explanation of the reactive model. Refer to that xref:quarkus-reactive-architecture.adoc[the Quarkus Reactive Architecture] for more details."
msgstr "このセクションはリアクティブモデルの説明ではありません。詳細については、 xref:quarkus-reactive-architecture.adoc[Quarkusリアクティブアーキテクチャ] を参照してください。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"Under the hood, Quarkus uses a reactive engine.\n"
"This engine provides the efficiency and concurrency to cope with modern, containerized, and cloud-native applications."
msgstr ""
"Quarkusはリアクティブエンジンを採用しています。\n"
"このエンジンは、最新のコンテナ化されたクラウドネイティブなアプリケーションに対応する効率性と並行性を提供します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"For example, when you use Quarkus REST (formerly RESTEasy Reactive) or gRPC, Quarkus can invoke your business logic on I/O threads.\n"
"These threads are named https://en.wikipedia.org/wiki/Event_loop[event loops] and implement a https://en.wikipedia.org/wiki/Reactor_pattern[multi-reactor pattern]."
msgstr ""
"たとえば、Quarkus REST（旧RESTEasy Reactive）やgRPCを使用すると、QuarkusはI/Oスレッドでビジネスロジックを呼び出すことができます。\n"
"これらのスレッドは link:https://en.wikipedia.org/wiki/Event_loop[イベントループ] と名付けられ、 link:https://en.wikipedia.org/wiki/Reactor_pattern[マルチリアクターパターン] を実装します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"When using the imperative model, Quarkus associates a worker thread to each processing unit (like an HTTP request or a gRPC invocation).\n"
"That thread is dedicated to this specific processing until the processing completes.\n"
"Thus, you can use _Thread Locals_ to propagate data along the processing, and no other processing unit will use that thread until the completion of the current one."
msgstr ""
"命令型モデルを使用する場合、Quarkusは各処理ユニット（HTTPリクエストやgRPC呼び出しなど）にワーカースレッドを関連付けます。\n"
"このスレッドは、処理が完了するまで、この特定の処理に専念します。\n"
"したがって、 _スレッドローカル_ を使用して、処理に沿ってデータを伝搬することができます。\n"
"現在の処理が完了するまで、他の処理ユニットがそのスレッドを使用することはありません。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"With the reactive model, the code runs on event loop threads.\n"
"These event loops execute multiple concurrent processing units. For example,\n"
"the same event loop can handle multiple concurrent HTTP requests.\n"
"The following picture illustrates this reactive execution model:"
msgstr ""
"リアクティブ・モデルでは、コードはイベントループのスレッドで実行されます。\n"
"これらのイベントループは、複数の同時処理ユニットを実行します。\n"
"例えば、同じイベントループで複数のHTTPリクエストを同時に処理することができます。\n"
"次の図は、このリアクティブ実行モデルを示しています："

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"You must **NEVER** block these event loops.\n"
"If you do, the whole model collapses.\n"
"Thus, when the processing of an HTTP request needs to execute an I/O operation (such as calling an external service), it:"
msgstr ""
"これらのイベントループは *絶対に* ブロックしてはいけません。\n"
"もしブロックしてしまうと、モデル全体が崩壊してしまいます。\n"
"このように、HTTPリクエストの処理がI/O操作(外部サービスの呼び出しなど)を実行する必要がある場合、その処理は："

#: _versions/3.27/guides/duplicated-context.adoc
msgid "schedules the operation,"
msgstr "操作をスケジュールします、"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "passes a continuation (the code to call when the I/O completes),"
msgstr "継続（I/O が完了したときに呼び出すコード）を渡します、"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "releases the thread."
msgstr "スレッドを解放します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"That thread can then handle another concurrent request.\n"
"When the scheduled operation completes, it executes the passed continuation **on the same event loop**."
msgstr ""
"そのスレッドは別の同時リクエストを処理できます。\n"
"スケジュールされた操作が完了すると、渡された継続を *同じイベントループで* 実行します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"That model is particularly efficient (low number of threads) and performant (avoid context switches).\n"
"However, it requires a different development model, and you cannot use _Thread Locals_, as the concurrent requests would see the same value.\n"
"Indeed, they are all processed by the same thread: the event loop."
msgstr ""
"このモデルは特に効率的で（スレッド数が少なく）、パフォーマンスも高い（コンテキストスイッチの回避）です。\n"
"しかし、異なる開発モデルが必要で、 _スレッドローカルを_ 使うことはできません。\n"
"実際、これらはすべて同じスレッド、つまりイベントループで処理されます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"The xref:context-propagation.adoc[MicroProfile Context Propagation] specification addresses this issue.\n"
"It saves and restores the values stored in thread locals whenever we switch to another processing unit.\n"
"However, that model is expensive.\n"
"Context locals (also known as _duplicated context_) is another way to do this and requires fewer mechanics."
msgstr ""
"xref:context-propagation.adoc[MicroProfile Context Propagation] 仕様はこの問題に対応しています。\n"
"別の処理ユニットに切り替えるたびに、スレッドローカルに保存された値を保存して復元します。\n"
"しかし、このモデルは高価です。\n"
"コンテキスト・ローカル（ _重複コンテキスト_ とも呼ばれる）は、これを行う別の方法であり、必要な仕組みが少なくて済みます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Context and duplicated context"
msgstr "コンテキストと重複コンテキスト"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "In Quarkus, when you execute reactive code, you run in a _Context_, representing the execution thread (event loop or worker thread)."
msgstr "Quarkusでは、リアクティブコードを実行すると、実行スレッド（イベントループまたはワーカースレッド）を表す _コンテキスト_ で実行されます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Produces: `Hello 1, you are running on context: io.vertx.core.impl.DuplicatedContext@5dc42d4f and on thread Thread[vert.x-eventloop-thread-1,5,main]` - so invoked on an event loop."
msgstr "生成: `Hello 1, you are running on context: io.vertx.core.impl.DuplicatedContext@5dc42d4f and on thread Thread[vert.x-eventloop-thread-1,5,main]` - イベントループで呼び出されます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Produces: `Hello 2, you are running on context: io.vertx.core.impl.DuplicatedContext@41781ccb and on thread Thread[executor-thread-1,5,main]` - so invoked on a worker thread."
msgstr "生成: `Hello 2, you are running on context: io.vertx.core.impl.DuplicatedContext@41781ccb and on thread Thread[executor-thread-1,5,main]` - ワーカースレッドで呼び出されます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"With this _Context_ object, you can schedule operations in the same context.\n"
"The context is handy for executing the continuation on the same event loop (as contexts are attached to event loops), as described in the picture above.\n"
"For example, when you need to call something asynchronous, you capture the current context, and when the response arrives, it invokes the continuation in that context:"
msgstr ""
"この _Context_ オブジェクトを使用すると、同じコンテキスト内で操作をスケジュールできます。\n"
"上の図で説明したように、コンテキストは (イベントループにアタッチされるため)、同じイベントループで continuation を実行する場合に便利です。\n"
"たとえば何かを非同期的に呼び出す必要がある場合は、現在のコンテキストをキャプチャーし、レスポンスが到着すると、そのコンテキストで continuation を呼び出します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Emit the result in the same context."
msgstr "同じコンテキストで結果を出力します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Most Quarkus clients do this automatically, invoking the continuation in the proper context."
msgstr "ほとんどのQuarkusクライアントは自動的にこれを行い、適切なコンテキストで継続を呼び出します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "There are two levels of contexts:"
msgstr "コンテクストには2つのレベルがあります："

#: _versions/3.27/guides/duplicated-context.adoc
msgid "the root contexts representing the event loop, and thus cannot be used to propagate data without leaking it between concurrent processing"
msgstr "イベントループを表すルートコンテキストは、同時処理間でデータを漏らさずに伝播するために使用することはできません。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "the duplicated contexts, which are based on a root context, but are NOT shared and represent the processing unit"
msgstr "複製コンテキストは、ルートコンテキストに基づきますが、共有されず、処理ユニットを表します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"Thus, a duplicated context is associated with each processing unit.\n"
"A duplicated context is still associated with a root context, and scheduling operations using a duplicated context run them in the associated root context.\n"
"But, unlike the root context, they are not shared between processing units.\n"
"Yet, continuations of a processing unit use the same duplicated context.\n"
"So, in the previous code snippet, the continuation is not only called on the same event loop but on the same duplicated context (supposing that the captured context is a duplicated context, more on that later)."
msgstr ""
"このように、複製コンテキストは各処理ユニットに関連付けられています。\n"
"複製コンテキストは、依然としてルートコンテキストに関連付けられており、複製コンテキストを使用するスケジューリング操作は、関連付けられたルートコンテキストで実行されます。\n"
"しかし、ルートコンテキストとは異なり、処理ユニット間で共有されることはありません。\n"
"しかし、ある処理ユニットの継続は、同じ複製コンテキストを使用します。そのため、先ほどのコードスニペットでは、同じイベントループだけでなく、同じ複製コンテキストで呼び出されます（キャプチャされたコンテキストが複製コンテキストであると仮定します。）"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Context local data"
msgstr "コンテキスト・ローカルデータ"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"When executed in a duplicated context, the code can store data without sharing it with the other concurrent processing.\n"
"So, you can store, retrieve and remove local data.\n"
"The continuation invokes on the same duplicated context, will have access to that data:"
msgstr ""
"複製コンテキストで実行された場合、コードは他の並行処理と共有することなくデータを保存できます。\n"
"そのため、ローカルデータの保存、取得、削除を行うことができます。同じ複製コンテキストで実行された継続処理は、そのデータにアクセスすることができます："

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"The previous code snippet uses `io.smallrye.common.vertx.ContextLocals`, which eases access to the local data.\n"
"You can also access them using `Vertx.currentContext().getLocal(\"key\")`."
msgstr ""
"先ほどのコード・スニペットでは `io.smallrye.common.vertx.ContextLocals` を使い、ローカル・データへのアクセスを簡素化しています。 \n"
"`Vertx.currentContext().getLocal(\"key\")` を使ってもアクセスできます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"Context local data provides an efficient way to propagate objects during a reactive execution.\n"
"Tracing metadata, metrics, and sessions can be stored and retrieved safely."
msgstr ""
"コンテキストローカルデータは、リアクティブ実行中にオブジェクトを伝播する効率的な方法を提供します。\n"
"トレースメタデータ、メトリクス、セッションを安全に保存し、取り出すことができます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Context locals restrictions"
msgstr "コンテクスト・ローカルの制限"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"However, such a feature must only be used with duplicated contexts.\n"
"As said above, it's transparent for the code.\n"
"A duplicated context is a context, so they expose the same API."
msgstr ""
"ただし、このような機能は複製コンテキストでのみ使用する必要があります。\n"
"上述したように、コードにとっては透過的です。\n"
"複製コンテキストはコンテキストなので、同じAPIを公開します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"In Quarkus, access to the local data is restricted to duplicated contexts.\n"
"If you try to access local data from a root context, it throws an `UnsupportedOperationException`.\n"
"It prevents accessing data shared among different units of processing."
msgstr ""
"Quarkusでは、ローカルデータへのアクセスは複製コンテキストに制限されています。\n"
"ルートコンテキストからローカルデータにアクセスしようとすると、 `UnsupportedOperationException` がスローされます。 \n"
"これにより、異なる処理ユニット間で共有されているデータへのアクセスを防ぎます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Safe context"
msgstr "セーフコンテキスト"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"You can mark a context _safe_.\n"
"It is meant for other extensions to integrate with to help identify which contexts are isolated and guarantee access by a unique thread.\n"
"Hibernate Reactive uses this feature to check if the current context is safe to store the currently opened session to protect users from mistakenly interleaving multiple reactive operations that could unintentionally share the same session."
msgstr ""
"コンテキストに _セーフ_ マークをつけることができます。\n"
"これは、他のエクステンションがどのコンテキストが隔離されているかを識別し、固有のスレッドによるアクセスを保証するために統合するためのものです。\n"
"Hibernate Reactive はこの機能を使用して、現在開いているセッションを保存するために現在のコンテキストが安全かどうかをチェックし、意図せず同じセッションを共有する可能性のある複数のリアクティブ操作を誤ってインターリーブすることからユーザーを保護します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"Vert.x web will create a new duplicated context for each http web request; Quarkus REST will mark such contexts as safe.\n"
"Other extensions should follow a similar pattern when they are setting up a new context that is safe to be used for a local context guaranteeing sequential use, non-concurrent access, and scoped to the current reactive chain as a convenience not to have to pass a \"context\" object along explicitly."
msgstr ""
"Vert.x Web は、各 http Web リクエストに対して新しい複製コンテキストを作成します。Quarkus REST は、そのようなコンテキストに対し、安全であることをマークします。\n"
"他のエクステンションも、ローカルコンテキストに安全に使用できる新しいコンテキストを設定する際は、同様のパターンに従う必要があります。そうすることで、コンテキストは順番に使用され、同時にアクセスされません。また、現在のリアクティブチェーンにスコープ指定され、コンテキストオブジェクトを明示的に渡す必要がなくなり、利便性が向上します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"In other cases, it might be helpful to mark the current context as not safe instead explicitly; for example, if an existing context needs to be shared across multiple workers to process some operations in parallel: by marking and un-marking appropriately the same\n"
"context can have spans in which it's safe, followed by spans in which it's not safe."
msgstr "他の場合では、現在のコンテキストに対して安全ではないことを明示的にマークすると役立つかもしれません。たとえば、既存のコンテキストを複数のワーカー間で共有して、いくつかの操作を並列処理する必要がある場合、同じコンテキストを適切にマークまたはアンマークすることで、そのコンテキストに安全な期間と、それに続く安全ではない期間を設定できます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "To mark a context as safe, you can:"
msgstr "コンテキストをセーフとしてマークするには、次のようにします："

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Use the `io.quarkus.vertx.SafeVertxContext` annotation"
msgstr "`io.quarkus.vertx.SafeVertxContext` アノテーションを使用します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Use the `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` class"
msgstr "`io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` クラスを使用します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"By using the `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` class, the current context can be explicitly marked as `safe`, or it can be explicitly marked as `unsafe`; there's a third state which is the default of any new context: `unmarked`.\n"
"The default is to consider any unmarked context to be `unsafe`, unless the system property `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle.UNRESTRICTED_BY_DEFAULT` is set to `true`;"
msgstr ""
"`io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle` クラスを使用すると、現在のコンテキストを明示的に `safe` または `unsafe` としてマークできます。さらに、新規コンテキストのデフォルトの状態である `unmarked` もあります。\n"
"デフォルトでは、システムプロパティー `io.quarkus.vertx.core.runtime.context.VertxContextSafetyToggle.UNRESTRICTED_BY_DEFAULT` が `true` に設定されていない限り、マークされていないコンテキストは `unsafe` とみなされます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"The `SafeVertxContext` annotation marks the current duplicated context as safe and invokes the annotated method if the context is `unmarked` or already marked as `safe`.\n"
"If the context is marked as `unsafe`, you can force it to be `safe` using the `force=true` parameter.\n"
"However, this possibility must be used carefully."
msgstr ""
"`SafeVertxContext` アノテーションは、現在の複製されたコンテキストを安全であるとしてマークし、コンテキストが `unmarked` の場合、もしくはすでに `safe` とマークされている場合に、アノテーションが追加されているメソッドを呼び出します。\n"
"コンテキストが `unsafe` としてマークされている場合は、`force=true` パラメーターを使用して強制的に `safe` にできます。\n"
"ただし、これは慎重に実行する必要があります。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"The `@SafeVertxContext` annotation is a CDI interceptor binding annotation.\n"
"Therefore, it only works for CDI beans and on non-private methods."
msgstr ""
"`@SafeVertxContext` アノテーションは、CDI インターセプターバインドアノテーションです。\n"
"したがって、CDI Bean および非プライベートメソッドに対してのみ機能します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Extensions supporting duplicated contexts"
msgstr "複製コンテキストをサポートするエクステンション"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"In general, Quarkus invokes reactive code on duplicated contexts.\n"
"So it can safely access the local data.\n"
"It is the case with:"
msgstr ""
"一般的に、Quarkusは複製コンテキストに対してリアクティブコードを呼び出します。\n"
"そのため、ローカルデータに安全にアクセスできます。\n"
"これは以下に適用されます:"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Quarkus REST"
msgstr "Quarkus REST"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "gRPC"
msgstr "gRPC"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Reactive Routes"
msgstr "Reactive Routes"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Vert.x Event Bus `@ConsumeEvent`"
msgstr "Vert.x Event Bus `@ConsumeEvent`"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "REST Client"
msgstr "RESTクライアント"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Reactive Messaging (Kafka, AMQP)"
msgstr "リアクティブ・メッセージング（Kafka、AMQP）"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Funqy"
msgstr "Funqy"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Quarkus scheduler and Quartz"
msgstr "QuarkusスケジューラとQuartz"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Redis Client (for the pub/sub commands)"
msgstr "Redisクライアント（pub/subコマンド用）"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "GraphQL"
msgstr "GraphQL"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Distinguish between root and duplicated contexts"
msgstr "ルート・コンテキストと複製コンテキストの区別"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "You can distinguish between a root and a duplicated context using the following:"
msgstr "ルート・コンテキストと複製コンテキストは、以下の方法で区別できます："

#: _versions/3.27/guides/duplicated-context.adoc
msgid "This code uses the `io.smallrye.common.vertx.VertxContext` helper class."
msgstr "このコードでは、 `io.smallrye.common.vertx.VertxContext` ヘルパークラスを使用しています。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Duplicated contexts and mapped diagnostic context (MDC)"
msgstr "複製コンテキストとマッピングされた診断コンテキスト（MDC）"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"When using loggers, the MDC (contextual data added to the log messages) is stored in duplicated context when available.\n"
"Check the xref:logging.adoc#mdc-propagation[logging reference guide] for more details."
msgstr ""
"ロガーを使用する場合、MDC（ログ メッセージに追加されるコンテキスト データ）は、利用可能な場合、複製コンテキストに保存されます。\n"
"詳細については、 xref:logging.adoc#mdc-propagation[ロギング リファレンス ガイド] を確認してください。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "CDI request scope"
msgstr "CDI リクエストスコープ"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "In Quarkus, the CDI request scope is stored in a duplicated context, meaning it gets automatically propagated alongside the reactive processing of a request."
msgstr "Quarkusでは、CDIリクエストスコープは複製コンテキストに保存されます。つまり、リクエストのリアクティブ処理と同時に、CDIリクエストスコープが自動的に伝搬されます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "Reactive Messaging"
msgstr "リアクティブメッセージング"

#: _versions/3.27/guides/duplicated-context.adoc
msgid ""
"The Kafka and AMQP connector creates a duplicated context for each message, implementing a _message context_.\n"
"This message context is used for the complete message processing and thus can be used to propagate data."
msgstr ""
"Kafka と AMQP コネクタは、 _メッセージコンテキスト_ を実装し、各メッセージに対して複製コンテキストを作成します。\n"
"このメッセージコンテキストは完全なメッセージ処理に使用されるため、データの伝播に使用できます。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "See the https://smallrye.io/smallrye-reactive-messaging/latest/concepts/message-context/[Message Context] documentation for further information."
msgstr "詳しくは link:https://smallrye.io/smallrye-reactive-messaging/latest/concepts/message-context/[Message Context] のドキュメントを参照してください。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "OpenTelemetry"
msgstr "OpenTelemetry"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "The OpenTelemetry extension stores the traces in the duplicated context, ensuring propagation even when using reactive and asynchronous code."
msgstr "OpenTelemetry エクステンションは、複製コンテキストにトレースを保存するので、リアクティブで非同期なコードを使用しているときでも、確実に伝搬します。"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "References"
msgstr "リファレンス"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture]"
msgstr "xref:quarkus-reactive-architecture.adoc[Quarkusリアクティブアーキテクチャ]"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "https://vertx.io/docs/vertx-core/java/#_reactor_and_multi_reactor[Vert.x Reactor and Multi-Reactor documentation]"
msgstr "link:https://vertx.io/docs/vertx-core/java/#_reactor_and_multi_reactor[Vert.x リアクターとマルチリアクターのドキュメント]"

#: _versions/3.27/guides/duplicated-context.adoc
msgid "xref:logging.adoc[Quarkus logging]"
msgstr "xref:logging.adoc[Quarkus ロギング]"
