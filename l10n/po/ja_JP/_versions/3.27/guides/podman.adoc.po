msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/podman.adoc
msgid "Using Podman with Quarkus"
msgstr "Podman と Quarkus の併用"

#: _versions/3.27/guides/podman.adoc
msgid "https://podman.io/[Podman] is an open-source, daemonless, and rootless container engine for developing, managing, and running OCI Containers on Linux, Windows and Mac. It can be used to support the container functionality and Dev Services on Quarkus."
msgstr ""
"link:https://podman.io/[Podman] は、Linux、Windows、Mac上でOCIコンテナを開発、管理、実行するための、オープンソース、デーモンレス、ルートレスのコンテナエンジンです。\n"
"Podmanは、Quarkusのコンテナ機能とDev Servicesのサポートに使用できます。"

#: _versions/3.27/guides/podman.adoc
msgid "Installing Podman"
msgstr "Podman のインストール"

#: _versions/3.27/guides/podman.adoc
msgid "Podman's install approach varies depending on the operating system you are using, and the required steps also change over time depending on the version of Podman. For Mac and Windows we highly recommend installing through the Podman Desktop graphical application. It is the simplest option with the least number of steps, it adds additional functionality like automatic start, and it helps manage future updates. There is also a CLI-only option that may be used. However, this setup requires additional manual tasks to manage, update, and launch the Podman Machine environment."
msgstr "Podmanのインストール方法はお使いのオペレーティングシステムによって異なり、必要な手順もPodmanのバージョンによって変化します。MacとWindowsの場合は、Podman Desktopグラフィカルアプリケーションからのインストールを強くお勧めします。最もシンプルで手順が少なく、自動起動などの機能が追加され、将来のアップデートの管理にも役立ちます。CLIのみのオプションもあります。ただし、このセットアップでは、Podman Machine環境の管理、更新、起動に手動タスクが追加されます。"

#: _versions/3.27/guides/podman.adoc
msgid "The Homebrew package manager on Mac (*brew*) *should not be used to install Podman* as it results in an unverified combination of components. This is due to Homebrew sharing dependencies between projects, along with limited vetting of upgrade requests. As an example, there were several instances where an update to qemu broke on Apple Silicon, preventing Podman machine VMs from booting."
msgstr "MacのHomebrewパッケージマネージャ (*brew*) を *使ってPodmanをインストールしてはいけません* 。これは、Homebrew がプロジェクト間で依存関係を共有していることと、アップグレード要求の審査が限られていることが原因です。例として、qemu へのアップデートが Apple Silicon 上で壊れ、Podman マシンの VM が起動できなくなることがいくつかありました。"

#: _versions/3.27/guides/podman.adoc
msgid "On Linux, Podman is integrated as part of the operating system, and installed through the system's packager manager. As with Mac, and Windows, Podman Desktop can also be installed to supplement the Podman CLI. However, on Linux, Podman Desktop acts as a client to the native Podman integration, and does not manage the underlying Podman installation."
msgstr "Linuxでは、Podmanはオペレーティングシステムの一部として統合され、システムのパッケージャマネージャを通じてインストールされます。MacやWindowsと同様に、Podman CLIを補完するためにPodman Desktopをインストールすることもできます。ただしLinuxでは、Podman DesktopはネイティブPodman統合のクライアントとして動作し、基盤となるPodmanのインストールは管理しません。"

#: _versions/3.27/guides/podman.adoc
msgid "See https://podman-desktop.io/downloads/ for the latest version of Podman Desktop."
msgstr "Podman Desktopの最新バージョンは https://podman-desktop.io/downloads/ を参照してください。"

#: _versions/3.27/guides/podman.adoc
msgid "Additionally, if you are using Linux, see the Podman https://podman.io/docs/installation#installing-on-linux[Linux installation documentation] for instructions installing Podman to your specific Linux distribution."
msgstr "また、Linuxを使用している場合は、Podman link:https://podman.io/docs/installation#installing-on-linux[Linuxインストールドキュメント] を参照して、Podmanを特定のLinuxディストリビューションにインストールする手順を確認してください。"

#: _versions/3.27/guides/podman.adoc
msgid "Docker compatibility mode"
msgstr "Docker互換モード"

#: _versions/3.27/guides/podman.adoc
msgid "When installing Podman Desktop on Mac or Windows, it's important to enable Docker compatibility mode when prompted. This will ensure the podman-mac-helper is setup on your behalf (normally a manual action you are prompted to do after start), necessary for supporting /var/run/docker.sock (privileged location). It will also install support for Docker Compose."
msgstr "MacまたはWindowsにPodman Desktopをインストールする際、プロンプトが表示されたらDocker互換モードを有効にすることが重要です。これにより、/var/run/docker.sock（特権ロケーション）をサポートするために必要なPodman-Mac-helperがあなたの代わりにセットアップされます（通常は起動後に手動で行うよう促されます）。また、Docker Compose のサポートもインストールされます。"

#: _versions/3.27/guides/podman.adoc
msgid "Platform differences"
msgstr "プラットフォームの差異"

#: _versions/3.27/guides/podman.adoc
msgid "While interacting with containers is mostly identical between Mac, Windows, and Linux, there are important environmental differences to be aware of. Notably, the way in which containers are executed is different, since \"Containers are Linux\". More specifically, containers contain Linux userland binaries with a dependency on the Linux kernel syscall interface. As such, Linux containers cannot run natively on macOS or Windows; they instead require the use of a virtual machine (VM), running Linux, to host them. For systems that require it, Podman includes a subsystem called Podman Machine that is used to manage this VM. Podman Desktop performs a guided interactive setup of this VM, and will automatically launch it on your behalf."
msgstr "コンテナとのやり取りはMac、Windows、Linuxの間でほとんど同じですが、注意すべき重要な環境の違いがあります。特に、「コンテナはLinux」であるため、コンテナの実行方法が異なります。具体的には、コンテナはLinuxカーネル・システムコール・インターフェースに依存するLinuxユーザーランド・バイナリです。そのため、LinuxコンテナはmacOSやWindows上でネイティブに実行できません。代わりに、Linuxを実行する仮想マシン（VM）を使用してコンテナをホストする必要があります。それが必要なシステムのために、PodmanにはこのVMを管理するためのPodman Machineというサブシステムが含まれています。Podman Desktopは、このVMのガイド付き対話型セットアップを行い、あなたの代わりに自動的に起動します。"

#: _versions/3.27/guides/podman.adoc
msgid "Rootful vs Rootless"
msgstr "Rootful vs Rootless"

#: _versions/3.27/guides/podman.adoc
msgid "Podman supports two modes of operation: rootful, in which case the container runs as root on the Linux host (or VM in the case of Mac/Windows), and rootless, where the container runs under a standard Unix user account. The latter offers significantly stronger security, but some containers are not capable of running under the increased restrictions. As an example, if a container creates new devices, loopback mount points, and performs other highly restricted operations, then they must be run as root. Note, that this is not to be confused with the USER value specified in Containerfile/Dockerfile, which refers to how processes inside the container perceive themselves. In rootless, processes running in a container with a USER of \"root\" will appear to each other as root, but due to pid namespacing, they will actually be running as a standard restricted user account on the host system."
msgstr "Podmanは2つの動作モードをサポートしています：コンテナがLinuxホスト（Mac/Windowsの場合はVM）上でrootとして実行されるrootfulと、コンテナが標準的なUnixユーザーアカウントで実行されるrootlessです。後者は大幅に強力なセキュリティを提供しますが、一部のコンテナは、強化された制限の下で実行できません。例として、コンテナが新しいデバイスを作成したり、マウントポイントをループバックしたり、その他の高度に制限された操作を実行したりする場合は、rootとして実行する必要があります。これは、Containerfile/Dockerfile で指定される USER 値と混同しないように注意してください。ルートレスでは、USER が「root」であるコンテナ内で実行されているプロセスは、互いに root として表示されますが、pid ネームスペーシングにより、実際にはホストシステム上の標準的な制限付きユーザーアカウントとして実行されます。"

#: _versions/3.27/guides/podman.adoc
msgid "Configuring on Win & Mac"
msgstr "WinとMacでの設定"

#: _versions/3.27/guides/podman.adoc
msgid "On systems which involve a Podman Machine managed VM (Mac & Windows), container clients and Podman commands communicate remotely to either a rootful or rootless system service running the VM. Which is used is determined by the `rootful` setting of the Podman machine. For maximal compatibility, Podman Desktop defaults to enabling rootful for new machine instances. There is limited security impact to this since the VM itself is running under a user process. This can also be changed via the podman commands:"
msgstr "Podmanマシンが管理するVM（MacとWindows）を含むシステムでは、コンテナクライアントとPodmanコマンドはVMを実行しているルートフルまたはルートレスシステムサービスにリモートで通信します。どちらを使用するかは、Podmanマシンの `rootful` 設定によって決まります。最大限の互換性を実現するため、Podman Desktopのデフォルトでは、新しいマシンインスタンスに対してrootfulを有効にします。VM自体はユーザープロセスで実行されるため、セキュリティへの影響は限定的です。これはpodmanコマンドで変更することもできます："

#: _versions/3.27/guides/podman.adoc
msgid "Configuring on Linux"
msgstr "Linuxでの設定"

#: _versions/3.27/guides/podman.adoc
msgid "On Linux systems, it's recommended to configure client access in a rootless configuration using a user systemd service."
msgstr "Linux システムでは、ユーザー systemd サービスを使ってルートレス構成でクライアントアクセスを設定することをお勧めします。"

#: _versions/3.27/guides/podman.adoc
msgid "This can be enabled using the following command:"
msgstr "これは以下のコマンドで有効にできます："

#: _versions/3.27/guides/podman.adoc
msgid "Setting DOCKER_HOST on Linux"
msgstr "Linux での DOCKER_HOST の設定"

#: _versions/3.27/guides/podman.adoc
msgid "With the above rootless setup on Linux, you will need to configure clients, such as Quarkus and testcontainers by setting the `DOCKER_HOST` environment variable to point to the user service podman socket. The path be set using an expression which queries the path using the podman command:"
msgstr "Linux 上で上記のルートレスセットアップを行う場合、Quarkus や testcontainers などのクライアントを設定する必要があります。この場合、 `DOCKER_HOST` 環境変数を設定して、ユーザーサービスの podman ソケットを指すようにします。パスは、podmanコマンドを使用してパスをクエリする式を使用して設定します："

#: _versions/3.27/guides/podman.adoc
msgid "Other Linux settings"
msgstr "その他のLinux設定"

#: _versions/3.27/guides/podman.adoc
msgid "Short names of images"
msgstr "イメージの略称"

#: _versions/3.27/guides/podman.adoc
msgid ""
"Testcontainers and Quarkus Dev Services also expect the container service they make requests against to be non-interactive.\n"
"In case you have multiple registries configured in your Docker or Podman configuration, and when using short image names, Podman responds with a prompt asking which registry should be used to pull images."
msgstr "Testcontainers と Quarkus Dev Services も、リクエストするコンテナサービスが非インタラクティブであることを期待しています。Docker または Podman の設定で複数のレジストリを構成している場合、およびイメージの略称を使用している場合、Podman は、どのレジストリを使ってコンテナを引き出すべきかを尋ねるプロンプトで応答します。"

#: _versions/3.27/guides/podman.adoc
msgid ""
"While we recommend you to avoid short names and always use fully specified names including the registry, Testcontainers unfortunately relies on short names internally for the time being.\n"
"If you are using Testcontainers, either directly or through Dev Services, you need to disable this prompt by setting the `short-name-mode=\"disabled\"` configuration property of Podman in `/etc/containers/registries.conf`."
msgstr "略称の使用は避けて、レジストリーを含め常に完全に指定された名前を使うことをお勧めしますが、残念ながら現時点で Testcontainers は内部的に略称に依存しています。もし Testcontainers を直接または Dev Services を通して使用している場合、 `/etc/containers/registries.conf` で Podman の `short-name-mode=\"disabled\"` 設定プロパティーを設定して、このプロンプトを無効にする必要があります。"
