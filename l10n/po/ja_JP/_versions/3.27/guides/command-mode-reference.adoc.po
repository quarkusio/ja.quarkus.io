msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Command Mode Applications"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "This reference covers how to write applications that run and then exit."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The solution is located in the `getting-started-command-mode` link:{quickstarts-tree-url}/getting-started-command-mode[directory]."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "First, we need to create a new Quarkus project with the following command:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"The suggested project creation command lines disable the codestarts to avoid including a REST server. Similarly, if you use code.quarkus.io to generate a\n"
"project, you need to go to *MORE OPTIONS -> Starter Code* and select *No* to avoid adding the Quarkus REST (formerly RESTEasy Reactive) extension."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The Quarkus REST extension is added automatically only if you ask for codestarts and you didn't specify any extensions."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Writing Command Mode Applications"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"There are two different approaches that can be used to implement applications\n"
"that exit."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Implement `QuarkusApplication` and have Quarkus run this method automatically"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Implement `QuarkusApplication` and a Java main method, and use the Java main method to launch Quarkus"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"In this document the `QuarkusApplication` instance is referred to as the application main,\n"
"and a class with a Java main method is the Java main."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The simplest possible command mode application with access to Quarkus APIs might appear as follows:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The `@QuarkusMain` annotation tells Quarkus that this is the main entry point."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The `run` method is invoked once Quarkus starts, and the application stops when it finishes."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Contexts"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Got a `ContextNotActiveException`?"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"A command mode application (like a CLI) is a bit different from say an HTTP service, there is a single call from the command line.\n"
"So the notion of _request_ let alone multiple requests does not exist per se.\n"
"Therefore, request scope is not the default."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"To get access to your application beans and services, be aware that a `@QuarkusMain` instance is an application scoped bean by default.\n"
"It has access to singletons, application and dependent scoped beans."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"If you want to interact with beans that requires a request scope, simply add the `@ActivateRequestContext` annotation on your `run()` method.\n"
"This let `run()` have access to methods like `listAll()` and `query*` methods on a Panache Entity.\n"
"Without it, you will eventually get a `ContextNotActiveException` when accessing such classes/beans."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Main method"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "If we want to use a Java main to run the application main it would look like:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"This is effectively the same as running the `HelloWorldMain` application main directly, but has the advantage it can\n"
"be run from the IDE."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "If a class that implements `QuarkusApplication` and has a Java main then the Java main will be run."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"It is recommended that a Java main perform very little logic, and just\n"
"launch the application main. In development mode the Java main will run in a\n"
"different ClassLoader to the main application, so may not behave as you would\n"
"expect."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Multiple Main Methods"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"It is possible to have multiple main methods in an application, and select between them at build time.\n"
"The `@QuarkusMain` annotation takes an optional 'name' parameter, and this can be used to select the\n"
"main to run using the `quarkus.package.main-class` build time configuration option. If you don't want\n"
"to use annotations this can also be used to specify the fully qualified name of a main class."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"By default, the `@QuarkusMain` with no name (i.e. the empty string) will be used, and if it is not present\n"
"and `quarkus.package.main-class` is not specified then Quarkus will automatically generate a main class\n"
"that just runs the application."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"The `name` of `@QuarkusMain` must be unique (including the default of the empty string). If you\n"
"have multiple `@QuarkusMain` annotations in your application the build will fail if the names are not\n"
"unique."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The command mode lifecycle"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "When running a command mode application the basic lifecycle is as follows:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Start Quarkus"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Run the `QuarkusApplication` main method"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Shut down Quarkus and exit the JVM after the main method returns"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"Shutdown is always initiated by the application main thread returning. If you want to run some logic on startup,\n"
"and then run like a normal application (i.e. not exit) then you should call `Quarkus.waitForExit` from the main\n"
"thread (A non-command mode application is essentially just running an application that just calls `waitForExit`)."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"If you want to shut down a running application and you are not in the main thread, then you should call `Quarkus.asyncExit`\n"
"in order to unblock the main thread and initiate the shutdown process."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Running the application"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "To run the command mode application on the JVM, first build it using `mvnw package` or equivalent."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Then launch it:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "You can also build a native application with `mvnw package -Dnative`, and launch it with something like:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Development Mode"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"Also, for command mode applications, the dev mode is supported.\n"
"When you start your application in dev mode, the command mode application is executed:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "As command mode applications will often require arguments to be passed on the command line, this is also possible in dev mode:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "CLI"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Maven"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Gradle"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "You should see the following down the bottom of the screen after the application is stopped:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"You can press the `Space bar` key and the application will be started again.\n"
"You can also use the `e` hotkey to edit the command line arguments and restart your application."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Testing Command Mode Applications"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"Command Mode applications can be tested using the `@QuarkusMainTest` and `@QuarkusMainIntegrationTest` annotations. These\n"
"work in a similar way to `@QuarkusTest` and `@QuarkusIntegrationTest` where `@QuarkusMainTest` will run the CLI tests\n"
"within the current JVM, while `QuarkusIntegrationTest` is used to run the generated executable (both jars and native)."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "We can write a simple test for our CLI application above as follows:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"Each test method must be annotated with `@Launch` to automatically start the application or have a `QuarkusMainLauncher`\n"
"parameter to manually launch the application."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "We can then extend this with an integration test that can be used to test the native executable or runnable jar:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Limitations"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
#, fuzzy
msgid "`@QuarkusMainTest` does **not** support the following features:"
msgstr "`@QuarkusMainTest` は以下の機能をサポートして *いません* ："

#: _versions/3.27/guides/command-mode-reference.adoc
#, fuzzy
msgid "Injection of CDI beans"
msgstr "CDI豆の注入"

#: _versions/3.27/guides/command-mode-reference.adoc
#, fuzzy
msgid "Using Panache entities"
msgstr "Panache エンティティの使用"

#: _versions/3.27/guides/command-mode-reference.adoc
#, fuzzy
msgid "Using mocks with `@InjectMock`"
msgstr "でモックを使用します。 `@InjectMock`"

#: _versions/3.27/guides/command-mode-reference.adoc
#, fuzzy
msgid "Usually, it's best to use a combination of `@QuarkusMainTest` tests for testing application externals, and `@QuarkusTest` tests for fine-grained testing which requires access to application internals."
msgstr "通常、アプリケーションの外部をテストするための `@QuarkusMainTest` テストと、アプリケーションの内部へのアクセスを必要とする細か なテストを行うための `@QuarkusTest` テストを組み合わせて使用するのが最善です。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Mocking"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"CDI injection is not supported in the `@QuarkusMainTest` tests.\n"
"Consequently, mocking CDI beans with `QuarkusMock` or `@InjectMock` is not supported either."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "It is possible to mock CDI beans by leveraging xref:getting-started-testing.adoc#testing_different_profiles[test profiles] though."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "For instance, in the following test, the launched application would receive a mocked singleton `CdiBean1`. The implementation `MockedCdiBean1` is provided by the test:"
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "List all the CDI beans for which you want to enable an alternative mocked bean."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Use `@Alternative` without a `@Priority`. Make sure you don't use `@Mock`."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The scope of the mocked bean should be consistent with the original one."
msgstr ""

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Using this pattern, you can enable specific alternatives for any given test."
msgstr ""
