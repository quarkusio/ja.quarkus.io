msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Command Mode Applications"
msgstr "コマンドモードアプリケーション"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "This reference covers how to write applications that run and then exit."
msgstr "このリファレンスでは、実行して終了するアプリケーションの書き方について説明しています。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The solution is located in the `getting-started-command-mode` link:{quickstarts-tree-url}/getting-started-command-mode[directory]."
msgstr "ソリューションは `getting-started-command-mode` link:{quickstarts-tree-url}/getting-started-command-mode[ディレクトリ] にあります。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "First, we need to create a new Quarkus project with the following command:"
msgstr "まず、以下のコマンドで新しいQuarkusプロジェクトを作成します。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"The suggested project creation command lines disable the codestarts to avoid including a REST server. Similarly, if you use code.quarkus.io to generate a\n"
"project, you need to go to *MORE OPTIONS -> Starter Code* and select *No* to avoid adding the Quarkus REST (formerly RESTEasy Reactive) extension."
msgstr ""
"推奨のプロジェクト作成コマンドでは、RESTサーバーを含めないようにするため、codestartsを無効にします。\n"
"同様に、code.quarkus.ioを使用してプロジェクトを生成する場合は、 *MORE OPTIONS → Starter Code* で *No* を選択して、Quarkus REST（旧RESTEasy Reactive）エクステンションを追加しないようにする必要があります。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The Quarkus REST extension is added automatically only if you ask for codestarts and you didn't specify any extensions."
msgstr "QuarkusのRESTエクステンションは、codestartsでエクステンションを指定しなかった場合にのみ、自動的に追加されます。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Writing Command Mode Applications"
msgstr "コマンドモードアプリケーションの作成"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"There are two different approaches that can be used to implement applications\n"
"that exit."
msgstr "終了するアプリケーションを実装するためには、2つの異なるアプローチがあります。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Implement `QuarkusApplication` and have Quarkus run this method automatically"
msgstr "`QuarkusApplication` を実装し、Quarkusがこのメソッドを自動的に実行するようにします。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Implement `QuarkusApplication` and a Java main method, and use the Java main method to launch Quarkus"
msgstr "`QuarkusApplication` とJava mainメソッドを実装し、Java mainメソッドを使用してQuarkusを起動します。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"In this document the `QuarkusApplication` instance is referred to as the application main,\n"
"and a class with a Java main method is the Java main."
msgstr "このドキュメントでは、 `QuarkusApplication` インスタンスをアプリケーション mainと呼び、Java mainメソッドを持つクラスを Java mainと呼びます。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The simplest possible command mode application with access to Quarkus APIs might appear as follows:"
msgstr "QuarkusのAPIにアクセスできる最もシンプルなコマンドモードのアプリケーションは、以下のようになります:"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The `@QuarkusMain` annotation tells Quarkus that this is the main entry point."
msgstr "`@QuarkusMain` のアノテーションは、Quarkusにここがメインエントリポイントであることを伝えます。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The `run` method is invoked once Quarkus starts, and the application stops when it finishes."
msgstr "Quarkus が起動すると `run` メソッドが呼び出され、アプリケーションが終了すると停止します。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Contexts"
msgstr "コンテキスト"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Got a `ContextNotActiveException`?"
msgstr "`ContextNotActiveException`が発生しましたか?"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"A command mode application (like a CLI) is a bit different from say an HTTP service, there is a single call from the command line.\n"
"So the notion of _request_ let alone multiple requests does not exist per se.\n"
"Therefore, request scope is not the default."
msgstr "コマンドモードのアプリケーション（CLIなど）は、例えばHTTPサービスとは少し異なり、コマンドラインからの呼び出しは1回だけです。そのため、複数のリクエストはおろか、 _request_ という概念も存在しません。したがって、リクエストスコープはデフォルトではありません。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"To get access to your application beans and services, be aware that a `@QuarkusMain` instance is an application scoped bean by default.\n"
"It has access to singletons, application and dependent scoped beans."
msgstr "アプリケーションBeanやサービスにアクセスするために、 `@QuarkusMain` インスタンスはデフォルトでapplicationスコープのBeanであることに注意してください。singleton、application、dependentスコープのBeanへのアクセスを持っています。requestスコープを必要とするBeanと対話したい場合は、 `run()` メソッドに `@ActivateRequestContext` を記述してください。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"If you want to interact with beans that requires a request scope, simply add the `@ActivateRequestContext` annotation on your `run()` method.\n"
"This let `run()` have access to methods like `listAll()` and `query*` methods on a Panache Entity.\n"
"Without it, you will eventually get a `ContextNotActiveException` when accessing such classes/beans."
msgstr "リクエストスコープを必要とするBeanと対話したい場合は、 `run()` メソッドに `@ActivateRequestContext` アノテーションを追加するだけです。 これにより、 `run()` は Panache Entity の `listAll()` や `query*` メソッドにアクセスすることができます。 これがないと、そのようなクラスやBeanにアクセスしたときに `ContextNotActiveException` を受け取ることになります。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Main method"
msgstr "Main method"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "If we want to use a Java main to run the application main it would look like:"
msgstr "Java mainでアプリケーション mainを実行したい場合は以下のようになります:"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"This is effectively the same as running the `HelloWorldMain` application main directly, but has the advantage it can\n"
"be run from the IDE."
msgstr "これは `HelloWorldMain` アプリケーション mainを直接実行するのと実質的には同じですが、IDE から実行できるという利点があります。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "If a class that implements `QuarkusApplication` and has a Java main then the Java main will be run."
msgstr "`QuarkusApplication` を実装したクラスで Java main がある場合は Java main が実行されます。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"It is recommended that a Java main perform very little logic, and just\n"
"launch the application main. In development mode the Java main will run in a\n"
"different ClassLoader to the main application, so may not behave as you would\n"
"expect."
msgstr "Java mainはほとんどロジックを実行せず、アプリケーション mainを起動するだけにすることをお勧めします。開発モードでは、Java mainはアプリケーション mainとは異なるClassLoaderで実行されるので、期待通りの動作をしないかもしれません。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Multiple Main Methods"
msgstr "複数のmainメソッド"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"It is possible to have multiple main methods in an application, and select between them at build time.\n"
"The `@QuarkusMain` annotation takes an optional 'name' parameter, and this can be used to select the\n"
"main to run using the `quarkus.package.main-class` build time configuration option. If you don't want\n"
"to use annotations this can also be used to specify the fully qualified name of a main class."
msgstr "アプリケーション内に複数のmainメソッドを持ち、ビルド時にそれらの間で選択することが可能です。 `@QuarkusMain` アノテーションはオプションの 'name' パラメーターを取り、 `quarkus.package.main-class` ビルド時設定オプションを使用して実行するmainを選択するために使用できます。アノテーションを使用したくない場合は、メインクラスの完全修飾名を指定するために使用することもできます。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"By default, the `@QuarkusMain` with no name (i.e. the empty string) will be used, and if it is not present\n"
"and `quarkus.package.main-class` is not specified then Quarkus will automatically generate a main class\n"
"that just runs the application."
msgstr "デフォルトでは、名前のない（つまり空の文字列） `@QuarkusMain` が使用されます。もしこれが存在せず、 `quarkus.package.main-class` も指定されていなければ、Quarkusは自動的にアプリケーションを動かすだけのメインクラスを生成します。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"The `name` of `@QuarkusMain` must be unique (including the default of the empty string). If you\n"
"have multiple `@QuarkusMain` annotations in your application the build will fail if the names are not\n"
"unique."
msgstr "`@QuarkusMain` の `name` は一意である必要があります(デフォルトの空文字列を含む)。アプリケーション内に複数の `@QuarkusMain` アノテーションがある場合、名前が一意でないとビルドに失敗します。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The command mode lifecycle"
msgstr "コマンドモードのライフサイクル"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "When running a command mode application the basic lifecycle is as follows:"
msgstr "コマンドモードのアプリケーションを実行する場合、基本的なライフサイクルは以下の通りです。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Start Quarkus"
msgstr "Quarkusの起動"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Run the `QuarkusApplication` main method"
msgstr "`QuarkusApplication` mainメソッドの実行"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Shut down Quarkus and exit the JVM after the main method returns"
msgstr "mainメソッドがreturnされた後にQuarkusをシャットダウンし、JVMを終了する"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"Shutdown is always initiated by the application main thread returning. If you want to run some logic on startup,\n"
"and then run like a normal application (i.e. not exit) then you should call `Quarkus.waitForExit` from the main\n"
"thread (A non-command mode application is essentially just running an application that just calls `waitForExit`)."
msgstr "シャットダウンは常にアプリケーションのメインスレッドがreturnされることで開始されます。起動時に何らかのロジックを実行して、通常のアプリケーションのように実行したい場合 (つまり終了しない) は、メインスレッドから `Quarkus.waitForExit` を呼び出す必要があります (非コマンドモードのアプリケーションは、基本的に `waitForExit` を呼び出すだけのアプリケーションを実行しているだけです)。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"If you want to shut down a running application and you are not in the main thread, then you should call `Quarkus.asyncExit`\n"
"in order to unblock the main thread and initiate the shutdown process."
msgstr "実行中のアプリケーションをシャットダウンしたいが、メインスレッドにいない場合、メインスレッドのブロックを解除してシャットダウン処理を開始するために `Quarkus.asyncExit` を呼び出す必要があります。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Running the application"
msgstr "アプリケーションの実行"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "To run the command mode application on the JVM, first build it using `mvnw package` or equivalent."
msgstr "JVM上でコマンド・モード・アプリケーションを実行するには、まず `mvnw package` または同等のものを使ってビルドします。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Then launch it:"
msgstr "そして、それを起動します："

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "You can also build a native application with `mvnw package -Dnative`, and launch it with something like:"
msgstr "また、 `mvnw package -Dnative` でネイティブアプリケーションをビルドし、次のような方法で起動することもできます："

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Development Mode"
msgstr "開発モード"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"Also, for command mode applications, the dev mode is supported.\n"
"When you start your application in dev mode, the command mode application is executed:"
msgstr "また、コマンドモードのアプリケーションについては、開発モードがサポートされています。 開発モードでアプリケーションを起動すると、コマンドモードアプリケーションが実行されます:"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "As command mode applications will often require arguments to be passed on the command line, this is also possible in dev mode:"
msgstr "コマンドモードのアプリケーションでは、コマンドラインで引数を渡す必要があることが多く、これは開発モードでも可能です:"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "CLI"
msgstr "コマンドラインインタフェース"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Gradle"
msgstr "Gradle"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "You should see the following down the bottom of the screen after the application is stopped:"
msgstr "アプリケーションが停止した後、画面の下に以下のように表示されます。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"You can press the `Space bar` key and the application will be started again.\n"
"You can also use the `e` hotkey to edit the command line arguments and restart your application."
msgstr "`スペースバー` キーを押せば、アプリケーションが再び起動します。また、 `e` ホットキーを使って、コマンドライン引数を編集し、アプリケーションを再起動することもできます。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Testing Command Mode Applications"
msgstr "コマンドモードアプリケーションのテスト"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"Command Mode applications can be tested using the `@QuarkusMainTest` and `@QuarkusMainIntegrationTest` annotations. These\n"
"work in a similar way to `@QuarkusTest` and `@QuarkusIntegrationTest` where `@QuarkusMainTest` will run the CLI tests\n"
"within the current JVM, while `QuarkusIntegrationTest` is used to run the generated executable (both jars and native)."
msgstr "コマンドモード・アプリケーションは、 `@QuarkusMainTest` および `@QuarkusMainIntegrationTest` のアノテーションを使用してテストすることができます。これらは、 `@QuarkusTest` および `@QuarkusIntegrationTest` と同様の方法で動作します。 `@QuarkusMainTest` は現在のJVM内でCLIテストを実行し、 `QuarkusIntegrationTest` は生成された実行ファイル（ジャーおよびネイティブの両方）を実行するために使用されます。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "We can write a simple test for our CLI application above as follows:"
msgstr "上記のCLIアプリケーションの簡単なテストを以下のように書くことができます。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"Each test method must be annotated with `@Launch` to automatically start the application or have a `QuarkusMainLauncher`\n"
"parameter to manually launch the application."
msgstr "各テストメソッドは、アプリケーションを自動的に起動するために `@Launch` のアノテーションを付けるか、手動で起動するために `QuarkusMainLauncher` のパラメータを持つ必要があります。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "We can then extend this with an integration test that can be used to test the native executable or runnable jar:"
msgstr "そして、これを統合テストで拡張し、ネイティブ実行可能ファイルや実行可能jarをテストするために使用することができます。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Limitations"
msgstr "制約事項"

#: _versions/3.27/guides/command-mode-reference.adoc
#, fuzzy
msgid "`@QuarkusMainTest` does **not** support the following features:"
msgstr "`@QuarkusMainTest` は以下の機能をサポートして *いません* ："

#: _versions/3.27/guides/command-mode-reference.adoc
#, fuzzy
msgid "Injection of CDI beans"
msgstr "CDI豆の注入"

#: _versions/3.27/guides/command-mode-reference.adoc
#, fuzzy
msgid "Using Panache entities"
msgstr "Panache エンティティの使用"

#: _versions/3.27/guides/command-mode-reference.adoc
#, fuzzy
msgid "Using mocks with `@InjectMock`"
msgstr "でモックを使用します。 `@InjectMock`"

#: _versions/3.27/guides/command-mode-reference.adoc
#, fuzzy
msgid "Usually, it's best to use a combination of `@QuarkusMainTest` tests for testing application externals, and `@QuarkusTest` tests for fine-grained testing which requires access to application internals."
msgstr "通常、アプリケーションの外部をテストするための `@QuarkusMainTest` テストと、アプリケーションの内部へのアクセスを必要とする細か なテストを行うための `@QuarkusTest` テストを組み合わせて使用するのが最善です。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Mocking"
msgstr "モック"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid ""
"CDI injection is not supported in the `@QuarkusMainTest` tests.\n"
"Consequently, mocking CDI beans with `QuarkusMock` or `@InjectMock` is not supported either."
msgstr "CDI インジェクションは `@QuarkusMainTest` テストではサポートされていません。 そのため、 `QuarkusMock` や `@InjectMock` を使用して CDI Bean をモックすることもサポートされていません。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "It is possible to mock CDI beans by leveraging xref:getting-started-testing.adoc#testing_different_profiles[test profiles] though."
msgstr "xref:getting-started-testing.adoc#testing_different_profiles[テストプロファイル] を活用することで、CDI Beanのモックを作成することが可能です。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "For instance, in the following test, the launched application would receive a mocked singleton `CdiBean1`. The implementation `MockedCdiBean1` is provided by the test:"
msgstr "例えば、次のテストでは、起動されたアプリケーションはモックされたシングルトン `CdiBean1` を受け取ります。実装 `MockedCdiBean1` はテストによって提供されます："

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "List all the CDI beans for which you want to enable an alternative mocked bean."
msgstr "代替モックビーンを有効にしたい CDI ビーンをすべて列挙します。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Use `@Alternative` without a `@Priority`. Make sure you don't use `@Mock`."
msgstr "`Alternative` を `@Priority` なしで使用します。 `@Mock` を使用しないことを確認してください。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "The scope of the mocked bean should be consistent with the original one."
msgstr "モックされたビーンのスコープは、元のビーンと一致する必要があります。"

#: _versions/3.27/guides/command-mode-reference.adoc
msgid "Using this pattern, you can enable specific alternatives for any given test."
msgstr "このパターンを使用すると、任意のテストに対して特定の選択肢を有効にすることができます。"
