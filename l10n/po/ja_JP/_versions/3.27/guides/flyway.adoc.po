msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/flyway.adoc
msgid "Using Flyway"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "https://flywaydb.org/[Flyway] is a popular database migration tool that is commonly used in JVM environments."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Quarkus provides first class support for using Flyway as will be explained in this guide."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Setting up support for Flyway"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "As shown in the <<developing-with-flyway>> section, to start using Flyway with your project, you just need to:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "add your migrations to the `{migrations-path}` folder as you usually do with Flyway"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"activate the `migrate-at-start` option to migrate the schema automatically or inject the `Flyway` object and run\n"
"your migration as you normally do"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "In your build file, add the following dependencies:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "the Flyway extension"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "your JDBC driver extension (`quarkus-jdbc-postgresql`, `quarkus-jdbc-h2`, `quarkus-jdbc-mariadb`, ...)"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "unless you're using in-memory or file databases (such as H2 or SQLite), you need to add a flyway module dependency corresponding to the database you're using. (https://github.com/flyway/flyway/issues/3780[for more details])"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"Flyway support relies on the Quarkus datasource config.\n"
"It can be customized for the default datasource as well as for every <<multiple-datasources,named datasource>>.\n"
"First, you need to add the datasource config to the `{config-file}` file\n"
"in order to allow Flyway to manage the schema.\n"
"Also, you can customize the Flyway behaviour by using the following properties:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Developing with Flyway"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "The following is an example for the `{config-file}` file:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Add a SQL migration to the default folder following the Flyway naming conventions: `{migrations-path}/V1.0.0__Quarkus.sql`"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"Now you can start your application and Quarkus will run the Flyway's\n"
"migrate method according to your config."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"With `quarkus.flyway.migrate-at-start=true`, as in the example\n"
"above, Quarkus will execute the Flyway migration as part of the\n"
"xref:lifecycle.adoc[application startup]."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Inject the Flyway object if you want to use it directly"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"In dev mode Quarkus will automatically restart the application if\n"
"any of the existing migration scripts get modified. If you want to take\n"
"advantage of this while developing and testing new migration scripts,\n"
"you will want to set `%dev.quarkus.flyway.clean-at-start=true`, so that\n"
"Flyway actually runs the modified migration."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Repairing the Flyway schema history table"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"There are different scenarios which may require _repairing_ the Flyway schema history table.\n"
"One such scenario is when a migration fails in a database which doesn't support transactional DDL\n"
"statements."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "In such situations the link:https://flywaydb.org/documentation/command/repair[Flyway repair command] comes in handy. In Quarkus this can either be executed automatically before the migration by setting `quarkus.flyway.repair-at-start=true` or manually by injecting the `Flyway` object and calling `Flyway#repair()`."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Multiple datasources"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"Flyway can be configured for multiple datasources.\n"
"The Flyway properties are prefixed exactly the same way as the named datasources, for example:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"Notice there's an extra bit in the key.\n"
"The syntax is as follows: `quarkus.flyway.[optional name.][datasource property]`."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Without configuration, Flyway is set up for every datasource using the default settings."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Customizing Flyway"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "In cases where Flyway needs to be configured in addition to the configuration options that Quarkus provides, the `io.quarkus.flyway.FlywayConfigurationCustomizer` class comes in handy."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "To customize Flyway for the default datasource, simply add a bean like so:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"When named datasources are used, the `@FlywayDataSource` annotation can be used to specify the datasource to which the customizer applies.\n"
"For example, if there are multiple datasources one of which is called `users` and customization of Flyway is needed for only that datasource,\n"
"then the following code can be used:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Using the Flyway object"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "In case you are interested in using the `Flyway` object directly, you can inject it as follows:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Inject Flyway for named datasources using the Quarkus `FlywayDataSource` qualifier"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Inject Flyway for named datasources"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Use the Flyway instance directly"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Flyway and Hibernate ORM"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "When using Flyway together with Hibernate ORM, you can use the Dev UI to generate the initial schema creation script."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "You can find more information about this feature in the xref:hibernate-orm.adoc#flyway[Hibernate ORM guide]."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Flyway and Reactive datasources"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"Flyway internally relies on a JDBC datasource,\n"
"whereas reactive use cases will rely on xref:reactive-sql-clients.adoc[reactive SQL clients],\n"
"either directly or through xref:hibernate-reactive.adoc[Hibernate Reactive].\n"
"This is not a problem in Quarkus,\n"
"because xref:datasource.adoc#jdbc-and-reactive-datasources-simultaneously[a single configured datasource can be made available both through reactive clients and JDBC]."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"To use Flyway on a datasource you otherwise access reactively,\n"
"simply make sure to configure that datasource\n"
"both as xref:datasource.adoc#jdbc-datasource[JDBC]\n"
"and xref:datasource.adoc#reactive-datasource[reactive].\n"
"This involves in particular adding dependencies to Quarkus extensions\n"
"for both the JDBC driver and the reactive client,\n"
"for instance `quarkus-jdbc-postgresql` *and* `quarkus-reactive-pg-client`."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Flyway on Kubernetes"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Sometimes, it's helpful not to execute Flyway initialization on each application startup. One such example is when deploying"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"on Kubernetes, where it doesn't make sense to execute Flyway on every single replica. Instead it's desirable to execute it\n"
"once and then start the actual application without Flyway. To support this use case, when generating manifests for Kubernetes\n"
"the generated manifests contain a Kubernetes initialization `Job` for Flyway.\n"
"The `Job` performs initialization and the actual `Pod`, will starts once the `Job` is successfully completed."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Disabling"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "The feature is enabled by default and can be globally disabled, using:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "or on OpenShift:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Using a custom image that controls waiting for the Job"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "To change the `wait-for` image which by default is `groundnuty/k8s-wait-for:no-root-v1.7` you can use:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "**Note**: In this context globally means `for all extensions that support init task externalization`."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Known Issues in Flyway"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Oracle: Multiple schemas in Dev Services"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid ""
"When having multiple schemas in Oracle, you can use the `quarkus.flyway.schemas` property to specify the schemas that Flyway should manage.\n"
"However, because this is executed in the DB as the `quarkus` user, you need to either give DBA privileges to the user that is executing the migration (`quarkus`) or perform the necessary DDLs before the Dev Service starts. This is done with the `quarkus.datasource.devservices.init-privileged-script-path` configuration."
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Giving DBA privileges to the user"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "In your application, create a SQL file named `001-devservice-init.sql` (for ordering purposes, it can be any name really) in your `src/main/resources` with the following content:"
msgstr ""

#: _versions/3.27/guides/flyway.adoc
msgid "Add the following configuration to your `application.properties`:"
msgstr ""
