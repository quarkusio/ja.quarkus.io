msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Quarkus Reactive Architecture"
msgstr "Quarkus リアクティブアーキテクチャ"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Quarkus is reactive.\n"
"It's even more than this: Quarkus unifies reactive and imperative programming.\n"
"You don't even have to choose: you can implement reactive components and imperative components then combine them inside the very **same** application.\n"
"No need to use different stacks, tooling or APIs; Quarkus bridges both worlds."
msgstr "Quarkusはリアクティブです。それだけではありません。Quarkusは、リアクティブ型プログラミングと命令型プログラミングを統合しています。リアクティブ型なコンポーネントと命令型のコンポーネントを実装し、 *同じ* アプリケーション内で組み合わせることができます。異なるスタック、ツール、APIを使用する必要はありません。Quarkusは両方の世界の架け橋です。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"This page will explain what we mean by _Reactive_ and how Quarkus enables it.\n"
"We will also discuss execution and programming models.\n"
"Finally, we will list the Quarkus extensions offering reactive facets."
msgstr "このページでは、 _リアクティブ_ とは何を意味するのか、またQuarkusがどのようにそれを可能にするのかを説明します。また、実行モデルとプログラミングモデルについても説明します。最後に、リアクティブな機能を提供するQuarkusのエクステンションの一覧を示します。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "What is _Reactive_?"
msgstr "_リアクティブ_ とは？"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"The _Reactive_ word is overloaded and associated with many concepts such as back-pressure, monads, or event-driven architecture.\n"
"So, let's clarify what we mean by _Reactive_."
msgstr "_リアクティブ_ という言葉は多重定義 (オーバーロード) されていて、バックプレッシャー、モナド、イベントドリブンアーキテクチャなど、多くの概念と関連付けられています。そこで、我々の _リアクティブ_ の意味を明確にしましょう。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"_Reactive_ is a set of principles and guidelines to build responsive distributed systems and applications.\n"
"The https://www.reactivemanifesto.org/[Reactive Manifesto] characterizes _Reactive Systems_ as distributed systems having four characteristics:"
msgstr "_リアクティブ_ とは、応答性の高い分散システムやアプリケーションを構築するための原則とガイドラインのセットです。 link:https://www.reactivemanifesto.org/[リアクティブマニフェスト]では、 _リアクティブシステム_ を4つの特徴を持つ分散システムとしています。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Responsive - they must respond in a timely fashion"
msgstr "応答性 (Responsive) - タイムリーに対応してくれること"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Elastic - they adapt themselves to the fluctuating load"
msgstr "伸縮性 (Elastic) - 変動する負荷に適応すること"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Resilient - they handle failures gracefully"
msgstr "回復性 (Resilient) - 障害をグレースフルに処理すること"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Asynchronous message passing - the component of a reactive system interact using messages"
msgstr "非同期メッセージパッシング (Asynchronous message passing) - リアクティブシステムのコンポーネントがメッセージで相互作用すること"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "In addition to this, the https://principles.reactive.foundation/[Reactive Principles white paper] lists a set of rules and patterns to help the construction of reactive systems."
msgstr "これに加えて、 link:https://principles.reactive.foundation/[リアクティブ原則ホワイトペーパー]には、リアクティブシステムの構築に役立つ一連のルールとパターンが記載されています。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Reactive Systems and Quarkus"
msgstr "リアクティブシステムとQuarkus"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Reactive System is an architectural style that can be summarized by: distributed systems done right.\n"
"Relying on asynchronous message passing helps enforce the loose coupling (both in terms of space and time) between the different components.\n"
"You send messages to virtual destinations. The receiver can be located anywhere, or even not yet exist at the time of the message dispatch.\n"
"The elasticity pillar allows scaling up and down individual components according to the load.\n"
"Elasticity also provides redundancy, which helps with the resilience pillar.\n"
"Failures are inevitable.\n"
"Components forming a reactive system must handle them gracefully, avoid cascading failures, and self-adapt themselves."
msgstr "リアクティブシステムは、「分散システムを正しく実現する」という言葉で表現されるアーキテクチャスタイルです。非同期のメッセージパッシングに頼ることで、異なるコンポーネント間の（空間的にも時間的にも）疎結合を実現しています。メッセージは仮想的な宛先に送られます。受信者はどこにでもいることができますし、メッセージ送信時にはまだ存在していないこともあります。弾力性の柱は、負荷に応じて個々のコンポーネントをスケールアップまたはスケールダウンすることができます。また、弾力性は冗長性を提供し、これは回復性の柱に役立ちます。失敗は避けられません。リアクティブシステムを構成するコンポーネントは、障害をグレースフルに処理し、障害の連鎖を回避し、自己適応しなければなりません。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"A responsive system can continue to handle the request while facing failures and under fluctuating load.\n"
"Quarkus has been tailored for that.\n"
"It provides features that will help you design, implement and operate reactive systems."
msgstr "レスポンシブなシステムは、障害に直面しても、負荷が変動しても、リクエストを処理し続けることができます。Quarkusはそのために調整されています。リアクティブなシステムの設計、実装、運用に役立つ機能を備えています。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Reactive Applications"
msgstr "リアクティブ・アプリケーション"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Quarkus is not only going to help you build reactive systems.\n"
"It's also going to make sure that each constituent enforces the reactive principles and is highly efficient."
msgstr "Quarkusは、リアクティブなシステムの構築を支援するだけではありません。また、各構成要素がリアクティブ原則を実行し、非常に効率的であることも担保します。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Efficiency is essential, especially in the Cloud and in containerized environments.\n"
"Resources, such as CPU and memory, are shared among multiple applications.\n"
"Greedy applications that consume lots of memory are inefficient and put penalties on sibling applications.\n"
"You may need to request more memory, CPU, or bigger virtual machines.\n"
"It either increases your monthly Cloud bill or decreases your deployment density."
msgstr "特にクラウドやコンテナ化された環境では、効率化が不可欠です。CPUやメモリなどのリソースは、複数のアプリケーションで共有されます。メモリを大量に消費する貪欲なアプリケーションは非効率的であり、兄弟アプリケーションにペナルティを与えます。より多くのメモリ、CPU、またはより大きな仮想マシンを要求する必要があるかもしれません。これは、毎月のクラウド料金を増加させるか、デプロイ密度を低下させるかします。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"I/O is an essential part of almost any modern system.\n"
"Whether it is to call a remote service, interact with a database, or send messages to a broker, there are all I/O-based operations.\n"
"Efficiently handling them is critical to avoid greedy applications.\n"
"For this reason, Quarkus uses non-blocking I/O, which allows a low number of OS threads to manage many concurrent I/Os.\n"
"As a result, Quarkus applications allow for higher concurrency, use less memory, and improve the deployment density."
msgstr "I/Oは、ほぼすべての現代のシステムに不可欠な要素です。リモートサービスの呼び出し、データベースとのやりとり、ブローカーへのメッセージ送信など、全てI/Oベースの操作です。それらを効率的に処理することは、貪欲なアプリケーションを避けるために重要です。このため、QuarkusではノンブロッキングI/Oを使用しています。これにより、少ない数のOSスレッドで多数の同時I/Oを管理できます。その結果、Quarkusのアプリケーションは、より高い同時実行性を可能にし、より少ないメモリしか使用せず、デプロイ密度が向上します。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "How does Quarkus enable Reactive?"
msgstr "Quarkusはどのようにしてリアクティブを実現するのですか？"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Under the hood, Quarkus has a reactive engine.\n"
"This engine, powered by Eclipse Vert.x and Netty, handles the non-blocking I/O interactions."
msgstr "Quarkusの中身にはリアクティブエンジンがあります。このエンジンは、Eclipse Vert.xとNettyを搭載しており、ノンブロッキングI/Oインタラクションを処理します。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Quarkus extensions and the application code can use this engine to orchestrate I/O interactions, interact with databases, send and receive messages, and so on."
msgstr "Quarkusのエクステンションとアプリケーションコードは、このエンジンを使用して、I/Oインタラクションのオーケストレーション、データベースとのインタラクション、メッセージの送受信などを行うことができます。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Reactive execution model"
msgstr "リアクティブ実行モデル"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"While using non-blocking I/O has tremendous benefits, it does not come for free.\n"
"Indeed, it introduces a new execution model quite different from the one used by classical frameworks."
msgstr "ノンブロッキングI/Oを使用することは非常に大きなメリットがありますが、それは無料ではありません。実際、ノンブロッキングI/Oを使用すると、従来のフレームワークで使用されていたものとはまったく異なる新しい実行モデルが導入されます。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Traditional applications use blocking I/O and an imperative (sequential) execution model.\n"
"So, in an application exposing an HTTP endpoint, each HTTP request is associated with a thread.\n"
"In general, that thread is going to process the whole request and the thread is tied up serving only that request for the duration of that request.\n"
"When the processing requires interacting with a remote service, it uses blocking I/O.\n"
"The thread is blocked, waiting for the result of the I/O.\n"
"While that model is simple to develop with (as everything is sequential), it has a few drawbacks.\n"
"To handle concurrent requests, you need multiple threads, so, you need to introduce a worker thread pool.\n"
"The size of this pool constrains the concurrency of the application.\n"
"In addition, each thread has a cost in terms of memory and CPU.\n"
"Large thread pools result in greedy applications."
msgstr "従来のアプリケーションは、ブロッキングI/Oと命令型（シーケンシャル）の実行モデルを採用しています。そのため、HTTPエンドポイントを公開するアプリケーションでは、各HTTPリクエストが1つのスレッドに関連付けられています。一般的には、そのスレッドはリクエスト全体を処理することになり、スレッドはそのリクエストの間、そのリクエストだけにサービスを提供することに縛られます。処理の中でリモートサービスとのやり取りが必要な場合は、ブロッキングI/Oを使用します。スレッドはブロックされ、I/Oの結果を待つことになります。このモデルは、すべてが逐次処理であるため、開発は簡単ですが、いくつかの欠点があります。同時リクエストを処理するには、複数のスレッドが必要になるため、ワーカースレッドプールを導入する必要があります。このプールのサイズは、アプリケーションの並行性を制約します。また、各スレッドにはメモリとCPUのコストがかかります。スレッドプールが大きいと、貪欲なアプリケーションになってしまいます。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"As we have seen above, non-blocking I/O avoids that problem.\n"
"A few threads can handle many concurrent I/O.\n"
"If we go back to the HTTP endpoint example, the request processing is executed on one of these I/O threads.\n"
"Because there are only a few of them, you need to use them wisely.\n"
"When the request processing needs to call a remote service, you can't block the thread anymore.\n"
"You schedule the I/O and pass a continuation, i.e., the code to execute once the I/O completes."
msgstr "上で見てきたように、ノンブロッキングI/Oはその問題を回避します。数個のスレッドで多数の同時I/Oを処理することができます。HTTPエンドポイントの例に戻ると、リクエスト処理はこのI/Oスレッドの1つで実行されます。I/Oスレッドは数が少ないので、賢く使いこなす必要があります。リクエスト処理でリモートサービスを呼び出す必要がある場合は、もうスレッドをブロックすることはできません。I/Oをスケジューリングし、継続（continuation、I/Oが完了した後に実行するコード）を渡します。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "This model is much more efficient, but we need a way to write code to express these continuations."
msgstr "このモデルははるかに効率的ですが、これらの継続性を表現するためのコードを書く方法が必要です。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Reactive Programming Models"
msgstr "リアクティブ・プログラミング・モデル"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"The Quarkus architecture, based on non-blocking I/O and message passing, allows multiple supporting reactive development models that are all different in how they express continuations.\n"
"The two main ways to write reactive code with Quarkus are:"
msgstr "ノンブロッキングI/OとメッセージパッシングをベースにしたQuarkusのアーキテクチャでは、継続性の表現方法が異なる複数のリアクティブ開発モデルをサポートしています。Quarkusでリアクティブコードを書くには、主に以下の2つの方法があります。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Reactive Programming with https://smallrye.io/smallrye-mutiny[Mutiny], and"
msgstr "link:https://smallrye.io/smallrye-mutiny[Mutiny]を用いたリアクティブ・プログラミング、および"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Coroutines with Kotlin"
msgstr "Kotlinのコルーチン"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"First, https://smallrye.io/smallrye-mutiny[Mutiny] is an intuitive, event-driven reactive programming library.\n"
"With Mutiny, you write event-driven code.\n"
"Your code is a pipeline receiving events and processing them.\n"
"Each stage in your pipeline can be seen as a continuation, as Mutiny invokes them when the upstream part of the pipeline emits an event."
msgstr "まず、 link:https://smallrye.io/smallrye-mutiny[Mutiny]は直感的なイベント駆動型のリアクティブ・プログラミング・ライブラリです。Mutinyでは、イベント駆動型のコードを書きます。あなたのコードは、イベントを受け取り、それを処理するパイプラインです。パイプラインの各ステージは継続と見ることができ、パイプラインの上流部分がイベントを発するとMutinyがそれらを呼び出すからです。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"The Mutiny API has been tailored to improve the readability and maintenance of the codebase.\n"
"Mutiny provides everything you need to orchestrate asynchronous actions, including concurrent execution.\n"
"It also offers a large set of operators to manipulate individual events and streams of events."
msgstr "MutinyのAPIは、コードベースの読みやすさとメンテナンス性を向上させるために調整されています。Mutinyは、同時実行を含む非同期アクションを組織化するために必要なすべてを提供します。また、個々のイベントやイベントのストリームを操作するための大規模な演算子のセットも提供しています。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Find more info about Mutiny and its usage in Quarkus on xref:mutiny-primer.adoc[Mutiny support documentation]."
msgstr "Mutinyと、Quarkusでの使用に関する詳細は、 link:mutiny-primer.html[Mutinyサポートドキュメント]を参照してください。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Co-routines are a way to write asynchronous code sequentially.\n"
"It suspends the execution of the code during I/O and registers the rest of the code as the continuation.\n"
"Kotlin coroutines are great when developing in Kotlin and only need to express sequential compositions (chain of co-dependent asynchronous tasks)."
msgstr "コルーチンは、非同期のコードを逐次的に記述する方法です。I/O時にコードの実行を一時停止し、残りのコードを継続として登録します。Kotlinコルーチンは、Kotlinで開発する場合に最適であり、シーケンシャルコンポジション（相互依存する非同期タスクのチェーン）を表現するだけで済みます。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Unification of Imperative and Reactive"
msgstr "命令型とリアクティブ型の統一"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Changing your development model is not simple.\n"
"It requires relearning and restructuring code in a non-blocking fashion.\n"
"Fortunately, you don't have to do it!"
msgstr "開発モデルの変更は簡単ではありません。再学習および、ノンブロッキングでコードを再構築する必要があります。幸いなことに、その必要はありません。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Quarkus is inherently reactive thanks to its reactive engine.\n"
"But, you, as an application developer, don't have to write reactive code.\n"
"Quarkus unifies reactive and imperative.\n"
"It means that you can write traditional blocking applications on Quarkus.\n"
"But how do you avoid blocking the I/O threads?\n"
"Quarkus implements a https://en.wikipedia.org/wiki/Proactor_pattern[proactor pattern] that switches to worker thread when needed."
msgstr "Quarkusは、リアクティブエンジンを搭載しているため、本質的にリアクティブです。しかし、アプリケーション開発者としては、リアクティブなコードを書く必要はありません。Quarkusはリアクティブ型と命令型を統合しています。つまり、従来のブロッキングアプリケーションをQuarkusで書くことができるのです。しかし、I/Oスレッドをブロックしないようにするにはどうすればいいのでしょうか？Quarkusでは、必要に応じてワーカースレッドに切り替える link:https://en.wikipedia.org/wiki/Proactor_pattern[プロアクターパターン]を実装しています。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Thanks to hints in your code (such as the `@Blocking` and `@NonBlocking` annotations), Quarkus extensions can decide when the application logic is blocking or non-blocking.\n"
"If we go back to the HTTP endpoint example from above, the HTTP request is always received on an I/O thread.\n"
"Then, the extension dispatching that request to your code decides whether to call it on the I/O thread, avoiding thread switches, or on a worker thread.\n"
"This decision depends on the extension.\n"
"For example, the Quarkus REST (formerly RESTEasy Reactive) extension uses the `@Blocking` annotation to determine if the method needs to be invoked using a worker thread, or if it can be invoked using the I/O thread."
msgstr ""
"コード内のヒント（ `@Blocking` や `@NonBlocking` アノテーションなど）のおかげで、Quarkus エクステンションはアプリケーションロジックがブロッキングかノンブロッキングかを判断できます。\n"
"先ほどのHTTPエンドポイントの例に戻ると、HTTPリクエストは常にI/Oスレッドで受信されます。そして、リクエストをコードにディスパッチするエクステンションは、スレッドスイッチを回避するためにI/Oスレッドで呼び出すか、ワーカースレッドで呼び出すかを決定します。この判断はエクステンションによって異なります。たとえば、Quarkus REST (旧 RESTEasy Reactive) エクステンションは、 `@Blocking` アノテーションを使用して、メソッドをワーカースレッドで呼び出す必要があるか、I/O スレッドで呼び出せるかを判断します。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Quarkus is pragmatic and versatile.\n"
"You decide how to develop and execute your application.\n"
"You can use the imperative way, the reactive way, or mix them, using reactive on the parts of the application under high concurrency."
msgstr "Quarkusは実用的で多機能です。アプリケーションをどのように開発し、実行するかはユーザーが決定します。命令型の方法やリアクティブ型の方法を使用することもできますし、それらを混在させて、並行性の高いアプリケーションの部分にリアクティブ型の方法を使用することもできます。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Quarkus Extensions enabling Reactive"
msgstr "リアクティブを可能にするQuarkusエクステンション"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Quarkus offers a large set of reactive APIs and features.\n"
"This section lists the most important, but it's not an exhaustive list.\n"
"Quarkus adds new features in every release, and the https://github.com/quarkiverse[Quarkiverse] proposes many extensions enabling _Reactive_."
msgstr "Quarkusは、多くのリアクティブAPIと機能を提供しています。このセクションでは、最も重要なものをリストアップしていますが、網羅的なリストではありません。Quarkusはリリースごとに新しい機能を追加しており、 link:https://github.com/quarkiverse[Quarkiverse]では _リアクティブ_ を有効にする多くのエクステンションが提案されています。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "HTTP"
msgstr "HTTP"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Quarkus REST: an implementation of Jakarta REST tailored for the Quarkus architecture.\n"
"It follows a reactive-first approach but allows imperative code using the `@Blocking` annotation."
msgstr ""
"Quarkus REST: Quarkusアーキテクチャに合わせたJakarta RESTの実装です。\n"
"リアクティブファーストアプローチに従いますが、 `@Blocking` アノテーションを使用した命令型コードも可能です。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Reactive Routes: a declarative way to register HTTP routes directly on the Vert.x router used by Quarkus to route HTTP requests to methods."
msgstr "Reactive Routes: HTTPリクエストをメソッドにルーティングするためにQuarkusが使用するVert.xルーターに直接HTTPルートを登録する宣言的な方法です。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"REST Client: allows consuming HTTP endpoints.\n"
"Under the hood, it uses the non-blocking I/O features from Quarkus."
msgstr ""
"RESTクライアント：HTTPエンドポイントを消費できます。\n"
"QuarkusのノンブロッキングI/O機能を使用しています。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Qute - the Qute template engine exposes a reactive API to render templates in a non-blocking manner."
msgstr "Qute - Quteテンプレートエンジンは、テンプレートをノンブロッキングでレンダリングするリアクティブAPIを公開しています。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Data"
msgstr "データ"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Hibernate Reactive: a version of Hibernate ORM using asynchronous and non-blocking clients to interact with the database."
msgstr "Hibernate Reactive: Hibernate ORMの、非同期、ノンブロッキングのクライアントを使用してデータベースと対話するバージョンです。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Hibernate Reactive with Panache: provide active record and repository support on top of Hibernate Reactive."
msgstr "Hibernate Reactive with Panache: Hibernate Reactiveの上でアクティブレコードとリポジトリのサポートを提供します。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Reactive PostgreSQL client: an asynchronous and non-blocking client interacting with a PostgreSQL database, allowing high concurrency."
msgstr "リアクティブPostgreSQLクライアント：PostgreSQLデータベースと対話する非同期かつノンブロッキングなクライアントで、高い並行性を実現します。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Reactive MySQL client: an asynchronous and non-blocking client interacting with a MySQL database"
msgstr "リアクティブ MySQL クライアント: MySQL データベースと対話する非同期かつノンブロッキングなクライアント"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "The MongoDB extension: exposes an imperative and reactive (Mutiny) APIs to interact with MongoDB."
msgstr "MongoDBエクステンション: MongoDBと対話するための命令型およびリアクティブ型（Mutiny）のAPIを公開しています。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Mongo with Panache offers active record support for both the imperative and reactive APIs."
msgstr "Mongo with Panacheは、命令型APIとリアクティブ型APIの両方でアクティブレコードサポートを提供します。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "The Cassandra extension: exposes an imperative and reactive (Mutiny) APIs to interact with Cassandra"
msgstr "Cassandraエクステンション: Cassandraと対話するための命令型およびリアクティブ型（Mutiny）のAPIを公開しています。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "The Redis extension: exposes an imperative and reactive (Mutiny) APIs to store and retrieve data from a Redis key-value store."
msgstr "Redisエクステンション: Redisキーバリューストアからデータを保存・取得するための命令型およびリアクティブ型（Mutiny）のAPIを公開しています。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Event-Driven Architecture"
msgstr "イベント駆動型アーキテクチャ"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Reactive Messaging: allows implementing event-driven applications using reactive and imperative code."
msgstr "リアクティブ・メッセージング: リアクティブ型のコードと命令型のコードを使って、イベントドリブンなアプリケーションを実装することができます。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Kafka Connector for Reactive Messaging: allows implementing applications consuming and writing Kafka records"
msgstr "Kafka Connector for Reactive Messaging: Kafkaのレコードを消費したり書いたりするアプリケーションを実装できます。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "AMQP 1.0 Connector for Reactive Message: allows implementing applications sending and receiving AMQP messages."
msgstr "AMQP 1.0 Connector for Reactive Message: AMQPメッセージを送受信するアプリケーションを実装できます。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Network Protocols and Utilities"
msgstr "ネットワークプロトコルとユーティリティ"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"gRPC: implement and consume gRPC services.\n"
"Offer reactive and imperative programming interfaces."
msgstr "gRPC: gRPCサービスを実装し、消費します。反応型および命令型のプログラミング・インターフェースを提供。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "GraphQL: implement and query (client) data store using GraphQL. Offers Mutiny APIs and subscriptions as event streams."
msgstr "GraphQL: GraphQLを使用して（クライアント）データストアを実装し、クエリを実行します。Mutiny APIとイベントストリームとしてサブスクリプションを提供します。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Fault Tolerance: provide retry, fallback, circuit breakers abilities to your application.It can be used with Mutiny types."
msgstr "フォールトトレランス: リトライ、フォールバック、サーキットブレーカーなどの機能をアプリケーションに提供します。Mutiny型と一緒に利用出来ます。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Engine"
msgstr "エンジン"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid ""
"Vert.x : the underlying reactive engine of Quarkus.\n"
"The extension allows accessing to the managed Vert.x instance, as well as its Mutiny variant (exposing the Vert.x API using Mutiny types)"
msgstr "Vert.x：Quarkusの基礎となるリアクティブエンジンです。このエクステンションにより、マネージドVert.xインスタンスおよびそのMutiny版（Mutiny型を使用してVert.x APIを公開）にアクセスできます。"

#: _versions/3.27/guides/quarkus-reactive-architecture.adoc
msgid "Context Propagation: capture and propagate contextual objects (transaction, principal…) in a reactive pipeline"
msgstr "Context Propagation: リアクティブ・パイプラインでコンテキスト・オブジェクト（トランザクション、プリンシパル...）を捕捉し、伝搬させます。"
