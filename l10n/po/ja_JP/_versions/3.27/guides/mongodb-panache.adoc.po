msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Simplified MongoDB with Panache"
msgstr "Simplified MongoDB with Panache"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB is a well known NoSQL Database that is widely used, but using its raw API can be cumbersome as you need to express your entities and your queries as a MongoDB link:{mongodb-doc-root-url}/fundamentals/data-formats/documents/#document[`Document`]."
msgstr "MongoDB は広く利用されている有名な NoSQL データベースですが、エンティティとクエリを MongoDB link:{mongodb-doc-root-url}/bson/documents/#document[`Document`] として表現する必要があるため、生のAPIを使用するのは面倒です。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache provides active record style entities (and repositories) like you have in xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr "MongoDB with Panacheは、 link:hibernate-orm-panache.html[Hibernate ORM with Panache]にあるようなアクティブレコードスタイルのエンティティ（およびリポジトリ）を提供し、Quarkusでエンティティを簡単に楽しく書けるようにすることに重点を置いています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "It is built on top of the xref:mongodb.adoc[MongoDB Client] extension."
msgstr "これは、 link:mongodb.html[MongoDB Client]エクステンションの上に構築されています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "First: an example"
msgstr "最初に:例"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Panache allows you to write your MongoDB entities like this:"
msgstr "Panacheでは、MongoDBのエンティティをこのように書くことができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is compared to using the MongoDB API?\n"
"Does this look interesting? Read on!"
msgstr "MongoDBのAPIを使った場合と比べて、コードがどれだけコンパクトで読みやすくなったかお気づきでしょうか？これは面白いと思いませんか？読んでみてください。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"the `list()` method might be surprising at first. It takes fragments of PanacheQL queries (subset of JPQL) and contextualizes the rest.\n"
"That makes for very concise but yet readable code.\n"
"MongoDB native queries are also supported."
msgstr "`list()` の方法は、最初は驚くかもしれません。これは、PanacheQLのクエリ（JPQLのサブセット）の断片を取り出し、残りの部分を文脈化したものです。これにより、非常に簡潔でありながら読みやすいコードになっています。MongoDBのネイティブクエリもサポートしています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"MongoDB with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheMongoRepository`."
msgstr "上で説明したものは基本的に link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[アクティブレコードパターン]で、単にエンティティパターンと呼ばれることもあります。MongoDB with Panacheでは、 `PanacheMongoRepository` を通じて、より古典的な link:https://martinfowler.com/eaaCatalog/repository.html[リポジトリパターン]を使うこともできます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The solution is located in the `mongodb-panache-quickstart` link:{quickstarts-tree-url}/mongodb-panache-quickstart[directory]."
msgstr "ソリューションは `mongodb-panache-quickstart` link:{quickstarts-tree-url}/mongodb-panache-quickstart[ディレクトリー] にあります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"This command generates a Maven structure importing the Quarkus REST (formerly RESTEasy Reactive) Jackson and MongoDB with Panache extensions.\n"
"After this, the `quarkus-mongodb-panache` extension has been added to your build file."
msgstr ""
"このコマンドは、Quarkus REST (旧称 RESTEasy Reactive) Jackson と MongoDB with Panache エクステンションをインポートする Maven 構造を生成します。\n"
"これで、 `quarkus-mongodb-panache` エクステンションがビルドファイルに追加されました。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If you don't want to generate a new project, add the dependency in your build file:"
msgstr "新しいプロジェクトを生成したくない場合は、ビルドファイルに依存関係を追加してください。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Setting up and configuring MongoDB with Panache"
msgstr "Panache による MongoDB のセットアップおよび設定"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "To get started:"
msgstr "始めるには"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "add your settings in `{config-file}`"
msgstr "`{config-file}` に設定を追加します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Make your entities extend `PanacheMongoEntity` (optional if you are using the repository pattern)"
msgstr "エンティティが `PanacheMongoEntity` を継承するようにする（リポジトリパターンを使用している場合はオプション）。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Optionally, use the `@MongoEntity` annotation to specify the name of the collection, the name of the database or the name of the client."
msgstr "オプションとして、 `@MongoEntity` アノテーションを使用して、コレクションの名前、データベースの名前、またはクライアントの名前を指定します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr "次に、関連する設定プロパティを `{config-file}` に追加します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The `quarkus.mongodb.database` property will be used by MongoDB with Panache to determine the name of the database where your entities will be persisted (if not overridden by `@MongoEntity`)."
msgstr "`quarkus.mongodb.database` プロパティは、MongoDB with Panache でエンティティを永続化するデータベースの名前を決定するのに使われます（ `@MongoEntity` でオーバーライドされていない場合）。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The `@MongoEntity` annotation allows configuring:"
msgstr "`@MongoEntity` のアノテーションでは次の設定が可能です。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "the name of the client for multitenant application, see xref:mongodb.adoc#multiple-mongodb-clients[Multiple MongoDB Clients]. Otherwise, the default client will be used."
msgstr "マルチテナントアプリケーション用のクライアントの名前を指定することもできます。 xref:mongodb.adoc#multiple-mongodb-clients[Multiple MongoDB Clients] を参照してください。それ以外の場合は、デフォルトのクライアントを使います。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "the name of the database, otherwise the `quarkus.mongodb.database` property or a link:{mongodb-doc-root-url}#multitenancy[`MongoDatabaseResolver`] implementation will be used."
msgstr "データベースの名前、それ以外の場合は `quarkus.mongodb.database` プロパティーまたは link:{mongodb-doc-root-url}#multitenancy[`MongoDatabaseResolver`] 実装が使用されます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "the name of the collection, otherwise the simple name of the class will be used."
msgstr "コレクションの名前。そうでない場合はクラスのシンプルな名前が使われます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "For advanced configuration of the MongoDB client, you can follow the xref:mongodb.adoc#configuring-the-mongodb-database[Configuring the MongoDB database guide]."
msgstr "MongoDBクライアントの高度な設定については、 link:mongodb.html#configuring-the-mongodb-database[Configuring the MongoDB database ガイド]に従ってください。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Solution 1: using the active record pattern"
msgstr "解決策1:アクティブレコードパターンを使用する"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Defining your entity"
msgstr "エンティティの定義"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheMongoEntity` and add your columns as public fields.\n"
"You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "Panacheのエンティティを定義するには、 `PanacheMongoEntity` を拡張して、カラムをパブリックフィールドとして追加するだけです。コレクション、データベース、またはクライアントの名前をカスタマイズする必要がある場合は、 `@MongoEntity` アノテーションをエンティティに追加することができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Annotating with `@MongoEntity` is optional. Here the entity will be stored in the `ThePerson` collection instead of the default `Person` collection."
msgstr "`@MongoEntity` でのアノテーションはオプションです。ここでは、エンティティは、デフォルトの `Person` コレクションではなく、 `ThePerson` コレクションに保存されます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr "MongoDB with Panacheでは、link:{mongodb-doc-root-url}/bson/pojos/[PojoCodecProvider] を使用してエンティティを MongoDB `Document` に変換します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "You will be allowed to use the following annotations to customize this mapping:"
msgstr "このマッピングをカスタマイズするために、以下のアノテーションを使用することができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`@BsonId`: allows you to customize the ID field, see <<custom-ids,Custom IDs>>."
msgstr "`@BsonId`: IDフィールドをカスタマイズすることができます。「 link:#custom-ids[カスタムID]」を参照してください。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`@BsonProperty`: customize the serialized name of the field."
msgstr "`@BsonProperty`: フィールドのシリアル化された名前をカスタマイズします。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`@BsonIgnore`: ignore a field during the serialization."
msgstr "`@BsonIgnore`: シリアル化の際にフィールドを無視することができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If you need to write accessors, you can:"
msgstr "アクセサを書く必要がある場合は、以下のようにできます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr "また、当社のフィールドアクセスリライトのおかげで、ユーザーが `person.name` を読むときには、実際に `getName()` アクセサが呼び出されます。これはフィールドの書き込みやセッターについても同様です。これにより、すべてのフィールドの呼び出しが、対応するゲッター/セッターの呼び出しに置き換えられるため、実行時に適切なカプセル化が可能になります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Most useful operations"
msgstr "最も便利な操作"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr "エンティティーを記述したら、ここでは実行できる最も一般的な操作を紹介します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "All `list` methods have equivalent `stream` versions."
msgstr "すべての `list` メソッドは、同等の `stream` バージョンがあります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "A `persistOrUpdate()` method persists or updates an entity in the database, it uses the __upsert__ capability of MongoDB to do it in a single query."
msgstr "`persistOrUpdate()` メソッドは、データベース内のエンティティーを保持または更新します。これは、MongoDB の __upsert__ 機能を使用して、単一のクエリーで実行されます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Adding entity methods"
msgstr "エンティティメソッドの追加"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr "エンティティに対するカスタムクエリを、エンティティ自体の中に追加できます。そうすることで、自分や同僚が簡単に見つけることができ、クエリは操作するオブジェクトと一緒に配置されます。エンティティクラスにスタティックメソッドとして追加するのがPanache Active Recordのやり方です。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Solution 2: using the repository pattern"
msgstr "解決策2：リポジトリパターンの使用"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You can define your entity as regular POJO.\n"
"You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr "エンティティは通常のPOJOとして定義することができます。コレクション、データベース、またはクライアントの名前をカスタマイズする必要がある場合は、 `@MongoEntity` アノテーションをエンティティに追加できます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr "MongoDB with Panacheでは、 link:{mongodb-doc-root-url}/bson/pojos/[PojoCodecProvider] を使用してエンティティを MongoDB `Document` に変換します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You can use public fields or private fields with getters/setters.\n"
"If you don't want to manage the ID by yourself, you can make your entity extends `PanacheMongoEntity`."
msgstr "ゲッターやセッターを使って、パブリックフィールドやプライベートフィールドを使うことができます。IDを自分で管理したくない場合は、 `PanacheMongoEntity` を拡張したエンティティを作ることができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Defining your repository"
msgstr "リポジトリの定義"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"When using Repositories, you can get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheMongoRepository`:"
msgstr "Repositories を使用する場合、それらが `PanacheMongoRepository` を実装するようにし、Repository に注入することで、アクティブレコードパターンと全く同じ便利なメソッドを取得することができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"All the operations that are defined on `PanacheMongoEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr "`PanacheMongoEntityBase` で定義されているすべての操作は、あなたのリポジトリで利用できます。そのため、これを使用することは、注入する必要があることを除けば、active record パターンを使用することとまったく同じです。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr "リポジトリを書くことで実行可能な最も一般的な操作は以下の通りです。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr "残りのドキュメントでは、アクティブレコードパターンに基づく使用法のみを示していますが、リポジトリパターンでも実行できることを覚えておいてください。リポジトリパターンの例は簡潔にするために省略しています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Writing a Jakarta REST resource"
msgstr "Jakarta RESTリソースの書き方"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "First, include one of the RESTEasy extensions to enable Jakarta REST endpoints, for example, add the `io.quarkus:quarkus-rest-jackson` dependency for Jakarta REST and JSON support."
msgstr "まず、RESTEasy エクステンションの 1 つを組み込み、Jakarta REST エンドポイントを有効にします。たとえば、Jakarta REST および JSON サポートの場合は `io.quarkus:quarkus-rest-jackson` 依存関係を追加します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr "そして、次のようなリソースを作成することで、Personエンティティの作成/読み取り/更新/削除が可能になります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Advanced Query"
msgstr "アドバンスドクエリー"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Paging"
msgstr "ページング"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You should only use `list` and `stream` methods if your collection contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr "`list` および `stream` メソッドは、コレクションに含まれるデータセットが十分に小さい場合にのみ使用してください。より大きなデータセットの場合は、同等の `find` メソッドを使用して、ページングが可能な `PanacheQuery` を返すことができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr "`PanacheQuery` 型には、ページングやリターンストリームを処理するための他の多くのメソッドがあります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Using a range instead of pages"
msgstr "ページではなく範囲を使用する"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`PanacheQuery` also allows range-based queries."
msgstr "`PanacheQuery` では、範囲ベースのクエリも可能です。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr "範囲とページを混在させることはできません。範囲を使用した場合、現在のページを持っていることに依存するすべてのメソッドは `UnsupportedOperationException` をスローします。 `page(Page)` もしくは `page(int, int)` を使用してページングに切り換えられます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Sorting"
msgstr "ソート"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "All methods accepting a query string also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr "クエリ文字列を受け付けるすべてのメソッドは、オプションで `Sort` パラメータも受け付けるので、ソートを抽象化することができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr "`Sort` クラスには、列を追加したり、ソート方向を指定したりするメソッドが豊富に用意されています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Simplified queries"
msgstr "シンプルなクエリ"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Normally, MongoDB queries are of this form: `{'firstname': 'John', 'lastname':'Doe'}`, this is what we call MongoDB native queries."
msgstr "通常、MongoDB のクエリは次のような形式です。 `{'firstname': 'John', 'lastname':'Doe'}` 、これを MongoDB ネイティブクエリと呼んでいます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You can use them if you want, but we also support what we call **PanacheQL** that can be seen as a subset of link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (or link:{hibernate-orm-docs-url}#hql[HQL]) and allows you to easily express a query.\n"
"MongoDB with Panache will then map it to a MongoDB native query."
msgstr ""
"link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (または link:{hibernate-orm-docs-url}#hql[HQL]) のサブセットとも言える *PanacheQL* もサポートしており、簡単にクエリーを表現できます。\n"
"MongoDB with Panacheは、それをMongoDBのネイティブクエリーにマッピングします。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If your query does not start with `{`, we will consider it a PanacheQL query:"
msgstr "`{` で始まらないクエリは、PanacheQL クエリとみなします。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`<singlePropertyName>` (and single parameter) which will expand to `{'singleColumnName': '?1'}`"
msgstr "`<singlePropertyName>` (およびシングルパラメータ) は `{'singleColumnName': '?1'}` に展開されます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`<query>` will expand to `{<query>}` where we will map the PanacheQL query to MongoDB native query form. We support the following operators that will be mapped to the corresponding MongoDB operators: 'and', 'or' ( mixing 'and' and 'or' is not currently supported), '=', '>', '>=', '<', '<=', '!=', 'is null', 'is not null', and 'like' that is mapped to the MongoDB `$regex` operator (both String and JavaScript patterns are supported)."
msgstr "`<query>` は `{<query>}` に展開され、PanacheQL のクエリを MongoDB のネイティブクエリ形式にマッピングします。以下の演算子をサポートしており、対応するMongoDBの演算子にマッピングされます。'and', 'or' ('and' と 'or' の混合は現在サポートされていません)、 '=', '&gt;', '&gt;=', '&lt;', '&lt;=', '!=', 'is null', 'is not null', そして MongoDB `$regex` 演算子にマッピングされる 'like' (String と JavaScript の両方のパターンをサポートしています)。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Here are some query examples:"
msgstr "クエリの例を紹介します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`firstname = ?1 and status = ?2` will be mapped to `{'firstname': ?1, 'status': ?2}`"
msgstr "`firstname = ?1 and status = ?2` は `{'firstname': ?1, 'status': ?2}` にマッピングされます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`amount > ?1 and firstname != ?2` will be mapped to `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"
msgstr "`amount > ?1 and firstname != ?2` は `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}` にマッピングされます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`lastname like ?1` will be mapped to `{'lastname': {'$regex': ?1}}`. Be careful that this will be link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB regex] support and not SQL like pattern."
msgstr "`lastname like ?1` は `{'lastname': {'$regex': ?1}}` にマッピングされます。これは link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB の正規表現]をサポートするもので、SQL のようなパターンではないことに注意しましょう。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`lastname is not null` will be mapped to `{'lastname':{'$exists': true}}`"
msgstr "`lastname is not null` は `{'lastname':{'$exists': true}}` にマッピングされます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`status in ?1` will be mapped to `{'status':{$in: ?1}}`"
msgstr "`status in ?1` は `{'status':{$in: ?1}}` にマッピングされます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB queries must be valid JSON documents,\n"
"using the same field multiple times in a query is not allowed using PanacheQL as it would generate an invalid JSON\n"
"(see link:https://github.com/quarkusio/quarkus/issues/12086[this issue on GitHub])."
msgstr "MongoDBのクエリは、有効なJSONドキュメントでなければなりません。同じフィールドをクエリ内で複数回使用することは、無効なJSONを生成することになるため、PanacheQLでは許可されません ( link:https://github.com/quarkusio/quarkus/issues/12086[GitHub のこの問題]を参照)。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Prior to Quarkus 3.16, when using `$in` with a list, you had to write your query with `{'status':{$in: [?1]}}`. Starting with Quarkus 3.16, make sure you use `{'status':{$in: ?1}}` instead. The list will be properly expanded with surrounding square brackets."
msgstr "Quarkus 3.16 より前のバージョンでは、リストのある `$in` を使用する場合、クエリーを `{'status':{$in: [?1]}}` のように記述する必要がありました。Quarkus 3.16 以降では、代わりに `{'status':{$in: ?1}}` を使用してください。リストは、適切に角括弧で囲まれて展開されます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"We also handle some basic date type transformations: all fields of type `Date`, `LocalDate`, `LocalDateTime` or `Instant` will be mapped to the\n"
"link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date] using the `ISODate` type (UTC datetime).\n"
"The MongoDB POJO codec doesn't support `ZonedDateTime` and `OffsetDateTime` so you should convert them prior usage."
msgstr "また、基本的な日付型の変換も行います。 `Date`, `LocalDate`, `LocalDateTime` もしくは `Instant` 型のすべてのフィールドは、 `ISODate` 型 (UTC datetime) を使って link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date]にマッピングされます。MongoDB POJO コーデックは `ZonedDateTime` と `OffsetDateTime` をサポートしていないので、使う前に変換しておく必要があります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache also supports extended MongoDB queries by providing a `Document` query, this is supported by the find/list/stream/count/delete/update methods."
msgstr "MongoDB with Panacheは、 `Document` クエリを提供することでMongoDBの拡張クエリもサポートしています。これはfind/list/stream/count/deleteメソッドでサポートされています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB with Panache offers operations to update multiple documents based on an update document and a query :\n"
"`Person.update(\"foo = ?1 and bar = ?2\", fooName, barName).where(\"name = ?1\", name)`."
msgstr "MongoDB with Panache はアップデートドキュメントおよびクエリーに基づいて複数のドキュメントを更新する操作を提供します: `Person.update(\"foo = ?1 and bar = ?2\", fooName, barName).where(\"name = ?1\", name)`"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "For these operations, you can express the update document the same way you express your queries, here are some examples:"
msgstr "これらの操作では、クエリを表現するのと同じように、更新文書を表現することができます。以下に例を示します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`<singlePropertyName>` (and single parameter) which will expand to the update document `{'$set' : {'singleColumnName': '?1'}}`"
msgstr "`<singlePropertyName>` (およびシングルパラメーター)で、更新ドキュメント `{'$set' : {'singleColumnName': '?1'}}` に展開します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`firstname = ?1 and status = ?2` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`firstname = ?1 and status = ?2` は、更新ドキュメント `{'$set' : {'firstname': ?1, 'status': ?2}}` にマッピングされます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`firstname = :firstname and status = :status` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`firstname = :firstname and status = :status` は、更新ドキュメント `{'$set' : {'firstname': :firstname, 'status': :status}}` にマッピングされます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`{'firstname' : ?1 and 'status' : ?2}` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr "`{'firstname' : ?1 and 'status' : ?2}` は、更新ドキュメント `{'$set' : {'firstname': ?1, 'status': ?2}}` にマップされます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`{'firstname' : :firstname and 'status' : :status}` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr "`{'firstname' : :firstname and 'status' : :status}` は、更新ドキュメント `{'$set' : {'firstname': :firstname, 'status': :status}}` にマップされます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`{'$inc': {'cpt': ?1}}` will be used as-is"
msgstr "`{'$inc': {'cpt': ?1}}` はそのまま使用されます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Query parameters"
msgstr "クエリパラメーター"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "You can pass query parameters, for both native and PanacheQL queries, by index (1-based) as shown below:"
msgstr "ネイティブクエリとPanacheQLクエリの両方で、以下のようにインデックス（1ベース）ごとにクエリパラメータを渡すことができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Or by name using a `Map`:"
msgstr "または、 `Map` を使った名前で、"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr "または便利なクラスである `Parameters` をそのまま使用するか、 `Map` を構築する。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr "すべてのクエリ操作は、インデックス( `Object…​`)または名前( `Map<String,Object>` または `Parameters`)でパラメータを渡すことができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "When you use query parameters, be careful that PanacheQL queries will refer to the Object parameters name but native queries will refer to MongoDB field names."
msgstr "クエリパラメータを使う場合、PanacheQLのクエリはObjectパラメータ名を参照しますが、ネイティブのクエリはMongoDBのフィールド名を参照するので注意が必要です。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Imagine the following entity:"
msgstr "次のようなエンティティを想像してみてください。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Both `findByNameWithPanacheQLQuery()` and `findByNameWithNativeQuery()` methods will return the same result but query written in PanacheQL\n"
"will use the entity field name: `name`, and native query will use the MongoDB field name: `lastname`."
msgstr "`findByNameWithPanacheQLQuery()` と `findByNameWithNativeQuery()` はどちらも同じ結果を返しますが、PanacheQL で書かれたクエリはエンティティのフィールド名 `name` を使用し、ネイティブクエリは MongoDB のフィールド名 `lastname` を使用します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Query projection"
msgstr "クエリの投影"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr "クエリの投影は、 `find()` のメソッドが返す `PanacheQuery` オブジェクトに対して `project(Class)` のメソッドで行うことができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You can use it to restrict which fields will be returned by the database,\n"
"the ID field will always be returned, but it's not mandatory to include it inside the projection class."
msgstr "これを使って、データベースから返されるフィールドを制限することができます。IDフィールドは常に返されますが、これをプロジェクションクラス内に含めることは必須ではありません。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"For this, you need to create a class (a POJO) that will only contain the projected fields.\n"
"This POJO needs to be annotated with `@ProjectionFor(Entity.class)` where `Entity` is the name of your entity class.\n"
"The field names, or getters, of the projection class will be used to restrict which properties will be loaded from the database."
msgstr "そのためには、投影されたフィールドのみを含むクラス（POJO）を作成する必要があります。このPOJOには、 `@ProjectionFor(Entity.class)` でアノテーションを付ける必要があります。 `Entity` はエンティティ・クラスの名前です。プロジェクション・クラスのフィールド名（ゲッター）は、データベースから読み込まれるプロパティを制限するために使用されます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Projection can be done for both PanacheQL and native queries."
msgstr "投影は、PanacheQLとネイティブクエリの両方で行うことができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Using `@BsonProperty` is not needed to define custom column mappings, as the mappings from the entity class will be used."
msgstr "エンティティクラスのマッピングが使用されるため、カスタムカラムマッピングを定義するために `@BsonProperty` を使用する必要はありません。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "You can have your projection class extends from another class. In this case, the parent class also needs to have use `@ProjectionFor` annotation."
msgstr "投影クラスが他のクラスを継承している場合があります。この場合、親クラスも `@ProjectionFor` アノテーションを持つ必要があります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Records are a good fit for projection classes."
msgstr "レコードは射影クラスに適しています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Query debugging"
msgstr "クエリのデバッグ"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "As MongoDB with Panache allows writing simplified queries, it is sometimes handy to log the generated native queries for debugging purpose."
msgstr "MongoDB with Panacheではシンプルなクエリを書くことができますが、生成されたネイティブクエリをログに残しておくと、デバッグの際に便利なことがあります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "This can be achieved by setting to DEBUG the following log category inside your `application.properties`:"
msgstr "これは、 `application.properties` の中で以下のログカテゴリーを DEBUG に設定することで実現できます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The PojoCodecProvider: easy object to BSON document conversion."
msgstr "PojoCodecProvider: オブジェクトからBSONドキュメントへの変換を簡単に行うことができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider], with link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/#configure-the-driver-for-pojos[automatic POJO support],\n"
"to automatically convert your object to a BSON document.\n"
"This codec also supports Java records so you can use them for your entities or an attribute of your entities."
msgstr ""
"MongoDB with Panache は、link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/#configure-the-driver-for-pojos[自動 POJO サポート] のある {mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider] を使用して、\n"
"オブジェクトを BSON ドキュメントに自動的に変換します。\n"
"このコーデックは Java レコードもサポートしているため、エンティティーまたはエンティティーの属性に使用できます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"In case you encounter the `org.bson.codecs.configuration.CodecConfigurationException` exception, it means the codec is not able to\n"
"automatically convert your object.\n"
"This codec obeys the Java Bean standard, so it will successfully convert a POJO using public fields or getters/setters.\n"
"You can use `@BsonIgnore` to make a field, or a getter/setter, ignored by the codec."
msgstr "`org.bson.codecs.configuration.CodecConfigurationException` の例外が発生した場合、コーデックがオブジェクトを自動的に変換できないことを意味します。このコーデックは、Java Bean 標準に準拠しているため、パブリックフィールドまたはゲッター/セッターを使用する POJO を正常に変換します。 `@BsonIgnore` を使用して、フィールドまたはゲッター/セッターをコーデックで無視することができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If your class doesn't obey these rules (for example by including a method that starts with `get` but is not a setter),\n"
"you could provide a custom codec for it.\n"
"Your custom codec will be automatically discovered and registered inside the codec registry.\n"
"See xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr "クラスがこれらの規則に従わない場合（例えば、 `get` で始まるがセッターではないメソッドを含む場合）、そのクラスにカスタムコーデックを提供することができます。あなたのカスタム・コーデックは、自動的に検出され、コーデック・レジストリに登録されます。詳しくは、 link:mongodb.html#simplifying-mongodb-client-usage-using-bson-codec[BSONコーデックの使用]をご覧ください。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Transactions"
msgstr "トランザクション"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB offers ACID transactions since version 4.0."
msgstr "MongoDBは、バージョン4.0からACIDトランザクションを提供しています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "To use them with MongoDB with Panache you need to annotate the method that starts the transaction with the `@Transactional` annotation."
msgstr "MongoDB with Panacheでこれらを使うには、トランザクションを開始するメソッドに `@Transactional` アノテーションを付ける必要があります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Inside methods annotated with `@Transactional` you can access the `ClientSession` with `Panache.getClientSession()` if needed."
msgstr "`@Transactional` アノテーションが付けられたメソッド内では、必要に応じて `Panache.getClientSession()` を使用して `ClientSession` にアクセスできます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"In MongoDB, a transaction is only possible on a replicaset,\n"
"luckily our xref:mongodb.adoc#dev-services[Dev Services for MongoDB] setups a single node replicaset so it is compatible with transactions."
msgstr "MongoDBでは、トランザクションはレプリカセットでのみ可能です。幸運なことに、 link:mongodb.html#dev-services[MongoDBの開発サービス] では、シングルノードのレプリカセットを設定するので、トランザクションと互換性があります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Custom IDs"
msgstr "カスタムID"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"IDs are often a touchy subject. In MongoDB, they are usually auto-generated by the database with an `ObjectId` type.\n"
"In MongoDB with Panache the ID are defined by a field named `id` of the `org.bson.types.ObjectId` type,\n"
"but if you want to customize them, once again we have you covered."
msgstr "ID はしばしば微妙な問題です。MongoDBでは、IDは通常、 `ObjectId` 型でデータベースによって自動生成されます。MongoDB with Panacheでは、IDは `org.bson.types.ObjectId` 型の `id` というフィールドで定義されていますが、もしカスタマイズしたいのであれば、私たちがサポートします。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheMongoEntityBase` instead of `PanacheMongoEntity`. Then\n"
"you just declare whatever ID you want as a public field by annotating it by `@BsonId`:"
msgstr "`PanacheMongoEntity` の代わりに `PanacheMongoEntityBase` を拡張することで、独自のID戦略を指定することができます。そして、 `@BsonId` でアノテーションを付けて、好きなIDをパブリック・フィールドとして宣言します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheMongoRepositoryBase` instead of `PanacheMongoRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr "リポジトリを使用している場合は、 `PanacheMongoRepository` の代わりに `PanacheMongoRepositoryBase` を拡張し、ID 型を追加の型パラメータとして指定することになります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"When using `ObjectId`, MongoDB will automatically provide a value for you, but if you use a custom field type,\n"
"you need to provide the value by yourself."
msgstr "`ObjectId` を使う場合は、MongoDB が自動的に値を提供してくれますが、カスタムフィールド型を使う場合は、自分で値を提供する必要があります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"`ObjectId` can be difficult to use if you want to expose its value in your REST service.\n"
"So we created Jackson and JSON-B providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on either the Quarkus REST Jackson extension or the Quarkus REST JSON-B extension."
msgstr ""
"REST サービスでその値を公開する場合、 `ObjectId` の使用が困難になる可能性があります。\n"
"そこで、Quarkus REST Jackson エクステンションまたは Quarkus REST JSON-B エクステンションのいずれかに依存している場合は自動登録される `String` としてシリアル化/逆シリアル化するための Jackson および JSON-B プロバイダーを作成しました。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If you use the standard `ObjectId` ID type, don't forget to retrieve your entity by creating a new `ObjectId` when the identifier comes from a path parameter. For example:"
msgstr "標準の `ObjectId` ID型を使用する場合、識別子がパスパラメータから来ているときは、新しい `ObjectId` を作成してエンティティを取得することを忘れないでください。例えば以下のように行います。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Working with Kotlin Data classes"
msgstr "Kotlin のデータクラスで作業する"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Kotlin data classes are a very convenient way of defining data carrier classes, making them a great match to define an entity class."
msgstr "Kotlinのデータクラスは、データキャリアクラスを定義する非常に便利な方法であり、エンティティクラスを定義するのに適しています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked as nullable,\n"
"and the generated constructor needs to have as parameters all the fields of the data class."
msgstr "しかし、このクラスの型はいくつかの制限があります。また、生成時に初期化される全てのフィールドは nullable としてマークされ、生成されたコンストラクタは、データクラスのすべてのフィールドをパラメータとして持つ必要があります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider], a MongoDB codec which mandates the presence of a parameterless constructor."
msgstr "MongoDB with Panache は link:{mongodb-doc-root-url}/bson/pojos[PojoCodecProvider] を使用します。これは MongoDB のコーデックで、パラメータなしのコンストラクタの存在を義務付けています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Therefore, if you want to use a data class as an entity class, you need a way to make Kotlin generate an empty constructor.\n"
"To do so, you need to provide default values for all the fields of your classes.\n"
"The following sentence from the Kotlin documentation explains it:"
msgstr "そのため、データクラスをエンティティクラスとして使用したい場合は、Kotlinに空のコンストラクタを生成させる方法が必要です。そのためには、クラスのすべてのフィールドにデフォルト値を用意する必要があります。Kotlinのドキュメントの次の文章で説明しています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__"
msgstr "_JVMでは、生成されたクラスがパラメータレス・コンストラクタを持つ必要がある場合、すべてのプロパティのデフォルト値を指定する必要があります（「コンストラクタ」を参照）。_"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If for whatever reason, the aforementioned solution is deemed unacceptable, there are alternatives."
msgstr "何らかの理由で前述の解決策が受け入れられないと判断された場合、代替手段があります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"First, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the `PojoCodecProvider`.\n"
"See this part of the documentation: xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr "まず、BSON Codecを作成すると、Quarkusに自動的に登録され、 `PojoCodecProvider` の代わりに使用されます。ドキュメントのこの部分を参照してください。 link:mongodb.html#simplifying-mongodb-client-usage-using-bson-codec[BSONコーデックの使用]"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Another option is to use the `@BsonCreator` annotation to tell the `PojoCodecProvider` to use the Kotlin data class default constructor,\n"
"in this case all constructor parameters have to be annotated with `@BsonProperty`: see link:{mongodb-doc-root-url}/fundamentals/data-formats/pojo-customization/#pojos-without-no-argument-constructors[Supporting pojos without no args constructor]."
msgstr "もうひとつの方法は、 `@BsonCreator` アノテーションを使用して、 `PojoCodecProvider` に Kotlin データクラスのデフォルトコンストラクタを使用するように指示することです。この場合、すべてのコンストラクタパラメータは `@BsonProperty` でアノテーションする必要があります。link:{mongodb-doc-root-url}/fundamentals/data-formats/pojo-customization/#pojos-without-no-argument-constructors[引数なしのコンストラクタの無いPOJOのサポート] を参照してください。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "This will only work when the entity extends `PanacheMongoEntityBase` and not `PanacheMongoEntity`, as the ID field also needs to be included in the constructor."
msgstr "これは、エンティティが  `PanacheMongoEntity` ではなく `PanacheMongoEntityBase` を拡張している場合にのみ機能します。なぜなら、ID フィールドもコンストラクタに含める必要があるからです。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "An example of a `Person` class defined as a Kotlin data class would look like:"
msgstr "Kotlinのデータクラスとして定義された `Person` クラスの例は次のようになります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Here we use `var` but note that `val` can also be used."
msgstr "ここでは、 `var` を使用していますが、 `val` も使用できることに注意してください。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The `@BsonId` annotation is used instead of `@BsonProperty(\"_id\")` for brevity's sake, but use of either is valid."
msgstr "簡潔にするために `@BsonProperty(\"_id\")` の代わりに `@BsonId` のアノテーションを使用していますが、どちらを使用しても構いません。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"The last option is to the use the link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg] compiler plugin.\n"
"This plugin is configured with a list of annotations, and the end result is the generation of no-args constructor for each class annotated with them."
msgstr "最後の方法は、 link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg]compiler plugin を使うことです。このプラグインにはアノテーションのリストが設定されており、最終的にはアノテーションが設定されている各クラスのno-argsコンストラクタが生成されます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "For MongoDB with Panache, you could use the `@MongoEntity` annotation on your data class for this:"
msgstr "MongoDB with Panache では、データクラスに `@MongoEntity` アノテーションを使用することができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Unlike the @BsonCreator approach, `val` cannot be used here. Properties must be defined as `var`, otherwise, the system creates an object with\n"
"`null` values for every property."
msgstr ""
"@BsonCreator アプローチとは異なり、ここでは `val` は使用できません。\n"
"プロパティは `var` として定義する必要があります。そうしないと、システムはすべてのプロパティに対して `null` 値を持つオブジェクトを作成します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Reactive Entities and Repositories"
msgstr "リアクティブエンティティとレポジトリー"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB with Panache allows using reactive style implementation for both entities and repositories.\n"
"For this, you need to use the Reactive variants when defining your entities : `ReactivePanacheMongoEntity` or `ReactivePanacheMongoEntityBase`,\n"
"and when defining your repositories: `ReactivePanacheMongoRepository` or `ReactivePanacheMongoRepositoryBase`."
msgstr "MongoDB with Panacheでは、エンティティとリポジトリの両方でリアクティブスタイルの実装を使うことができます。そのためには、エンティティを定義するときには `ReactivePanacheMongoEntity` または `ReactivePanacheMongoEntityBase` を、リポジトリを定義するときには `ReactivePanacheMongoRepository` または `ReactivePanacheMongoRepositoryBase` を、それぞれ Reactive バリアントとして使用する必要があります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Mutiny"
msgstr "Mutiny"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"The reactive API of MongoDB with Panache uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "MongoDB with PanacheのリアクティブAPIは、Mutinyのリアクティブ型を使用しています。Mutinyに慣れていない方は、 link:mutiny-primer.html[MUTINYによる非同期入門] をご覧ください。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The reactive variant of the `Person` class will be:"
msgstr "`Person` クラスのリアクティブ・バリアントは以下のようになります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You will have access to the same functionalities of the _imperative_ variant inside the reactive one: bson annotations, custom ID, PanacheQL, ...\n"
"But the methods on your entities or repositories will all return reactive types."
msgstr "bsonアノテーション、カスタムID、PanacheQLなど、 リアクティブ バリアント内で _命令型_ のバリアントと同じ機能を利用できますが、エンティティやリポジトリのメソッドはすべてリアクティブ型を返します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "See the equivalent methods from the imperative example with the reactive variant:"
msgstr "リアクティブ バリアントを持つ命令型の例から、同等のメソッドを見てみましょう。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If you use MongoDB with Panache in conjunction with Quarkus REST, you can directly return a reactive type inside your Jakarta REST resource endpoint."
msgstr "MongoDB を Panache とともに Quarkus REST と組み合わせて使用すると、Jakarta REST リソースエンドポイント内でリアクティブ型を直接返すことができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a `Multi` (which implement  a reactive stream `Publisher`) instead of a `Stream`."
msgstr "リアクティブ型に対しても同様の問い合わせ機能がありますが、 `stream()` メソッドの動作は異なります。 `Stream` の代わりに `Multi` （リアクティブストリーム `Publisher` を実装したもの）を返します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "It allows more advanced reactive use cases, for example, you can use it to send server-sent events (SSE) via Quarkus REST:"
msgstr "これにより、より高度なリアクティブユースケースが可能になります。たとえば、Quarkus REST 経由でサーバー送信イベント (SSE) を送信できます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`@RestStreamElementType(MediaType.APPLICATION_JSON)` tells Quarkus REST to serialize the object in JSON."
msgstr "`@RestStreamElementType (MediaType.APPLICATION_JSON)` は、Quarkus REST にオブジェクトを JSON でシリアル化するように指示します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Reactive transactions"
msgstr "リアクティブトランザクション"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "To use them with reactive entities or repositories you need to use `io.quarkus.mongodb.panache.common.reactive.Panache.withTransaction()`."
msgstr "これらをリアクティブエンティティーまたはリポジトリーで使用するには、 `io.quarkus.mongodb.panache.common.reactive.Panache.withTransaction()` を使用する必要があります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Reactive transaction support inside MongoDB with Panache is still experimental."
msgstr "Panache を使用した MongoDB 内のリアクティブトランザクションサポートはまだ実験段階です。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Mocking"
msgstr "モック"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Using the active-record pattern"
msgstr "アクティブ・レコード・パターンの使用"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If you are using the active-record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr "active-recordパターンを使用している場合、Mockitoはスタティック・メソッドのモックをサポートしていないため、直接使用することはできませんが、 `quarkus-panache-mock` モジュールを使用することで、Mockitoを使用して、あなた自身のメソッドを含む、提供されたすべてのスタティック・メソッドをモックすることができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Add this dependency to your `pom.xml`:"
msgstr "この依存関係を `pom.xml` に追加してください。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Given this simple entity:"
msgstr "このシンプルなエンティティがある場合に"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "You can write your mocking test like this:"
msgstr "モッキングテストはこのように書くことができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Be sure to call your `verify` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr "`verify` のメソッドを `Mockito` ではなく `PanacheMock` で呼び出すようにしてください。そうしないと、どのモックオブジェクトを渡せばいいのかわかりません。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Using the repository pattern"
msgstr "リポジトリパターンの使用"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr "リポジトリパターンを使用している場合は、 `quarkus-junit5-mockito` モジュールを使用して、Mockito を直接使用することができます。これにより、ビーンのモッキングが非常に簡単になります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "And this repository:"
msgstr "そしてこのリポジトリ。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "How and why we simplify MongoDB API"
msgstr "MongoDB の API をシンプルにする方法と理由"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"When it comes to writing MongoDB entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr "MongoDBのエンティティを書くときには、以下のように、ユーザーが不本意ながら慣れてしまっている厄介なことがたくさんあります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really\n"
"relevant to your model."
msgstr "IDロジックの重複:ほとんどのエンティティにはIDが必要ですが、モデルとはあまり関係がないため、ほとんどの人はIDの設定方法を気にしません。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields,\n"
"then generate getters and setters for those fields, even if they don't actually do anything more than read/write\n"
"the fields."
msgstr "ダサいゲッターとセッター：Javaは言語でプロパティをサポートしていないので、フィールドに対して読み書きを行わなかったとしてもフィールドを作成し、そのフィールドのためにゲッターとセッターを生成しなければなりません。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr "オブジェクト指向アーキテクチャの通常のオブジェクトでは、ステートとメソッドが同じクラスにないことはあり得ないのに、伝統的なEEパターンでは、エンティティの定義（モデル）とそれに対する操作（DAOやリポジトリ）を分けることが推奨されており、実際にはステートとその操作を不自然に分ける必要があります。さらに、エンティティごとに2つのクラスが必要になり、エンティティの操作を行う必要があるDAOやRepositoryをインジェクションする必要があるため、編集フローが崩れ、書いているコードから抜けてインジェクションポイントを設定してから戻って使用しなければなりません。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr "MongoDBのクエリは非常に強力ですが、一般的な操作では冗長すぎて、すべてのパーツが必要ではない場合でもクエリを書かなければなりません。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB queries are JSON based, so you will need some String manipulation or using the `Document` type, and it will need a lot of boilerplate code."
msgstr "MongoDB のクエリは JSON ベースなので、文字列の操作や `Document` 型を使う必要があり、多くのボイラープレートコードが必要になります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr "Panacheでは、これらの問題に対して、定見に基づいたアプローチをとりました。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Make your entities extend `PanacheMongoEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheMongoEntityBase` instead and handle the ID yourself."
msgstr "エンティティは `PanacheMongoEntity` を拡張するようにしてください：自動生成されるIDフィールドがあります。カスタムのID戦略が必要な場合は、代わりに `PanacheMongoEntityBase` を拡張して、IDを自分で処理することができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters\n"
"that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr "パブリックフィールドを使ってください。無駄なゲッターとセッターを無くせます。フードの下では、不足しているすべてのゲッターとセッターを生成し、これらのフィールドへのすべてのアクセスを、アクセサ・メソッドを使用するように書き換えます。この方法では、必要なときに _便利な_ アクセサを書くことができ、エンティティ・ユーザーがフィールド・アクセスを使用していても、それが使用されます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr "アクティブレコードパターンの使用: アクティブレコードパターンでは、すべてのエンティティロジックをエンティティクラスのスタティックメソッドに置き、DAOを作りません。エンティティスーパークラスには、非常に便利なスタティックメソッドがたくさん用意されていますし、エンティティクラスに独自のメソッドを追加することもできます。 `Person` ユーザーは、 `Person` と入力するだけで、すべての操作を一か所で完了させることができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` or even better `Person.find(\"name\", \"Loïc\")`."
msgstr "必要のない部分を書かないようにしましょう: `Person.find(\"order by name\")` や `Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` 、さらには `Person.find(\"name\", \"Loïc\")` のように書きましょう。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "That's all there is to it: with Panache, MongoDB has never looked so trim and neat."
msgstr "以上となります: Panacheを使えば、MongoDBがこれほどまでに整然としたものになるのです。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Defining entities in external projects or jars"
msgstr "外部プロジェクトや jar でエンティティーを定義する"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB with Panache relies on compile-time bytecode enhancements to your entities. If you define your entities in the\n"
"same project where you build your Quarkus application, everything will work fine."
msgstr ""
"MongoDB with Panache は、コンパイル時のバイトコードエクステンションによってエンティティーを拡張します。\n"
"Quarkus アプリケーションをビルドするのと同じプロジェクトであれば、すべて正常に動作します。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If the entities come from external projects\n"
"or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr "エンティティーが外部のプロジェクトやジャーから来ている場合は、空の `META-INF/beans.xml` ファイルを追加することで、jarがQuarkusアプリケーションライブラリのように扱われるようにすることができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr "これにより、Quarkusは、エンティティーが現在のプロジェクトの内部にあるかのようにインデックスを作成し、強化することができます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Multitenancy"
msgstr "マルチテナンシー"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"\"Multitenancy is a software architecture where a single software instance can serve multiple, distinct user groups. Software-as-a-service (SaaS)\n"
"offerings are an example of multitenant architecture.\" (link:https://www.redhat.com/en/topics/cloud-computing/what-is-multitenancy#:~:text=Multitenancy%20is%20a%20software%20architecture,an%20example%20of%20multitenant%20architecture.[Red Hat])."
msgstr ""
"マルチテナンシーとは、単一のソフトウェアインスタンスが複数の異なるユーザーグループにサービスを提供できるソフトウェアアーキテクチャーです。サービスとしてのソフトウェア (SaaS)\n"
"これらはマルチテナントアーキテクチャーの一例です \" (link:https://www.redhat.com/en/topics/cloud-computing/what-is-multitenancy#:~:text=Multitenancy%20is%20a%20software%20architecture,an%20example%20of%20multitenant%20architecture.[Red Hat])。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache currently supports the database per tenant approach, it's similar to schema per tenant approach when compared to SQL databases."
msgstr "MongoDB with Panache は現在、テナントごとのデータベースアプローチをサポートしています。これは、SQL データベースと比較すると、テナントごとのスキーマアプローチに似ています。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Writing the application"
msgstr "アプリケーションの記述"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"In order to resolve the tenant from incoming requests and map it to a specific database, you must create an implementation\n"
"of the `io.quarkus.mongodb.panache.common.MongoDatabaseResolver` interface."
msgstr ""
"受信リクエストからテナントを解決し、特定のデータベースにマップするには、\n"
"`io.quarkus.mongodb.panache.common.MongoDatabaseResolver` インターフェイスの実装を作成する必要があります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr "Beanは、テナントの解決が入ってくるリクエストに依存するため `@RequestScoped` にします。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"The database selection priority order is as follow: `@MongoEntity(database=\"mizain\")`, `MongoDatabaseResolver`,\n"
"and then `quarkus.mongodb.database` property."
msgstr ""
"データベース選択の優先度は、 `@MongoEntity(database=\"mizain\")`、 `MongoDatabaseResolver`、\n"
"`quarkus.mongodb.database` プロパティーの順です。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], then if the OIDC tenantID and MongoDB\n"
"database are the same, you can access the OIDC tenant id from a `RoutingContext` attribute like in the example below:"
msgstr ""
"xref:security-openid-connect-multitenancy.adoc[OIDC マルチテナンシー] も使用している場合、OIDC のテナント ID と MongoDB\n"
"データベースが同じであれば、次の例のように `RoutingContext` 属性から OIDC テナント ID にアクセスできます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Given this entity:"
msgstr "このエンティティーの場合:"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "And this resource:"
msgstr "およびこのリソースの場合:"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "From the classes above, we have enough to persist and fetch persons from different databases, so it's possible to see how it works."
msgstr "上記のクラスから、さまざまなデータベースから persons を永続化して取得するのに十分な情報が得られるため、どのように機能するかを確認できます。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The same mongo connection will be used for all tenants, so a database has to be created for every tenant."
msgstr "すべてのテナントに同じ mongo 接続が使用されるため、テナントごとにデータベースを作成する必要があります。"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Testing"
msgstr "テスト"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "You can write your test like this:"
msgstr "テストは次のように記述できます。"
