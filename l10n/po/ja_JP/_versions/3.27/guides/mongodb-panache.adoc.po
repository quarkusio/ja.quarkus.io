msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Simplified MongoDB with Panache"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB is a well known NoSQL Database that is widely used, but using its raw API can be cumbersome as you need to express your entities and your queries as a MongoDB link:{mongodb-doc-root-url}/fundamentals/data-formats/documents/#document[`Document`]."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache provides active record style entities (and repositories) like you have in xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] and focuses on making your entities trivial and fun to write in Quarkus."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "It is built on top of the xref:mongodb.adoc[MongoDB Client] extension."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "First: an example"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Panache allows you to write your MongoDB entities like this:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You have noticed how much more compact and readable the code is compared to using the MongoDB API?\n"
"Does this look interesting? Read on!"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"the `list()` method might be surprising at first. It takes fragments of PanacheQL queries (subset of JPQL) and contextualizes the rest.\n"
"That makes for very concise but yet readable code.\n"
"MongoDB native queries are also supported."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"what was described above is essentially the link:https://www.martinfowler.com/eaaCatalog/activeRecord.html[active record pattern], sometimes just called the entity pattern.\n"
"MongoDB with Panache also allows for the use of the more classical link:https://martinfowler.com/eaaCatalog/repository.html[repository pattern] via `PanacheMongoRepository`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The solution is located in the `mongodb-panache-quickstart` link:{quickstarts-tree-url}/mongodb-panache-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"This command generates a Maven structure importing the Quarkus REST (formerly RESTEasy Reactive) Jackson and MongoDB with Panache extensions.\n"
"After this, the `quarkus-mongodb-panache` extension has been added to your build file."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If you don't want to generate a new project, add the dependency in your build file:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Setting up and configuring MongoDB with Panache"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "To get started:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "add your settings in `{config-file}`"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Make your entities extend `PanacheMongoEntity` (optional if you are using the repository pattern)"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Optionally, use the `@MongoEntity` annotation to specify the name of the collection, the name of the database or the name of the client."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Then add the relevant configuration properties in `{config-file}`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The `quarkus.mongodb.database` property will be used by MongoDB with Panache to determine the name of the database where your entities will be persisted (if not overridden by `@MongoEntity`)."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The `@MongoEntity` annotation allows configuring:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "the name of the client for multitenant application, see xref:mongodb.adoc#multiple-mongodb-clients[Multiple MongoDB Clients]. Otherwise, the default client will be used."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "the name of the database, otherwise the `quarkus.mongodb.database` property or a link:{mongodb-doc-root-url}#multitenancy[`MongoDatabaseResolver`] implementation will be used."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "the name of the collection, otherwise the simple name of the class will be used."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "For advanced configuration of the MongoDB client, you can follow the xref:mongodb.adoc#configuring-the-mongodb-database[Configuring the MongoDB database guide]."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Solution 1: using the active record pattern"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Defining your entity"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"To define a Panache entity, simply extend `PanacheMongoEntity` and add your columns as public fields.\n"
"You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Annotating with `@MongoEntity` is optional. Here the entity will be stored in the `ThePerson` collection instead of the default `Person` collection."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "You will be allowed to use the following annotations to customize this mapping:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`@BsonId`: allows you to customize the ID field, see <<custom-ids,Custom IDs>>."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`@BsonProperty`: customize the serialized name of the field."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`@BsonIgnore`: ignore a field during the serialization."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If you need to write accessors, you can:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"And thanks to our field access rewrite, when your users read `person.name` they will actually call your `getName()` accessor, and similarly for field writes and the setter.\n"
"This allows for proper encapsulation at runtime as all fields calls will be replaced by the corresponding getter/setter calls."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Most useful operations"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Once you have written your entity, here are the most common operations you will be able to perform:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "All `list` methods have equivalent `stream` versions."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "A `persistOrUpdate()` method persists or updates an entity in the database, it uses the __upsert__ capability of MongoDB to do it in a single query."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Adding entity methods"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Add custom queries on your entities inside the entities themselves.\n"
"That way, you and your co-workers can find them easily, and queries are co-located with the object they operate on.\n"
"Adding them as static methods in your entity class is the Panache Active Record way."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Solution 2: using the repository pattern"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You can define your entity as regular POJO.\n"
"You can add the `@MongoEntity` annotation to your entity if you need to customize the name of the collection, the database, or the client."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider] to convert your entities to a MongoDB `Document`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You can use public fields or private fields with getters/setters.\n"
"If you don't want to manage the ID by yourself, you can make your entity extends `PanacheMongoEntity`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Defining your repository"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"When using Repositories, you can get the exact same convenient methods as with the active record pattern, injected in your Repository,\n"
"by making them implements `PanacheMongoRepository`:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"All the operations that are defined on `PanacheMongoEntityBase` are available on your repository, so using it\n"
"is exactly the same as using the active record pattern, except you need to inject it:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Once you have written your repository, here are the most common operations you will be able to perform:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"The rest of the documentation show usages based on the active record pattern only,\n"
"but keep in mind that they can be performed with the repository pattern as well.\n"
"The repository pattern examples have been omitted for brevity."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Writing a Jakarta REST resource"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "First, include one of the RESTEasy extensions to enable Jakarta REST endpoints, for example, add the `io.quarkus:quarkus-rest-jackson` dependency for Jakarta REST and JSON support."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Then, you can create the following resource to create/read/update/delete your Person entity:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Advanced Query"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Paging"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You should only use `list` and `stream` methods if your collection contains small enough data sets. For larger data\n"
"sets you can use the `find` method equivalents, which return a `PanacheQuery` on which you can do paging:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The `PanacheQuery` type has many other methods to deal with paging and returning streams."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Using a range instead of pages"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`PanacheQuery` also allows range-based queries."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You cannot mix ranges and pages: if you use a range, all methods that depend on having a current page will throw an `UnsupportedOperationException`;\n"
"you can switch back to paging using `page(Page)` or `page(int, int)`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Sorting"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "All methods accepting a query string also accept an optional `Sort` parameter, which allows you to abstract your sorting:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The `Sort` class has plenty of methods for adding columns and specifying sort direction."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Simplified queries"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Normally, MongoDB queries are of this form: `{'firstname': 'John', 'lastname':'Doe'}`, this is what we call MongoDB native queries."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You can use them if you want, but we also support what we call **PanacheQL** that can be seen as a subset of link:https://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm#BNBTG[JPQL] (or link:{hibernate-orm-docs-url}#hql[HQL]) and allows you to easily express a query.\n"
"MongoDB with Panache will then map it to a MongoDB native query."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If your query does not start with `{`, we will consider it a PanacheQL query:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`<singlePropertyName>` (and single parameter) which will expand to `{'singleColumnName': '?1'}`"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`<query>` will expand to `{<query>}` where we will map the PanacheQL query to MongoDB native query form. We support the following operators that will be mapped to the corresponding MongoDB operators: 'and', 'or' ( mixing 'and' and 'or' is not currently supported), '=', '>', '>=', '<', '<=', '!=', 'is null', 'is not null', and 'like' that is mapped to the MongoDB `$regex` operator (both String and JavaScript patterns are supported)."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Here are some query examples:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`firstname = ?1 and status = ?2` will be mapped to `{'firstname': ?1, 'status': ?2}`"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`amount > ?1 and firstname != ?2` will be mapped to `{'amount': {'$gt': ?1}, 'firstname': {'$ne': ?2}}`"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`lastname like ?1` will be mapped to `{'lastname': {'$regex': ?1}}`. Be careful that this will be link:https://docs.mongodb.com/manual/reference/operator/query/regex/#op._S_regex[MongoDB regex] support and not SQL like pattern."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`lastname is not null` will be mapped to `{'lastname':{'$exists': true}}`"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`status in ?1` will be mapped to `{'status':{$in: ?1}}`"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB queries must be valid JSON documents,\n"
"using the same field multiple times in a query is not allowed using PanacheQL as it would generate an invalid JSON\n"
"(see link:https://github.com/quarkusio/quarkus/issues/12086[this issue on GitHub])."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Prior to Quarkus 3.16, when using `$in` with a list, you had to write your query with `{'status':{$in: [?1]}}`. Starting with Quarkus 3.16, make sure you use `{'status':{$in: ?1}}` instead. The list will be properly expanded with surrounding square brackets."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"We also handle some basic date type transformations: all fields of type `Date`, `LocalDate`, `LocalDateTime` or `Instant` will be mapped to the\n"
"link:https://docs.mongodb.com/manual/reference/bson-types/#date[BSON Date] using the `ISODate` type (UTC datetime).\n"
"The MongoDB POJO codec doesn't support `ZonedDateTime` and `OffsetDateTime` so you should convert them prior usage."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache also supports extended MongoDB queries by providing a `Document` query, this is supported by the find/list/stream/count/delete/update methods."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB with Panache offers operations to update multiple documents based on an update document and a query :\n"
"`Person.update(\"foo = ?1 and bar = ?2\", fooName, barName).where(\"name = ?1\", name)`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "For these operations, you can express the update document the same way you express your queries, here are some examples:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`<singlePropertyName>` (and single parameter) which will expand to the update document `{'$set' : {'singleColumnName': '?1'}}`"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`firstname = ?1 and status = ?2` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`firstname = :firstname and status = :status` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`{'firstname' : ?1 and 'status' : ?2}` will be mapped to the update document `{'$set' : {'firstname': ?1, 'status': ?2}}`"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`{'firstname' : :firstname and 'status' : :status}` will be mapped to the update document `{'$set' : {'firstname': :firstname, 'status': :status}}`"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`{'$inc': {'cpt': ?1}}` will be used as-is"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Query parameters"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "You can pass query parameters, for both native and PanacheQL queries, by index (1-based) as shown below:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Or by name using a `Map`:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Or using the convenience class `Parameters` either as is or to build a `Map`:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Every query operation accepts passing parameters by index (`Object...`), or by name (`Map<String,Object>` or `Parameters`)."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "When you use query parameters, be careful that PanacheQL queries will refer to the Object parameters name but native queries will refer to MongoDB field names."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Imagine the following entity:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Both `findByNameWithPanacheQLQuery()` and `findByNameWithNativeQuery()` methods will return the same result but query written in PanacheQL\n"
"will use the entity field name: `name`, and native query will use the MongoDB field name: `lastname`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Query projection"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Query projection can be done with the `project(Class)` method on the `PanacheQuery` object that is returned by the `find()` methods."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You can use it to restrict which fields will be returned by the database,\n"
"the ID field will always be returned, but it's not mandatory to include it inside the projection class."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"For this, you need to create a class (a POJO) that will only contain the projected fields.\n"
"This POJO needs to be annotated with `@ProjectionFor(Entity.class)` where `Entity` is the name of your entity class.\n"
"The field names, or getters, of the projection class will be used to restrict which properties will be loaded from the database."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Projection can be done for both PanacheQL and native queries."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Using `@BsonProperty` is not needed to define custom column mappings, as the mappings from the entity class will be used."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "You can have your projection class extends from another class. In this case, the parent class also needs to have use `@ProjectionFor` annotation."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Records are a good fit for projection classes."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Query debugging"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "As MongoDB with Panache allows writing simplified queries, it is sometimes handy to log the generated native queries for debugging purpose."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "This can be achieved by setting to DEBUG the following log category inside your `application.properties`:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The PojoCodecProvider: easy object to BSON document conversion."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/[PojoCodecProvider], with link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo/#configure-the-driver-for-pojos[automatic POJO support],\n"
"to automatically convert your object to a BSON document.\n"
"This codec also supports Java records so you can use them for your entities or an attribute of your entities."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"In case you encounter the `org.bson.codecs.configuration.CodecConfigurationException` exception, it means the codec is not able to\n"
"automatically convert your object.\n"
"This codec obeys the Java Bean standard, so it will successfully convert a POJO using public fields or getters/setters.\n"
"You can use `@BsonIgnore` to make a field, or a getter/setter, ignored by the codec."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If your class doesn't obey these rules (for example by including a method that starts with `get` but is not a setter),\n"
"you could provide a custom codec for it.\n"
"Your custom codec will be automatically discovered and registered inside the codec registry.\n"
"See xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Transactions"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB offers ACID transactions since version 4.0."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "To use them with MongoDB with Panache you need to annotate the method that starts the transaction with the `@Transactional` annotation."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Inside methods annotated with `@Transactional` you can access the `ClientSession` with `Panache.getClientSession()` if needed."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"In MongoDB, a transaction is only possible on a replicaset,\n"
"luckily our xref:mongodb.adoc#dev-services[Dev Services for MongoDB] setups a single node replicaset so it is compatible with transactions."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Custom IDs"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"IDs are often a touchy subject. In MongoDB, they are usually auto-generated by the database with an `ObjectId` type.\n"
"In MongoDB with Panache the ID are defined by a field named `id` of the `org.bson.types.ObjectId` type,\n"
"but if you want to customize them, once again we have you covered."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You can specify your own ID strategy by extending `PanacheMongoEntityBase` instead of `PanacheMongoEntity`. Then\n"
"you just declare whatever ID you want as a public field by annotating it by `@BsonId`:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If you're using repositories, then you will want to extend `PanacheMongoRepositoryBase` instead of `PanacheMongoRepository`\n"
"and specify your ID type as an extra type parameter:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"When using `ObjectId`, MongoDB will automatically provide a value for you, but if you use a custom field type,\n"
"you need to provide the value by yourself."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"`ObjectId` can be difficult to use if you want to expose its value in your REST service.\n"
"So we created Jackson and JSON-B providers to serialize/deserialize them as a `String` which are automatically registered if your project depends on either the Quarkus REST Jackson extension or the Quarkus REST JSON-B extension."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If you use the standard `ObjectId` ID type, don't forget to retrieve your entity by creating a new `ObjectId` when the identifier comes from a path parameter. For example:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Working with Kotlin Data classes"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Kotlin data classes are a very convenient way of defining data carrier classes, making them a great match to define an entity class."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"But this type of class comes with some limitations: all fields needs to be initialized at construction time or be marked as nullable,\n"
"and the generated constructor needs to have as parameters all the fields of the data class."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache uses the link:{mongodb-doc-root-url}/fundamentals/data-formats/document-data-format-pojo[PojoCodecProvider], a MongoDB codec which mandates the presence of a parameterless constructor."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Therefore, if you want to use a data class as an entity class, you need a way to make Kotlin generate an empty constructor.\n"
"To do so, you need to provide default values for all the fields of your classes.\n"
"The following sentence from the Kotlin documentation explains it:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "__On the JVM, if the generated class needs to have a parameterless constructor, default values for all properties have to be specified (see Constructors).__"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If for whatever reason, the aforementioned solution is deemed unacceptable, there are alternatives."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"First, you can create a BSON Codec which will be automatically registered by Quarkus and will be used instead of the `PojoCodecProvider`.\n"
"See this part of the documentation: xref:mongodb.adoc#simplifying-mongodb-client-usage-using-bson-codec[Using BSON codec]."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Another option is to use the `@BsonCreator` annotation to tell the `PojoCodecProvider` to use the Kotlin data class default constructor,\n"
"in this case all constructor parameters have to be annotated with `@BsonProperty`: see link:{mongodb-doc-root-url}/fundamentals/data-formats/pojo-customization/#pojos-without-no-argument-constructors[Supporting pojos without no args constructor]."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "This will only work when the entity extends `PanacheMongoEntityBase` and not `PanacheMongoEntity`, as the ID field also needs to be included in the constructor."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "An example of a `Person` class defined as a Kotlin data class would look like:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Here we use `var` but note that `val` can also be used."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The `@BsonId` annotation is used instead of `@BsonProperty(\"_id\")` for brevity's sake, but use of either is valid."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"The last option is to the use the link:https://kotlinlang.org/docs/reference/compiler-plugins.html#no-arg-compiler-plugin[no-arg] compiler plugin.\n"
"This plugin is configured with a list of annotations, and the end result is the generation of no-args constructor for each class annotated with them."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "For MongoDB with Panache, you could use the `@MongoEntity` annotation on your data class for this:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Unlike the @BsonCreator approach, `val` cannot be used here. Properties must be defined as `var`, otherwise, the system creates an object with\n"
"`null` values for every property."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Reactive Entities and Repositories"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB with Panache allows using reactive style implementation for both entities and repositories.\n"
"For this, you need to use the Reactive variants when defining your entities : `ReactivePanacheMongoEntity` or `ReactivePanacheMongoEntityBase`,\n"
"and when defining your repositories: `ReactivePanacheMongoRepository` or `ReactivePanacheMongoRepositoryBase`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Mutiny"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"The reactive API of MongoDB with Panache uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The reactive variant of the `Person` class will be:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"You will have access to the same functionalities of the _imperative_ variant inside the reactive one: bson annotations, custom ID, PanacheQL, ...\n"
"But the methods on your entities or repositories will all return reactive types."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "See the equivalent methods from the imperative example with the reactive variant:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "If you use MongoDB with Panache in conjunction with Quarkus REST, you can directly return a reactive type inside your Jakarta REST resource endpoint."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The same query facility exists for the reactive types, but the `stream()` methods act differently: they return a `Multi` (which implement  a reactive stream `Publisher`) instead of a `Stream`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "It allows more advanced reactive use cases, for example, you can use it to send server-sent events (SSE) via Quarkus REST:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "`@RestStreamElementType(MediaType.APPLICATION_JSON)` tells Quarkus REST to serialize the object in JSON."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Reactive transactions"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "To use them with reactive entities or repositories you need to use `io.quarkus.mongodb.panache.common.reactive.Panache.withTransaction()`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Reactive transaction support inside MongoDB with Panache is still experimental."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Mocking"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Using the active-record pattern"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If you are using the active-record pattern you cannot use Mockito directly as it does not support mocking static methods,\n"
"but you can use the `quarkus-panache-mock` module which allows you to use Mockito to mock all provided static\n"
"methods, including your own."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Add this dependency to your `pom.xml`:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Given this simple entity:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "You can write your mocking test like this:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Be sure to call your `verify` methods on `PanacheMock` rather than `Mockito`, otherwise you won't know\n"
"what mock object to pass."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Using the repository pattern"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If you are using the repository pattern you can use Mockito directly, using the `quarkus-junit5-mockito` module,\n"
"which makes mocking beans much easier:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "And this repository:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "How and why we simplify MongoDB API"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"When it comes to writing MongoDB entities, there are a number of annoying things that users have grown used to\n"
"reluctantly deal with, such as:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Duplicating ID logic: most entities need an ID, most people don't care how it's set, because it's not really\n"
"relevant to your model."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Dumb getters and setters: since Java lacks support for properties in the language, we have to create fields,\n"
"then generate getters and setters for those fields, even if they don't actually do anything more than read/write\n"
"the fields."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Traditional EE patterns advise to split entity definition (the model) from the operations you can do on them\n"
"(DAOs, Repositories), but really that requires an unnatural split between the state and its operations even though\n"
"we would never do something like that for regular objects in the Object-Oriented architecture, where state and methods are in the same class. Moreover, this requires two classes per entity, and requires injection of the DAO or Repository where you need to do entity operations, which breaks your edit flow and requires you to get out of the code you're writing to set up an injection point before coming back to use it."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB queries are super powerful, but overly verbose for common operations, requiring you to write queries even\n"
"when you don't need all the parts."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB queries are JSON based, so you will need some String manipulation or using the `Document` type, and it will need a lot of boilerplate code."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "With Panache, we took an opinionated approach to tackle all these problems:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Make your entities extend `PanacheMongoEntity`: it has an ID field that is auto-generated. If you require\n"
"a custom ID strategy, you can extend `PanacheMongoEntityBase` instead and handle the ID yourself."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Use public fields. Get rid of dumb getter and setters. Under the hood, we will generate all getters and setters\n"
"that are missing, and rewrite every access to these fields to use the accessor methods. This way you can still\n"
"write _useful_ accessors when you need them, which will be used even though your entity users still use field accesses."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"With the active record pattern: put all your entity logic in static methods in your entity class and don't create DAOs.\n"
"Your entity superclass comes with lots of super useful static methods, and you can add your own in your entity class.\n"
"Users can just start using your entity `Person` by typing `Person.` and getting completion for all the operations in a single place."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"Don't write parts of the query that you don't need: write `Person.find(\"order by name\")` or\n"
"`Person.find(\"name = ?1 and status = ?2\", \"Loïc\", Status.Alive)` or even better `Person.find(\"name\", \"Loïc\")`."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "That's all there is to it: with Panache, MongoDB has never looked so trim and neat."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Defining entities in external projects or jars"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"MongoDB with Panache relies on compile-time bytecode enhancements to your entities. If you define your entities in the\n"
"same project where you build your Quarkus application, everything will work fine."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If the entities come from external projects\n"
"or jars, you can make sure that your jar is treated like a Quarkus application library by adding an empty `META-INF/beans.xml` file."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "This will allow Quarkus to index and enhance your entities as if they were inside the current project."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Multitenancy"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"\"Multitenancy is a software architecture where a single software instance can serve multiple, distinct user groups. Software-as-a-service (SaaS)\n"
"offerings are an example of multitenant architecture.\" (link:https://www.redhat.com/en/topics/cloud-computing/what-is-multitenancy#:~:text=Multitenancy%20is%20a%20software%20architecture,an%20example%20of%20multitenant%20architecture.[Red Hat])."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "MongoDB with Panache currently supports the database per tenant approach, it's similar to schema per tenant approach when compared to SQL databases."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Writing the application"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"In order to resolve the tenant from incoming requests and map it to a specific database, you must create an implementation\n"
"of the `io.quarkus.mongodb.panache.common.MongoDatabaseResolver` interface."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The bean is made `@RequestScoped` as the tenant resolution depends on the incoming request."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"The database selection priority order is as follow: `@MongoEntity(database=\"mizain\")`, `MongoDatabaseResolver`,\n"
"and then `quarkus.mongodb.database` property."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid ""
"If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], then if the OIDC tenantID and MongoDB\n"
"database are the same, you can access the OIDC tenant id from a `RoutingContext` attribute like in the example below:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Given this entity:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "And this resource:"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "From the classes above, we have enough to persist and fetch persons from different databases, so it's possible to see how it works."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Configuring the application"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "The same mongo connection will be used for all tenants, so a database has to be created for every tenant."
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "Testing"
msgstr ""

#: _versions/3.27/guides/mongodb-panache.adoc
msgid "You can write your test like this:"
msgstr ""
