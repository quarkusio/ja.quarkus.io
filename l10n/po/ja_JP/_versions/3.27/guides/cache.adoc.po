msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/cache.adoc
msgid "Application Data Caching"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "In this guide, you will learn how to enable application data caching in any CDI managed bean of your Quarkus application."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Scenario"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Let's imagine you want to expose in your Quarkus application a REST API that allows users to retrieve the weather forecast for the next three days.\n"
"The problem is that you have to rely on an external meteorological service which only accepts requests for one day at a time and takes forever to answer.\n"
"Since the weather forecast is updated once every twelve hours, caching the service responses would definitely improve your API performances."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "We'll do that using a single Quarkus annotation."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"In this guide, we use the default Quarkus Cache backend (Caffeine).\n"
"You can use Infinispan or Redis instead.\n"
"Refer to the xref:cache-infinispan-reference.adoc[Infinispan cache backend reference] to configure the Infinispan backend.\n"
"Refer to the xref:cache-redis-reference.adoc[Redis cache backend reference] to configure the Redis backend."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The solution is located in the `cache-quickstart` link:{quickstarts-tree-url}/cache-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "First, we need to create a new Quarkus project with the following command:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This command generates the project and imports the `cache` and `rest-jackson` extensions."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `cache` extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Creating the REST API"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Let's start by creating a service that will simulate an extremely slow call to the external meteorological service.\n"
"Create `src/main/java/org/acme/cache/WeatherForecastService.java` with the following content:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This is where the slowness comes from."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"We also need a class that will contain the response sent to the users when they ask for the next three days weather forecast.\n"
"Create `src/main/java/org/acme/cache/WeatherForecast.java` this way:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Now, we just need to create the REST resource.\n"
"Create the `src/main/java/org/acme/cache/WeatherForecastResource.java` file with this content:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"If the `daysInFuture` query parameter is omitted, the three days weather forecast will start from the current day.\n"
"Otherwise, it will start from the current day plus the `daysInFuture` value."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "We're all done! Let's check if everything's working."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "First, run the application using dev mode from the project directory:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Then, call `http://localhost:8080/weather?city=Raleigh` from a browser.\n"
"After six long seconds, the application will answer something like this:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The response content may vary depending on the day you run the code."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "You can try calling the same URL again and again, it will always take six seconds to answer."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Enabling the cache"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Now that your Quarkus application is up and running, let's tremendously improve its response time by caching the external meteorological service responses.\n"
"Update the `WeatherForecastService` class like this:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "We only added this annotation (and the associated import of course)."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Let's try to call `http://localhost:8080/weather?city=Raleigh` again.\n"
"You're still waiting a long time before receiving an answer.\n"
"This is normal since the server just restarted and the cache was empty."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Wait a second! The server restarted by itself after the `WeatherForecastService` update?\n"
"Yes, this is one of Quarkus amazing features for developers called `live coding`."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Now that the cache was loaded during the previous call, try calling the same URL.\n"
"This time, you should get a super fast answer with an `executionTimeInMs` value close to 0."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Let's see what happens if we start from one day in the future using the `http://localhost:8080/weather?city=Raleigh&daysInFuture=1` URL.\n"
"You should get an answer two seconds later since two of the requested days were already loaded in the cache."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"You can also try calling the same URL with a different city and see the cache in action again.\n"
"The first call will take six seconds and the following ones will be answered immediately."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Congratulations! You just added application data caching to your Quarkus application with a single line of code!"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Do you want to learn more about the Quarkus application data caching abilities?\n"
"The following sections will show you everything there is to know about it."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Caching using annotations"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Quarkus offers a set of annotations that can be used in a CDI managed bean to enable caching abilities."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Caching annotations are not allowed on private methods.\n"
"They will work fine with any other access modifier including package-private (no explicit modifier)."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "@CacheResult"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Loads a method result from the cache without executing the method body whenever possible."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"When a method annotated with `@CacheResult` is invoked, Quarkus will compute a cache key and use it to check in the cache whether the method has been already invoked.\n"
"See the <<cache-keys-building-logic>> section of this guide to learn how the cache key is computed.\n"
"If a value is found in the cache, it is returned and the annotated method is never actually executed.\n"
"If no value is found, the annotated method is invoked and the returned value is stored in the cache using the computed key."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"A method annotated with `CacheResult` is protected by a lock on cache miss mechanism.\n"
"If several concurrent invocations try to retrieve a cache value from the same missing key, the method will only be invoked once.\n"
"The first concurrent invocation will trigger the method invocation while the subsequent concurrent invocations will wait for the end of the method invocation to get the cached result.\n"
"The `lockTimeout` parameter can be used to interrupt the lock after a given delay.\n"
"The lock timeout is disabled by default, meaning the lock is never interrupted.\n"
"See the parameter Javadoc for more details."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This annotation cannot be used on a method returning `void`."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Quarkus is able to also cache `null` values unlike the underlying Caffeine provider.\n"
"See <<negative-cache,more on this topic below>>."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "@CacheInvalidate"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Removes an entry from the cache."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"When a method annotated with `@CacheInvalidate` is invoked, Quarkus will compute a cache key and use it to try to remove an existing entry from the cache.\n"
"See the <<cache-keys-building-logic>> section of this guide to learn how the cache key is computed.\n"
"If the key does not identify any cache entry, nothing will happen."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "@CacheInvalidateAll"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "When a method annotated with `@CacheInvalidateAll` is invoked, Quarkus will remove all entries from the cache."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "@CacheKey"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"When a method argument is annotated with `@CacheKey`, it is identified as a part of the cache key during an invocation of a\n"
"method annotated with `@CacheResult` or `@CacheInvalidate`."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This annotation is optional and should only be used when some method arguments are NOT part of the cache key."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Cache keys building logic"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Cache keys are built by the annotations API using the following logic:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "If an `io.quarkus.cache.CacheKeyGenerator` is declared in a `@CacheResult` or a `@CacheInvalidate` annotation, then it is used to generate the cache key. The `@CacheKey` annotations that might be present on some method arguments are ignored."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Otherwise, if the method has no arguments, then the cache key is an instance of `io.quarkus.cache.DefaultCacheKey` built from the cache name."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Otherwise, if the method has exactly one argument, then that argument is the cache key."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Otherwise, if the method has multiple arguments but only one annotated with `@CacheKey`, then that annotated argument is the cache key."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Otherwise, if the method has multiple arguments annotated with `@CacheKey`, then the cache key is an instance of `io.quarkus.cache.CompositeCacheKey` built from these annotated arguments."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Otherwise, if the method has multiple arguments and none of them are annotated with `@CacheKey`, the cache key is an instance of `io.quarkus.cache.CompositeCacheKey` built from all the method arguments."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Each non-primitive method argument that is part of the key must implement `equals()` and `hashCode()` correctly for the cache to work as expected."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "When a cache key is built from several method arguments, whether they are explicitly identified with `@CacheKey` or not, the building logic depends on the order of these arguments in the method signature. On the other hand, the arguments names are not used at all and do not have any effect on the cache key."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Calling this method WILL invalidate values cached by the `load` method even if the key elements names have been swapped."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Calling this method WILL NOT invalidate values cached by the `load` method because the key elements order is different."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Calling this method WILL invalidate values cached by the `load` method because the key elements order is the same."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Generating a cache key with `CacheKeyGenerator`"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"You may want to include more than the arguments of a method into a cache key.\n"
"This can be done by implementing the `io.quarkus.cache.CacheKeyGenerator` interface and declaring that implementation in the `keyGenerator` field of a `@CacheResult` or `@CacheInvalidate` annotation."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"The class must either represent a CDI bean or declare a public no-args constructor.\n"
"If it represents a CDI bean, then the key generator will be injected during the cache key computation.\n"
"Otherwise, a new instance of the key generator will be created using its default constructor for each cache key computation."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"In case of CDI, there must be exactly one bean that has the class in its set of bean types, otherwise the build fails.\n"
"The context associated with the scope of the bean must be active when the `CacheKeyGenerator#generate()` method is invoked.\n"
"If the scope is `@Dependent` then the bean instance is destroyed when the `CacheKeyGenerator#generate()` method completes."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The following key generator will be injected as a CDI bean:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "External data can be included into the cache key by injecting a CDI bean in the key generator."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Be careful while using `Method`, some of its methods can be expensive."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Make sure the method has enough arguments before accessing them from their index.\n"
"Otherwise, an `IndexOutOfBoundsException` may be thrown during the cache key computation."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The following key generator will be instantiated using its default constructor:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Including the method name into the cache key is not expensive, unlike other methods from `Method`."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Both kinds of key generators can be used in a similar way:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This key generator is a CDI bean."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The `@CacheKey` annotation will be ignored because a key generator is declared in the `@CacheResult` annotation."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This key generator is not a CDI bean."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The `@CacheKey` annotation will be ignored when the `foo` cache data is invalidated, but `param1` will be the cache key when the `bar` cache data is invalidated."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Caching using the programmatic API"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Quarkus also offers a programmatic API which can be used to store, retrieve or delete values from any cache declared using the annotations API.\n"
"All operations from the programmatic API are non-blocking and rely on https://smallrye.io/smallrye-mutiny/[Mutiny] under the hood."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Before accessing programmatically the cached data, you need to retrieve an `io.quarkus.cache.Cache` instance.\n"
"The following sections will show you how to do that."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Injecting a `Cache` with the `@CacheName` annotation"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "`io.quarkus.cache.CacheName` can be used on a field, a constructor parameter or a method parameter to inject a `Cache`:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This is optional."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This method returns the `Uni<String>` type which is non-blocking."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The `k` argument contains the cache key value."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "If you don't need the call to be non-blocking, this is how you can retrieve the cache value in a blocking way."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Retrieving a `Cache` from the `CacheManager`"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Another way to retrieve a `Cache` instance consists in injecting the `io.quarkus.cache.CacheManager` first and then retrieving the desired `Cache` from its name:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Building a programmatic cache key"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Before building a programmatic cache key, you need to know how cache keys are built by the annotations API when an annotated method is invoked.\n"
"This is explained in the <<cache-keys-building-logic>> section of this guide."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Now, if you want to retrieve or delete, using the programmatic API, a cache value that was stored using the annotations API, you just need to make sure the same key is used with both APIs."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Retrieving all keys from a `CaffeineCache`"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"The cache keys from a specific `CaffeineCache` can be retrieved as an unmodifiable `Set` as shown below.\n"
"If the cache entries are modified while an iteration over the set is in progress, the set will remain unchanged."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Populating a `CaffeineCache`"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"You can populate a `CaffeineCache` using the `CaffeineCache#put(Object, CompletableFuture)` method.\n"
"This method associates the `CompletableFuture` with the given key in the cache. If the cache previously contained a value associated with the key, the old value is replaced by this `CompletableFuture`. If the asynchronous computation fails, the entry will be automatically removed."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Retrieving a value if a key is present from a `CaffeineCache`"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"The cache value from a specific `CaffeineCache` can be retrieved if present as shown below.\n"
"If the given key is contained in the cache, the method will return the `CompletableFuture` the specified key is mapped to.\n"
"That `CompletableFuture` may be computing or may already be completed.\n"
"Otherwise, the method will return `null`."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Changing the expiration policy or the maximum size of a `CaffeineCache` in real time"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"The expiration policy of a `CaffeineCache` can be changed while a Quarkus app is running if that policy was initially specified in the Quarkus configuration.\n"
"Similarly, the maximum size of a `CaffeineCache` can be changed in real time if the cache was built with an initial maximum size defined in the configuration."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This line will only work if the cache was constructed with an `expire-after-access` configuration value. Otherwise, an `IllegalStateException` will be thrown."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This line will only work if the cache was constructed with an `expire-after-write` configuration value. Otherwise, an `IllegalStateException` will be thrown."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This line will only work if the cache was constructed with a `maximum-size` configuration value. Otherwise, an `IllegalStateException` will be thrown."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The `setExpireAfterAccess`, `setExpireAfterWrite` and `setMaximumSize` methods from `CaffeineCache` must never be invoked from within an atomic scope of a cache operation."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Configuring the underlying caching provider"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"This extension uses https://github.com/ben-manes/caffeine[Caffeine] as its underlying caching provider.\n"
"Caffeine is a high performance, near optimal caching library."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Caffeine configuration properties"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Each of the Caffeine caches backing up the Quarkus application data caching extension can be configured using the following\n"
"properties in the `application.properties` file. By default, caches do not perform any type of eviction if not configured."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "You need to replace `cache-name` in all the following properties with the real name of the cache you want to configure."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Here's what your cache configuration could look like:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The `foo` cache is being configured."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The `bar` cache is being configured."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Enabling Micrometer metrics"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Each cache declared using the <<#annotations-api,annotations caching API>> can be monitored using Micrometer metrics."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"The cache metrics collection will only work if your application depends on a `quarkus-micrometer-registry-*` extension.\n"
"See the xref:telemetry-micrometer.adoc[Micrometer metrics guide] to learn how to use Micrometer in Quarkus."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"The cache metrics collection is disabled by default.\n"
"It can be enabled from the `application.properties` file:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Like all instrumentation methods, collecting metrics comes with a small overhead that can impact the application performances."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The collected metrics contain cache statistics such as:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "the approximate current number of entries in the cache"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "the number of entries that were added to the cache"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "the number of times a cache lookup has been performed, including information about hits and misses"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "the number of evictions and the weight of the evicted entries"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Here is an example of cache metrics available for an application that depends on the `quarkus-micrometer-registry-prometheus` extension:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Annotated beans examples"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Implicit simple cache key"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The cache key is implicit since there's no `@CacheKey` annotation."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Explicit composite cache key"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The cache key is explicitly composed of two elements. The method signature also contains a third argument which is not part of the key."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Default cache key"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "A unique default cache key derived from the cache name is used because the method has no arguments."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Multiple annotations on a single method"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This method can be used to force a refresh of the cache entry corresponding to the given key."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This method will invalidate all entries from the `foo` and `bar` caches with a single call."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Clear all application caches"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Negative caching and nulls"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"Sometimes one wants to cache the result of an (expensive) remote call.\n"
"If the remote call fails, one may not want to cache the result or exception,\n"
"but rather re-try the remote call on the next invocation."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"A simple approach could be to catch the exception and return `null`, so that the caller can\n"
"act accordingly:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Sample code"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Call the method to call the remote"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Do the remote call and return its result"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Return in case of exception"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"This approach has an unfortunate side effect: as we said before, Quarkus can also cache\n"
"`null` values. Which means that the next call to `callRemote()` with the same parameter value\n"
"will be answered out of the cache, returning `null` and no remote call will be done.\n"
"This may be desired in some scenarios, but usually one wants to retry the remote call until it returns a result."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Let exceptions bubble up"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"To prevent the cache from caching (marker) results from a remote call, we need to let\n"
"the exception bubble out of the called method and catch it at the caller side:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "With Exception bubbling up"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Exceptions may bubble up"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "This can throw all kinds of remote exceptions"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"When the call to the remote throws an exception, the cache does not store the result,\n"
"so that a subsequent call to `callRemote()` with the same parameter value will not be\n"
"answered out of the cache.\n"
"It will instead result in another attempt to call the remote."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "Going native"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "The Cache extension supports building native executables."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"However, to optimize runtime memory, Caffeine embarks many cache implementation classes that are selected depending on the cache configuration.\n"
"We are not registering all of them for reflection\n"
"(and the ones not registered are not included into the native executables) as registering all of them would be very costly."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "We are registering the most common implementations but, depending on your cache configuration, you might encounter errors like:"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "`PSAMS` is one of the many cache implementation classes of Caffeine so this part may vary."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"When you encounter this error, you can easily fix it by adding the following annotation to any of your application classes\n"
"(or you can create a new class such as `Reflections` just to host this annotation if you prefer):"
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid "It is an array, so you can register several cache implementations in one go if your configuration requires several of them."
msgstr ""

#: _versions/3.27/guides/cache.adoc
msgid ""
"This annotation will register the cache implementation classes for reflection and this will include the classes into the native executable.\n"
"More details about the `@RegisterForReflection` annotation can be found on  the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""
