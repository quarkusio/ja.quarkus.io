msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/observability-devservices.adoc
msgid "Observability Dev Services"
msgstr ""

#: _versions/3.27/guides/observability-devservices.adoc
msgid "We are already familiar with xref:dev-services.adoc[Dev Service] concept, but in the case of Observability we need a way to orchestrate and connect more than a single Dev Service, usually a whole stack of them; e.g. a metrics agent periodically scraping application for metrics, pushing them into timeseries database, and Grafana feeding graphs of this timeseries data."
msgstr ""

#: _versions/3.27/guides/observability-devservices.adoc
msgid "With this in mind, we added a new concept of Dev Resource, an adapter between Dev Service concept and https://testcontainers.com/[Testcontainers]. And since we now have fine-grained services - with the Dev Resource per container, we can take this even further, allowing the user to choose the way to use this new Dev Resource concept:"
msgstr ""

#: _versions/3.27/guides/observability-devservices.adoc
msgid "Each Dev Resource implementation is an `@QuarkusTestResourceLifecycleManager` implementation as well"
msgstr ""

#: _versions/3.27/guides/observability-devservices.adoc
msgid "leave it to Dev Services to pick-up various Dev Resources from classpath, and apply xref:dev-services.adoc[Dev Service] concept to it"
msgstr ""

#: _versions/3.27/guides/observability-devservices.adoc
msgid "explicitly disable Dev Services and enable Dev Resources and use less-heavy concept of starting and stopping Dev Resources"
msgstr ""

#: _versions/3.27/guides/observability-devservices.adoc
msgid "explicitly disable both Dev Services and Dev Resources, and use Quarkus' `@QuarkusTestResource` testing concept (see Note)"
msgstr ""

#: _versions/3.27/guides/observability-devservices.adoc
msgid "You can either add Observability extension dependency along with needed Dev Resources dependencies, or you use existing `sinks` - pom.xml files which add Observability extension dependency along with other required dependencies for certain technology stacks; e.g. `victoriametrics` sink would have `quarkus-observability-devresource-victoriametrics` and `quarkus-victoriametrics-client` dependencies already included in the `pom.xml`."
msgstr ""

#: _versions/3.27/guides/observability-devservices.adoc
msgid "Make sure you set the `scope` of these sink dependencies to `provided`, otherwise libraries such as Testcontainers will end-up in your app's production libraries:"
msgstr ""

#: _versions/3.27/guides/observability-devservices.adoc
msgid "Let's see how all of this looks in practice, with the usual `all-in-one` Grafana usage, in the form of https://github.com/grafana/docker-otel-lgtm[OTel-LGTM] Docker image."
msgstr ""

#: _versions/3.27/guides/observability-devservices.adoc
msgid "xref:observability-devservices-lgtm.adoc[Getting Started with Grafana-OTel-LGTM]"
msgstr ""
