msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/jfr.adoc
msgid "Using Java Flight Recorder"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"This guide explains how https://openjdk.org/jeps/328[Java Flight Recorder] (JFR) can be extended to provide additional insight into your Quarkus application.\n"
"JFR records various information from the Java standard API and JVM as events.\n"
"By adding the Quarkus JFR extension, you can add custom Quarkus events to JFR. This will help you solve potential problems in your application."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "This document is part of the xref:observability.adoc[Observability in Quarkus reference guide] which features this and other observability related components."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"JFR can be preconfigured to dump a file, and when the application exits, JFR will output the file.\n"
"The file will contain the content of the JFR event stream to which Quarkus custom events have also been added.\n"
"You can, of course, get this file at any time you want, even if your application exits unexpectedly."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "In this guide, we create a straightforward REST application to demonstrate JFR usage."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"This command generates the Maven project and imports the Quarkus JFR extension,\n"
"which includes the default JFR support."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the JFR extension\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Examine the Jakarta REST resource"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Create a `src/main/java/org/acme/jfr/JfrResource.java` file with the following content:"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"Notice that there is no JFR specific code included in the application. By default, requests sent to this\n"
"endpoint will be recorded into JFR without any required code changes."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Running Quarkus applications and JFR"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"Now we are ready to run our application.\n"
"We can launch the application with JFR configured to be enabled from the startup of the Java Virtual Machine."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "With the Java Flight Recorder and the application running, we can make a request to the provided endpoint:"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "This is all that is needed to write the information to JFR."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Save the JFR events to a file"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"As mentioned above, the Quarkus application was configured to also start JFR at startup and dump it to a `myrecording.jfr` when it terminates.\n"
"So we can get the file when we hit `CTRL+C` or type `q` to stop the application."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Or, we can also dump it with the `jcmd` command."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Running the `jcmd` command give us a list of running Java processes and the PID of each process."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Open JFR dump file"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"We can open a JFR dump using two tools: the `jfr` CLI and JDK Mission Control (JMC).\n"
"It is also possible to read them using JFR APIs, but we won't go into that in this guide."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "jfr CLI"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"The `jfr` CLI is a tool included in OpenJDK. The executable file is `$JAVA_HOME/bin/jfr`.\n"
"We can use the jfr CLI to see a list of events limited to those related to Quarkus in the dump file by running the following command:"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "JDK Mission Control"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"JMC is essentially a GUI for JFR.\n"
"Some Java distributions include JMC, but if not, you need to download it manually."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "To see a list of events using JMC, first we load the JFR file in JMC as follows."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"After opening the JFR file, we have two options.\n"
"One is to view the events as a tabular list, and the other is to view the events on the threads in which they occurred, in chronological order."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "To view Quarkus events in tabular style, select the Event Browser on the left side of JMC, then open the Quarkus event type tree on the right side of JMC."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "To see Quarkus events in chronological order on a thread, select the `Java application` and `Threads` on the left side of JMC."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"The standard configuration does not show Quarkus events.\n"
"We have to do three tasks to see the Quarkus events."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Right-click and select `Edit Thread Activity Lanes...`."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Select the plus button to add a new lane on the left side, then check to display that lane."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Select Quarkus as the event type that lane will display and press OK."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Now we can see the Quarkus events per thread."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"This extension is able to records multiple JFR events concurrently (emitted by different threads or from the same thread in the case of the reactive execution model).\n"
"Thus, events might overlap in JMC.\n"
"This could make it difficult for you to see the events you want to see.\n"
"To avoid this, we recommend to use <<identifying-requests,Request IDs>> to filter events so that you only see the information about the requests you want to see."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Events"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Identifying Requests"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"This extension collaborates with the OpenTelemetry extension.\n"
"The events recorded by this extension have a trace ID and a span ID. These are recorded with the OpenTelemetry IDs respectively."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "This means that after we identify the trace and span IDs of interest from the UI provided by the OpenTelemetry implementation, we can immediately jump to the details in JFR using those IDs."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"If we have not enabled the OpenTelemetry extension, this extension creates an ID for each request and links it to JFR events as a traceId.\n"
"In this case, the span ID will be null."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "For now, Quarkus only records REST events, but we plan to use this ID to link each event to each other as we add more events in the future."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Event Implementation Policy"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"When JFR starts recording an event, the event does not record to JFR yet, but when it commits that event, the event is recorded.\n"
"Therefore, events that have started recording at dump time but have not yet been committed are not dumped.\n"
"This is unavoidable due to the design of JFR.\n"
"This means that events are not recorded forever if there are prolonged processing.\n"
"Therefore, you will not be aware of prolonged processing."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"To solve this problem, Quarkus can also record start and end events at the beginning and end of processing.\n"
"These events are disabled by default.\n"
"However, we can enable these events in JFR, as described below."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "REST API Event"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"This event is recorded when either the Quarkus REST or RESTEasy extension is enabled.\n"
"The following three JFR events are recorded as soon as REST server processing is complete."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "REST"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Records the time period from the start of the REST server process to the end of the REST server process."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "RestStart"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Records the start of the REST server process."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "RestEnd"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Records the end of the REST server process."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "These events have the following information."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "HTTP Method"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "URI"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Resource Class"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Resource Method"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Client"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"HTTP Method records the HTTP Method accessed by the client.\n"
"This will record a string of HTTP methods such as GET, POST, DELETE, and other general HTTP methods."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"URI records the URI path accessed by the client.\n"
"This does not include host names or port numbers."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"Resource Class records the class that was executed.\n"
"We can check whether the Resource Class was executed as expected by the HTTP Method and URI."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"Resource Method records the method that was executed.\n"
"We can check if the Resource Method was executed as expected by the HTTP Method and URI."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Client records information about the accessing client."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
#, fuzzy
msgid "Runtime Event"
msgstr "ランタイムイベント"

#: _versions/3.27/guides/jfr.adoc
#, fuzzy
msgid ""
"This event is recorded by default.\n"
"The following three JFR events are recorded in JFR chunks."
msgstr "このイベントはデフォルトで記録されます。以下の3つのJFRイベントはJFRチャンクに記録されます。"

#: _versions/3.27/guides/jfr.adoc
#, fuzzy
msgid "QuarkusRuntime"
msgstr "QuarkusRuntime"

#: _versions/3.27/guides/jfr.adoc
#, fuzzy
msgid "Records information about Quarkus running. This event includes the Quarkus version, its profiles, and the mode in which it is running."
msgstr "Quarkusの実行に関する情報を記録します。このイベントには、Quarkusのバージョン、プロファイル、実行中のモードが含まれます。"

#: _versions/3.27/guides/jfr.adoc
#, fuzzy
msgid "QuarkusApplication"
msgstr "Quarkusアプリケーション"

#: _versions/3.27/guides/jfr.adoc
#, fuzzy
msgid "Records information about Quarkus application running. This event includes the name of the application and its version."
msgstr "実行中のQuarkusアプリケーションに関する情報を記録します。このイベントには、アプリケーションの名前とバージョンが含まれます。"

#: _versions/3.27/guides/jfr.adoc
msgid "Extension"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
#, fuzzy
msgid "Records information about extensions included in the running Quarkus. This event includes the name of the extensions installed in Quarkus."
msgstr "実行中のQuarkusに含まれている拡張機能に関する情報を記録します。このイベントには、Quarkusにインストールされている拡張機能の名前が含まれます。"

#: _versions/3.27/guides/jfr.adoc
msgid "Native Image"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"Native executables supports Java Flight Recorder.\n"
"This extension also supports native executables."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"To enable JFR on native executables, it is usually built with `--enable-monitoring`.\n"
"However, we can enable JFR in Quarkus native executables by adding `jfr` to the configuration property `quarkus.native.monitoring`.\n"
"There are two ways to set up this configuration: by including it in the `application.properties` or by specifying it at build time."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "The first method is to first configure settings in `application.properties`."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Then build your native executable as usual:"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "The second way is to pass `-Dquarkus.native.monitoring=jfr` at build time:"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Once you have finished building the native executable, you can run the native application with JFR as follows:"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Note that at this time, Mandrel and GraalVM cannot record JFR for Windows native executables."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "JFR configuration"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"We can use the JFR CLI to configure the events that JFR will record.\n"
"The configuration file, JFC file, is in XML format, so we can modify it with a text editor.\n"
"However, it is recommended to use `jfr configure`, which is included in OpenJDK by default."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Here we create a configuration file in which REST Start and REST End events are recorded (they are not recorded by default):"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "This creates `custom-rest.jfc` as a configuration file with recording for RestStart and RestEnd enabled."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"Now we are ready to run our application with the new settings.\n"
"We launch the application with JFR configured so that it is enabled from the startup of the Java Virtual Machine."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Adding new events"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "This section is for those who would like to add new events to this extension."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"We recommend that new events be associated with existing events.\n"
"Associations are useful when looking at the details of a process that is taking a long time.\n"
"For example, a general REST application retrieves the data needed for processing from a datastore.\n"
"If REST events are not associated with datastore events, it is impossible to know which datastore events were processed in each REST request.\n"
"When the two events are associated, we know immediately which datastore event was processed in each REST request."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Datastore events are not implemented yet."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"The Quarkus JFR extension provides a Request ID for event association.\n"
"See <<identifying-requests>> for more information on Request IDs."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid ""
"In specific code, the following two steps are required.\n"
"First, implement `traceId` and `spanId` on the new event as follows\n"
"The `@TraceIdRelational` and `@SpanIdRelational` attached to these events will provide the association."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Then you get the information to store in the event from the `IdProducer` object's `getTraceId()` and `getSpanId()`."
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "Configuration Reference"
msgstr ""

#: _versions/3.27/guides/jfr.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
