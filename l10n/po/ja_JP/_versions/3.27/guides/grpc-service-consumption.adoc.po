msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Consuming a gRPC Service"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "gRPC clients can be injected in your application code."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"Consuming gRPC services requires the gRPC classes to be generated.\n"
"Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Stubs and Injection"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"gRPC generation provides several stubs, providing different ways to consume a gRPC service.\n"
"You can inject:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "a service interface using the Mutiny API,"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "a blocking stub using the gRPC API,"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "a reactive stub based on Mutiny,"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "the gRPC `io.grpc.Channel`, that lets you create other types of stubs."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "A gRPC client injection point must be annotated with the `@GrpcClient` qualifier. This qualifier can be used to specify the name that is used to configure the underlying gRPC client. For example, if you set it to `hello-service`, configuring the host of the service is done using the `quarkus.grpc.clients.**hello-service**.host`."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "If the name is not specified via the `GrpcClient#value()` then the field name is used instead, e.g. `helloService` in this particular case."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"The stub class names are derived from the service name used in your `proto` file.\n"
"For example, if you use `Greeter` as a service name as in:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Then the service interface name is: `hello.Greeter`, the Mutiny stub name is: `hello.MutinyGreeterGrpc.MutinyGreeterStub` and the blocking stub name is: `hello.GreeterGrpc.GreeterBlockingStub`."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Examples"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Service Interface"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "The service name is derived from the injection point - the field name is used. The `quarkus.grpc.clients.hello.host` property must be set."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Blocking Stub"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "The `quarkus.grpc.clients.hello.host` property must be set."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Handling streams"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "gRPC allows sending and receiving streams:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Using the Mutiny stub, you can interact with these as follows:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Client configuration"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "For each gRPC service you inject in your application, you can configure the following attributes:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "The `client-name` is the name set in the `@GrpcClient` or derived from the injection point if not explicitly defined."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"The following examples uses _hello_ as the client name.\n"
"Don't forget to replace it with the name you used in the `@GrpcClient` annotation."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "When you enable `quarkus.grpc.clients.\"client-name\".xds.enabled`, it's the xDS that should handle most of the configuration above."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Custom Channel building"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "When Quarkus builds a gRPC Channel instance (the way gRPC clients communicate with gRPC services on a lower network level), users can apply their own Channel(Builder) customizers. The customizers are applied by `priority`, the higher the number the later customizer is applied. The customizers are applied before Quarkus applies user's client configuration; e.g. ideal for some initial defaults per all clients."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "There are two `customize` methods, the first one uses gRPC's `ManagedChannelBuilder` as a parameter - to be used with Quarkus' legacy gRPC support, where the other uses `GrpcClientOptions` - to be used with the new Vert.x gRPC support. User should implement the right `customize` method per gRPC support type usage, or both if the customizer is gRPC type neutral."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Enabling TLS"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"To enable TLS, use the following configuration.\n"
"Note that all paths in the configuration may either specify a resource on the classpath\n"
"(typically from `src/main/resources` or its subfolder) or an external file."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "TLS with Mutual Auth"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Client Stub Deadlines"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"If you need to configure a deadline for a gRPC stub, i.e. to specify a duration of time after which the stub will always return the status error `DEADLINE_EXCEEDED`.\n"
"You can specify the deadline via the `quarkus.grpc.clients.\"service-name\".deadline` configuration property, e.g.:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Set the  deadline for all injected stubs."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"Do not use this feature to implement an RPC timeout.\n"
"To implement an RPC timeout, either use Mutiny `call.ifNoItem().after(...)` or Fault Tolerance `@Timeout`."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "gRPC Headers"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"Similarly to HTTP, alongside the message, gRPC calls can carry headers.\n"
"Headers can be useful e.g. for authentication."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "To set headers for a gRPC call, create a client with headers attached and then perform the call on this client:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Alter the client to make calls with the `extraHeaders` attached"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Perform the call with the altered client. The original client remains unmodified"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "`GrpcClientUtils` work with all flavors of clients."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Client Interceptors"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"A gRPC client interceptor can be implemented by a CDI bean that also implements the `io.grpc.ClientInterceptor` interface.\n"
"You can annotate an injected client with `@io.quarkus.grpc.RegisterClientInterceptor` to register the specified interceptor for the particular client instance.\n"
"The `@RegisterClientInterceptor` annotation is repeatable.\n"
"Alternatively, if you want to apply the interceptor to any injected client then annotate the interceptor bean with `@io.quarkus.grpc.GlobalInterceptor`."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Global Client Interceptor Example"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "This interceptor is applied to all injected gRPC clients."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "It's also possible to annotate a producer method as a global interceptor:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ClientInterceptor.html[ClientInterceptor JavaDoc] to properly implement your interceptor."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "`@RegisterClientInterceptor` Example"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Registers the `MySpecialInterceptor` for this particular client."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "When you have multiple client interceptors, you can order them by implementing the `jakarta.enterprise.inject.spi.Prioritized` interface:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"Interceptors with the highest priority are called first.\n"
"The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "gRPC Client metrics"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Enabling metrics collection"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"gRPC client metrics are automatically enabled when the application also uses the xref:telemetry-micrometer.adoc[`quarkus-micrometer`] extension.\n"
"Micrometer collects the metrics of all the gRPC clients used by the application."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "The service name, method and type can be found in the _tags_."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Disabling metrics collection"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "To disable the gRPC client metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Custom exception handling"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"If any of the gRPC services or server interceptors throw an (custom) exception, you can add your own https://github.com/quarkusio/quarkus/extensions/grpc/api/src/main/java/io/quarkus/grpc/ExceptionHandlerProvider.java[ExceptionHandlerProvider]\n"
"as a CDI bean in your application, to provide a custom handling of those exceptions."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "e.g."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Dev Mode"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid ""
"By default, when starting the application in dev mode, a gRPC server is started, even if no services are configured.\n"
"You can configure the gRPC extension's dev mode behavior using the following properties."
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Inject mock clients"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "In your `@QuarkusTest`, you can use `@InjectMock` to inject the Mutiny client of a gRPC service:"
msgstr ""

#: _versions/3.27/guides/grpc-service-consumption.adoc
msgid "Only the Mutiny client can be _mocked_, channels, and other stubs cannot be mocked."
msgstr ""
