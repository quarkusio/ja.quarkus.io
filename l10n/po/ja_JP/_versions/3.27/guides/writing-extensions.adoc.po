msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Writing Your Own Extension"
msgstr "独自のエクステンションの作成"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Quarkus extensions add a new developer focused behavior to the core offering, and consist of two distinct parts, buildtime augmentation and runtime container. The augmentation part is responsible for all metadata processing, such as reading annotations, XML descriptors etc. The output of this augmentation phase is recorded bytecode which is responsible for directly instantiating the relevant runtime services."
msgstr "Quarkusのエクステンションは、コアサービスに開発者向けの新しい動作を追加するもので、ビルド時の拡張とランタイムコンテナという2つの異なる部分から構成されています。拡張部分は、アノテーションやXML記述子の読み込みなど、すべてのメタデータ処理を担当します。この拡張フェーズの出力は、関連するランタイムサービスを直接インスタンス化するためのバイトコードとして記録されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This means that metadata is only processed once at build time, which both saves on startup time, and also on memory\n"
"usage as the classes etc that are used for processing are not loaded (or even present) in the runtime JVM."
msgstr "これは、メタデータがビルド時に一度だけ処理されることを意味し、起動時間の節約と、処理に使用されるクラスなどがランタイムJVMにロードされない（あるいは存在しない）ため、メモリ使用量の節約の両方を実現しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This is an in-depth documentation, see the xref:building-my-first-extension.adoc[building my first extension] if you need an introduction,\n"
"or the xref:extension-faq.adoc[frequently asked questions]."
msgstr ""
"これは詳細なドキュメントです。概要または xref:extension-faq.adoc[よくある質問] については、\n"
"xref:building-my-first-extension.adoc[初めてのエクステンションの作成] を参照してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Extension philosophy"
msgstr "エクステンション哲学"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This section is a work in progress and gathers the philosophy under which extensions should be designed and written."
msgstr "このセクションは作業中であり、エクステンションがどのように設計され、どのように書かれるべきかの哲学を記述します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Why an extension framework"
msgstr "なぜエクステンションフレームワークなのか"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Quarkus’s mission is to transform your entire application including the libraries it uses, into an artifact that uses significantly less resources than traditional approaches. These can then be used to build native applications using GraalVM.\n"
"To do this you need to analyze and understand the full \"closed world\" of the application.\n"
"Without the full and complete context, the best that can be achieved is partial and limited generic support.\n"
"By using the Quarkus extension approach, we can bring Java applications in line with memory footprint constrained environments like Kubernetes or cloud platforms."
msgstr "Quarkusの使命は、使用するライブラリを含むアプリケーション全体を、従来のアプローチよりも大幅に少ないリソースしか使用しないアーティファクトに変換することです。これらを使用して、GraalVMを使用してネイティブアプリケーションを構築することができます。これを行うためには、アプリケーションの完全な「クローズドワールド」を分析し、理解する必要があります。完全で完璧なコンテキストがなければ、達成可能なものは最高でも部分的で限定的、一般的なサポートです。Quarkusのエクステンションアプローチを使用することで、Kubernetesやクラウドプラットフォームのようなメモリフットプリントに制約のある環境にJavaアプリケーションを合わせることができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The Quarkus extension framework results in significantly improved resource utilization even when GraalVM is not used (e.g. in HotSpot).\n"
"Let’s list the actions an extension performs:"
msgstr "Quarkusエクステンションフレームワークは、GraalVMを使用していない場合（HotSpotなど）でも、リソース利用率を大幅に改善します。エクステンションが実行するアクションをリストアップしてみましょう:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Gather build time metadata and generate code"
msgstr "ビルド時のメタデータを収集し、コードを生成"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This part has nothing to do with GraalVM, it is how Quarkus starts frameworks “at build time”"
msgstr "この部分はGraalVMとは何の関係もありませんが、Quarkusがフレームワークを\"ビルド時\" に起動する方法です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The extension framework facilitates reading metadata, scanning classes as well as generating classes as needed"
msgstr "エクステンションフレームワークは、必要に応じてメタデータの読み込み、クラスのスキャン、クラスの生成を容易にします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A small part of the extension work is executed at runtime via the generated classes, while the bulk of the work is done at build time (called deployment time)"
msgstr "拡張作業のごく一部は生成されたクラスを介して実行時に実行され、作業の大部分はビルド時に行われます (デプロイメント時と呼ばれます)"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Enforce opinionated and sensible defaults based on the close world view of the application (e.g. an application with no `@Entity` does not need to start Hibernate ORM)"
msgstr "アプリケーションの近い世界観に基づいて、定見に基づいた賢明なデフォルトを強制（例えば、 `@Entity` のないアプリケーションは、Hibernate ORM を起動する必要はありません）"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "An extension hosts Substrate VM code substitution so that libraries can run on GraalVM"
msgstr "エクステンションは Substrate VM のコード置換をホストし、ライブラリを GraalVM 上で実行できるようにします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Most changes are pushed upstream to help the underlying library run on GraalVM"
msgstr "ほとんどの変更は、基礎となるライブラリがGraalVM上で動作するようにupstreamにプッシュされます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Not all changes can be pushed upstream, extensions host Substrate VM substitutions - which is a form of code patching - so that libraries can run"
msgstr "すべての変更をupstreamにプッシュできるわけではないので、エクステンションは Substrate VM 置換をホスト。これはコードパッチの一形態で、ライブラリが実行できるようになっています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Host Substrate VM code substitution to help dead code elimination based on the application needs"
msgstr "Substrate VMコード置換のホストにより、アプリケーションのニーズに基づいたデッドコードの排除を支援します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This is application dependent and cannot really be shared in the library itself"
msgstr "これはアプリケーションに依存しており、ライブラリ自体で共有することはできません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "For example, Quarkus optimizes the Hibernate code because it knows it only needs a specific connection pool and cache provider"
msgstr "たとえば、Quarkusは、特定の接続プールとキャッシュプロバイダだけが必要であることを知っているため、Hibernateコードを最適化します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Send metadata to GraalVM for example classes in need of reflection"
msgstr "メタデータをGraalVMに送信。例えば、リフレクションに必要なクラス"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This information is not static per library (e.g. Hibernate) but the framework has the semantic knowledge and knows which classes need to have reflection (for example @Entity classes)"
msgstr "この情報はライブラリ(Hibernateなど)ごとに静的ではありませんが、フレームワークはセマンティックな知識を持っており、どのクラスがリフレクションを必要とするかを知っています(例えば@Entityクラスなど)。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Favor build time work over runtime work"
msgstr "ランタイムワークよりもビルドタイムワーク"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"As much as possible favor doing work at build time (deployment part of the extension) as opposed to let the framework do work at startup time (runtime).\n"
"The more is done there, the smaller Quarkus applications using that extension will be and the faster they will load."
msgstr "可能な限り、フレームワークに起動時（ランタイム）に作業をさせるのではなく、ビルド時（エクステンションのデプロイメント部分）に作業を行うことをお勧めします。そこでの作業が多いほど、そのエクステンションを使用しているQuarkusアプリケーションは小さくなり、ロードが速くなります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "How to expose configuration"
msgstr "設定を公開する方法"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Quarkus simplifies the most common usages.\n"
"This means that its defaults might be different from the library it integrates."
msgstr "Quarkusは、最も一般的な使用法を簡略化しています。つまり、そのデフォルトは、統合されているライブラリとは異なる場合があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"To make the simple experience easiest, unify the configuration in `application.properties` via SmallRye Config.\n"
"Avoid library specific configuration files, or at least make them optional: e.g. `persistence.xml` for Hibernate ORM is optional."
msgstr "シンプルな体験を最も簡単にするために、SmallRye Configを介して `application.properties` で設定を統一します。ライブラリ固有の設定ファイルは避けるか、少なくともオプションにしてください。例えば、Hibernate ORM用の `persistence.xml` はオプションです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Extensions should see the configuration holistically as a Quarkus application instead of focusing on the library experience.\n"
"For example `quarkus.database.url` and friends are shared between extensions as defining a database access is a shared task (instead of a `hibernate.` property for example).\n"
"The most useful configuration options should be exposed as `quarkus.[extension].` instead of the natural namespace of the library.\n"
"Less common properties can live in the library namespace."
msgstr "エクステンションは、ライブラリの体験に焦点を当てるのではなく、Quarkusアプリケーションとして全体的に設定を見るべきです。例えば、データベースアクセスの定義が共有タスクであるように、 `quarkus.database.url` 等々がエクステンション間で共有されます（例えば `hibernate.` プロパティを使用される代わりに）。最も便利な設定オプションは、ライブラリの自然な名前空間ではなく、 `quarkus.[extension].` として公開されるべきです。あまり一般的ではないプロパティは、ライブラリの名前空間に置くことができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"To fully enable the close world assumptions that Quarkus can optimize best, it is better to consider configuration options as build time settled vs overridable at runtime.\n"
"Of course properties like host, port, password should be overridable at runtime.\n"
"But many properties like enable caching or setting the JDBC driver can safely require a rebuild of the application."
msgstr "Quarkusが最適化できる閉じた世界の仮定を完全に有効にするには、ビルド時に設定された設定オプションと実行時にオーバーライド可能な設定オプションのどちらを採用するか検討するべきでしょう。もちろん、ホスト、ポート、パスワードなどのプロパティは、実行時にオーバーライド可能でなければなりません。しかし、キャッシングを有効にしたり、JDBCドライバを設定したりするような多くのプロパティは、アプリケーションの再構築を安全に要求することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Static Init Config"
msgstr "スタティック初期化設定"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If the extension provides additional Config Sources and if these are required during Static Init, these must be registered with `StaticInitConfigBuilderBuildItem`. Configuration in Static Init does not scan for additional sources to avoid double initialization at application startup time."
msgstr "エクステンションが追加の設定ソースを提供し、それらが Static Init 中に必要な場合は、それらを `StaticInitConfigSourceProviderBuildItem` に登録する必要があります。Static Init での設定は、アプリケーション起動時の二重の初期化を避けるため、追加のソースをスキャンしません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Expose your components via CDI"
msgstr "CDI でコンポーネントを公開する"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Since CDI is the central programming model when it comes to component composition, frameworks and extensions should expose their components as beans that are easily consumable by user applications.\n"
"For example, Hibernate ORM exposes `EntityManagerFactory` and `EntityManager` beans, the connection pool exposes `DataSource` beans etc.\n"
"Extensions must register these bean definitions at build time."
msgstr "CDI がコンポーネントの構成に関して中心的なプログラミングモデルであるため、フレームワークやエクステンションはそのコンポーネントを、ユーザアプリケーションが容易に消費できるBeanとして公開しなければなりません。例えば、Hibernate ORM は `EntityManagerFactory` と `EntityManager` の Bean を公開し、コネクションプールは `DataSource` のBeanを公開します。エクステンションは、ビルド時にこれらのBean定義を登録しなければなりません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Beans backed by classes"
msgstr "クラスに裏付けられたBean"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "An extension can produce an xref:cdi-integration.adoc#additional_bean_build_item[`AdditionalBeanBuildItem`] to instruct the container to read a bean definition from a class as if it was part of the original application:"
msgstr "エクステンションは xref:cdi-integration.adoc#additional_bean_build_item[`AdditionalBeanBuildItem`] を生成して、元のアプリケーションの一部であるかのようにクラスからビーン定義を読み取るようにコンテナに指示することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Bean Class Registered by `AdditionalBeanBuildItem`"
msgstr "登録されている Bean クラス `AdditionalBeanBuildItem`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If a bean registered by an `AdditionalBeanBuildItem` does not specify a scope then `@Dependent` is assumed."
msgstr "`AdditionalBeanBuildItem` で登録された Bean がスコープを指定しない場合は `@Dependent` とする。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "All other beans can inject such a bean:"
msgstr "他のすべての Bean は、このような Bean を注入することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Bean Injecting a Bean Produced by an `AdditionalBeanBuildItem`"
msgstr "`AdditionalBeanBuildItem` によって構築された Bean をインジェクトするBean"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "And vice versa - the extension bean can inject application beans and beans provided by other extensions:"
msgstr "また、その逆に、 エクステンション Bean は、他のエクステンションによって提供されるアプリケーション Bean やアプリケーション Bean を注入することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Extension Bean Injection Example"
msgstr "エクステンション Bean インジェクト例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Inject a bean provided by other extension."
msgstr "他のエクステンションで提供されているBeanをインジェクトします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Inject all beans matching the type `List<String>`."
msgstr "タイプ `List<String>` に一致するすべてのBeanを注入します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Bean initialization"
msgstr "Bean 初期化"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Some components may require additional initialization based on information collected during augmentation.\n"
"The most straightforward solution is to obtain a bean instance and call a method directly from a build step.\n"
"However, it is _illegal_ to obtain a bean instance during the augmentation phase.\n"
"The reason is that the CDI container is not started yet.\n"
"It's started during the <<bootstrap-three-phases,Static init bootstrap phase>>."
msgstr "コンポーネントによっては、拡張中に収集された情報に基づいて、追加の初期化が必要になる場合があります。最も簡単な解決策は、Bean のインスタンスを取得し、ビルドステップから直接メソッドを呼び出すことです。しかし、拡張フェーズ中にBeanインスタンスを取得することは _違反_ です。理由は、CDIコンテナがまだ起動していないからです。CDIコンテナは link:#bootstrap-three-phases[Static initブートストラップフェーズ] の間に起動されています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`BUILD_AND_RUN_TIME_FIXED` and `RUN_TIME` config roots can be injected in any bean. `RUN_TIME` config roots should only be injected after the bootstrap though."
msgstr "`BUILD_AND_RUN_TIME_FIXED` と `RUN_TIME` 設定ルートは、どのBeanにも注入することができます。 `RUN_TIME` 設定ルールは、ブートストラップの後にのみ注入すべきです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"It is possible to invoke a bean method from a <<bytecode-recording,recorder method>> though.\n"
"If you need to access a bean in a `@Record(STATIC_INIT)` build step then is must either depend on the `BeanContainerBuildItem` or wrap the logic in a `BeanContainerListenerBuildItem`.\n"
"The reason is simple - we need to make sure the CDI container is fully initialized and started.\n"
"However, it is safe to expect that the CDI container is fully initialized and running in a `@Record(RUNTIME_INIT)` build step.\n"
"You can obtain a reference to the container via `CDI.current()` or Quarkus-specific `Arc.container()`."
msgstr "しかし、 link:#bytecode-recording[recorderメソッド] からBeanメソッドを呼び出すことは可能です。 `@Record(STATIC_INIT)` ビルドステップで Bean にアクセスする必要がある場合は、 `BeanContainerBuildItem` に依存するか、 `BeanContainerListenerBuildItem` でロジックをラップしなければなりません。理由は簡単で、CDIコンテナが完全に初期化されて起動していることを確認する必要があるからです。しかし、CDI コンテナは `@Record(RUNTIME_INIT)` ビルドステップで完全に初期化されて実行されていると思っておいた方が安全です。コンテナへの参照は、 `CDI.current()` またはQuarkus固有の `Arc.container()` ."

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Don't forget to make sure the bean state guarantees the visibility, e.g. via the `volatile` keyword."
msgstr "Beanの状態が可視性を保証していることを担保することを忘れないでください。たとえば、 `volatile` キーワードです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"There is one significant drawback of this \"late initialization\" approach.\n"
"An _uninitialized_ bean may be accessed by other extensions or application components that are instantiated during bootstrap.\n"
"We'll cover a more robust solution in the <<synthetic_beans>>."
msgstr "この「遅延初期化」アプローチには、1つの重大な欠点があります。 _初期化されていない_ Beanは、ブートストラップ中にインスタンス化された他のエクステンションやアプリケーションコンポーネントからアクセスされる可能性があります。 link:#synthetic_beans[synthetic_beans]] で、よりロバストな解決策を取り上げます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Default beans"
msgstr "デフォルトのBean"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"A very useful pattern of creating such beans but also giving application code the ability to easily override some beans with custom implementations, is to use\n"
"the `@DefaultBean` that Quarkus provides.\n"
"This is best explained with an example."
msgstr "このような Bean を作成しつつ、アプリケーションコードにカスタム実装で Bean の一部を簡単にオーバーライドする機能を与えるという非常に便利なパターンは、Quarkus が提供している `@DefaultBean` を使用することです。これは例を挙げて説明するのが一番です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Let us assume that the Quarkus extension needs to provide a `Tracer` bean which application code is meant to inject into its own beans."
msgstr "ここでは、Quarkusエクステンションが `Tracer` Bean を提供する必要があると仮定して、アプリケーションコードがそれ自身の Bean に注入することを意味します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If for example application code wants to use `Tracer`, but also needs to use a custom `Reporter` bean, such a requirement could easily be done using something like:"
msgstr "例えば、アプリケーションコードが `Tracer` を使用したいが、カスタムの `Reporter` Bean を使用する必要がある場合、そのような要件は、次のようなものを使用して簡単に行うことができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "How to Override a Bean Defined by a Library/Quarkus Extension that doesn't use @DefaultBean"
msgstr "@DefaultBean を使用しない Library/Quarkus エクステンションによって定義された Bean をオーバーライドする方法"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Although `@DefaultBean` is the recommended approach, it is also possible for application code to override beans provided by an extension by marking beans as a CDI `@Alternative` and including `@Priority` annotation.\n"
"Let's show a simple example.\n"
"Suppose we work on an imaginary \"quarkus-parser\" extension and we have a default bean implementation:"
msgstr "`@DefaultBean` が推奨されていますが、CDI `@Alternative` としてBeanをマークし、 `@Priority` アノテーションを含めることで、アプリケーションコードがエクステンションによって提供されるBeanをオーバーライドすることも可能です。簡単な例を示しましょう。架空の\"quarkus-parser\"エクステンションで作業をしていて、デフォルトのBeanの実装を持っているとします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "And our extension also consumes this parser:"
msgstr "そして、私たちのエクステンションはこのパーサも消費します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Now, if a user or even some other extension needs to override the default implementation of the `Parser` the simplest solution is to use CDI `@Alternative` + `@Priority`:"
msgstr "さて、ユーザーや他のエクステンションが `Parser` のデフォルトの実装を上書きする必要がある場合、最も簡単な解決策は CDI `@Alternative` + `@Priority` を使用することです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`MyParser` is an alternative bean."
msgstr "`MyParser` は代替 Beanです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Enables the alternative. The priority could be any number to override the default bean but if there are multiple alternatives the highest priority wins."
msgstr "代替 Beanを有効にします。優先度はデフォルトの Bean を上書きするために任意の数値を指定できますが、複数の代替 Bean がある場合は、最も高い優先度のものが優先されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "CDI alternatives are only considered during injection and type-safe resolution. For example the default implementation would still receive observer notifications."
msgstr "CDI の代替 Beanは、インジェクションと型安全解決の間のみ考慮されます。例えば、デフォルトの実装では、オブザーバー通知を受け取ることになります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Synthetic beans"
msgstr "合成Bean"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Sometimes it is very useful to be able to register a synthetic bean.\n"
"Bean attributes of a synthetic bean are not derived from a java class, method or field.\n"
"Instead, the attributes are specified by an extension."
msgstr "合成 Beanを登録できると非常に便利なことがあります。合成 Beanのビーン属性は，javaクラス，メソッド，フィールドから派生したものではありません。その代わりに、属性はエクステンションによって指定されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Since the CDI container does not control the instantiation of a synthetic bean the dependency injection and other services (such as interceptors) are not supported.\n"
"In other words, it's up to the extension to provide all required services to a synthetic bean instance."
msgstr "CDIコンテナは合成Beanのインスタンス化を制御しないので、依存性注入や他のサービス(インターセプタなど)はサポートされていません。言い換えれば、合成 Bean のインスタンスに必要なすべてのサービスを提供するのはエクステンション次第ということです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"There are several ways to register a <<cdi-integration.adoc#synthetic_beans,synthetic bean>> in Quarkus.\n"
"In this chapter, we will cover a use case that can be used to initialize extension beans in a safe manner (compared to <<bean_init>>)."
msgstr ""
"Quarkus に <<cdi-integration.adoc#synthetic_beans,synthetic bean>> を登録する場合、いくつかの方法があります。\n"
"この章では、エクステンション Bean を (<<bean_init>> と比較して) 安全に初期化するために使用できるユースケースを取り上げます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The `SyntheticBeanBuildItem` can be used to register a synthetic bean:"
msgstr "`SyntheticBeanBuildItem` で合成 Bean を登録することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "whose instance can be easily produced through a <<bytecode-recording,recorder>>,"
msgstr "そのインスタンスは、 link:#bytecode-recording[レコーダー] を介して簡単に生成することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "to provide a \"context\" bean that holds all the information collected during augmentation so that the real components do not need any \"late initialization\" because they can inject the context bean directly."
msgstr "実際のコンポーネントはコンテキスト Beanを直接注入することができるので\"遅延初期化\"を必要としないように、拡張中に収集されたすべての情報を保持する\"コンテキスト\" Beanを提供します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Instance Produced Through Recorder"
msgstr "レコーダーを通して生成されたインスタンス"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The string value is recorded in the bytecode and used to initialize the instance of `Foo`."
msgstr "文字列の値はバイトコードに記録され、 `Foo` のインスタンス初期化に使用されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "\"Context\" Holder"
msgstr "\"コンテキスト\"ホルダー"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The \"real\" components can inject the `TestContext` directly."
msgstr "「本物の」コンポーネントは、 `TestContext` を直接注入することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Some types of extensions"
msgstr "エクステンションのタイプ"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "There exist multiple stereotypes of extension, let's list a few."
msgstr "エクステンションの定型的なタイプは複数存在しますが、いくつか挙げてみましょう。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Bare library running"
msgstr "ベアライブラリの実行"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This is the less sophisticated extension.\n"
"It consists of a set of patches to make sure a library runs on GraalVM.\n"
"If possible, contribute these patches upstream, not in extensions.\n"
"Second best is to write Substrate VM substitutions, which are patches applied during native image compilation."
msgstr "これはあまり洗練されていないエクステンションです。これは、ライブラリがGraalVM上で動作するようにするためのパッチのセットで構成されています。可能であれば、これらのパッチはエクステンションの中ではなく、アップストリームで貢献してください。二番目に良いのは、ネイティブイメージのコンパイル時に適用されるパッチである Substrate VM 置換を書くことです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Get a framework running"
msgstr "実行中のフレームワークを取得する"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"A framework at runtime typically reads configuration, scan the classpath and classes for metadata (annotations, getters etc.), build a metamodel on top of which it runs, find options via the service loader pattern, prepare invocation calls (reflection), proxy interfaces, etc. +\n"
"These operations should be done at build time and the metamodel be passed to the recorder DSL that will generate classes that will be executed at runtime and boot the framework."
msgstr "実行時のフレームワークは通常、設定を読み込み、クラスパスとクラスをスキャンしてメタデータ (アノテーションやゲッターなど) を探し、その上にメタモデルを構築し、サービスローダパターンを介してオプションを見つけ、実行呼び出し (リフレクション) やプロキシインターフェイスなどを準備します。これらの操作はビルド時に行われ、メタモデルは実行時に実行されるクラスを生成するレコーダ－ DSL　に渡され、フレームワークを起動します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Get a CDI portable extension running"
msgstr "CDI ポータブルエクステンションを動作させる"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The CDI portable extension model is very flexible.\n"
"Too flexible to benefit from the build time boot promoted by Quarkus.\n"
"Most extension we have seen do not make use of these extreme flexibility capabilities.\n"
"The way to port a CDI extension to Quarkus is to rewrite it as a Quarkus extension which will define the various beans at build time (deployment time in extension parlance)."
msgstr "CDIポータブルエクステンションモデルは非常に柔軟性が高いです。Quarkusが推進するビルドタイムブートの恩恵を受けるには、あまりにも柔軟性が高すぎます。私たちが見てきたほとんどのエクステンションは、このような極端な柔軟性の機能を利用していません。CDIエクステンションをQuarkusに移植する方法は、ビルド時（エクステンションの言い方ではデプロイ時）に様々なBeanを定義するQuarkusエクステンションとして書き換えることです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Levels of capability"
msgstr "機能レベル"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Quarkus extensions can do lots of things. The xref:extension-maturity-matrix.adoc[extension maturity matrix] lays out a path through the various capabilities, with a suggested implementation order."
msgstr "Quarkus エクステンションは多くのことを行うことができます。xref:extension-maturity-matrix.adoc[エクステンション成熟度マトリックス] は、さまざまな機能のパスを示し、推奨される実装順序を示しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Technical aspect"
msgstr "技術的な側面"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Three Phases of Bootstrap and Quarkus Philosophy"
msgstr "ブートストラップの 3 つのフェーズと Quarkus 哲学"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "There are three distinct bootstrap phases of a Quarkus app:"
msgstr "Quarkusアプリには、3つの異なるブートストラップフェーズがあります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Augmentation"
msgstr "拡張"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This is the first phase, and is done by the <<build-step-processors>>. These processors have access to Jandex annotation\n"
"information and can parse any descriptors and read annotations, but should not attempt to load any application classes. The output of these\n"
"build steps is some recorded bytecode, using an extension of the ObjectWeb ASM project called Gizmo(ext/gizmo), that is used to actually bootstrap the application at runtime.\n"
"Depending on the `io.quarkus.deployment.annotations.ExecutionTime` value of the `@io.quarkus.deployment.annotations.Record` annotation associated with the build step,\n"
"the step may be run in a different JVM based on the following two modes."
msgstr ""
"これは最初のフェーズであり、<<build-step-processors>> によって行われます。これらのプロセッサーは　Jandex アノテーション情報にアクセスすることができ、\n"
"任意の記述子を解析してアノテーションを読み取ることができますが、任意のアプリケーションクラスのロードは試みないでください。これらのビルドステップの出力は、\n"
"Gizmo (ext/gizmo) と呼ばれる ObjectWeb ASM プロジェクトのエクステンションを使用して、記録されたバイトコードであり、実行時にアプリケーションを実際にブートストラップするために使用されます。\n"
"ビルドステップに関連する `@io.quarkus.deployment.annotations.Record` アノテーションの `io.quarkus.deployment.annotations.ExecutionTime` 値に応じて、\n"
"そのステップは、以下の 2 つのモードに基づいて異なる JVM で実行されることがあります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Static Init"
msgstr "スタティック初期化"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"If bytecode is recorded with `@Record(STATIC_INIT)` then it will be executed from a static init method on the main\n"
"class. For a native executable build, this code is executed in a normal JVM as part of the native build\n"
"process, and any retained objects that are produced in this stage will be directly serialized into the native executable via an image mapped file.\n"
"This means that if a framework can boot in this phase then it will have its booted state directly written to the\n"
"image, and so the boot code does not need to be executed when the image is started."
msgstr "`@Record(STATIC_INIT)` でバイトコードが記録されている場合は、mainクラスのスタティック初期化メソッドから実行されます。ネイティブビルドの場合、このコードはネイティブビルドプロセスの一部として通常のJVMで実行され、この段階で生成されたリテインドオブジェクトは、イメージマップされたファイルを介してネイティブ実行可能ファイルに直接シリアル化されます。つまり、この段階でフレームワークが起動できれば、そのフレームワークの起動状態がイメージに直接書き込まれるため、イメージの起動時にブートコードを実行する必要がありません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "There are some restrictions on what can be done in this stage as the Substrate VM disallows some objects in the native executable. For example you should not attempt to listen on a port or start threads in this phase. In addition, it is disallowed to read run time configuration during static initialization."
msgstr "この段階では、サブストレートVMがネイティブ実行可能ファイルに含まれるいくつかのオブジェクトを許可しないため、実行できる内容にいくつかの制限があります。例えば、この段階でポートのリッスンやスレッドの開始を試みてはいけません。また、スタティック初期化時に実行時設定を読み取ることも禁止されています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"In non-native pure JVM mode, there is no real difference between Static and Runtime Init, except that Static Init is always executed first. This mode benefits from the same build phase augmentation as native mode as the descriptor parsing and annotation scanning are done\n"
"at build time and any associated class/framework dependencies can be removed from the build output jar. In servers like\n"
"WildFly, deployment related classes such as XML parsers hang around for the life of the application, using up valuable\n"
"memory. Quarkus aims to eliminate this, so that the only classes loaded at runtime are actually used at runtime."
msgstr "非ネイティブのピュアJVMモードでは、スタティック起動とランタイム起動に実質的な違いはありませんが、スタティック起動が常に最初に実行されることが異なります。このモードでは、記述子の解析とアノテーションのスキャンがビルド時に行われ、関連するクラスやフレームワークの依存関係がビルド出力jarから削除されるため、ネイティブモードと同様のビルドフェーズのエクステンションが利用できます。WildFlyのようなサーバーでは、XMLパーサーなどの展開関連クラスがアプリケーションの存続期間中、貴重なメモリを使用してぶら下がっています。Quarkusは、このようなことをなくし、実行時にロードされるクラスのみが実行時に実際に使用されるようにすることを目指しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"As an example, the only reason that a Quarkus application should load an XML parser is if the user is using XML in their\n"
"application. Any XML parsing of configuration should be done in the Augmentation phase."
msgstr "例として、QuarkusアプリケーションがXMLパーサーをロードする理由は、ユーザーがアプリケーションでXMLを使用している場合のみです。どの設定のXMLパースも、拡張フェーズで行う必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Runtime Init"
msgstr "ランタイム初期化"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"If bytecode is recorded with `@Record(RUNTIME_INIT)` then it is executed from the application's main method. This code\n"
"will be run on native executable boot. In general as little code as possible should be executed in this phase, and should\n"
"be restricted to code that needs to open ports etc."
msgstr "`@Record(RUNTIME_INIT)` でバイトコードが記録されている場合は、アプリケーションのメインメソッドから実行されます。このコードはネイティブ実行可能ファイルブートで実行されます。一般的に、このフェーズではできるだけ少ないコードを実行すべきであり、ポートを開く必要があるコードなどに限定すべきです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Pushing as much as possible into the `@Record(STATIC_INIT)` phase allows for two different optimizations:"
msgstr "`@Record(STATIC_INIT)` フェーズにできるだけ多くのものを押し込むことで、2つの異なる最適化が可能になります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "In both native executable and pure JVM mode this allows the app to start as fast as possible since processing was done during build time. This also minimizes the classes/native code needed in the application to pure runtime related behaviors."
msgstr "ネイティブ実行可能ファイルとピュアJVMの両方のモードで、これによりビルド時に処理が行われたため、アプリを可能な限り高速に起動することができます。また、アプリケーションに必要なクラスやネイティブコードを最小限に抑え、純粋な実行時関連の動作を実現します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Another benefit with native executable mode is that Substrate can more easily eliminate features that are not used. If features are directly initialized via bytecode, Substrate can detect that a method is never called and eliminate\n"
"that method. If config is read at runtime, Substrate cannot reason about the contents of the config and so needs to keep all features in case they are required."
msgstr "ネイティブ実行可能ファイルモードのもう一つの利点は、サブストレートが使われない機能をより簡単に排除できることです。機能がバイトコードで直接初期化される場合、Substrateはメソッドが一度も呼ばれていないことを検知し、そのメソッドを削除することができます。また、実行時に設定を読み込む場合、サブストレートは設定の内容を推論することができないため、必要な場合に備えてすべての機能を残しておく必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Project setup"
msgstr "プロジェクトのセットアップ"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Your extension project should be setup as a multi-module project with two submodules:"
msgstr "エクステンションプロジェクトは、2つのサブモジュールを持つマルチモジュールプロジェクトとして設定する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A deployment time submodule that handles the build time processing and bytecode recording."
msgstr "ビルド時の処理やバイトコードの記録を行うデプロイメント時サブモジュール"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A runtime submodule that contains the runtime behavior that will provide the extension behavior in the native executable or runtime JVM."
msgstr "ネイティブ実行可能ファイルまたはランタイムJVMでエクステンション動作を提供する実行時動作を含むランタイムサブモジュール"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Your runtime artifact should depend on `io.quarkus:quarkus-core`, and possibly the runtime artifacts of other Quarkus\n"
"modules if you want to use functionality provided by them."
msgstr ""
"ランタイムアーティファクトは `io.quarkus:quarkus-core` に依存する必要があります。また、他の Quarkus モジュールが\n"
"提供する機能を使用したい場合は、それらのランタイムアーティファクトにも依存する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Your deployment time module should depend on `io.quarkus:quarkus-core-deployment`, your runtime artifact,\n"
"and the deployment artifacts of any other Quarkus extensions your own extension depends on. This is essential, otherwise any transitively\n"
"pulled in extensions will not provide their full functionality."
msgstr ""
"デプロイメントタイムモジュールは、 `io.quarkus:quarkus-core-deployment` ランタイムアーティファクト、および自身のエクステンションが依存する他の Quarkus エクステンションのデプロイメントアーティファクトに依存する必要があります。\n"
"これは重要です。依存しない場合、間接的に取り込まれたエクステンションがその機能を十分に提供できなくなります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The Maven and Gradle plugins will validate this for you and alert you to any deployment artifacts you might have forgotten to add."
msgstr "Maven および Gradle プラグインはこれを検証し、追加し忘れた可能性のあるデプロイメントアーティファクトがあれば警告します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Under no circumstances can the runtime module depend on a deployment artifact. This would result\n"
"in pulling all the deployment time code into runtime scope, which defeats the purpose of having the split."
msgstr "いかなる場合でも、実行時モジュールはデプロイメントアーティファクトに依存することはできません。これは、すべてのデプロイメント時のコードが実行時スコープに取り込まれることに繋がり、分割の目的を台無しにします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Using Maven"
msgstr "Maven の使用"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "You will need to include the `io.quarkus:quarkus-extension-maven-plugin` and configure the `maven-compiler-plugin` to detect the `quarkus-extension-processor` annotation processor to collect and generate the necessary xref:extension-metadata.adoc[Quarkus extension metadata] for the extension artifacts, if you are using the Quarkus parent pom it will automatically inherit the correct configuration."
msgstr "`io.quarkus:quarkus-extension-maven-plugin` をインクルードして、 `maven-compiler-plugin` で `quarkus-extension-processor` アノテーションプロセッサを検出し、拡張アーティファクトに必要な xref:extension-metadata.adoc[Quarkus エクステンションメタデータ]を収集・生成する必要がありますが、もし Quarkus 親 pom を使用していれば自動的に正しい構成を継承します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "You may want to use the `create-extension` mojo of `{quarkus-platform-groupid}:quarkus-maven-plugin` to create these Maven modules - see the next section."
msgstr "You may want to use the `create-extension` mojo of `{quarkus-platform-groupid}:quarkus-maven-plugin` to create these Maven modules - see the next section."

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"By convention the deployment time artifact has the `-deployment` suffix, and the runtime artifact\n"
"has no suffix (and is what the end user adds to their project)."
msgstr "規約として、デプロイメント時アーティファクトには `-deployment` というサフィックスを付け、実行時アーティファクトにはサフィックスを付けません（エンドユーザーが自分のプロジェクトに追加するものです）。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The above `maven-compiler-plugin` configuration requires version 3.5+."
msgstr "上記の `maven-compiler-plugin` の設定には、バージョン 3.5+ が必要です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "You will also need to configure the `maven-compiler-plugin` of the deployment module to detect the `quarkus-extension-processor` annotation processor."
msgstr "また、 `quarkus-extension-processor` アノテーションプロセッサを検出するようデプロイメントモジュールの `maven-compiler-plugin` を設定する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Create new Quarkus Core extension modules using Maven"
msgstr "Maven を使用した新しい Quarkus Core 拡張モジュールの作成"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Quarkus provides `create-extension` Maven Mojo to initialize your extension project."
msgstr "Quarkus は、 `create-extension` Maven Mojo を提供し、拡張プロジェクトを初期化します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "It will try to auto-detect its options:"
msgstr "オプションの自動検出が試行されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "from `quarkus` (Quarkus Core) or `quarkus/extensions` directory, it will use the 'Quarkus Core' extension layout and defaults."
msgstr "`quarkus` (Quarkus Core) または `quarkus/extensions` ディレクトリからアクセスすると、'Quarkus Core' エクステンションのレイアウトとデフォルトが使用されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "with `-DgroupId=io.quarkiverse.[extensionId]`, it will use the 'Quarkiverse' extension layout and defaults."
msgstr "`-DgroupId=io.quarkiverse.[extensionId]` を使用すると、'Quarkiverse' エクステンションのレイアウトとデフォルトを使用します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "in other cases it will use the 'Standalone' extension layout and defaults."
msgstr "それ以外の場合は 'Standalone' エクステンションのレイアウトとデフォルトを使用します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "we may introduce other layout types in the future."
msgstr "将来的には他のレイアウトタイプを導入する可能性があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "You may not specify any parameter to use the interactive mode: `mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create-extension -N`"
msgstr "インタラクティブモードを使用するために、パラメーターを指定することはできません: `mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create-extension -N`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "As and example, let's add a new extension called `my-ext` to the Quarkus source tree:"
msgstr "例として、 `my-ext` という新しいエクステンションをQuarkusのソースツリーに追加してみましょう:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "By default, the `groupId`, `version`, `quarkusVersion`, `namespaceId`, and `namespaceName` will be consistent with other Quarkus core extensions."
msgstr "デフォルトでは、 `groupId`, `version`, `quarkusVersion`, `namespaceId`, `namespaceName` は、他のQuarkusコアエクステンションと一致します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The extension description is important as it is displayed on https://code.quarkus.io/, when listing extensions with the Quarkus CLI, etc."
msgstr "エクステンションの説明は、 https://code.quarkus.io/、Quarkus CLI でエクステンションを一覧表示する際などに表示されるため、重要です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The above sequence of commands does the following:"
msgstr "上記の一連のコマンドは、次のような動作をします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Creates four new Maven modules:"
msgstr "4つの新しいMavenモジュールを作成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus-my-ext-parent` in the `extensions/my-ext` directory"
msgstr "`extensions/my-ext` ディレクトリーにある `quarkus-my-ext-parent` を使用します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus-my-ext` in the `extensions/my-ext/runtime` directory"
msgstr "`extensions/my-ext/runtime` ディレクトリーにある `quarkus-my-ext` を使用します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus-my-ext-deployment` in the `extensions/my-ext/deployment` directory; a basic `MyExtProcessor` class is generated in this module."
msgstr "`extensions/my-ext/deployment` ディレクトリに `quarkus-my-ext-deployment` ; 基本的な `MyExtProcessor` クラスはこのモジュールで生成されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus-my-ext-integration-test` in the `integration-tests/my-ext/deployment` directory; an empty Jakarta REST Resource class and two test classes (for JVM mode and native mode) are generated in this module."
msgstr "`integration-tests/my-ext/deployment` ディレクトリーの `quarkus-my-ext-integration-test`: 空の Jakarta REST Resource クラスと 2 つのテストクラス (JVM モードとネイティブモード用) がこのモジュールで生成されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Links these three modules where necessary:"
msgstr "必要に応じて、これらの3つのモジュールをリンクします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus-my-ext-parent` is added to the `<modules>` of `quarkus-extensions-parent`"
msgstr "`quarkus-my-ext-parent` が `quarkus-extensions-parent` の `<modules>` に追加されました。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus-my-ext` is added to the `<dependencyManagement>` of the Quarkus BOM (Bill of Materials) `bom/application/pom.xml`"
msgstr "QuarkusのBOM（Bill of Materials） `bom/application/pom.xml` の `<dependencyManagement>` に `quarkus-my-ext` が追加されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus-my-ext-deployment` is added to the `<dependencyManagement>` of the Quarkus BOM (Bill of Materials) `bom/application/pom.xml`"
msgstr "QuarkusのBOM（Bill of Materials） `bom/application/pom.xml` の `<dependencyManagement>` に `quarkus-my-ext-deployment` が追加されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus-my-ext-integration-test` is added to the `<modules>` of `quarkus-integration-tests-parent`"
msgstr "quarkus-my-ext-integration-test` は `quarkus-integration-tests-parent` の `<modules>` に追加されました。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "You also have to fill the xref:extension-metadata.adoc#quarkus-extension-yaml[quarkus-extension.yaml] template file that describe your extension inside the runtime module `src/main/resources/META-INF` folder."
msgstr "また、ランタイムモジュール `src/main/resources/META-INF` フォルダ内に、エクステンションを記述した xref:extension-metadata.adoc#quarkus-extension-yaml[quarkus-extension.yaml] テンプレートファイルを記述する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This is the `quarkus-extension.yaml` template of the `quarkus-agroal` extension, you can use it as an example:"
msgstr "これは、 `quarkus-agroal` エクステンションの `quarkus-extension.yaml` です。手本として使用することができます:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "the name of the extension that will be displayed to users"
msgstr "ユーザーに表示される拡張子の名前"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "keywords that can be used to find the extension in the extension catalog"
msgstr "エクステンションカタログでエクステンションを検索するために使用できるキーワード"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "link to the extension's guide or documentation"
msgstr "エクステンションのガイドまたはドキュメントへのリンク"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "categories under which the extension should appear on https://code.quarkus.io[code.quarkus.io], could be omitted, in which case the extension will still be listed but not under any specific category"
msgstr "https://code.quarkus.io[code.quarkus.io] で表示されるべきカテゴリーを省略することができます。この場合、エクステンションは表示されますが、特定のカテゴリーには表示されません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "maturity status, which could be `stable`, `preview` or `experimental`, evaluated by extension maintainers"
msgstr "エクステンションのメンテナーが評価する、 `stable`、 `preview`、 `experimental` のいずれかの成熟度状態。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The `name` parameter of the mojo is optional.\n"
"If you do not specify it on the command line, the plugin will derive it from `extensionId` by replacing dashes with spaces and uppercasing each token.\n"
"So you may consider omitting explicit `name` in some cases."
msgstr "mojoの `name` パラメータはオプションです。コマンドラインで指定しなかった場合、プラグインは `extensionId` からダッシュをスペースに置き換え、各トークンを大文字にすることで導出します。そのため、場合によっては明示的な `name` を省略することも考えられます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Please refer to https://github.com/quarkusio/quarkus/blob/{quarkus-version}/devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo.java[CreateExtensionMojo JavaDoc] for all the available options of the mojo."
msgstr "Mojoで使用できるすべてのオプションについては、 link:https://github.com/quarkusio/quarkus/blob/{quarkus-version}/devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo.java[CreateExtensionMojoのJavaDoc]を参照してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Using Gradle"
msgstr "Gradle の使用"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"You will need to apply the `io.quarkus.extension` plugin in the `runtime` module of your extension project.\n"
"The plugin includes the `extensionDescriptor` task that will generate `META-INF/quarkus-extension.properties` and `META-INF/quarkus-extension.yml` files.\n"
"The plugin also enables the `io.quarkus:quarkus-extension-processor` annotation processor in both `deployment` and `runtime` modules to collect and generate the rest of the xref:extension-metadata.adoc[Quarkus extension metadata].\n"
"The name of the deployment module can be configured in the plugin by setting the `deploymentModule` property. The property is set to `deployment` by default:"
msgstr "エクステンションプロジェクトの `runtime` モジュールに `io.quarkus.extension` プラグインを適用する必要があります。  このプラグインには `META-INF/quarkus-extension.properties` と `META-INF/quarkus-extension.yml` ファイルを生成する `extensionDescriptor` というタスクが含まれています。  また、このプラグインは `io.quarkus:quarkus-extension-processor` アノテーションプロセッサを `deployment` と `runtime` の両方のモジュールで有効にして、残りの xref:extension-metadata.adoc[Quarkus extension metadata] を収集し生成するようにします。  デプロイメントモジュールの名前は、プラグイン内で `deploymentModule` プロパティを設定することによって設定することができます。このプロパティは、デフォルトで `deployment` に設定されています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Build Step Processors"
msgstr "ビルドステッププロセッサー"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Work is done at augmentation time by _build steps_ which produce and consume _build items_.  The build steps found in\n"
"the deployment modules that correspond to the extensions in the project build are automatically wired together and executed\n"
"to produce the final build artifact(s)."
msgstr "作業は、 _ビルドアイテム_ を生成・消費する _ビルドステップ_ によって拡張時に行われます。プロジェクトビルドのエクステンションに対応するデプロイメント・モジュール内のビルドステップは、自動的に接続され、最終的なビルドアーティファクトを生成するために実行されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Build steps"
msgstr "ビルドステップ"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"A _build step_ is a non-static method which is annotated with the `@io.quarkus.deployment.annotations.BuildStep` annotation.\n"
"Each build step may <<consuming-values,consume>> items that are produced by earlier stages, and <<producing-values,produce>> items that can be consumed by later stages. Build steps are normally only run when they produce a build item that is\n"
"ultimately consumed by another step."
msgstr "_ビルドステップ_ は、 `@io.quarkus.deployment.annotations.BuildStep` アノテーションが付与された非静的なメソッドです。各ビルドステップは、前のステージで生成されたアイテムを link:#consuming-values[消費したり] 、後のステージで消費できるアイテムを link:#producing-values[生成したり]します。ビルドステップは通常、最終的に他のステップで消費されるビルドアイテムを生成するときにのみ実行されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Build steps are normally placed on plain classes within an extension's deployment module.  The classes are automatically\n"
"instantiated during the augment process and utilize <<injection,injection>>."
msgstr "ビルドステップは通常、エクステンションのデプロイメントモジュール内のプレーンなクラスに配置されます。このクラスは、拡張プロセス中に自動的にインスタンス化され、 link:#injection[インジェクション]を利用します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Build items"
msgstr "ビルドアイテム"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Build items are concrete, final subclasses of the abstract `io.quarkus.builder.item.BuildItem` class.  Each build item represents\n"
"some unit of information that must be passed from one stage to another.  The base `BuildItem` class may not itself be directly\n"
"subclassed; rather, there are abstract subclasses for each of the kinds of build item subclasses that _may_ be created:\n"
"<<simple-build-items,simple>>, <<multi-build-items,multi>>, and <<empty-build-items,empty>>."
msgstr "ビルドアイテムは、abstractな `io.quarkus.builder.item.BuildItem` クラスのfinalな具象サブクラスです。それぞれのビルドアイテムは、あるステージから別のステージに渡す必要のある情報の単位を表します。ベースとなる `BuildItem` クラスは、それ自体を直接サブクラス化することはできません。むしろ、作成 _可能な_ ビルドアイテムのサブクラスの種類（ link:#simple-build-items[シンプル]、 link:#multi-build-items[マルチ]、 link:#empty-build-items[空]）ごとに抽象サブクラスがあります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Think of build items as a way for different extensions to communicate with one another.  For example, a build item can:"
msgstr "ビルドアイテムは、異なるエクステンションが相互に通信するための手段と考えてください。例えば、ビルドアイテムは以下のことができます:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "expose the fact that a database configuration exists"
msgstr "データベース設定が存在することを明らかにする"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "consume that database configuration (e.g. a connection pool extension or an ORM extension)"
msgstr "データベースの設定を利用する（例：コネクションプールエクステンション、ORMエクステンション）"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"ask an extension to do work for another extension: e.g. an extension wanting to define a new CDI bean and asking the ArC extension\n"
"to do so"
msgstr "エクステンションに別のエクステンションの動作を要求する。たとえば、新しい CDI Bean を定義するエクステンションの代わりに、ArC エクステンションにその定義を要求します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This is a very flexible mechanism."
msgstr "これは非常に柔軟なメカニズムです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"`BuildItem` instances should be immutable, as the producer/consumer model does not allow for mutation to be correctly\n"
"ordered. This is not enforced but failure to adhere to this rule can result in race conditions."
msgstr "`BuildItem` インスタンスはイミュータブルでなければなりません。プロデューサー/コンシューマーモデルでは、ミューテーションを正しく順序付けることができないからです。これは強制されるものではありませんが、このルールに従わないと競合状態になる可能性があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Build steps are executed if and only if they produce build items that are (transitively) needed by other build steps. Make sure your build step produces a build item, otherwise you should probably produce either `ValidationErrorBuildItem` for build validations, or `ArtifactResultBuildItem` for generated artifacts."
msgstr "ビルドステップは、他のビルドステップが（推移的に）必要とするビルドアイテムを生成する場合にのみ、実行されます。ビルドステップがビルドアイテムを生成することを確認してください。そうでない場合は、ビルド検証用に `ValidationErrorBuildItem` を生成するか、生成されたアーティファクト用に `ArtifactResultBuildItem` を生成すべきです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Simple build items"
msgstr "シンプルなビルドアイテム"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Simple build items are final classes which extend `io.quarkus.builder.item.SimpleBuildItem`.  Simple build items may only\n"
"be produced by one step in a given build; if multiple steps in a build declare that they produce the same simple build item,\n"
"an error is raised.  Any number of build steps may consume a simple build item.  A build step which consumes a simple\n"
"build item will always run _after_ the build step which produced that item."
msgstr "シンプルビルドアイテムは `io.quarkus.builder.item.SimpleBuildItem` を拡張したfinalクラスです。シンプルビルドアイテムは、特定のビルドにおいて、1つのステップでのみ作成できます。ビルド内の複数のステップが同じシンプルビルドアイテムを生成すると宣言した場合、エラーが発生します。シンプルビルドアイテムを利用するビルドステップは、常にそのアイテムを生成したビルドステップの _後に_ 実行されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example of a single build item"
msgstr "単一のビルドアイテムの例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Multi build items"
msgstr "マルチビルドアイテム"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Multiple or \"multi\" build items are final classes which extend `io.quarkus.builder.item.MultiBuildItem`.  Any number of\n"
"multi build items of a given class may be produced by any number of steps, but any steps which consume multi build items\n"
"will only run _after_ every step which can produce them has run."
msgstr "マルチビルドアイテムは、 `io.quarkus.builder.item.MultiBuildItem` を拡張したfinalクラスです。あるクラスのマルチビルドアイテムは、任意の数のステップで、任意の数生成できますが、マルチビルドアイテムを利用するステップは、それらを生成できるすべてのステップが実行された後のみ実行されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example of a multiple build item"
msgstr "マルチビルドアイテムの例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example of multiple build item usage"
msgstr "マルチビルドアイテムの使用例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Empty build items"
msgstr "空のビルドアイテム"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Empty build items are final (usually empty) classes which extend `io.quarkus.builder.item.EmptyBuildItem`.\n"
"They represent build items that don't actually carry any data, and allow such items to be produced and consumed\n"
"without having to instantiate empty classes.  They cannot themselves be instantiated."
msgstr "空のビルドアイテムは、 `io.quarkus.builder.item.EmptyBuildItem` を拡張するfinalの（通常は空の）クラスです。空のビルドアイテムは、実際には何のデータも持たないビルドアイテムを表しており、空のクラスをインスタンス化することなく、そのようなアイテムを生成したり消費したりすることができます。空のクラスは、それ自体をインスタンス化することはできません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"As they cannot be instantiated, they cannot be injected by any means, nor be returned by a build step (or via a `BuildProducer`).\n"
"To produce an empty build item you must annotate the build step with `@Produce(MyEmptyBuildItem.class)` and to consume it by `@Consume(MyEmptyBuildItem.class)`."
msgstr "それらはインスタンス化できないため、いかなる方法でも注入することも、ビルドステップ (または `BuildProducer` を介して) によって返すこともできません。 空のビルド アイテムを生成するには、ビルド ステップに `@Produce(MyEmptyBuildItem.class)` でアノテーションを付け、それを `@Consume(MyEmptyBuildItem.class)` で消費する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example of an empty build item"
msgstr "空のビルドアイテムの例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Empty build items can represent \"barriers\" which can impose ordering between steps.  They can also be used in\n"
"the same way that popular build systems use \"pseudo-targets\", which is to say that the build item can represent a\n"
"conceptual goal that does not have a concrete representation."
msgstr "空のビルドアイテムは、ステップ間の順序付けを可能にする「バリア」を表すことができます。また、一般的なビルドシステムが「疑似ターゲット」を使用するのと同じように、空のビルドアイテムを使用することもできます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example of usage of an empty build item in a \"pseudo-target\" style"
msgstr "空のビルドアイテムを「疑似ターゲット」スタイルで使用する例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example of usage of an empty build item in a \"barrier\" style"
msgstr "空のビルドアイテムを \"バリア \"スタイルで使用した例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Validation Error build items"
msgstr "バリデーションエラービルドアイテム"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "They represent build items with validation errors that make the build fail. These build items are consumed during the initialization of the CDI container."
msgstr "これらは、ビルドを失敗させるバリデーションエラーを持つビルドアイテムを表します。これらのビルドアイテムは、CDIコンテナの初期化時に消費されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example of usage of an validation error build item in a \"pseudo-target\" style"
msgstr "「疑似ターゲット」スタイルでバリデーションエラービルドアイテムを使用する例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Artifact Result build items"
msgstr "アーティファクトリゾルトビルドアイテム"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"They represent build items containing the runnable artifact generated by the build, such as an uberjar or thin jar.\n"
"These build items can also be used to always execute a build step without needing to produce anything."
msgstr "これらは、uberjar や thin jar など、ビルドによって生成された実行可能なアーティファクトを含むビルド アイテムを表します。 これらのビルドアイテムを使用して、何も生成せずに常にビルド ステップを実行することもできます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example of build step that is always executed in a \"pseudo-target\" style"
msgstr "「疑似ターゲット」スタイルで常に実行されるビルドステップの例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Injection"
msgstr "インジェクション"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Classes which contain build steps support the following types of injection:"
msgstr "ビルドステップを含むクラスは、以下のタイプのインジェクションに対応しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Constructor parameter injection"
msgstr "コンストラクタパラメータ・インジェクション"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Field injection"
msgstr "フィールド・インジェクション"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Method parameter injection (for build step methods only)"
msgstr "メソッドパラメータ・インジェクション（ビルドステップ・メソッドの場合のみ）"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Build step classes are instantiated and injected for each build step invocation, and are discarded afterwards.  State\n"
"should only be communicated between build steps by way of build items, even if the steps are on the same class."
msgstr "ビルド・ステップ・クラスは、ビルド・ステップを呼び出すたびにインスタンス化され、注入され、その後は破棄されます。ビルドステップ間では、たとえ同じクラスであっても、ビルドアイテムを介してのみ状態が伝達されるべきです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Final fields are not considered for injection, but can be populated by way of constructor parameter injection\n"
"if desired.  Static fields are never considered for injection."
msgstr "finalフィールドはインジェクションの対象にはなりませんが、必要に応じてコンストラクタのパラメータインジェクションで入力することができます。staticフィールドは、インジェクションの対象にはなりません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The types of values that can be injected include:"
msgstr "注入可能な値の種類は以下の通りです:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "<<build-items,Build items>> produced by previous build steps"
msgstr "前のビルドステップで生成された link:#build-items[ビルドアイテム]"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "<<producing-values,Build producers>> to produce items for subsequent build steps"
msgstr "後続のビルドステップのためにアイテムを生産する link:#producing-values[ビルドプロデューサー]"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "<<configuration,Configuration Mapping>> types"
msgstr "<<configuration,設定マッピング>> 型"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Template objects for <<bytecode-recording,bytecode recording>>"
msgstr "link:#bytecode-recording[バイトコード記録]用のテンプレートオブジェクト"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Objects which are injected into a build step method or its class _must not_ be used outside that method's\n"
"execution."
msgstr "ビルドステップのメソッドやそのクラスに注入されたオブジェクトは、そのメソッドの実行時以外に使用しては _いけません_ 。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Injection is resolved at compile time via an annotation processor,\n"
"and the resulting code does not have permission to inject private fields or invoke private methods."
msgstr "インジェクションは、アノテーション・プロセッサを介してコンパイル時に解決され、生成されたコードは、プライベート・フィールドを注入したり、プライベート・メソッドを呼び出したりする権限を持ちません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Producing values"
msgstr "値の生成"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A build step may produce values for subsequent steps in several possible ways:"
msgstr "ビルドステップは、いくつかの可能な方法で後続のステップのために値を生成することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "By returning a <<simple-build-items,simple build item>> or <<multi-build-items,multi build item>> instance"
msgstr "link:#simple-build-items[シンプルビルドアイテム]や link:#multi-build-items[マルチビルドアイテム]のインスタンスを返すことで"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "By returning a `List` of a multi build item class"
msgstr "マルチビルドアイテムクラスの `List` を返すことで"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "By injecting a `BuildProducer` of a simple or multi build item class"
msgstr "単純または複数のビルドアイテムクラスの `BuildProducer` を挿入する"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"By annotating the method with `@io.quarkus.deployment.annotations.Produce`, giving the class name of an\n"
"<<empty-build-items,empty build item>>"
msgstr "メソッドに `@io.quarkus.deployment.annotations.Produce` というアノテーションを付けて、<<empty-build-items,空のビルドアイテム>> のクラス名を指定します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"If a simple build item is declared on a build step, it _must_ be produced during that build step, otherwise an error\n"
"will result.  Build producers, which are injected into steps, _must not_ be used outside that step."
msgstr "単純な構築項目が構築ステップで宣言される場合、それはその構築ステップの間に生成されなければならず、さもなければエラーが発生します。ステップに注入されるビルドプロデューサーは、そのステップの外側で使用されては _なりません_。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Note that a `@BuildStep` method will only be called if it produces something that another consumer or the final output\n"
"requires. If there is no consumer for a particular item then it will not be produced. What is required will depend on\n"
"the final target that is being produced.  For example, when running in developer mode the final output will not ask\n"
"for GraalVM-specific build items such as `ReflectiveClassBuildItem`, so methods that only produce these\n"
"items will not be invoked."
msgstr "`@BuildStep` メソッドは、別のコンシューマーまたは最終出力が必要とするものを生成する場合にのみ呼び出されることに注意してください。特定のアイテムのコンシューマーがいない場合は生成されません。必要なものは、最終的な生成物により異なります。たとえば開発者モードで実行している場合、最終出力では `ReflectiveClassBuildItem` などの GraalVM 固有のビルドアイテムが要求されないため、これらのアイテムのみを生成するメソッドは呼び出されません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Consuming values"
msgstr "値の利用"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A build step may consume values from previous steps in the following ways:"
msgstr "ビルドステップは、以下の方法で前のステップの値を利用することができます:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "By injecting a <<simple-build-items,simple build item>>"
msgstr "link:#simple-build-items[シンプルビルドアイテム]を注入することで"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "By injecting an `Optional` of a simple build item class"
msgstr "シンプルビルドアイテムクラスの `Optional` を注入することで"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "By injecting a `List` of a <<multi-build-items,multi build item>> class"
msgstr "link:#multi-build-items[マルチビルドアイテムクラス]の `List` を注入することで"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"By annotating the method with `@io.quarkus.deployment.annotations.Consume`, giving the class name of an\n"
"<<empty-build-items,empty build item>>"
msgstr "メソッドに `@io.quarkus.deployment.annotations.Consume` というアノテーションを付けて、<<empty-build-items,空のビルドアイテム>> のクラス名を指定します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Normally it is an error for a step which is included to consume a simple build item that is not produced by any other\n"
"step.  In this way, it is guaranteed that all the declared values will be present and non-`null` when a step is run."
msgstr "通常、他のステップで生成されない単純なビルドアイテムを消費するために含まれるステップはエラーとなる。このように、ステップの実行時に、宣言された値がすべて存在し、かつ非 `null` であることが保証されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Sometimes a value isn't necessary for the build to complete, but might inform some behavior of the build step if it is\n"
"present.  In this case, the value can be optionally injected."
msgstr "ビルドを完了するために値が必要ない場合もありますが、値が存在する場合は、ビルドステップの動作を通知する場合があります。この場合、値はオプションで挿入できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Multi build values are always considered _optional_.  If not present, an empty list will be injected."
msgstr "マルチビルド値は常に _オプション_ とみなされます。存在しない場合は、空のリストが挿入されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Weak value production"
msgstr "弱い値の生成"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Normally a build step is included whenever it produces any build item which is in turn consumed by any other build step.  In this way,\n"
"only the steps necessary to produce the final artifact(s) are included, and steps which pertain to extensions which are\n"
"not installed or which only produce build items which are not relevant for the given artifact type are excluded."
msgstr "通常、ビルドステップは、他のビルドステップで使用されるビルドアイテムを生成する際に必ず含まれます。これにより、最終的なアーティファクトを生成するために必要なステップと、インストールされていないエクステンションに関連するステップ、または指定のアーティファクトタイプに関係のないビルドアイテムのみを生成するステップが含まれます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"For cases where this is not desired behavior, the `@io.quarkus.deployment.annotations.Weak` annotation may be used.  This\n"
"annotation indicates that the build step should not automatically be included solely on the basis of producing the annotated value."
msgstr "これが望ましくない動作である場合は、 `@io.quarkus.deployment.annotations.Weak` アノテーションを使用できます。このアノテーションは、アノテーション付きの値の生成のみに基づいてビルドステップが自動的に含まれるべきではないことを示しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example of producing a build item weakly"
msgstr "ビルドアイテムの弱い生成例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This method (not provided in this example) would generate the class using the ASM API."
msgstr "このメソッド (この例では提供されていません) は、ASM API を使用してクラスを生成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Certain types of build items are generally always consumed, such as generated classes or resources.\n"
"An extension might produce a build item along with a generated class to facilitate the usage\n"
"of that build item.  Such a build step would use the `@Weak` annotation on the generated class build item, while normally\n"
"producing the other build item.  If the other build item is ultimately consumed by something, then the step would run\n"
"and the class would be generated.  If nothing consumes the other build item, the step would not be included in the build\n"
"process."
msgstr "生成されたクラスやリソースなど、特定の種類のビルドアイテムは通常は常に消費されます。エクステンションは、生成されたクラスとともにビルドアイテムを生成して、そのビルドアイテムの使用を容易にする場合があります。このようなビルドステップでは、生成されたクラスビルドアイテムに `@Weak` アノテーションを使用しますが、通常は他のビルドアイテムを生成します。他のビルドアイテムが最終的に何かによって消費された場合、ステップが実行され、クラスが生成されます。他のビルドアイテムを消費するものがない場合、そのステップはビルドプロセスに含まれません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"In the example above, `GeneratedClassBuildItem` would only be produced if `ExecutorClassBuildItem` is consumed by\n"
"some other build step."
msgstr "上記の例では、 `GeneratedClassBuildItem` は、 `ExecutorClassBuildItem` が他のビルドステップによって消費された場合にのみ生成されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Note that when using <<bytecode-recording,bytecode recording>>, the implicitly generated class can be declared to be weak by\n"
"using the `optional` attribute of the `@io.quarkus.deployment.annotations.Record` annotation."
msgstr "<<bytecode-recording,バイトコード記録>> を使用する場合、暗黙的に生成されたクラスは `@io.quarkus.deployment.annotations.Record` アノテーションの `optional` 属性を使用して弱いと宣言できることに注意してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example of using a bytecode recorder where the generated class is weakly produced"
msgstr "生成されたクラスが弱く生成されるバイトコードレコーダーの使用例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Note the `optional` attribute."
msgstr "`optional` 属性に注意してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This example is using recorder proxies; see the section on <<bytecode-recording,bytecode recording>> for more information."
msgstr "この例では、レコーダープロキシーを使用しています。詳細は、<<bytecode-recording,バイトコード記録>> のセクションを参照してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Application Archives"
msgstr "アプリケーションアーカイブ"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The `@BuildStep` annotation can also register marker files that determine which archives on the class path are considered\n"
"to be 'Application Archives', and will therefore get indexed. This is done via the `applicationArchiveMarkers`. For\n"
"example the ArC extension registers `META-INF/beans.xml`, which means that all archives on the class path with a `beans.xml`\n"
"file will be indexed."
msgstr "`@BuildStep` アノテーションは、クラスパス上のどのアーカイブが「アプリケーション・アーカイブ」とみなされ、したがってインデックスが作成されるかを決定するマーカーファイルを登録することもできます。これは `applicationArchiveMarkers` を介して行われます。たとえば、ArCエクステンションでは `META-INF/beans.xml` を登録していますが、これは `beans.xml` ファイルがあるクラスパス上のすべてのアーカイブがインデックスされることを意味します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Using Thread's Context Class Loader"
msgstr "スレッドコンテキストクラスローダーの使用"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The build step will be run with a TCCL that can load user classes from the deployment in a transformer-safe way.\n"
"This class loader only lasts for the life of the augmentation, and is discarded afterwards.\n"
"The classes will be loaded again in a different class loader at runtime.\n"
"This means that loading a class during augmentation does not stop it from being transformed when running in the development/test mode."
msgstr "ビルドステップは、トランスフォーマーセーフな方法でデプロイメントからユーザークラスをロードできる TCCL を使用して実行されます。このクラスローダーは、オーグメンテーションの存続期間中のみ存在し、その後破棄されます。クラスは、実行時に別のクラスローダーに再度ロードされます。これは、オーグメンテーション中にクラスをロードしても、開発/テストモードで実行している場合はクラスの変換が停止しないことを意味します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Adding external JARs to the indexer with IndexDependencyBuildItem"
msgstr "IndexDependencyBuildItem によるインデクサへの外部 JAR の追加"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The index of scanned classes will not automatically include your external class dependencies.\n"
"To add dependencies, create a `@BuildStep` that produces `IndexDependencyBuildItem` objects, for a `groupId` and `artifactId`."
msgstr "スキャンされたクラスのインデックスには、外部クラスの依存関係が自動的に含まれることはありません。依存関係を追加するには、 `groupId` と `artifactId` に対して `IndexDependencyBuildItem` オブジェクトを生成する `@BuildStep` を作成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "It is important to specify all the required artifacts to be added to the indexer. No artifacts are implicitly added transitively."
msgstr "インデクサーに追加する必要のあるすべてのアーティファクトを指定することが重要です。暗黙的にアーティファクトが推移的に追加されることはありません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The `Amazon Alexa` extension adds dependent libraries from the Alexa SDK that are used in Jackson JSON transformations, in order for the reflective classes to identified and included at `BUILD_TIME`."
msgstr "`Amazon Alexa` エクステンションは、Jackson JSON 変換で使用される依存関係ライブラリーを Alexa SDK から追加し、リフレクションクラスが `BUILD_TIME` で識別および含まれるようにします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "With the artifacts added to the `Jandex` indexer, you can now search the index to identify classes implementing an interface, subclasses of a specific class, or classes with a target annotation."
msgstr "アーティファクトが `Jandex` インデクサーに追加されたので、インデックスを検索して、インターフェイスを実装するクラス、特定のクラスのサブクラス、またはターゲットアノテーションを持つクラスを特定できるようになりました。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"For example, the `Jackson` extension uses code like below to search for annotations used in JSON deserialization,\n"
"and add them to the reflective hierarchy for `BUILD_TIME` analysis."
msgstr "たとえば、 `Jackson` エクステンションは、以下のようなコードを使用して、JSON デシリアライズで使用されるアノテーションを検索し、それらを `BUILD_TIME` 分析のリフレクション階層に追加します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Visualizing build step dependencies"
msgstr "ビルドステップの依存関係の可視化"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"It can occasionally be useful to see a visual representation of the interactions between the various build steps. For such cases, adding `-Dquarkus.builder.graph-output=build.dot` when building an application\n"
"will result in the creation of the `build.dot` file in the project's root directory. See link:https://graphviz.org/resources/[this] for a list of software that can open the file and show the actual visual representation."
msgstr ""
"さまざまなビルドステップ間のインタラクションの視覚的表現を確認すると便利な場合があります。このような場合、アプリケーションのビルド時に `-Dquarkus.builder.graph-output=build.dot` を追加すると、\n"
"プロジェクトのルートディレクトリーに `build.dot` ファイルが作成されます。ファイルを開いて実際の視覚的表現を表示できるソフトウェアのリストについては、link:https://graphviz.org/resources/[こちら] を参照してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Configuration"
msgstr "設定"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Configuration in Quarkus is based on https://smallrye.io/smallrye-config/Main/[SmallRye Config]. All features provided\n"
"by https://smallrye.io/smallrye-config/Main/[SmallRye Config] are also available in Quarkus."
msgstr "Quarkusの設定は、 link:https://smallrye.io/smallrye-config/Main/[SmallRye Config] をベースにしています。 link:https://smallrye.io/smallrye-config/Main/[SmallRye Config] で提供されるすべての機能は、Quarkusでも利用可能です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Extensions must use https://smallrye.io/smallrye-config/Main/config/mappings/[SmallRye Config @ConfigMapping] to map\n"
"the configuration required by the Extension. This will allow Quarkus to automatically expose an instance of the mapping\n"
"to each configuration phase and generate the configuration documentation."
msgstr "エクステンションは、 link:https://smallrye.io/smallrye-config/Main/config/mappings/[SmallRye Configの@ConfigMapping] を使用して、Extensionが必要とする設定をマッピングする必要があります。これにより、Quarkusは、各設定フェーズにマッピングのインスタンスを自動的に公開し、設定ドキュメントを生成することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Config Phases"
msgstr "設定フェーズ"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Configuration mappings are strictly bound by configuration phase, and attempting to access a configuration mapping from\n"
"outside its corresponding phase will result in an error. They dictate when its contained keys are read from the\n"
"configuration, and when they are available to applications. The phases defined by\n"
"`io.quarkus.runtime.annotations.ConfigPhase` are as follows:"
msgstr "設定マッピングは設定フェーズによって厳密に制約されており、対応するフェーズ以外から設定マッピングにアクセスしようとするとエラーが発生します。設定マッピングは、その中に含まれるキーがいつ設定から読み出され、いつアプリケーションから利用できるようになるかを決定するものです。 `io.quarkus.runtime.annotations.ConfigPhase` で定義されているフェーズは次のとおりです："

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Phase name"
msgstr "フェーズ名"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Read & avail. at build time"
msgstr "ビルド時に読取、利用可"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Avail. at run time"
msgstr "実行時に利用可"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Read during static init"
msgstr "スタティック初期化時の読取"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Re-read during startup (native executable)"
msgstr "起動時の再読取（ネイティブ実行可能ファイル）"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Notes"
msgstr "備考"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "BUILD_TIME"
msgstr "BUILD_TIME"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "✓"
msgstr "✓"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "✗"
msgstr "✗"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Appropriate for things which affect build."
msgstr "ビルドに影響を与えるものに適しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "BUILD_AND_RUN_TIME_FIXED"
msgstr "BUILD_AND_RUN_TIME_FIXED"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Appropriate for things which affect build and must be visible for run time code.  Not read from config at run time."
msgstr "ビルドに影響し、ランタイムコードで表示される必要があるものに適しています。実行時に設定から読み取られません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "RUN_TIME"
msgstr "RUN_TIME"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Not available at build, read at start in all modes."
msgstr "ビルド時には使用できません。すべてのモードで開始時に読み取ります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "For all cases other than the `BUILD_TIME` case, the configuration mapping interface and all the configuration groups and types contained therein must be located in, or reachable from, the extension's run time artifact. Configuration mappings of phase `BUILD_TIME` may be located in or reachable from either of the extension's run time or deployment artifacts."
msgstr "`BUILD_TIME` 以外のすべての場合、設定マッピングインターフェースと、そこに含まれるすべての設定グループと型は、エクステンションの実行時アーティファクトに配置されるか、そこから到達可能でなければなりません。 `BUILD_TIME` フェーズの設定マッピングは、エクステンションの実行時アーティファクトまたはデプロイアメントアーティファクトのいずれかに配置されるか、そこから到達可能であれば大丈夫です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Configuration Example"
msgstr "設定例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"A configuration property name can be split into segments. For example, a property name like\n"
"`quarkus.log.file.enable` can be split into the following segments:"
msgstr "設定プロパティー名は、セグメントに分割できます。たとえば、 `quarkus.log.file.enable` のようなプロパティー名は、次のセグメントに分割できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus` - a namespace claimed by Quarkus which is a prefix for `@ConfigMapping` interfaces,"
msgstr "`quarkus` - Quarkusが主張する名前空間で、 `@ConfigMapping` インタフェースのプレフィックスです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`log` - a name segment which corresponds to the prefix set in the interface annotated with `@ConfigMapping`,"
msgstr "`enabled` - `@ConfigGroup` アノテーションが付けられた `FileConfig` クラスの `enable` フィールドに対応する名前セグメント。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`file` - a name segment which corresponds to the `file` field in this class,"
msgstr "`file` - このクラスの `file` フィールドに対応する名前セグメント。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`enable` - a name segment which corresponds to `enable` field in `FileConfig`."
msgstr "`enable` - `FileConfig` クラスの `enable` フィールドに対応する名前セグメント。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The `@ConfigMapping` annotation indicates that the interface is a configuration mapping, in this case one which\n"
"corresponds to a `quarkus.log` segment."
msgstr "`@ConfigMapping` のアノテーションは、インターフェースが設定マッピングであることを示し、この場合、 `quarkus.log` セグメントに対応するものであることを示しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The `@ConfigRoot` annotation indicated to which Config phase, the configuration applies to."
msgstr "`@ConfigRoot` アノテーションは、設定がどの設定フェーズに適用されるかを示したものです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Here the `LoggingProcessor` injects a `LogConfiguration` instance automatically by detecting the `@ConfigRoot`\n"
"annotation."
msgstr "ここで、 `LoggingProcessor` は、 `@ConfigRoot` アノテーションを検出することによって `LogConfiguration` インスタンスを自動的に挿入します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A corresponding `application.properties` for the above example could be:"
msgstr "上記の例に対応する `application.properties` は次のようになります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Since `format` is not defined in these properties, the default value from `@WithDefault` will be used instead."
msgstr "これらのプロパティには `format` が定義されていないため、代わりに `@WithDefault` のデフォルト値が使用されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"A configuration mapping name can contain an extra suffix segment for the case where there are configuration\n"
"mappings for multiple <<config-phases>>. Classes which correspond to the `BUILD_TIME` and `BUILD_AND_RUN_TIME_FIXED`\n"
"may end with `BuildTimeConfig` or `BuildTimeConfiguration`, classes which correspond to the `RUN_TIME` phase\n"
"may end with `RuntimeConfig`, `RunTimeConfig`, `RuntimeConfiguration` or `RunTimeConfiguration`."
msgstr ""
"設定マッピング名には、複数の <<config-phases>> に対応する設定マッピングがある場合に備えて、\n"
"追加のサフィックスセグメントを含めることができます。 `BUILD_TIME` と `BUILD_AND_RUN_TIME_FIXED` に対応するクラスは、\n"
"`BuildTimeConfig` または `BuildTimeConfiguration`で終わる場合があり、 `RUN_TIME` フェーズに対応するクラスは、\n"
"`RuntimeConfig`、 `RunTimeConfig`、 `RuntimeConfiguration` または `RunTimeConfiguration` で終わる場合があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Configuration Reference Documentation"
msgstr "設定リファレンスドキュメント"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The configuration is an important part of each extension and therefore needs to be properly documented. Each\n"
"configuration property should have a proper Javadoc comment."
msgstr "設定は各エクステンションの重要な部分であるため、適切に文書化される必要があります。各設定プロパティには、適切なJavadocコメントを付ける必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"While it is handy to have the documentation available when coding, the configuration documentation must also be\n"
"available in the extension guides. The Quarkus build automatically generates the configuration documentation based on\n"
"the Javadoc comments, but it needs to be explicitly included in each guide."
msgstr "コーディング時にドキュメントを利用できるのは便利ですが、設定ドキュメントもエクステンションガイドで利用できるようにする必要があります。Quarkusのビルドでは、Javadocのコメントに基づいて設定ドキュメントが自動的に生成されますが、各ガイドに明示的に記載する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Writing the documentation"
msgstr "ドキュメントの書き方"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Each configuration property, requires a Javadoc explaining its purpose."
msgstr "各設定プロパティには、その目的を説明するJavadocが必要です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The first sentence should be meaningful and self-contained as it is included in the summary table."
msgstr "最初のセンテンスは、サマリー表に含まれるため、意味があり、自己完結していることが望ましいです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"While standard Javadoc comments are perfectly fine for simple documentation (recommended even), AsciiDoc is more\n"
"suitable for tips, source code extracts, lists and more:"
msgstr "標準的なJavadocのコメントは単純なドキュメントには全く問題ありませんが（むしろ推奨）、AsciiDocはヒント、ソースコードの抽出、リストなどに適しています："

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"To use AsciiDoc, the Javadoc comment must be annotated with `@asciidoclet` tag. This tag serves two purposes: it is\n"
"used as a marker for Quarkus generation tool, but it is also used by the `javadoc` process for the Javadoc generation."
msgstr "AsciiDocを使用するには、Javadocのコメントに `@asciidoclet` タグを付ける必要があります。このタグは、Quarkus生成ツールのマーカーとして使用されるだけでなく、Javadoc生成のための `javadoc` プロセスでも使用されるなど、2つの目的があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A more detailed example:"
msgstr "より詳細な例:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"For indentation to be respected in the Javadoc comment (list items spread on multiple lines or indented\n"
"source code), the automatic Eclipse formatter must be disabled (the formatter is automatically included in the build),\n"
"with the markers `// @formatter:off`/`// @formatter:on`. These require separate comments and a mandatory space after the\n"
"`//` marker."
msgstr "Javadocコメントでインデントを尊重するためには（複数行に広がるリスト項目やインデントされたソースコード）、Eclipseの自動フォーマッターを無効にする必要があります（フォーマッターはビルドに自動的に含まれます）。マーカーは `// @formatter:off`/`// @formatter:on` .これらは、個別のコメントと、 `//` マーカーの後に必須のスペースが必要です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Open blocks (`--`) are not supported in the AsciiDoc documentation. All the other types of blocks\n"
"(source, admonitions...) are supported."
msgstr "オープンブロック( `--` )は、AsciiDocドキュメントではサポートされていません。他のタイプのブロック（source, admonitions...）はすべてサポートされています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"By default, the documentation generator will use the hyphenated field name as the key of a `java.util.Map`. Use the\n"
"`io.quarkus.runtime.annotations.ConfigDocMapKey` annotation to override the behaviour."
msgstr "デフォルトでは、ドキュメント・ジェネレーターは、ハイフンで区切られたフィールド名を `java.util.Map` のキーとして使用します。 この動作をオーバーライドするには、 `io.quarkus.runtime.annotations.ConfigDocMapKey` アノテーションを使用します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This will generate a configuration map key named `quarkus.some.\"cache-name\"` instead of `quarkus.some.\"namespace\"`."
msgstr "これにより、 `quarkus.some.\"namespace\"` の代わりに `quarkus.some.\"cache-name\"` という名前の設定マップキーが生成されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "It is possible to write a textual explanation for the documentation default value, this is useful when it is generated: `@ConfigDocDefault(\"explain how this is generated\")`."
msgstr "ドキュメントのデフォルト値についてテキストによる説明を記述することが可能です。これは、ドキュメントが生成されるときに役立ちます: `@ConfigDocDefault(\"explain how this is generated\")`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`@ConfigDocEnumValue` gives a way to explicitly customize the string displayed in the documentation when listing accepted values for an enum."
msgstr "`@ConfigDocEnumValue` を使用すると、列挙型の許容値をリストするときにドキュメントに表示される文字列を明示的にカスタマイズできます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Writing section documentation"
msgstr "セクションのドキュメントを書く"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "To generate a configuration section of a given group, use the `@ConfigDocSection` annotation:"
msgstr "指定したグループの設定セクションを生成するには、 `@ConfigDocSection` アノテーションを使用してください:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This will add a section documentation for the `configGroup` config item in the generated documentation. The section\n"
"title and introduction will be derived from the javadoc of the configuration item. The first sentence from the javadoc\n"
"is considered as the section title and the remaining sentences used as section introduction."
msgstr "これは、生成されたドキュメントに `configGroup` の設定項目のセクションドキュメントを追加します。セクションのタイトルと導入は、設定項目のjavadocから導出されます。javadocの最初の文章がセクションのタイトルとみなされ、残りの文章がセクションの導入として使用されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Generating the documentation"
msgstr "ドキュメントの生成"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "To generate the documentation:"
msgstr "ドキュメントを生成するには次を実施します:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Execute `./mvnw -DquicklyDocs`"
msgstr "`./mvnw -DquicklyDocs` の実行"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Can be executed globally or in a specific extension directory (e.g. `extensions/mailer`)."
msgstr "グローバルまたは特定のエクステンションディレクトリ（例： `extensions/mailer` ）で実行することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The documentation is generated in the global `target/asciidoc/generated/config/` located at the root of the project."
msgstr "ドキュメントはプロジェクトのルートにあるグローバル `target/asciidoc/generated/config/` で生成されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Including the documentation in the extension guide"
msgstr "エクステンションガイドにドキュメントを含める"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "To include the generated configuration reference documentation in a guide, use:"
msgstr "生成された設定リファレンスドキュメントをガイドに含めるには、次のようにします："

#: _versions/3.27/guides/writing-extensions.adoc
msgid "To include only a specific config group:"
msgstr "特定のコンフィググループのみを含める場合："

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"For example, the `io.quarkus.vertx.http.runtime.FormAuthConfig` configuration group will be generated in a file named\n"
"`quarkus-vertx-http-config-group-form-auth-config.adoc`."
msgstr "例えば、 `io.quarkus.vertx.http.runtime.FormAuthConfig` 設定グループは `quarkus-vertx-http-config-group-form-auth-config.adoc` という名前のファイルに生成されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A few recommendations:"
msgstr "幾つかの推奨事項:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`opts=optional` is mandatory to not fail the build if only part of the configuration documentation has been generated."
msgstr "`opts=optional` は、設定ドキュメントの一部しか生成されていない場合に、ビルドを失敗させないために必須です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The documentation is generated with a title level of 2 (i.e. `==`). It may need an adjustment with `leveloffset=+N`."
msgstr "ドキュメントは、タイトルレベル2（すなわち、 `==` ）で生成されます。 `leveloffset=+N` で調整が必要な場合があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The whole configuration documentation should not be included in the middle of the guide."
msgstr "設定ドキュメント全体はガイドの途中に入れるべきではありません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If the guide includes an `application.properties` example, a tip must be included just below the code snippet:"
msgstr "ガイドに `application.properties` の例が含まれている場合、コードスニペットのすぐ下にヒントを記載する必要があります："

#: _versions/3.27/guides/writing-extensions.adoc
msgid "And at the end of the guide, the extensive configuration documentation:"
msgstr "そして、ガイドの最後には、充実した設定資料が掲載されています："

#: _versions/3.27/guides/writing-extensions.adoc
msgid "All documentation should be generated and validated before being committed."
msgstr "すべてのドキュメントは、コミットされる前に生成され、検証される必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Conditional Step Inclusion"
msgstr "条件付きステップを含める"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"It is possible to only include a given `@BuildStep` under certain conditions.  The `@BuildStep` annotation\n"
"has two optional parameters: `onlyIf` and `onlyIfNot`.  These parameters can be set to one or more classes\n"
"which implement `BooleanSupplier`.  The build step will only be included when the method returns\n"
"`true` (for `onlyIf`) or `false` (for `onlyIfNot`)."
msgstr "特定の条件下では、特定の `@BuildStep` のみを含めることができます。 `@BuildStep` アノテーションには、 `onlyIf` と `onlyIfNot` の 2 つのオプションパラメーターがあります。これらのパラメーターは、 `BooleanSupplier` を実装する 1 つ以上のクラスに設定できます。ビルドステップは、メソッドが `true` (`onlyIf` の場合) または `false` (`onlyIfNot` の場合) を返す場合にのみ含まれます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The condition class can inject <<configuration,configuration mappings>> as long as they belong to\n"
"a build-time phase.  Run time configuration is not available for condition classes."
msgstr "条件クラスは、ビルド時フェーズに属する限り、 <<configuration,設定マッピング>> を注入することができます。実行時設定は、条件クラスでは利用できません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The condition class may also inject a value of type `io.quarkus.runtime.LaunchMode`.\n"
"Constructor parameter and field injection is supported."
msgstr "条件クラスは、タイプ `io.quarkus.runtime.LaunchMode` の値を注入することもできます。コンストラクターパラメーターとフィールドインジェクションがサポートされています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "An example of a conditional build step"
msgstr "条件付きビルドステップの例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"If you need to make your build step conditional on the presence or absence of another extension, you can\n"
"use <<capabilities>> for that."
msgstr "別のエクステンションの有無を条件としてビルドステップを作成する必要がある場合は、<<capabilities>> を使用できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "You can also apply a set of conditions to all build steps in a given class with `@BuildSteps`:"
msgstr "`@BuildSteps` を使用して、特定のクラスのすべてのビルドステップに一連の条件を適用することもできます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Class-wide condition for build step with @BuildSteps"
msgstr "ビルドステップを @BuildSteps でクラス単位で条件指定する。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This condition will apply to all methods defined in `MyDevModeProcessor`"
msgstr "この条件は `MyDevModeProcessor` で定義されたすべてのメソッドに適用されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The main build step will only be executed in dev mode."
msgstr "メインのビルドステップは、dev モードでのみ実行されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The other build step will only be executed in dev mode."
msgstr "もう一つのビルドステップは、dev モードでのみ実行されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Generating Bytecode"
msgstr "バイトコードの生成"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Bytecode Recording"
msgstr "バイトコードの記録"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"One of the main outputs of the build process is recorded bytecode. This bytecode actually sets up the runtime environment. For example, in order to start Undertow, the resulting application will have some bytecode that directly registers all\n"
"Servlet instances and then starts Undertow."
msgstr "ビルドプロセスの主要なアウトプットの1つは、記録されたバイトコードです。このバイトコードは、実際に実行時環境を設定します。例えば、Undertowを起動するために、出来上がったアプリケーションには、すべてのServletインスタンスを直接登録し、その後Undertowを起動するバイトコードが含まれます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"As writing bytecode directly is complex, this is instead done via bytecode recorders. At deployment time,\n"
"invocations are made on recorder objects that contain the actual runtime logic, but instead of these invocations\n"
"proceeding as normal they are intercepted and recorded (hence the name). This recording is then used to generate bytecode\n"
"that performs the same sequence of invocations at runtime. This is essentially a form of deferred execution where invocations\n"
"made at deployment time get deferred until runtime."
msgstr "バイトコードを直接書くのは複雑なので、代わりにバイトコードレコーダーを使っています。デプロイメント時には、実際の実行時 ロジックを含むレコーダー オブジェクトが呼び出されますが、これらの呼び出しは通常通りに行われるのではなく、インターセプトされて記録されます (これが名前の由来です)。この記録は、実行時に同じ一連の呼び出しを実行するバイトコードを生成するために使用されます。これは本質的には遅延実行の一形態であり、デプロイメント時に行われた呼び出しが実行時まで延期されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Let's look at the classic 'Hello World' type example. To do this the Quarkus way we would create a recorder as follows:"
msgstr "典型的な「Hello World」タイプの例を見てみましょう。これをQuarkusの方法で行うには、次のようにレコーダーを作成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "And then create a build step that uses this recorder:"
msgstr "そして、このレコーダーを使用するビルドステップを作成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"When this build step is run nothing is printed to the console. This is because the `HelloRecorder` that is injected is\n"
"actually a proxy that records all invocations. Instead, if we run the resulting Quarkus program we will see 'Hello World'\n"
"printed to the console."
msgstr "このビルドステップを実行しても、コンソールには何も表示されません。これは、注入された `HelloRecorder` が、実際にはすべての呼び出しを記録するプロキシであるためです。代わりに、生成されたQuarkusプログラムを実行すると、コンソールに「Hello World」が出力されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Methods on a recorder can return a value, which must be proxiable (if you want to return a non-proxiable item wrap it\n"
"in `io.quarkus.runtime.RuntimeValue`). These proxies may not be invoked directly, however they can be passed\n"
"into other recorder methods. This can be any recorder method, including from other `@BuildStep` methods, so a common pattern\n"
"is to produce `BuildItem` instances that wrap the results of these recorder invocations."
msgstr "レコーダーのメソッドは値を返すことができますが、その値はプロキシ可能なものでなければなりません（プロキシ不可能なアイテムを返す場合は、 `io.quarkus.runtime.RuntimeValue` で囲みます）。これらのプロキシは、直接呼び出すことはできませんが、他のレコーダーのメソッドに渡すことができます。これは、他の `@BuildStep` メソッドも含めて、どのようなレコーダ・メソッドでもよいので、これらのレコーダの呼び出しの結果をラップした `BuildItem` インスタンスを生成するのが一般的なパターンです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"For instance, in order to make arbitrary changes to a Servlet deployment Undertow has a `ServletExtensionBuildItem`,\n"
"which is a `MultiBuildItem` that wraps a `ServletExtension` instance. I can return a `ServletExtension` from a recorder\n"
"in another module, and Undertow will consume it and pass it into the recorder method that starts Undertow."
msgstr "例えば、Servletの配置に任意の変更を加えるために、Undertowは `ServletExtensionBuildItem` を持っています。これは `ServletExtension` インスタンスをラップした `MultiBuildItem` です。他のモジュールのレコーダーから `ServletExtension` を返すと、Undertowはそれを使用し、Undertowを起動するレコーダー・メソッドに渡すことができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"At runtime the bytecode will be invoked in the order it is generated. This means that build step dependencies implicitly\n"
"control the order that generated bytecode is run. In the example above we know that the bytecode that produces a\n"
"`ServletExtensionBuildItem` will be run before the bytecode that consumes it."
msgstr "実行時には、生成された順にバイトコードが呼び出されます。つまり、ビルドステップの依存関係は、生成されたバイトコードが実行される順序を暗黙のうちに制御します。上の例では、 `ServletExtensionBuildItem` を生成するバイトコードが、それを消費するバイトコードよりも先に実行されることがわかっています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The following objects can be passed to recorders:"
msgstr "レコーダーに渡すことができるオブジェクトは以下の通りです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Primitives"
msgstr "プリミティブ"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "String"
msgstr ""

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Class<?> objects"
msgstr "クラス<?> オブジェクト"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Objects returned from a previous recorder invocation"
msgstr "前回のレコーダー起動時に返されたオブジェクト"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Objects with a no-arg constructor and getter/setters for all properties (or public fields)"
msgstr "すべてのプロパティー (またはパブリックフィールド) の引数なしコンストラクターとゲッター/セッターを持つオブジェクト"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Objects with a constructor annotated with `@RecordableConstructor` with parameter names that match field names"
msgstr "フィールド名と一致するパラメーター名を持つ `@RecordableConstructor` でアノテーションが付けられたコンストラクターを持つオブジェクト"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Any arbitrary object via the `io.quarkus.deployment.recording.RecorderContext#registerSubstitution(Class, Class, Class)` mechanism"
msgstr "`io.quarkus.deployment.recording.RecorderContext#registerSubstitution(Class, Class, Class)` メカニズムによる任意のオブジェクト"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Arrays, Lists and Maps of the above"
msgstr "上記の配列、リスト、マップ"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "In cases where some fields of an object to be recorded should be ignored (i.e. the value that being at build time should not be reflected at runtime), the `@IgnoreProperty` can be placed on the field."
msgstr "記録するオブジェクトの一部のフィールドを無視する必要がある場合（ビルド時に存在する値を実行時に反映させるべきではない場合）には、そのフィールドに `@IgnoreProperty` を配置することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If the class cannot depend on Quarkus, then Quarkus can use any custom annotation, as long as the extension implements the `io.quarkus.deployment.recording.RecordingAnnotationsProvider` SPI."
msgstr "クラスがQuarkusに依存できない場合、エクステンションが `io.quarkus.deployment.recording.RecordingAnnotationsProvider` SPIを実装していれば、Quarkusは任意のカスタムアノテーションを使用することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This same SPI can also be used to provide a custom annotation that will substitute for `@RecordableConstructor`."
msgstr "この同じSPIを使用して、 `@RecordableConstructor` の代わりになるカスタムアノテーションを提供することも可能です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Injecting Configuration into Recorders"
msgstr "レコーダーへの設定の注入"

#: _versions/3.27/guides/writing-extensions.adoc
#, fuzzy
msgid ""
"Configuration objects with phase `RUNTIME` or `BUILD_AND_RUNTIME_FIXED` can be injected into recorders via constructor\n"
"injection. The constructor requires a parameter for each configuration object type. If the Configuration object type is\n"
"declared to be in the `RUNTIME` phase, it must be wrapped in a `RuntimeValue<>` type."
msgstr "位相 `RUNTIME` または `BUILD_AND_RUNTIME_FIXED` を持つ構成オブジ ェ ク ト は、 コ ン ス ト ラ ク タ 注入で レ コ ーダに注入で き ます。コ ン ス ト ラ ク タ は、 各構成オブジ ェ ク ト タ イ プに対 し て引数を必要 と し ます。構成オブジ ェ ク ト の種類が `RUNTIME` フ ェ ーズであ る と 宣言 さ れてい る 場合は、 `RuntimeValue<>` 型で ラ ッ プす る 必要があ り ます。"

#: _versions/3.27/guides/writing-extensions.adoc
#, fuzzy
msgid "If the recorder has multiple constructors you can annotate the one you want Quarkus to use with `@Inject`."
msgstr "レコーダーに複数のコンストラクターがある場合、Quarkus に使用させたいコンストラクターに `@Inject` で注釈を付けることができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "RecorderContext"
msgstr "RecorderContext"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"`io.quarkus.deployment.recording.RecorderContext` provides some convenience methods to enhance bytecode recording,\n"
"this includes the ability to register creation functions for classes without no-arg constructors, to register an object\n"
"substitution (basically a transformer from a non-serializable object to a serializable one and vice versa), and to create\n"
"a class proxy. This interface can be directly injected as a method parameter into any `@Record` method."
msgstr "`io.quarkus.deployment.recording.RecorderContext` は、バイトコードの記録を強化するためのいくつかの便利なメソッドを提供しています。これには、引数なしのコンストラクタを持たないクラスの作成関数の登録、オブジェクト置換の登録（基本的には、シリアル化不可能なオブジェクトからシリアル化可能なオブジェクトへの変換、およびその逆）、クラスプロキシの作成などがあります。このインターフェースは、 `@Record` のメソッドにメソッドパラメータとして直接注入することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Calling `classProxy` with a given fully-qualified class name will create a `Class` instance that can be passed into a recorder\n"
"method, and at runtime will be substituted with the class whose name was passed in to `classProxy()`.\n"
"However, this method should not be needed in most use cases because directly loading deployment/application classes at processing time in build steps is safe.\n"
"Therefore, this method is deprecated.\n"
"Nonetheless, there are some use cases where this method comes in handy, such as referring to classes that were generated in previous build steps using `GeneratedClassBuildItem`."
msgstr ""
"指定された完全修飾クラス名で `classProxy` を呼び出すと、レコーダーメソッドに渡すことができる `Class` インスタンスが作成されます。\n"
"これは実行時に `classProxy()` に名前が渡されたクラスに置き換えられます。\n"
"しかし、ビルドステップの処理時にデプロイメント/アプリケーションクラスを直接ロードすることは安全であるため、ほとんどのユースケースでは、このメソッドを使用する必要はありません。\n"
"そのため、このメソッドは非推奨となりました。\n"
"それでも、以前のビルドステップで `GeneratedClassBuildItem` を使用して生成されたクラスを参照する場合など、一部のユースケースではこのメソッドが便利な場合があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Printing step execution time"
msgstr "ステップ実行時間の出力"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"At times, it can be useful to know how the exact time each startup task (which is the result of each bytecode recording) takes when the application is run.\n"
"The simplest way to determine this information is to launch the Quarkus application with the `-Dquarkus.debug.print-startup-times=true` system property.\n"
"The output will look something like:"
msgstr "時には、アプリケーションを実行したときに、各スタートアップタスク（各バイトコードの記録結果）にかかる正確な時間を知りたい場合があります。この情報を確認する最も簡単な方法は、 `-Dquarkus.debug.print-startup-times=true` システムプロパティを付けてQuarkusアプリケーションを起動することです。出力は以下のようになります:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Using Gizmo"
msgstr "Gizmo の使用"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"In some scenarios, more significant manipulation of bytecode may be needed.\n"
"If bytecode recording isn't sufficient, link:https://github.com/quarkusio/gizmo/blob/main/USAGE.adoc[Gizmo] is a convenient alternative to ASM, with a higher-level API."
msgstr ""
"シナリオによっては、バイトコードに対するより重大な操作が必要になる場合があります。\n"
"バイトコードの記録だけでは不十分な場合は、link:https://github.com/quarkusio/gizmo/blob/main/USAGE.adoc[Gizmo] が、より高レベルの API を備えた ASM の便利な代替手段です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Runtime Classpath check"
msgstr "ランタイムクラスパスチェック"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Extensions often need a way to determine whether a given class is part of the application's runtime classpath.\n"
"The proper way for an extension to perform this check is to use `io.quarkus.bootstrap.classloading.QuarkusClassLoader.isClassPresentAtRuntime`."
msgstr ""
"エクステンションでは、多くの場合、特定のクラスがアプリケーションのランタイムクラスパスの一部であるかどうかを判断する方法が必要になります。\n"
"エクステンションがこのチェックを実行する適切な方法は、 `io.quarkus.bootstrap.classloading.QuarkusClassLoader.isClassPresentAtRuntime` を使用することです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Generating Resources"
msgstr "リソースの生成"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "It is possible to generate resources using extensions, in some scenarios you need to generate a resource into `META-INF` directory, the resource can be a service for SPI or a simple HTML, CSS, Javascript files."
msgstr "エクステンションを使用してリソースを生成することは可能ですが、シナリオによっては、リソースを `META-INF` ディレクトリーに生成する必要があります。このリソースは、SPI のサービス、または単純な HTML、CSS、Javascript ファイルになります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Producing a SPI service implementation as a resource in META-INF/services"
msgstr "META-INF/services のリソースとして SPI サービス実装を作成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Producing a static resource (e.g., JavaScript file) served by Vertx"
msgstr "Vertx が提供する静的リソース (例: JavaScript ファイル) を生成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Key Points"
msgstr "主なポイント"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "**`GeneratedResourceBuildItem`**"
msgstr "**`GeneratedResourceBuildItem`**"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Generates resources that are persisted in production mode."
msgstr "本番モードで永続化されるリソースを生成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "In development and other non-production modes, the resources are kept in memory and loaded using the `QuarkusClassLoader`."
msgstr "開発モードやその他の本番以外のモードでは、リソースはメモリー内に保持され、 `QuarkusClassLoader` を使用してロードされます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "**`GeneratedStaticResourceBuildItem`**"
msgstr "**`GeneratedStaticResourceBuildItem`**"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Generates static resources (e.g., files like JavaScript, HTML, or CSS) served by Vertx."
msgstr "Vertx によって提供される静的リソース (JavaScript、HTML、CSS などのファイルなど) を生成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "In development mode, Quarkus serves these resources using a Vertx handler backed by a classloader-based filesystem."
msgstr "開発モードでは、Quarkus はこれらのリソースを、クラスローダーベースのファイルシステムを利用した Vertx ハンドラーを通じて提供します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Differences Between `GeneratedResourceBuildItem` and `GeneratedStaticResourceBuildItem`"
msgstr "`GeneratedResourceBuildItem` と `GeneratedStaticResourceBuildItem` の違い"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "While both are used to generate resources, their purposes and behaviors differ:"
msgstr "どちらもリソースを生成するために使用されますが、目的と動作は異なります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "**`GeneratedResourceBuildItem`:**"
msgstr "**`GeneratedResourceBuildItem`:**"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Used for resources required at runtime (e.g., SPI service definitions)."
msgstr "実行時に必要なリソース (SPI サービス定義など) に使用されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Persisted only in production mode; otherwise, stored in memory."
msgstr "本番モードでのみ保持され、それ以外の場合はメモリーに保存されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "**`GeneratedStaticResourceBuildItem`:**"
msgstr "**`GeneratedStaticResourceBuildItem`:**"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Designed for serving static resources via HTTP (e.g., JavaScript or CSS files)."
msgstr "HTTP 経由で静的リソース (JavaScript や CSS ファイルなど) を提供するために設計されています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "In development mode, these resources are served dynamically using Vertx."
msgstr "開発モードでは、これらのリソースは Vertx を使用して動的に提供されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Generates a `GeneratedResourceBuildItem`."
msgstr "`GeneratedResourceBuildItem` を生成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Generates a `AdditionalStaticResourceBuildItem` only on normal mode."
msgstr "通常モードでのみ `AdditionalStaticResourceBuildItem` を生成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "By using these build items appropriately, you can generate and manage resources effectively within your Quarkus extension."
msgstr "これらのビルド項目を適切に使用することで、Quarkus エクステンション内でリソースを効果的に生成および管理できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Contexts and Dependency Injection"
msgstr "コンテキストと依存性インジェクション"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The xref:cdi-integration.adoc[CDI integration guide] has more detail on common CDI-related use cases, and example code for solutions."
msgstr "xref:cdi-integration.adoc[CDI インテグレーションガイド] には、一般的な CDI 関連のユースケースとソリューションのサンプルコードの詳細が記載されています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Extension Points"
msgstr "拡張ポイント"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"As a CDI based runtime, Quarkus extensions often make CDI beans available as part of the extension behavior.\n"
"However, Quarkus DI solution does not support CDI Portable Extensions.\n"
"Instead, Quarkus extensions can make use of various xref:cdi-reference.adoc[Build Time Extension Points]."
msgstr "CDIベースのランタイムとして、Quarkusのエクステンションは、多くの場合、エクステンションの動作の一部としてCDI Beanを利用できるようにしています。ただし、Quarkus DIソリューションはCDI Portable Extensionsをサポートしていません。代わりに、Quarkusのエクステンションは、さまざまな link:cdi-reference.html[Build Time Extension Point]を利用することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Quarkus Dev UI"
msgstr "Quarkus Dev UI"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "You can make your extension support the xref:dev-ui.adoc[Quarkus Dev UI] for a greater developer experience."
msgstr "エクステンションを link:dev-ui.html[Quarkus Dev UI]に対応させることで、開発者の利便性を高めることができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Extension-defined endpoints"
msgstr "エクステンションで定義されたエンドポイント"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Your extension can add additional, non-application endpoints to be served alongside endpoints\n"
"for Health, Metrics, OpenAPI, Swagger UI, etc."
msgstr "エクステンションは、Health、Metrics、OpenAPI、Swagger UIなどのエンドポイントと一緒に提供される、アプリケーション以外のエンドポイントを追加することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Use a `NonApplicationRootPathBuildItem` to define an endpoint:"
msgstr "`NonApplicationRootPathBuildItem` を使用して、エンドポイントを定義します:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Note that the path above does not start with a '/', indicating it is a relative path. The above\n"
"endpoint will be served relative to the configured non-application endpoint root. The non-application\n"
"endpoint root is `/q` by default, which means the resulting endpoint will be found at `/q/custom-endpoint`."
msgstr "上記のパスが「/」で始まっていないのは、相対パスであることを示しています。上記のエンドポイントは、設定されたノンアプリケーションエンドポイントのルートからの相対パスで提供されます。アプリケーション以外のエンドポイントのルートは、デフォルトでは `/q` となっており、結果的にエンドポイントは `/q/custom-endpoint` にあることになります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Absolute paths are handled differently. If the above called `route(\"/custom-endpoint\")`, the resulting\n"
"endpoint will be found at `/custom-endpoint`."
msgstr "絶対パスは異なる方法で処理されます。上記が `route(\"/custom-endpoint\")` を呼び出すと、生成されるエンドポイントは '/custom-endpoint' に保存されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If an extension needs nested non-application endpoints:"
msgstr "エクステンションがネストした非アプリケーションのエンドポイントを必要とする場合:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Given a default non-application endpoint root of `/q`, this will create an endpoint at `/q/custom-endpoint/deep`."
msgstr "デフォルトの非アプリケーションエンドポイントルートが `/q` の場合、 `/q/custom-endpoint/deep` にエンドポイントが作成されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Absolute paths also have an impact on nested endpoints. If the above called `nestedRoute(\"custom-endpoint\", \"/deep\")`,\n"
"the resulting endpoint will be found at `/deep`."
msgstr "絶対パスは、ネストされたエンドポイントにも影響を与えます。上記が `nestedRoute (\"custom-endpoint\"、\"/deep\")` を呼び出した場合、生成されるエンドポイントは `/deep` にあります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Refer to the xref:all-config.adoc#quarkus-vertx-http_quarkus-http-non-application-root-path[Quarkus Vertx HTTP configuration reference]\n"
"for details on how the non-application root path is configured."
msgstr "アプリケーション以外のルートパスの設定方法について、詳しくは xref:all-config.adoc#quarkus-vertx-http_quarkus-http-non-application-root-path[Quarkus Vertx HTTP 設定リファレンス] を参照してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Extension Health Check"
msgstr "エクステンションヘルスチェック"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Health checks are provided via the `quarkus-smallrye-health` extension. It provides both liveness and readiness checks capabilities."
msgstr "ヘルスチェックは `quarkus-smallrye-health` のエクステンションを介して提供されます。これは、livenessとreadinessのチェック機能の両方を提供します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "When writing an extension, it's beneficial to provide health checks for the extension, that can be automatically included without the developer needing to write their own."
msgstr "エクステンションを書くときには、開発者が自分で書かなくても自動的に含まれるようにすることができるエクステンションのヘルスチェックを提供することが有益です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "In order to provide a health check, you should do the following:"
msgstr "ヘルスチェックを行うためには、以下のようにしましょう。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Import the `quarkus-smallrye-health` extension as an **optional** dependency in your runtime module so it will not impact the size of the application if\n"
"health check is not included."
msgstr "`quarkus-smallrye-health` ヘルスチェックを *オプションの* 依存関係としてランタイムモジュールにインポートすることで、ヘルスチェックが含まれていない場合でもアプリケーションのサイズに影響を与えないようにします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Create your health check following the xref:smallrye-health.adoc[SmallRye Health] guide. We advise providing only\n"
"readiness check for an extension (liveness check is designed to express the fact that an application is up and needs to be lightweight)."
msgstr "xref:smallrye-health.adoc[SmallRye Health] ガイドに従ってヘルスチェックを作成します。エクステンションの readiness チェックのみを提供することをお勧めします (liveness チェックは、アプリケーションが稼働中で軽量である必要があるというファクトを示すために設計されています)。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Import the `quarkus-smallrye-health-spi` library in your deployment module."
msgstr "デプロイメントモジュールに `quarkus-smallrye-health-spi` ライブラリをインポートします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Add a build step in your deployment module that produces a `HealthBuildItem`."
msgstr "デプロイメントモジュールに、 `HealthBuildItem` を生成するビルドステップを追加します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Add a way to disable the extension health check via a config item `quarkus.<extension>.health.enabled` that should be enabled by default."
msgstr "設定アイテム `quarkus.<extension>.health.enabled` を介して、デフォルトでは有効になっているエクステンションのヘルスチェックを無効にする方法を追加します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Following is an example from the Agroal extension that provides a `DataSourceHealthCheck` to validate the readiness of a datasource."
msgstr "以下は、データソースの readiness を検証するための `DataSourceHealthCheck` を提供する Agroal エクステンションの例です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Extension Metrics"
msgstr "エクステンションメトリクス"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The `quarkus-micrometer` extension and the `quarkus-smallrye-metrics` extension provide support for collecting metrics.\n"
"As a compatibility note, the `quarkus-micrometer` extension adapts the MP Metrics API to Micrometer library primitives, so the `quarkus-micrometer` extension can be enabled without breaking code that relies on the MP Metrics API.\n"
"Note that the metrics emitted by Micrometer are different, see the `quarkus-micrometer` extension documentation for more information."
msgstr "`quarkus-micrometer` エクステンションと `quarkus-smallrye-metrics` エクステンションは、メトリクスを収集するためのサポートを提供します。互換性についての注意点として、 `quarkus-micrometer` エクステンションは MP Metrics API を Micrometer ライブラリのプリミティブに適応させているので、MP Metrics API に依存しているコードを壊すことなく `quarkus-micrometer` エクステンションを有効にすることができます。Micrometer が出力するメトリクスは異なることに注意してください。詳細は `quarkus-micrometer` エクステンションのドキュメントを参照してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The compatibility layer for MP Metrics APIs will move to a different extension in the future."
msgstr "MP Metrics API の互換性レイヤは、将来的には別のエクステンションに移行する予定です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "There are two broad patterns that extensions can use to interact with an optional metrics extension to add their own metrics:"
msgstr "エクステンションがオプションのメトリクスエクステンションとインタラクトして独自のメトリクスを追加するために使用できる、幅広いパターンが 2 つあります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Consumer pattern: An extension declares a `MetricsFactoryConsumerBuildItem` and uses that to provide a bytecode recorder to the metrics extension. When the metrics extension has initialized, it will iterate over registered consumers to initialize them with a `MetricsFactory`. This factory can be used to declare API-agnostic metrics, which can be a good fit for extensions that provide an instrumentable object for gathering statistics (e.g. Hibernate's `Statistics` class)."
msgstr "コンシューマーパターン: エクステンションは `MetricsFactoryConsumerBuildItem` を宣言し、それを使用してメトリクスエクステンションにバイトコードレコーダーを提供します。メトリクスエクステンションが初期化されると、登録されたコンシューマーを反復処理し、 `MetricsFactory` で初期化します。このファクトリーは、API に依存しないメトリクスの宣言に使用できます。これは、統計を収集するためのインストルメント可能なオブジェクト (Hibernate の `Statistics` クラスなど) を提供するエクステンションに適しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Binder pattern: An extension can opt to use completely different gathering implementations depending on the metrics system. An `Optional<MetricsCapabilityBuildItem> metricsCapability` build step parameter can be used to declare or otherwise initialize API-specific metrics based on the active metrics extension (e.g. \"smallrye-metrics\" or \"micrometer\"). This pattern can be combined with the consumer pattern by using `MetricsFactory::metricsSystemSupported()` to test the active metrics extension within the recorder."
msgstr "バインダーパターン: エクステンションは、メトリクスシステムに応じて完全に異なる収集実装の使用を選択できます。 `Optional<MetricsCapabilityBuildItem> metricsCapability` ビルドステップパラメーターを使用して、アクティブなメトリクスエクステンション (smallrye-metrics や micrometer など) に基づいて API 固有メトリクスを宣言または初期化できます。このパターンは、 `MetricsFactory::metricsSystemSupported()` を使用して、レコーダー内のアクティブなメトリクスエクステンションをテストすることにより、コンシューマーパターンと組み合わせることができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Remember that support for metrics is optional. Extensions can use an `Optional<MetricsCapabilityBuildItem> metricsCapability` parameter in their build step to test for the presence of an enabled metrics extension. Consider using additional configuration to control behavior of metrics. Datasource metrics can be expensive, for example, so additional configuration flags are used enable metrics collection on individual datasources."
msgstr "メトリクスのサポートはオプションです。エクステンションはビルドステップで `Optional<MetricsCapabilityBuildItem> metricsCapability` を使用して、有効化されたメトリクスエクステンションの存在をテストできます。追加の設定を使用して、メトリクスの動作を制御することを検討してください。たとえば、データソースメトリクスは高額になる可能性があるため、追加の設定フラグを使用して、個々のデータソースでメトリクス収集を有効にします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "When adding metrics for your extension, you may find yourself in one of the following situations:"
msgstr "エクステンションのメトリクスを追加するとき、以下のいずれかの状況に陥ることがあります:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "An underlying library used by the extension is using a specific Metrics API directly (either MP Metrics, Micrometer, or some other)."
msgstr "エクステンションで使用される基盤となるライブラリーは、特定のメトリクス API (MP Metrics、Micrometer、またはその他) を直接使用します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "An underlying library uses its own mechanism for collecting metrics and makes them available at runtime using its own API, e.g. Hibernate's `Statistics` class, or Vert.x `MetricsOptions`."
msgstr "基盤となるライブラリーは、メトリクスを収集するために独自のメカニズムを使用し、Hibernate の `Statistics` クラスや Vert.x `MetricsOptions` などの独自の API を使用してランタイムにそれらを利用できるようにします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "An underlying library does not provide metrics (or there is no library at all) and you want to add instrumentation."
msgstr "基礎となるライブラリーがメトリクスを提供しない (またはライブラリーがまったくない) ため、インストルメンテーションを追加する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Case 1: The library uses a metrics library directly"
msgstr "ケース1：ライブラリがメトリクス・ライブラリを直接利用する場合"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If the library directly uses a metrics API, there are two options:"
msgstr "ライブラリーがメトリクス API を直接使用する場合、2 つのオプションがあります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Use an `Optional<MetricsCapabilityBuildItem> metricsCapability` parameter to test which metrics API is supported (e.g. \"smallrye-metrics\" or \"micrometer\") in your build step, and use that to selectively declare or initialize API-specific beans or build items."
msgstr "`Optional<MetricsCapabilityBuildItem> metricsCapability` パラメーターを使用して、ビルドステップでサポートされているメトリクス API (smallrye-metrics や micrometer など) をテストし、それを使用して API 固有の Bean またはビルドアイテムを選択的に宣言または初期化します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Create a separate build step that consumes a `MetricsFactory`, and use the `MetricsFactory::metricsSystemSupported()` method within the bytecode recorder to initialize required resources if the desired metrics API is supported (e.g. \"smallrye-metrics\" or \"micrometer\")."
msgstr "`MetricsFactory` を使用する別のビルドステップを作成し、バイトコードレコーダー内の 'MetricsFactory::metricsSystemSupported()' メソッドを使用して、必要なメトリクス API がサポートされている場合に必要なリソースを初期化します (smallrye-metrics や micrometer など)。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Extensions may need to provide a fallback if there is no active metrics extension or the extension doesn't support the API required by the library."
msgstr "アクティブなメトリクスエクステンションがない場合、またはエクステンションがライブラリーに必要な API をサポートしていない場合、エクステンションはフォールバックを提供しなければならない可能性があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Case 2: The library provides its own metric API"
msgstr "ケース 2: ライブラリーが独自のメトリクス API を提供している"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "There are two examples of a library providing its own metrics API:"
msgstr "独自のメトリクス API を提供するライブラリーの例は 2 つあります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The extension defines an instrumentable object as Agroal does with `io.agroal.api.AgroalDataSourceMetrics`, or"
msgstr "エクステンションは、Agroal が `io.agroal.api.AgroalDataSourceMetrics` で行うように、インストルメント可能なオブジェクトを定義します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The extension provides its own abstraction of metrics, as Jaeger does with `io.jaegertracing.spi.MetricsFactory`."
msgstr "エクステンションは、Jaeger が `io.jaegertracing.spi.MetricsFactory` で行うように、独自のメトリクスの抽象化を提供します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Observing instrumentable objects"
msgstr "インストルメント可能なオブジェクトの観察"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Let's take the instrumentable object (`io.agroal.api.AgroalDataSourceMetrics`) case first. In this case, you can do the following:"
msgstr "まず、インストルメント可能オブジェクト (`io.agroal.api.AgroalDataSourceMetrics`) の場合を見てみましょう。この場合、次のことができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Define a `BuildStep` that produces a `MetricsFactoryConsumerBuildItem` that uses a `RUNTIME_INIT` or `STATIC_INIT` Recorder to define a `MetricsFactory` consumer. For example, the following creates a `MetricsFactoryConsumerBuildItem` if and only if metrics are enabled both for Agroal generally, and for a datasource specifically:"
msgstr "`RUNTIME_INIT` または `STATIC_INIT` レコーダーを使用して `MetricsFactory` コンシューマーを定義して `MetricsFactoryConsumerBuildItem` を生成する `BuildStep` を定義します。たとえば以下は、メトリクスが一般的に Agroal とデータソースの両方で有効になっている場合にのみ `MetricsFactoryConsumerBuildItem` を作成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The associated recorder should use the provided `MetricsFactory` to register metrics. For Agroal, this means using the `MetricFactory` API to observe `io.agroal.api.AgroalDataSourceMetrics` methods. For example:"
msgstr "関連するレコーダーは、提供された `MetricsFactory` を使用してメトリクスを登録する必要があります。Agroal の場合、これは `MetricFactory` API を使用して `io.agroal.api.AgroalDataSourceMetrics` メソッドを監視することを意味します。以下はその例です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The `MetricsFactory` provides a fluid builder for registration of metrics, with the final step constructing gauges or counters based on a `Supplier` or `ToDoubleFunction`. Timers can either wrap `Callable`, `Runnable`, or `Supplier` implementations, or can use a `TimeRecorder` to accumulate chunks of time. The underlying metrics extension will create appropriate artifacts to observe or measure the defined functions."
msgstr "`MetricsFactory` は、メトリクスを登録するための流動的なビルダーを提供し、最後のステップでは、 `Supplier` または `ToDoubleFunction` に基づいてゲージまたはカウンターを構築します。タイマーは、 `Callable`、 `Runnable`、または `Supplier` の実装をラップするか、 `TimeRecorder` を使用して時間のチャンクを蓄積することができます。基盤となるメトリクスエクステンションは、定義された関数を観察または測定するための適切なアーティファクトを作成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Using a Metrics API-specific implementation"
msgstr "メトリクス API 固有の実装の使用"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Using metrics-API specific implementations may be preferred in some cases. Jaeger, for example, defines its own metrics interface, `io.jaegertracing.spi.MetricsFactory`, that it uses to define counters and gauges. A direct mapping from that interface to the metrics system will be the most efficient. In this case, it is important to isolate these specialized implementations and to avoid eager classloading to ensure the metrics API remains an optional, compile-time dependency."
msgstr "metrics-API 固有の実装を使用することが、状況によっては優先される場合があります。たとえば、Jaeger は、カウンターとゲージを定義するために使用する独自のメトリクスインターフェイス `io.jaegertracing.spi.MetricsFactory` を定義します。そのインターフェイスからメトリクスシステムへの直接マッピングは最も効率的です。この場合、これらの特殊な実装を分離し、メトリクス API が任意のコンパイル時依存関係を維持できるように、活発なクラスローディングを回避することが重要です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`Optional<MetricsCapabilityBuildItem> metricsCapability` can be used in the build step to selectively control initialization of beans or the production of other build items. The Jaeger extension, for example, can use the following to control initialization of specialized Metrics API adapters:"
msgstr "`Optional<MetricsCapabilityBuildItem> metricsCapability` をビルドステップで使用して、Bean の初期化または他のビルドアイテムの生成を選択的に制御できます。たとえば Jaeger エクステンションは、以下を使用して、特殊なメトリクス API アダプターの初期化を制御できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "+"
msgstr "+"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A recorder consuming a `MetricsFactory` can use `MetricsFactory::metricsSystemSupported()` can be used to control initialization of metrics objects during bytecode recording in a similar way."
msgstr "`MetricsFactory` を使用するレコーダーは　`MetricsFactory::metricsSystemSupported()` を使用して、同様の方法でバイトコード記録中にメトリクスオブジェクトの初期化を制御できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Case 3: It is necessary to collect metrics within the extension code"
msgstr "ケース3：エクステンションコード内でメトリクスを収集する必要がある"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "To define your own metrics from scratch, you have two basic options: Use the generic `MetricFactory` builders, or follow the binder pattern, and create instrumentation specific to the enabled metrics extension."
msgstr "独自のメトリクスを最初から定義するには、2 つの基本的なオプションがあります。汎用 `MetricFactory` ビルダーを使用するか、バインダーパターンに従い、有効なメトリクスエクステンション固有のインストルメンテーションを作成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "To use the extension-agnostic `MetricFactory` API, your processor can define a `BuildStep` that produces a `MetricsFactoryConsumerBuildItem` that uses a `RUNTIME_INIT` or `STATIC_INIT` Recorder to define a `MetricsFactory` consumer."
msgstr "エクステンションに依存しない `MetricFactory` API を使用するために、プロセッサーは、 `RUNTIME_INIT` または `STATIC_INIT` レコーダを使用して `MetricsFactory` コンシューマを定義する `MetricsFactoryConsumerBuildItem` を生成する `BuildStep` を定義できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"+\n"
"- The associated recorder should use the provided `MetricsFactory` to register metrics, for example"
msgstr ""
"+\n"
"- 関連するレコーダは、提供された `MetricsFactory` を使用してメトリクスを登録する必要があります。例:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Remember that metrics extensions are optional. Keep metrics-related initialization isolated from other setup for your extension, and structure your code to avoid eager imports of metrics APIs. Gathering metrics can also be expensive. Consider using additional extension-specific configuration to control behavior of metrics if the presence/absence of metrics support isn't sufficient."
msgstr "メトリクスエクステンションはオプションです。メトリクス関連の初期化を他のエクステンション設定から分離し、メトリクス API の熱心なインポートを回避するようにコードを構造化します。メトリクスの収集もコストがかかる可能性があります。メトリクスのサポートの有無が十分でない場合は、追加のエクステンション固有の設定を使用してメトリクスの動作を制御することを検討してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Customizing JSON handling from an extension"
msgstr "エクステンションからJSON処理をカスタマイズする"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Extensions often need to register serializers and/or deserializers for types the extension provides."
msgstr "エクステンションはしばしば、エクステンションが提供する型のシリアライザやデシリアライザを登録する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"For this, both Jackson and JSON-B extensions provide a way to register serializer/deserializer from within an\n"
"extension deployment module."
msgstr "このため、Jackson 拡張モジュールと JSON-B 拡張モジュールの両方で、エクステンション内からシリアライザ/デシリアライザを登録する方法を提供しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Keep in mind that not everybody will need JSON, so you need to make it optional."
msgstr "すべての人がJSONを必要とするわけではないことを覚えておいてください。そのため、オプションとする必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"If an extension intends to provide JSON related customization,\n"
"it is strongly advised to provide customization for both Jackson and JSON-B."
msgstr "エクステンションがJSON関連のカスタマイズを提供しようとする場合は、JacksonとJSON-Bの両方のカスタマイズを提供することを強くお勧めします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Customizing Jackson"
msgstr "Jackson のカスタマイズ"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "First, add an *optional* dependency to `quarkus-jackson` on your extension's runtime module."
msgstr "まず、エクステンションのランタイムモジュールに `quarkus-jackson` への *オプションの* 依存関係を追加します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Then create a serializer or a deserializer (or both) for Jackson, an example of which can be seen in the `mongodb-panache` extension."
msgstr "次に、Jackson 用のシリアライザまたはデシリアライザ (またはその両方) を作成します。 `mongodb-panache` のエクステンションで例を見ることができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Add a dependency to `quarkus-jackson-spi` on your extension's deployment module."
msgstr "エクステンションのデプロイメントモジュールの `quarkus-jackson-spi` に依存関係を追加します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Add a build step to your processor to register a Jackson module via the `JacksonModuleBuildItem`.\n"
"You need to name your module in a unique way across all Jackson modules."
msgstr "プロセッサーにビルドステップを追加して、 `JacksonModuleBuildItem` を介して Jackson モジュールを登録します。すべての Jackson モジュールで一意のモジュール名を付ける必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The Jackson extension will then use the produced build item to register a module within Jackson automatically."
msgstr "そして、Jackson エクステンションは、生成されたビルドアイテムを使用して、Jackson 内で自動的にモジュールを登録します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"If you need more customization capabilities than registering a module,\n"
"you can produce a CDI bean that implements `io.quarkus.jackson.ObjectMapperCustomizer` via an `AdditionalBeanBuildItem`.\n"
"More info about customizing Jackson can be found on the JSON guide xref:rest-json.adoc#json[Configuring JSON support]"
msgstr ""
"モジュールの登録よりも多くのカスタマイズ機能が必要な場合は、\n"
"`AdditionalBeanBuildItem` を介して `io.quarkus.jackson.ObjectMapperCustomizer` を実装する CDI Bean を作成できます。\n"
"Jackson のカスタマイズの詳細については、JSON ガイドの xref:rest-json.adoc#json[JSON サポートの設定] を参照してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Customizing JSON-B"
msgstr "JSON-B のカスタマイズ"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "First, add an *optional* dependency to `quarkus-jsonb` on your extension's runtime module."
msgstr "まず、エクステンションのランタイムモジュールに `quarkus-jsonb` への *オプションの* 依存関係を追加します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Then create a serializer and/or a deserializer for JSON-B, an example of which can be seen in the `mongodb-panache` extension."
msgstr "次に、JSON-B のシリアライザーまたはデシリアライザー、あるいはその両方を作成します。 `mongodb-panache` エクステンションでその例を確認できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Add a dependency to `quarkus-jsonb-spi` on your extension's deployment module."
msgstr "エクステンションのデプロイメントモジュールで `quarkus-jsonb-spi` に依存関係を追加。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Add a build step to your processor to register the serializer via the `JsonbSerializerBuildItem`."
msgstr "プロセッサーにビルドステップを追加して、 `JsonbSerializerBuildItem` を介してシリアライザーを登録します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The JSON-B extension will then use the produced build item to register your serializer/deserializer automatically."
msgstr "次に、JSON-B エクステンションは、生成されたビルドアイテムを使用して、シリアライザー/デシリアライザーを自動的に登録します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"If you need more customization capabilities than registering a serializer or a deserializer,\n"
"you can produce a CDI bean that implements `io.quarkus.jsonb.JsonbConfigCustomizer` via an `AdditionalBeanBuildItem`.\n"
"More info about customizing JSON-B can be found on the JSON guide xref:rest-json.adoc#json[Configuring JSON support]"
msgstr ""
"シリアライザーまたはデシリアライザーの登録よりも多くのカスタマイズ機能が必要な場合は、\n"
"`AdditionalBeanBuildItem` を介して `io.quarkus.jsonb.JsonbConfigCustomizer` を実装する CDI Bean を作成できます。\n"
"JSON-B のカスタマイズの詳細については、JSON ガイドの xref:rest-json.adoc#json[JSON サポートの設定] を参照してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Integrating with Development Mode"
msgstr "開発モードとの連携"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "There are various APIS that you can use to integrate with development mode, and to get information about the current state."
msgstr "開発モードとの統合や、現在の状態に関する情報を得るために使用できる様々なAPIがあります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Handling restarts"
msgstr "再起動のハンドリング"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"When Quarkus is starting the `io.quarkus.deployment.builditem.LiveReloadBuildItem` is guaranteed to be present that gives\n"
"information about this start, in particular:"
msgstr "Quarkusの起動時には、特にこの起動に関する情報を与える `io.quarkus.deployment.builditem.LiveReloadBuildItem` が存在することが保証されています。特に、"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Is this a clean start or a live reload"
msgstr "クリーンスタートなのか、ライブリロードなのか"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If this is a live reload which changed files / classes triggered the reload"
msgstr "ライブリロードで、変更されたファイルやクラスがリロードのきっかけになっているかどうか"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"It also provides a global context map you can use to store information between restarts, without needing to resort to\n"
"static fields."
msgstr "また、静的なフィールドに頼ることなく、再起動の間に情報を保存するために使用できるグローバルなコンテキストマップを提供しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Here is an example of a build step that persists context across live reloads:"
msgstr "以下は、ライブリロード間でコンテキストを保持するビルドステップの例です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "You can retrieve the context from `LiveReloadBuildItem`. This call returns `null` if there is no context for the specified type; otherwise, it returns the stored instance from a previous live reload execution."
msgstr "`LiveReloadBuildItem` からコンテキストを取得できます。指定されたタイプのコンテキストがない場合、この呼び出しは `null` を返します。それ以外の場合は、以前のライブリロード実行から保存されたインスタンスを返します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "You can check if this is the first execution (not a live reload)."
msgstr "これが最初の実行であるかどうか (ライブリロードではないかどうか) を確認できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The `LiveReloadBuildItem#setContextObject` method allows you to set a context across live reloads."
msgstr "`LiveReloadBuildItem#setContextObject` メソッドを使用すると、ライブリロード全体でコンテキストを設定できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Triggering Live Reload"
msgstr "ライブリロードのトリガー"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Live reload is generally triggered by an HTTP request, however not all applications are HTTP applications and some extensions\n"
"may want to trigger live reload based on other events. To do this you need to implement `io.quarkus.dev.spi.HotReplacementSetup`\n"
"in your runtime module, and add a `META-INF/services/io.quarkus.dev.spi.HotReplacementSetup` that lists your implementation."
msgstr "しかし、すべてのアプリケーションがHTTPアプリケーションであるとは限らず、エクステンションによっては他のイベントに基づいてライブリロードをトリガしたい場合もあります。これを実現するには、実行時モジュールで `io.quarkus.dev.spi.HotReplacementSetup` を実装し、その実装をリストアップする `META-INF/services/io.quarkus.dev.spi.HotReplacementSetup` を追加する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"On startup the `setupHotDeployment` method will be called, and you can use the provided `io.quarkus.dev.spi.HotReplacementContext`\n"
"to initiate a scan for changed files."
msgstr "起動時には `setupHotDeployment` メソッドが呼び出され、提供された `io.quarkus.dev.spi.HotReplacementContext` を使って変更されたファイルのスキャンを開始することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Dev Services"
msgstr "Dev Services"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Where extensions use an external service, adding a Dev Service can improve the user experience in development and test modes.\n"
"See xref:extension-writing-dev-service.adoc[how to write a Dev Service] for more details."
msgstr ""
"エクステンションが外部サービスを使用する場合、Dev Service を追加すると、開発モードとテストモードでのユーザーエクスペリエンスが向上します。\n"
"詳細は、xref:extension-writing-dev-service.adoc[Dev Service の記述方法] を参照してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Testing Extensions"
msgstr "エクステンションのテスト"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Testing of Quarkus extensions should be done with the `io.quarkus.test.QuarkusUnitTest` JUnit 5 extension.\n"
"This extension allows for Arquillian-style tests that test specific functionalities.\n"
"It is not intended for testing user applications, as this should be done via `io.quarkus.test.junit.QuarkusTest`.\n"
"The main difference is that `QuarkusTest` simply boots the application once at the start of the run, while `QuarkusUnitTest` deploys a custom\n"
"Quarkus application for each test class."
msgstr "Quarkus エクステンションのテストは `io.quarkus.test.QuarkusUnitTest` JUnit 5 拡張モジュールを使用してください。このエクステンションを使用すると、特定の機能をテストする Arquillian スタイルのテストを行うことができます。ユーザーアプリケーションのテストは `io.quarkus.test.junit.QuarkusTest` を経由して行う必要があるため、ユーザーアプリケーションのテストを目的としたものではありません。主な違いは、 `QuarkusTest` は実行開始時にアプリケーションを起動するだけで、 `QuarkusUnitTest` は各テストクラスごとにカスタムの Quarkus アプリケーションを展開するという点です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"These tests should be placed in the deployment module, if additional Quarkus modules are required for testing\n"
"their deployment modules should also be added as test scoped dependencies."
msgstr "これらのテストもデプロイメントモジュールに配置される必要があります。もし追加のQuarkusモジュールがテストに必要な場合は、それらのデプロイメントモジュールもテストスコープ付きの依存関係として追加しなければなりません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Note that `QuarkusUnitTest` is in the `quarkus-junit5-internal` module."
msgstr "なお、 `QuarkusUnitTest` は、 `quarkus-junit5-internal` モジュールに入っています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "An example test class may look like:"
msgstr "テストクラスの例は次のようになります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The `QuarkusUnitTest` extension must be used with a static field. If used with a non-static field, the test application is not started."
msgstr "`QuarkusUnitTest` エクステンションは、静的フィールドと一緒に使用する必要があります。静的でないフィールドで使用した場合、テストアプリケーションは開始されません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This producer is used to build the application to be tested. It uses Shrinkwrap to create a JavaArchive to test"
msgstr "このプロデューサーは、テストするアプリケーションを構築するために使用されます。Shrinkwrap を使用して、テストする JavaArchive を作成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "It is possible to inject beans from our test deployment directly into the test case"
msgstr "テストデプロイメントからテストケースに直接 Bean を注入することが可能です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This method directly invokes the health check Servlet and verifies the response"
msgstr "このメソッドは、ヘルスチェックサーブレットを直接呼び出し、応答を検証します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This method uses the injected health check bean to verify it is returning the expected result"
msgstr "このメソッドは、注入されたヘルスチェック Bean を使用して、期待される結果を返していることを確認します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If you want to test that an extension properly fails at build time, use the `setExpectedException` method:"
msgstr "エクステンションがビルド時に正しく失敗することをテストする場合は、 `setExpectedException` メソッドを使用します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This tells JUnit that the Quarkus deployment should fail with a specific exception"
msgstr "これは、Quarkus のデプロイが特定の例外で失敗することを JUnit に伝えます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Testing hot reload"
msgstr "ホットリロードのテスト"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"It is also possible to write tests that verify an extension works correctly in development mode and can correctly\n"
"handle updates."
msgstr "開発モードでエクステンションが正しく動作し、アップデートを正しく処理できるかどうかを検証するテストを書くことも可能です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"For most extensions this will just work 'out of the box', however it is still a good idea to have a smoke test to\n"
"verify that this functionality is working as expected. To test this we use `QuarkusDevModeTest`:"
msgstr "ほとんどのエクステンションでは、これは「箱から出してすぐに」動作しますが、この機能が期待通りに動作しているかどうかを確認するためにスモークテストを行うことをお勧めします。このテストには `QuarkusDevModeTest` を使用します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This starts the deployment, your test can modify it as part of the test suite. Quarkus will be restarted between\n"
"each test method so every method starts with a clean deployment."
msgstr "これによりデプロイメントが開始され、テストスイートの一部として変更できます。Quarkus は各テストメソッド間で再起動されるため、すべてのメソッドはクリーンなデプロイメントで開始されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This method allows you to modify the source of a class file. The old source is passed into the function, and the updated\n"
"source is returned."
msgstr "このメソッドを使用すると、クラスファイルのソースを変更できます。古いソースが関数に渡され、更新されたソースが返されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This method adds a new class file to the deployment. The source that is used will be the original source that is part\n"
"of the current project."
msgstr "このメソッドは、デプロイメントに新しいクラスファイルを追加します。使用されるソースは、現在のプロジェクトの一部である元のソースになります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This method modifies a static resource"
msgstr "このメソッドは静的リソースを変更します"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This method adds a new static resource"
msgstr "このメソッドは新しい静的リソースを追加します"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Native Executable Support"
msgstr "ネイティブ実行可能ファイルのサポート"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"There Quarkus provides a lot of build items that control aspects of the native executable build. This allows for extensions\n"
"to programmatically perform tasks such as registering classes for reflection or adding static resources to the native\n"
"executable. Some of these build items are listed below:"
msgstr "そこで Quarkus は、ネイティブの実行可能ビルドの特徴を制御する多くのビルドアイテムを提供します。これによりエクステンションは、リフレクション用のクラスの登録やネイティブ実行可能ファイルへの静的リソースの追加などのタスクをプログラムで実行できます。これらのビルドアイテムの一部を以下に示します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem`"
msgstr "`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Includes static resources into the native executable."
msgstr "ネイティブ実行可能ファイルに静的なリソースをインクルードします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceDirectoryBuildItem`"
msgstr "`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceDirectoryBuildItem`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Includes directory's static resources into the native executable."
msgstr "ディレクトリの静的リソースをネイティブ実行可能ファイルにインクルードします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem`"
msgstr "`io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A class that will be reinitialized at runtime by Substrate. This will result in the static initializer running twice."
msgstr "Substrate によってランタイムで再初期化されるクラス。これにより、静的イニシャライザーは 2 回実行されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`io.quarkus.deployment.builditem.nativeimage.NativeImageSystemPropertyBuildItem`"
msgstr "`io.quarkus.deployment.builditem.nativeimage.NativeImageSystemPropertyBuildItem`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A system property that will be set at native executable build time."
msgstr "ネイティブ実行可能ファイルのビルド時に設定されるシステムプロパティです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem`"
msgstr "`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBundleBuildItem`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Includes a resource bundle in the native executable."
msgstr "ネイティブ実行可能ファイルにリソースバンドルを含めます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem`"
msgstr "`io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Registers a class for reflection in Substrate. Constructors are always registered, while methods and fields are optional."
msgstr "Substrate でリフレクションのクラスを登録します。コンストラクターは常に登録されますが、メソッドとフィールドはオプションです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem`"
msgstr "`io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A class that will be initialized at runtime rather than build time. This will cause the build to fail if the class is initialized as part of the native executable build process, so care must be taken."
msgstr "ビルド時ではなくランタイムで初期化されるクラス。これにより、クラスがネイティブ実行可能ビルドプロセスの一部として初期化されるとビルドに失敗するため、注意が必要です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`io.quarkus.deployment.builditem.nativeimage.NativeImageConfigBuildItem`"
msgstr "`io.quarkus.deployment.builditem.nativeimage.NativeImageConfigBuildItem`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A convenience feature that allows you to control most of the above features from a single build item."
msgstr "上記の機能のほとんどを単一のビルドアイテムから制御できる便利な機能。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`io.quarkus.deployment.builditem.NativeImageEnableAllCharsetsBuildItem`"
msgstr "`io.quarkus.deployment.builditem.NativeImageEnableAllCharsetsBuildItem`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Indicates that all charsets should be enabled in native image."
msgstr "ネイティブイメージですべての文字セットを有効にすることを示します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem`"
msgstr "`io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"A convenient way to tell Quarkus that the extension requires SSL, and it should be enabled during native image build.\n"
"When using this feature, remember to add your extension to the list of extensions that offer SSL support automatically on the https://github.com/quarkusio/quarkus/blob/main/docs/src/main/asciidoc/native-and-ssl.adoc[native and ssl guide]."
msgstr "エクステンションがSSLを必要とし、ネイティブイメージのビルド中に有効にする必要があることをQuarkusに伝える便利な方法です。この機能を使用する場合は、 link:https://github.com/quarkusio/quarkus/blob/main/docs/src/main/asciidoc/native-and-ssl.adoc[ネイティブおよびSSLガイド] の、自動的にSSLサポートを提供するエクステンションのリストに、作成したエクステンションを追加することを忘れないでください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "IDE support tips"
msgstr "IDE サポートのヒント"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Writing Quarkus extensions in Eclipse"
msgstr "Eclipse での Quarkus 拡張の書き方"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The only particular aspect of writing Quarkus extensions in Eclipse is that APT (Annotation Processing Tool) is required as part of extension builds, which means you need to:"
msgstr "EclipseでQuarkusエクステンションを書く際の唯一の特別な点は、エクステンションのビルドの一部としてAPT（Annotation Processing Tool）が必要であることです。つまり、以下が必要です:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Install `m2e-apt` from https://marketplace.eclipse.org/content/m2e-apt"
msgstr "https://marketplace.eclipse.org/content/m2e-apt から `m2e-apt` をインストール"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Define this property in your `pom.xml`: `<m2e.apt.activation>jdt_apt</m2e.apt.activation>`, although if you rely on `io.quarkus:quarkus-build-parent` you will get it for free."
msgstr "`pom.xml` にこのプロパティを追加します : `<m2e.apt.activation>jdt_apt</m2e.apt.activation>` 。 `io.quarkus:quarkus-build-parent` に依存している場合、既に追加済です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If you have the `io.quarkus:quarkus-extension-processor` project open at the same time in your IDE (for example, if you have the Quarkus sources checked out and open in your IDE) you will need to close that project. Otherwise, Eclipse will not invoke the APT plugin that it contains."
msgstr "IDEで同時に `io.quarkus:quarkus-extension-processor` プロジェクトを開いている場合（例えば、QuarkusのソースをチェックアウトしてIDEで開いている場合）、そのプロジェクトを閉じる必要があります。そうしないと、Eclipseはそのプロジェクトに含まれるAPTプラグインを起動しません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If you just closed the extension processor project, be sure to do `Maven > Update Project` on the other projects in order for Eclipse to pick up the extension processor from the Maven repository."
msgstr "エクステンションプロセッサのプロジェクトを閉じたばかりの場合は、Eclipse が Maven リポジトリからエクステンションプロセッサをピックアップするために、他のプロジェクトで `Maven > Update Project` を必ず実行してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Troubleshooting / Debugging Tips"
msgstr "トラブルシューティング / デバッグのヒント"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Inspecting the Generated/Transformed Classes"
msgstr "生成・変換されたクラスの検査"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Quarkus generates a lot of classes during the build phase and in many cases also transforms existing classes.\n"
"It is often extremely useful to see the generated bytecode and transformed classes during the development of an extension."
msgstr "Quarkusでは、ビルドフェーズで多くのクラスが生成され、多くの場合、既存のクラスも変換されます。エクステンションの開発中に、生成されたバイトコードや変換されたクラスを見ることができるのは、非常に便利なことです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"If you set the `quarkus.package.jar.decompiler.enabled` property to `true` then Quarkus will download and invoke the https://github.com/Vineflower/vineflower[Vineflower decompiler] and dump the result in the `decompiled` directory of the build tool output (`target/decompiled` for Maven for example).\n"
"The output directory can be changed with `quarkus.package.jar.decompiler.output-dir`."
msgstr ""
"`quarkus.package.jar.decompiler.enabled` プロパティーを `true` に設定すると、Quarkus は https://github.com/Vineflower/vineflower[Vineflower decompiler] をダウンロードして呼び出し、その結果をビルドツール出力の `decompiled` ディレクトリー (たとえば Maven の場合は `target/decompiled`) にダンプします。\n"
"出力ディレクトリーは `quarkus.package.jar.decompiler.output-dir` で変更できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "This property only works during a normal production build (i.e. not for dev mode/tests) and when `fast-jar` packaging type is used (the default behavior)."
msgstr "このプロパティは、通常のプロダクションビルド時にのみ機能します（つまり、devモード/テストでは機能しません）。また、 `fast-jar` パッケージングタイプが使用されている場合（デフォルトの動作）には、このプロパティは機能しません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "There are also three system properties that allow you to dump the generated/transformed classes to the filesystem and inspect them later, for example via a decompiler in your IDE."
msgstr "また、生成/変換されたクラスをファイルシステムにダンプして、IDEのデコンパイラなどで後から検査することができる3つのシステム・プロパティがあります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus.debug.generated-classes-dir` - to dump the generated classes, such as bean metadata"
msgstr "`quarkus.debug.generated-classes-dir` - Beanのメタデータのような、生成されたクラスをダンプします"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus.debug.transformed-classes-dir` - to dump the transformed classes, e.g. Panache entities"
msgstr "`quarkus.debug.transformed-classes-dir` - Panache エンティティのような、変換されたクラスをダンプします"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`quarkus.debug.generated-sources-dir` - to dump the ZIG files; ZIG file is a textual representation of the generated code that is referenced in the stack traces"
msgstr "`quarkus.debug.generated-sources-dir` - ZIG ファイルをダンプします。ZIG ファイルは、スタックトレースで参照される生成されたコードのテキスト表現です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "These properties are especially useful in the development mode or when running the tests where the generated/transformed classes are only held in memory in a class loader."
msgstr "これらのプロパティは、開発モードやテストの実行時に、生成/変換されたクラスがクラスローダーのメモリ内に保持されているだけの場合に特に有効です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "For example, you can specify the `quarkus.debug.generated-classes-dir` system property to have these classes written out to disk for inspection in the development mode:"
msgstr "例えば、 `quarkus.debug.generated-classes-dir` システムプロパティを指定すると、これらのクラスがディスクに書き出され、開発モードで検査できるようになります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The property value could be either an absolute path, such as `/home/foo/dump` on a Linux machine, or a path relative to the user working directory, i.e. `dump` corresponds to the `{user.dir}/target/dump` in the dev mode and `{user.dir}/dump` when running the tests."
msgstr "プロパティー値は、Linux マシンの `/home/foo/dump` などの絶対パス、またはユーザーの作業ディレクトリーからの相対パスになります。つまり、 `dump` は開発モードの `{user.dir}/target/dump`やテスト実行時の `{user.dir}/dump` に対応します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "You should see a line in the log for each class written to the directory:"
msgstr "ディレクトリーに書き込まれた各クラスのログに行が表示されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The property is also honored when running tests:"
msgstr "このプロパティーは、テストを実行するときにも尊重されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Analogously, you can use the `quarkus.debug.transformed-classes-dir` and `quarkus.debug.generated-sources-dir` properties to dump the relevant output."
msgstr "同様に、 `quarkus.debug.transformed-classes-dir` プロパティーと `quarkus.debug.generated-sources-dir` プロパティーを使用して、関連する出力をダンプできます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Inspecting Generated/Transformed Classes in `QuarkusUnitTest`"
msgstr "`QuarkusUnitTest` で生成/変換されたクラスを検査する"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"When <<testing-extensions,using `QuarkusUnitTest`>>,\n"
"as an alternative to <<dump-the-generated-classes-to-the-file-system,setting `quarkus.debug.*-dir` manually>>,\n"
"you may simply call `QuarkusUnitTest#debugBytecode`:"
msgstr "<<dump-the-generated-classes-to-the-file-system,setting `quarkus.debug.*-dir` manually>> を設定する代わりに、<<testing-extensions,using `QuarkusUnitTest`>> を使用する場合は、単に `QuarkusUnitTest#debugBytecode` を呼び出します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This will automatically set up these configuration properties so that classes/sources\n"
"are dumped to `target/debug`, for that test class only,\n"
"in a subdirectory that is unique to each test execution.\n"
"See the javadoc of `QuarkusUnitTest#debugBytecode` for details."
msgstr ""
"これにより、これらの設定プロパティーが自動的にセットアップされ、\n"
"そのテストクラス専用に、各テスト実行に固有のサブディレクトリー内で\n"
"クラスやソースが `target/debug` にダンプされます。\n"
"詳細は、 `QuarkusUnitTest#debugBytecode` の javadoc を参照してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This is handy to debug flaky tests that happen only in the CI environment, in particular;\n"
"for example the GitHub Actions CI at https://github.com/quarkusio/quarkus/\n"
"is set up so that such `target/debug` directories are\n"
"collected into build artifacts available for download after each CI run."
msgstr ""
"これは、特に CI 環境でのみ発生する不安定なテストをデバッグする場合に便利です。\n"
"たとえば、 https://github.com/quarkusio/quarkus/ の GitHub Actions CI では、このような `target/debug` ディレクトリーが収集され、各 CI 実行後にダウンロード可能なビルドアーティファクトとして提供されるようにセットアップされています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Enabling trace logs for a particular test only"
msgstr "特定のテストのみでトレースログを有効にする"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"When <<testing-extensions,using `QuarkusUnitTest`>>,\n"
"if you need to enable trace logs for a particular test class,\n"
"you may simply call `QuarkusUnitTest#traceCategories` and pass the logging categories in argument:"
msgstr ""
"<<testing-extensions,using `QuarkusUnitTest`> を使用する場合、特定のテストクラスに対してトレースログを有効にする必要がある場合は、\n"
"単に `QuarkusUnitTest#traceCategories` を呼び出し、引数にロギングカテゴリーを渡します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "See the javadoc of `QuarkusUnitTest#traceCategories` for details."
msgstr "詳細は、 `QuarkusUnitTest#traceCategories` の javadoc を参照してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This is handy to debug flaky tests that happen only in the CI environment, in particular,\n"
"as this will only increase the verbosity of logs in the particular test where the option is enabled."
msgstr ""
"これは、特に CI 環境でのみ発生する不安定なテストをデバッグする場合に便利です。\n"
"このオプションが有効になっている特定のテストのみでログの詳細度が増加するためです。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Multi-module Maven Projects and the Development Mode"
msgstr "マルチモジュールのMavenプロジェクトと開発モード"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "It's not uncommon to develop an extension in a multi-module Maven project that also contains an \"example\" module."
msgstr "\"example\" モジュールも含まれるマルチモジュール Maven プロジェクトでエクステンションを開発することは珍しくありません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "In multi-module Maven projects we recommend to have an explicit `compile` call to ensure compilation happens before the `quarkus:dev` goal is executed."
msgstr "マルチモジュール Maven プロジェクトでは、 `quarkus:dev` ゴールが実行される前にコンパイルが行われるように、明示的な `compile` 呼び出しを行うことを推奨します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Indexer does not include your external dependency"
msgstr "インデクサーには外部依存関係は含まれていません"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Remember to add `IndexDependencyBuildItem` artifacts to your `@BuildStep`."
msgstr "`@BuildStep` に `IndexDependencyBuildItem` アーティファクトを追加することを忘れないでください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Sample Test Extension"
msgstr "サンプルテストエクステンション"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"We have an extension that is used to test for regressions in the extension processing. It is located in {quarkus-tree-url}/integration-tests/test-extension/extension directory. In this section we touch on some tasks an extension\n"
"author will typically need to perform using the test-extension code to illustrate how the task could be done."
msgstr "エクステンションの処理のリグレッションをテストするために使われるエクステンションがあります。これは {quarkus-tree-url}/integration-tests/test-extension/extension ディレクトリにあります。このセクションでは、test-extension のコードを使って、エクステンションの作者が通常行う必要のあるタスクについて触れます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Features and Capabilities"
msgstr "フィーチャーとケイパビリティ"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Features"
msgstr "特徴"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"A _feature_ represents a functionality provided by an extension.\n"
"The name of the feature gets displayed in the log during application bootstrap."
msgstr "_フィーチャー_ とは、エクステンションが提供する機能のことです。フィーチャーの名前は、アプリケーションの起動時にログに表示されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example Startup Lines"
msgstr "起動時の行の例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A list of features installed in the runtime image"
msgstr "ランタイムイメージにインストールされているフィーチャーのリスト"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "A feature can be registered in a <<build-step-processors>> method that produces a `FeatureBuildItem`:"
msgstr "特徴は `FeatureBuildItem` を生成する <<build-step-processors>> メソッドで登録できます:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "TestProcessor#feature()"
msgstr "TestProcessor#feature()"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The name of the feature should only contain lowercase characters, words are separated by dash; e.g. `security-jpa`.\n"
"An extension should provide at most one feature and the name must be unique.\n"
"If multiple extensions register a feature of the same name the build fails."
msgstr "フィーチャー名には小文字のみを使用し、単語はダッシュで区切ります。例： `security-jpa` 。1 つのエクステンションが提供するフィーチャーは最大でも 1 つで、その名前は一意でなければなりません。複数のエクステンションが同じ名前のフィーチャーを登録した場合、ビルドは失敗します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The feature name should also map to a label in the extension's `devtools/common/src/main/filtered/extensions.json` entry so that\n"
"the feature name displayed by the startup line matches a label that one can use to select the extension when creating a project\n"
"using the Quarkus maven plugin as shown in this example taken from the xref:rest-json.adoc[Writing JSON REST Services] guide where the `rest-jackson` feature is referenced:"
msgstr ""
"この機能名は、エクステンションの `devtools/common/src/main/filtered/extensions.json` エントリーのラベルにもマップする必要があります。\n"
"これにより、起動時に表示される機能名が、Quarkus Maven プラグインを使用してプロジェクトを作成する際にエクステンションを選択するために使用できるラベルと一致します。以下の例は、xref:rest-json.adoc[JSON REST Services の作成] ガイドから引用したもので、 `rest-jackson` 機能が参照されています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Capabilities"
msgstr "Capabilities"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"A _capability_ represents a technical capability that can be queried by other extensions.\n"
"An extension may provide multiple capabilities and multiple extensions can provide the same capability.\n"
"By default, capabilities are not displayed to users.\n"
"Capabilities should be used when checking for the presence of an extension rather than class path based checks."
msgstr "_ケイパビリティ_ は、他のエクステンションから問い合わせ可能な技術的能力を表します。1つのエクステンションが複数のケイパビリティを提供することも、複数のエクステンションが同じケイパビリティを提供することもできます。デフォルトでは、ケイパビリティはユーザーに表示されません。エクステンションの存在を確認する際には、クラスパスベースのチェックではなく、ケイパビリティを使用する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Capabilities can be registered in a <<build-step-processors>> method that produces a `CapabilityBuildItem`:"
msgstr "機能は、 `CapabilityBuildItem` を生成する <<build-step-processors>> メソッドに登録することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "TestProcessor#capability()"
msgstr "TestProcessor#capability()"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Extensions can consume registered capabilities using the `Capabilities` build item:"
msgstr "エクステンションは、 `Capabilities` ビルドアイテムを使用して、登録されたケイパビリティを消費することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "TestProcessor#doSomeCoolStuff()"
msgstr "TestProcessor#doSomeCoolStuff()"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Capabilities should follow the naming conventions of Java packages; e.g. `io.quarkus.security.jpa`.\n"
"Capabilities provided by core extensions should be listed in the `io.quarkus.deployment.Capability` enum and their name should always start with the `io.quarkus` prefix."
msgstr "ケイパビリティは、 `io.quarkus.security.jpa` のように、Java パッケージの命名規則に従う必要があります。コアエクステンションによって提供されるケイパビリティは、 `io.quarkus.deployment.Capability` 列挙型にリストされている必要があり、それらの名前は常に `io.quarkus` の接頭辞で始まる必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Bean Defining Annotations"
msgstr "アノテーションを定義する Bean"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The CDI layer processes CDI beans that are either explicitly registered or that it discovers based on bean defining annotations as defined in https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations[2.5.1. Bean defining annotations]. You can expand this set of annotations to include annotations your extension processes using a `BeanDefiningAnnotationBuildItem` as shown in this `TestProcessor#registerBeanDefinningAnnotations` example:"
msgstr "CDI レイヤーは、明示的に登録されているか、 https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations[2.5.1. Bean 定義アノテーション] で定義されている Bean 定義アノテーションに基づいて検出する CDI Bean を処理します。このアノテーションセットを拡張し、 `TestProcessor#registerBeanDefinningAnnotations` の例が示すように `BeanDefiningAnnotationBuildItem` を使用してエクステンションプロセスにアノテーションを含めることができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Register a Bean Defining Annotation"
msgstr "アノテーションを定義する Bean の登録"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Register the annotation class and CDI default scope using the Jandex `DotName` class."
msgstr "Jandex `DotName` クラスを使用して、アノテーションクラスと CDI デフォルトスコープを登録します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`ConfiguredBean` will be processed by the CDI layer the same as a bean annotated with the CDI standard @ApplicationScoped."
msgstr "`ConfiguredBean` は、CDI 標準 @ApplicationScoped でアノテーションが付けられた Bean と同じように CDI レイヤーによって処理されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Parsing Config to Objects"
msgstr "コンフィグをオブジェクトにパースする"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"One of the main things an extension is likely to do is completely separate the configuration phase of behavior from the runtime phase.\n"
"Frameworks often do parsing/load of configuration on startup that can be done during build time to both reduce the runtime dependencies on frameworks like xml parsers as well as reducing the startup time the parsing incurs."
msgstr "エクステンションの主な目的の1つは、動作の設定段階を実行段階から完全に分離することです。フレームワークは起動時に設定の解析や読み込みを行うことが多いですが、これをビルド時に行うことで、xmlパーサーなどのフレームワークへの実行時の依存を減らし、解析にかかる起動時間を短縮することができます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "An example of parsing an XML config file using JAXB is shown in the `TestProcessor#parseServiceXmlConfig` method:"
msgstr "JAXB を使用して XML 設定ファイルを解析する例を `TestProcessor#parseServiceXmlConfig` メソッドに示します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Parsing an XML Configuration into Runtime XmlConfig Instance"
msgstr "XML 設定をランタイム XmlConfig インスタンスに解析する"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Look for a config.xml classpath resource"
msgstr "config.xml クラスパスリソースを探します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If found, parse using JAXB context for `XmlConfig.class`"
msgstr "見つかった場合は、JAXB コンテキストを使用して `XmlConfig.class` を解析します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If there was no /config.xml resource available in the build environment, then a null `RuntimeServiceBuildItem` would be returned and no subsequent logic based on a `RuntimeServiceBuildItem` being produced would execute."
msgstr "ビルド環境で使用可能な /config.xml リソースがない場合、null の `RuntimeServiceBuildItem` が返され、生成されている `RuntimeServiceBuildItem` に基づく後続のロジックは実行されません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Typically, one is loading a configuration to create some runtime component/service as `parseServiceXmlConfig` is doing. We will come back to the rest of the behavior in `parseServiceXmlConfig` in the following <<manage-non-cdi-service>> section."
msgstr "通常、 `parseServiceXmlConfig` が実行しているように、設定をロードしてランタイムコンポーネント/サービスを作成します。 `parseServiceXmlConfig` の残りの動作については、<<manage-non-cdi-service>> セクションで説明します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If for some reason you need to parse the config and use it in other build steps in an extension processor, you would need to create an `XmlConfigBuildItem` to pass the parsed XmlConfig instance around."
msgstr "何らかの理由で設定を解析し、エクステンションプロセッサーの他のビルドステップで使用する必要がある場合は、解析された XmlConfig インスタンスを渡すために `XmlConfigBuildItem` を作成する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"If you look at the XmlConfig code you will see that it does carry around the JAXB annotations. If you don't want these in the runtime image, you could clone the XmlConfig instance into some POJO object graph and then replace XmlConfig with the POJO class.\n"
"We will do this in <<replacing-classes-in-native-image>>."
msgstr "XmlConfig コードを見ると、JAXB アノテーションが付与されていることがわかります。これらをランタイムイメージに含めたくない場合は、XmlConfig インスタンスを POJO オブジェクトグラフに複製してから、XmlConfig を POJO クラスに置き換えることができます。これは、<<replacing-classes-in-native-image>> で行います。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Scanning Deployments Using Jandex"
msgstr "Jandex を使用したデプロイメントのスキャン"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "If your extension defines annotations or interfaces that mark beans needing to be processed, you can locate these beans using the Jandex API, a Java annotation indexer and offline reflection library. The following `TestProcessor#scanForBeans` method shows how to find the beans annotated with our `@TestAnnotation` that also implement the `IConfigConsumer` interface:"
msgstr "エクステンションが、処理が必要なBeanをマークするアノテーションやインターフェースを定義している場合、Javaアノテーション・インデクサーとオフライン・リフレクション・ライブラリであるJandex APIを使って、これらのBeanを見つけることができます。以下の `TestProcessor#scanForBeans` メソッドは、 `IConfigConsumer` インターフェースも実装している `@TestAnnotation` でアノテーションされたビーンを見つける方法を示しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example Jandex Usage"
msgstr "Jandex の使用例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Depend on a `BeanArchiveIndexBuildItem` to have the build step be run after the deployment has been indexed."
msgstr "`BeanArchiveIndexBuildItem` に依存して、デプロイメントのインデックスが作成された後にビルドステップを実行します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Retrieve the index."
msgstr "インデックスを取得します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Find all beans annotated with `@TestAnnotation`."
msgstr "`@TestAnnotation` でアノテーションが付けられたすべての Bean を検索します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Determine which of these beans also has the `IConfigConsumer` interface."
msgstr "これらの Bean のどれが `IConfigConsumer` インターフェイスも持っているかを判別します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Save the bean class in a `TestBeanBuildItem` for use in a latter RUNTIME_INIT build step that will interact with the bean instances."
msgstr "Bean クラスを `TestBeanBuildItem` に保存して、Bean インスタンスとインタラクトする後の RUNTIME_INIT ビルドステップで使用できるようにします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Interacting With Extension Beans"
msgstr "エクステンション Bean とのインタラクション"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "You can use the `io.quarkus.arc.runtime.BeanContainer` interface to interact with your extension beans. The following `configureBeans` methods illustrate interacting with the beans scanned for in the previous section:"
msgstr "`io.quarkus.arc.runtime.BeanContainer` インターフェイスを使用して、エクステンション Bean とインタラクトできます。次の `configureBeans` メソッドは、前のセクションでスキャンされた Bean とのインタラクションを示しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Using CDI BeanContainer Interface"
msgstr "CDI BeanContainer インターフェイスの使用"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Consume the `TestBeanBuildItem`s produced from the scanning build step."
msgstr "スキャンビルドステップから生成された `TestBeanBuildItem` を消費します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Consume the `BeanContainerBuildItem` to order this build step to run after the CDI bean container has been created."
msgstr "`BeanContainerBuildItem` を使用して、CDI Bean コンテナーが作成された後にこのビルドステップを実行するように命令します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Call the runtime recorder to record the bean interactions."
msgstr "ランタイムレコーダーを呼び出して、Bean のインタラクションを記録します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Runtime recorder retrieves the bean using its type."
msgstr "ランタイムレコーダは、そのタイプを使用して Bean を取得します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Runtime recorder invokes the `IConfigConsumer#loadConfig(...)` method passing in the configuration objects with runtime information."
msgstr "ランタイムレコーダは `IConfigConsumer#loadConfig(...)` メソッドを呼び出し、ランタイム情報を含む設定オブジェクトを渡します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Manage Non-CDI Service"
msgstr "非CDIサービスの管理"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"A common purpose for an extension is to integrate a non-CDI aware service into the CDI based Quarkus runtime.\n"
"Step 1 of this task is to load any configuration needed in a STATIC_INIT build step as we did in <<parsing-config-to-objects>>.\n"
"Now we need to create an instance of the service using the configuration.\n"
"Let's return to the `TestProcessor#parseServiceXmlConfig` method to see how this can be done."
msgstr ""
"エクステンションの一般的な目的は、非 CDI 対応のサービスを CDI ベースの Quarkus ランタイムに統合することです。\n"
"このタスクの最初のステップは、<<parsing-config-to-objects>> で実行したように、STATIC_INIT ビルドステップで必要な設定をロードすることです。\n"
"次に、この設定を使用してサービスのインスタンスを作成する必要があります。\n"
"`TestProcessor#parseServiceXmlConfig` メソッドに戻って、これを行う方法を確認しましょう。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Creating a Non-CDI Service"
msgstr "非CDIサービスの作成"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Call into the runtime recorder to record the creation of the service."
msgstr "ランタイムレコーダーを呼び出して、サービスの作成を記録します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Using the parsed `XmlConfig` instance, create an instance of `RuntimeXmlConfigService` and wrap it in a `RuntimeValue`. Use a `RuntimeValue` wrapper for non-interface objects that are non-proxiable."
msgstr "解析された `XmlConfig` インスタンスを使用して、 `RuntimeXmlConfigService` のインスタンスを作成し、それを `RuntimeValue` でラップします。プロキシー不可能な非インターフェイスオブジェクトには `RuntimeValue` ラッパーを使用します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Wrap the return service value in a `RuntimeServiceBuildItem` for use in a RUNTIME_INIT build step that will start the service."
msgstr "サービスを開始する RUNTIME_INIT ビルドステップで使用するために、戻りサービス値を `RuntimeServiceBuildItem` にラップします。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Starting a Service"
msgstr "サービスの開始"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Now that you have recorded the creation of a service during the build phase, you need to record how to start the service at runtime during booting.\n"
"You do this with a RUNTIME_INIT build step as shown in the `TestProcessor#startRuntimeService` method."
msgstr "ビルドフェーズでのサービスの作成を記録したので、起動時にランタイムでサービスを開始する方法を記録する必要があります。これは、 `TestProcessor#startRuntimeService` メソッドに示されている RUNTIME_INIT ビルドステップを使用して行います。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Starting/Stopping a Non-CDI Service"
msgstr "非CDIサービスの開始/停止"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "We consume a ShutdownContextBuildItem to register the service shutdown."
msgstr "ShutdownContextBuildItemを消費してサービスのシャットダウンを登録します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "We consume the previously initialized service captured in `RuntimeServiceBuildItem`."
msgstr "`RuntimeServiceBuildItem` で取得した、以前に初期化したサービスを消費します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Call the runtime recorder to record the service start invocation."
msgstr "ランタイムレコーダーを呼び出して、サービス開始の呼び出しを記録します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Produce a `ServiceStartBuildItem` to indicate the startup of a service. See <<startup-shutdown-events>> for details."
msgstr "サービスの起動を示す `ServiceStartBuildItem` を生成します。詳しくは <<startup-shutdown-events>> を参照します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Runtime recorder retrieves the service instance reference and calls its `startService` method."
msgstr "ランタイムレコーダはサービスインスタンス参照を取得し、その `startService` メソッドを呼び出します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Runtime recorder registers an invocation of the service instance `stopService` method with the Quarkus `ShutdownContext`."
msgstr "ランタイムレコーダーは、サービスインスタンスの `stopService` メソッドの呼び出しを Quarkus の `ShutdownContext` に登録します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The code for the `RuntimeXmlConfigService` can be viewed here:\n"
"{quarkus-blob-url}/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/RuntimeXmlConfigService.java[RuntimeXmlConfigService.java]"
msgstr "`RuntimeXmlConfigService` のコードは、 {quarkus-blob-url}/integration-tests/test-extension/extension/runtime/src/main/java/io/quarkus/extest/runtime/RuntimeXmlConfigService.java[RuntimeXmlConfigService.java] で確認できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The testcase for validating that the `RuntimeXmlConfigService` has started can be found in the `testRuntimeXmlConfigService` test of `ConfiguredBeanTest` and `NativeImageIT`."
msgstr "`RuntimeXmlConfigService` が開始されたことを検証するテストケースは、 `ConfiguredBeanTest` と `NativeImageIT` の `testRuntimeXmlConfigService` テストにあります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Startup and Shutdown Events"
msgstr "スタートアップとシャットダウンのイベント"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The Quarkus container supports startup and shutdown lifecycle events to notify components of the container startup\n"
"and shutdown. There are CDI events fired that components can observe are illustrated in this example:"
msgstr "Quarkus コンテナーは、起動とシャットダウンのライフサイクルイベントをサポートして、コンテナーの起動とシャットダウンをコンポーネントに通知します。次の例のように、コンポーネントが監視できる CDI イベントが発生します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Observing Container Startup"
msgstr "コンテナの起動を観察"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Observe a `StartupEvent` to be notified the runtime has started."
msgstr "`StartupEvent` でランタイムの開始が通知されるのを確認します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Observe a `ShutdownEvent` to be notified when the runtime is going to shut down."
msgstr "ランタイムのシャットダウン時に `ShutdownEvent` で通知されるのを確認します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"What is the relevance of startup and shutdown events for extension authors? We have already seen the use of a `ShutdownContext`\n"
"to register a callback to perform shutdown tasks in the <<starting-service>> section.\n"
"These shutdown tasks would be called\n"
"after a `ShutdownEvent` had been sent."
msgstr ""
"エクステンションの作成者にとって、起動イベントとシャットダウンイベントは何が関連しているでしょうか。 `ShutdownContext` を使用して\n"
"コールバックを登録し、シャットダウンタスクを実行する方法については、<<starting-service>> セクションですでに確認しました。\n"
"これらのシャットダウンタスクは、\n"
"`ShutdownEvent` が送信された後に呼び出されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"A `StartupEvent` is fired after all `io.quarkus.deployment.builditem.ServiceStartBuildItem` producers have been consumed.\n"
"The implication of this is that if an extension has services that application components would expect to have been\n"
"started when they observe a `StartupEvent`, the build steps that invoke the runtime code to start those services needs\n"
"to produce a `ServiceStartBuildItem` to ensure that the runtime code is run before the `StartupEvent` is sent. Recall that\n"
"we saw the production of a `ServiceStartBuildItem` in the previous section, and it is repeated here for clarity:"
msgstr "`StartupEvent` は、すべての `io.quarkus.deployment.builditem.ServiceStartBuildItem` プロデューサーが消費された後に実行されます。これは、 `StartupEvent` が確認されるとアプリケーションコンポーネントが起動することを想定したサービスがエクステンションにある場合に、そのようなサービスを起動するためのランタイムコードを呼び出すビルドステップは、 `StartupEvent` の送信前にランタイムコードが実行されるように `ServiceStartBuildItem` を作成する必要があることを意味します。 `ServiceStartBuildItem` の作成については前のセクションで説明しましたが、確認のためにここでも繰り返します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Example of Producing a ServiceStartBuildItem"
msgstr "ServiceStartBuildItem の生成例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Produce a `ServiceStartBuildItem` to indicate that this is a service starting step that needs to run before the `StartupEvent` is sent."
msgstr "`ServiceStartBuildItem` を生成し、これが `StartupEvent` の送信前に実行する必要のあるサービス開始ステップであることを示します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Register Resources for Use in Native Image"
msgstr "ネイティブイメージで使用するリソースの登録"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Not all configuration or resources can be consumed at build time. If you have classpath resources that the runtime needs to access, you need to inform the build phase that these resources need to be copied into the native image. This is done by producing one or more `NativeImageResourceBuildItem` or `NativeImageResourceBundleBuildItem` in the case of resource bundles. Examples of this are shown in this sample `registerNativeImageResources` build step:"
msgstr "ビルド時にすべての設定またはリソースを消費できるわけではありません。ランタイムがアクセスする必要のあるクラスパスリソースがある場合は、これらのリソースをネイティブイメージにコピーする必要があることをビルドフェーズに通知する必要があります。そのためには、リソースバンドルの場合、1 つ以上の `NativeImageResourceBuildItem` または `NativeImageResourceBundleBuildItem` を生成することによって行われます。その例を、この `registerNativeImageResources` ビルドステップのサンプルに示します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Registering Resources and ResourceBundles"
msgstr "リソースと ResourceBundle の登録"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Indicate that the /security/runtime.keys classpath resource should be copied into native image."
msgstr "/security/runtime.keys クラスパスリソースをネイティブイメージにコピーする必要があることを示します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Indicate that the `META-INF/my-descriptor.xml` resource should be copied into native image"
msgstr "`META-INF/my-descriptor.xml` リソースをネイティブイメージにコピーする必要があることを示します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Indicate that the \"jakarta.xml.bind.Messages\" resource bundle should be copied into native image."
msgstr "\"jakarta.xml.bind.Messages\"リソースバンドルがネイティブイメージにコピーされることを示します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Service files"
msgstr "サービスファイル"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"If you are using `META-INF/services` files you need to register the files as resources so that your native image can find them,\n"
"but you also need to register each listed class for reflection so they can be instantiated or inspected at run-time:"
msgstr "`META-INF/services` ファイルを使用している場合は、ネイティブイメージがそのファイルを見つけられるように、ファイルをリソースとして登録する必要があります。ただし、ランタイムでインスタンス化または検査できるように、リストされた各クラスをリフレクション用に登録する必要もあります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"`ServiceProviderBuildItem` takes a list of service implementation classes as parameters: if\n"
"you are not reading them from the service file, make sure that they correspond to the service file contents\n"
"because the service file will still be read and used at run-time. This is not a substitute for writing a service\n"
"file."
msgstr "`ServiceProviderBuildItem` は、サービス実装クラスのリストをパラメーターとして受け取ります。サービスファイルからそれらを読み取らない場合、それらがサービスファイルの内容に対応していることを確認してください。サービスファイルは、ランタイムで読み取られ、使用されるためです。これは、サービスファイルの書き込みに代わる手段ではありません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"This only registers the implementation classes for instantiation via reflection (you will not be able\n"
"to inspect its fields and methods). If you need to do that, you can do it this way:"
msgstr "これは、リフレクションを介したインスタンス化のために実装クラスのみを登録しますす (フィールドやメソッドは検査できません)。これを行う必要がある場合は、以下を実行してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"While this is the easiest way to get your services running natively, it's less efficient than scanning the implementation\n"
"classes at build time and generating code that registers them at static-init time instead of relying on reflection."
msgstr "これはサービスをネイティブに実行する最も簡単な方法ですが、ビルド時に実装クラスをスキャンし、リフレクションに依存する代わりに static-init で登録するコードを生成する方法と比べると効率的ではありません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"You can achieve that by adapting the previous build step to use a static-init recorder instead of registering\n"
"classes for reflection:"
msgstr "これは、リフレクション用のクラスを登録する代わりに、static-init レコーダを使用するように前のビルドステップを適合させることで実現できます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Object Substitution"
msgstr "オブジェクトの置換"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Objects created during the build phase that are passed into the runtime need to have a default constructor in order for them to be created and configured at startup of the runtime from the build time state. If an object does not have a default constructor you will see an error similar to the following during generation of the augmented artifacts:"
msgstr "ランタイムに渡されるビルドフェーズ中に作成されたオブジェクトは、ビルド時の状態からランタイムの起動時に作成および設定できるよう、デフォルトのコンストラクターを持っている必要があります。オブジェクトにデフォルトのコンストラクターがない場合、拡張アーティファクトの生成中に次のようなエラーが表示されます。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "DSAPublicKey Serialization Error"
msgstr "DSAPublicKey シリアル化エラー"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "There is a `io.quarkus.runtime.ObjectSubstitution` interface that can be implemented to tell Quarkus how to handle such classes. An example implementation for the `DSAPublicKey` is shown here:"
msgstr "Quarkus にそのようなクラスの処理方法を指示するために実装できる`io.quarkus.runtime.ObjectSubstitution` インターフェイスがあります。 `DSAPublicKey` の実装例を次に示します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "DSAPublicKeyObjectSubstitution Example"
msgstr "DSAPublicKeyObjectSubstitution 例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The serialize method takes the object without a default constructor and creates a `KeyProxy` that contains the information necessary to recreate the `DSAPublicKey`."
msgstr "シリアル化メソッドは、デフォルトのコンストラクターなしでオブジェクトを取得し、 `DSAPublicKey` の再作成に必要な情報を含む `KeyProxy` を作成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The deserialize method uses the `KeyProxy` to recreate the `DSAPublicKey` from its encoded form using the key factory."
msgstr "デシリアル化メソッドは `KeyProxy` を使用して、キーファクトリーでエンコードされた形式から `DSAPublicKey` を再作成します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "An extension registers this substitution by producing an `ObjectSubstitutionBuildItem` as shown in this `TestProcessor#loadDSAPublicKey` fragment:"
msgstr "エクステンションは、次の `TestProcessor#loadDSAPublicKey` フラグメントに示すように、 `ObjectSubstitutionBuildItem` を生成することでこの置換を登録します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Registering an Object Substitution"
msgstr "オブジェクト置換の登録"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Replacing Classes in the Native Image"
msgstr "ネイティブイメージにおいてクラスを置換する"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"The Graal SDK supports substitutions of classes in the native image.\n"
"An example of how one could replace the `XmlConfig/XmlData` classes with versions that have no JAXB annotation dependencies is shown in these example classes:"
msgstr "Graal SDK は、ネイティブイメージ内のクラスの置換をサポートしています。 `XmlConfig/XmlData` のクラスを、JAXB アノテーションに依存しないバージョンのクラスに置き換える方法の例を以下に示します。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Substitution of XmlConfig/XmlData Classes Example"
msgstr "Substitution of XmlConfig/XmlData クラスの例"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Ecosystem integration"
msgstr "エコシステムの統合"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"Some extensions may be private, and some may wish to be part of the\n"
"broader Quarkus ecosystem, and link:https://quarkus.io/extensions/[available for community re-use].\n"
"Inclusion in the Quarkiverse Hub is a convenient mechanism for handling\n"
"continuous testing and publication.\n"
"The link:https://hub.quarkiverse.io/home/#getting-an-extension-onboarded[Quarkiverse Hub wiki] has instructions\n"
"for on-boarding your extension."
msgstr ""
"エクステンションの中には、非公開のものもあれば、より広範な Quarkus エコシステムの一部として、\n"
"link:https://quarkus.io/extensions/[コミュニティーでの再利用を可能] にしたいものもあります。\n"
"Quarkiverse Hubに参加することは、継続的テストと公開を行う\n"
"ための便利なメカニズムです。\n"
"link:https://hub.quarkiverse.io/home/#getting-an-extension-onboarded[Quarkiverse Hub wiki] には、エクステンションの\n"
"オンボードに関する説明があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Alternatively, continuous testing and publication can be handled manually."
msgstr "または、継続的テストと公開を手動で処理することも可能です。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Continuous testing of your extension"
msgstr "エクステンションの継続的なテスト"

#: _versions/3.27/guides/writing-extensions.adoc
msgid ""
"In order to make it easy for extension authors to test their extensions daily against the latest snapshot of Quarkus, Quarkus has introduced\n"
"the notion of Ecosystem CI. The Ecosystem CI link:https://github.com/quarkusio/quarkus-ecosystem-ci/blob/main/README.adoc[README]\n"
"has all the details on how to set up a GitHub Actions job to take advantage of this capability, while this link:https://www.youtube.com/watch?v=VpbRA1n0hHQ[video] provides an overview\n"
"of what the process looks like."
msgstr "エクステンションの作者が、Quarkusの最新のスナップショットに対して自分のエクステンションを毎日簡単にテストできるようにするために、QuarkusはEcosystem CIという概念を導入しました。Ecosystem CIの link:https://github.com/quarkusio/quarkus-ecosystem-ci/blob/main/README.adoc[README]には、この機能を利用するためにGitHub Actionsジョブをセットアップする方法の詳細が記載されており、この link:https://www.youtube.com/watch?v=VpbRA1n0hHQ[ビデオ]ではそのプロセスの概要を説明しています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Publish your extension in registry.quarkus.io"
msgstr "エクステンションを registry.quarkus.io で公開"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Before publishing your extension to the xref:tooling.adoc[Quarkus tooling], make sure that the following requirements are met:"
msgstr "エクステンションを link:tooling.html[Quarkusツール]に公開する前に、以下の要件が満たされていることを確認してください。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "The xref:extension-metadata.adoc#quarkus-extension-yaml[quarkus-extension.yaml] file (in the extension's `runtime/` module) has the minimum metadata set:"
msgstr "xref:extension-metadata.adoc#quarkus-extension-yaml[quarkus-extension.yaml] ファイル（エクステンションの `runtime/` モジュール内）には、最小限のメタデータが設定されている:"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`name`"
msgstr "`name`"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "`description` (unless you have it already set in the ``runtime/pom.xml``'s `<description>` element, which is the recommended approach)"
msgstr "`description` (推奨アプローチのとおり runtime/pom.xml の `<description>` 要素にすでに設定されていない限り）"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Your extension is published in Maven Central"
msgstr "エクステンションがMaven Centralで公開されていること"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Your extension repository is configured to use the <<ecosystem-ci,Ecosystem CI>>."
msgstr "エクステンションリポジトリーは、<<ecosystem-ci,Ecosystem CI>> を使用するように設定されています。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "Then you must create a pull request adding a `your-extension.yaml` file in the `extensions/` directory in the link:https://github.com/quarkusio/quarkus-extension-catalog[Quarkus Extension Catalog]. The YAML must have the following structure:"
msgstr "それから、 link:https://github.com/quarkusio/quarkus-extension-catalog[Quarkus Extension Catalog]の `extensions/` ディレクトリに `your-extension.yaml` ファイルを追加するプルリクエストを作成する必要があります。YAMLは以下のような構造になっていなければなりません。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "When your repository contains multiple extensions, you need to create a separate file for each individual extension, not just one file for the entire repository."
msgstr "リポジトリーに複数のエクステンションが含まれている場合は、リポジトリー全体に対して 1 つのファイルを作成するのではなく、個々のエクステンションごとに個別のファイルを作成する必要があります。"

#: _versions/3.27/guides/writing-extensions.adoc
msgid "That's all. Once the pull request is merged, a scheduled job will check Maven Central for new versions and update the xref:extension-registry-user.adoc[Quarkus Extension Registry]."
msgstr "以上で完了です。プルリクエストがマージされると、スケジュールされたジョブがMaven Centralの新しいバージョンをチェックし、 link:extension-registry-user.html[Quarkus Extension Registry]をアップデートします。"
