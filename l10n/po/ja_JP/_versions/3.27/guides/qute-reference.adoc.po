msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/qute-reference.adoc
msgid "Qute Reference Guide"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Qute is a templating engine designed specifically to meet the Quarkus needs.\n"
"The usage of reflection is minimized to reduce the size of native images.\n"
"The API combines both the imperative and the non-blocking reactive style of coding.\n"
"In the development mode, all files located in the `src/main/resources/templates` folder are watched for changes and modifications are immediately visible in your application.\n"
"Furthermore, Qute attempts to detect most of the template problems at build time and fail fast."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In this guide, you will find an <<hello_world_example,introductory example>>, the description of the <<core_features,core features>> and <<quarkus_integration,Quarkus integration>> details."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Qute is primarily designed as a Quarkus extension.\n"
"It is possible to use it as a \"standalone\" library too.\n"
"However, in such case some features are not available.\n"
"In general, any feature mentioned under the <<quarkus_integration>> section is missing.\n"
"Find more information about the limitations and possibilities in the <<standalone>> section."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The Simplest Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The easiest way to try Qute is to use the convenient `io.quarkus.qute.Qute` class and call one of its `fmt()` static methods that can be used to format simple messages:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The empty expression `{}` is a placeholder that is replaced with an index-based array accessor, i.e. `{data[0]}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "You can provide a data map instead."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A builder-like API is available for more complex formatting requirements."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Note that for a \"text/html\" template the special chars are replaced with html entities by default."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"You can use any <<basic-building-blocks,building block>> in the template.\n"
"In this case, the <<if_section>> is used to render the appropriate part of the message based on the input data."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In <<quarkus_integration,Quarkus>>, the engine used to format the messages is the same as the one injected by `@Inject Engine`. Therefore, you can make use of any Quarkus-specific integration feature such as <<template_extension_methods>>, <<injecting-beans-directly-in-templates>> or even <<type-safe-message-bundles>>."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The format object returned by the `Qute.fmt(String)` method can be evaluated lazily and used e.g. as a log message:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Please read the javadoc of the `io.quarkus.qute.Qute` class for more details."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Hello World Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"In this example, we would like to demonstrate the _basic workflow_ when working with Qute templates.\n"
"Let's start with a simple \"hello world\" example.\n"
"We will always need some *template contents*:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "hello.html"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{name}` is a value expression that is evaluated when the template is rendered."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Then, we will need to parse the contents into a *template definition* Java object.\n"
"A template definition is an instance of `io.quarkus.qute.Template`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"If using Qute \"standalone\" you'll need to create an instance of `io.quarkus.qute.Engine` first.\n"
"The `Engine` represents a central point for template management with dedicated configuration.\n"
"Let's use the convenient builder:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In Quarkus, there is a preconfigured `Engine` available for injection - see <<quarkus_integration>>."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Once we have an `Engine` instance we could parse the template contents:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In Quarkus, you can simply inject the template definition. The template is automatically parsed and cached - see <<quarkus_integration>>."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Finally, create a *template instance*, set the data and render the output:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`Template.data(String, Object)` is a convenient method that creates a template instance and sets the data in one step."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`TemplateInstance.render()` triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished. However, there are also asynchronous ways to trigger the rendering and consume the results. For example, there is the `TemplateInstance.renderAsync()` method that returns `CompletionStage<String>` or `TemplateInstance.createMulti()` that returns Mutiny's `Multi<String>`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "So the workflow is simple:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Create the template contents (`hello.html`),"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Parse the template definition (`io.quarkus.qute.Template`),"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Create a template instance (`io.quarkus.qute.TemplateInstance`),"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Render the output."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `Engine` is able to cache the template definitions so that it's not necessary to parse the contents again and again. In Quarkus, the caching is done automatically."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Core Features"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Basic Building Blocks"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The dynamic parts of a template include comments, expressions, sections and unparsed character data."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Comments"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A comment starts with the sequence `{!` and ends with the sequence `!}`, e.g. `{! This is a comment !}`.\n"
"Can be multiline and may contain expressions and sections: `{! {#if true} !}`.\n"
"The content of a comment is completely ignored when rendering the output."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Expressions"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"An <<expressions,expression>> outputs an evaluated value.\n"
"It consists of one or more parts.\n"
"A part may represent simple properties: `{foo}`, `{item.name}`, and virtual methods: `{item.get(name)}`, `{name ?: 'John'}`.\n"
"An expression may also start with a namespace: `{inject:colors}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Sections"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A <<sections,section>> may contain static text, expressions and nested sections: `{#if foo.active}{foo.name}{/if}`.\n"
"The name in the closing tag is optional: `{#if active}ACTIVE!{/}`.\n"
"A section can be empty: `{#myTag image=true /}`.\n"
"Some sections support optional end tags, i.e. if the end tag is missing then the section ends where the parent section ends.\n"
"A section may also declare nested section blocks: `{#if item.valid} Valid. {#else} Invalid. {/if}` and decide which block to render."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Unparsed Character Data"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"It is used to mark the content that should be rendered but _not parsed_.\n"
"It starts with the sequence `{|`  and ends with the sequence `|}`: `{| <script>if(true){alert('Qute is cute!')};</script> |}`, and could be multi-line."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Previously, unparsed character data could start with `{[` and end with `]}`. This syntax is now removed due to common collisions with constructs from other languages."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Identifiers and Tags"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Identifiers are used in expressions and section tags.\n"
"A valid identifier is a sequence of non-whitespace characters.\n"
"However, users are encouraged to only use valid Java identifiers in expressions."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "You can use bracket notation if you need to specify an identifier that contains a dot, e.g. `{map['my.key']}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"When parsing a template document the parser identifies all _tags_.\n"
"A tag starts and ends with a curly bracket, e.g. `{foo}`.\n"
"The content of a tag must start with:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "a digit, or"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "an alphabet character, or"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "underscore, or"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "a built-in command: `#`, `!`, `@`, `/`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If it does not start with any of the above it is ignored by the parser."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Tag Examples"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Parsed: an expression that starts with underscore."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Parsed: a comment"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Ignored: starts with whitespace."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Ignored: starts with `{`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Ignored: starts with `\"`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "It is also possible to use escape sequences `\\{` and `\\}` to insert delimiters in the text. In fact, an escape sequence is usually only needed for the start delimiter, i.e. `\\\\{foo}` will be rendered as `{foo}` (no parsing/evaluation will happen)."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Removing Standalone Lines From the Template"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"By default, the parser removes standalone lines from the template output.\n"
"A *standalone line* is a line that contains at least one section tag (e.g. `{#each}` and `{/each}`), parameter declaration (e.g. `{@org.acme.Foo foo}`) or comment but no expression and no non-whitespace character.\n"
"In other words, a line that contains no section tag or a parameter declaration is *not* a standalone line.\n"
"Likewise, a line that contains an _expression_ or a _non-whitespace character_ is *not* a standalone line."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This is a standalone line and will be removed."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Not a standalone line - contains an expression and non-whitespace characters"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Not a standalone line - contains no section tag/parameter declaration"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This is a standalone line."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Default Output"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"In Quarkus, the default behavior can be disabled by setting the property `quarkus.qute.remove-standalone-lines` to `false`.\n"
"In this case, all whitespace characters from a standalone line will be printed to the output."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Output with `quarkus.qute.remove-standalone-lines=false`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"An expression is evaluated and outputs the value.\n"
"It has one or more parts, where each part represents either a property accessor (aka Field Access Expression) or a virtual method invocation (aka Method Invocation Expression)."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"When accessing the properties you can either use the dot notation or bracket notation.\n"
"In the `object.property` (dot notation) syntax, the `property` must be a <<identifiers,valid identifier>>.\n"
"In the `object[property_name]` (bracket notation) syntax, the `property_name` has to be a non-null <<literals,literal>> value."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"An expression can start with an optional namespace followed by a colon (`:`).\n"
"A valid namespace consists of alphanumeric characters and underscores.\n"
"Namespace expressions are resolved differently - see also <<expression_resolution>>."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Property Accessor Examples"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "no namespace, one part: `name`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "no namespace, two parts: `item`, `name`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "equivalent to `{item.name}` but using the bracket notation"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "namespace `global`, one part: `colors`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A part of an expression can be a _virtual method_ in which case the name can be followed by a list of comma-separated parameters in parentheses.\n"
"A parameter of a virtual method can be either a nested expression or a <<literals,literal>> value.\n"
"We call these methods _\"virtual\"_ because they do not have to be backed by a real Java method.\n"
"You can learn more about virtual methods in the <<virtual_methods,following section>>."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Virtual Method Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "no namespace, two parts - `item`, `getLabels(1)`, the second part is a virtual method with name `getLabels` and params `1`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "infix notation that can be used for virtual methods with single parameter, translated to `name.or('John')`; no namespace, two parts - `name`, `or('John')`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Supported Literals"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Literal"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Examples"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "boolean"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`true`, `false`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "null"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`null`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "string"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`'value'`, `\"string\"`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "integer"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`1`, `-5`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "long"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`1l`, `-5L`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "double"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`1D`, `-5d`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "float"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`1f`, `-5F`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Resolution"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"When evaluating expressions a list of registered <<value-resolvers,value resolvers>> is used.\n"
"The first part of the expression is always resolved against the <<current_context_object,current context object>>.\n"
"If no result is found for the first part, it's resolved against the parent context object (if available).\n"
"For an expression that starts with a namespace the current context object is found using all the available ``NamespaceResolver``s.\n"
"For an expression that does not start with a namespace the current context object is *derived from the position* of the tag.\n"
"All other parts of an expression are resolved using all ``ValueResolver``s against the result of the previous resolution."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"For example, expression `{name}` has no namespace and single part - `name`.\n"
"The \"name\" will be resolved using all available value resolvers against the current context object.\n"
"However, the expression `{global:colors}` has the namespace `global` and single part - `colors`.\n"
"First, all available ``NamespaceResolver``s will be used to find the current context object.\n"
"And afterwards value resolvers will be used to resolve \"colors\" against the context object found."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Data passed to the template instance are always accessible using the `data` namespace.\n"
"This could be useful to access data for which the key is overridden:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`item` is passed to the template instance as a data object."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Iterate over the list of derived items."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`item` is an alias for the iterated element."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Use the `data` namespace to access the `item` data object."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Current Context"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"If an expression does not specify a namespace, the _current context object_ is derived from the position of the tag.\n"
"By default, the current context object represents the data passed to the template instance.\n"
"However, sections may change the current context object.\n"
"A typical example is the <<let_section,`let`>> section that can be used to define named local variables:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The current context object inside the section is the map of resolved parameters."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The current context can be accessed via the implicit binding `this`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Built-in Resolvers"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Name"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Description"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Elvis Operator: `?:`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Outputs the default value if the previous part cannot be resolved or resolves to `null`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{person.name ?: 'John'}`, `{person.name or 'John'}`, `{person.name.or('John')}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`orEmpty`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Outputs an empty list if the previous part cannot be resolved or resolves to `null`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{pets.orEmpty.size}` outputs `0` if `pets` is not resolvable or `null`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Ternary Operator: `condition ? ifTrue : ifFalse`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Shorthand for if-then-else statement. Unlike in <<if_section>> nested operators are not supported."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{item.isActive ? item.name : 'Inactive item'}` outputs the value of `item.name` if `item.isActive` resolves to `true`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Logical AND Operator: `&&`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Outputs `true` if both parts are not `falsy` as described in the <<if_section>>.\n"
"The parameter is only evaluated if needed."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{person.isActive && person.hasStyle}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Logical OR Operator: `||`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Outputs `true` if any of the parts is not `falsy` as described in the <<if_section>>.\n"
"The parameter is only evaluated if needed."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{person.isActive || person.hasStyle}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Equals Operator: `==`/`eq`/`is`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Outputs `true` if the base object is equal to the argument."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{obj1 is obj2 ? 'Equal' : 'Inequal'}`, `{obj1 == obj2 ? 'Equal' : 'Inequal'}`, `{obj1.eq(obj2) ? 'Equal' : 'Inequal'}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The condition in a ternary operator evaluates to `true` if the value is not considered `falsy` as described in <<if_section>>."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In fact, the operators are implemented as \"virtual methods\" that consume one parameter and can be used with infix notation. For example `{person.name or 'John'}` is translated to `{person.name.or('John')}` and `{item.isActive ? item.name : 'Inactive item'}` is translated to `{item.isActive.ifTruthy(item.name).or('Inactive item')}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Arrays"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"You can iterate over elements of an array with <<loop_section>>.\n"
"Moreover, it's also possible to get the length of the specified array and access the elements directly via an index value.\n"
"Additionally, you can access the first/last `n` elements via the `take(n)/takeLast(n)` methods."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Array Examples"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Outputs the length of the array."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Outputs the first element of the array."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Outputs the second element of the array using the bracket notation."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Outputs the third element of the array via the virtual method `get()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Outputs the first two elements of the array."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Character Escapes"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"For HTML and XML templates the `'`, `\"`, `<`, `>`, `&` characters are escaped by default if a corresponding template variant is set.\n"
"For JSON templates the `\"`, `\\` and the control characters (`U+0000` through `U+001F`) are escaped by default if a corresponding template variant is set."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In Quarkus, a variant is set automatically for templates located in the `src/main/resources/templates`. By default, the `java.net.URLConnection#getFileNameMap()` is used to determine the content-type of a template file. The additional map of suffixes to content types can be set via `quarkus.qute.content-types`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If you need to render the unescaped value:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Either use the `raw` or `safe` properties implemented as extension methods of the `java.lang.Object`,"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Or wrap the `String` value in a `io.quarkus.qute.RawString`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "HTML Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`title` that resolves to `Expressions & Escapes` will be rendered as `Expressions &amp;amp; Escapes`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`paragraph` that resolves to `<p>My text!</p>` will be rendered as `<p>My text!</p>`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "By default, a template with one of the following content types is escaped: `text/html`, `text/xml`, `application/xml` and `application/xhtml+xml`. However, it's possible to extend this list via the `quarkus.qute.escape-content-types` configuration property."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "JSON Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`valueId` that resolves to `\\nA12345` will be rendered as `\\nA12345` that will result in an invalid JSON Object because of the new line inserted inside the string value for the attribute `id`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`valueName` that resolves to `\\tExpressions \\n Escapes` will be rendered as `\\\\tExpressions \\\\n Escapes`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Virtual Methods"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A virtual method is a *part of an expression* that looks like a regular Java method invocation.\n"
"It's called \"virtual\" because it does not have to match the actual method of a Java class.\n"
"In fact, like normal properties a virtual method is also handled by a value resolver.\n"
"The only difference is that for virtual methods a value resolver consumes parameters that are also expressions."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`buildName(item.name,5)` represents a virtual method with name `buildName` and two parameters: `item.name` and `5` . The virtual method could be evaluated by a value resolver generated for the following Java class:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Virtual methods are usually evaluated by value resolvers generated for <<template_extension_methods,@TemplateExtension methods>>, <<template_data,@TemplateData>> or classes used in <<typesafe_expressions,parameter declarations>>.\n"
"However, a custom value resolver that is not backed by any Java class/method can be registered as well."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A virtual method with single parameter can be called using the infix notation:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Infix Notation Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`item.price or 5` is translated to `item.price.or(5)`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Virtual method parameters can be \"nested\" virtual method invocations."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Nested Virtual Method Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`item.calculateDiscount(10)` is evaluated first and then passed as an argument to `item.subtractPrice()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Evaluation of `CompletionStage` and `Uni` Objects"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Objects that implement `java.util.concurrent.CompletionStage` and `io.smallrye.mutiny.Uni` are evaluated in a special way.\n"
"If a part of an expression resolves to a `CompletionStage`, the resolution continues once this stage is completed and the next part of the expression (if any) is evaluated against the result of the completed stage.\n"
"For example, if there is an expression `{foo.size}` and `foo` resolves to `CompletionStage<List<String>>` then `size` is resolved against the completed result, i.e. `List<String>`.\n"
"If a part of an expression resolves to a `Uni`, a `CompletionStage` is first created from `Uni` using `Uni#subscribeAsCompletionStage()` and then evaluated as described above."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Note that each `Uni#subscribeAsCompletionStage()` results in a new subscription. You might need to configure memoization of the `Uni` item or failure before it's used as template data, i.e. `myUni.memoize().indefinitely()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"It can happen that a `CompletionStage` never completes or a `Uni` emits no item/failure.\n"
"In this case, the rendering methods (such as `TemplateInstance#render()` and `TemplateInstance#createUni()`) fail after a specific timeout.\n"
"The timeout can be specified as a template instance `timeout` attribute.\n"
"If no `timeout` attribute is set the global rendering timeout is used."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In Quarkus, the default timeout can be set via the `io.quarkus.qute.timeout` configuration property. If using Qute standalone then the `EngineBuilder#timeout()` method can be used."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In previous versions, only the `TemplateInstance#render()` method honored the timeout attribute. You can use the `io.quarkus.qute.useAsyncTimeout=false` config property to preserve the old behavior and take care of the timeout yourself, for example `templateInstance.createUtni().ifNoItem().after(Duration.ofMillis(500)).fail()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "How to Identify a Problematic Part of the Template"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"It's not easy to find the problematic part of a template when a timeout occurs.\n"
"You can set the `TRACE` level for the logger `io.quarkus.qute.nodeResolve` and try to analyze the log output afterwards."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`application.properties` Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "You should see the following pair of log messages for every expression and section used in a template:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"TRACE [io.qua.qut.nodeResolve] Resolve {name} started: Template hello.html at line 8\n"
"TRACE [io.qua.qut.nodeResolve] Resolve {name} completed: Template hello.html at line 8"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If a `completed` log message is missing then you have a good candidate to explore."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Missing Properties"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"It can happen that an expression may not be evaluated at runtime.\n"
"For example, if there is an expression `{person.age}` and there is no property `age` declared on the `Person` class.\n"
"The behavior differs based on whether the <<strict_rendering>> is enabled or not."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"If enabled then a missing property will always result in a `TemplateException` and the rendering is aborted.\n"
"You can use _default values_ and _safe expressions_ in order to suppress the error."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If disabled then the special constant `NOT_FOUND` is written to the output by default."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In Quarkus, it's possible to change the default strategy via the `quarkus.qute.property-not-found-strategy` as described in the <<configuration-reference>>."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Similar errors are detected at build time if <<typesafe_expressions>> and <<typesafe_templates>> are used."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A section has a start tag that starts with `#`, followed by the name of the section such as `{#if}` and `{#each}`.\n"
"It may be empty, i.e. the start tag ends with `/`: `{#myEmptySection /}`.\n"
"Sections usually contain nested expressions and other sections.\n"
"The end tag starts with `/` and contains the name of the section (optional): `{#if foo}Foo!{/if}` or `{#if foo}Foo!{/}`.\n"
"Some sections support optional end tags, i.e. if the end tag is missing then the section ends where the parent section ends."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`#let` Optional End Tag Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Defines the local variable that can be used inside the parent `{#if}` section."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Built-in section"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Supports Optional End Tag"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#for}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "❌"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#when}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#let}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "✅"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#with}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#include}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "User-defined Tags"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#fragment}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#cached}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Parameters"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A start tag can define parameters with optional names, e.g. `{#if item.isActive}` and `{#let foo=1 bar=false}`.\n"
"Parameters are separated by one or more whitespaces.\n"
"Names are separated from the values by the equals sign.\n"
"Names and values can be prefixed and suffixed with any number of spaces, e.g. `{#let id='Foo'}` and `{#let id  = 'Foo'}` are equivalents where the name of the parameter is `id` and the value is `Foo`.\n"
"Values can be grouped using parentheses, e.g. `{#let id=(item.id ?: 42)}` where the name is `id` and the value is `item.id ?: 42`.\n"
"Sections can interpret parameter values in any way, e.g. take the value as is.\n"
"However, in most cases, the parameter value is registered as an <<expressions,expression>> and evaluated before use."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A section may contain several content *blocks*.\n"
"The \"main\" block is always present.\n"
"Additional/nested blocks also start with `#` and can have parameters too - `{#else if item.isActive}`.\n"
"A section helper that defines the logic of a section can \"execute\" any of the blocks and evaluate the parameters."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`#if` Section Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This is the main block."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Additional block."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Loop Section"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The loop section makes it possible to iterate over an instance of `Iterable`, `Iterator`, array, `Map` (element is a `Map.Entry`), `Stream`, `Integer`, `Long`, `int` and `long` (primitive value).\n"
"A `null` parameter value results in a no-op."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"This section has two flavors.\n"
"The first one is using the name `each` and `it` is an implicit alias for the iteration element."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`name` is resolved against the current iteration element."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The other form is using the name `for` and specifies the alias used to reference the iteration element:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`item` is the alias used for the iteration element."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "It's also possible to access the iteration metadata inside the loop via the following keys:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`count` - 1-based index"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`index` - zero-based index"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`hasNext` - `true` if the iteration has more elements"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`isLast` - `true` if `hasNext == false`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`isFirst` - `true` if `count == 1`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`odd` - `true` if the element's count is odd"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`even` - `true` if the element's count is even"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`indexParity` - outputs `odd` or `even` based on the count value"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"However, the keys cannot be used directly.\n"
"Instead, a prefix is used to avoid possible collisions with variables from the outer scope.\n"
"By default, the alias of an iterated element suffixed with an underscore is used as a prefix.\n"
"For example, the `hasNext` key must be prefixed with `it_` inside an `{#each}` section: `{it_hasNext}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`each` Iteration Metadata Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`it_count` represents one-based index."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`<br>` is only rendered if the iteration has more elements."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "And must be used in a form of `{item_hasNext}` inside a `{#for}` section with the `item` element alias."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`for` Iteration Metadata Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`item_count` represents one-based index."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The iteration metadata prefix is configurable either via `EngineBuilder.iterationMetadataPrefix()` for standalone Qute or via the `quarkus.qute.iteration-metadata-prefix` configuration property in a Quarkus application. Three special constants can be used:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`<alias_>` - the alias of an iterated element suffixed with an underscore is used (default)"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`<alias?>` - the alias of an iterated element suffixed with a question mark is used"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`<none>` - no prefix is used"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `for` statement also works with integers, starting from 1. In the example below, considering that `total = 3`:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "And the output will be:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A loop section may also define the `{#else}` block that is executed when there are no items to iterate:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If Section"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The `{#if}` section represents a basic control flow section.\n"
"The simplest possible version accepts a single parameter and renders the content if the condition is evaluated to `true`.\n"
"A condition without an operator evaluates to `true` if the value is not considered `falsy`, i.e. if the value is not `null`, `false`, an empty collection, an empty map, an empty array, an empty string/char sequence, an empty `java.util.Optional`/`java.util.OptionalInt`/`java.util.OptionalLong`/`java.util.OptionalDouble` or a number equal to zero."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "You can also use the following operators in a condition:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Operator"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Aliases"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Precedence"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "logical complement"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`!`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "4"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if !item.active}{/if}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Inverts the evaluated value."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "greater than"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`gt`, `>`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "3"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if item.age > 43}This item is very old.{/if}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Evaluates to `true` if `value1` is greater than `value2`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "greater than or equal to"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`ge`, `>=`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if item.price >= 100}This item is expensive.{/if}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Evaluates to `true` if `value1` is greater than or equal to `value2`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "less than"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`lt`, `<`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if item.price < 100}This item is cheap.{/if}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Evaluates to `true` if `value1` is less than `value2`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "less than or equal to"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`le`, `\\<=`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if item.age <= 43}This item is young.{/if}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Evaluates to `true` if `value1` is less than or equal to `value2`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "equals"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`eq`, `==`, `is`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "2"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if item.name eq 'Foo'}Foo item!{/if}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Evaluates to `true` if `value1` is equal to `value2`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "not equals"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`ne`, `!=`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if item.name != 'Bar'}Not a Bar item!{/if}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Evaluates to `true` if `value1` is not equal to `value2`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "logical AND (short-circuiting)"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`&&`, `and`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "1"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if item.price > 100 && item.isActive}Expensive and active item.{/if}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Evaluates to `true` if both operands evaluate to `true`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "logical OR (short-circuiting)"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`||`, `or`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if item.price > 100 || item.isActive}Expensive or active item.{/if}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Evaluates to `true` if one of the operands evaluates to `true`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "For `>`, `>=`, `<`, and `\\<=` the following rules are applied:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Neither of the operands may be `null`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If both operands are of the same type that implements the `java.lang.Comparable` then the `Comparable#compareTo(T)` method is used to perform comparison."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Otherwise, both operands are coerced to `java.math.BigDecimal` first and then the `BigDecimal#compareTo(BigDecimal)` method is used to perform comparison."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Types that support coercion include `BigInteger`, `Integer`, `Long`, `Double`, `Float` and `String`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "For `==` and `!=` the following rules are applied:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Operands are first tested using the `java.util.Objects#equals(Object, Object)` method. If it returns `true` the operands are considered equal."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Otherwise, if both operands are not `null` and at least one of them is an instance of `java.lang.Number`, then operands are coerced to `java.math.BigDecimal` and the `BigDecimal#compareTo(BigDecimal)` method is used to perform comparison."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Multiple conditions are also supported."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Multiple conditions example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The default precedence rules (higher precedence wins) can be overridden by parentheses."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Parentheses example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "You can also add any number of `else` blocks:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "When Section"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"This section is similar to Java's `switch` or Kotlin's `when` constructs.\n"
"It matches a _tested value_ against all blocks sequentially until a condition is satisfied.\n"
"The first matching block is executed.\n"
"All other blocks are ignored (this behavior differs to the Java `switch` where a `break` statement is necessary)."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Example using the `when`/`is` name aliases"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If there is exactly one parameter it's tested for equality."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"It is possible to use <<when_operators,an operator>> to specify the matching logic.\n"
"Unlike in the <<if_section>> nested operators are not supported."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`else` is block is executed if no other block matches the value."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Example using the `switch`/`case` name aliases"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`case` is an alias for `is`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A tested value that resolves to an enum is handled specifically.\n"
"The parameters of an `is`/`case` block are not evaluated as expressions but compared with the result of `toString()` invocation upon the tested value."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This block is executed if `machine.status.toString().equals(\"ON\")`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This block is executed if  `machine.status.toString().equals(\"OFF\")` or `machine.status.toString().equals(\"BROKEN\")`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "An enum constant is validated if the tested value has a type information available and resolves to an enum type."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The following operators are supported in `is`/`case` block conditions:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "not equal"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`!=`, `not`, `ne`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#is not 10}`,`{#case != 10}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#case le 10}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#is >= 10}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#is < 10}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "in"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`in`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#is in 'foo' 'bar' 'baz'}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "not in"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`ni`,`!in`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#is !in 1 2 3}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Let Section"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This section allows you to define named local variables."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Let"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The local variable is initialized with an expression that can also represent a <<literals,literal>>, i.e. `isActive=false` and `age=10`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The infix notation is only supported if parentheses are used for grouping, e.g. `price=(order.price + 10)` is equivalent to `price=order.price.plus(10)`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Variables are not available outside the `let` section."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The variables are not available outside the defining `let` section.\n"
"However, the end tag is optional, if missing then the section ends where the parent section ends."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Let with optional end tag"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The local variable `price` is initialized with expression `item.price`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Variable `price` is not available outside the `let` section."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If a key of a section parameter, such as the name of the local variable, ends with a `?`, then the local variable is only set if the key without the `?` suffix resolves to `null` or _\"not found\"_:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`true` is effectively a _default value_ that is only used if the parent scope does not define `enabled` already."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`enabled?=true` is a short version of `enabled=enabled.or(true)`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This section tag is also registered under the `set` alias:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "With Section"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"This section can be used to set the current context object.\n"
"This could be useful to simplify the template structure:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `name` will be resolved against the `item.parent`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `description` will be also resolved against the `item.parent`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Note that the `with` section should not be used in <<typesafe_templates>> or templates that define <<typesafe_expressions>>.\n"
"The reason is that it prevents Qute from validating the nested expressions.\n"
"If possible, replace it with the `{#let}` section which declares an explicit binding:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This section might also come in handy when we'd like to avoid multiple expensive invocations:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`this` is the result of `item.callExpensiveLogicToGetTheValue(1,'foo',bazinga)`. The method is only invoked once even though the result may be used in multiple expressions."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Include Section"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This section can be used to include another template and possibly override some parts of the template (see the _template inheritance_ below)."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Simple Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Include a template with id `foo`. The included template can reference data from the current context."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "It's also possible to define optional parameters that can be used in the included template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"By default, the first unnamed parameter represents the id of a template that should be included.\n"
"And it is taken as is.\n"
"For example, `{#include bar/foo /}` includes a template with id `bar/foo`; i.e. `src/main/resources/templates/bar/foo.html` could be matched.\n"
"However, it is also possible to supply the template id dynamically.\n"
"Just add the `_id` parameter to the tag.\n"
"In this case, the argument value of the `_id` parameter represents an expression that is resolved and the result represents the template id.\n"
"For example, `{#include _id=bar.foo /}` means that `bar.foo` is first resolved and then the resulting template id is used."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "_Template inheritance_ makes it possible to reuse template layouts."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template \"base\""
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`insert` sections are used to specify parts that could be overridden by a template that includes the given template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "An `insert` section may define the default content that is rendered if not overridden. If there is no name supplied then the main block of the relevant `{#include}` section is used."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template \"detail\""
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`include` section is used to specify the extended template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Nested blocks are used to specify the parts that should be overridden."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The content of the main block is used for an `{#insert}` section with no name parameter specified."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Section blocks can also define an optional end tag - `{/title}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"User-defined tags can be used to include a _tag template_, optionally pass some arguments and possibly override some parts of the template.\n"
"Let's suppose we have a tag template called `itemDetail.html`:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`showImage` is a named parameter."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`it` is a special key that is replaced with the first unnamed parameter of the tag."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "(optional) `nested-content` is a special key that will be replaced by the content of the tag."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"In Quarkus, all files from the `src/main/resources/templates/tags` are registered and monitored automatically.\n"
"For Qute standalone, you need to put the parsed template under the name `itemDetail.html` and register a relevant `UserTagSectionHelper` to the engine:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Then, we can call the tag like this:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`item` is resolved to an iteration element and can be referenced using the `it` key in the tag template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Tag content injected using the `nested-content` key in the tag template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"By default, a tag template cannot reference the data from the parent context.\n"
"Qute executes the tag as an _isolated_ template, i.e. without access to the context of the template that calls the tag.\n"
"However, sometimes it might be useful to change the default behavior and disable the isolation.\n"
"In this case, just add `_isolated=false` or `_unisolated` argument to the call site, for example `{#itemDetail item showImage=true _isolated=false /}` or `{#itemDetail item showImage=true _unisolated /}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Arguments"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Named arguments can be accessed directly in the tag template.\n"
"However, the first argument does not need to define a name, and it can be accessed using the `it` alias.\n"
"Furthermore, if an argument does not have a name defined and the value is a single identifier, such as `foo`, then the name is defaulted to the value identifier, e.g. `{#myTag foo /}` becomes `{#myTag foo=foo /}`.\n"
"In other words, the argument value `foo` is resolved and can be accessed using `{foo}` in the tag template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If an argument does not have a name and the value is a single word string literal , such as `\"foo\"`, then the name is defaulted and quotation marks are removed, e.g. `{#myTag \"foo\" /}` becomes `{#myTag foo=\"foo\" /}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`io.quarkus.qute.UserTagSectionHelper.Arguments` metadata are accessible in a tag using the `_args` alias."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`_args.size` - returns the actual number of arguments passed to a tag"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`_args.empty`/`_args.isEmpty` - returns `true` if no arguments are passed"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`_args.get(String name)` - returns the argument value of the given name or `null`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`_args.filter(String...)` - returns the arguments matching the given names"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`_args.filterIdenticalKeyValue` - returns the arguments with the name equal to the value; typically `foo` from `{#test foo=\"foo\" bar=true}` or `{#test \"foo\" bar=true /}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`_args.skip(String...)` - returns only the arguments that do not match the given names"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`_args.skipIdenticalKeyValue` - returns only the arguments with the name not equal to the value; typically `bar` from `{#test foo=\"foo\" bar=true /}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`_args.skipIt` - returns all arguments except for the first unnamed argument; typically `bar` from `{#test foo bar=true /}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`_args.asHtmlAttributes` - renders the arguments as HTML attributes; e.g. `foo=\"true\" readonly=\"readonly\"`; the arguments are sorted by name in alphabetical order and the `'`, `\"`, `<`, `>`, `&` characters are escaped"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`_args` is also iterable of `java.util.Map.Entry`: `{#each _args}{it.key}={it.value}{/each}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "For example, we can call the user tag defined below with `{#test 'Martin' readonly=true /}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`tags/test.html`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`it` is replaced with the first unnamed parameter of the tag."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`readonly` is a named parameter."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`_args` represents arguments metadata."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The result would be:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Inheritance"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "User tags can also make use of the template inheritance in the same way as regular `{#include}` sections do."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Tag `myTag`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Tag Call Site"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The result would be something like `<p>This is my custom title!</p>`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Fragments"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A fragment represents a part of a template that can be treated as a separate template, i.e. rendered separately.\n"
"One of the main motivations to introduce this feature was the support of use cases like https://htmx.org/essays/template-fragments/[htmx fragments]."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Fragments can be defined with the `{#fragment}` section.\n"
"Each fragment has an identifier that can only consist of alphanumeric characters and underscores."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Note that a fragment identifier must be unique in a template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Fragment Definition in `item.html`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Defines a fragment with identifier `item_aliases`. Note that only alphanumeric characters and underscores can be used in the identifier. The name of the first parameter can be omitted - `{#fragment item_aliases}` is fine too."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "You can obtain a fragment programmatically via the `io.quarkus.qute.Template.getFragment(String)` method."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Obtaining a Fragment"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Obtains the template fragment with identifier `item_aliases`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Make sure the data are set correctly."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The snippet above should render something like:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In Quarkus, it is also possible to define a <<type_safe_fragments,type-safe fragment>>."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"You can also include a fragment with an `{#include}` section inside another template or the template that defines the fragment.\n"
"A fragment can be also used in expressions with the `frg:`/`fragment:` namespaces."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Including a Fragment in `user.html`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A template identifier that contains a dollar sign `$` denotes a fragment. The `item$item_aliases` value is translated as: _Use the fragment `item_aliases` from the template `item`._"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `aliases` parameter is used to pass the relevant data. We need to make sure that the data are set correctly. In this particular case the fragment will use the expression `user.aliases` as the value of `aliases` in the `{#for alias in aliases}` section."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `{frg:username}` expression outputs the fragment content. `frg:` can be replaced with `fragment:`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If you want to reference a fragment from the same template, skip the part before `$`, i.e. something like `{#include $item_aliases /}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "You can specify `{#include item$item_aliases _ignoreFragments=true /}` in order to disable this feature, i.e. a dollar sign `$` in the template identifier does not result in a fragment lookup."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Hidden Fragments (Capture)"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"By default, a fragment is normally rendered as a part of the original template.\n"
"However, sometimes it might be useful to mark a fragment as _hidden_.\n"
"The regular fragment section has the `capture` alias that implies a hidden fragment.\n"
"Alternatively, you can \"hide\" a fragment either with `rendered=false` or `_hidden` parameters.\n"
"An interesting use case could be a fragment that can be used multiple-times inside the template that defines it."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Hidden Fragment Definition in `item.html`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Defines a hidden fragment with identifier `strong`.\n"
"`{#capture strong}` can be replaced with `{#fragment strong rendered=false}` or `{#fragment strong _hidden}`.\n"
"The `rendered` parameter can use any expression, e.g. `{#fragment strong rendered=config.isRendered}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Include the fragment `strong` and pass the value.\n"
"Note the syntax `$strong` which is translated to include the fragment `strong` from the current template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A namespace resolver can be used to access a hidden fragment too. `capture:` can be replaced with `cap:`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`param:val = 'information'` is used to pass a named parameter to the fragment."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The snippet above renders something like:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In Quarkus, the namespace resolvers are automatically registered for namespaces `frg`, `fragment`, `cap` and `capture`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Eval Section"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"This section can be used to parse and evaluate a template dynamically.\n"
"The behavior is very similar to <<include_helper>> but:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The template content is passed directly, i.e. not obtained via an `io.quarkus.qute.TemplateLocator`,"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "It's not possible to override parts of the evaluated template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The result of `myData.template` will be used as the template.\n"
"The template is executed with the <<current_context_object>>, i.e. can reference data from the template it's included into."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "It's also possible to define optional parameters that can be used in the evaluated template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The content of the section is always ignored."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The evaluated template is parsed and evaluated every time the section is executed.\n"
"In other words, it is not possible to cache the parsed value to conserve resources and optimize performance."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Cached Section"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Sometimes it's practical to cache parts of the template that rarely change.\n"
"In order to use the caching capability, register and configure the built-in `io.quarkus.qute.CacheSectionHelper.Factory`:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If the `quarkus-cache` extension is present in a Quarkus application then the `CacheSectionHelper` is registered and configured _automatically_. The name of the cache is `qute-cache`. It can be configured <<cache#configuring-the-underlying-caching-provider,in a standard way>> and even managed programmatically via `@Inject @CacheName(\"qute-cache\") Cache`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Then, the `{#cached}` section can be used in a template:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If the `key` param is not used then all clients of the template share the same cached value."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This part of the template will be cached and the `{service.findResult}` expression is only evaluated when a cache entry is missing/invalidated."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `key` param is set and so a different cached value is used for each result of the `{currentUser.username}` expression."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "When using cache it's very often important to have the option to invalidate a cache entry by the specific key. In Qute the key of a cache entry is a `String` that consist of the template name, line and column of the starting `{#cached}` tag and the optional `key` parameter: `{TEMPLATE}:{LINE}:{COLUMN}_{KEY}`. For example, `foo.html:10:1_alpha` is a key for the cached section in a template `foo.html`, the `{#cached}` tag is placed on the line 10, column 1. And the optional `key` parameter resolves to `alpha`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Rendering Output"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"`TemplateInstance` provides several ways to trigger the rendering and consume the result.\n"
"The most straightforward approach is represented by `TemplateInstance.render()`.\n"
"This method triggers a synchronous rendering, i.e. the current thread is blocked until the rendering is finished, and returns the output.\n"
"By contrast, `TemplateInstance.renderAsync()` returns a `CompletionStage<String>` which is completed when the rendering is finished."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`TemplateInstance.renderAsync()` Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Register a callback that is executed once the rendering is finished."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"There are also two methods that return https://smallrye.io/smallrye-mutiny/[Mutiny] types.\n"
"`TemplateInstance.createUni()` returns a new `Uni<String>` object.\n"
"If you call `createUni()` the template is not rendered right away.\n"
"Instead, every time `Uni.subscribe()` is called a new rendering of the template is triggered."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`TemplateInstance.createUni()` Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"`TemplateInstance.createMulti()` returns a new `Multi<String>` object.\n"
"Each item represents a part/chunk of the rendered template.\n"
"Again, `createMulti()` does not trigger rendering.\n"
"Instead, every time a computation is triggered by a subscriber, the template is rendered again."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`TemplateInstance.createMulti()` Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The template rendering is divided in two phases. During the first phase, which is asynchronous, all expressions in the template are resolved and a _result tree_ is built. In the second phase, which is synchronous, the result tree is _materialized_, i.e. one by one the result nodes emit chunks that are consumed/buffered by the specific consumer."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Engine Configuration"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Value Resolvers"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Value resolvers are used when evaluating expressions.\n"
"First the resolvers that apply to the given `EvalContext` are filtered.\n"
"Then the resolver with _highest priority_ is used to resolve the data.\n"
"If a `io.quarkus.qute.Results.NotFound` object is returned then the next available resolver is used instead.\n"
"However, `null` return value is considered a valid result."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A custom `io.quarkus.qute.ValueResolver` can be registered programmatically via `EngineBuilder.addValueResolver()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`ValueResolver` Builder Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In Quarkus, the <<engine-customization,`@EngineConfiguration`>> annotation can be used to register a `ValueResolver` implemented as a CDI bean."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Keep in mind that the reflection-based value resolver has priority `-1` and the max priority value for resolvers generated from <<template_data,`@TemplateData`>> and <<typesafe_expressions,type-safe expressions>> is `10`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template Locator"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A template can be either registered manually or automatically via a template locator.\n"
"The locators are used whenever the `Engine.getTemplate()` method is called, and the engine has no template for a given id stored in the cache.\n"
"The locator is responsible for using the correct character encoding when reading the contents of a template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"In Quarkus, all templates from the `src/main/resources/templates` are located automatically and the encoding set via `quarkus.qute.default-charset` (UTF-8 by default) is used.\n"
"Custom locators can be <<template-locator-registration,registered>> by using the `@Locate` annotation."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Content Filters"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Content filters can be used to modify the template contents before parsing."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Content Filter Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Escape all occurrences of `${`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Strict Rendering"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The strict rendering enables the developers to catch insidious errors caused by typos and invalid expressions.\n"
"If enabled then any expression that cannot be resolved, i.e. is evaluated to an instance of `io.quarkus.qute.Results.NotFound`, will always result in a `TemplateException` and the rendering is aborted.\n"
"A `NotFound` value is considered an error because it basically means that no value resolver was able to resolve the expression correctly."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`null` is a valid value though. It is considered `falsy` as described in <<if_section>> and does not produce any output."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Strict rendering is enabled by default.\n"
"However, you can disable this functionality via `io.quarkus.qute.EngineBuilder.strictRendering(boolean)`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In Quarkus, a dedicated config property can be used instead: `quarkus.qute.strict-rendering`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"If you really need to use an expression which can potentially lead to a \"not found\" error, you can use _default values_ and _safe expressions_ in order to suppress the error.\n"
"A default value is used if the previous part of an expression cannot be resolved or resolves to `null`.\n"
"You can use the elvis operator to output the default value: `{foo.bar ?: 'baz'}`, which is effectively the same as the following virtual method: `{foo.bar.or('baz')}`.\n"
"A safe expression ends with the `??` suffix and results in `null` if the expression cannot be resolved.\n"
"It can be very useful e.g. in `{#if}` sections: `{#if valueNotFound??}Only rendered if valueNotFound is truthy!{/if}`.\n"
"In fact, `??` is just a shorthand notation for `.or(null)`, i.e. `{#if valueNotFound??}` becomes `{#if valueNotFound.or(null)}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Quarkus Integration"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If you want to use Qute in your Quarkus application, add the following dependency to your project:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"In Quarkus, a preconfigured engine instance is provided and available for injection - a bean with scope `@ApplicationScoped`, bean type `io.quarkus.qute.Engine` and qualifier `@Default` is registered automatically.\n"
"Moreover, all templates located in the `src/main/resources/templates` directory are validated and can be easily injected."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A valid template file name is a sequence of non-whitespace characters. For example, a template file named `foo and bar.html` will be ignored."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If there is no `Location` qualifier provided, the field name is used to locate the template. In this particular case, the container will attempt to locate a template with path `src/main/resources/templates/items.html`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `Location` qualifier instructs the container to inject a template from a path relative from `src/main/resources/templates`. In this case, the full path is `src/main/resources/templates/detail/items2_v1.html`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Inject the configured `Engine` instance."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Engine Customization"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Additional components can be registered manually via `EngineBuilder` methods in a CDI observer method at runtime:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"However, in this particular case the section helper factory is ignored during validation at build time.\n"
"If you want to register a section that participates in validation of templates at build time then use the convenient `@EngineConfiguration` annotation:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A `SectionHelperFactory` annotated with `@EngineConfiguration` is used during validation of templates at build time and automatically registered at runtime (a) as a section factory and (b) as a CDI bean."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A CDI bean instance is used at runtime - this means that the factory can define injection points"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Validate that `foo` parameter is always present; e.g. `{#custom foo='bar' /}` is ok but `{#custom /}` results in a build failure."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Use the injected `Service` during rendering."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `@EngineConfiguration` annotation can be also used to register `ValueResolver`, `NamespaceResolver` and `ParserHook` components."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template Locator Registration"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The easiest way to register <<template-locator,template locators>> is to make them CDI beans.\n"
"As the custom locator is not available during the build time when a template validation is done, you need to disable the validation via the `@Locate` annotation."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Custom Locator Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A template named `bar.html` is located by the custom locator at runtime."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A regular expression `foo.*` disables validation for templates whose name is starting with `foo`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Injection fields are resolved as template locators annotated with `@Locate` are registered as singleton session beans."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template Variants"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Sometimes it's useful to render a specific variant of the template based on the content negotiation.\n"
"This can be done by setting a special attribute via `TemplateInstance.setVariant()`:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"When using `quarkus-rest-qute` or `quarkus-resteasy-qute` the content negotiation is performed automatically.\n"
"For more information, see the <<rest_integration>> section."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Injecting Beans Directly In Templates"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A CDI bean annotated with `@Named` can be referenced in any template through `cdi` and/or `inject` namespaces:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "First, a bean with name `personService` is found and then used as the base object."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "First, a bean with name `foo` is found and then used as the base object."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`@Named @Dependent` beans are shared across all expressions in a template for a single rendering operation, and destroyed after the rendering finished."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"All expressions with `cdi` and `inject` namespaces are validated during build.\n"
"For the expression `cdi:personService.findPerson(10).name`, the implementation class of the injected bean must either declare the `findPerson` method or a matching <<template_extension_methods,template extension method>> must exist.\n"
"For the expression `inject:foo.price`, the implementation class of the injected bean must either have the `price` property (e.g. a `getPrice()` method) or a matching <<template_extension_methods,template extension method>> must exist."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A `ValueResolver` is also generated for all beans annotated with `@Named` so that it's possible to access its properties without reflection."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If your application serves xref:http-reference.adoc[HTTP requests] you can also inject the current `io.vertx.core.http.HttpServerRequest` via the `inject` namespace, e.g. `{inject:vertxRequest.getParam('foo')}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Sometimes it may be necessary to access public methods and properties of a CDI bean that is not annotated with `@Named`.\n"
"However, if you don't control the source of the bean it is not possible to add the `@Named` annotation.\n"
"Nevertheless, it is possible to create an intermediate CDI bean annotated with `@Named`.\n"
"This intermediate bean can inject the bean in question and make it accessible.\n"
"A Java record is a very convenient way to define such an intermediate CDI bean."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If no name is explicitly specified by the `value` member the https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1#default_name[default name is assigned] - the simple name of the bean class, after converting the first character to lower case. In this particular case, the default name is `userData`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `@Singleton` scope is added automatically."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "All parameters of the canonical constructor are injection points. The accessor methods can be used to obtain the injected bean."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "And then in a template you can simply use `{cdi:userData.info}` or `{cdi:userData.username}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Type-safe Expressions"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Template expressions can be optionally type-safe.\n"
"Which means that an expression is validated against the existing Java types and template extension methods.\n"
"If an invalid/incorrect expression is found then the build fails."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "For example, if there is an expression `item.name` where `item` maps to `org.acme.Item` then `Item` must have a property `name` or a matching template extension method must exist."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"An optional _parameter declaration_ is used to bind a Java type to expressions whose first part matches the parameter name.\n"
"Parameter declarations are specified directly in a template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A Java type should be always identified with a _fully qualified name_ unless it's a JDK type from the `java.lang` package - in this case, the package name is optional.\n"
"Parameterized types are supported, however wildcards are always ignored - only the upper/lower bound is taken into account.\n"
"For example, the parameter declaration `{@java.util.List<? extends org.acme.Foo> list}` is recognized as `{@java.util.List<org.acme.Foo> list}`.\n"
"Type variables are not handled in a special way and should never be used."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Parameter Declaration Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Parameter declaration - maps `foo` to `org.acme.Foo`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Not validated - not matching a param declaration."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This expression is validated. `org.acme.Foo` must have a property `message` or a matching template extension method must exist."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Likewise, the Java type of the object resolved from `foo.message` must have a property `toLowerCase` or a matching template extension method must exist."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A value resolver is automatically generated for all types used in parameter declarations so that it's possible to access its properties without reflection."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Method parameters of <<typesafe_templates,type-safe templates>> are automatically turned into parameter declarations."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Note that sections can override names that would otherwise match a parameter declaration:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Validated against `org.acme.Foo`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Not validated - `foo` is overridden in the loop section."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A parameter declaration may specify the _default value_ after the key.\n"
"The key and the default value are separated by an equals sign: `{@int age=10}`.\n"
"The default value is used in the template if the parameter key resolves to `null` or is not found."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"For example, if there's a parameter declaration `{@String foo=\"Ping\"}` and `foo` is not found then you can use `{foo}` and the output will be `Ping`.\n"
"On the other hand, if the value is set (e.g. via `TemplateInstance.data(\"foo\", \"Pong\")`) then the output of `{foo}` will be `Pong`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The type of a default value must be assignable to the type of the parameter declaration. For example, see the incorrect parameter declaration that results in a build failure: `{@org.acme.Foo foo=1}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The default value is actually an <<expressions,expression>>. So the default value does not have to be a literal (such as `42` or `true`). For example, you can leverage the `@TemplateEnum` and specify an enum constant as a default value of a parameter declaration: `{@org.acme.MyEnum myEnum=MyEnum:FOO}`.\n"
"However, the infix notation is not supported in default values unless the parentheses are used for grouping, e.g. `{@org.acme.Foo foo=(foo1 ?: foo2)}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The type of a default value is not validated in <<standalone,Qute standalone>>."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "More Parameter Declarations Examples"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A primitive type."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`String` is replaced with `java.lang.String`: `{@java.util.List<java.lang.String> strings}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The wildcard is ignored and the upper bound is used instead: `{@java.util.Map<String,Number>}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The wildcard is ignored and the `java.lang.Object` is used instead: `{@java.util.Optional<java.lang.Object>}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The type is `java.lang.String`, the key is `name` and the default value is `Quarkus`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Type-safe Templates"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"You can define type-safe templates in your Java code.\n"
"Parameters of type-safe templates are automatically turned into _parameter declarations_ that are used to bind <<typesafe_expressions>>.\n"
"The type-safe expressions are then validated at build time."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "There are two ways to define a type-safe template:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Annotate a class with `@io.quarkus.qute.CheckedTemplate` and all its `static native` methods will be used to define type-safe templates and the list of parameters they require."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Use a Java record that implements `io.quarkus.qute.TemplateInstance`; the record components represent the template parameters and `@io.quarkus.qute.CheckedTemplate` can be optionally used to configure the template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Nested Type-safe Templates"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If using <<rest_integration,templates in Jakarta REST resources>>, you can rely on the following convention:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Organise your template files in the `/src/main/resources/templates` directory, by grouping them into one directory per resource class. So, if\n"
"your `ItemResource` class references two templates `hello` and `goodbye`, place them at `/src/main/resources/templates/ItemResource/hello.txt`\n"
"and `/src/main/resources/templates/ItemResource/goodbye.txt`. Grouping templates per resource class makes it easier to navigate to them."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In each of your resource class, declare a `@CheckedTemplate static class Template {}` class within your resource class."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Declare one `public static native TemplateInstance method();` per template file for your resource."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Use those static methods to build your template instances."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "ItemResource.java"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Declare a method that gives us a `TemplateInstance` for `templates/ItemResource/item.html` and declare its `Item item` parameter so we can validate the template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `item` parameter is automatically turned into a <<typesafe_expressions,parameter declaration>> and so all expressions that reference this name will be validated."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Make the `Item` object accessible in the template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "By default, the templates defined in a class annotated with `@CheckedTemplate` can only contain type-safe expressions, i.e. expressions that can be validated at build time. You can use `@CheckedTemplate(requireTypeSafeExpressions = false)` to relax this requirement."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Top-level Type-safe Templates"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "You can also declare a top-level Java class annotated with `@CheckedTemplate`:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Top-level checked templates"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This declares a template with path `templates/hello.txt`. The `name` parameter is automatically turned into a  <<typesafe_expressions,parameter declaration>>, so that all expressions referencing this name will be validated."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Then declare one `public static native TemplateInstance method();` per template file.\n"
"Use those static methods to build your template instances:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "HelloResource.java"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template Records"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A Java record that implements `io.quarkus.qute.TemplateInstance` denotes a type-safe template.\n"
"The record components represent the template parameters and `@io.quarkus.qute.CheckedTemplate` can be optionally used to configure the template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Declares a type-safe template with the Java record. The template is located at `/src/main/resources/templates/HelloResource/Hello.html`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Instantiate the record and use it as an ordinary `TemplateInstance`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Customized Template Path"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The path of a type-safe template (`@CheckedTemplate` method or record) consists of a _base path_ and a _defaulted name_.\n"
"The _base path_ is supplied by the `@CheckedTemplate#basePath()`.\n"
"By default, the simple name of the enclosing class for a nested static class or an empty string for a top level class is used.\n"
"The _defaulted name_ is derived by the strategy specified in `@CheckedTemplate#defaultName()`.\n"
"By default, the name of the `@CheckedTemplate` method/record is used as is."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A template record that is not annotated with `@CheckedTemplate` is treated as if it was annotated with `@CheckedTemplate` with default values."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Customized Template Path Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The template path for this method will be `items/item-and-order`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Type-safe Fragments"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"You can also define a type-safe <<fragments,fragment>> of a type-safe template in your Java code.\n"
"There are two ways to define a type-safe fragment:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A _native static_ method annotated with `@CheckedTemplate`, with a name that contains a dollar sign `$`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A Java record that implements `io.quarkus.qute.TemplateInstance` and its name contains a dollar sign `$`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The name of the fragment is derived from the annotated member name.\n"
"The part before the last occurrence of a dollar sign `$` is the method name of the related type-safe template.\n"
"The part after the last occurrence of a dollar sign is the fragment identifier.\n"
"The strategy defined by the relevant `CheckedTemplate#defaultName()` is honored when constructing the defaulted names."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Type-safe Fragment Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Quarkus validates at build time that each template that corresponds to the `Templates#items()` contains a fragment with identifier `item`. Moreover, the parameters of the fragment method are validated too. In general, all type-safe expressions that are found in the fragment and that reference some data from the original/outer template require a specific parameter to be present."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Fragment Definition in `items.html`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Defines a fragment with identifier `item`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `{item.name}` expression implies that the `Templates#items$item()` method must declare a parameter of name `item` and type `org.acme.Item`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Type-safe Fragment Call Site Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "You can specify `@CheckedTemplate#ignoreFragments=true` in order to disable this feature, i.e. a dollar sign `$` in the method name will not result in a checked fragment method."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template Contents"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"It is also possible to specify the contents for a type-safe template directly in your Java code.\n"
"A `static native` method of a class annotated with `@CheckedTemplate` or a Java record that implements `TemplateInstance` may be annotated with `@io.quarkus.qute.TemplateContents`.\n"
"The annotation value is used as the template contents.\n"
"The template id/path is derived from the type-safe template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template Contents Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Defines the contents for the type-safe template represented by the `Hello` record. The derived template id is `HelloResource/Hello`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template Extension Methods"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Extension methods can be used to extend the data classes with new functionality (to extend the set of accessible properties and methods) or to resolve expressions for a specific <<namespace_extension_methods,namespace>>.\n"
"For example, it is possible to add _computed properties_ and _virtual methods_."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A value resolver is automatically generated for a method annotated with `@TemplateExtension`.\n"
"If a class is annotated with `@TemplateExtension` then a value resolver is generated for every _non-private static method_ declared on the class.\n"
"Method-level annotations override the behavior defined on the class.\n"
"Methods that do not meet the following requirements are ignored."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A template extension method:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "must not be `private`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "must be static,"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "must not return `void`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If there is no namespace defined the class of the first parameter that is not annotated with `@TemplateAttribute` is used to match the base object. Otherwise, the namespace is used to match an expression."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Matching by Name"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The method name is used to match the property name by default."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Extension Method Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This method matches an expression with base object of the type `Item.class` and the `discountedPrice` property name."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This template extension method makes it possible to render the following template:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`item` is resolved to an instance of `org.acme.Item`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "However, it is possible to specify the matching name with `matchName()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`TemplateExtension#matchName()` Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A special constant - `TemplateExtension#ANY` - can be used to specify that the extension method matches any name."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`TemplateExtension#ANY` Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "An additional string method parameter is used to pass the actual property name."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "It's also possible to match the name against a regular expression specified in `matchRegex()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`TemplateExtension#matchRegex()` Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Finally, `matchNames()` can be used to specify a collection of matching names.\n"
"An additional string method parameter is mandatory as well."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`TemplateExtension#matchNames()` Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Superfluous matching conditions are ignored. The conditions sorted by priority in descending order are:\n"
"`matchRegex()`, `matchNames()` and `matchName()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Method Parameters"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"An extension method may declare parameters.\n"
"If no namespace is specified then the first parameter that is not annotated with `@TemplateAttribute` is used to pass the base object, i.e. `org.acme.Item` in the first example.\n"
"If matching any name or using a regular expression, then a string method parameter (not not annotated with `@TemplateAttribute`) needs to be used to pass the property name.\n"
"Parameters annotated with `@TemplateAttribute` are obtained via `TemplateInstance#getAttribute()`.\n"
"All other parameters are treated as virtual method parameters and resolved when rendering the template and passed to the extension method."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Multiple Parameters Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This method matches an expression with base object of the type `BigDecimal.class`, with the `scale()`/`setScale()` virtual method name and two virtual method parameters - `scale` and `mode`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`item.discountedPrice` is resolved to an instance of `BigDecimal`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Namespace Extension Methods"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"If `TemplateExtension#namespace()` is specified then the extension method is used to resolve expressions with the given <<expressions,namespace>>.\n"
"Template extension methods that share the same namespace are grouped in one resolver ordered by `TemplateExtension#priority()`.\n"
"The first matching extension method is used to resolve an expression."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Namespace Extension Method Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "These extension methods can be used as follows."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The output is `Hello world!`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The output is `olleh`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Built-in Template Extensions"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Quarkus provides a set of built-in extension methods."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Maps"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`keys` or `keySet`: Returns a Set view of the keys contained in a map"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#for key in map.keySet}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`values`: Returns a Collection view of the values contained in a map"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#for value in map.values}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`size`: Returns the number of key-value mappings in a map"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{map.size}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`isEmpty`: Returns true if a map contains no key-value mappings"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if map.isEmpty}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`get(key)`: Returns the value to which the specified key is mapped"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{map.get('foo')}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A map value can be also accessed directly: `{map.myKey}`. Use the bracket notation for keys that are not legal identifiers: `{map['my key']}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Lists"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`get(index)`: Returns the element at the specified position in a list"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{list.get(0)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`reversed`: Returns a reversed iterator over a list"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#for r in recordsList.reversed}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`take`: Returns the first `n` elements from the given list; throws an `IndexOutOfBoundsException` if `n` is out of range"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#for r in recordsList.take(3)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`takeLast`: Returns the last `n` elements from the given list; throws an `IndexOutOfBoundsException` if `n` is out of range"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#for r in recordsList.takeLast(3)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`first`: Returns the first element of the given list; throws an `NoSuchElementException` if the list is empty"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{recordsList.first}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`last`: Returns the last element of the given list; throws an `NoSuchElementException` if the list is empty"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{recordsList.last}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A list element can be accessed directly via an index: `{list.10}` or even `{list[10]}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Integer Numbers"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`mod`: Modulo operation"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{#if counter.mod(5) == 0}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`plus` or `+`: Addition"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{counter + 1}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{age plus 10}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{age.plus(10)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`minus` or `-`: Subtraction"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{counter - 1}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{age minus 10}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{age.minus(10)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Strings"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`fmt` or `format`: Formats the string instance via `java.lang.String.format()`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{myStr.fmt(\"arg1\",\"arg2\")}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{myStr.format(locale,arg1)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`+`: Infix notation for concatenation, works with `String` and `StringBuilder` base objects"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{item.name + '_' + mySuffix}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{name + 10}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`str:['<value>']`: Returns the string value, e.g. to easily concatenate another string value"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:['/path/to/'] + fileName}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`str:fmt` or `str:format`: Formats the supplied string value via `java.lang.String.format()`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:format(\"Hello %s!\",name)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:fmt(locale,'%tA',now)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:fmt('/path/to/%s', fileName)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`str:concat`: Concatenates the string representations of the specified arguments."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:concat(\"Hello \",name,\"!\")}` yields `Hello Foo!` if `name` resolves to `Foo`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:concat('/path/to/', fileName)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`str:join`: Joins the string representations of the specified arguments together with a delimiter."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:join('_','Qute','is','cool')}` yields `Qute_is_cool`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`str:builder`: Returns a new string builder."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:builder('Qute').append(\"is\").append(\"cool!\")}` yields `Qute is cool!`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:builder('Qute') + \"is\" + whatisqute + \"!\"}` yields `Qute is cool!` if `whatisqute` resolves to `cool`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`str:eval`: Evaluates the string representation of the first argument as a template in the <<current_context_object,current context>>."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:eval('Hello {name}!')` yields `Hello lovely!` if `name` resolves to `lovely`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:eval(myTemplate)}` yields `Hello lovely!` if `myTemplate` resolves to `Hello {name}!` and `name` resolves to `lovely`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{str:eval('/path/to/{fileName}')}` yields `/path/to/file.txt` if `fileName` resolves to `file.txt`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Config"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`config:<name>` or `config:[<name>]`: Returns the config value for the given property name"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{config:foo}` or `{config:['property.with.dot.in.name']}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`config:property(name)`: Returns the config value for the given property name; the name can be obtained dynamically by an expression"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{config:property('quarkus.foo')}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{config:property(foo.getPropertyName())}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`config:boolean(name)`: Returns the config value for the given property name as a boolean; the name can be obtained dynamically by an expression"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{config:boolean('quarkus.foo.boolean') ?: 'Not Found'}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{config:boolean(foo.getPropertyName()) ?: 'property is false'}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`config:integer(name)`: Returns the config value for the given property name as an integer; the name can be obtained dynamically by an expression"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{config:integer('quarkus.foo')}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{config:integer(foo.getPropertyName())}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Time"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`format(pattern)`: Formats temporal objects from the `java.time` package"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{dateTime.format('d MMM uuuu')}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`format(pattern,locale)`: Formats temporal objects from the `java.time` package"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{dateTime.format('d MMM uuuu',myLocale)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`format(pattern,locale,timeZone)`: Formats temporal objects from the `java.time` package"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{dateTime.format('d MMM uuuu',myLocale,myTimeZoneId)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`time:format(dateTime,pattern)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{time:format(myDate,'d MMM uuuu')}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`time:format(dateTime,pattern,locale)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{time:format(myDate,'d MMM uuuu', myLocale)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`time:format(dateTime,pattern,locale,timeZone)`: Formats temporal objects from the `java.time` package, `java.util.Date`, `java.util.Calendar` and `java.lang.Number`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`{time:format(myDate,'d MMM uuuu',myLocale,myTimeZoneId)}`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "@TemplateData"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"A value resolver is automatically generated for a type annotated with `@TemplateData`.\n"
"This allows Quarkus to avoid using reflection to access the data at runtime."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Non-public members, constructors, static initializers, static, synthetic and void methods are always ignored."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Any instance of `Item` can be used directly in the template:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`items` is resolved to a list of `org.acme.Item` instances."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Furthermore, `@TemplateData.properties()` and `@TemplateData.ignore()` can be used to fine-tune the generated resolver.\n"
"Finally, it is also possible to specify the \"target\" of the annotation - this could be useful for third-party classes not controlled by the application:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The generated value resolver knows how to invoke the `BigDecimal.setScale()` method."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Accessing Static Fields and Methods"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"If `@TemplateData#namespace()` is set to a non-empty value then a namespace resolver is automatically generated to access the public static fields and methods of the target class.\n"
"By default, the namespace is the FQCN of the target class where dots and dollar signs are replaced by underscores.\n"
"For example, the namespace for a class with name `org.acme.Foo` is `org_acme_Foo`.\n"
"The static field `Foo.AGE` can be accessed via `{org_acme_Foo:AGE}`.\n"
"The static method `Foo.computeValue(int number)` can be accessed via `{org_acme_Foo:computeValue(10)}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A namespace can only consist of alphanumeric characters and underscores."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Class Annotated With `@TemplateData`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A name resolver with the namespace `model_Statuses` is generated automatically."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template Accessing Class Constants"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Convenient Annotation For Enums"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"There's also a convenient annotation to access enum constants: `@io.quarkus.qute.TemplateEnum`.\n"
"This annotation is functionally equivalent to `@TemplateData(namespace = TemplateData.SIMPLENAME)`, i.e. a namespace resolver is automatically generated for the target enum and the simple name of the target enum is used as the namespace."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Enum Annotated With `@TemplateEnum`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A name resolver with the namespace `Status` is generated automatically."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`@TemplateEnum` declared on a non-enum class is ignored. Also, if an enum also declares the `@TemplateData` annotation, then the `@TemplateEnum` annotation is ignored."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template Accessing Enum Constants"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Quarkus detects possible namespace collisions and fails the build if a specific namespace is defined by multiple `@TemplateData` and/or `@TemplateEnum` annotations."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Global Variables"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `io.quarkus.qute.TemplateGlobal` annotation can be used to denote static fields and methods that supply _global variables_ which are accessible in any template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Global variables are:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "added as _computed data_ of any `TemplateInstance` during initialization,"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "accessible with the `global:` namespace."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "When using `TemplateInstance#computedData(String, Function<String, Object>)` a mapping function is associated with a specific key and this function is used each time a value for the given key is requested. In case of global variables, a static method is called or a static field is read in the mapping function."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Global Variables Definition"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If a class is annotated with `@TemplateGlobal` then every non-void non-private static method that declares no parameters and every non-private static field is considered a global variable. The name is defaulted, i.e. the name of the field/method is used."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Method-level annotations override the class-level annotation. In this particular case, the name is not defaulted but selected explicitly."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A Template Accessing Global Variables"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`currentUser` resolves to `Globals#user()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `global:` namespace is used; `age` resolves to `Globals#age`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`myColors` resolves to `Globals#myColors()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Note that global variables implicitly add <<typesafe_expressions,parameter declarations>> to all templates and so any expression that references a global variable is validated during build."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The Output"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Resolving Conflicts"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"If not accessed via the `global:` namespace the global variables may conflict with regular data objects.\n"
"<<typesafe_templates,Type-safe templates>> override the global variables automatically.\n"
"For example, the following definition overrides the global variable supplied by the `Globals#user()` method:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Type-safe Template Definition"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`currentUser` conflicts with the global variable supplied by `Globals#user()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "So the corresponding template does not result in a validation error even though the `Globals#user()` method returns `java.lang.String` which does not have the `name` property:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`templates/hello.txt`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`org.acme.User` has the `name` property."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "For other templates an explicit parameter declaration is needed:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This parameter declaration overrides the declaration added by the global variable supplied by the `Globals#user()` method."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Native Executables"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"In the JVM mode a reflection-based value resolver may be used to access properties and call methods of the model classes.\n"
"But this does not work for xref:building-native-image.adoc[a native executable] out of the box.\n"
"As a result, you may encounter template exceptions like `Property \"name\" not found on the base object \"org.acme.Foo\" in expression {foo.name} in template hello.html` even if the `Foo` class declares a relevant getter method."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "There are several ways to solve this problem:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Make use of <<typesafe_templates,type-safe templates>> or <<typesafe_expressions,type-safe expressions>>"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In this case, an optimized value resolver is generated automatically and used at runtime"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This is the preferred solution"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Annotate the model class with <<template_data,`@TemplateData`>> - a specialized value resolver is generated and used at runtime"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Annotate the model class with `@io.quarkus.runtime.annotations.RegisterForReflection` to make the reflection-based value resolver work. More details about the `@RegisterForReflection` annotation can be found on the xref:writing-native-applications-tips.adoc#registerForReflection[native application tips] page."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "[[resteasy_integration]] REST Integration"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If you want to use Qute in your Jakarta REST application, then depending on which Jakarta REST stack you are using, you'll need to register the proper extension first."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If you are using Quarkus REST (formerly RESTEasy Reactive) via the `quarkus-rest` extension, then in your `pom.xml` file, add:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If instead you are using the legacy RESTEasy Classic-based `quarkus-resteasy` extension, then in your `pom.xml` file, add:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Both of these extensions register a special response filter which enables resource methods to return a `TemplateInstance`, thus freeing users of having to take care of all necessary internal steps."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If using Quarkus REST, a resource method that returns `TemplateInstance` is considered non-blocking. You need to annotate the method with `io.smallrye.common.annotation.Blocking` in order to mark the method as blocking. For example if it's also annotated with `@RunOnVirtualThread`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The end result is that a using Qute within a Jakarta REST resource may look as simple as:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"If there is no `@Location` qualifier provided, the field name is used to locate the template.\n"
"In this particular case, we're injecting a template with path `templates/hello.txt`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"`Template.data()` returns a new template instance that can be customized before the actual rendering is triggered.\n"
"In this case, we put the name value under the key `name`.\n"
"The data map is accessible during rendering."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Note that we don't trigger the rendering - this is done automatically by a special `ContainerResponseFilter` implementation."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Users are encouraged to use <<typesafe_templates,Type-safe templates>> that help to organize the templates for a specific Jakarta REST resource and enable <<typesafe_expressions,type-safe expressions>> automatically."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The content negotiation is performed automatically.\n"
"The resulting output depends on the `Accept` header received from the client."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Inject a variant template with base path derived from the injected field - `src/main/resources/templates/item`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "For `text/plain` the `src/main/resources/templates/item.txt` template is used. For `text/html` the `META-INF/resources/templates/item.html` template is used."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `RestTemplate` util class can be used to obtain a template instance from a body of a Jakarta REST resource method:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "RestTemplate Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The name of the template is derived from the resource class and method name; `DetailResource/item` in this particular case."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Unlike with `@Inject` the templates obtained via `RestTemplate` are not validated, i.e. the build does not fail if a template does not exist."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Vert.x Integration"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "If you want to use `io.vertx.core.json.JsonObject` as data in your templates, then you will need to add the `quarkus-vertx` extension to your build file if not already part of your dependencies (most applications use this extension by default)."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "With this dependency included, we have a special value resolver for `io.vertx.core.json.JsonObject` which makes it possible to access the properties of a JSON object in a template:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "src/main/resources/templates/foo.txt"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "QuteVertxIntegration.java"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `QuteVertxIntegration#render()` output should look like:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Development Mode"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"In the development mode, all files located in `src/main/resources/templates` are watched for changes.\n"
"By default, a template modification results in an application restart that also triggers build-time validations."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"However, it's possible to use the `quarkus.qute.dev-mode.no-restart-templates` configuration property to specify the templates for which the application is not restarted.\n"
"The configuration value is a regular expression that matches the template path relative from the `templates` directory and `/` is used as a path separator.\n"
"For example, `quarkus.qute.dev-mode.no-restart-templates=templates/foo.html` matches the template `src/main/resources/templates/foo.html`.\n"
"The matching templates are reloaded and only runtime validations are performed."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Testing"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"In the test mode, the rendering results of injected and type-safe templates are recorded in the managed `io.quarkus.qute.RenderedResults` which is registered as a CDI bean.\n"
"You can inject `RenderedResults` in a test or any other CDI bean and assert the results.\n"
"However, it's possible to set the `quarkus.qute.test-mode.record-rendered-results` configuration property to `false` to disable this feature."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Type-safe Message Bundles"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Basic Concepts"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The basic idea is that every message is potentially a very simple template.\n"
"In order to prevent type errors, a message is defined as an annotated method of a *message bundle interface*.\n"
"Quarkus generates the *message bundle implementation* at build time."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Message Bundle Interface Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Denotes a message bundle interface. The bundle name is defaulted to `msg` and is used as a namespace in templates expressions, e.g. `{msg:hello_name}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Each method must be annotated with `@Message`. The value is a qute template. If no value is provided, then a corresponding value from a localized file is taken. If no such file exists, an exception is thrown and the build fails."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The method parameters can be used in the template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The message bundles can be used at runtime:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Directly in your code via `io.quarkus.qute.i18n.MessageBundles#get()`; e.g. `MessageBundles.get(AppMessages.class).hello_name(\"Lucie\")`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Injected in your beans via `@Inject`; e.g. `@Inject AppMessages`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Referenced in the templates via the message bundle namespace:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`msg` is the default namespace."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`hello_name` is the message key."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`Lucie` is the parameter of the message bundle interface method."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "It is also possible to obtain a localized message for a key resolved at runtime using a reserved key `message`. The validation is skipped in this case though."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Default Bundle Name"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The bundle name is defaulted unless it's specified with `@MessageBundle#value()`.\n"
"For a top-level class the `msg` value is used by default.\n"
"For a nested class the name consists of the simple names of all enclosing classes in the hierarchy (top-level class goes first), followed by the simple name of the message bundle interface.\n"
"Names are separated by underscores."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "For example, the name of the following message bundle will be defaulted to `Controller_index`:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "This message could be used in a template via `{Controller_index:hello(name)}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The bundle name is also used as a part of the name of a localized file, e.g. `Controller_index` in the `Controller_index_de.properties`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Bundle Name and Message Keys"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Message keys are used directly in templates.\n"
"The bundle name is used as a namespace in template expressions.\n"
"The `@MessageBundle` can be used to define the default strategy used to generate message keys from method names.\n"
"However, the `@Message` can override this strategy and even define a custom key.\n"
"By default, the annotated element's name is used as-is.\n"
"Other possibilities are:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "De-camel-cased and hyphenated; e.g. `helloName()` -> `hello-name`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "De-camel-cased and parts separated by underscores; e.g. `helloName()` -> `hello_name`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Validation"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "All message bundle templates are validated:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "All expressions without a namespace must map to a parameter; e.g. `Hello {foo}` -> the method must have a param of name `foo`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "All expressions are validated against the types of the parameters; e.g. `Hello {foo.bar}` where the parameter `foo` is of type `org.acme.Foo` -> `org.acme.Foo` must have a property of name `bar`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A warning message is logged for each _unused_ parameter."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Expressions that reference a message bundle method, such as `{msg:hello(item.name)}`, are validated too."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Localization"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"The default locale specified via the `quarkus.default-locale` config property is used for the `@MessageBundle` interface by default.\n"
"However, the `io.quarkus.qute.i18n.MessageBundle#locale()` can be used to specify a custom locale.\n"
"Additionally, there are two ways to define a localized bundle:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Create an interface that extends the default interface that is annotated with `@Localized`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Create a UTF-8 encoded file located in the `src/main/resources/messages` directory of an application archive; e.g. `msg_de.properties`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "While a localized interface enables easy refactoring, an external file might be more convenient in many situations."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Localized Interface Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The value is the locale tag string (IETF)."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The value is the localized template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Message bundle files must be encoded in _UTF-8_.\n"
"The file name consists of the relevant bundle name (e.g. `msg`) and underscore followed by a language tag (IETF; e.g. `en-US`).\n"
"The language tag may be omitted, in which case the language tag of the default bundle locale is used.\n"
"For example, if bundle `msg` has default locale `en`, then `msg.properties` is going to be treated as `msg_en.properties`.\n"
"If both `msg.properties` and `msg_en.properties` are detected, an exception is thrown and build fails.\n"
"The file format is very simple: each line represents either a key/value pair with the equals sign used as a separator or a comment (line starts with `#`).\n"
"Blank lines are ignored.\n"
"Keys are _mapped to method names_ from the corresponding message bundle interface.\n"
"Values represent the templates normally defined by `io.quarkus.qute.i18n.Message#value()`.\n"
"A value may be spread out across several adjacent normal lines.\n"
"In such case, the line terminator must be escaped with a backslash character `\\`.\n"
"The behavior is very similar to the behavior of the `java.util.Properties.load(Reader)` method."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Localized File Example - `msg_de.properties`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Each line in a localized file represents a key/value pair. The key must correspond to a method declared on the message bundle interface. The value is the message template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Keys and values are separated by the equals sign."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "We use the `.properties` suffix in our example because most IDEs and text editors support syntax highlighting of `.properties` files. But in fact, the suffix could be anything - it is just ignored."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "An example properties file is generated into the target directory for each message bundle interface automatically. For example, by default if no name is specified for `@MessageBundle` the file `target/qute-i18n-examples/msg.properties` is generated when the application is build via `mvn clean package`. You can use this file as a base for a specific locale. Just rename the file - e.g. `msg_fr.properties`, change the message templates and move it in the `src/main/resources/messages` directory."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Value Spread Out Across Several Adjacent Lines"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Note that the line terminator is escaped with a backslash character `\\` and white space at the start of the following line is ignored. I.e. `{msg:hello('Edgar')}` would be rendered as `Hello Edgar and good morning!`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Once we have the localized bundles defined, we need a way to _select_ the correct bundle for a specific template instance, i.e. to specify the locale for all message bundle expressions in the template.\n"
"By default, the locale specified via the `quarkus.default-locale` configuration property is used to select the bundle.\n"
"Alternatively, you can specify the `locale` attribute of a template instance."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "`locale` Attribute Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "You can set a `Locale` instance or a locale tag string (IETF)."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "When using <<rest_integration,`quarkus-rest-qute`>> (or `quarkus-resteasy-qute`) the `locale` attribute is derived from the `Accept-Language` header if not set by a user."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The `@Localized` qualifier can be used to inject a localized message bundle interface."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Injected Localized Message Bundle Example"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The annotation value is a locale tag string (IETF)."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Enums"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"There is a convenient way to localize enums.\n"
"If there is a message bundle method that accepts a single parameter of an enum type and has no message template defined:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The value is intentionally not provided. There's also no key/value pair for this method in a localized file."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Then it receives a generated template like:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Furthermore, a special message method is generated for each enum constant.\n"
"Finally, each localized file must contain keys and values for all enum constants:"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Message keys for enum constants"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"By default, the message key consists of the method name followed by the `\\_` separator and the constant name.\n"
"If any constant name of a particular enum contains the `_` or the `$` character then the `\\_$` separator must be used for all message keys for this enum instead.\n"
"For example, `methodName_$CONSTANT_1=Value 1` or `methodName_$CONSTANT$1=Value 1`.\n"
"A constant of a localized enum may not contain the `_$` separator."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "In a template, the localized message for an enum constant can be obtained with a message bundle method like `{msg:methodName(enumConstant)}`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "There is also <<convenient-annotation-for-enums,`@TemplateEnum`>> - a convenient annotation to access enum constants in a template."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Message Templates"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Every method of a message bundle interface must define a message template.\n"
"The value is normally defined by `io.quarkus.qute.i18n.Message#value()`, but for convenience, there is also an option to define the value in a localized file.\n"
"Message templates are validated during the build.\n"
"If a missing message template is detected, an exception is thrown and the build fails."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Example of the Message Bundle Interface without the value"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The annotation value is not defined. In such a case, the value from supplementary localized file is taken."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The annotation value is defined and preferred to the value defined in the localized file."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Supplementary localized file"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The value is ignored as `io.quarkus.qute.i18n.Message#value()` is always prioritized."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"It is also possible to define a _default message template_.\n"
"The default template is only used if the `Message#value()` is not specified and no relevant message template is defined in a localized file."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Example of the Message Bundle Interface with a default value"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The annotation value is only used if no message template is defined in a localized file."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Configuration Reference"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Qute Used as a Standalone Library"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"Qute is primarily designed as a Quarkus extension.\n"
"However. it is possible to use it as a \"standalone\" library.\n"
"In this case, some features are not available and some additional configuration is needed."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Engine"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid ""
"First, no managed `Engine` instance is available out of the box.\n"
"You'll need to configure a new instance via `Engine.builder()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template locators"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "By default, no <<template-locator,template locators>> are registered, i.e. `Engine.getTemplate(String)` will not work."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "You can register a custom template locator using `EngineBuilder.addLocator()` or parse a template manually and put the result in the cache via `Engine.putTemplate(String, Template)`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Template initializers"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "No `TemplateInstance.Initializer` is registered by default, therefore <<global_variables,`@TemplateGlobal`>> annotations are ignored."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A custom `TemplateInstance.Initializer` can be registered with `EngineBuilder#addTemplateInstanceInitializer()` and initialize a template instance with any data and attributes."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "No section helpers are registered by default."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The default set of value resolvers can be registered via the convenient `EngineBuilder.addDefaultSectionHelpers()` method and the `EngineBuilder.addDefaults()` method respectively."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Value resolvers"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "No <<value-resolvers,``ValueResolver``s>> are generated automatically."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "<<template_extension_methods,`@TemplateExtension` methods>> will not work."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "<<template_data,`@TemplateData`>> and <<convenient-annotation-for-enums,`@TemplateEnum`>> annotations are ignored."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "The default set of value resolvers can be registered via the convenient `EngineBuilder.addDefaultValueResolvers()` method and the `EngineBuilder.addDefaults()` method respectively."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Not all functionality provided by the built-in extension methods is covered by the default value resolvers. However, a custom value resolver can be easily built via the `ValueResolver.builder()`."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "It's recommended to register a `ReflectionValueResolver` instance via `Engine.addValueResolver(new ReflectionValueResolver())` so that Qute can access object properties and call public methods."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Keep in mind that reflection may not work correctly in some restricted environments or may require additional configuration, e.g. registration in case of a GraalVM native image."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "No user-defined tags are registered automatically."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "A tag can be registered manually via `Engine.builder().addSectionHelper(new UserTagSectionHelper.Factory(\"tagName\",\"tagTemplate.html\")).build()`"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Type-safety"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "<<typesafe_expressions>> are not validated."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "<<type-safe-message-bundles,Type-safe message bundles>> are not supported."
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "Injection"
msgstr ""

#: _versions/3.27/guides/qute-reference.adoc
msgid "It is not possible to inject a `Template` instance and vice versa - a template cannot inject a `@Named` CDI bean via the `inject:` and `cdi:` namespace."
msgstr ""
