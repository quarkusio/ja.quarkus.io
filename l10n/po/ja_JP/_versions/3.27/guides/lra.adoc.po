msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/lra.adoc
msgid "Narayana LRA Participant Support"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid "Introduction"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"The LRA (short for Long Running Action) participant extension is useful in microservice based\n"
"designs where different services can benefit from a relaxed notion of distributed consistency."
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"The idea is for multiple services to perform different computations/actions in concert, whilst\n"
"retaining the option to compensate for any actions performed during the computation.\n"
"This kind of loose coupling of services bridges the gap between strong consistency models\n"
"such as JTA/XA and \"home-grown\" ad hoc consistency solutions."
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"The model is based on the https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc[Eclipse MicroProfile LRA specification].\n"
"The approach is for the developer to annotate a business method with a Java annotation\n"
"(https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@LRA`]).\n"
"When such a method is called, an LRA context is created (if one is not already present) which is passed\n"
"along with subsequent Jakarta REST invocations until a method is reached\n"
"which also contains an `@LRA` annotation with an attribute that indicates that the LRA should be\n"
"closed or cancelled. The default is for the LRA to be closed in the same method that started the\n"
"LRA (which itself may have propagated the context during method execution).\n"
"The Jakarta REST resource indicates that it wishes to participate in the interaction by, minimally,\n"
"marking one of the methods with an\n"
"https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Compensate`]\n"
"annotation. If the context is later cancelled, then this `@Compensate` action is guaranteed to be\n"
"called even in the presence of failures and is the trigger for the resource to compensate for any\n"
"activities it performed in the context of the LRA. This guarantee enables services to operate\n"
"reliably with the assurance of eventual consistency (when all compensation activities have\n"
"ran to completion). The participant can ask to be reliably notified when the LRA it is participating\n"
"in is closed by marking one of the methods with an\n"
"https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Complete`]\n"
"annotation. In this way cancelling an LRA causes all participants to be notified via their Compensate callback\n"
"and closing an LRA causes all participants to be notified via their Complete callback (if they have one).\n"
"Other annotations for controlling participants are documented in the\n"
"https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[MicroProfile LRA API v1.0 javadoc]."
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid "Configuration"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"Once you have your Quarkus Maven project configured you can add the `narayana-lra` extension\n"
"by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"`quarkus-narayana-lra` needs to be complemented with a server Jakarta REST implementation and a REST Client implementation in order to work.\n"
"This means that users should also have either `quarkus-resteasy-jackson` and `quarkus-resteasy-client-jackson` or `quarkus-rest-jackson` and `quarkus-rest-client-jackson` dependencies in their application."
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"If there is a running coordinator then this is all you need in order to create\n"
"new LRAs and to enlist participants with them."
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"The LRA extension can be configured by updating an `application.properties` file\n"
"in the `src/main/resources` directory. The only LRA specific property is\n"
"`quarkus.lra.coordinator-url=<url>` which specifies the HTTP endpoint of an external\n"
"coordinator, for example:"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"For a Narayana coordinator the path component of the url is normally `lra-coordinator`.\n"
"Coordinators can be obtained from https://quay.io/repository/jbosstm/lra-coordinator\n"
"or you can build your own coordinator using a maven pom that includes the appropriate\n"
"dependencies. A Quarkus quickstart will be provided to show how to do this, or you can\n"
"take a look at one of the https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples/lra-coordinator[Narayana quickstarts].\n"
"Another option would be to run it managed inside a WildFly application server."
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid "Handling failures"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"When an LRA is told to finish, i.e. when a method annotated with `@LRA(end = true, ...)`\n"
"is invoked, the coordinator will instruct all services involved in the interaction to\n"
"finish. If a service is unavailable (or still finishing) then the coordinator will retry\n"
"periodically. It is the user's responsibility to restart failed services on the same\n"
"endpoint that they used when they first joined the LRA, or to tell the coordinator that\n"
"they wish to be notified on new endpoints. An LRA is not deemed finished until *all*\n"
"participants have acknowledged that they have finished."
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"The coordinator is responsible for reliably creating and ending LRAs and for managing\n"
"participant enlistment, and it therefore must be available (for example if it or the\n"
"network fail then something in the environment is responsible for restarting\n"
"the coordinator or for repairing the network, respectively). To fulfill this task the\n"
"coordinator must have access to durable storage for its logs (via a filesystem or in\n"
"a database).  At the time of writing, managing coordinators is the responsibility of\n"
"the user. An \"out-of-the-box\" solution will be forthcoming."
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid "Examples"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"The following is a simple example of how to start an LRA and how to receive a notification\n"
"when the LRA is later cancelled (the `@Compensate` annotated method is called) or closed\n"
"(`@Complete` is called):"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"The example also shows that when an LRA is present its identifier can be obtained\n"
"by reading the request headers via the `@HeaderParam` Jakarta REST annotation type."
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"And here's an example of how to start an LRA in one resource method and close it in\n"
"a different resource method using the `end` element of the `LRA` annotation. It also\n"
"shows how to configure the LRA to be automatically cancelled if the business method\n"
"returns the particular HTTP status codes identified in the `cancelOn` and\n"
"`cancelOnFamily` elements:"
msgstr ""

#: _versions/3.27/guides/lra.adoc
msgid ""
"The `end = false` element on the bookTrip method forces the LRA to continue running when\n"
"the method finishes and the `end = true` element on the confirmTrip method forces the LRA\n"
"(started by the bookTrip method) to be closed when the method finishes. Note that this\n"
"end element can be placed on any Jakarta REST resource (ie one service can start the LRA whilst\n"
"a different service ends it). There are many more examples in the\n"
"https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc#java-annotations-for-lras[Microprofile LRA specification document] and in the https://github.com/eclipse/microprofile-lra/tree/master/tck/src/main/java/org/eclipse/microprofile/lra/tck[Microprofile LRA TCK]."
msgstr ""
