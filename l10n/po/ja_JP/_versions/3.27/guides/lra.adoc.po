msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/lra.adoc
msgid "Narayana LRA Participant Support"
msgstr "Narayana LRA 参加者サポート"

#: _versions/3.27/guides/lra.adoc
msgid "Introduction"
msgstr "はじめに"

#: _versions/3.27/guides/lra.adoc
msgid ""
"The LRA (short for Long Running Action) participant extension is useful in microservice based\n"
"designs where different services can benefit from a relaxed notion of distributed consistency."
msgstr "LRA（Long Running Actionの略）参加者エクステンションは、マイクロサービスベースの設計で、異なるサービスが分散一貫性の緩和された概念を利用できる場合に便利です。"

#: _versions/3.27/guides/lra.adoc
msgid ""
"The idea is for multiple services to perform different computations/actions in concert, whilst\n"
"retaining the option to compensate for any actions performed during the computation.\n"
"This kind of loose coupling of services bridges the gap between strong consistency models\n"
"such as JTA/XA and \"home-grown\" ad hoc consistency solutions."
msgstr "このアイデアは、複数のサービスが協調して異なる計算/アクションを実行する一方で、計算中に実行されたアクションを補正するオプションを保持するというものです。このようなサービスの緩やかな結合は、JTA/XAのような強力な一貫性モデルと、「自家製の」アドホックな一貫性ソリューションとの間のギャップを埋めるものです。"

#: _versions/3.27/guides/lra.adoc
msgid ""
"The model is based on the https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc[Eclipse MicroProfile LRA specification].\n"
"The approach is for the developer to annotate a business method with a Java annotation\n"
"(https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@LRA`]).\n"
"When such a method is called, an LRA context is created (if one is not already present) which is passed\n"
"along with subsequent Jakarta REST invocations until a method is reached\n"
"which also contains an `@LRA` annotation with an attribute that indicates that the LRA should be\n"
"closed or cancelled. The default is for the LRA to be closed in the same method that started the\n"
"LRA (which itself may have propagated the context during method execution).\n"
"The Jakarta REST resource indicates that it wishes to participate in the interaction by, minimally,\n"
"marking one of the methods with an\n"
"https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Compensate`]\n"
"annotation. If the context is later cancelled, then this `@Compensate` action is guaranteed to be\n"
"called even in the presence of failures and is the trigger for the resource to compensate for any\n"
"activities it performed in the context of the LRA. This guarantee enables services to operate\n"
"reliably with the assurance of eventual consistency (when all compensation activities have\n"
"ran to completion). The participant can ask to be reliably notified when the LRA it is participating\n"
"in is closed by marking one of the methods with an\n"
"https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Complete`]\n"
"annotation. In this way cancelling an LRA causes all participants to be notified via their Compensate callback\n"
"and closing an LRA causes all participants to be notified via their Complete callback (if they have one).\n"
"Other annotations for controlling participants are documented in the\n"
"https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[MicroProfile LRA API v1.0 javadoc]."
msgstr "このモデルは、 https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc[Eclipse MicroProfile LRA仕様]に基づいています。 このアプローチは、開発者がビジネスメソッドにJavaアノテーション（https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@LRA`]）を付けるアプローチです。 このようなメソッドが呼び出されると、（まだ存在しない場合）LRA コンテキストが作成され、LRA を閉じるかキャンセルすることを示す属性を持つ `@LRA` アノテーションを含むメソッドに到達するまで、その後の Jakarta REST 呼び出しと一緒に渡されます。デフォルトは、LRA を開始したのと同じメソッド（メソッド実行中にコンテキストを伝播した可能性がある）で LRA がクローズされることです。 Jakarta RESTリソースは、最低限、 https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Compensate`]アノテーションでメソッドの1つをマークすることで、対話に参加したいことを示します。コンテキストが後でキャンセルされた場合、この `@Compensate` アクションは、障害があっても呼び出されることが保証され、リソースが LRA のコンテキストで実行した活動を補償するためのトリガーとなります。この保証により、（すべての補償活動が完了したときに）最終的な整合性が保証され、サービスが確実に動作することができます。参加者は、 https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[`@Complete`]アノテーションでメソッドの1つをマークすることによって、参加しているLRAが終了したときに確実に通知されるように求めることができます。このように、LRAをキャンセルすると、Compensateコールバックを通じてすべての参加者に通知され、LRAを閉じると、Completeコールバックを通じてすべての参加者に通知されます（ある場合）。 参加者をコントロールするためのその他のアノテーションについては、 https://download.eclipse.org/microprofile/microprofile-lra-1.0/apidocs/[MicroProfile LRA API v1.0 javadoc]に記載されています。"

#: _versions/3.27/guides/lra.adoc
msgid "Configuration"
msgstr "設定"

#: _versions/3.27/guides/lra.adoc
msgid ""
"Once you have your Quarkus Maven project configured you can add the `narayana-lra` extension\n"
"by running the following command in your project base directory:"
msgstr "Quarkus Mavenプロジェクトの設定が完了したら、プロジェクトのベースディレクトリで以下のコマンドを実行して、 `narayana-lra` エクステンションを追加できます。"

#: _versions/3.27/guides/lra.adoc
msgid "This will add the following to your build file:"
msgstr "これにより、 `pom.xml` に以下が追加されます:"

#: _versions/3.27/guides/lra.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/lra.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/lra.adoc
msgid ""
"`quarkus-narayana-lra` needs to be complemented with a server Jakarta REST implementation and a REST Client implementation in order to work.\n"
"This means that users should also have either `quarkus-resteasy-jackson` and `quarkus-resteasy-client-jackson` or `quarkus-rest-jackson` and `quarkus-rest-client-jackson` dependencies in their application."
msgstr ""
"`quarkus-narayana-lra` を動作させるには、サーバーの Jakarta REST 実装と REST Client 実装と共に使用する必要があります。\n"
"つまり、 `quarkus-resteasy-jackson` と `quarkus-resteasy-client-jackson` 、または `quarkus-rest-jackson` と `quarkus-rest-client-jackson` の依存関係も必要です。"

#: _versions/3.27/guides/lra.adoc
msgid ""
"If there is a running coordinator then this is all you need in order to create\n"
"new LRAs and to enlist participants with them."
msgstr "コーディネーターがいる場合は、これだけで新しいLRAを作り、参加者を募ることができます。"

#: _versions/3.27/guides/lra.adoc
msgid ""
"The LRA extension can be configured by updating an `application.properties` file\n"
"in the `src/main/resources` directory. The only LRA specific property is\n"
"`quarkus.lra.coordinator-url=<url>` which specifies the HTTP endpoint of an external\n"
"coordinator, for example:"
msgstr "LRAエクステンションは、 `src/main/resources` ディレクトリ内の `application.properties` ファイルを更新することで設定できます。LRA固有のプロパティは、 `quarkus.lra.coordinator-url=<url>` 、外部コーディネーターのHTTPエンドポイントを指定するだけです。"

#: _versions/3.27/guides/lra.adoc
msgid ""
"For a Narayana coordinator the path component of the url is normally `lra-coordinator`.\n"
"Coordinators can be obtained from https://quay.io/repository/jbosstm/lra-coordinator\n"
"or you can build your own coordinator using a maven pom that includes the appropriate\n"
"dependencies. A Quarkus quickstart will be provided to show how to do this, or you can\n"
"take a look at one of the https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples/lra-coordinator[Narayana quickstarts].\n"
"Another option would be to run it managed inside a WildFly application server."
msgstr "ナラヤナのコーディネーターの場合、URLのパス部分は通常 `lra-coordinator` です。コーディネーターは `https://hub.docker.com/r/jbosstm/lra-coordinator` から入手できます。また、適切な依存関係を含むmaven pomを使用して独自のコーディネーターをビルドすることもできます。この方法については、Quarkusのクイックスタートが提供されます。また、 https://github.com/jbosstm/quickstart/tree/master/rts/lra-examples/lra-coordinator[Narayanaのクイックスタート]の1つを参照することもできます。もう一つの方法は、WildFlyアプリケーションサーバ内で管理された状態で実行することです。"

#: _versions/3.27/guides/lra.adoc
msgid "Handling failures"
msgstr "失敗の処理"

#: _versions/3.27/guides/lra.adoc
msgid ""
"When an LRA is told to finish, i.e. when a method annotated with `@LRA(end = true, ...)`\n"
"is invoked, the coordinator will instruct all services involved in the interaction to\n"
"finish. If a service is unavailable (or still finishing) then the coordinator will retry\n"
"periodically. It is the user's responsibility to restart failed services on the same\n"
"endpoint that they used when they first joined the LRA, or to tell the coordinator that\n"
"they wish to be notified on new endpoints. An LRA is not deemed finished until *all*\n"
"participants have acknowledged that they have finished."
msgstr "LRAが終了するように指示された場合、つまり、 `@LRA(end = true, …​)` でアノテーションされたメソッドが呼び出された場合、コーディネーターは対話に関わるすべてのサービスに終了するように指示します。サービスが利用できない場合（または終了中の場合）、コーディネーターは定期的に再試行します。失敗したサービスを、LRAに最初に参加したときに使用したのと同じエンドポイントで再起動するか、新しいエンドポイントでの通知を希望することをコーディネーターに伝えるのは、ユーザーの責任です。LRAは、 *すべての* 参加者が終了したことを確認するまで、終了したとはみなされません。"

#: _versions/3.27/guides/lra.adoc
msgid ""
"The coordinator is responsible for reliably creating and ending LRAs and for managing\n"
"participant enlistment, and it therefore must be available (for example if it or the\n"
"network fail then something in the environment is responsible for restarting\n"
"the coordinator or for repairing the network, respectively). To fulfill this task the\n"
"coordinator must have access to durable storage for its logs (via a filesystem or in\n"
"a database).  At the time of writing, managing coordinators is the responsibility of\n"
"the user. An \"out-of-the-box\" solution will be forthcoming."
msgstr "コーディネーターは、LRAを確実に作成・終了し、参加者の参加を管理する役割を担っているため、利用可能でなければなりません（例えば、コーディネーターやネットワークに障害が発生した場合、環境の何かがコーディネーターの再起動やネットワークの修復を行う責任を持たなければなりません）。このタスクを遂行するために、コーディネーターはログを保存するための耐久性のあるストレージにアクセスできなければなりません（ファイルシステムまたはデータベースを介して）。本稿執筆時点では、コーディネーターの管理はユーザーの責任です。「すぐに使える」ソリューションが今後登場する予定です。"

#: _versions/3.27/guides/lra.adoc
msgid "Examples"
msgstr "サンプル"

#: _versions/3.27/guides/lra.adoc
msgid ""
"The following is a simple example of how to start an LRA and how to receive a notification\n"
"when the LRA is later cancelled (the `@Compensate` annotated method is called) or closed\n"
"(`@Complete` is called):"
msgstr "以下は、LRAを開始する方法と、後にLRAがキャンセルされたり（ `@Compensate` のアノテーション付きメソッドが呼び出される）、クローズされたり（ `@Complete` が呼び出される）したときに通知を受け取る方法の簡単な例です。"

#: _versions/3.27/guides/lra.adoc
msgid ""
"The example also shows that when an LRA is present its identifier can be obtained\n"
"by reading the request headers via the `@HeaderParam` Jakarta REST annotation type."
msgstr "また、この例では、LRAが存在する場合、 `@HeaderParam` Jakarta RESTアノテーションタイプを使用してリクエストヘッダを読み取ることで、その識別子を取得することができることを示しています。"

#: _versions/3.27/guides/lra.adoc
msgid ""
"And here's an example of how to start an LRA in one resource method and close it in\n"
"a different resource method using the `end` element of the `LRA` annotation. It also\n"
"shows how to configure the LRA to be automatically cancelled if the business method\n"
"returns the particular HTTP status codes identified in the `cancelOn` and\n"
"`cancelOnFamily` elements:"
msgstr "ここでは、 `LRA` アノテーションの `end` 要素を使用して、あるリソース・メソッドで LRA を開始し、別のリソース・メソッドで閉じる方法の例を示しています。また、ビジネスメソッドが `cancelOn` および `cancelOnFamily` 要素で特定される特定の HTTP ステータスコードを返した場合に、LRA が自動的にキャンセルされるように設定する方法も示しています。"

#: _versions/3.27/guides/lra.adoc
msgid ""
"The `end = false` element on the bookTrip method forces the LRA to continue running when\n"
"the method finishes and the `end = true` element on the confirmTrip method forces the LRA\n"
"(started by the bookTrip method) to be closed when the method finishes. Note that this\n"
"end element can be placed on any Jakarta REST resource (ie one service can start the LRA whilst\n"
"a different service ends it). There are many more examples in the\n"
"https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc#java-annotations-for-lras[Microprofile LRA specification document] and in the https://github.com/eclipse/microprofile-lra/tree/master/tck/src/main/java/org/eclipse/microprofile/lra/tck[Microprofile LRA TCK]."
msgstr "bookTripメソッドの `end = false` 要素は、メソッドの終了時にLRAの実行を継続させ、confirmTripメソッドの `end = true` 要素は、メソッドの終了時にLRA（bookTripメソッドで開始）を終了させます。この終了要素は、Jakarta RESTリソースに置くことができることに注意してください（つまり、あるサービスがLRAを開始し、別のサービスがそれを終了することもできます）。 link:https://github.com/eclipse/microprofile-lra/blob/master/spec/src/main/asciidoc/microprofile-lra-spec.asciidoc#java-annotations-for-lras[Microprofile LRA仕様] とlink:https://github.com/eclipse/microprofile-lra/tree/master/tck/src/main/java/org/eclipse/microprofile/lra/tck[Microprofile LRA TCK] には、この他にも多くの例が掲載されています。"
