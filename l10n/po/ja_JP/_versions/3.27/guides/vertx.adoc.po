msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/vertx.adoc
msgid "Using Eclipse Vert.x API from a Quarkus Application"
msgstr "QuarkusアプリケーションからのEclipse Vert.x APIの使用"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"https://vertx.io[Vert.x] is a toolkit for building reactive applications.\n"
"As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr "link:https://vertx.io[Vert.x]は、リアクティブなアプリケーションを構築するためのツールキットです。 link:quarkus-reactive-architecture.html[Quarkus Reactive Architecture]に記載されているように、QuarkusではVert.xを下地に使用しています。"

#: _versions/3.27/guides/vertx.adoc
msgid "Quarkus applications can access and use the Vert.x APIs."
msgstr "QuarkusのアプリケーションはVert.xのAPIにアクセスして使用することができます。"

#: _versions/3.27/guides/vertx.adoc
msgid "This guide presents how you can build a Quarkus application using:"
msgstr "このガイドでは、Quarkusのアプリケーションで次を使って構築する方法を紹介します。"

#: _versions/3.27/guides/vertx.adoc
msgid "the managed instance of Vert.x"
msgstr "Vert.xのマネージドインスタンス"

#: _versions/3.27/guides/vertx.adoc
msgid "the Vert.x event bus"
msgstr "Vert.x イベントバス"

#: _versions/3.27/guides/vertx.adoc
msgid "the Vert.x Web Client"
msgstr "Vert.x Webクライアント"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"It's an introductory guide.\n"
"The xref:vertx-reference.adoc[Vert.x reference guide] covers more advanced features such as verticles, and native transports."
msgstr "これは入門ガイドです。 link:vertx-reference.html[Vert.xリファレンスガイド]では、バーティクルやネイティブトランスポートなど、より高度な機能について説明しています。"

#: _versions/3.27/guides/vertx.adoc
msgid "Architecture"
msgstr "アーキテクチャ"

#: _versions/3.27/guides/vertx.adoc
msgid "We are going to build a simple application exposing four HTTP endpoints:"
msgstr "ここでは、4つのHTTPエンドポイントを公開するシンプルなアプリケーションを作成します。"

#: _versions/3.27/guides/vertx.adoc
msgid "`/vertx/lorem` returns the content from a small file"
msgstr "`/vertx/lorem` 小さなファイルからコンテンツを返す"

#: _versions/3.27/guides/vertx.adoc
msgid "`/vertx/book` returns the content from a large file (a book)"
msgstr "`/vertx/book` 大きなファイル（本）からコンテンツを返す"

#: _versions/3.27/guides/vertx.adoc
msgid "`/vertx/hello` uses the Vert.x event bus to produce the response"
msgstr "`/vertx/hello` は、Vert.x イベントバスを使用してレスポンスを生成します"

#: _versions/3.27/guides/vertx.adoc
msgid "`/vertx/web` uses the Vert.x Web Client to retrieve data from Wikipedia"
msgstr "`/vertx/web` は、Vert.x Web クライアントを使用して Wikipedia からデータを取得します"

#: _versions/3.27/guides/vertx.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"We recommend that you follow the instructions in the following sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.27/guides/vertx.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.27/guides/vertx.adoc
msgid "The solution is located in the `vertx-quickstart` link:{quickstarts-tree-url}/vertx-quickstart[directory]."
msgstr "ソリューションは `vertx-quickstart` link:{quickstarts-tree-url}/vertx-quickstart[ディレクトリ] にあります。"

#: _versions/3.27/guides/vertx.adoc
msgid "Mutiny"
msgstr "Mutiny"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"This guide uses the Mutiny API.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive, reactive programming library]."
msgstr "このガイドでは、Mutiny APIを使用しています。Mutinyに慣れていない方は、 link:mutiny-primer.html[Mutiny - 直感的なリアクティブプログラミングライブラリ]をご覧ください。"

#: _versions/3.27/guides/vertx.adoc
msgid "Bootstrapping the application"
msgstr "アプリケーションの起動"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"Click on https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=rest-jackson&e=vertx[this link] to configure your application.\n"
"It selected a few extensions:"
msgstr ""
"アプリケーションを設定するには、 link:https://code.quarkus.io/?a=quarkus-getting-started-vertx&nc=true&e=rest-jackson&e=vertx[このリンク] をクリックしてください。\n"
"いくつかのエクステンションが選択されています："

#: _versions/3.27/guides/vertx.adoc
msgid "`rest-jackson`, which also brings `rest`. We are going to use it to expose our HTTP endpoints."
msgstr "`rest-jackson` は `rest` も持ち込みます。HTTPエンドポイントを公開するためにこれを使用します。"

#: _versions/3.27/guides/vertx.adoc
msgid "`vertx`, which provides access to the underlying managed Vert.x"
msgstr "`vertx` 、下地となるマネージドVert.xへのアクセスを提供します。"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"Click on the `Generate your application` button, download the zip file and unzip it.\n"
"Then, open the project in your favorite IDE."
msgstr "`Generate your application` ボタンをクリックし、ZIPファイルをダウンロードして解凍します。その後、お好きなIDEでプロジェクトを開いてください。"

#: _versions/3.27/guides/vertx.adoc
msgid "If you open the generated build file, you can see the selected extensions:"
msgstr "生成されたビルドファイルを開くと、選択されたエクステンションが表示されます:"

#: _versions/3.27/guides/vertx.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/vertx.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/vertx.adoc
msgid "While you are in your build file, add the following dependency:"
msgstr "ビルドファイルの中で、以下の依存関係を追加してください。"

#: _versions/3.27/guides/vertx.adoc
msgid "This dependency provides the Vert.x Web Client, which we will be using to implement the `/web` endpoint."
msgstr "この依存関係は、Vert.x Web クライアントを提供し、 `/web` エンドポイントの実装に使用されます。"

#: _versions/3.27/guides/vertx.adoc
msgid "Accessing the managed Vert.x instance"
msgstr "Vert.xマネージドインスタンスへのアクセス"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"Create the `src/main/java/org/acme/VertxResource.java` file.\n"
"It will contain our HTTP endpoints."
msgstr "`src/main/java/org/acme/VertxResource.java` ファイルを作成します。このファイルには、HTTPエンドポイントが含まれます。"

#: _versions/3.27/guides/vertx.adoc
msgid "In this file, copy the following code:"
msgstr "このファイルに、以下のコードをコピーします。"

#: _versions/3.27/guides/vertx.adoc
msgid "Declare the root HTTP path."
msgstr "ルートHTTPパスを宣言します。"

#: _versions/3.27/guides/vertx.adoc
msgid "We use constructor injection to receive the managed Vert.x instance. Field injection works too."
msgstr "コンストラクタ・インジェクションを使用して、マネージドVert.xインスタンスを受け取ります。フィールド・インジェクションも有効です。"

#: _versions/3.27/guides/vertx.adoc
msgid "Receives the Vert.x instance as a constructor parameter"
msgstr "コンストラクタのパラメータとしてVert.xインスタンスを受け取ります。"

#: _versions/3.27/guides/vertx.adoc
msgid "Store the managed Vert.x instance into a field."
msgstr "マネージドVert.xインスタンスをフィールドに格納します。"

#: _versions/3.27/guides/vertx.adoc
msgid "With this, we can start implementing the endpoints."
msgstr "これで、エンドポイントの実装を始めることができます。"

#: _versions/3.27/guides/vertx.adoc
msgid "Using Vert.x Core API"
msgstr "Vert.x Core APIの使用"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"The injected Vert.x instance provides a set of APIs you can use.\n"
"The one we are going to use in this section is the Vert.x File System.\n"
"It provides a non-blocking API to access files."
msgstr "インジェクションされたVert.xインスタンスは、利用可能なAPIのセットを提供します。このセクションで使用するのはVert.x File Systemです。これは、ファイルにアクセスするためのノンブロッキングAPIを提供します。"

#: _versions/3.27/guides/vertx.adoc
msgid "In the `src/main/resources` directory, create a `lorem.txt` file with the following content:"
msgstr "`src/main/resources` ディレクトリに、以下の内容の `lorem.txt` ファイルを作成します:"

#: _versions/3.27/guides/vertx.adoc
msgid "Then, in the `VertxResource` file add the following method:"
msgstr "そして、 `VertxResource` ファイルに以下のメソッドを追加します。"

#: _versions/3.27/guides/vertx.adoc
msgid "This endpoint handles HTTP `GET` request on path `/lorem` (so the full path will be `vertx/lorem`)"
msgstr "このエンドポイントは、パス `/lorem` に対する HTTP `GET` リクエストを処理します（そのため、フルパスは `vertx/lorem` となります）。"

#: _versions/3.27/guides/vertx.adoc
msgid "As the Vert.x API is asynchronous, our method returns a `Uni`. The content is written into the HTTP response when the asynchronous operation represented by the Uni completes."
msgstr "Vert.x APIは非同期なので、このメソッドは `Uni` を返却します。Uniで表される非同期操作が完了すると、その内容がHTTPレスポンスに書き込まれます。"

#: _versions/3.27/guides/vertx.adoc
msgid "We use the Vert.x file system API to read the created file"
msgstr "Vert.xのファイルシステムAPIを使用して、作成されたファイルを読み取ります。"

#: _versions/3.27/guides/vertx.adoc
msgid "Once the file is read, the content is stored in an in-memory buffer.  We transform this buffer into a String."
msgstr "ファイルが読み込まれると、その内容がメモリ内のバッファに格納されます。このバッファをStringに変換します。"

#: _versions/3.27/guides/vertx.adoc
msgid "In a terminal, navigate to the root of the project and run:"
msgstr "ターミナルで、プロジェクトのルートに移動して次を実行します。"

#: _versions/3.27/guides/vertx.adoc
msgid "In another terminal, run:"
msgstr "別の端末で、次を実行します。"

#: _versions/3.27/guides/vertx.adoc
msgid "You should see the content of the file printed in the console."
msgstr "コンソールにファイルの内容が表示されるはずです。"

#: _versions/3.27/guides/vertx.adoc
msgid "Quarkus provides other ways to serve static files. This is an example made for the guide."
msgstr "Quarkusは、静的ファイルを提供する他の方法を提供しています。これはガイドのために作られた例です。"

#: _versions/3.27/guides/vertx.adoc
msgid "Using Vert.x stream capability"
msgstr "Vert.x stream の能力の使用"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"Reading a file and storing the content in memory works for small files, but not big ones.\n"
"In this section, we will see how you can use Vert.x streaming capability."
msgstr "ファイルを読み込んで内容をメモリに保存する方法は、小さなファイルには有効ですが、大きなファイルには使えません。このセクションでは、Vert.xのストリーミング機能をどのように使用するかを説明します。"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"First, download https://www.gutenberg.org/files/2600/2600-0.txt[War and Peace] and store it in `src/main/resources/book.txt`.\n"
"It's a 3.2 Mb file, which, while not being huge, illustrates the purpose of streams.\n"
"This time, we will not accumulate the file's content in memory and write it in one batch, but read it chunk by chunk and write these chunks into the HTTP response one by one."
msgstr "まず、 link:https://www.gutenberg.org/files/2600/2600-0.txt[戦争と平和]をダウンロードして、 `src/main/resources/book.txt` に保存します。これは3.2Mbのファイルで、巨大ではありませんが、ストリームの目的を説明しています。今回は、ファイルの内容をメモリに蓄積して一括して書き込むのではなく、チャンクごとに読み込んで、そのチャンクを1つずつHTTPレスポンスに書き込んでいきます。"

#: _versions/3.27/guides/vertx.adoc
msgid "So, you should have the following files in your project:"
msgstr "そこで、プロジェクト内に以下のファイルを用意しておきます。"

#: _versions/3.27/guides/vertx.adoc
msgid "Add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr "`src/main/java/org/acme/VertxResource.java` ファイルに次のimportを追加します:"

#: _versions/3.27/guides/vertx.adoc
msgid "Add the following method to the `VertxResource` class:"
msgstr "`VertxResource` クラスに以下のメソッドを追加します。"

#: _versions/3.27/guides/vertx.adoc
msgid "This time, we return a Multi as we want to stream the chunks"
msgstr "今回は、チャンクをストリーミングしたいので、Multiを返します。"

#: _versions/3.27/guides/vertx.adoc
msgid "We open the file using the `open` method. It returns a `Uni<AsyncFile>`"
msgstr "`open` メソッドを使ってファイルを開きます。このメソッドは `Uni<AsyncFile>` を返却します。"

#: _versions/3.27/guides/vertx.adoc
msgid "When the file is opened, we retrieve a `Multi` which will contain the chunks."
msgstr "ファイルが開かれると、チャンクを含む `Multi` が取得できます。"

#: _versions/3.27/guides/vertx.adoc
msgid "For each chunk, we produce a String"
msgstr "各チャンクは、String を生成します。"

#: _versions/3.27/guides/vertx.adoc
msgid "To visually see the chunks in the response, we append a separator"
msgstr "レスポンス内のチャンクを視覚的に確認するために、セパレーターを追加します。"

#: _versions/3.27/guides/vertx.adoc
msgid "Then, in a terminal, run:"
msgstr "そして、ターミナルで、次を実行します。"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"It should retrieve the book content.\n"
"In the output you should see the separator like:"
msgstr "ブックの内容を取得します。出力には次のようなセパレータが表示されるはずです。"

#: _versions/3.27/guides/vertx.adoc
msgid "Using the event bus"
msgstr "イベントバスの使用"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"One of the core features of Vert.x is the https://vertx.io/docs/vertx-core/java/#event_bus[event bus].\n"
"It provides a message-based backbone to your application.\n"
"So, you can have components interacting using asynchronous message passing, and so decouple your components.\n"
"You can send a message to a single consumer, or dispatch to multiple consumers, or implement a request-reply interaction, where you send a message (request) and expect a response.\n"
"This is what we are going to use in this section.\n"
"Our `VertxResource` will send a message containing a name to the `greetings` address.\n"
"Another component will receive the message and produce the \"hello $name\" response.\n"
"The `VertxResource` will receive the response and return it as the HTTP response."
msgstr ""
"Vert.xのコア機能の1つに link:https://vertx.io/docs/vertx-core/java/#event_bus[イベントバス] があります。\n"
"これは、アプリケーションにメッセージベースのバックボーンを提供します。\n"
"そのため、非同期メッセージパッシングを使用して相互作用するコンポーネントを持つことができ、コンポーネントを分離することができます。単一のコンシューマーにメッセージを送信することも、複数のコンシューマーにディスパッチすることも、メッセージ（リクエスト）を送信してレスポンスを期待するリクエスト・リプライ型のインタラクションを実装することもできます。\n"
"このセクションではこれを使用します。 \n"
"`VertxResource` は、名前を含むメッセージを `greetings` のアドレスに送信します。\n"
"別のコンポーネントがそのメッセージを受け取り、\"hello $name \"というレスポンスを返します。 \n"
"`VertxResource` はレスポンスを受け取り、HTTP レスポンスとして返します。"

#: _versions/3.27/guides/vertx.adoc
msgid "So, first, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr "So, first, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"

#: _versions/3.27/guides/vertx.adoc
msgid "Next, let's extend our `VertxResource` class with the following code:"
msgstr "次に、 `VertxResource` クラスを以下のコードで拡張してみましょう："

#: _versions/3.27/guides/vertx.adoc
msgid "Inject the event bus. Alternatively you can use `vertx.eventBus()`."
msgstr "イベントバスを注入します。あるいは、 `vertx.eventBus()` を使うこともできます。"

#: _versions/3.27/guides/vertx.adoc
msgid "We receive a _name_ as a query parameter"
msgstr "クエリパラメータとして _name_ を受け取ります。"

#: _versions/3.27/guides/vertx.adoc
msgid "We use the `request` method to initiate the request-reply interaction. We send the name to the \"greetings\" address."
msgstr "`request` メソッドを使用して、リクエストとリプライのやりとりを開始します。名前を \"greetings \"アドレスに送信します。"

#: _versions/3.27/guides/vertx.adoc
msgid "When the response is received, we extract the body and return it as the HTTP response"
msgstr "レスポンスを受信したら、ボディを抽出してHTTPレスポンスとして返します。"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"Now, we need the other side: the component receiving the name and replying.\n"
"Create the `src/main/java/org/acme/GreetingService.java` file with the following content:"
msgstr "さて、もう一方が必要です。名前を受け取って返信するコンポーネントです。以下の内容で `src/main/java/org/acme/GreetingService.java` を作成します："

#: _versions/3.27/guides/vertx.adoc
msgid "Declaring a CDI Bean in the Application scope. Quarkus will create a single instance of this class."
msgstr "アプリケーションスコープでCDI Beanを宣言します。Quarkusはこのクラスのインスタンスを1つ作成します。"

#: _versions/3.27/guides/vertx.adoc
msgid "Use the `@ConsumeEvent` annotation to declare a consumer. It is possible to use the Vert.x API https://vertx.io/docs/vertx-core/java/#_acknowledging_messages_sending_replies[directly] too."
msgstr "コンシューマを宣言するには、 `@ConsumeEvent` アノテーションを使用します。Vert.x API を link:https://vertx.io/docs/vertx-core/java/#_acknowledging_messages_sending_replies[直接] 使用することも可能です。"

#: _versions/3.27/guides/vertx.adoc
msgid "Receive the message payload as a method parameter. The returned object will be the reply."
msgstr "メッセージのペイロードをメソッドのパラメーターとして受け取ります。返されたオブジェクトがリプライとなります。"

#: _versions/3.27/guides/vertx.adoc
msgid "Return the response. This response is sent back to the `VertxResource` class"
msgstr "レスポンスを返します。このレスポンスは `VertxResource` クラスに返されます。"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"Let's try this.\n"
"In a terminal, run:"
msgstr ""
"試してみましょう。\n"
"ターミナルで次を実行します。"

#: _versions/3.27/guides/vertx.adoc
msgid "You should get the expected `Hello bob` message back."
msgstr "期待通りの `Hello bob` メッセージが返ってくるはずです。"

#: _versions/3.27/guides/vertx.adoc
msgid "Using Vert.x Clients"
msgstr "Vert.x クライアントの使用"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"So far, we have used the Vert.x Core API.\n"
"Vert.x offers much more.\n"
"It provides a vast ecosystem.\n"
"In this section, we will see how you can use the Vert.x Web Client, a reactive HTTP client."
msgstr ""
"ここまでは、Vert.x Core APIを使用してきました。\n"
"Vert.xはそれ以上のものを提供しています。\n"
"Vert.xは広大なエコシステムを提供します。\n"
"このセクションでは、リアクティブHTTPクライアントであるVert.x Web Clientの使用方法について説明します。"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"Note that some Quarkus extensions are wrapping Vert.x clients and manage them for you.\n"
"That's the case for the reactive data sources, Redis, mail...\n"
"That's not the case with the Web Client."
msgstr ""
"Quarkusのエクステンションの中には、Vert.xクライアントをラッピングして管理してくれるものがあります。\n"
"これは、リアクティブデータソース、Redis、メールなどの場合です。\n"
"Web Clientは対象ではありません。"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"Remember, at the beginning of the guide,  we added the `smallrye-mutiny-vertx-web-client` dependency to our `pom.xml` file.\n"
"It's now time to use it."
msgstr ""
"このガイドの冒頭で、 `pom.xml` ファイルに `smallrye-mutiny-vertx-web-client` の依存関係を追加したことを思い出してください。\n"
"今がそれを使う番です。"

#: _versions/3.27/guides/vertx.adoc
msgid "First, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"
msgstr "First, add the following imports to the `src/main/java/org/acme/VertxResource.java` file:"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"Next, we need to create an instance of `WebClient`.\n"
"Extend the `VertxResource` class with the `client` field and the creation of the web client in the constructor:"
msgstr "次に、 `WebClient` のインスタンスを作成する必要があります。 `client` フィールドとウェブクライアントの作成をコンストラクタに追加して、 `VertxResource` クラスを拡張します："

#: _versions/3.27/guides/vertx.adoc
msgid "Store the `WebClient`, so we will be able to use it in our HTTP endpoint"
msgstr "HTTP エンドポイントで使用できるように、 `WebClient` を保存します。"

#: _versions/3.27/guides/vertx.adoc
msgid "Create the `WebClient`. Be sure to use the `io.vertx.mutiny.ext.web.client.WebClient` class"
msgstr "`WebClient` を作成します。必ず `io.vertx.mutiny.ext.web.client.WebClient` クラスを使用してください。"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"Let's now implement a new HTTP endpoint that queries the Wikipedia API to retrieve the pages about Quarkus in the different languages.\n"
"Add the following method to the `VertxResource` class:"
msgstr ""
"それでは、Wikipedia APIに問い合わせ、Quarkusに関するさまざまな言語のページを取得する新しいHTTPエンドポイントを実装してみましょう。 \n"
"`VertxResource` クラスに以下のメソッドを追加します："

#: _versions/3.27/guides/vertx.adoc
msgid "This endpoint returns a JSON Array. Vert.x provides a convenient way to manipulate JSON Object and Array. More details about these in xref:vertx-reference.adoc#using-vert-x-json[the reference guide]."
msgstr "このエンドポイントは、JSON Array を返します。Vert.x は、JSON オブジェクトと配列を操作する便利な方法を提供します。これらの詳細については、 xref:vertx-reference.adoc#using-vert-x-json[リファレンスガイド] を参照してください。"

#: _versions/3.27/guides/vertx.adoc
msgid "Send a `GET` request to the Wikipedia API"
msgstr "Wikipedia API に `GET` リクエストを送信します。"

#: _versions/3.27/guides/vertx.adoc
msgid "Once the response is received, extract it as a JSON Object"
msgstr "レスポンスを受信したら、JSONオブジェクトとして取り出します。"

#: _versions/3.27/guides/vertx.adoc
msgid "Extract the `langlinks` array from the response."
msgstr "レスポンスから `langlinks` 配列を取り出します。"

#: _versions/3.27/guides/vertx.adoc
msgid "Then, invoke the endpoint using:"
msgstr "そして、次のようにエンドポイントを呼び出します："

#: _versions/3.27/guides/vertx.adoc
msgid "The response indicates that, in addition to the English page, there are a German and a French page about Quarkus on wikipedia."
msgstr "応答によると、ウィキペディアには英語のページに加え、ドイツ語とフランス語のQuarkusに関するページがあるとのことです。"

#: _versions/3.27/guides/vertx.adoc
msgid "Executing Asynchronous Code From a Blocking Thread"
msgstr "ブロッキングスレッドから非同期コードを実行"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"Sometimes it's necessary to execute an asynchronous code from a blocking thread.\n"
"Specifically, to execute the code on a Vert.x thread with an isolated/duplicated Vert.x context.\n"
"A typical example is an asynchronous code that needs to leverage the Hibernate Reactive API during application startup.\n"
"Quarkus provides the `VertxContextSupport#subscribeAndAwait()` method which subscribes to the supplied `io.smallrye.mutiny.Uni` on a Vert.x duplicated context, then blocks the current thread and waits for the result."
msgstr ""
"ブロッキングスレッドから非同期コードを実行する必要がある場合があります。\n"
"具体的には、分離/複製されたVert.xコンテキストを持つVert.xスレッドでコードを実行します。\n"
"典型的な例は、アプリケーションの起動時にHibernate Reactive APIを活用する必要がある非同期コードです。\n"
"Quarkusは、 `VertxContextSupport#subscribeAndAwait()` メソッドを提供します。このメソッドは、Vert.xの複製されたコンテキスト上で提供された `io.smallrye.mutiny.Uni` を購読し、現在のスレッドをブロックして結果を待ちます。"

#: _versions/3.27/guides/vertx.adoc
msgid "If necessary, the CDI request context is activated during execution of the asynchronous code."
msgstr "必要であれば、CDIリクエストコンテキストは非同期コードの実行中にアクティブ化されます。"

#: _versions/3.27/guides/vertx.adoc
msgid "`VertxContextSupport#subscribeAndAwait()` must not be called on an event loop!"
msgstr "`VertxContextSupport#subscribeAndAwait()` をイベントループで呼んではいけません！"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"It is also possible to subscribe to a supplied `io.smallrye.mutiny.Multi` on a Vert.x duplicated context.\n"
"In this case, the current thread is not blocked and the supplied subscription logic is used to consume the events."
msgstr ""
"また、Vert.xの複製されたコンテキストで、提供された `io.smallrye.mutiny.Multi` を購読することも可能です。\n"
"この場合、現在のスレッドはブロックされず、提供されたサブスクリプションロジックがイベントを消費するために使用されます。"

#: _versions/3.27/guides/vertx.adoc
msgid "Going further"
msgstr "さらに詳しく"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"This guide introduced how you can use Vert.x APIs from a Quarkus application.\n"
"It's just a brief overview.\n"
"If you want to know more, check the xref:vertx-reference.adoc[reference guide about Vert.x in Quarkus]."
msgstr ""
"このガイドでは、QuarkusアプリケーションからVert.x APIを使用する方法を紹介しました。\n"
"あくまで簡単な概要です。\n"
"もっと詳しく知りたい場合は、 xref:vertx-reference.adoc[QuarkusのVert.xに関するリファレンスガイド] をご覧ください。"

#: _versions/3.27/guides/vertx.adoc
msgid ""
"As we have seen, the event bus is the connecting tissue of Vert.x applications.\n"
"Quarkus integrates it so different beans can interact with asynchronous messages.\n"
"This part is covered in the xref:reactive-event-bus.adoc[event bus documentation]."
msgstr ""
"これまで見てきたように、イベントバスはVert.xアプリケーションの接続組織です。\n"
"Quarkusはこれを統合し、異なるBeanが非同期メッセージでやり取りできるようにします。\n"
"この部分については、 xref:reactive-event-bus.adoc[イベントバスのドキュメント] を参照してください。"

#: _versions/3.27/guides/vertx.adoc
msgid "Learn how to implement highly performant, low-overhead database applications on Quarkus with the xref:reactive-sql-clients.adoc[Reactive SQL Clients]."
msgstr "Learn how to implement highly performant, low-overhead database applications on Quarkus with the xref:reactive-sql-clients.adoc[Reactive SQL Clients]."
