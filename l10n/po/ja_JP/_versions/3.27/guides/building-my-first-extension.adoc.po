msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Building my first extension"
msgstr "初めてのエクステンションの作成"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"Quarkus extensions enhance your application just as projects dependencies do.\n"
"The role of the extensions is to leverage Quarkus paradigms to integrate seamlessly a library into Quarkus architecture - e.g. do more things at build time.\n"
"This is how you can use your battle-tested ecosystem and take advantage of Quarkus performance and native compilation.\n"
"Go to https://code.quarkus.io/[code.quarkus.io] to get the list of the supported extensions."
msgstr "Quarkus のエクステンションは、プロジェクトの依存関係がそうであるように、アプリケーションを強化します。エクステンションの役割は、Quarkus のパラダイムを活用して、ライブラリを Quarkus アーキテクチャにシームレスに統合することです。たとえば、ビルド時に、より多くのことを行います。これが、実績のあるエコシステムを利用して、Quarkus のパフォーマンスとネイティブコンパイルを活用することができる仕組みです。 https://code.quarkus.io/[code.quarkus.io] にアクセスして、サポートされているエクステンションのリストを入手してください。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"In this guide we are going to develop the *Sample Greeting Extension*.\n"
"The extension will expose a customizable HTTP endpoint which simply greets the visitor."
msgstr "このガイドでは、*サンプル Greeting エクステンション* を開発します。このエクステンションは、ビジターに挨拶をするだけのカスタマイズ可能な HTTP エンドポイントを公開します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Disclaimer"
msgstr "免責事項"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"To be sure it's extra clear you don't need an extension to add a Servlet to your application.\n"
"This guide is a simplified example to explain the concepts of extensions development, see the xref:writing-extensions.adoc[full documentation] if you need more information.\n"
"Keep in mind it's not representative of the power of moving things to build time or simplifying the build of native images."
msgstr "念のため、アプリケーションにサーブレットを追加するのにエクステンションは必要ないことを明記しておきます。このガイドは、エクステンション開発のコンセプトを説明するための簡略化された例であり、より詳細な情報が必要な場合は、 link:writing-extensions.html[完全なドキュメント]を参照してください。処理をビルド時に移動したり、ネイティブイメージのビルドを簡単にしたりする機能を代表するものではありませんのでご注意ください。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"Writing extension with any other than Java and Maven has **not** been tested by the Quarkus team so your mileage may vary\n"
"if you stray off this path"
msgstr ""
"JavaとMaven以外でエクステンションを作成することは、Quarkusチームによってテストされて *いません* 。\n"
"したがって、この方法から外れると、期待通りに動作しない可能性があります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Basic Concepts"
msgstr "基本概念"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "First things first, we will need to start with some basic concepts."
msgstr "まず最初に、いくつかの基本的な概念から始めましょう。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "JVM mode vs Native mode"
msgstr "JVM モードとネイティブモード"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Quarkus is first and foremost a Java framework, that means you can develop, package and run classic JAR applications, that's what we call *JVM mode*."
msgstr "Quarkus は最初の Java フレームワークです。つまり、従来の *JAR* アプリケーションの開発、パッケージ化、実行を行うことができます。これは、*JVM モード* と呼ばれます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Thanks to https://graalvm.org/[GraalVM] you can compile your Java application into machine specific code (like you do in Go or C++) and that's what we call *Native mode*."
msgstr "link:https://graalvm.org/[GraalVM] により、Java アプリケーションをマシン固有のコード (Go や C++ のように) にコンパイルすることができます。これは、*ネイティブモード* と呼ばれます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The operation of compiling Java bytecode into a native system-specific machine code is named *Ahead of Time Compilation* (aka AoT)."
msgstr "Java バイトコードをネイティブシステム固有のマシンコードにコンパイルする操作は、*Ahead of Time Compilation* (AoT) と呼ばれています。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "build time vs runtime in classic Java frameworks"
msgstr "従来型の Java フレームワークにおけるビルド時と実行時の比較"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"The build time corresponds to all the actions you apply to your Java source files to convert them into something runnable (class files, jar/war, native images).\n"
"Usually this stage is composed by the compilation, annotation processing, bytecode generation, etc. At this point, everything is under the developer's scope and control."
msgstr ""
"ビルド時は、Javaソース・ファイルを実行可能なもの（クラス・ファイル、jar/war、ネイティブ・イメージ）に変換するために適用するすべてのアクションに対応します。\n"
"通常、この段階はコンパイル、アノテーション処理、バイトコード生成などで構成されます。この時点では、すべてが開発者の範囲と制御下にあります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"The runtime is all the actions that happen when you execute your application.\n"
"It's obviously focused on starting your business-oriented actions, but it relies on a lot of technical actions like loading libraries and configuration files, scanning the application's classpath, configuring the dependency injection, setting up your Object-Relational Mapping, instantiating your REST controllers, etc."
msgstr ""
"実行時はアプリケーションを実行するときに起こるすべてのアクションです。\n"
"実行時は明らかにビジネス指向のアクションを開始することに重点を置いていますが、ライブラリや設定ファイルのロード、アプリケーションのクラスパスのスキャン、依存性注入の設定、オブジェクトリレーショナルマッピングの設定、RESTコントローラのインスタンス化など、多くの技術的なアクションに依存しています。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Usually, Java frameworks do their bootstrapping during the runtime before actually starting the application \"Business oriented layer\". During bootstrap, frameworks dynamically collect metadata by scanning the classpath to find configurations, entity definitions, dependency injection binding, etc. in order to instantiate proper objects through reflection. The main consequences are:"
msgstr "通常、Javaフレームワークは、アプリケーションの \"ビジネス志向のレイヤー\" を実際に起動する前に、実行時中にブートストラップを行います。ブートストラップの際、フレームワークは、リフレクションによって適切なオブジェクトをインスタンス化するために、設定、エンティティー定義、依存関係の注入バインディングなどを見つけるためにクラスパスをスキャンします。これにより、動的にメタデータを収集します。主な結果は以下の通りです。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Delaying the readiness of your application: you need to wait a couple of seconds before actually serving a business request."
msgstr "アプリケーションの準備が遅れる: 実際にビジネスリクエストに対応する前に数秒待つ必要があります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Having a peak of resource consumption at bootstrap: in a constrained environment, you will need to size the needed resources based on your technical bootstrap needs rather than your actual business needs."
msgstr "ブートストラップでリソース消費のピークを持つ: 制約のある環境では、実際のビジネスニーズではなく、技術的なブートストラップのニーズに基づいて、必要なリソースのサイズを決定する必要があります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"Quarkus' philosophy is to prevent as much as possible slow and memory intensive dynamic code execution by shifting left these actions and eventually do them during the build time.\n"
"A Quarkus extension is a Java piece of code acting as an adapter layer for your favorite library or technology."
msgstr "Quarkus の概念は、これらのアクションの左シフトを行い、最終的にはビルド時に実行することで、可能な限り低速でメモリー集約的な動的コードの実行を防ぐことです。Quarkus のエクステンションは、お気に入りのライブラリやテクノロジーのアダプターレイヤーとして機能する Java のコードです。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Description of a Quarkus extension"
msgstr "Quarkus のエクステンションの説明"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "A Quarkus extension consists of two parts:"
msgstr "Quarkus のエクステンションは、2 つの部分から構成されています。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"The *runtime module* which represents the capabilities the extension developer exposes to the application's developer (an authentication filter, an enhanced data layer API, etc).\n"
"Runtime dependencies are the ones the users will add as their application dependencies (in Maven POMs or Gradle build scripts)."
msgstr "エクステンション開発者がアプリケーション開発者に公開する機能を表す *ランタイムモジュール* (認証フィルター、強化されたデータ層 API など)。ランタイム依存関係は、ユーザーがアプリケーションの依存関係として追加するものです (Maven POM または Gradle ビルドスクリプト)。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"The *deployment module* which is used during the augmentation phase of the build, it describes how to \"deploy\" a library\n"
"following the Quarkus philosophy.\n"
"In other words, it applies all the Quarkus optimizations to your application during the build.\n"
"The deployment module is also where we prepare things for GraalVM's native compilation."
msgstr "ビルドの拡張フェーズで使用される *デプロイモジュール* で、Quarkus の概念に従ったライブラリを「デプロイ」する方法を説明しています。つまり、ビルド中にアプリケーションに Quarkus のすべての最適化を適用します。このデプロイメントモジュールは、GraalVM のネイティブコンパイルのための準備をする場所でもあります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"Users should not be adding the deployment modules of extension as application dependencies. The deployment dependencies are resolved by\n"
"Quarkus during the augmentation phase from the runtime dependencies of the application."
msgstr "ユーザーは、エクステンションのデプロイメントモジュールをアプリケーションの依存関係として追加すべきではありません。デプロイメントの依存関係は、拡張フェーズの間に Quarkus によってアプリケーションの実行時依存関係から解決されます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "At this point, you should have understood that most of the magic will happen at the Augmentation build time thanks to the deployment module."
msgstr "この時点で、このデプロイメントモジュールにより、多くのマジックは拡張ビルド時に起こることを理解しているはずです。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Quarkus Application Bootstrap"
msgstr "Quarkus アプリケーションブートストラップ"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "There are three distinct bootstrap phases of a Quarkus application."
msgstr "Quarkus アプリケーションには、3 つの異なるブートストラップフェーズがあります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"*Augmentation*. During the build time, the Quarkus extensions will load and scan your application's bytecode (including the dependencies) and configuration.\n"
"At this stage, the extension can read configuration files, scan classes for specific annotations, etc.\n"
"Once all the metadata has been collected, the extensions can pre-process the libraries bootstrap actions like your ORM, DI or REST controllers configurations.\n"
"The result of the bootstrap is directly recorded into bytecode and will be part of your final application package."
msgstr ""
"*拡張 (Augmentation)*。ビルド時に、Quarkus エクステンションはアプリケーションのバイトコード (依存関係を含む) と設定をロードしてスキャンします。\n"
"この段階で、エクステンションは設定ファイルを読み込んだり、特定のアノテーションのためにクラスをスキャンしたりすることができます。\n"
"すべてのメタデータが収集されたら、エクステンションは、ORM、DI、または REST コントローラーの設定のようなライブラリーのブートストラップアクションを前処理することができます。\n"
"ブートストラップの結果はバイトコードに直接記録され、最終的なアプリケーションパッケージの一部となります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"*Static Init*. During the run time, Quarkus will execute first a static init method which contains some extensions actions/configurations.\n"
"When you will do your native packaging, this static method will be pre-processed during the build time and the objects it has generated will be serialized into the final native executable, so the initialization code will not be executed in the native mode (imagine you execute a Fibonacci function during this phase, the result of the computation will be directly recorded in the native executable).\n"
"When running the application in JVM mode, this static init phase is executed at the start of the application."
msgstr ""
"*静的 Init* 実行時に、Quarkus は最初に、いくつかの拡張アクション/設定を含む最初の静的 init メソッドを実行します。\n"
"ネイティブパッケージングを行う場合、このスタティックメソッドはビルド時に前処理され、生成されたオブジェクトは最終的なネイティブ実行可能ファイルにシリアライズされるため、初期化コードはネイティブモードでは実行されません (このフェーズではフィボナッチ関数を実行すると想像してください。計算の結果は、ネイティブ実行可能ファイルに直接記録されます)。\n"
"JVM モードでアプリケーションを実行している場合、この静的 init フェーズはアプリケーションの開始時に実行されます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"*Runtime Init*. Well nothing fancy here, we do classic run time code execution.\n"
"So, the more code you run during the two phases above, the faster your application will start."
msgstr ""
"*ランタイム Init* このフェーズでは特に目立つことはありません。従来的なランタイムコード実行を行います。\n"
"つまり、上記の 2 つのフェーズでより多くのコードを実行すればするほど、アプリケーションの起動が速くなります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Now that everything is explained, we can start coding!"
msgstr "これで全てが説明されたので、さっそくコーディングに取り掛かりましょう"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Project setup"
msgstr "プロジェクトのセットアップ"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Extensions can be built with either Maven or Gradle. Depending on your build tool, setup can be done as following:"
msgstr "エクステンションは、MavenまたはGradleのいずれかでビルドできます。お使いのビルドツールに応じて、以下のようにセットアップを行います。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The Gradle extension plugin is still experimental and may be missing features available in the Maven plugin."
msgstr "Gradleエクステンションプラグインはまだ実験的なもので、Mavenプラグインで利用できる機能が欠けている可能性があります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Maven setup"
msgstr "Maven のセットアップ"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Quarkus provides `create-extension` Maven Mojo to initialize your extension project."
msgstr "Quarkus は、 `create-extension` Maven Mojo を提供し、拡張プロジェクトを初期化します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "It will try to auto-detect its options:"
msgstr "オプションの自動検出が試行されます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "from `quarkus` (Quarkus Core) or `quarkus/extensions` directory, it will use the 'Quarkus Core' extension layout and defaults."
msgstr "`quarkus` (Quarkus Core) または `quarkus/extensions` ディレクトリからアクセスすると、'Quarkus Core' エクステンションのレイアウトとデフォルトが使用されます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "with `-DgroupId=io.quarkiverse.[extensionId]`, it will use the 'Quarkiverse' extension layout and defaults."
msgstr "`-DgroupId=io.quarkiverse.[extensionId]` を使用すると、'Quarkiverse' エクステンションのレイアウトとデフォルトを使用します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "in other cases it will use the 'Standalone' extension layout and defaults."
msgstr "それ以外の場合は 'Standalone' エクステンションのレイアウトとデフォルトを使用します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "we may introduce other layout types in the future."
msgstr "将来的には他のレイアウトタイプを導入する可能性があります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "You may call it without any parameter to use the interactive mode: `mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create-extension -N`"
msgstr "パラメーターなしで呼び出し、インタラクティブ・モードを使用することも出来ます: `mvn {quarkus-platform-groupid}:quarkus-maven-plugin:{quarkus-version}:create-extension -N`"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The extension groupId"
msgstr "エクステンション groupId"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The extension id (not namespaced)."
msgstr "エクステンション ID (名前空間ではない)。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Indicate that we don't want to generate any test"
msgstr "テスト不要を示す"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "From a directory with no pom.xml and without any further options, the generator will automatically pick the 'standalone' extension layout"
msgstr "それ以上のオプションなしで、pom.xml のないディレクトリから、ジェネレーターは自動的に 'standalone' 拡張レイアウトを選択します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "With the 'standalone' layout, the `namespaceId` is empty by default, so the computed runtime module artifactId is the `extensionId`"
msgstr "'standalone' レイアウトでは、 `namespaceId` はデフォルトでは空なので、計算されるランタイムモジュールの artifactId は `extensionId` です。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Maven has generated a `greeting-extension` directory containing the extension project which consists of the parent `pom.xml`, the `runtime` and the `deployment` modules."
msgstr "Maven は、親 `pom.xml`、 `runtime` 、 `deployment` モジュールから成る拡張プロジェクトを含む `quarkus-greeting` ディレクトリーを生成しました。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The parent pom.xml"
msgstr "親 pom.xml"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Your extension is a multi-module project. So let's start by checking out the parent POM at `./greeting-extension/pom.xml`."
msgstr "お使いのエクステンションはマルチモジュールプロジェクトです。まずは、 `./quarkus-greeting/pom.xml` の親 POM から見ていきましょう。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Your extension declares 2 sub-modules `deployment` and `runtime`."
msgstr "エクステンションは、2 つのサブモジュール `deployment` と `runtime` を宣言しています。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Quarkus requires a recent version of the Maven compiler plugin supporting the annotationProcessorPaths configuration."
msgstr "Quarkus では、annotationProcessorPaths 設定に対応する、最新バージョンの Maven コンパイラープラグインのが必要です。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The `quarkus-bom` aligns your dependencies with those used by Quarkus during the augmentation phase."
msgstr "`quarkus-bom` は、オーグメンテーションの段階で Quarkus が使用している依存関係を調整します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Quarkus requires these configs to run tests properly."
msgstr "Quarkusは、テストを適切に実行するためにこれらの設定を必要とします。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The Deployment module"
msgstr "Deployment モジュール"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Let's have a look at the deployment's `./greeting-extension/deployment/pom.xml`."
msgstr "デプロイメントの `./quarkus-greeting/deployment/pom.xml` を見てみましょう。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The key points are:"
msgstr "主なポイント:"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "By convention, the deployment module has the `-deployment` suffix (`greeting-extension-deployment`)."
msgstr "決まりとして、配置モジュールのサフィックスは `-deployment` (`greeting-deployment`) です。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"The deployment module depends on the `quarkus-arc-deployment` artifact.\n"
"We will see later which dependencies are convenient to add."
msgstr "デプロイメントモジュールは `quarkus-core-deployment` アーティファクトに依存しています。どの依存関係を追加するのが便利かは後ほど見ていきます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The deployment module also *must* depend on the runtime module."
msgstr "デプロイメントモジュールも実行時モジュールに依存している *必要があります* 。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "We add  the `quarkus-extension-processor` to the compiler annotation processors."
msgstr "コンパイラーのアノテーションプロセッサーに `quarkus-extension-processor` を追加します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "In addition to the `pom.xml` `create-extension` also generated the `org.acme.greeting.extension.deployment.GreetingExtensionProcessor` class."
msgstr "`pom.xml` `create-extension` に加えて `org.acme.quarkus.greeting.deployment.GreetingProcessor` クラスも生成されました。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"`FeatureBuildItem` represents a functionality provided by an extension.\n"
"The name of the feature gets displayed in the log during application bootstrap.\n"
"An extension should provide at most one feature."
msgstr "`FeatureBuildItem` はエクステンションによって提供される機能を表します。機能の名前は、アプリケーションの起動時にログに表示されます。エクステンションは最大でも 1 つの機能を提供しなければなりません。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"Be patient, we will explain the `Build Step Processor` concept and all the extension deployment API later on.\n"
"At this point, you just need to understand that this class explains to Quarkus how to deploy a feature named `greeting` which is your extension.\n"
"In other words, you are augmenting your application to use the `greeting` extension with all the Quarkus benefits (build time optimization, native support, etc.)."
msgstr "`Build Step Processor` の概念とすべてのエクステンションのデプロイメント API については、後で説明します。この時点では、このクラスは、 `greeting` というエクステンションをデプロイする方法を Quarkus に説明していることを理解する必要があります。つまり、アプリケーションを拡張して、Quarkus のすべての利点 (ビルド時間の最適化、ネイティブサポートなど) とともに `greeting` エクステンションを使用することになります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The Runtime module"
msgstr "ランタイムモジュール"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Finally `./greeting-extension/runtime/pom.xml`."
msgstr "最後に `./greeting-extension/runtime/pom.xml` を見ていきます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "By convention, the runtime module has no suffix (`greeting-extension`) as it is the artifact exposed to the end user."
msgstr "決まりとして、ランタイムモジュールはエンドユーザーに公開されるアーティファクトであるため、接尾辞 (`greeting`) を持たない。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The runtime module depends on the `quarkus-arc` artifact."
msgstr "ランタイムモジュールは `quarkus-arc` アーティファクトに依存しています。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "We add  the `quarkus-extension-maven-plugin` to generate the Quarkus extension descriptor included into the runtime artifact which links it with the corresponding deployment artifact."
msgstr "`Quarkus-extension-maven-plugin` を追加して、ランタイムアーティファクトに含まれるQuarkusエクステンションディスクリプタを生成します。Quarkusエクステンションディスクリプタはランタイムアーティファクトを対応するデプロイメントアーティファクトとリンクさせるものです。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Gradle setup"
msgstr "Gradle のセットアップ"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Quarkus does not provide any way to initialize a Gradle project for extensions yet."
msgstr "Quarkus は、エクステンションのGradleプロジェクトを初期化する方法を提供していません。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "As mentioned before, an extension is composed of two modules:"
msgstr "前述したように、エクステンションは2つのモジュールで構成されています。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "`runtime`"
msgstr "`runtime`"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "`deployment`"
msgstr "`deployment`"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "We are going to create a Gradle multi-module project with those two modules. Here is a simple `settings.gradle` example file:"
msgstr "この2つのモジュールから構成される、Gradleのマルチモジュールプロジェクトを作ってみます。これが、簡単な `settings.gradle` のサンプルファイルです。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Configure the quarkus extension plugin version"
msgstr "quarkusエクステンションプラグインのバージョン設定"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Include both `runtime` and `deployment` modules"
msgstr "`runtime` と `deployment` の両方のモジュールをインクルード"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Here is a sample of a root `build.gradle` file:"
msgstr "以下は、ルート `build.gradle` ファイルのサンプルです。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Apply the `java-library` plugin for all sub-modules"
msgstr "すべてのサブモジュールに `java-library` プラグインを適用"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Apply the `maven-publish` plugin used to publish our artifacts"
msgstr "アーティファクトの公開に使用する `maven-publish` プラグインの適用"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Globally set the group id used for publication"
msgstr "公開に使用するグループIDをグローバルに設定"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"The `io.quarkus.extension` plugin will be used in order to help us building the extension.\n"
"The plugin will *only* be applied to the `runtime` module."
msgstr "`io.quarkus.extension` プラグインは、エクステンションをビルドするために使用されます。このプラグインは、 `runtime` モジュールに *のみ* 適用されます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The deployment module"
msgstr "deployment モジュール"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"The deployment module does not require any specific plugin.\n"
"Here is an example of a minimal `build.gradle` file for the `deployment` module:"
msgstr "deployment モジュールは、特定のプラグインを必要としません。以下は、 `deployment` モジュールの最小の `build.gradle` ファイルの例です。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The deployment module *must* depend on the `runtime` module."
msgstr "デプロイメントモジュールは実行時モジュールに依存してい *なければなりません* 。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The runtime module"
msgstr "実行時モジュール"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The runtime module applies the `io.quarkus.extension` plugin. This will:"
msgstr "実行時モジュールは `quarkus-arc` アーティファクトに依存しています。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Add `quarkus-extension-process` as annotation processor to both modules."
msgstr "両方のモジュールに `quarkus-extension-process` をアノテーションプロセッサーとして追加します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Generate extension description files."
msgstr "エクステンションの説明ファイルを生成します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Here is an example of `build.gradle` file for the `runtime` module:"
msgstr "以下は、 `runtime` モジュール用の `build.gradle` ファイルの例です:"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Apply the `io.quarkus.extension` plugin."
msgstr "`io.quarkus.extension` プラグインを適用します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "By convention, the runtime module doesn't have a suffix (and thus is named `greeting-extension`) as it is the artifact exposed to the end user."
msgstr "決まりとして、実行時モジュールはエンドユーザーに公開されるアーティファクトであるため、接尾辞 (`greeting`) を持たない。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Basic version of the Sample Greeting extension"
msgstr "サンプル Greeting エクステンションの基本バージョン"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Implementing the Greeting feature"
msgstr "Greeting 機能の実装"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"The (killer) feature proposed by our extension is to greet the user.\n"
"To do so, our extension will deploy, in the user application, a Servlet exposing the HTTP endpoint `/greeting` which responds to the GET verb with a plain text `Hello`."
msgstr "ここでのエクステンションの素晴らしい機能は、ユーザーに挨拶をすることです。これを行うには、このエクステンションはユーザーアプリケーションで、平文 `Hello` で GET 動詞に応答する HTTP エンドポイント `/greeting` を公開するサーブレットを展開します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The `runtime` module is where you develop the feature you want to propose to your users, so it's time to create our Web Servlet."
msgstr "この `ランタイム` モジュールは、ユーザーに提案したい機能を開発するところなので、そろそろ Web Servlet を作成しましょう。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"To use Servlets in your applications you need to have a Servlet Container such as https://undertow.io[Undertow].\n"
"Luckily, `quarkus-bom` imported by our parent `pom.xml` already includes the Undertow Quarkus extension."
msgstr "アプリケーションでサーブレットを使用するには、 https://undertow.io[Undertow] のようなサーブレットコンテナーが必要です。幸い、 `pom.xml` にインポートされる `quarkus-bom` には、すでに Undertow Quarkus エクステンションが含まれています。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "All we need to do is add `quarkus-undertow` as dependency to our `./greeting-extension/runtime/pom.xml`:"
msgstr "必要なのは、 `quarkus-undertow` を依存関係として `./greeting-extension/runtime/pom.xml` に追加することだけです。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "For Gradle, add the dependency in `./greeting-extension/runtime/build.gradle` file:"
msgstr "Gradleの場合は、 `./greeting-extension/runtime/build.gradle` ファイルに依存関係を追加します:"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"The dependency on `quarkus-arc` generated by the `create-extension` mojo can now be removed since\n"
"`quarkus-undertow` already depends on it."
msgstr "`create-extension` mojo で生成された `quarkus-core-deployment` への依存関係は、 `quarkus-undertow-deployment` が既に依存しているため削除できます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Now we can create our Servlet `org.acme.greeting.extension.GreetingExtensionServlet` in the `runtime` module."
msgstr "これで、 `runtime` モジュールでサーブレット `org.acme.quarkus.greeting.GreetingServlet` を作成することができるようになりました。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "As usual, defining a servlet requires to extend `jakarta.servlet.http.HttpServlet`."
msgstr "例によって、サーブレットを定義するには、 `jakarta.servlet.http.HttpServlet` を拡張する必要があります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Since we want to respond to the HTTP GET verb, we override the `doGet` method and write `Hello` in the Servlet response's output stream."
msgstr "HTTP GET 動詞に応答したいので、 `doGet` メソッドをオーバーライドして、サーブレット応答の出力ストリームに `Hello` を記述します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Deploying the Greeting feature"
msgstr "Greeting 機能のデプロイ"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"Quarkus magic relies on bytecode generation at build time rather than waiting for the runtime code evaluation, that's the role of your extension's `deployment` module.\n"
"Calm down, we know, bytecode is hard and you don't want to do it manually. Quarkus proposes a high level API to make your life easier.\n"
"Thanks to basic concepts, you will describe the items to produce/consume and the corresponding steps in order to generate the bytecode to produce during the deployment time."
msgstr "Quarkus マジックは、実行時のコード評価を待つのではなく、ビルド時のバイトコード生成に依存します。これは、エクステンションの `deployment` モジュールの役割です。落ち着いてください、バイトコードは難しいので、手動でやりたくないでしょう。 Quarkus は、作業を楽にする高レベルの API を提案しています。基本的な概念のおかげで、デプロイ時に生成するバイトコードを生成するために、生成/消費する項目と対応する手順を説明できます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The `io.quarkus.builder.item.BuildItem` concept represents object instances you will produce or consume (and at some point convert into bytecode) thanks to methods annotated with `@io.quarkus.deployment.annotations.BuildStep` which describe your extension's deployment tasks."
msgstr "`io.quarkus.builder.item.BuildItem` の概念は、 `@io.quarkus.deployment.annotations.BuildStep` でアノテーションされたメソッドのおかげで、生成または消費 (そしてある時点でバイトコードに変換したり) するオブジェクトインスタンスを表しています。このアノテーションは、エクステンションのデプロイメントタスクを説明しています。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "NOTE"
msgstr "注意"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "See xref:all-builditems.adoc[the complete list of BuildItem implementations in core] for more information"
msgstr "詳細は、 link:all-builditems.html[コアのBuildItem実装の全リスト]を参照してください。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Go back to the generated `org.acme.greeting.extension.deployment.GreetingExtensionProcessor` class."
msgstr "生成された `org.acme.quarkus.greeting.deployment.GreetingProcessor` クラスに戻ります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"`feature()` method is annotated with `@BuildStep` which means it is identified as a deployment task Quarkus will have to execute during the deployment.\n"
"`BuildStep` methods are run concurrently at augmentation time to augment the application.\n"
"They use a producer/consumer model, where a step is guaranteed not to be run until all the items that it is consuming have been produced."
msgstr "`feature()` メソッドには `@BuildStep` というアノテーションが付けられています。これは、Quarkus がデプロイ時に実行しなければならないデプロイタスクとして識別されます。 `BuildStep` メソッドは、アプリケーションを拡張するための拡張時に同時に実行されます。これらは、プロデューサー/コンシューマーモデルを使用しています。このステップは、消費しているすべての項目が生成されるまで、実行されないことが保証されます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"`io.quarkus.deployment.builditem.FeatureBuildItem` is an implementation of `BuildItem` which represents the description of an extension.\n"
"This `BuildItem` will be used by Quarkus to display information to the users when the application is starting."
msgstr "`io.quarkus.deployment.builditem.FeatureBuildItem` は、エクステンションの説明を表す `BuildItem` の実装です。この `BuildItem` は、アプリケーションの起動時にユーザーに情報を表示するために Quarkus が使用します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"There are many `BuildItem` implementations, each one represents an aspect of the deployment process.\n"
"Here are some examples:"
msgstr "多くの `BuildItem` 実装があり、それぞれが展開プロセスの一面を表しています。ここではいくつかの例を紹介します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "`ServletBuildItem`: describes a Servlet (name, path, etc.) we want to generate during the deployment."
msgstr "`ServletBuildItem`: デプロイ時に生成したいサーブレット (名前、パスなど) を記述します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "`BeanContainerBuildItem`: describes a container used to store and retrieve object instances during the deployment."
msgstr "`BeanContainerBuildItem`: デプロイ時にオブジェクトインスタンスを保存・取得するために使用するコンテナーについて説明します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"If you don't find a `BuildItem` for what you want to achieve, you can create your own implementation. Keep in mind that a `BuildItem` should be as fine-grained as possible, representing a specific part of the deployment.\n"
"To create your `BuildItem` you can extend:"
msgstr "実現したいことに対応する `BuildItem` が見つからない場合は、独自の実装を作成することができます。 `BuildItem` は、デプロイメントの特定の部分を表すもので、できるだけ細かいものでなければならないということを覚えておいてください。 `BuildItem` を作成する方法:"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "`io.quarkus.builder.item.SimpleBuildItem` if you need only a single instance of the item during the deployment (e.g. `BeanContainerBuildItem`, you only want one container)."
msgstr "`io.quarkus.builder.item.SimpleBuildItem` デプロイ時にアイテムのインスタンスを1つだけ必要とする場合 (例: `BeanContainerBuildItem`、コンテナーが 1 つのみ必要な場合)。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "`io.quarkus.builder.item.MultiBuildItem` if you want to have multiple instances (e.g. `ServletBuildItem`, you can produce many Servlets during the deployment)."
msgstr "複数のインスタンスを使いたい場合は `io.quarkus.builder.item.MultiBuildItem` (例: `ServletBuildItem`、デプロイ時に多くのサーブレットを生成することができます)。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"It's now time to declare our HTTP endpoint. To do so, we need to produce a `ServletBuildItem`.\n"
"At this point, we are sure you understood that if the `quarkus-undertow` dependency proposes Servlet support for our `runtime` module, we will need the `quarkus-undertow-deployment` dependency in our `deployment` module to have access to the `io.quarkus.undertow.deployment.ServletBuildItem`."
msgstr "次は、HTTP エンドポイントを宣言します。これを行うには、 `ServletBuildItem` を生成する必要があります。この時点では、 `quarkus-undertow` 依存関係が `runtime` モジュールの Servlet サポートを提案している場合は、 `deployment` モジュールの `quarkus-undertow-deployment` 依存関係が `io.quarkus.undertow.deployment.ServletBuildItem` にアクセスできるようにする必要があることをご理解いただけたと思います。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Let's add `quarkus-undertow-deployment` as dependency to our `./greeting-extension/deployment/pom.xml`:"
msgstr "`quarkus-undertow-deployment` を依存関係として `./greeting-extension/deployment/pom.xml` に追加してみましょう。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"The dependency on `quarkus-arc-deployment` generated by the `create-extension` mojo can now be removed since\n"
"`quarkus-undertow-deployment` already depends on it."
msgstr "`create-extension` mojo で生成された `quarkus-core-deployment` への依存は、 `quarkus-undertow-deployment` が既に依存しているので、これで削除できます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "For Gradle, add the dependency in `./greeting-extension/deployment/build.gradle` file:"
msgstr "Gradleの場合は、 `./greeting-extension/deployment/build.gradle` ファイルに依存関係を追加します:"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "We can now update `org.acme.greeting.extension.deployment.GreetingExtensionProcessor`:"
msgstr "これで `org.acme.quarkus.greeting.deployment.GreetingProcessor` を更新できるようになりました。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"We add a `createServlet` method which returns a `ServletBuildItem` and annotate it with `@BuildStep`.\n"
"Now, Quarkus will process this new task which will result in the bytecode generation of the Servlet registration at build time."
msgstr "`ServletBuildItem` を返す `createServlet` メソッドを追加し、 `@BuildStep` でアノテーションを付けます。これで、Quarkus はこの新しいタスクを処理して、ビルド時にサーブレット登録のバイトコードを生成します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "`ServletBuildItem` proposes a fluent API to instantiate a Servlet named `greeting-extension` of type `GreetingExtensionServlet` (it's our class provided by our extension `runtime` module), and map it the `/greeting` path."
msgstr "`ServletBuildItem` は、流ちょうな API を処理して `GreetingExtensionServlet` 型の `greeting-extension` というサーブレットをインスタンス化し (エクステンション `runtime` によって提供されるクラスです)、 `/greeting` パスにマッピングします。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Testing the Greeting Extension feature"
msgstr "グリーティングエクステンションのテスト"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"When developing a Quarkus extension, you mainly want to test your feature is properly deployed in an application and works as expected.\n"
"That's why the tests will be hosted in the `deployment` module."
msgstr "Quarkus エクステンションを開発する際には、主に機能がアプリケーションに正しくデプロイされ、期待通りに動作するかどうかをテストすることを考える必要があります。そのため、テストは `deployment` モジュールでホストされます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Quarkus proposes facilities to test extensions via the `quarkus-junit5-internal` artifact (which should already be in the deployment pom.xml), in particular the `io.quarkus.test.QuarkusUnitTest` runner which starts an application with your extension."
msgstr "Quarkusは、既に deployment pom.xml にある `quarkus-junit5-internal` アーティファクトを介してエクステンションをテストするための機能を処理します (エクステンションでアプリケーションを起動する `io.quarkus.test.QuarkusUnitTest` ランナー)。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"We will use https://rest-assured.io[RestAssured] (massively used in Quarkus) to test our HTTP endpoint.\n"
"Let's add the `rest-assured` dependency into the  `./greeting-extension/deployment/pom.xml`."
msgstr "http://rest-assured.io[RestAssured] (Quarkus で非常によく使われる) を使用して HTTP エンドポイントをテストします。 `rest-assured` の依存関係を `./greeting-extension/deployment/pom.xml` に追加しましょう。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The `create-extension` Maven Mojo can create the test and integration-test structure (drop the `-DwithoutTests`). Here, we'll create it ourselves:"
msgstr "現在、 `create-extension` Maven Mojo はテストと統合テスト構造 (`-DwithoutTests` をドロップ) を作成できます。ここでは、自分たちで作成します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "To start testing your extension, create the following `org.acme.greeting.extension.deployment.GreetingExtensionTest` test class:"
msgstr "エクステンションのテストを開始するには、次の `org.acme.quarkus.greeting.deployment.GreetingTest` テストクラスを作成します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "We register a Junit Extension which will start a Quarkus application with the Greeting extension."
msgstr "Greeting エクステンションで Quarkus アプリを起動する Junit エクステンションを登録します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "We verify the application has a `greeting` endpoint responding to an HTTP GET request with an OK status (200) and a plain text body containing `Hello`"
msgstr "アプリケーションが `greeting` エンドポイントから OK ステータス (200) で HTTP GET 要求に応答していることと、 `Hello` を含むプレーンテキスト本文があることを確認します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Time to test and install to our local maven repository!"
msgstr "テストしてローカルの maven リポジトリーにインストールしてみましょう。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Looks good! Congratulations you just finished your first extension."
msgstr "問題なさそうですね。初めてのエクステンションの作成、おつかれさまでした。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Debugging your extension"
msgstr "エクステンションのデバッグ"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"_If debugging is the process of removing bugs, then programming must be the process of putting them in._\n"
"Edsger W. Dijkstra"
msgstr "デバッグ作業がバグを取り除く作業であるならば、プログラミングとは、バグを入れ込む作業ということになる。エドガー・W・ダイクストラ"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Debugging your application build"
msgstr "アプリケーションビルドのデバッグ"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"Since your extension deployment is made during the application build, this process is triggered by your build tool.\n"
"That means if you want to debug this phase you need to launch your build tool with the remote debug mode switched on."
msgstr ""
"エクステンションのデプロイはアプリケーションのビルド中に行われるため、このプロセスはビルドツールによって起動されます。\n"
"つまり、このフェーズをデバッグしたい場合は、リモートデバッグモードをオンにしてビルドツールを起動する必要があります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"You can activate Maven remote debugging by using `mvnDebug`.\n"
"You can launch your application with the following command line:"
msgstr "`mvnDebug` を使用して、Maven リモートデバッグを有効にすることができます。以下のコマンドラインでアプリケーションを起動できます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"By default, Maven will wait for a connection on `localhost:8000`.\n"
"Now, you can run your IDE `Remote` configuration to attach it to `localhost:8000`."
msgstr "デフォルトでは、Maven は、 `localhost:8000` 上の接続を待ちます。これで、 `localhost:8000` にアタッチするために、IDE `Remote` の設定を実行することができます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Gradle"
msgstr "Gradle"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"You can activate Gradle remote debugging by using the flags `org.gradle.debug=true` or `org.gradle.daemon.debug=true` in daemon mode.\n"
"You can launch your application with the following command line:"
msgstr "Gradle のリモートデバッグは、デーモンモードでフラグ `org.gradle.debug=true` または `org.gradle.daemon.debug=true` を使用して有効にすることができます。以下のコマンドラインでアプリケーションを起動することができます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"By default, Gradle will wait for a connection on `localhost:5005`.\n"
"Now, you can run your IDE `Remote` configuration to attach it to `localhost:5005`."
msgstr "デフォルトでは、Gradle は、 `localhost:5005` 上の接続を待ちます。これで、 `localhost:5005` にアタッチするために、IDE `Remote` の設定を実行することができます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Debugging your extension tests"
msgstr "エクステンションテストのデバッグ"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"We have seen together how to test your extension and sometimes things don't go so well and you want to debug your tests.\n"
"Same principle here, the trick is to enable the Maven Surefire remote debugging in order to attach an IDE `Remote` configuration."
msgstr "エクステンションをテストする方法を一緒に見てきましたが、時にはうまくいかず、テストをデバッグしたい場合もあります。ここでも同じ原理で、IDE `Remote` の設定をアタッチするために Maven Surefire リモートデバッグを有効にします。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "By default, Maven will wait for a connection on `localhost:5005`."
msgstr "デフォルトでは、Maven は `localhost:5005` で接続を待ちます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Time to use your new extension"
msgstr "新しいエクステンションの使用"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Now that you just finished building your first extension you should be eager to use it in a Quarkus application!"
msgstr "最初のエクステンションを構築し終えたばかりなので、Quarkus アプリケーションで使いたいと思うことでしょう。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "*Classic Maven publication*"
msgstr "*お約束の Maven キャッチ*\n"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "If not already done in the previous step, you should install the `greeting-extension` in your local repository:"
msgstr "前のステップでまだ行っていない場合は、ローカルリポジトリに `greeting-extension` をインストールする必要があります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Then from another directory, use our tooling to create a new `greeting-app` Quarkus application with your new extension:"
msgstr "次に、別のディレクトリから、我々のツールを使用して、新しいエクステンションを持つ新しい `greeting-app` Quarkus アプリケーションを作成します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "`cd` into `greeting-app`."
msgstr "`cd` into `greeting-app`."

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "The `greeting-extension` extension has to be installed in the local Maven repository to be usable in the application."
msgstr "`quarkus-greeting` エクステンションをアプリケーションで使用できるようにするには、ローカルの Maven リポジトリにインストールする必要があります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Run the application and notice the `Installed Features` list contains the `greeting-extension` extension."
msgstr "アプリケーションを実行して、 `Installed Features` のリストに `quarkus-greeting` のエクステンションが含まれていることに注目してください。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"From an extension developer standpoint the Maven publication strategy is very handy and fast but Quarkus wants to go one step further by also ensuring a reliability of the ecosystem for the people who will use the extensions.\n"
"Think about it, we all had a poor Developer Experience with an unmaintained library, an incompatibility between dependencies (and we don't even talk about legal issues).\n"
"That's why there is the Quarkus Platform."
msgstr "エクステンションの開発者の立場からすると、Maven の公開戦略は非常に便利で高速ですが、Quarkus は、エクステンションを使用する人々のためにエコシステムの信頼性も確保することで、さらに一歩進んでいきたいと考えています。考えてみてください。私たちは皆、メンテナンスされていないライブラリや依存関係間の非互換性 (法的な問題は除く) で、開発体験が著しく低下したことを経験していることでしょう。Quarkus Platform は、そのためのものです。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "*Quarkus Platform*"
msgstr "*Quarkus Platform*\n"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid ""
"Quarkus platform is a set of extensions that target the primary use-cases of Quarkus as a development framework and can safely be used in any combination in the same application without creating a dependency conflict.\n"
"From an application developer perspective, a Quarkus platform is represented as one or more Maven BOMs, for example `{quarkus-platform-groupid}:quarkus-bom:{quarkus-version}`, `{quarkus-platform-groupid}:quarkus-camel-bom:{quarkus-version}`, etc, whose dependency version constraints were globally aligned so that these BOMs can be imported in the same application in any order without introducing a dependency conflict."
msgstr "Quarkusプラットフォームは、開発フレームワークとしてのQuarkusの主なユースケースをターゲットとしたエクステンションのセットであり、依存関係の競合を発生させることなく、同じアプリケーション内でどのような組み合わせでも安全に使用できます。アプリケーション開発者の視点から見ると、Quarkusプラットフォームは、1つまたは複数のMaven BOMとして表現されます。例えば、 `{quarkus-platform-groupid}:quarkus-bom:{quarkus-version}` 、 `{quarkus-platform-groupid}:quarkus-camel-bom:{quarkus-version}` などです。これらのBOMは、依存関係の競合を発生させることなく、同じアプリケーションで任意の順序でインポートできるように、依存関係のバージョン制約がグローバルに調整されています。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "*Quarkiverse Hub*"
msgstr "*Quarkiverse Hub*\n"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "link:https://github.com/quarkiverse[Quarkiverse Hub] is the GitHub organization that provides repository hosting (including build, CI and release publishing setup) for Quarkus extension projects contributed by the community."
msgstr "link:https://github.com/quarkiverse[Quarkiverse Hub] は、コミュニティから投稿された Quarkus エクステンションプロジェクトのリポジトリーホスティング (ビルド、CI、リリースパブリッシングのセットアップを含む) を提供する GitHub 組織です。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "In case you are wondering about creating a new Quarkus extension and adding it to the Quarkus ecosystem so that the Quarkus community can discover it using the Quarkus dev tools (including the xref:cli-tooling.adoc[Quarkus CLI] and https://code.quarkus.io[code.quarkus.io]), the https://github.com/quarkiverse[Quarkiverse Hub] GitHub organization will be a good home for it."
msgstr "新しいQuarkusエクステンションを作成してQuarkusエコシステムに追加し、Quarkus開発ツール（ xref:cli-tooling.adoc[Quarkus CLI] や link:https://code.quarkus.io[code.quarkus.io] を含む）を使用してQuarkusコミュニティがそのエクステンションを発見できるようにしたいと考えている場合、 link:https://github.com/quarkiverse[Quarkiverse Hub] GitHub organizationはそのための良いホームとなるでしょう。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "You can get started by creating an link:https://github.com/quarkusio/quarkus/issues/new/choose[Extension Request] issue (check first if one wasn't already submitted link:https://github.com/quarkusio/quarkus/labels/kind%2Fextension-proposal[here]) and asking to lead it."
msgstr "link:https://github.com/quarkusio/quarkus/issues/new/choose[エクステンションリクエスト] 投稿を作成 (link:https://github.com/quarkusio/quarkus/labels/kind%2Fextension-proposal[こちら]) で、まだ投稿されていないかどうかを最初に確認してください) し、それをリードするように依頼することから始めることができます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "We'll take care of provisioning a new repository and set it up to:"
msgstr "我々は、新しいリポジトリのプロビジョニングを行い、以下のように設定します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Be supported by our tooling;"
msgstr "我々のツールでサポート。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Publish the documentation you produce for your extension to the Quarkiverse website;"
msgstr "エクステンションのために作成したドキュメントを Quarkiverse の Web サイトに公開します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Configure your extension to use the link:https://github.com/quarkusio/quarkus-ecosystem-ci#quarkus-ecosystem-ci[Quarkus Ecosystem CI] to build against the latest Quarkus Core changes;"
msgstr "link:https://github.com/quarkusio/quarkus-ecosystem-ci#quarkus-ecosystem-ci[Quarkus エコシステム CI] を使用して、最新の Quarkus Core の変更に対応してビルドするようにエクステンションを設定します。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Give you the freedom to manage the project and release to Maven Central as you like."
msgstr "プロジェクトを管理し、好きなように Maven Central にリリースする自由を与えます。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Extensions hosted in the Quarkiverse Hub may or may not end up in the Quarkus platform."
msgstr "Quarkiverse Hubでホストされているエクステンションは、Quarkusプラットフォームに組み込まれる場合もあれば、組み込まれない場合もあります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "For more information, check link:https://github.com/quarkiverse/quarkiverse/wiki[the Quarkiverse Wiki] and link:https://quarkus.io/blog/quarkiverse/[this blog post]."
msgstr "詳しくは、link:https://github.com/quarkiverse/quarkiverse/wiki[Quarkiverse Wiki] と link:https://quarkus.io/blog/quarkiverse/[このブログ記事] をチェックしてみてください。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Creating new extensions may appear to be an intricate task at first but once you understood the Quarkus game-changer paradigm (build time vs runtime) the structure of an extension makes perfectly sense."
msgstr "新しいエクステンションの作成は、最初は複雑な作業に見えるかもしれませんが、Quarkus の変革をもたらすパラダイム (ビルド時間とランタイム) を理解してしまえば、エクステンションの構造は完璧に理にかなったものになります。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "As usual, along the path Quarkus simplifies things under the hood (Maven Mojo, bytecode generation or testing) to make it pleasant to develop new features."
msgstr "いつものように、Quarkus は地道に、新機能の開発を快適にするために、Maven Mojo、バイトコード生成またはテストといった作業を簡素化するために努めています。"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "Further reading"
msgstr "さらに詳しく"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "xref:writing-extensions.adoc[Writing your own extension] for the full documentation."
msgstr "完全なドキュメント: link:writing-extensions.html[独自のエクステンションを書く]"

#: _versions/3.27/guides/building-my-first-extension.adoc
msgid "xref:dev-ui.adoc[Quarkus Dev UI] to learn how to support the Dev UI in your extension"
msgstr "エクステンションでDev UIをサポートする方法を知る: link:dev-ui.html[Quarkus Dev UI]"
