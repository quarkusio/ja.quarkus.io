msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/transaction.adoc
msgid "Using transactions in Quarkus"
msgstr "Quarkusでのトランザクションの使用"

#: _versions/3.27/guides/transaction.adoc
msgid "The `quarkus-narayana-jta` extension provides a Transaction Manager that coordinates and expose transactions to your applications as described in the link: https://jakarta.ee/specifications/transactions/[Jakarta Transactions] specification, formerly known as Java Transaction API (JTA)."
msgstr "`quarkus-narayana-jta` エクステンションは、リンク先 link:https://jakarta.ee/specifications/transactions/[Jakarta Transactions] 仕様（旧称 Java Transaction API (JTA)）で説明されているように、トランザクションを調停し、アプリケーションに公開するトランザクション・マネージャを提供します 。"

#: _versions/3.27/guides/transaction.adoc
msgid "When discussing Quarkus transactions, this guide refers to Jakarta Transactions transaction style and uses only the term _transaction_ to address them."
msgstr "Quarkusのトランザクションについて説明する場合、このガイドではJakarta Transactionsのトランザクションスタイルを参照し、 _トランザクション_ という用語のみを使用して説明します。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"Also, Quarkus does not support distributed transactions.\n"
"This means that models that propagate transaction context, such as link:https://download.oracle.com/otndocs/jcp/7309-jts-1.0-spec-oth-JSpec/[Java Transaction Service] (JTS), REST-AT, WS-Atomic Transaction, and others, are not supported by the `narayana-jta` extension."
msgstr ""
"また、Quarkusは分散トランザクションをサポートしていません。\n"
"つまり、 link:https://download.oracle.com/otndocs/jcp/7309-jts-1.0-spec-oth-JSpec/[Java Transaction Service] （JTS）、REST-AT、WS-Atomic Transactionなど、トランザクションコンテキストを伝播するモデルは、 `narayana-jta` エクステンションではサポートされません。"

#: _versions/3.27/guides/transaction.adoc
msgid "Setting it up"
msgstr "設定"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"You don't need to worry about setting it up most of the time as extensions needing it will simply add it as a dependency.\n"
"Hibernate ORM for example will include the transaction manager and set it up properly."
msgstr "これを必要とするエクステンションは単に依存関係として追加するだけなので、ほとんどの場合、設定について心配する必要はありません。例えばHibernate ORMはトランザクションマネージャーを含んでおり、適切に設定してくれます。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"You might need to add it as a dependency explicitly if you are using transactions directly without Hibernate ORM for example.\n"
"Add the following to your build file:"
msgstr "例えば、Hibernate ORMを使用せずに直接トランザクションを使用している場合は、明示的に依存関係として追加する必要があるかもしれません。以下をビルドファイルに追加します:"

#: _versions/3.27/guides/transaction.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/transaction.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/transaction.adoc
msgid "Starting and stopping transactions: defining your boundaries"
msgstr "トランザクションの開始と停止:境界線の定義"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"You can define your transaction boundaries either declaratively with `@Transactional` or programmatically with `QuarkusTransaction`. You can also use\n"
"the JTA `UserTransaction` API directly, however this is less user-friendly than `QuarkusTransaction`."
msgstr "トランザクションの境界は、 `@Transactional` で宣言的に、または `QuarkusTransaction` でプログラム的に定義できます。 JTA `UserTransaction` API を直接使用することもできますが、これは `QuarkusTransaction` よりも使い勝手が悪くなります。"

#: _versions/3.27/guides/transaction.adoc
msgid "Declarative approach"
msgstr "宣言的アプローチ"

#: _versions/3.27/guides/transaction.adoc
msgid "The easiest way to define your transaction boundaries is to use the `@Transactional` annotation on your entry method (`jakarta.transaction.Transactional`)."
msgstr "トランザクションの境界を定義する最も簡単な方法は、エントリーメソッドに `@Transactional` アノテーションを使用することです( `jakarta.transaction.Transactional` )。"

#: _versions/3.27/guides/transaction.adoc
msgid "This annotation defines your transaction boundaries and will wrap this call within a transaction."
msgstr "このアノテーションは、トランザクションの境界を定義し、トランザクション内でこの呼び出しをラップします。"

#: _versions/3.27/guides/transaction.adoc
msgid "A `RuntimeException` crossing the transaction boundaries will roll back the transaction."
msgstr "`RuntimeException` がトランザクションの境界を越えると、トランザクションがロールバックされます。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"`@Transactional` can be used to control transaction boundaries on any CDI bean at the method level or at the class level to ensure every method is transactional.\n"
"That includes REST endpoints."
msgstr "`@Transactional` は、メソッドレベルまたはクラスレベルで、すべてのメソッドがトランザクションであることを保証するために、任意の CDI Bean のトランザクション境界を制御するために使用することができます。これにはRESTエンドポイントも含まれます。"

#: _versions/3.27/guides/transaction.adoc
msgid "You can control whether and how the transaction is started with parameters on `@Transactional`:"
msgstr "`@Transactional` のパラメーターを使用して、トランザクションを開始するかどうか、どのように開始するかを制御することができます。"

#: _versions/3.27/guides/transaction.adoc
msgid "`@Transactional(REQUIRED)` (default): starts a transaction if none was started, stays with the existing one otherwise."
msgstr "`@Transactional(REQUIRED)` (デフォルト): 何も開始されていない場合はトランザクションを開始し、そうでない場合は既存のトランザクションを維持します。"

#: _versions/3.27/guides/transaction.adoc
msgid "`@Transactional(REQUIRES_NEW)`: starts a transaction if none was started ; if an existing one was started, suspends it and starts a new one for the boundary of that method."
msgstr "`@Transactional(REQUIRES_NEW)` : 何も開始されていない場合はトランザクションを開始し、既存のトランザクションが開始されている場合はそれを一時停止し、そのメソッドの境界で新しいトランザクションを開始します。"

#: _versions/3.27/guides/transaction.adoc
msgid "`@Transactional(MANDATORY)`: fails if no transaction was started ; works within the existing transaction otherwise."
msgstr "`@Transactional(MANDATORY)` : トランザクションが開始されていない場合は失敗し、そうでない場合は既存のトランザクション内で動作します。"

#: _versions/3.27/guides/transaction.adoc
msgid "`@Transactional(SUPPORTS)`: if a transaction was started, joins it ; otherwise works with no transaction."
msgstr "`@Transactional(SUPPORTS)` : トランザクションが開始されている場合、それに参加します。開始されていない場合はトランザクションなしで動作します。"

#: _versions/3.27/guides/transaction.adoc
msgid "`@Transactional(NOT_SUPPORTED)`: if a transaction was started, suspends it and works with no transaction for the boundary of the method ; otherwise works with no transaction."
msgstr "`@Transactional(NOT_SUPPORTED)` : トランザクションが開始されている場合、それを一時停止し、メソッドの境界ではトランザクションなしで動作します。開始されていない場合は、トランザクションなしで動作します。"

#: _versions/3.27/guides/transaction.adoc
msgid "`@Transactional(NEVER)`: if a transaction was started, raises an exception ; otherwise works with no transaction."
msgstr "`@Transactional(NEVER)` : トランザクションが開始されている場合は例外を発生させます。開始されていない場合はトランザクションなしで動作します。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"`REQUIRED` or `NOT_SUPPORTED` are probably the most useful ones.\n"
"This is how you decide whether a method is to be running within or outside a transaction.\n"
"Make sure to check the JavaDoc for the precise semantic."
msgstr "`REQUIRED` や `NOT_SUPPORTED` が最も便利なものでしょう。これは、メソッドがトランザクション内で実行されるか、トランザクション外で実行されるかを決定する方法です。正確な意味については、必ずJavaDocを確認してください。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"The transaction context is propagated to all calls nested in the `@Transactional` method as you would expect (in this example `childDAO.addToGiftList()` and `santaDAO.addToSantaTodoList()`).\n"
"The transaction will commit unless a runtime exception crosses the method boundary.\n"
"You can override whether an exception forces the rollback or not by using `@Transactional(dontRollbackOn=SomeException.class)` (or `rollbackOn`)."
msgstr "トランザクション・コンテキストは、予想通り `@Transactional` メソッドにネストされたすべての呼び出しに伝搬されます (この例では `childDAO.addToGiftList()` と `santaDAO.addToSantaTodoList()`)。ランタイム例外がメソッドの境界を越えない限り、トランザクションはコミットされます。例外が発生したときに強制的にロールバックするかどうかは、 `@Transactional(dontRollbackOn=SomeException.class)` (または `rollbackOn`) を使ってオーバーライドできます。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"You can also programmatically ask for a transaction to be marked for rollback.\n"
"Inject a `TransactionManager` for this."
msgstr "また、プログラムでトランザクションにロールバックのマークを付けることもできます。そのためには `TransactionManager` をインジェクトします。"

#: _versions/3.27/guides/transaction.adoc
msgid "Inject the `TransactionManager` to be able to activate `setRollbackOnly` semantic."
msgstr "`setRollbackOnly` のセマンティックを有効にするために、 `TransactionManager` をインジェクトします。"

#: _versions/3.27/guides/transaction.adoc
msgid "Programmatically decide to set the transaction for rollback."
msgstr "プログラムにより、トランザクションをロールバックするように設定します。"

#: _versions/3.27/guides/transaction.adoc
msgid "Transaction configuration"
msgstr "トランザクション設定"

#: _versions/3.27/guides/transaction.adoc
msgid "Advanced configuration of the transaction is possible with the use of the `@TransactionConfiguration` annotation that is set in addition to the standard `@Transactional` annotation on your entry method or at the class level."
msgstr "トランザクションの高度な設定は、エントリメソッドまたはクラスレベルで標準の `@Transactional` アノテーションに加えて設定される `@TransactionConfiguration` アノテーションを使用することで可能です。"

#: _versions/3.27/guides/transaction.adoc
msgid "The `@TransactionConfiguration` annotation allows to set a timeout property, in seconds, that applies to transactions created within the annotated method."
msgstr "`@TransactionConfiguration` アノテーションでは、タイムアウトのプロパティを秒単位で設定できます。それは、アノテーションされたメソッド内で作成されたトランザクションに適用されます。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"This annotation may only be placed on the top level method delineating the transaction.\n"
"Annotated nested methods once a transaction has started will throw an exception."
msgstr "このアノテーションは、トランザクションを定義するトップレベルのメソッドにのみ付けることができます。アノテーションされたネストされたメソッドでトランザクションが開始されると、例外がスローされます。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"If defined on a class, it is equivalent to defining it on all the methods of the class marked with `@Transactional`.\n"
"The configuration defined on a method takes precedence over the configuration defined on a class."
msgstr "クラスに定義されている場合、 `@Transactional` でマークされたクラスのすべてのメソッドに定義されているのと同じことになります。メソッドに定義された場合は、クラスに定義された設定よりも優先されます。"

#: _versions/3.27/guides/transaction.adoc
msgid "Reactive extensions"
msgstr "リアクティブエクステンション"

#: _versions/3.27/guides/transaction.adoc
msgid "If your `@Transactional`-annotated method returns a reactive value, such as:"
msgstr "もし, `@Transactional` アノテーション付与されたメソッドが、次のようなリアクティブな値を返す場合:"

#: _versions/3.27/guides/transaction.adoc
msgid "`CompletionStage` (from the JDK)"
msgstr "`CompletionStage` （JDKから）"

#: _versions/3.27/guides/transaction.adoc
msgid "`Publisher` (from Reactive-Streams)"
msgstr "`Publisher` (Reactive-Streamsから)"

#: _versions/3.27/guides/transaction.adoc
msgid "Any type that can be converted to one of the two previous types using Reactive Type Converters"
msgstr "リアクティブ・タイプ・コンバータを使用して、前の2つのタイプのいずれかに変換できるすべてのタイプ"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"then the behaviour is a bit different, because the transaction will not be terminated until the\n"
"returned reactive value is terminated. In effect, the returned reactive value will be listened to\n"
"and if it terminates exceptionally the transaction will be marked for rollback, and will be committed\n"
"or rolled-back only at termination of the reactive value."
msgstr "これらは、動作が少し異なり、返されたリアクティブ値が終了するまで、トランザクションは終了しません。実際には、返されたリアクティブ値を聞き、それが例外的に終了した場合、トランザクションはロールバックのためにマークされ、リアクティブ値の終了時にのみコミットまたはロールバックされることになります。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"This allows your reactive methods to keep on working on the transaction asynchronously until their\n"
"work is really done, and not just until the reactive method returns."
msgstr "これにより、リアクティブメソッドは、リアクティブメソッドが戻るまでではなく、その処理が本当に終了するまで、非同期でトランザクションを処理し続けることができます。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"If you need to propagate your transaction context across your reactive pipeline, please see the\n"
"xref:context-propagation.adoc[Context Propagation guide]."
msgstr "トランザクションコンテキストをリアクティブパイプラインに伝播させる必要がある場合は、 link:context-propagation.html[Context Propagationガイド]を参照してください。"

#: _versions/3.27/guides/transaction.adoc
msgid "Programmatic approach"
msgstr "プログラム的アプローチ"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"You can use static methods on `QuarkusTransaction` to define transaction boundaries. This provides two different options,\n"
"a functional approach that allows you to run a lambda within the scope of a transaction, or by using explicit `begin`,\n"
"`commit` and `rollback` methods."
msgstr "`QuarkusTransaction` の静的メソッドを使用して、トランザクションの境界を定義できます。これは、トランザクションの範囲内でラムダを実行できる関数的なアプローチと、明示的な `begin`,  `commit`,  `rollback` のメソッドを使用することによる2つの異なるオプションを提供します。"

#: _versions/3.27/guides/transaction.adoc
msgid "The above example shows a few different ways the API can be used."
msgstr "上記の例では、APIの使用方法のいくつか異なる方法を紹介しています。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"The first method simply calls begin, does some work and commits it.\n"
"This created transaction is tied to the CDI request scope, so if it is still active when the request scope is destroyed then it will\n"
"be automatically rolled back. This removes the need to explicitly catch exceptions and call `rollback`, and acts as a safety net\n"
"against inadvertent transaction leaks, however it does mean that this can only be used when the request scope is active. The second\n"
"example in the method calls begin with a timeout option, and then rolls back the transaction."
msgstr "最初の方法は、単純に begin を呼び出し、何らかの処理を行い、それをコミットするものです。この作成されたトランザクションはCDIリクエストスコープに関連付けられ、リクエストスコープが破棄されたときにまだアクティブであれば、自動的にロールバックされます。これにより、明示的に例外をキャッチしたり `rollback` を呼び出したりする必要がなくなり、 不用意なトランザクションリークに対するセーフティネットとして機能します。 しかし、これはリクエストスコープがアクティブであるときにしか使えないということになります。メソッド呼び出しの2番目の例は、タイムアウトオプションで開始し、トランザクションをロールバックします。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"The second method shows the use of lambda scoped transactions with `QuarkusTransaction.runner(...)`;\n"
"the first example just runs a `Runnable` within a new transaction,\n"
"the second does the same but joining the existing transaction (if any),\n"
"and the third calls a `Callable` with some specific options.\n"
"In particular the `exceptionHandler` method can be used to control if the transaction is rolled back or not on exception."
msgstr "2つ目のメソッドは、 `QuarkusTransaction.runner(...)` を使用したラムダスコープのトランザクションの使用を示しています。最初の例では、新しいトランザクション内で `Runnable` を実行し、2 番目の例では同じことをしますが、既存のトランザクション（もしあれば）に参加し、3 番目の例ではいくつかの特有のオプションを指定して `Callable` を呼び出します。 特に `exceptionHandler` メソッドは、例外が発生したときにトランザクションをロールバックするかどうかを制御するために使用することができます。"

#: _versions/3.27/guides/transaction.adoc
msgid "The following semantics are supported:"
msgstr "以下のセマンティクスがサポートされています:"

#: _versions/3.27/guides/transaction.adoc
msgid "`QuarkusTransaction.disallowingExisting()`/`DISALLOW_EXISTING`"
msgstr "`QuarkusTransaction.disallowingExisting()`/`DISALLOW_EXISTING`"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"If a transaction is already associated with the current thread a `QuarkusTransactionException` will be thrown,\n"
"otherwise a new transaction is started, and follows all the normal lifecycle rules."
msgstr "もしトランザクションがすでに現在のスレッドに関連していれば、 `QuarkusTransactionException` が投げられます。そうでなければ、新しいトランザクションが開始され、すべての通常のライフサイクルのルールに従います。"

#: _versions/3.27/guides/transaction.adoc
msgid "`QuarkusTransaction.joiningExisting()`/`JOIN_EXISTING`"
msgstr "`QuarkusTransaction.joiningExisting()`/`JOIN_EXISTING`"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"If no transaction is active then a new transaction will be started, and committed when the method ends.\n"
"If an exception is thrown the exception handler registered by `#exceptionHandler(Function)` will be called to\n"
"decide if the TX should be committed or rolled back.\n"
"If an existing transaction is active then the method is run in the context of the existing transaction. If an\n"
"exception is thrown the exception handler will be called, however\n"
"a result of `ExceptionResult#ROLLBACK` will result in the TX marked as rollback only, while a result of\n"
"`ExceptionResult#COMMIT` will result in no action being taken."
msgstr "トランザクションがアクティブでない場合、新しいトランザクションが開始され、メソッドの終了時にコミットされます。例外が発生した場合、 `#exceptionHandler(Function)` によって登録された例外ハンドラが呼び出され、TX をコミットするかロールバックするかを決定します。既存のトランザクションがアクティブである場合、メソッドは既存のトランザクションのコンテキストで実行されます。例外が発生した場合、例外ハンドラが呼び出されますが、 `ExceptionResult#ROLLBACK` の結果は、TX がロールバックのみとマークされ、一方 `ExceptionResult#COMMIT` の結果は、何も行われないという結果になります。"

#: _versions/3.27/guides/transaction.adoc
msgid "`QuarkusTransaction.requiringNew()`/`REQUIRE_NEW`"
msgstr "`QuarkusTransaction.requiringNew()`/`REQUIRE_NEW`"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"If an existing transaction is already associated with the current thread then the transaction is suspended,\n"
"then a new transaction is started which follows all the normal lifecycle rules,\n"
"and when it's complete the original transaction is resumed.\n"
"Otherwise, a new transaction is started, and follows all the normal lifecycle rules."
msgstr "もし既存のトランザクションがすでに現在のスレッドと関連付けられている場合、そのトランザクションは中断され、新しいトランザクションが開始され、すべての通常のライフサイクルルールに従います。その新しいトランザクションが完了すると元のトランザクションが再開されます。現在のスレッドと関連付けられているトランザクションがなければ、新しいトランザクションが開始され、すべての通常のライフサイクルルールに従います。"

#: _versions/3.27/guides/transaction.adoc
msgid "`QuarkusTransaction.suspendingExisting()`/`SUSPEND_EXISTING`"
msgstr "`QuarkusTransaction.suspendingExisting()`/`SUSPEND_EXISTING`"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"If no transaction is active then these semantics are basically a no-op.\n"
"If a transaction is active then it is suspended, and resumed after the task is run.\n"
"The exception handler will never be consulted when these semantics are in use, specifying both an exception handler and\n"
"these semantics are considered an error.\n"
"These semantics allows for code to easily be run outside the scope of a transaction."
msgstr "トランザクションがアクティブでない場合、このセマンティックは基本的にノー・オペレーションです。もしトランザクションがアクティブであれば、中断され、タスクの実行後に再開されます。このセマンティックが使用されている場合、例外ハンドラは決して参照されず、例外ハンドラとこのセマンティックの両方を指定することはエラーとみなされます。このセマンティックは、トランザクションの範囲外でコードを簡単に実行することを可能にします。"

#: _versions/3.27/guides/transaction.adoc
msgid "Legacy API approach"
msgstr "従来のAPIアプローチ"

#: _versions/3.27/guides/transaction.adoc
msgid "The less easy way is to inject a `UserTransaction` and use the various transaction demarcation methods."
msgstr "あまり簡単ではない方法としては、 `UserTransaction` を注入し、様々なトランザクション・デマケーションのメソッドを使用します。"

#: _versions/3.27/guides/transaction.adoc
msgid "You cannot use `UserTransaction` in a method having a transaction started by a `@Transactional` call."
msgstr "`@Transactional` によって呼び出されたトランザクションと持つメソッドでは、 `UserTransaction`  を使用できません。"

#: _versions/3.27/guides/transaction.adoc
msgid "Configuring the transaction timeout"
msgstr "トランザクションタイムアウトの設定"

#: _versions/3.27/guides/transaction.adoc
msgid "You can configure the default transaction timeout, the timeout that applies to all transactions managed by the transaction manager, via the property `quarkus.transaction-manager.default-transaction-timeout`, specified as a duration."
msgstr "デフォルトのトランザクション・タイムアウト、つまりトランザクション・マネージャーによって管理されるすべてのトランザクションに適用されるタイムアウトを、プロパティー `quarkus.transaction-manager.default-transaction-timeout` を使用して、期間として指定して構成することができます。"

#: _versions/3.27/guides/transaction.adoc
msgid "The default value is 60 seconds."
msgstr "デフォルト値は60秒です。"

#: _versions/3.27/guides/transaction.adoc
msgid "Configuring transaction node name identifier"
msgstr "トランザクションノード名識別子の設定"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"Narayana, as the underlying transaction manager, has a concept of a unique node identifier.\n"
"This is important if you consider using XA transactions that involve multiple resources."
msgstr "Narayanaは、基礎となるトランザクションマネージャーであり、一意のノード識別子の概念を持っています。これは、複数のリソースを含む XA トランザクションの使用を検討している場合に重要です。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"The node name identifier plays a crucial part in the identification of a transaction.\n"
"The node name identifier is forged into the transaction id when the transaction is created.\n"
"Based on the node name identifier, the transaction manager is capable of recognizing the XA transaction\n"
"counterparts created in database or JMS broker. The identifier makes possible for the transaction manager\n"
"to roll back the transaction counterparts during recovery."
msgstr "ノード名識別子はトランザクションの識別において重要な役割を果たします。ノード名識別子は、トランザクションが作成されるときに、トランザクションIDの作成に使用されます。ノード名識別子に基づいて、トランザクションマネージャーはデータベースまたはJMSブローカに作成されたXAトランザクションのカウンターパートを認識することができます。この識別子により、トランザクションマネージャーはリカバリ中にトランザクションのカウンターパートをロールバックすることが可能になる。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"The node name identifier needs to be unique per transaction manager deployment.\n"
"And the node identifier needs to be stable over the transaction manager restarts."
msgstr "ノード名識別子は、トランザクションマネージャーのデプロイメントごとに一意である必要があります。また、ノード識別子はトランザクションマネージャーの再起動時に変化しない必要があります。"

#: _versions/3.27/guides/transaction.adoc
msgid "The node name identifier may be configured via the property `quarkus.transaction-manager.node-name`."
msgstr "ノード名識別子は、プロパティー `quarkus.transaction-manager.node-name` を通じて設定することができます。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"The node name cannot be longer than 28 bytes.\n"
"To automatically shorten names longer than 28 bytes, set `quarkus.transaction-manager.shorten-node-name-if-necessary` to `true`."
msgstr ""
"ノード名は28バイトより長くできません。\n"
"28バイトより長い名前を自動的に短縮するには、 `quarkus.transaction-manager.shorten-node-name-if-necessary` を `true` に設定します。"

#: _versions/3.27/guides/transaction.adoc
msgid "Shortening is implemented by hashing the node name, encoding the hash to Base64 and then truncating the result. As with all hashes, the resulting shortened node name could potentially conflict with another shortened node name, but it is https://github.com/quarkusio/quarkus/issues/30491#issuecomment-1537247764[very unlikely]."
msgstr ""
"短縮は、ノード名をハッシュし、そのハッシュをBase64にエンコードし、その結果を切り捨てることで実装されます。\n"
"すべてのハッシュと同様に、短縮された結果のノード名は他の短縮されたノード名と衝突する可能性がありますが、その link:https://github.com/quarkusio/quarkus/issues/30491#issuecomment-1537247764[可能性はほとんどありません]。"

#: _versions/3.27/guides/transaction.adoc
msgid "Using `@TransactionScoped` to bind CDI beans to the transaction lifecycle"
msgstr "`@TransactionScoped` を使用し、CDI Bean をトランザクションライフサイクルにバインド"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"You can define beans that live for as long as a transaction,\n"
"and through CDI lifecycle events perform actions when a transaction starts and ends."
msgstr "トランザクションと同じ期間だけ有効なBeanを定義し、CDIライフサイクルイベントを通じて、トランザクションの開始と終了時にアクションを実行することができます。"

#: _versions/3.27/guides/transaction.adoc
msgid "Just assign the transaction xref:cdi.adoc#bean-scope[scope] to such beans using the `@TransactionScoped` annotation:"
msgstr "`@TransactionScoped` アノテーションを使用して、そのようなBeanにトランザクション xref:cdi.adoc#bean-scope[scope] を 割り当てるだけです。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"Alternatively, if you don't necessarily need to hold state during the transaction,\n"
"and just want to react to transaction start/end events,\n"
"you can simply declare event listeners in a differently scoped bean:"
msgstr "または、必ずしもトランザクション中に状態を保持する必要がなく、トランザクションの開始/終了イベントに反応したいだけであれば、別のスコープを持つBeanでイベントリスナーを宣言すればよいでしょう。"

#: _versions/3.27/guides/transaction.adoc
msgid "The `event` object represents the transaction ID, and defines `toString()`/`equals()`/`hashCode()` accordingly."
msgstr "`event` オブジェクトはトランザクション ID を表し、それに応じて `toString()` / `equals()` / `hashCode()` を定義しています。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"In listener methods, you can access more information about the transaction in progress by accessing the `TransactionManager`,\n"
"which is a CDI bean and can be ``@Inject``ed."
msgstr "リスナーメソッドでは、CDI Beanであり、 `@Inject` 出来る `TransactionManager` にアクセスすることで、進行中のトランザクションに関するより多くの情報にアクセスすることができます。"

#: _versions/3.27/guides/transaction.adoc
msgid "Configure storing of Quarkus transaction logs in a database"
msgstr "Quarkusのトランザクションログをデータベースに保存する設定"

#: _versions/3.27/guides/transaction.adoc
msgid "In cloud environments where persistent storage is not available, such as when application containers are unable to use persistent volumes, you can configure the transaction management to store transaction logs in a database by using a Java Database Connectivity (JDBC) datasource."
msgstr "アプリケーションコンテナが永続ボリュームを使用できない場合など、永続ストレージを使用できないクラウド環境では、Java Database Connectivity（JDBC）データソースを使用してトランザクションログをデータベースに格納するようにトランザクション管理を構成できます。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"However, in cloud-native apps, using a database to store transaction logs has additional requirements.\n"
"The `narayana-jta` extension, which manages these transactions, requires stable storage, a unique reusable node identifier, and a steady IP address to work correctly.\n"
"While the JDBC object store provides a stable storage, users must still plan how to meet the other two requirements."
msgstr ""
"しかし、クラウドネイティブアプリでは、トランザクションログを保存するためにデータベースを使用すると、追加の要件があります。\n"
"これらのトランザクションを管理する `narayana-jta` エクステンションが正しく動作するには、安定したストレージ、再利用可能な一意のノード識別子、安定した IP アドレスが必要です。\n"
"JDBCオブジェクトストアは安定したストレージを提供しますが、ユーザーは他の2つの要件を満たす方法を計画する必要があります。"

#: _versions/3.27/guides/transaction.adoc
msgid "Quarkus, after you evaluate whether using a database to store transaction logs is right for you, allows the following JDBC-specific configuration of the object store included in `quarkus.transaction-manager.object-store._<property>_` properties, where _<property>_ can be:"
msgstr ""
"Quarkusでは、トランザクションログの保存にデータベースを使用することが適切かどうかを評価したら、 `quarkus.transaction-manager.object-store. _<property>_` プロパティで次のようにオブジェクトストアのjdbc固有の設定を行うことができます。  \n"
"ここで、 _<property>_ は次のとおりです:"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"`type` (_string_): Configure this property to `jdbc` to enable usage of a Quarkus JDBC datasource for storing transaction logs.\n"
"The default value is `file-system`."
msgstr ""
"`type` (_string_)：トランザクションログの保存にQuarkus JDBCデータソースを使用できるようにするには、このプロパティを `jdbc` に設定します。\n"
"デフォルト値は `file-system` です。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"`datasource` (_string_): Specify the name of the datasource for the transaction log storage.\n"
"If no value is provided for the `datasource` property, Quarkus uses the xref:datasource.adoc#configure-datasources[default datasource]."
msgstr "`datasource` (_string_）：トランザクションログストレージのデータソース名を指定します。 ］プロパティに値が指定されていない場合、Quarkusは `datasource` xref:datasource.adoc#configure-datasources[デフォルトのデータソース] を使用します。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"`create-table` (_boolean_): When set to `true`, the transaction log table gets automatically created if it does not already exist.\n"
"The default value is `false`."
msgstr ""
"`create-table` (_boolean_）: `true` に設定すると、トランザクション・ログ・テーブルが存在しない場合、自動的に作成されます。\n"
"デフォルト値は `false` です。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"`drop-table` (_boolean_): When set to `true`, the tables are dropped on startup if they already exist.\n"
"The default value is `false`."
msgstr ""
"`drop-table` (_boolean_）: `true` に設定すると、テーブルが既に存在する場合は起動時に削除されます。\n"
"デフォルト値は `false` です。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"`table-prefix` (string): Specify the prefix for a related table name.\n"
"The default value is `quarkus_`."
msgstr ""
"`table-prefix` (string）：関連テーブル名のプレフィックスを指定します。\n"
"デフォルト値は `quarkus_` です。"

#: _versions/3.27/guides/transaction.adoc
msgid "For more configuration information, see the *Narayana JTA - Transaction manager* section of the Quarkus xref:all-config.adoc[All configuration options] reference."
msgstr "設定の詳細については、Quarkus xref:all-config.adoc[全設定オプション] リファレンスの *Narayana JTA - Transaction manager* セクションを参照してください。"

#: _versions/3.27/guides/transaction.adoc
msgid "Additional information:"
msgstr "追加情報"

#: _versions/3.27/guides/transaction.adoc
msgid "Create the transaction log table during the initial setup by setting the `create-table` property to `true`."
msgstr "`create-table` プロパティを `true` に設定して、初期セットアップ中にトランザクション・ログ・テーブルを作成します。"

#: _versions/3.27/guides/transaction.adoc
msgid "JDBC datasources and ActiveMQ Artemis allow the enlistment and automatically register the `XAResourceRecovery`."
msgstr "JDBCデータソースとActiveMQ Artemisは、 `XAResourceRecovery` を自動的に登録します。"

#: _versions/3.27/guides/transaction.adoc
msgid "JDBC datasources is part of `quarkus-agroal`, and it needs to use `quarkus.datasource.jdbc.transactions=XA`."
msgstr "JDBC データソースは `quarkus-agroal` の一部であり、 `quarkus.datasource.jdbc.transactions=XA` を使用する必要があります。"

#: _versions/3.27/guides/transaction.adoc
msgid "ActiveMQ Artemis is part of `quarkus-pooled-jms`, and it needs to use `quarkus.pooled-jms.transaction=XA`."
msgstr "ActiveMQ Artemis は `quarkus-pooled-jms` の一部であり、 `quarkus.pooled-jms.transaction=XA` を使用する必要があります。"

#: _versions/3.27/guides/transaction.adoc
msgid "To ensure data integrity in case of application crashes or failures, enable the transaction crash recovery with the `quarkus.transaction-manager.enable-recovery=true` configuration."
msgstr "アプリケーションのクラッシュや障害が発生した場合にデータの整合性を確保するには、 `quarkus.transaction-manager.enable-recovery=true` 設定でトランザクションのクラッシュリカバリを有効にします。"

#: _versions/3.27/guides/transaction.adoc
msgid "To work around the current known issue of link:https://issues.redhat.com/browse/AG-209[Agroal having a different view on running transaction checks], set the datasource transaction type for the datasource responsible for writing the transaction logs to `disabled`:"
msgstr "link:https://issues.redhat.com/browse/AG-209[トランザクションチェックを実行する際に Agroal が異なるビューを持つ] という現在の既知の問題を回避するには、トランザク ションログの書き込みを担当するデータソースのトランザクションタイプを `disabled` に設定します："

#: _versions/3.27/guides/transaction.adoc
msgid "quarkus.datasource.TX_LOG.jdbc.transactions=disabled"
msgstr "quarkus.datasource.TX_LOG.jdbc.transactions=disabled"

#: _versions/3.27/guides/transaction.adoc
msgid "This example uses TX_LOG as the datasource name."
msgstr "この例では、データソース名としてTX_LOGを使用しています。"

#: _versions/3.27/guides/transaction.adoc
msgid "Why always having a transaction manager?"
msgstr "なぜ常にトランザクションマネージャーを持っているのか?"

#: _versions/3.27/guides/transaction.adoc
msgid "Does it work everywhere I want to?"
msgstr "使いたいところなら、どこでも使えるのでしょうか？"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"Yep, it works in your Quarkus application, in your IDE, in your tests, because all of these are Quarkus applications.\n"
"JTA has some bad press for some people.\n"
"I don't know why.\n"
"Let's just say that this is not your grandpa's JTA implementation.\n"
"What we have is perfectly embeddable and lean."
msgstr "はい、Quarkusアプリケーションでも、IDEでも、テストでも動作します。JTAは一部の人に悪評があります。なぜかはわかりません。これはあなたのおじいちゃんのJTA実装ではないとは言っておきましょう。私たちが持っているものは、完全に埋め込み可能で無駄がありません。"

#: _versions/3.27/guides/transaction.adoc
msgid "Does it do 2 Phase Commit and slow down my app?"
msgstr "それは2フェーズコミットを行い、私のアプリの速度を遅くしますか?"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"No, this is an old folk tale.\n"
"Let's assume it essentially comes for free and let you scale to more complex cases involving several datasources as needed."
msgstr "いや、これは昔話です。基本的にはフリーで提供され、必要に応じて複数のデータソースを含むより複雑なケースにも対応できると考えてください。"

#: _versions/3.27/guides/transaction.adoc
msgid "I don't need transaction when I do read only operations, it's faster."
msgstr "読み込み専用の操作をするときにはトランザクションはいらないので、その方が早いですね。"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"Wrong. +\n"
"First off, just disable the transaction by marking your transaction boundary with `@Transactional(NOT_SUPPORTED)` (or `NEVER` or `SUPPORTS` depending on the semantic you want). +\n"
"Second, it's again fairy tale that not using transaction is faster.\n"
"The answer is, it depends on your DB and how many SQL SELECTs you are making.\n"
"No transaction means the DB does have a single operation transaction context anyway. +\n"
"Third, when you do several SELECTs, it's better to wrap them in a single transaction because they will all be consistent with one another.\n"
"Say your DB represents your car dashboard, you can see the number of kilometers remaining and the fuel gauge level.\n"
"By reading it in one transaction, they will be consistent.\n"
"If you read one and the other from two different transactions, then they can be inconsistent.\n"
"It can be more dramatic if you read data related to rights and access management for example."
msgstr "それは誤りです。+ まず第一に、トランザクションの境界を `@Transactional(NOT_SUPPORTED)` (または `NEVER` または `SUPPORTS` ) でマークすることで、トランザクションを無効にしてください。+ 第二に、トランザクションを使用しない方が速いというのは、またしてもおとぎ話です。答えは、それはDBとSQLのSELECT回数に依存します。トランザクションを使用しないということは、DBが単一操作のトランザクションコンテキストを持っていることを意味します。+ 第三に、複数のSELECTを実行する場合は、一つのトランザクションにまとめる方が全てのSELECTに一貫性が保たれます。DBが車のダッシュボードを表しているとすると、残りキロ数と燃料計のレベルなどを見ることができます。それを1つのトランザクションで読み取ることで、それらは整合性を保つことができます。 もし、2つの異なるトランザクションから一方と他方を読み取れば、それらは矛盾することがあります。例えば、権限やアクセス管理に関連するデータを読み取る場合は、より劇的なことが起こる可能性があります。"

#: _versions/3.27/guides/transaction.adoc
msgid "Why do you prefer JTA vs Hibernate's transaction management API"
msgstr "Hibernateのトランザクション管理APIではなくJTAを好む理由"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"Managing the transactions manually via `entityManager.getTransaction().begin()` and friends lead to a butt ugly code with tons of try catch finally that people get wrong.\n"
"Transactions are also about JMS and other database access, so one API makes more sense."
msgstr "`entityManager.getTransaction().begin()` やその類似を経由して手動でトランザクションを管理すると、最終的に人々が間違えるような試行回数の多い醜いコードになってしまいます。トランザクションはまた、JMSと他のデータベースアクセスについてですので、1つのAPIはより多くの理にかなっています。"

#: _versions/3.27/guides/transaction.adoc
msgid "It's a mess because I don't know if my Jakarta Persistence persistence unit is using `JTA` or `Resource-level` Transaction"
msgstr "Jakarta Persistenceの永続化ユニットが `JTA` 、 `Resource-level` Transactionのどちらを使用しているのかが分からず混乱します"

#: _versions/3.27/guides/transaction.adoc
msgid ""
"It's not a mess in Quarkus :)\n"
"Resource-level was introduced to support Jakarta Persistence in a non-managed environment.\n"
"But Quarkus is both lean and a managed environment, so we can safely always assume we are in JTA mode.\n"
"The end result is that the difficulties of running Hibernate ORM + CDI + a transaction manager in Java SE mode are solved by Quarkus."
msgstr ""
"Quarkusでは混乱しません :)\n"
"リソースレベルは、非マネージド環境でjakarta Persistenceをサポートするために導入されました。\n"
"しかし、Quarkusはリーン環境であると同時にマネージド環境でもあるため、常にJTAモードであると安全に想定することができます。\n"
"その結果、Java SEモードでHibernate ORM + CDI + トランザクションマネージャを実行することの難しさは、Quarkusによって解決されました。"
