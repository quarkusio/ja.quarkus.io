msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/funqy-http.adoc
msgid "Funqy HTTP Binding (Standalone)"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"The guide walks through quickstart code to show you how you can deploy Funqy as a\n"
"standalone service and invoke on Funqy functions using HTTP."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"The Funqy HTTP binding is not a replacement for REST over HTTP.  Because Funqy\n"
"needs to be portable across a lot of different protocols and function providers its HTTP binding\n"
"is very minimalistic and you will lose REST features like linking and the ability to leverage\n"
"HTTP features like cache-control and conditional GETs.  You may want to consider using Quarkus's\n"
"Jakarta REST, Spring MVC, or Vert.x Web Reactive Routes support instead, although Funqy will have less overhead\n"
"than these alternatives (except Vert.x which is still super fast)."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "Read about xref:funqy.adoc[Funqy Basics].  This is a short read!"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "The Quickstart"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "The solution is located in the `funqy-http-quickstart` link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "The Code"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"If you look at the Java code, you'll see that there is no HTTP specific API.  Its just simple Java methods\n"
"annotated with `@Funq`.  Simple, easy, straightforward."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "Maven Dependencies"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "To write Funqy HTTP functions, simply include the `quarkus-funqy-http` dependency into your Quarkus `pom.xml` file:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "Build Project"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "This starts your functions in Quarkus dev mode."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "Execute Funqy HTTP functions"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"The URL path to execute a function is the function name.  For example if your function name is `foo` then the URL path\n"
"to execute the function would be `/foo`."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"The HTTP POST or GET methods can be used to invoke on a function.  The return value of the function\n"
"is marshalled to JSON using the Jackson JSON library.  Jackson annotations can be used.  If your function\n"
"has an input parameter, a POST invocation must use JSON as the input type.  Jackson is also used here for unmarshalling."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"You can invoke the `hello` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]\n"
"by pointing your browser to http://localhost:8080/hello"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"Invoking the other functions in the quickstart requires an HTTP POST.\n"
"To execute the `greet` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/GreetingFunction.java[GreetingFunction.java]\n"
"invoke this curl script."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"Primitive types can also be passed as input using the standard JSON mapping for them.\n"
"To execute the `toLowerCase` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]\n"
"invoke this curl script:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"To execute the `double` function defined in link:{quickstarts-tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/PrimitiveFunctions.java[PrimitiveFunctions.java]\n"
"invoke this curl script:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "GET Query Parameter Mapping"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"For GET requests, the Funqy HTTP Binding also has a query parameter mapping for function input parameters.\n"
"Only bean style classes and `java.util.Map` can be used for your input parameter.  For bean style\n"
"classes, query parameter names are mapped to properties on the bean class.  Here's an example of a simple\n"
"`Map`:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"Key values must be a primitive type (except char) or `String`.  Values can be primitives (except char), `String`, `OffsetDateTime` or a complex\n"
"bean style class.  For the above example, here's the corresponding curl request:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "The `map` input parameter of the `hello` function would have the key value pairs: `a`->1, `b`->2."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "Bean style classes can also be use as the input parameter type.  Here's an example:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"Property values can be any primitive type except `char`. It can also be `String`, and `OffsetDateTime`.\n"
"`OffsetDateTime` query param values must be in ISO-8601 format."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "You can invoke on this using an HTTP GET and query parameters:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "In the above request, the query parameter names are mapped to corresponding properties in the input class."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "The input class can also have nested bean classes.  Expanding on the previous example:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "In this case, query parameters for nested values use the `.` notation.  For example:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "`java.util.List` and `Set` are also supported as property values.  For example:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "To invoke a GET request, just list the `pets` query parameter multiple times."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"For more complex types, `List` and `Set` members must have an identifier in the\n"
"query parameter.  For example:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"Each `kids` query parameter must identify the kid they are referencing so that\n"
"the runtime can figure out which\n"
"property values go to which members in the list.  Here's the curl request:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"The above URL uses the value `1` and `2` to identity the target member of the list, but any unique\n"
"string can be used."
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid ""
"A property can also be a `java.util.Map`.  The key of the map can be any primitive type and `String`.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "The corresponding call would look like this:"
msgstr ""

#: _versions/3.27/guides/funqy-http.adoc
msgid "If your `Map` value is a complex type, then just continue the notation by adding the property to set at the end."
msgstr ""
