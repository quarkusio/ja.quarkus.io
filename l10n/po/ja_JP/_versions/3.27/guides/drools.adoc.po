msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/drools.adoc
msgid "Defining and executing business rules with Drools"
msgstr "Drools によるビジネスルールの定義と実行"

#: _versions/3.27/guides/drools.adoc
msgid ""
"This guide demonstrates how your Quarkus application can use https://www.drools.org[Drools] to add intelligent automation\n"
"and power it up with the Drools rule engine."
msgstr "このガイドでは、Quarkus アプリケーションが https://www.drools.org[Drools] を活用してインテリジェントな自動化を実現し、Drools ルールエンジンで強化する方法を紹介します。"

#: _versions/3.27/guides/drools.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.27/guides/drools.adoc
msgid "Introduction"
msgstr "はじめに"

#: _versions/3.27/guides/drools.adoc
msgid "https://www.drools.org[Drools] is a set of projects focusing on intelligent automation and decision management, most notably providing a forward-chaining and backward-chaining inference-based rule engine, DMN decisions engine and other projects. A rule engine is a fundamental building block to create an expert system which, in artificial intelligence, is a computer system that emulates the decision-making ability of a human expert. You can read more information on the https://www.drools.org[Drools website]."
msgstr "https://www.drools.org[Drools] は、インテリジェントな自動化と意思決定管理に焦点を当てた一連のプロジェクトであり、特に前向き連鎖と後向き連鎖の推論ベースのルールエンジン、DMN 意思決定エンジン、およびその他のプロジェクトを提供しています。ルールエンジンは、人工知能において、人間の専門家の意思決定能力をエミュレートするコンピューターシステムであるエキスパートシステムを作成するための基本的な設定要素です。詳細は、 https://www.drools.org[Drools の Web サイト] を参照してください。"

#: _versions/3.27/guides/drools.adoc
msgid "Drools allows defining rules with 2 different programming styles: one more traditional based on the concepts of a KieBase acting as a repository of business rules and a KieSession storing and evaluating the runtime data against them, and the other using a Rule Unit as a single abstraction that encapsulates the definitions of both a set of rules and the facts against which those rules will be matched."
msgstr "Drools では、2 つの異なるプログラミングスタイルでルールを定義できます。1 つは、ビジネスルールのリポジトリーとして機能する KieBase と、それらに対して実行時データを保存および評価する KieSession の概念に基づいた、より伝統的なスタイルです。もう 1 つは、ルールセットとそれらのルールが照合されるファクトの両方の定義をカプセル化する単一の抽象化としてルールユニットを使用するスタイルです。"

#: _versions/3.27/guides/drools.adoc
msgid "Both these styles are fully supported in the Drools Quarkus extension and this document explains how to use both, outlining the pros and cons of each one."
msgstr "これら両方のスタイルは Drools Quarkus エクステンションで完全にサポートされており、このドキュメントでは両方の使用方法を説明し、それぞれの長所と短所を概説します。"

#: _versions/3.27/guides/drools.adoc
msgid "Integrating the traditional Drools programming model with Quarkus"
msgstr "従来の Drools プログラミングモデルと Quarkus の統合"

#: _versions/3.27/guides/drools.adoc
msgid "This first example demonstrates how to define a set of rules using the traditional Drools style and how to expose their evaluation inside a REST endpoint through Quarkus."
msgstr "この最初の例では、従来の Drools スタイルを使用してルールセットを定義する方法と、Quarkus を介して REST エンドポイント内でその評価を公開する方法を示します。"

#: _versions/3.27/guides/drools.adoc
msgid "The domain model of this sample project is made only by two classes, a loan application"
msgstr "このサンプルプロジェクトのドメインモデルは、ローン申請と"

#: _versions/3.27/guides/drools.adoc
msgid "and the applicant who requested it"
msgstr "そしてその申請者の 2 つのクラスのみで構成されています。"

#: _versions/3.27/guides/drools.adoc
msgid "The rules set is made of business decisions to approve or reject an application plus one last rule collecting all the approved applications into a list."
msgstr "ルールセットは、アプリケーションを承認または拒否するビジネス上の決定と、承認されたすべてのアプリケーションをリストに収集する最後の 1 つのルールで設定されます。"

#: _versions/3.27/guides/drools.adoc
msgid "The goal that we want to achieve is putting the evaluation of these rules in a microservice, exposing them in a REST endpoint developed with Quarkus. To do so it is enough to add the Drools Quarkus extension among the dependencies of your project."
msgstr "目標として、マイクロサービスに、これらのルールの評価を配置し、Quarkus で開発した REST エンドポイントに公開します。これには、プロジェクトの依存関係に Drools Quarkus エクステンションを追加するだけで十分です。"

#: _versions/3.27/guides/drools.adoc
msgid "and at this point it is possible to obtain a reference to the KieSession evaluating the formerly defined rules and use it in a REST endpoint as it follows:"
msgstr "この時点で、以前に定義したルールを評価する KieSession への参照を取得し、次のように REST エンドポイントで使用することができます。"

#: _versions/3.27/guides/drools.adoc
msgid "where an implementation of the `KieRuntimeBuilder` interface is automatically generated and made injectable for you by the Drools extension and allows to obtain with a single statement an instance of any KieBases and KieSessions defined in your Drools project."
msgstr "ここで、 `KieRuntimeBuilder` インターフェイスの実装は Drools エクステンションによって自動的に生成され、挿入可能になり、Drools プロジェクトで定義された任意の KieBases および KieSessions のインスタンスを 1 つのステートメントで取得できるようになります。"

#: _versions/3.27/guides/drools.adoc
msgid "Here the `LoanAppDto` is a simple POJO used to submit multiple loan application to the same KieSession"
msgstr "ここで、 `LoanAppDto` は、同じ KieSession に複数のローン申請を送信する場合に使用される単純な POJO です。"

#: _versions/3.27/guides/drools.adoc
msgid "thus trying for example to invoke that endpoint with a set of loan applications"
msgstr "たとえば、ローン申請のセットでそのエンドポイントを呼び出そうとすると"

#: _versions/3.27/guides/drools.adoc
msgid "the rule engine will evaluate them against the business rules we have configured before, returning the only one that in this case can be approved according to them"
msgstr "ルールエンジンは、事前に設定したビジネスルールに基づいてそれらを評価し、その中で承認可能なものを 1 つだけ返します。"

#: _versions/3.27/guides/drools.adoc
msgid "Moving to the rule unit programming model"
msgstr "ルールユニットプログラミングモデルへの移行"

#: _versions/3.27/guides/drools.adoc
msgid "A rule unit is a new concept introduced in Drools encapsulating both a set of rules and the facts against which those rules will be matched. It comes with a second abstraction called data source, defining the sources through which the facts are inserted, acting in practice as typed entry-points. There are two types of data sources:"
msgstr "ルールユニットは、ルールセットとそれらのルールが照合されるファクトの両方をカプセル化する、Drools で導入された新しい概念です。これには、ファクトが挿入されるソースを定義するデータソースと呼ばれる 2 番目の抽象化が付属しており、実際には型付きエントリーポイントとして機能します。データソースには 2 つの種類があります。"

#: _versions/3.27/guides/drools.adoc
msgid "DataStream: an append-only data source"
msgstr "DataStream: 追加のみのデータソースです。"

#: _versions/3.27/guides/drools.adoc
msgid "subscribers only receive new (and possibly past) messages"
msgstr "サブスクライバーは新しいメッセージ (および過去のメッセージ) のみを受信します"

#: _versions/3.27/guides/drools.adoc
msgid "cannot update/remove"
msgstr "更新/削除できません"

#: _versions/3.27/guides/drools.adoc
msgid "stream may also be hot/cold in “reactive streams” terminology"
msgstr "“リアクティブストリーム“ の用語では、ストリームはホット/コールドでも問題ない"

#: _versions/3.27/guides/drools.adoc
msgid "DataStore: data source for modifiable data"
msgstr "DataStore: 変更可能なデータのデータソース"

#: _versions/3.27/guides/drools.adoc
msgid "subscribers may act upon the data store, by acting upon the fact handle"
msgstr "サブスクライバーはファクトハンドルを操作してデータストアを操作できる。"

#: _versions/3.27/guides/drools.adoc
msgid "In order to use rule units in our quarkus application it is necessary to add a second dependency."
msgstr "quarkus アプリケーションでルールユニットを使用するには、2 番目の依存関係を追加する必要があります。"

#: _versions/3.27/guides/drools.adoc
msgid "In essence a rule unit is made of 2 strictly related parts: the definition of the fact to be evaluated and the set of rules evaluating them. The first part is implemented with a POJO, that for the loan example could be something like the following:"
msgstr "本質的に、ルールユニットは、評価されるファクトの定義と、それらを評価するルールのセットという、厳密に関連した 2 つの部分で構成されます。最初の部分は POJO で実装され、ローンの例では次のようになります。"

#: _versions/3.27/guides/drools.adoc
msgid "Here instead of using the `LoanAppDto` that we introduced to marshall/unmarshall the JSON requests we are binding directly the class representing the rule unit. The two relevant differences are that it implements the `RuleUnitData` interface and uses a `DataStore` instead of a plain `List` containing the loan applications to be approved. The first is just a marker interface to notify the engine that this class is part of a rule unit definition. The use of a `DataStore` is necessary to let the rule engine to react accordingly to the changes by firing new rules and triggering other rules. In the example, the consequences of the rules modify the approved property of the loan applications. Conversely, the `maxAmount` value can be considered a configuration parameter of the rule unit and left as it is: it will automatically be processed during the rules evaluation with the same semantic of a global, and automatically set from the value passed by the JSON request as in the first example, so you will still be allowed to use it in your rules."
msgstr "ここでは、JSONリクエストのマーシャリング/アンマーシャリングに導入した `LoanAppDto` を使用するのではなく、ルールユニットを表すクラスを直接バインドしています。2つの重要な違いは、このクラスが `RuleUnitData` インターフェイスを実装していること、そして、承認対象のローン申請を含む単純な List の代わりに DataStore を使用していることです。前者は、このクラスがルールユニット定義の一部であることをエンジンに通知するための単なるマーカーインターフェイスです。 `DataStore` は、ルールエンジンが変更に応じて適切に反応し、新しいルールを実行したり、他のルールをトリガーしたりできるように使用する必要があります。この例では、ルールの結果としてローン申請の `approved` プロパティーが変更されます。逆に、 `maxAmount` の値はルールユニットの設定パラメーターと見なすことができ、そのままにできます。これは、ルール評価中にグローバルと同じセマンティクスで自動的に処理され、最初の例のように JSONリクエストによって渡された値から自動的に設定されるため、引き続きルールで使用できます。"

#: _versions/3.27/guides/drools.adoc
msgid "The second part of the rule unit is the drl file containing the rules belonging to this unit."
msgstr "ルールユニットの 2 番目の部分は、このユニットに属するルールを含む drl ファイルです。"

#: _versions/3.27/guides/drools.adoc
msgid "This rules file must declare the same package and a unit with the same name of the Java class implementing the `RuleUnitData` interface in order to state that they belong to the same rule unit."
msgstr "このルールファイルでは、同じルールユニットに属していることを示すために、 `RuleUnitData` インターフェイスを実装する Java クラスと同じパッケージと、同じ名前のユニットを宣言する必要があります。"

#: _versions/3.27/guides/drools.adoc
msgid "This file has also been rewritten using the new OOPath notation: as anticipated, here the data source acts as a typed entry-point and the oopath expression has its name as root while the constraints are in square brackets, like in the following example."
msgstr "このファイルも、新しい OOPath 表記法を使用して書き直されています。予想どおり、ここではデータソースが型指定されたエントリーポイントとして機能し、oopath 式の名前はルートとして設定され、制約は次の例のように角括弧で囲まれています。"

#: _versions/3.27/guides/drools.adoc
msgid "Alternatively you can still use the old DRL syntax, specifying the name of the data source as an entry-point, with the drawback that in this case you need to specify again the type of the matched object, even if the engine can infer it from the type of the datasource, as it follows."
msgstr "または、データソースの名前をエントリーポイントとして指定する古い DRL 構文を使用することもできますが、この場合、エンジンがデータソースのタイプから推測できる場合でも、一致するオブジェクトのタイプを再度指定する必要があるという欠点があります。"

#: _versions/3.27/guides/drools.adoc
msgid "Finally note that the last rule collecting all the approved loan applications into a global `List` has been replaced by a query simply retrieving them. One of the advantages in using a rule unit is that it clearly defines the context of computation, in other terms the facts to be passed in input to the rule evaluation. Similarly, the query defines what is the output expected by this evaluation."
msgstr "最後に、承認されたローン申請をすべてグローバルな `List` に収集する最後のルールが、単にそれらを取得するクエリーに置き換えられたことに注意してください。ルールユニットを使用する利点の 1 つとして、計算のコンテキスト、つまりルール評価に入力として渡される事実を明確に定義できる点が挙げられます。同様に、クエリーはこの評価によって想定される出力を定義します。"

#: _versions/3.27/guides/drools.adoc
msgid "This clear definition of the computation boundaries allows Drools to also automatically generate a class executing the query and returning its results, together with a REST endpoint taking the rule unit as input, passing it to the former query executor and returning its as output."
msgstr "この計算境界の明確な定義により、Drools はクエリーを実行してその結果を返すクラスを自動的に生成し、ルールユニットを入力として受け取り、それを以前のクエリー実行者に渡して出力として返す REST エンドポイントも生成できます。"

#: _versions/3.27/guides/drools.adoc
msgid "You can have as many query as you want and for each of them it will be generated a different REST endpoint with the same name of the query transformed from camel case (like `FindApproved`) to dash separated (like `find-approved`)."
msgstr "必要な数のクエリーを作成でき、クエリーごとに、キャメルケース (`FindApproved` など) からダッシュ区切り (`find-approved` など) に変換された同じクエリー名を持つ異なる REST エンドポイントが生成されます。"

#: _versions/3.27/guides/drools.adoc
msgid "A more comprehensive example"
msgstr "より包括的な例"

#: _versions/3.27/guides/drools.adoc
msgid "In this more comprehensive and complete example, we will augment a basic Quarkus application with a few simple rules to infer potential issues with the status of a home automation setup."
msgstr "このより包括的で完全な例では、基本的な Quarkus アプリケーションにいくつかの簡単なルールを追加して、ホームオートメーション設定の状態で発生する可能性のある問題を推測します。"

#: _versions/3.27/guides/drools.adoc
msgid "We will define a Drools Rule Unit and the rules in the DRL format."
msgstr "Drools ルールユニットとルールを DRL 形式で定義します。"

#: _versions/3.27/guides/drools.adoc
msgid "We will wire the Rule Unit into a standard Quarkus CDI bean, for use in the Quarkus application (for instance, wiring MQTT messages from Kafka, etc.)."
msgstr "Quarkus アプリケーションで使用するために、Rule Unit を標準の Quarkus CDI Bean に接続します (たとえば、Kafka からの MQTT メッセージの接続など)。"

#: _versions/3.27/guides/drools.adoc
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です:"

#: _versions/3.27/guides/drools.adoc
msgid "less than 15 minutes"
msgstr "15 分弱"

#: _versions/3.27/guides/drools.adoc
msgid "an IDE"
msgstr "IDE"

#: _versions/3.27/guides/drools.adoc
msgid "JDK 17+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 17+がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#: _versions/3.27/guides/drools.adoc
msgid "Apache Maven 3.9.3+"
msgstr "Apache Maven 3.9.3 以降"

#: _versions/3.27/guides/drools.adoc
msgid "Docker"
msgstr "Docker"

#: _versions/3.27/guides/drools.adoc
msgid "link:{https://quarkus.io/guides/building-native-image}[GraalVM installed] if you want to run in native mode"
msgstr "link:{https://quarkus.io/guides/building-native-image} [GraalVM がインストールされている] (ネイティブモードで実行する場合)"

#: _versions/3.27/guides/drools.adoc
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.27/guides/drools.adoc
msgid ""
"First, we need a new Quarkus project.\n"
"To create a new Quarkus project, you can reference the link:{https://quarkus.io/guides/maven-tooling}[Quarkus and Maven Guide]"
msgstr ""
"まず、新しい Quarkus プロジェクトが必要です。\n"
"新しい Quarkus プロジェクトを作成するには、{https://quarkus.io/guides/maven-tooling} [Quarkus と Maven ガイド] を参照してください。"

#: _versions/3.27/guides/drools.adoc
msgid "When you have your Quarkus project configured, you can add the Drools Quarkus extensions to your project by adding the following dependencies to your `pom.xml`:"
msgstr "Quarkus プロジェクトを設定したら、次の依存関係を `pom.xml` に追加することで、Drools Quarkus エクステンションをプロジェクトに追加できます。"

#: _versions/3.27/guides/drools.adoc
msgid "Writing the application"
msgstr "アプリケーションの記述"

#: _versions/3.27/guides/drools.adoc
msgid "Let's start from the application domain model."
msgstr "アプリケーションドメインモデルから始めましょう。"

#: _versions/3.27/guides/drools.adoc
msgid "This application goal is to infer potential issues with the status of a home automation setup, so we create the necessary domain models to represent status of sensors, devices and other things inside the house."
msgstr "このアプリケーションの目標は、ホームオートメーション設定の状態に関して発生する可能性のある問題を推測することであるため、家の中のセンサー、デバイス、その他のものの状態を表すために必要なドメインモデルを作成します。"

#: _versions/3.27/guides/drools.adoc
msgid "Light device domain model:"
msgstr "軽量のデバイスドメインモデル: "

#: _versions/3.27/guides/drools.adoc
msgid "CCTV security camera domain model:"
msgstr "CCTV セキュリティーカメラドメインモデル: "

#: _versions/3.27/guides/drools.adoc
msgid "Smartphone detected in WiFi domain model:"
msgstr "WiFi ドメインモデルで検出されたスマートフォン: "

#: _versions/3.27/guides/drools.adoc
msgid "Alert class to hold information of the potential detected problems:"
msgstr "問題が発生する可能性のあると検出された情報を保持するアラートクラス: "

#: _versions/3.27/guides/drools.adoc
msgid "Next, we create a rule file `rules.drl` inside the `src/main/resources/org/drools/quarkus/quickstart/test` folder of the Quarkus project."
msgstr "次に、Quarkus プロジェクトの `src/main/resources/org/drools/quarkus/quickstart/test` フォルダー内にルールファイル `rules.drl` を作成します。"

#: _versions/3.27/guides/drools.adoc
msgid "In this file there are some example rules to decide whether the overall status of the house is deemed inappropriate, triggering the necessary `Alert` (s)."
msgstr "このファイルには、家の全体的な状態が不適切であるかどうかを判断し、必要なアラートをトリガーするためのサンプルルールがいくつかあります。"

#: _versions/3.27/guides/drools.adoc
msgid "Rule Unit a central paradigm introduced in Drools 8 that helps users to encapsulate the set of rules and the facts against which those rules will be matched; you can read more information in the https://www.drools.org/learn/documentation.html[Drools documentation]."
msgstr "ルールユニットは、Drools 8 で導入された中心的なパラダイムであり、ユーザーがルールのセットとそれらのルールが照合される事実をカプセル化するのに役立ちます。詳細は、 https://www.drools.org/learn/documentation.html[Drools ドキュメント] を参照してください。"

#: _versions/3.27/guides/drools.adoc
msgid "The facts will be inserted into a `DataStore`, a type-safe entry point. To make everything work, we need to define both the RuleUnit and the DataStore."
msgstr "ファクトは、タイプセーフなエントリーポイントである `DataStore` に挿入されます。すべてが機能するようにするには、RuleUnit と DataStore の両方を定義する必要があります。"

#: _versions/3.27/guides/drools.adoc
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#: _versions/3.27/guides/drools.adoc
msgid "We can create a standard Quarkus and JUnit test to check the behaviour of the Rule Unit and the defined rules, accordingly to a certain set of scenarios."
msgstr "特定のシナリオセットに応じて、ルールユニットと定義されたルールの動作を確認するの標準の Quarkus および JUnit テストを作成できます。"

#: _versions/3.27/guides/drools.adoc
msgid "Wiring the Rule Unit with Quarkus CDI beans"
msgstr "Quarkus CDI Bean を使用したルールユニットの接続"

#: _versions/3.27/guides/drools.adoc
msgid "We can now wire the Rule Unit into a standard Quarkus CDI bean, for general use in the Quarkus application."
msgstr "これで、ルールユニットを標準の Quarkus CDI Bean に接続して、Quarkus アプリケーションで一般的に使用できるようになりました。"

#: _versions/3.27/guides/drools.adoc
msgid "For example, this might later be helpful to wire device status reporting through MQTT via Kafka, using the appropriate Quarkus extensions."
msgstr "たとえば、これは後で適切な Quarkus エクステンションを使用して、Kafka 経由で MQTT を通じてデバイスステータスレポートを送信する場合に役立つ可能性があります。"

#: _versions/3.27/guides/drools.adoc
msgid "We create a simple CDI bean to abstract away the Rule Unit API usage with:"
msgstr "次のようにして、ルールユニット API の使用を抽象化するためのシンプルな CDI Bean を作成します。"

#: _versions/3.27/guides/drools.adoc
msgid "The same test scenarios can be refactored using this CDI bean accordingly."
msgstr "同じテストシナリオは、この CDI Bean を使用して適切にリファクタリングできます。"
