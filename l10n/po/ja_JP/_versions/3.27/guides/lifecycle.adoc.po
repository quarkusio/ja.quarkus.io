msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/lifecycle.adoc
msgid "Application Initialization and Termination"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"You often need to execute custom actions when the application starts and clean up everything when the application stops.\n"
"This guide explains how to:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Write a Quarkus application with a main method"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Write command mode applications that run a task and then terminate"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Be notified when the application starts"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Be notified when the application stops"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "The solution is located in the `lifecycle-quickstart` link:{quickstarts-tree-url}/lifecycle-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"First, we need a new project.\n"
"Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "It generates:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "the Maven structure"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "the application configuration file"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "The main method"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"By default, Quarkus will automatically generate a main method, that will bootstrap Quarkus and then just wait for shutdown to be initiated.\n"
"Let's provide our own main method:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "This annotation tells Quarkus to use this as the main method, unless it is overridden in the config"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "This launches Quarkus"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"This main class will bootstrap Quarkus and run it until it stops.\n"
"This is no different to the automatically generated main class, but has the advantage that you can just launch it directly from the IDE without needing to run a Maven or Gradle command."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"It is not recommenced to do any business logic in this main method, as Quarkus has not been set up yet, and Quarkus may run in a different ClassLoader.\n"
"If you want to perform logic on startup use an `io.quarkus.runtime.QuarkusApplication` as described below."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"If we want to actually perform business logic on startup (or write applications that complete a task and then exit) we need to supply a `io.quarkus.runtime.QuarkusApplication` class to the run method.\n"
"After Quarkus has been started the `run` method of the application will be invoked.\n"
"When this method returns the Quarkus application will exit."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "If you want to perform logic on startup you should call `Quarkus.waitForExit()`, this method will wait until a shutdown is requested (either from an external signal like when you press `Ctrl+C` or because a thread has called `Quarkus.asyncExit()`)."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "An example of what this looks like is below:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"`Quarkus.run` also provides a version that allows the code to handle errors.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Injecting the command line arguments"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "It is possible to inject the arguments that were passed in on the command line:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Command line arguments can be passed to the application through the `-D` flag with the property `quarkus.args`:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "For Quarkus dev mode:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "CLI"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Maven"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Gradle"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "For a runner jar: `java -Dquarkus.args=<cmd-args> -jar target/quarkus-app/quarkus-run.jar`"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "For a native executable: `./target/lifecycle-quickstart-1.0-SNAPSHOT-runner -Dquarkus.args=<cmd-args>`"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Listening for startup and shutdown events"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Create a new class named `AppLifecycleBean` (or pick another name) in the `org.acme.lifecycle` package, and copy the following content:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Method called when the application is starting"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Method called when the application is terminating"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "The events are also called in _dev mode_ between each redeployment."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"The methods can access injected beans.\n"
"Check the link:{quickstarts-blob-url}/lifecycle-quickstart/src/main/java/org/acme/lifecycle/AppLifecycleBean.java[AppLifecycleBean.java] class for details."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "What is the difference from `@Initialized(ApplicationScoped.class)` and `@Destroyed(ApplicationScoped.class)`"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"In the JVM mode, there is no real difference, except that `StartupEvent` is always fired *after* `@Initialized(ApplicationScoped.class)` and `ShutdownEvent` is fired *before* `@Destroyed(ApplicationScoped.class)`.\n"
"For a native executable build, however, `@Initialized(ApplicationScoped.class)` is fired as *part of the native build process*, whereas `StartupEvent` is fired when the native image is executed.\n"
"See xref:writing-extensions.adoc#bootstrap-three-phases[Three Phases of Bootstrap and Quarkus Philosophy] for more details."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "In CDI applications, an event with qualifier `@Initialized(ApplicationScoped.class)` is fired when the application context is initialized. See https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#application_context[the spec, window=\"_blank\"] for more info."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Using `@Startup` to initialize a CDI bean at application startup"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "A bean represented by a class, producer method or field annotated with `@Startup` is initialized at application startup:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "`@Dependent` beans are destroyed immediately afterwards to follow the behavior of observers declared on `@Dependent` beans."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "If a class is annotated with `@Startup` but with no scope annotation then `@ApplicationScoped` is added automatically."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "The `@Startup` annotation can be also declared on a non-static non-producer no-args method:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "The bean is created and the `init()` method is invoked upon the contextual instance when the application starts."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Using `@Shutdown` to execute a business method of a CDI bean during application shutdown"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"The `@io.quarkus.runtime.Shutdown` annotation is used to mark a business method of a CDI bean that should be executed during application shutdown.\n"
"The annotated method must be non-private and non-static and declare no arguments.\n"
"The behavior is similar to a declaration of a `ShutdownEvent` observer.\n"
"The following examples are functionally equivalent."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Package and run the application"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Run the application with:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"The logged message is printed.\n"
"When the application is stopped, the second log message is printed."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "As usual, the application can be packaged using:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "and executed using `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "You can also generate the native executable using:"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Launch Modes"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"Quarkus has 3 different launch modes, `NORMAL` (i.e. production), `DEVELOPMENT` and `TEST`.\n"
"If you are running `quarkus:dev` then the mode will be `DEVELOPMENT`, if you are running a JUnit test it will be `TEST`, otherwise it will be `NORMAL`."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Your application can get the launch mode by injecting the `io.quarkus.runtime.LaunchMode` enum into a CDI bean, or by invoking the static method `io.quarkus.runtime.LaunchMode.current()`."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid "Graceful Shutdown"
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"Quarkus includes support for graceful shutdown, this allows Quarkus to wait for running requests to finish, up till a set timeout.\n"
"By default, this is disabled, however you can configure this by setting the `quarkus.shutdown.timeout` config property.\n"
"When this is set shutdown will not happen until all running requests have completed, or until this timeout has elapsed."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"Extensions that accept requests need to add support for this on an individual basis.\n"
"At the moment only the HTTP extension supports this, so shutdown may still happen when messaging requests are active."
msgstr ""

#: _versions/3.27/guides/lifecycle.adoc
msgid ""
"Quarkus supports a delay time, where the application instance still responds to requests, but the readiness probe fails.\n"
"This gives the infrastructure time to recognize that the instance is shutting down and stop routing traffic to the instance.\n"
"This feature can be enabled by setting the build-time property `quarkus.shutdown.delay-enabled` to `true`.\n"
"The delay can then be configured by setting the runtime property `quarkus.shutdown.delay`.\n"
"It is not set by default, thus no delay is applied."
msgstr ""
