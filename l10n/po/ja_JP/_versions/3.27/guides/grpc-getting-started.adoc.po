msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Getting Started with gRPC"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"This page explains how to start using gRPC in your Quarkus application.\n"
"While this page describes how to configure it with Maven, it is also possible to use Gradle."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"Let's imagine you have a regular Quarkus project, generated from the https://code.quarkus.io[Quarkus project generator].\n"
"The default configuration is enough, but you can also select some extensions if you want."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "The solution is located in the `grpc-plain-text-quickstart` link:{quickstarts-tree-url}/grpc-plain-text-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Configuring your project"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Add the Quarkus gRPC extension to your build file:"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"By default, the `quarkus-grpc` extension relies on the reactive programming model.\n"
"In this guide we will follow a reactive approach.\n"
"Under the `dependencies` section of your `pom.xml` file, make sure you have the Quarkus REST (formerly RESTEasy Reactive) dependency:"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"If you are using Maven, make sure you have the `generate-code` goal of `quarkus-maven-plugin` enabled in your `pom.xml`.\n"
"If you wish to generate code from different `proto` files for tests, also add the `generate-code-tests` goal.\n"
"Please note that no additional task/goal is required for the Gradle plugin."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"With this configuration, you can put your service and message definitions in the `src/main/proto` directory.\n"
"`quarkus-maven-plugin` will generate Java files from your `proto` files."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"`quarkus-maven-plugin` retrieves a version of `protoc` (the protobuf compiler) from Maven repositories. The retrieved version matches your operating system and CPU architecture.\n"
"If this retrieved version does not work in your context, you can either force to use a different OS classifier with\n"
"`-Dquarkus.grpc.protoc-os-classifier=your-os-classifier` (e.g. `osx-x86_64`).\n"
"You can also download the suitable binary and specify the location via\n"
"`-Dquarkus.grpc.protoc-path=/path/to/protoc`."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"Let's start with a simple _Hello_ service.\n"
"Create the `src/main/proto/helloworld.proto` file with the following content:"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "This `proto` file defines a simple service interface with a single method (`SayHello`), and the exchanged messages (`HelloRequest` containing the name and `HelloReply` containing the greeting message)."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Your `proto` file must not contain `option java_generic_services = true;`. https://developers.google.com/protocol-buffers/docs/reference/java-generated?hl=en#service[Generic services are deprecated] and are not compatible with Quarkus code generation plugins."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"Before coding, we need to generate the classes used to implement and consume gRPC services.\n"
"In a terminal, run:"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Once generated, you can look at the `target/generated-sources/grpc` directory:"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "These are the classes we are going to use."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Different gRPC implementations / types"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Another thing to take note as well is that Quarkus' gRPC support currently includes 3 different types of gRPC usage:"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "old Vert.x gRPC implementation with a separate gRPC server (default)"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "new Vert.x gRPC implementation on top of the existing HTTP server"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "https://grpc.github.io/grpc/core/md_doc_grpc_xds_features.html[xDS gRPC] wrapper over https://github.com/grpc/grpc-java[grpc-java] with a separate Netty based gRPC server"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Further docs explain how to enable and use each of them."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Implementing a gRPC service"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Now that we have the generated classes let's implement our _hello_ service."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"With Quarkus, implementing a service requires to implement the generated service interface based on Mutiny, a Reactive Programming API integrated in Quarkus, and expose it as a CDI bean.\n"
"Learn more about Mutiny on the xref:mutiny-primer.adoc[Mutiny guide].\n"
"The service class must be annotated with the `@io.quarkus.grpc.GrpcService` annotation."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Implementing a service"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Create the `src/main/java/org/acme/HelloService.java` file with the following content:"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Expose your implementation as a bean."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Implement the generated service interface."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Implement the methods defined in the service definition (here we have a single method)."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "You can also use the default gRPC API instead of Mutiny:"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Build and send the response."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Close the response."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"If your service implementation logic is blocking (use blocking I/O for example), annotate your method with\n"
"`@Blocking`.\n"
"The `io.smallrye.common.annotation.Blocking` annotation instructs the framework to invoke the\n"
"annotated method on a worker thread instead of the I/O thread (event-loop)."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "The gRPC server"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"The services are _served_ by a _server_.\n"
"Available services (_CDI beans_) are automatically registered and exposed."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"By default, the server is exposed on `localhost:9000`, and uses _plain-text_ (so no TLS) when\n"
"running normally, and `localhost:9001` for tests."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Run the application using: `mvn quarkus:dev`."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Consuming a gRPC service"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"In this section, we are going to consume the service we expose.\n"
"To simplify, we are going to consume the service from the same application, which in the real world, does not make sense."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Open the existing `org.acme.ExampleResource` class, and edit the content to become:"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Inject the service and configure its name. The name is used in the application configuration. If not specified then the field name is used instead: `hello` in this particular case."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Use the generated service interface based on Mutiny API."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Invoke the service."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"We need to configure the application to indicate where the `hello` service is found.\n"
"In the `src/main/resources/application.properties` file, add the following property:"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "`hello` is the name used in the `@GrpcClient` annotation."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "`host` configures the service host (here it's localhost)."
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Then, open http://localhost:8080/hello/quarkus in a browser, and you should get `Hello quarkus`!"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid "Packaging the application"
msgstr ""

#: _versions/3.27/guides/grpc-getting-started.adoc
msgid ""
"Like any other Quarkus applications, you can package it with: `mvn package`.\n"
"You can also package the application into a native executable with: `mvn package -Dnative`."
msgstr ""
