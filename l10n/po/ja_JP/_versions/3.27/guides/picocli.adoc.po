msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/picocli.adoc
msgid "Command Mode with Picocli"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "https://picocli.info/[Picocli] is an open source tool for creating rich command line applications."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Quarkus provides support for using Picocli. This guide contains examples of `picocli` extension usage."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "If you are not familiar with the Quarkus Command Mode, consider reading the xref:command-mode-reference.adoc[Command Mode reference guide] first."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Extension"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid ""
"Once you have your Quarkus project configured you can add the `picocli` extension\n"
"to your project by running the following command in your project base directory."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "This will add the following to your build file:"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Building a command line application"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Simple application"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "A simple Picocli application with only one `Command` can be created as follows:"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "If there is only one class annotated with `picocli.CommandLine.Command`, it will be used automatically as the entry point of the command line application."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "All classes annotated with `picocli.CommandLine.Command` are registered as CDI beans."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid ""
"Beans annotated with `@CommandLine.Command` should not use proxied scopes (e.g. do not use `@ApplicationScoped`)\n"
"because Picocli will not be able to set field values in such beans.\n"
"By default, this Picocli extension registers classes annotated with `@CommandLine.Command`\n"
"with the `@Dependent` scope. If you need to use a proxied scope, then annotate the setters and not the fields, for example:"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Command line application with multiple Commands"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid ""
"When multiple classes have the `picocli.CommandLine.Command` annotation, then one of them needs to be also annotated with `io.quarkus.picocli.runtime.annotations.TopCommand`.\n"
"This can be overwritten with the `quarkus.picocli.top-command` property."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Customizing Picocli CommandLine instance"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "You can customize CommandLine classes used by the `picocli` extension by producing your own bean instance:"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "`PicocliCommandLineFactory` will create an instance of CommandLine with `TopCommand` and `CommandLine.IFactory` injected."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Different entry command for each profile"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "It is possible to create different entry command for each profile, using `@IfBuildProfile`:"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "You can return instance of `java.lang.Class` here. In such case `CommandLine` will try to instantiate this class using `CommandLine.IFactory`."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Configure CDI Beans with parsed arguments"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid ""
"You can use `Event<CommandLine.ParseResult>` or just `CommandLine.ParseResult` to configure CDI beans based on arguments parsed by Picocli.\n"
"This event will be generated in `QuarkusApplication` class created by this extension. If you are providing your own `@QuarkusMain` this event will not be raised.\n"
"`CommandLine.ParseResult` is created from default `CommandLine` bean."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "`@ApplicationScoped` used for lazy initialization"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Providing your own QuarkusMain"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "You can also provide your own application entry point annotated with `QuarkusMain` (as described in xref:command-mode-reference.adoc[Command Mode reference guide])."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Quarkus-compatible `CommandLine.IFactory` bean created by `picocli` extension."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Development Mode"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid ""
"In the development mode, i.e. when running `mvn quarkus:dev`, the application is executed and restarted every time the `Space bar` key is pressed. You can also pass arguments to your command line app via the `quarkus.args` system property, e.g. `mvn quarkus:dev -Dquarkus.args='--help'` and `mvn quarkus:dev -Dquarkus.args='-c -w --val 1'`.\n"
"For Gradle projects, arguments can be passed using `--quarkus-args`."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "If you're creating a typical Quarkus application (e.g., HTTP-based services) that includes command-line functionality, you'll need to handle the application's lifecycle differently. In the `Runnable.run()` method of your command, make sure to use `Quarkus.waitForExit()` or `Quarkus.asyncExit()`. This will prevent the application from shutting down prematurely and ensure a proper shutdown process."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Packaging your application"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "A Picocli command line application can be packaged in multiple formats (e.g. a JAR, a native executable) and can be published to various repositories (e.g. Homebrew, Chocolatey, SDKMAN!)."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "As a jar"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "A Picocli command line application is a standard Quarkus application and as such can be published as a JAR in various packaging formats (e.g. fast-jar, uber-jar)."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "In the context of a command line application, building an uber-jar is more practical if you plan on publishing the JAR as is."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "For more information about how to build an uber-jar, see our documentation:"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "For https://quarkus.io/guides/maven-tooling#uber-jar-maven[Maven]"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "For https://quarkus.io/guides/gradle-tooling#building-uber-jars[Gradle]"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "You can then execute the application by using the standard `java -jar your-application.jar` command."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Using plugins such as the https://github.com/brianm/really-executable-jars-maven-plugin[really-executable-jar-maven-plugin] can be handy to simplify the execution of your command line application."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "As a native executable"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "You can also build a https://quarkus.io/guides/building-native-image[native executable] but keep in mind that native executables are not portable and that you need one binary per supported platform."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Publishing the application"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid ""
"Publishing your command line application to a repository makes it a lot easier to consume.\n"
"Various application repositories are available depending on your requirements such as https://sdkman.io/[SDKMAN!], https://brew.sh/[Homebrew] for macOS, or https://chocolatey.org/[Chocolatey] for Windows."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "To publish to these repositories, we recommend the usage of https://jreleaser.org/[JReleaser]."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "JReleaser adds executable wrappers around your JAR for your application to be easily executable."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "More information"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "You can also consult the https://picocli.info/#_packaging_your_application[Picocli official documentation] for more general information about how to package Picocli applications."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Kubernetes support"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Once you have your command line application, you can also generate the resources necessary to install and use this application in Kubernetes by adding the `kubernetes` extension. To install the `kubernetes` extension, run the following command in your project base directory."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "And, next, build the application with:"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "The Kubernetes extension will detect the presence of the Picocli extension and hence generate a https://kubernetes.io/docs/concepts/workloads/controllers/job/[Job] resource instead of a https://kubernetes.io/docs/concepts/workloads/controllers/deployment/[Deployment] resource in the `target/kubernetes/` directory."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "If you don't want to generate a Job resource, you can specify the resource you want to generate using the property `quarkus.kubernetes.deployment-kind`. For example, if you want to generate a Deployment resource, use `quarkus.kubernetes.deployment-kind=Deployment`."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Moreover, you can provide the arguments that will be used by the Kubernetes job via the property `quarkus.kubernetes.arguments`. For example, after adding the property `quarkus.kubernetes.arguments=A,B` and building your project, the following Job resource will be generated:"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Finally, the Kubernetes job will be launched every time it is installed in Kubernetes. You can know more about how to run Kubernetes jobs in this https://kubernetes.io/docs/concepts/workloads/controllers/job/#running-an-example-job[document]."
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "Configuration Reference"
msgstr ""

#: _versions/3.27/guides/picocli.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
