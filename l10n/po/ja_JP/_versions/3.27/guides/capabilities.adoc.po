msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/capabilities.adoc
msgid "Extension Capabilities"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Quarkus extensions may provide certain capabilities and require certain capabilities to be provided by other extensions in an application to function properly."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "A capability represents a technical aspect, for example, it could be an implementation of some functionality, a contract or a specification. Each capability has a name which should follow the Java package naming convention, e.g. `io.quarkus.rest`."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Capability promises and requirements are described in Quarkus extension descriptors - `META-INF/quarkus-extension.properties` entries of the runtime extension JAR artifacts."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Only a single provider of any given capability is allowed in an application. If more than one provider of a capability is detected, the application build will fail with the corresponding error message."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "If one extension requires a certain capability, there must be another one among the application dependencies that provides that capability, otherwise the build will fail with the corresponding error message."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "At build time all the capabilities found in the application will be aggregated in an instance of the `io.quarkus.deployment.Capabilities` build item that extension build steps can inject to check whether a given capability is available or not."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Declaring capabilities"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "The `quarkus-extension-maven-plugin:extension-descriptor` Maven goal and the `extensionDescriptor` Gradle task, that generate extension descriptors, allow configuring provided and required capabilities in the following way:"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Maven"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "the extension provides the `io.quarkus.hibernate.orm` capability (multiple `provides` elements are allowed)"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "the extension requires the `io.quarkus.agroal` capability to be provided to function properly (multiple `requires` elements are allowed)"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Gradle (Groovy DSL)"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "The Gradle extension plugin is still experimental and may change in the future."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Gradle (Kotlin DSL)"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Conditional capability promises and requirements"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "A capability may be provided or required only if a certain condition is satisfied, for example, if a certain configuration option is enabled or based on some other condition. Here is how a conditional capability promise can be configured:"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "declaration of a conditional capability"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "condition that must be resolved to `true` by a class implementing `java.util.function.BooleanSupplier`"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "provided capability name"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "`providesIf` allows listing multiple `<positive>` as well as `<negative>` elements."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "The corresponding `requiresIf` element is also supported."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "It is possible to specify `onlyIfNot` conditions as well. Conditions can also be set for required capabilities."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "It is possible to specify `onlyIfNot` conditions as well. . Conditions can also be set for required capabilities."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "In this case, `io.quarkus.container.image.openshift.deployment.OpenshiftBuild` should be included in one of the extension deployment dependencies and implement `java.util.function.BooleanSupplier`. At build time, the Quarkus bootstrap will create an instance of it and register `io.quarkus.container.image.openshift` capability only if its `getAsBoolean()` method returns true."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "An implementation of the `OpenshiftBuild` could look like this:"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "CapabilityBuildItem"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Each provided capability will be represented with an instance of `io.quarkus.deployment.builditem.CapabilityBuildItem` at build time. Theoretically, `CapabilityBuildItem`'s could be produced by extension build steps directly, bypassing the corresponding declaration in the extension descriptors. However, this way of providing capabilities should be avoided, unless there is a very good reason not to declare a capability in the descriptor."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Capabilities produced from extension build steps aren't available for the Quarkus dev tools. As a consequences, such capabilities can not be taken into account when analyzing extension compatibility during project creation or when adding new extensions to a project."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Querying capabilities"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "All the capabilities found in an application will be aggregated during the build in an instance of `io.quarkus.deployment.Capabilities` build item, which can be injected by extension build steps to check whether a certain capability is present or not. E.g."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Capability prefixes"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Like a capability name, a capability prefix is a dot-separated string that is composed of either the first capability name element or a dot-separated sequence of the capability name elements starting from the first one. E.g. for capability `io.quarkus.resteasy.json.jackson` the following prefixes will be registered:"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "`io`"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "`io.quarkus`"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "`io.quarkus.resteasy`"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "`io.quarkus.resteasy.json`"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "`Capabilities.isCapabilityWithPrefixPresent(prefix)` could be used to check whether a capability with a given prefix is present."
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Given that only a single provider of a given capability is allowed in an application, capability prefixes allow expressing a certain common aspect among different but somewhat related capabilities. E.g. there could be extensions providing the following capabilities:"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "`io.quarkus.resteasy.json.jackson`"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "`io.quarkus.resteasy.json.jackson.client`"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "`io.quarkus.resteasy.json.jsonb`"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "`io.quarkus.resteasy.json.jsonb.client`"
msgstr ""

#: _versions/3.27/guides/capabilities.adoc
msgid "Including any one of those extensions in an application will enable the RESTEasy JSON serializer. In case a build step needs to check whether the RESTEasy JSON serializer is already enabled in an application, instead of checking whether any of those capabilities is present, it could simply check whether an extension with prefix `io.quarkus.resteasy.json` is present."
msgstr ""
