msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "WebSockets Next reference guide"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The `quarkus-websockets-next` extension provides a modern declarative API to define WebSocket server and client endpoints."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The WebSocket protocol"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"The _WebSocket_ protocol, documented in the https://datatracker.ietf.org/doc/html/rfc6455[RFC6455], establishes a standardized method for creating a bidirectional communication channel between a client and a server through a single TCP connection.\n"
"Unlike HTTP, WebSocket operates as a distinct TCP protocol but is designed to function seamlessly alongside HTTP.\n"
"For example, it reuses the same ports and is compatible with the same security mechanisms."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"The interaction using WebSocket initiates with an HTTP request employing the 'Upgrade' header to transition to the WebSocket protocol.\n"
"Instead of a `200 OK` response, the server replies with a `101 Switching Protocols` response to upgrade the HTTP connection to a WebSocket connection.\n"
"Following this successful handshake, the TCP socket utilized in the initial HTTP upgrade request remains open, allowing both client and server to exchange messages in both direction continually."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "HTTP and WebSocket architecture styles"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Despite WebSocket's compatibility with HTTP and its initiation through an HTTP request, it's crucial to recognize that the two protocols lead to distinctly different architectures and programming models."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"With HTTP/REST, applications are structured around resources/endpoints that handle various HTTP methods and paths.\n"
"Client interaction occurs through emitting HTTP requests with appropriate methods and paths, following a request-response pattern.\n"
"The server routes incoming requests to corresponding handlers based on path, method, and headers and then replies with a well-defined response."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Conversely, WebSocket typically involves a single endpoint for the initial HTTP connection, after which all messages utilize the same TCP connection.\n"
"It introduces an entirely different interaction model: asynchronous and message-driven."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"WebSocket is a low-level transport protocol, in contrast to HTTP.\n"
"Message formats, routing, or processing require prior agreement between the client and server regarding message semantics."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "For WebSocket clients and servers, the `Sec-WebSocket-Protocol` header in the HTTP handshake request allows negotiation of a higher-level messaging protocol. In its absence, the server and client must establish their own conventions."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Quarkus WebSockets vs. Quarkus WebSockets Next"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"This guide utilizes the `quarkus-websockets-next` extension, an implementation of the WebSocket API boasting enhanced efficiency and usability compared to the legacy `quarkus-websockets` extension.\n"
"The original `quarkus-websockets` extension remains accessible, will receive ongoing support, but it's unlikely to receive to feature development."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Unlike `quarkus-websockets`, the `quarkus-websockets-next` extension does **not** implement the Jakarta WebSocket specification.\n"
"Instead, it introduces a modern API, prioritizing simplicity of use.\n"
"Additionally, it's tailored to integrate with Quarkus' reactive architecture and networking layer seamlessly."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"The annotations utilized by the Quarkus WebSockets next extension differ from those in JSR 356 despite, sometimes, sharing the same name.\n"
"The JSR annotations carry a semantic that the Quarkus WebSockets Next extension does not follow."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Project setup"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "To use the `websockets-next` extension, you need to add the `io.quarkus:quarkus-websockets-next` depencency to your project."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Endpoints"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Both the <<server-api>> and <<client-api>> define _endpoints_ that are used to consume and send messages.\n"
"The endpoints are implemented as CDI beans and support injection.\n"
"Endpoints declare <<callback-methods,_callback methods_>> annotated with `@OnTextMessage`, `@OnBinaryMessage`, `@OnPingMessage`, `@OnPongMessage`, `@OnOpen`, `@OnClose` and `@OnError`.\n"
"These methods are used to handle various WebSocket events.\n"
"Typically, a method annotated with `@OnTextMessage` is called when the connected client sends a message to the server and vice versa."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The client API also includes <<client-connectors,connectors>> that are used to configure and create new WebSocket connections."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Server endpoints"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Server endpoints are classes annotated with `@io.quarkus.websockets.next.WebSocket`.\n"
"The value of `WebSocket#path()` is used to define the path of the endpoint."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Thus, client can connect to this web socket endpoint using `ws://localhost:8080/chat/your-name`.\n"
"If TLS is used, the URL is `wss://localhost:8443/chat/your-name`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The endpoint path is relative to the xref:http-reference.adoc#context-path[root context] configured by the `quarkus.http.root-path` (which is `/` by default). For example, if you add `quarkus.http.root-path=/api` to your `application.properties` then a client can connect to this endpoint using `http://localhost:8080/api/chat/the-name`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Client endpoints"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Client endpoints are classes annotated with `@io.quarkus.websockets.next.WebSocketClient`.\n"
"The value of `WebSocketClient#path()` is used to define the path of the endpoint this client will be connected to."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Client endpoints are used to consume and send messages. You'll need the <<client-connectors,connectors API>> to configure and open new WebSocket connections."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Path parameters"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"The path of a WebSocket endpoint can contain path parameters.\n"
"The syntax is the same as for JAX-RS resources: `{parameterName}`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"You can access the path parameter values using the `io.quarkus.websockets.next.WebSocketConnection#pathParam(String)` method, or `io.quarkus.websockets.next.WebSocketClientConnection#pathParam(String)` respectively.\n"
"Alternatively, an endpoint callback method parameter annotated with `@io.quarkus.websockets.next.PathParam` is injected automatically."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`WebSocketConnection#pathParam(String)` example"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Path parameter values are always strings.\n"
"If the path parameter is not present in the path, the `WebSocketConnection#pathParam(String)`/`WebSocketClientConnection#pathParam(String)` method returns `null`.\n"
"If there is an endpoint callback method parameter annotated with `@PathParam` and the parameter name is not defined in the endpoint path, then the build fails."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Query parameters are not supported. However, you can access the query using `WebSocketConnection#handshakeRequest().query()`"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "CDI scopes"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Endpoints are managed as CDI beans.\n"
"By default, the `@Singleton` scope is used.\n"
"However, developers can specify alternative scopes to fit their specific requirements."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"`@Singleton` and `@ApplicationScoped` endpoints are shared across all WebSocket connections.\n"
"Therefore, implementations should be either stateless or thread-safe."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Session context"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"If an endpoint is annotated with `@SessionScoped`, or depends directly or indirectly on a `@SessionScoped` bean, then each WebSocket connection is associated with its own _session context_.\n"
"The session context is active during endpoint callback invocation.\n"
"Subsequent invocations of <<callback-methods>> within the same connection utilize the same session context.\n"
"The session context remains active until the connection is closed (usually when the `@OnClose` method completes execution), at which point it is terminated."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "It is also possible to set the `quarkus.websockets-next.server.activate-session-context` config property to `always`. In this case, the session context is always activated, no matter if a `@SessionScoped` bean participates in the dependency tree."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`@SessionScoped` Endpoint"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "This server endpoint is not shared and is scoped to the session/connection."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Request context"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Each WebSocket endpoint callback method execution is associated with a new CDI _request context_ if the endpoint is:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Annotated with the `@RequestScoped` annotation."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Has a method annotated with a security annotation such as `@RolesAllowed`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Depends directly or indirectly on a `@RequestScoped` bean."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Depends directly or indirectly on a CDI beans secured with a standard security annotation."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "It is also possible to set the `quarkus.websockets-next.server.activate-request-context` config property to `always`. In this case, the request context is always activated when an endpoint callback is invoked."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`@RequestScoped` Endpoint"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "This server endpoint is instantiated for each callback method execution."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Callback methods"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "A WebSocket endpoint may declare:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "At most one `@OnTextMessage` method: Handles the text messages from the connected client/server."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "At most one `@OnBinaryMessage` method: Handles the binary messages from the connected client/server."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "At most one `@OnPingMessage` method: Handles the ping messages from the connected client/server."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "At most one `@OnPongMessage` method: Handles the pong messages from the connected client/server."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "At most one `@OnOpen` method: Invoked when a connection is opened."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "At most one `@OnClose` method: Executed when the connection is closed."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Any number of `@OnError` methods: Invoked when an error occurs; that is when an endpoint callback throws a runtime error, or when a conversion errors occurs, or when a returned `io.smallrye.mutiny.Uni`/`io.smallrye.mutiny.Multi` receives a failure."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Only some endpoints need to include all methods.\n"
"However, it must contain at least `@On[Text|Binary]Message` or `@OnOpen`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"An error is thrown at build time if any endpoint violates these rules.\n"
"The static nested classes representing sub-websockets adhere to the same guidelines."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Any methods annotated with `@OnTextMessage`, `@OnBinaryMessage`, `@OnOpen`, and `@OnClose` outside a WebSocket endpoint are considered erroneous and will result in the build failing with an appropriate error message."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Processing messages"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Method receiving messages from the client are annotated with `@OnTextMessage` or `@OnBinaryMessage`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"`OnTextMessage` are invoked for every _text_ message received from the client.\n"
"`OnBinaryMessage` are invoked for every _binary_ message the client receives."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Invocation rules"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"When invoking the callback methods, the _session_ scope linked to the WebSocket connection remains active.\n"
"In addition, the request scope is active until the completion of the method (or until it produces its result for async and reactive methods)."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "WebSocket Next supports _blocking_ and _non-blocking_ logic, akin to Quarkus REST, determined from the return type of the method and additional annotations such as `@Blocking` and `@NonBlocking`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Here are the rules governing execution:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Methods annotated with `@RunOnVirtualThread`, `@Blocking` or `@Transactional` are considered blocking."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Methods declared in a class annotated with `@RunOnVirtualThread` are considered blocking."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Methods annotated with `@NonBlocking` are considered non-blocking."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Methods declared in a class annotated with `@Transactional` are considered blocking unless annotated with `@NonBlocking`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "If the method does not declare any of the annotations listed above the execution model is derived from the return type:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Methods returning `Uni` and `Multi` are considered non-blocking."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Methods returning `void` or any other type are considered blocking."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Kotlin `suspend` functions are always considered non-blocking and may not be annotated with `@Blocking`, `@NonBlocking`\n"
"or `@RunOnVirtualThread` and may not be in a class annotated with `@RunOnVirtualThread`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Non-blocking methods must execute on the connection's event loop thread."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Blocking methods must execute on a worker thread unless annotated with `@RunOnVirtualThread` or in a class annotated\n"
"with `@RunOnVirtualThread`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Methods annotated with `@RunOnVirtualThread` or declared in class annotated with `@RunOnVirtualThread` must execute on\n"
"a virtual thread, each invocation spawns a new virtual thread."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Method parameters"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The method must accept exactly one message parameter:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The message object (of any type)."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "A `Multi<X>` with X as the message type."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "However, it may also accept the following parameters:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`WebSocketConnection`/`WebSocketClientConnection`"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`HandshakeRequest`"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`String` parameters annotated with `@PathParam`"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The message object represents the data sent and can be accessed as either raw content (`String`, `JsonObject`, `JsonArray`, `Buffer` or `byte[]`) or deserialized high-level objects, which is the recommended approach."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"When receiving a `Multi`, the method is invoked once per connection, and the provided `Multi` receives the items transmitted by this connection.\n"
"If the method returns a `Multi` (constructed from the received one), Quarkus will automatically subscribe to it and write the emitted items until completion, failure, or cancellation.\n"
"However, if your method does not return a `Multi`, you must subscribe to the incoming `Multi` to consume the data."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Here are two examples:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "See <<subscribe-or-not-subscribe>> to learn more about subscribing to the incoming `Multi`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Supported return types"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Methods annotated with `@OnTextMessage` or `@OnBinaryMessage` can return various types to handle WebSocket communication efficiently:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`void`: Indicates a blocking method where no explicit response is sent back to the client."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`Uni<Void>`: Denotes a non-blocking method where the completion of the returned `Uni` signifies the end of processing. No explicit response is sent back to the client."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "An object of type `X` represents a blocking method in which the returned object is serialized and sent back to the client as a response."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`Uni<X>`: Specifies a non-blocking method where the item emitted by the non-null `Uni` is sent to the client as a response."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`Multi<X>`: Indicates a non-blocking method where the items emitted by the non-null `Multi` are sequentially sent to the client until completion or cancellation."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Kotlin `suspend` function returning `Unit`: Denotes a non-blocking method where no explicit response is sent back to the client."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Kotlin `suspend` function returning `X`: Specifies a non-blocking method where the returned item is sent to the client as a response."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Here are some examples of these methods:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Methods returning `Uni` and `Multi` are considered non-blocking.\n"
"In addition, Quarkus automatically subscribes to the returned `Multi` / `Uni` and writes the emitted items until completion, failure, or cancellation.\n"
"Failure or cancellation terminates the connection."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Streams"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"In addition to individual messages, WebSocket endpoints can handle streams of messages.\n"
"In this case, the method receives a `Multi<X>` as a parameter.\n"
"Each instance of `X` is deserialized using the same rules listed above."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"The method receiving the `Multi` can either return another `Multi` or `void`.\n"
"If the method returns a `Multi`, it does not have to subscribe to the incoming `multi`:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "This approach allows bi-directional streaming."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"When the method returns `void`, and so does not return a `Multi`, the code must subscribe to the incoming `Multi`.\n"
"Otherwise, no data will be consumed, and the connection will not be closed:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Also note that the `stream` method will complete before the `Multi` completes."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Skipping reply"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"When a method is intended to produce a message written to the client, it can emit `null`.\n"
"Emitting `null` signifies no response to be sent to the client, allowing for skipping a response when needed."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "JsonObject and JsonArray"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Vert.x `JsonObject` and `JsonArray` instances bypass the serialization and deserialization mechanisms.\n"
"Messages are sent as text messages."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "OnOpen and OnClose methods"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The WebSocket endpoint can also be notified when a client connects or disconnects."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "This is done by annotating a method with `@OnOpen` or `@OnClose`:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`@OnOpen` is triggered upon client connection, while `@OnClose` is invoked upon disconnection."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "These methods have access to the _session-scoped_ `WebSocketConnection` bean."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Parameters"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Methods annotated with `@OnOpen` and `@OnClose` may accept the following parameters:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "An endpoint method annotated with `@OnClose` may also accept the `io.quarkus.websockets.next.CloseReason` parameter that may indicate a reason for closing a connection."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`@OnOpen` and `@OnClose` methods support different returned types."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"For `@OnOpen` methods, the same rules as `@On[Text|Binary]Message` apply.\n"
"Thus, a method annotated with `@OnOpen` can send messages to the client immediately after connecting.\n"
"The supported return types for `@OnOpen` methods are:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`void`: Indicates a blocking method where no explicit message is sent back to the connected client."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`Uni<Void>`: Denotes a non-blocking method where the completion of the returned `Uni` signifies the end of processing. No message is sent back to the client."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "An object of type `X`: Represents a blocking method where the returned object is serialized and sent back to the client."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`Uni<X>`: Specifies a non-blocking method where the item emitted by the non-null `Uni` is sent to the client."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Kotlin `suspend` function returning `Unit`: Denotes a non-blocking method where no explicit message is sent back to the client."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Kotlin `suspend` function returning `X`: Specifies a non-blocking method where the returned item is sent to the client."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Items sent to the client are <<serialization,serialized>> except for the `String`, `io.vertx.core.json.JsonObject`, `io.vertx.core.json.JsonArray`, `io.vertx.core.buffer.Buffer`, and `byte[]` types.\n"
"In the case of `Multi`, Quarkus subscribes to the returned `Multi` and writes the items to the `WebSocket` as they are emitted.\n"
"`String`, `JsonObject` and `JsonArray` are sent as text messages.\n"
"`Buffers` and byte arrays are sent as binary messages."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "For `@OnClose` methods, the supported return types include:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`void`: The method is considered blocking."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`Uni<Void>`: The method is considered non-blocking."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Kotlin `suspend` function returning `Unit`: The method is considered non-blocking."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"`@OnClose` methods declared on a server endpoint cannot send items to the connected client by returning objects.\n"
"They can only send messages to the other clients by using the `WebSocketConnection` object."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Error handling"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"WebSocket endpoints can also be notified when an error occurs.\n"
"A WebSocket endpoint method annotated with `@io.quarkus.websockets.next.OnError` is invoked when an endpoint callback throws a runtime error, or when a conversion errors occurs,\n"
"or when a returned `io.smallrye.mutiny.Uni`/`io.smallrye.mutiny.Multi` receives a failure."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"The method must accept exactly one _error_ parameter, i.e. a parameter that is assignable from `java.lang.Throwable`.\n"
"The method may also accept the following parameters:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"An endpoint may declare multiple methods annotated with `@io.quarkus.websockets.next.OnError`.\n"
"However, each method must declare a different error parameter.\n"
"The method that declares a most-specific supertype of the actual exception is selected."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The `@io.quarkus.websockets.next.OnError` annotation can be also used to declare a global error handler, i.e. a method that is not declared on a WebSocket endpoint. Such a method may not accept `@PathParam` parameters. Error handlers declared on an endpoint take precedence over the global error handlers."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"When an error occurs but no error handler can handle the failure, Quarkus uses the strategy specified by `quarkus.websockets-next.server.unhandled-failure-strategy`.\n"
"For server endpoints, the error message is logged and the connection is closed by default.\n"
"For client endpoints, the error message is logged by default."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Serialization and deserialization"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The WebSocket Next extension supports automatic serialization and deserialization of messages."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Objects of type `String`, `JsonObject`, `JsonArray`, `Buffer`, and `byte[]` are sent as-is and bypass the serialization and deserialization.\n"
"When no codec is provided, the serialization and deserialization convert the message from/to JSON automatically."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "When you need to customize the serialization and deserialization, you can provide a custom codec."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Custom codec"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "To implement a custom codec, you must provide a CDI bean implementing:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`io.quarkus.websockets.next.BinaryMessageCodec` for binary messages"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`io.quarkus.websockets.next.TextMessageCodec` for text messages"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The following example shows how to implement a custom codec for a `Item` class:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`OnTextMessage` and `OnBinaryMessage` methods can also specify which codec should be used explicitly:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Specify the codec to use for both the deserialization and serialization of the message"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "When the serialization and deserialization must use a different codec, you can specify the codec to use for the serialization and deserialization separately:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Specify the codec to use for the deserialization of the incoming message"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Specify the codec to use for the serialization of the outgoing message"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Ping/Pong messages"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"A https://datatracker.ietf.org/doc/html/rfc6455#section-5.5.2[ping message] may serve as a keepalive or to verify the remote endpoint.\n"
"A https://datatracker.ietf.org/doc/html/rfc6455#section-5.5.3[pong message] is sent in response to a ping message and it must have an identical payload."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Sending ping messages"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Ping messages are optional and not sent by default. However, server and client endpoints can be configured to automatically send ping messages on an interval."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Sends a ping message from the server to each connected client every 2 seconds."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Sends a ping message from all connected client instances to their remote servers every 10 seconds."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Servers and clients can send ping messages programmatically at any time using `WebSocketConnection` or `WebSocketClientConnection`.\n"
"There is a non-blocking variant: `Sender#sendPing(Buffer)` and a blocking variant: `Sender#sendPingAndAwait(Buffer)`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Sending pong messages"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Server and client endpoints will always respond to a ping message sent from the remote party with a corresponding pong message, using the application data from the ping message.\n"
"This behavior is built-in and requires no additional code or configuration."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Servers and clients can send unsolicited pong messages that may serve as a unidirectional heartbeat using `WebSocketConnection` or `WebSocketClientConnection`. There is a non-blocking variant: `Sender#sendPong(Buffer)` and a blocking variant: `Sender#sendPongAndAwait(Buffer)`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Handling ping/pong messages"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Because ping messages are handled automatically and pong messages require no response, it is not necessary to write handlers for these messages to comply with the WebSocket protocol.\n"
"However, it is sometimes useful to know when ping or pong messages are received by an endpoint."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"The `@OnPingMessage` and `@OnPongMessage` annotations can be used to define callbacks that consume ping or pong messages sent from the remote party.\n"
"An endpoint may declare at most one `@OnPingMessage` callback and at most  one `@OnPongMessage` callback.\n"
"The callback method must return either `void` or `Uni<Void>` (or be a Kotlin `suspend` function returning `Unit`), and it must accept a single parameter of type `Buffer`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Inbound processing mode"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"WebSocket endpoints can define the mode used to process incoming events for a specific connection using the `@WebSocket#inboundProcessingMode()`, and `@WebSocketClient.inboundProcessingMode()` respectively.\n"
"An incoming event can represent a message (text, binary, pong), opening connection and closing connection.\n"
"By default, events are processed serially and ordering is guaranteed.\n"
"This means that if an endpoint receives events `A` and `B` (in this particular order) then callback for event `B` will be invoked after the callback for event `A` completed.\n"
"However, in some situations it is preferable to process events concurrently, i.e. with no ordering guarantees but also with no concurrency limits.\n"
"For this cases, the `InboundProcessingMode#CONCURRENT` should be used."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Server API"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "HTTP server configuration"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "This extension reuses the _main_ HTTP server."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Thus, the configuration of the WebSocket server is done in the `quarkus.http.` configuration section."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"WebSocket paths configured within the application are concatenated with the root path defined by `quarkus.http.root` (which defaults to `/`).\n"
"This concatenation ensures that WebSocket endpoints are appropriately positioned within the application's URL structure."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Refer to the xref:http-reference.adoc[HTTP guide] for more details."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Sub-websockets endpoints"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"A `@WebSocket` endpoint can encapsulate static nested classes, which are also annotated with `@WebSocket` and represent _sub-websockets_.\n"
"The resulting path of these sub-websockets concatenates the path from the enclosing class and the nested class.\n"
"The resulting path is normalized, following the HTTP URL rules."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Sub-websockets inherit access to the path parameters declared in the `@WebSocket` annotation of both the enclosing and nested classes.\n"
"The `consumePrimary` method within the enclosing class can access the `version` parameter in the following example.\n"
"Meanwhile, the `consumeNested` method within the nested class can access both `version` and `id` parameters:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "WebSocket connection"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"The `io.quarkus.websockets.next.WebSocketConnection` object represents the WebSocket connection.\n"
"Quarkus provides a `@SessionScoped` CDI bean that implements this interface and can be injected in a `WebSocket` endpoint and used to interact with the connected client."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Methods annotated with `@OnOpen`, `@OnTextMessage`, `@OnBinaryMessage`, and `@OnClose` can access the injected `WebSocketConnection` object:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Note that outside of these methods, the `WebSocketConnection` object is not available. However, it is possible to <<list-open-connections,list all open connections>>."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The connection can be used to send messages to the client, access the path parameters, broadcast messages to all connected clients, etc."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The `WebSocketConnection` provides both a blocking and a non-blocking method variants to send messages:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`sendTextAndAwait(String message)`: Sends a text message to the client and waits for the message to be sent. It's blocking and should only be called from an executor thread."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"`sendText(String message)`: Sends a text message to the client. It returns a `Uni`. It's non-blocking. Make sure you or Quarkus subscribes to the returned `Uni` to send the message.\n"
"If you return the `Uni` from a method invoked by Quarkus (like with Quarkus REST, Quarkus WebSocket Next or Quarkus Messaging), it will subscribe to it and send the message.\n"
"For example:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "See <<subscribe-or-not-subscribe>> to learn more about subscribing to the `Uni`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "List open connections"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"It is also possible to list all open connections.\n"
"Quarkus provides a CDI bean of type `io.quarkus.websockets.next.OpenConnections` that declares convenient methods to access the connections."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`OpenConnections#listAll()` returns an immutable snapshot of all open connections at the given time."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"There are also other convenient methods.\n"
"For example, `OpenConnections#findByEndpointId(String)` makes it easy to find connections for a specific endpoint."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "User data"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"It is also possible to associate arbitrary user data with a specific connection.\n"
"The `io.quarkus.websockets.next.UserData` object obtained by the `WebSocketConnection#userData()` method represents mutable user data associated with a connection."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`CoolService#isCool()` returns `Boolean` that is associated with the current connection."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The `TypedKey.forBoolean(\"isCool\")` is the key used to obtain the data stored when the connection was created."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "CDI events"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Quarkus fires a CDI event of type `io.quarkus.websockets.next.WebSocketConnection` with qualifier `@io.quarkus.websockets.next.Open` asynchronously when a new connection is opened.\n"
"Moreover, a CDI event of type `WebSocketConnection` with qualifier `@io.quarkus.websockets.next.Closed` is fired asynchronously when a connection is closed."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "An asynchronous observer method is executed using the default blocking executor service."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Security"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Security capabilities are provided by the Quarkus Security extension.\n"
"Any xref:security-identity-providers.adoc[Identity provider] can be used to convert authentication credentials on the initial HTTP request into a `SecurityIdentity` instance.\n"
"The `SecurityIdentity` is then associated with the websocket connection.\n"
"Authorization options are demonstrated in following sections."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "When an OpenID Connect extension, `quarkus-oidc`, is used and token expires, Quarkus automatically closes connection."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Secure HTTP upgrade"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"An HTTP upgrade is secured when a standard security annotation is placed on an endpoint class or an HTTP Security policy is defined.\n"
"The advantage of securing HTTP upgrade is less processing, the authorization is performed early and only once.\n"
"You should always prefer HTTP upgrade security unless you need to perform an action on error (see <<secure-callback-methods>>) or a security check based on the payload (see <<secure-endpoints-with-permission-checkers>>)."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Use standard security annotation to secure an HTTP upgrade"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Initial HTTP handshake ends with the 401 status for anonymous users.\n"
"You can also redirect the handshake request on authorization failure with the `quarkus.websockets-next.server.security.auth-failure-redirect-url` configuration property."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"HTTP upgrade is only secured when a security annotation is declared on an endpoint class next to the `@WebSocket` annotation.\n"
"Placing a security annotation on an endpoint bean will not secure bean methods, only the HTTP upgrade.\n"
"You must always verify that your endpoint is secured as intended."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Use HTTP Security policy to secure an HTTP upgrade"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Security annotations used during authentication must be placed on an endpoint class as well, for the `SecurityIdentity` is created before the websocket connection is opened."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Select Bearer token authentication mechanism"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Require that an opening WebSocket handshake request is authenticated using the bearer token authentication.\n"
"See the xref:security-authentication-mechanisms.adoc#use-annotations-for-path-based-auth[Authentication mechanisms in Quarkus] guide for more information about selecting authentication mechanisms with annotations."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Start authenticating an opening WebSocket handshake request only when the `io.quarkus.oidc.BearerTokenAuthentication` annotation is detected."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Secure WebSocket endpoint callback methods"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"WebSocket endpoint callback methods can be secured with security annotations such as `io.quarkus.security.Authenticated`,\n"
"`jakarta.annotation.security.RolesAllowed` and other annotations listed in the xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[Supported security annotations] documentation."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "For example:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The echo callback method can only be invoked if the current security identity has an `admin` role."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The error handler is invoked in case of the authorization failure."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Secure server endpoints with permission checkers"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"WebSocket endpoints can be secured with the xref:security-authorize-web-endpoints-reference.adoc#permission-checker[permission checkers].\n"
"We recommend to <<secure-http-upgrade>> rather than individual endpoint methods. For example:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Example of a WebSocket endpoint with secured HTTP upgrade"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Example of a permission checker authorizing the HTTP upgrade"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "A permission checker authorizing an HTTP upgrade must declare exactly one method parameter, the `SecurityIdentity`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "It is also possible to run security checks on every message. For example, a message payload can be accessed like this:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The `getProduct` callback method can only be invoked if the current security identity has an `admin` role or the user is allowed to get the product detail."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "More information about permission checkers can be found on the JavaDoc of link:https://javadoc.io/doc/io.quarkus.security/quarkus-security/latest/io.quarkus.security.api/io/quarkus/security/PermissionChecker.html[`@PermissionChecker`]."
msgstr "パーミッションチェッカーの詳細については、以下のJavaDocを参照してください。 link:https://javadoc.io/doc/io.quarkus.security/quarkus-security/latest/io.quarkus.security.api/io/quarkus/security/PermissionChecker.html[@PermissionChecker] ."

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Bearer token authentication"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"The xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] expects that the bearer token is passed in the `Authorization` header during the initial HTTP handshake.\n"
"Java WebSocket clients such as <<client-api, WebSockets Next Client>> and https://vertx.io/docs/vertx-core/java/#_websockets_on_the_client[Vert.x WebSocketClient] support adding custom headers to the WebSocket opening handshake.\n"
"However, JavaScript clients that follow the https://websockets.spec.whatwg.org/#the-websocket-interface[WebSockets API] do not support adding custom headers.\n"
"Therefore, passing a bearer access token using a custom `Authorization` header is impossible with JavaScript-based WebSocket clients.\n"
"The JavaScript WebSocket client only allows to configure the HTTP https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Sec-WebSocket-Protocol[Sec-WebSocket-Protocol] request header for negotiating a sub-protocol.\n"
"If absolutely necessary, the `Sec-WebSocket-Protocol` header might be used as a carrier for custom headers, to provide a workaround the https://websockets.spec.whatwg.org/#the-websocket-interface[WebSockets API] restrictions.\n"
"Here is an example of a JavaScript client propagating the `Authorization` header as a sub-protocol value:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Expected format for the Quarkus Header sub-protocol is `quarkus-http-upgrade#header-name#header-value`.\n"
"Do not forget to encode the sub-protocol value as a URI component to avoid encoding issues."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Indicate 2 sub-protocols supported by the client, the sub-protocol of your choice and the Quarkus HTTP upgrade sub-protocol."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "For the WebSocket server to accept the `Authorization` passed as a sub-protocol, we must:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Configure our WebSocket server with the supported sub-protocols. When the WebSocket client provides a lists of supported sub-protocols in the HTTP `Sec-WebSocket-Protocol` request header, the WebSocket server must agree to serve content with one of them."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Enable Quarkus HTTP upgrade sub-protocol mapping to the opening WebSocket handshake request headers."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"WebSocket security model is origin-based and is not designed for the client-side authentication with headers or cookies.\n"
"For example, web browsers do not enforce the Same-origin policy for the opening WebSocket handshake request.\n"
"When you plan to use bearer access tokens during the opening WebSocket handshake request, we strongly recommend to follow the additional security measures listed below to minimize the security risks:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Restrict supported Origins to trusted Origins only with the xref:security-cors.adoc#cors-filter[CORS filter]."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Use the `wss` protocol to enforce encrypted HTTP connection via TLS."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Use a custom WebSocket ticket system which supplies a random token with the HTML page which hosts the JavaScript WebSockets client which must provide this token during the initial handshake request as a query parameter."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "Before the bearer access token sent on the initial HTTP request expires, you can send a new bearer access token as part of a message and update current `SecurityIdentity` attached to the WebSocket server connection:"
msgstr "最初の HTTP 要求で送信されたベアラ・アクセストークンの有効期限が切れる前に、メッセージの一部として新しいベアラ・アクセストークンを送信し、WebSocket サーバー接続にアタッチされている現在の `SecurityIdentity` を更新できます："

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "Asynchronously update the `SecurityIdentity` attached to the WebSocket server connection."
msgstr "WebSocket サーバー接続にアタッチされた `SecurityIdentity` を非同期に更新します。"

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "The current `SecurityIdentity` instance is still available and can be used during the `SecurityIdentity` update."
msgstr "現在の `SecurityIdentity` インスタンスはまだ利用可能で、 `SecurityIdentity` 更新中に使用できます。"

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid ""
"The xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication] mechanism has builtin support for the `SecurityIdentity` update.\n"
"If you use other authentication mechanisms, you must implement the `io.quarkus.security.identity.IdentityProvider` provider that supports the `io.quarkus.websockets.next.runtime.spi.security.WebSocketIdentityUpdateRequest` authentication request."
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDC ベアラ・トークン認証] メカニズムには、 `SecurityIdentity` アップデートが組み込まれています。他の認証メカニズムを使用する場合は、 `io.quarkus.websockets.next.runtime.spi.security.WebSocketIdentityUpdateRequest` 認証要求をサポートする `io.quarkus.security.identity.IdentityProvider` プロバイダを実装する必要があります。"

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid ""
"The new bearer access token must have the same `sub` claim value as the token used during the initial HTTP request.\n"
"Please also make sure the `SecurityIdentity` is only updated when necessary and the WebSocket message with credentials do not appear in your application logs.\n"
"Always use the `wss` protocol to enforce encrypted HTTP connection via TLS when sending credentials as part of the WebSocket message."
msgstr "新しいベアラアクセストークンは、最初の HTTP 要求で使用されたトークンと同じ `sub` claim 値を持つ必要があります。また、 `SecurityIdentity` が必要な場合のみ更新され、資格情報を含む WebSocket メッセージがアプリケーションログに表示されないことを確認してください。WebSocket メッセージの一部として認証情報を送信する場合は、常に `wss` プロトコルを使用して、TLS による暗号化 HTTP 接続を実施してください。"

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "WebSocket client application have to send a new access token before previous one expires:"
msgstr "WebSocketクライアントアプリケーションは、以前のアクセストークンの有効期限が切れる前に新しいアクセストークンを送信する必要があります："

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "Complete example is located in the `security-openid-connect-websockets-next-quickstart` link:{quickstarts-tree-url}/security-openid-connect-websockets-next-quickstart[directory]."
msgstr "完全なサンプルは `security-openid-connect-websockets-next-quickstart` link:{quickstarts-tree-url}/security-openid-connect-websockets-next-quickstart[ディレクトリに] あります。"

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Inspect and/or reject HTTP upgrade"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"To inspect an HTTP upgrade, you must provide a CDI bean implementing the `io.quarkus.websockets.next.HttpUpgradeCheck` interface.\n"
"Quarkus calls the `HttpUpgradeCheck#perform` method on every HTTP request that should be upgraded to a WebSocket connection.\n"
"Inside this method, you can perform any business logic and/or reject the HTTP upgrade."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Example HttpUpgradeCheck"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The CDI beans implementing `HttpUpgradeCheck` interface can be either `@ApplicationScoped`, `@Singleton` or `@Dependent` beans, but never the `@RequestScoped` beans."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Reject the HTTP upgrade. Initial HTTP handshake ends with the 400 Bad Request response status code."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "You can choose WebSocket endpoints to which the `HttpUpgradeCheck` is applied with the `HttpUpgradeCheck#appliesTo` method."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "TLS"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "As a direct consequence of the fact this extension reuses the _main_ HTTP server, all the relevant server configurations apply. See Refer to the xref:http-reference.adoc#ssl[HTTP guide] for more details."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Hibernate multitenancy"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The `RoutingContext` is not available after the HTTP upgrade. However, it is possible to inject the `WebSocketConnection` and access the headers of the initial HTTP request."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "If a custom `TenantResolver` is used and you would like to combine REST/HTTP and WebSockets, the code may look like this:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "For more information on Hibernate multitenancy, refer to the https://quarkus.io/guides/hibernate-orm#multitenancy[hibernate documentation]."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Client API"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Client connectors"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"A connector can be used to configure and open a new client connection backed by a client endpoint that is used to consume and send messages.\n"
"Quarkus provides a CDI bean with bean type `io.quarkus.websockets.next.WebSocketConnector<CLIENT>` and default qualifer that can be injected in other beans.\n"
"The actual type argument of an injection point is used to determine the client endpoint.\n"
"The type is validated during build - if it does not represent a client endpoint the build fails."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Let’s consider the following client endpoint:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Client endpoint"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The connector for this client endpoint is used as follows:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Connector"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Inject the connector for `ClientEndpoint`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "If the base `URI` is not supplied we attempt to obtain the value from the config. The key consists of the client id and the `.base-uri` suffix."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Set the path param value. Throws `IllegalArgumentException` if the client endpoint path does not contain a parameter with the given name."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Use the connection to send messages, if needed."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "If an application attempts to inject a connector for a missing endpoint, an error is thrown."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Connectors are not thread-safe and should not be used concurrently.\n"
"Connectors should also not be reused.\n"
"If you need to create multiple connections in a row you'll need to obtain a new connetor instance programmatically using `Instance#get()`:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Basic connector"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"In the case where the application developer does not need the combination of the client endpoint and the connector, a _basic connector_ can be used.\n"
"The basic connector is a simple way to create a connection and consume/send messages without defining a client endpoint."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Inject the connector."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The base URI must be always set."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The additional path that should be appended to the base URI."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Set the execution model for callback handlers. By default, the callback may block the current thread. However in this case, the callback is executed on the event loop and may not block the current thread."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The lambda will be called for every text message sent from the server."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"The basic connector is closer to a low-level API and is reserved for advanced users.\n"
"However, unlike others low-level WebSocket clients, it is still a CDI bean and can be injected in other beans.\n"
"It also provides a way to configure the execution model of the callbacks, ensuring optimal integration with the rest of Quarkus."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "WebSocket client connection"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"The `io.quarkus.websockets.next.WebSocketClientConnection` object represents the WebSocket connection.\n"
"Quarkus provides a `@SessionScoped` CDI bean that implements this interface and can be injected in a `WebSocketClient` endpoint and used to interact with the connected server."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Methods annotated with `@OnOpen`, `@OnTextMessage`, `@OnBinaryMessage`, and `@OnClose` can access the injected `WebSocketClientConnection` object:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Note that outside of these methods, the `WebSocketClientConnection` object is not available. However, it is possible to <<list-open-client-connections,list all open client connections>>."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The connection can be used to send messages to the client, access the path parameters, etc."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The `WebSocketClientConnection` provides both a blocking and a non-blocking method variants to send messages:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "List open client connections"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"It is also possible to list all open connections.\n"
"Quarkus provides a CDI bean of type `io.quarkus.websockets.next.OpenClientConnections` that declares convenient methods to access the connections."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`OpenClientConnections#listAll()` returns an immutable snapshot of all open connections at the given time."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"There are also other convenient methods.\n"
"For example, `OpenClientConnections#findByClientId(String)` makes it easy to find connections for a specific endpoint."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"It is also possible to associate arbitrary user data with a specific connection.\n"
"The `io.quarkus.websockets.next.UserData` object obtained by the `WebSocketClientConnection#userData()` method represents mutable user data associated with a connection."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "Specify in connector"
msgstr "コネクタで指定"

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "In some scenarios you may wish to associate user data with a connection to be created by a <<client-connectors,connector>>. In this case, you can set values on the connector instance prior to obtaining the connection. This is particularly useful if you need to do something when the connection is opened and the necessary context cannot be otherwise inferred."
msgstr "シナリオによっては、 xref:client-connectors[コネクタによって] 作成される接続にユーザ データを関連付けたい場合があります。この場合、接続を取得する前にコネクタ・インスタンスに値を設定できます。これは、接続がオープンされたときに何かを行う必要があり、必要なコンテキストを他の方法で推測できない場合に特に便利です。"

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Endpoint"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Quarkus fires a CDI event of type `io.quarkus.websockets.next.WebSocketClientConnection` with qualifier `@io.quarkus.websockets.next.Open` asynchronously when a new connection is opened.\n"
"Moreover, a CDI event of type `WebSocketClientConnection` with qualifier `@io.quarkus.websockets.next.Closed` is fired asynchronously when a connection is closed."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Configuring SSL/TLS"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "To establish a TLS connection, you need to configure a _named_ configuration using the xref:./tls-registry-reference.adoc[TLS registry]. This is typically done via configuration:"
msgstr "TLS接続を確立するには、 xref:./tls-registry-reference.adoc[TLSレジストリを] 使った _名前付き_ コンフィギュレーションを設定する必要があります。これは通常、コンフィギュレーションを使って行います："

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "With a _named_ TLS configuration established, you can then configure the client to use it:"
msgstr "_名前付き_ TLSコンフィギュレーションが確立されたら、それを使用するようにクライアントを設定できます："

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "Alternatively, you can supply the configuration name using the <<client-connectors,connector>>:"
msgstr "または、 xref:client-connectors[コネクタを] 使用して構成名を指定することもできます："

#: _versions/3.27/guides/websockets-next-reference.adoc
#, fuzzy
msgid "A name supplied to the connector will override any statically configured name. This can be useful for establishing a default configuration which can be overridden at runtime as necessary."
msgstr "コネクタに与えられた名前は、静的に構成された名前を上書きします。これは、必要に応じて実行時に上書きできるデフォルト構成を確立するのに便利です。"

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"When using the WebSocket client, using a _named_ configuration is required to avoid conflicts with other TLS configurations.\n"
"The client will not use the default TLS configuration."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "When you configure a _named_ TLS configuration, TLS is enabled by default."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Traffic logging"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"Quarkus can log the messages sent and received for debugging purposes.\n"
"To enable traffic logging for the server, set the `quarkus.websockets-next.server.traffic-logging.enabled` configuration property to `true`.\n"
"To enable traffic logging for the client, set the `quarkus.websockets-next.client.traffic-logging.enabled` configuration property to `true`.\n"
"The payload of text messages is logged as well.\n"
"However, the number of logged characters is limited.\n"
"The default limit is 100, but you can change this limit with the `quarkus.websockets-next.server.traffic-logging.text-payload-limit` and `quarkus.websockets-next.client.traffic-logging.text-payload-limit` configuration property, respectively."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "The messages are only logged if the `DEBUG` level is enabled for the logger `io.quarkus.websockets.next.traffic`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Example server configuration"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Enables traffic logging."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Set the number of characters of a text message payload which will be logged."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Enable `DEBUG` level is for the logger `io.quarkus.websockets.next.traffic`."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "When to subscribe to a `Uni` or `Multi`"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "`Uni` and `Multi` are lazy types, which means that they do not start processing until they are subscribed to."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "When you get (from a parameter or from a method you called) a `Uni` or a `Multi`, whether you should subscribe to it depends on the context:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "if you return the `Uni` or `Multi` in a method invoked by Quarkus (like with Quarkus REST, Quarkus WebSocket Next or Quarkus Messaging), Quarkus subscribes to it and processes the items emitted by the `Multi` or the item emitted by the `Uni`:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "When a `Uni` or `Multi` is returned from a method annotated with `@OnOpen`, `@OnTextMessage`, `@OnBinaryMessage`, or `@OnClose`, Quarkus subscribes to it automatically."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "if you do not return the `Uni` or `Multi` in a method invoked by Quarkus, you should subscribe to it:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Telemetry"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"When the OpenTelemetry extension is present, traces for opened and closed WebSocket connections are collected by default.\n"
"If you do not require WebSocket traces, you can disable collecting of traces like in the example below:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid ""
"When the Micrometer extension is present, Quarkus can collect metrics for messages, errors and bytes transferred.\n"
"If you require a WebSocket metrics, you can enable the metrics like in the example below:"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Telemetry for the `BasicWebSocketConnector` is currently not supported."
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "Configuration reference"
msgstr ""

#: _versions/3.27/guides/websockets-next-reference.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
