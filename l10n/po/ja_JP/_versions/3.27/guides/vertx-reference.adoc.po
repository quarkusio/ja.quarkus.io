msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Vert.x Reference Guide"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"https://vertx.io[Vert.x] is a toolkit for building reactive applications.\n"
"As described in the xref:quarkus-reactive-architecture.adoc[Quarkus Reactive Architecture], Quarkus uses Vert.x underneath."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"This guide is the companion to the xref:vertx.adoc[Using Eclipse Vert.x API from a Quarkus Application] guide.\n"
"It provides more advanced details about the usage and the configuration of the Vert.x instance used by Quarkus."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Access the Vert.x instance"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"To access the managed Vert.x instance, add the `quarkus-vertx` extension to your project.\n"
"This dependency might already be available in your project (as a transitive dependency)."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "With this extension, you can retrieve the managed instance of Vert.x using either field or constructor injection:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "You can inject either the:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.vertx.core.Vertx` instance exposing the _bare_ Vert.x API"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.vertx.mutiny.core.Vertx` instance exposing the _Mutiny_ API"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "We recommend using the Mutiny variant as it integrates with the other reactive APIs provided by Quarkus."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Mutiny"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Documentation about the Vert.x Mutiny variant is available on https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Configure the Vert.x instance"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"You can configure the Vert.x instance from the `application.properties` file.\n"
"The following table lists the supported properties:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "See <<customizing-the-vert-x-configuration>> to configure the Vert.x instance using a programmatic approach."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Use Vert.x clients"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"In addition to Vert.x core, you can use most Vert.x ecosystem libraries.\n"
"Some Quarkus extension already wraps Vert.x libraries."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Available APIs"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"The following table lists the **most** used libraries from the Vert.x ecosystem.\n"
"To access these APIs, add the indicated extension or dependency to your project.\n"
"Check the associated documentation to learn how to use them."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "API"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Extension or Dependency"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Documentation"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "AMQP Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.quarkus:quarkus-messaging-amqp` (extension)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "xref:amqp.adoc[Getting Started to Quarkus Messaging with AMQP]"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Circuit Breaker"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-circuit-breaker` (external dependency)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "https://vertx.io/docs/vertx-circuit-breaker/java/"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Consul Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-consul-client` (external dependency)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "https://vertx.io/docs/vertx-consul-client/java/"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "DB2 Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.quarkus:quarkus-reactive-db2-client` (extension)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "xref:reactive-sql-clients.adoc[Reactive SQL Clients]"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Kafka Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.quarkus:quarkus-messaging-kafka` (extension)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "xref:kafka.adoc[Apache Kafka Reference Guide]"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Mail Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.quarkus:quarkus-mailer` (extension)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "xref:mailer.adoc[Sending emails using SMTP]"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "MQTT Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.quarkus:quarkus-messaging-mqtt` (extension)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "No guide yet"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "MS SQL Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.quarkus:quarkus-reactive-mssql-client` (extension)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "MySQL Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.quarkus:quarkus-reactive-mysql-client` (extension)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Oracle Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.quarkus:quarkus-reactive-oracle-client` (extension)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "PostgreSQL Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.quarkus:quarkus-reactive-pg-client` (extension)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "RabbitMQ Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-rabbitmq-client` (external dependency)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "https://vertx.io/docs/vertx-rabbitmq-client/java"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Redis Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.quarkus:quarkus-redis-client` (extension)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "xref:redis.adoc[Using the Redis Client]"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Web Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io.smallrye.reactive:smallrye-mutiny-vertx-web-client` (external dependency)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "https://vertx.io/docs/vertx-web-client/java/"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "To learn more about the usage of the Vert.x Mutiny API, refer to https://smallrye.io/smallrye-mutiny-vertx-bindings."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Use the Vert.x Web Client"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"This section gives an example using the Vert.x `WebClient` in the context of a Quarkus REST (formerly RESTEasy Reactive) application.\n"
"As indicated in the table above, add the following dependency to your project:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Now, in your code, you can create an instance of `WebClient`:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"This resource creates a `WebClient` and, upon request, uses this client to invoke a remote HTTP API.\n"
"Depending on the result, the response is forwarded as received, or it creates a JSON object wrapping the error.\n"
"The `WebClient` is asynchronous (and non-blocking), to the endpoint returns a `Uni`."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"The application can also run as a native executable.\n"
"But, first, we need to instruct Quarkus to enable _ssl_ (if the remote API uses HTTPS).\n"
"Open the `src/main/resources/application.properties` and add:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Then, create the native executable with:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Use Vert.x JSON"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"Vert.x APIs often rely on JSON.\n"
"Vert.x provides two convenient classes to manipulate JSON document: `io.vertx.core.json.JsonObject` and `io.vertx.core.json.JsonArray`."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`JsonObject` can be used to map an object into its JSON representation and build an object from a JSON document:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"Note that these features use the mapper managed by the `quarkus-jackson` extension.\n"
"Refer to xref:rest-json.adoc#json[Jackson configuration] to customize the mapping."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"JSON Object and JSON Array are both supported as Quarkus HTTP endpoint requests and response bodies (using classic RESTEasy and Quarkus REST).\n"
"Consider these endpoints:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "http://localhost:8080/hello/Quarkus/object returns:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "http://localhost:8080/hello/Quarkus/array returns:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "This works equally well when the JSON content is a request body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Use Verticles"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles] is \"a simple, scalable, actor-like deployment and concurrency model\" provided by _Vert.x_.\n"
"This model does not claim to be a strict actor-model implementation, but it shares similarities, especially concerning concurrency, scaling, and deployment.\n"
"To use this model, you write and _deploy_ verticles, communicating by sending messages on the event bus."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"You can deploy _verticles_ in Quarkus.\n"
"It supports:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core.AbstractVerticle`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Deploy Verticles"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "To deploy verticles, use the `deployVerticle` method:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "If you use the Mutiny-variant of Vert.x, be aware that the `deployVerticle` method returns a `Uni`, and you would need to trigger a subscription to make the actual deployment."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "An example explaining how to deploy verticles during the initialization of the application will follow."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Use @ApplicationScoped beans as Verticle"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"In general, Vert.x verticles are not CDI beans.\n"
"And so cannot use injection.\n"
"However, in Quarkus, you can deploy verticles as beans.\n"
"Note that in this case, CDI (Arc in Quarkus) is responsible for creating the instance."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "The following snippet provides an example:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "You don't have to inject the `vertx` instance; instead, leverage the protected field from `AbstractVerticle`."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Then, deploy the verticle instances with:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Create multiple verticles instances"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"When using `@ApplicationScoped`, you will get a single instance for your verticle.\n"
"Having multiple instances of verticles can be helpful to share the load among them.\n"
"Each of them will be associated with a different I/O thread (Vert.x event loop)."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "To deploy multiple instances of your verticle, use the `@Dependent` scope instead of `@ApplicationScoped`:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Then, deploy your verticle as follows:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"The `init` method receives an `Instance<MyVerticle>`.\n"
"Then, you pass a supplier to the `deployVerticle` method.\n"
"The supplier is just calling the `get()` method.\n"
"Thanks to the `@Dependent` scope, it returns a new instance on every call.\n"
"Finally, you pass the desired number of instances to the `DeploymentOptions`, such as two in the previous example.\n"
"It will call the supplier twice, which will create two instances of your verticle."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Use the Event Bus"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"Vert.x comes with a built-in https://vertx.io/docs/vertx-core/java/#event_bus[event bus] that you can use from your Quarkus application.\n"
"So, your application components (CDI beans, resources...) can interact using asynchronous events, thus promoting loose-coupling."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"With the event bus, you send _messages_ to _virtual addresses_.\n"
"The event bus offers three types of delivery mechanisms:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "point-to-point - send the message, one consumer receives it. If several consumers listen to the address, a round-robin is applied;"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "publish/subscribe - publish a message; all the consumers listening to the address are receiving the message;"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "request/reply - send the message and expect a response. The receiver can respond to the message in an asynchronous fashion."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "All these delivery mechanisms are non-blocking and are providing one of the fundamental bricks to build reactive applications."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Consume events"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"While you can use the Vert.x API to register consumers, Quarkus comes with declarative support.\n"
"To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "If not set, the address is the fully qualified name of the bean; for instance, in this snippet, it's `org.acme.vertx.GreetingService`."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "The method parameter is the message body. If the method returns _something_, it's the message response."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Configure the address"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Receive the messages sent to the `greeting` address"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"The address value can be a property expression.\n"
"In this case, the configured value is used instead: `@ConsumeEvent(\"${my.consumer.address}\")`.\n"
"Additionally, the property expression can specify a default value: `@ConsumeEvent(\"${my.consumer.address:defaultAddress}\")`."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Config Property Example"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Receive the messages sent to the address configured with the `my.consumer.address` key."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "If no config property with the specified key exists and no default value is set then the application startup fails."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Process events asynchronously"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"The previous examples use synchronous processing.\n"
"Asynchronous processing is also possible by returning either an `io.smallrye.mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"The previous example uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Blocking processing of events"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"By default, the code consuming the event must be _non-blocking_, as it's called on an I/O thread.\n"
"If your processing is blocking, use the `@io.smallrye.common.annotation.Blocking` annotation:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Alternatively, you can use the `blocking` attribute from the `@ConsumeEvent` annotation:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "When using `@Blocking`, it ignores the value of the `blocking` attribute of `@ConsumeEvent`."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Reply to events"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"The _return_ value of a method annotated with `@ConsumeEvent` is used to respond to the incoming message.\n"
"For instance, in the following snippet, the returned `String` is the response."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "You can also return a `Uni<T>` or a `CompletionStage<T>` to handle asynchronous reply:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "You can inject an `executor` if you use the Context Propagation extension:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Implement fire-and-forget interactions"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"You don't have to reply to received messages.\n"
"Typically, for a _fire and forget_ interaction, the messages are consumed, and the sender does not need to know about it.\n"
"To implement this pattern, your consumer method returns `void`."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Consume messages (instead of events)"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Unlike the previous example using the _payloads_ directly, you can also use `Message` directly:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Handle failures"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "If a method annotated with `@ConsumeEvent` throws an exception, then:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "if a reply handler is set, then the failure is propagated back to the sender via an `io.vertx.core.eventbus.ReplyException` with code `ConsumeEvent#FAILURE_CODE` and the exception message,"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "if no reply handler is set, then the exception is rethrown (and wrapped in a `RuntimeException` if necessary) and can be handled by the default exception handler, _i.e._ `io.vertx.core.Vertx#exceptionHandler()`."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Send messages"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Sending and publishing messages use the Vert.x event bus:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Inject the Event bus"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "The `EventBus` object provides methods to:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`send` a message to a specific address - one single consumer receives the message."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`publish` a message to a specific address - all consumers receive the messages."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`request` a message and expect a reply"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Process events on virtual threads"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"Methods annotated with `@ConsumeEvent` can also be annotated with `@RunOnVirtualThread`.\n"
"In this case, the method is invoked on a virtual thread.\n"
"Each event is invoked on a different virtual thread."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "To use this feature, make sure:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Your Java runtime supports virtual threads."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Your method uses a blocking signature."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"The second point means only methods returning an object or `void` can use `@RunOnVirtualThread`.\n"
"Methods returning a `Uni` or a `CompletionStage` **cannot** run on virtual threads."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Read xref:./virtual-threads.adoc[the virtual thread guide] for more details."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Use codecs"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
#, fuzzy
msgid ""
"The link:++https://vertx.io/docs/vertx-core/java/#event_bus++[Vert.x Event Bus] uses link:++https://vertx.io/docs/vertx-core/java/#_message_codecs++[codecs] to _serialize_ and _deserialize_ message objects.\n"
"Quarkus provides a default codec for local delivery.\n"
"This codec is automatically used for return types and message body parameters of local consumers, i.e. methods annotated with `@ConsumeEvent` where `ConsumeEvent#local() == true` (which is the default)."
msgstr "link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Busでは] 、 link:https://vertx.io/docs/vertx-core/java/#_message_codecs[コーデックを] 使用してメッセージオブジェクトの _シリアライズと_ _デシリアライズを_ 行います。Quarkusは、ローカル配信用のデフォルトのコーデックを提供します。 `ConsumeEvent#local() == true` このコーデックは、ローカル・コンシューマーのリターン・タイプやメッセージ・ボディのパラメータに自動的に使用されます。つまり、 `@ConsumeEvent` （デフォルト）でアノテーションされたメソッドです。"

#: _versions/3.27/guides/vertx-reference.adoc
msgid "So that you can exchange the message objects as follows:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "If you want to use a specific codec, you need to set it on both ends explicitly:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Set the name of the codec to use to send the message"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Set the codec to use to receive the message"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Combine HTTP and the Event Bus"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"Let's revisit a greeting HTTP endpoint and use asynchronous message passing to delegate the call to a separated bean.\n"
"It uses the request/reply dispatching mechanism.\n"
"Instead of implementing the business logic inside the Jakarta REST endpoint, we are sending a message.\n"
"Another bean consumes this message, and the response is sent using the _reply_ mechanism."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "In your HTTP endpoint class, inject the event bus and uses the `request` method to send a message to the event bus and expect a response:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "send the `name` to the `greeting` address and request a response"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "when we get the response, extract the body and send it to the user"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"the HTTP method returns a `Uni`.\n"
"If you are using Quarkus REST, `Uni` support is built-in.\n"
"If you are using _classic_ RESTEasy, you need to add the `quarkus resteasy-mutiny` extension to your project."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"We need a consumer listening on the `greeting` address.\n"
"This consumer can be in the same class or another bean such as:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "This bean receives the name and returns the greeting message."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "With this in place, every HTTP request on `/bus/quarkus` sends a message to the event bus, waits for a reply, and when this one arrives, writes the HTTP response:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "To better understand, let's detail how the HTTP request/response has been handled:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "The request is received by the `greeting` method"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "a message containing the _name_ is sent to the event bus"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Another bean receives this message and computes the response"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "This response is sent back using the reply mechanism"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Once the reply is received by the sender, the content is written to the HTTP response"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Bidirectional communication with browsers by using SockJS"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"The SockJS bridge provided by Vert.x allows browser applications and Quarkus applications to communicate using the event bus.\n"
"It connects both sides.\n"
"So, both sides can send messages received on the other side.\n"
"It supports the three delivery mechanisms."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"SockJS negotiates the communication channel between the Quarkus application and the browser.\n"
"If WebSockets are supported, it uses them; otherwise, it degrades to SSE, long polling, etc."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "So use SockJS, you need to configure the bridge, especially the addresses that will be used to communicate:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"This code configures the SockJS bridge to send all the messages targeting the `ticks` address to the connected browsers.\n"
"More detailed explanations about the configuration can be found on https://vertx.io/docs/vertx-web/java/#_sockjs_event_bus_bridge[the Vert.x SockJS Bridge documentation]."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "The browser must use the `vertx-eventbus` JavaScript library to consume the message:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Use native transports"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Native transports are not supported in native executables."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "To use `io_uring`, refer to the <<use-io_uring>> section."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"Vert.x is capable of using https://netty.io/wiki/native-transports.html[Netty's native transports], which offers performance improvements on specific platforms.\n"
"To enable them, you must include the appropriate dependency for your platform.\n"
"It's usually a good idea to have both to keep your application platform-agnostic.\n"
"Netty is smart enough to use the correct one, that includes none at all on unsupported platforms:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"You will also have to explicitly configure Vert.x to use the native transport.\n"
"In `application.properties` add:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Or in `application.yml`:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "If all is well quarkus will log:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport Enabled: true"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Native Linux transport"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "On Linux you can enable the following socket options:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "SO_REUSEPORT"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "quarkus.http.so-reuse-port=true"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "TCP_QUICKACK"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "quarkus.http.tcp-quick-ack=true"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "TCP_CORK"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "quarkus.http.tcp-cork=true"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "TCP_FASTOPEN"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "quarkus.http.tcp-fast-open=true"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Native macOS transport"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "On macOS Sierra and above you can enable the following socket options:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Use a Vert.x context-aware scheduler"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"Some Mutiny operators need to schedule work on an executor thread pool.\n"
"A good example is `.onItem().delayIt().by(Duration.ofMillis(10))` as it needs such an executor to delay emissions."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "The default executor is returned by `io.smallrye.mutiny.infrastructure.Infrastructure` and it is already configured and managed by Quarkus."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "That being said, there are cases where you need to make sure that an operation is run on a Vert.x (duplicated) context and not just on any random thread."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"The `io.smallrye.mutiny.vertx.core.ContextAwareScheduler` interface offers an API to obtain context-aware schedulers.\n"
"Such a scheduler is configured with:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "a delegate `ScheduledExecutorService` of your choice (hint: you can reuse `Infrastructure.getDefaultWorkerPool()`), and"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "a context fetching strategy among:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "an explicit `Context`, or"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "calling `Vertx::getOrCreateContext()` either on the current thread or later when the scheduling request happens, or"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "calling `Vertx::currentContext()`, which fails if the current thread is not a Vert.x thread."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Here is a sample where `ContextAwareScheduler` is used:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"In this example a scheduler is created by capturing the context of the Vert.x event-loop that calls `asyncStart()`.\n"
"The `delayIt` operator uses that scheduler, and we can check that the context that we get in `invoke` is a Vert.x duplicated context where the data for key `\"foo\"` has been propagated."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Use a Unix domain socket"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"Listening on a Unix domain socket allows us to dispense with the overhead of TCP\n"
"if the connection to the quarkus service is established from the same host.\n"
"This can happen if access to the service goes through a proxy which is often the case\n"
"if you're setting up a service mesh with a proxy like Envoy."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "This will only work on platforms that support <<native-transport>>."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Enable the appropriate <<native-transport>> and set the following environment property:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
"\n"
"quarkus.vertx.prefer-native-transport=true"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"By itself this will not disable the tcp socket which by default will open on\n"
"`0.0.0.0:8080`. It can be explicitly disabled:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "quarkus.http.host-enabled=false"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"These properties can be set through Java's `-D` command line parameter or\n"
"on `application.properties`."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"Do not forget to add the native transport dependency.\n"
"See <<native-transport>> for details."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Make sure your application has the right permissions to write to the socket."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Use io_uring"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io_uring` is not supported in native executables."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`io_uring` support is experimental"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"`io_uring` is a Linux kernel interface that allows you to send and receive data asynchronously.\n"
"It provides unified semantics for both file and network I/O.\n"
"It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets.\n"
"It has the potential to provide modest performance benefits to network I/O on its own and greater benefits for mixed file and network I/O application workloads."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "To learn more about `io_uring`, we recommend the following links:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"https://developers.redhat.com/articles/2023/04/12/why-you-should-use-iouring-network-io[Why you should use io_uring for network I/O]: The main benefit of io_uring for network I/O is a modern asynchronous API that is straightforward to use and provides unified semantics for file and network I/O.\n"
"A potential performance benefit of io_uring for network I/O is reducing the number of syscalls.\n"
"This could provide the biggest benefit for high volumes of small operations where the overhead of system calls can be significant."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"https://dzone.com/articles/the-backend-revolution-or-why-io-uring-is-so-impor[The Backend Revolution and Why io_uring Is So Important]: The io_uring API uses two ring buffers for communication between application and kernel (hence the API name) and designed in a way that enables natural batching of requests and responses.\n"
"Besides, it provides a way to submit multiple requests in one system call, which can reduce overhead."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"https://stackoverflow.com/questions/61767702/what-exactly-is-io-uring[What exactly is io_uring?]: io_uring is a Linux kernel interface to efficiently allow you to send and receive data asynchronously.\n"
"It was originally designed to target block devices and files but has since gained the ability to work with things like network sockets."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"To use `io_uring`, you need to add two dependencies to your project and enable native transport.\n"
"First add the following dependencies to your project:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Then, in the `application.properties`, add:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Can I use io_uring on my Linux machine?"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "To check if you can use `io_uring` on your Linux machine, execute the following command:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "If it prints something like above, you can use `io_uring`."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Troubleshooting"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"`io_uring` support is still experimental.\n"
"Check the https://github.com/netty/netty-incubator-transport-io_uring#faq[Netty io_uring FAQ] if you see some odd behavior.\n"
"Also, the https://github.com/netty/netty-incubator-transport-io_uring/issues/152[netty io_uring was slower than epoll] issue describes a few configuration mistakes."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Domain sockets are not yet supported with io_uring."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "The Vert.x asynchronous file system API does not use io_uring yet."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Deploy on read-only environments"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "In environments with read only file systems you may receive errors of the form:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Assuming `/tmp/` is writable this can be fixed by setting the `vertx.cacheDirBase` property to point to a directory in `/tmp/` for instance in Kubernetes by creating an environment variable `JAVA_OPTS` with the value `-Dvertx.cacheDirBase=/tmp/vertx`, or setting the `quarkus.vertx.cache-directory` property in `application.properties`:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Customize the Vert.x configuration"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"The configuration of the managed Vert.x instance can be provided using the `application.properties` file, but also using _special beans_.\n"
"CDI beans exposing the `io.quarkus.vertx.VertxOptionsCustomizer` interface can be used to customize the Vert.x configuration.\n"
"For example, the following customizer change the `tmp` base directory:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "The _customizer_ beans received the `VertxOptions` (coming from the application configuration), and can modify them."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Brotli4J and cross-platform support"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"Brotli4J is a native library that provides support for the Brotli compression algorithm.\n"
"By default, Quarkus includes the Brotli native library matching the platform you are running on.\n"
"But sometimes, you need to include the native library for a different platform."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid ""
"In this case, you need to explicitly add a dependency to your project.\n"
"For example, if you need to include the native library for `linux-aarch64`, you can add the following dependency:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "This will include the native library for `linux-aarch64` in your project, in addition to the one matching your machine."
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "Here is the list of available brotli4j artifacts for the different platforms:"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`native-linux-x86_64`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`native-linux-s390x`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`native-linux-ppc64le`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`native-linux-aarch64`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`native-linux-armv7`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`native-linux-riscv64`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`native-windows-x86_64`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`native-windows-aarch64`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`native-macos-x86_64`"
msgstr ""

#: _versions/3.27/guides/vertx-reference.adoc
msgid "`native-macos-aarch64`"
msgstr ""
