msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Using the legacy REST Client"
msgstr "レガシーREST クライアントの利用"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "This guide is about the REST Client compatible with https://resteasy.dev[RESTEasy Classic] which used to be the default Jakarta REST (formerly known as JAX-RS) implementation until Quarkus 2.8."
msgstr "このガイドは、Quarkus 2.8までデフォルトのJakarta REST（旧称JAX-RS）実装であった link:https://resteasy.dev[RESTEasy Classic] と互換性のあるREST Clientに関するものです。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"It is now recommended to use Quarkus REST (formerly RESTEasy Reactive), which supports equally well traditional blocking workloads and reactive workloads.\n"
"For more information about Quarkus REST,\n"
"please see the xref:rest-client.adoc[REST Client guide] and, for the server side, the xref:rest-json.adoc[introductory REST JSON guide] or the more detailed xref:rest.adoc[Quarkus REST guide]."
msgstr ""
"Quarkus REST（旧RESTEasy Reactive）は、従来のブロック型ワークロードとリアクティブ型ワークロードを同じようにサポートします。\n"
"Quarkus RESTの詳細については、 xref:rest-client.adoc[RESTクライアントガイド] 、サーバーサイドについては、 xref:rest-json.adoc[REST JSON入門ガイド] または詳細な xref:rest.adoc[Quarkus RESTガイド] を参照してください。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"This guide explains how to use the RESTEasy REST Client in order to interact with REST APIs\n"
"with very little effort."
msgstr "このガイドでは、MicroProfile REST Clientを使用して、ほとんど手間をかけずにREST APIとやりとりする方法を説明します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "there is another guide if you need to write server xref:rest-json.adoc[JSON REST APIs]."
msgstr "サーバーサイドで JSON REST API を書く必要がある場合は、link:rest-json.html[JSON REST API ガイド]を参照してください。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The solution is located in the `resteasy-client-quickstart` link:{quickstarts-tree-url}/resteasy-client-quickstart[directory]."
msgstr "ソリューションは `resteasy-client-quickstart` link:{quickstarts-tree-url}/resteasy-client-quickstart[ディレクトリ] にあります。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr "このコマンドは、REST エンドポイントを持つ Maven プロジェクトを生成し、 `rest-client` と `resteasy-jackson` のエクステンションをインポートします。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "the `resteasy` and `resteasy-jackson` extensions for the REST server support;"
msgstr "REST サーバーのサポートのための `resteasy` と `resteasy-jackson` のエクステンション。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "the `resteasy-client` and `resteasy-client-jackson` extensions for the REST client support."
msgstr "`resteasy-client` と `resteasy-client-jackson` のエクステンションで REST クライアントをサポートしています。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `resteasy-client` and the `resteasy-client-jackson` extensions\n"
"to your project by running the following command in your project base directory:"
msgstr "Quarkusプロジェクトがすでに設定されている場合は、プロジェクトのベースディレクトリで次のコマンドを実行することで、 `resteasy-client` 、 `resteasy-client-jackson` エクステンションをプロジェクトに追加できます："

#: _versions/3.27/guides/resteasy-client.adoc
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml` に以下が追加されます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Setting up the model"
msgstr "モデルの設定"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.\n"
"Our first order of business is to set up the model we will be using, in the form of an `Extension` POJO."
msgstr "このガイドでは、 link:https://stage.code.quarkus.io[stage.code.quarkus.io] サービスが提供するREST APIの一部を利用する方法をデモします。まず最初に、 使用するモデルを `Extension` POJO の形式でセットアップします。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr "`src/main/java/org/acme/rest/client/Extension.java` ファイルを作成し、以下の内容を設定します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr "上記のモデルは、サービスによって提供されるフィールドのサブセットに過ぎませんが、このガイドの目的には十分です。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Create the interface"
msgstr "インターフェースの作成"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Using the RESTEasy REST Client is as simple as creating an interface using the proper Jakarta REST and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr "RESTEasy REST Client の使用方法は、適切な Jakarta REST と MicroProfile アノテーションを使用してインターフェースを作成するだけです。この場合、インターフェースは `src/main/java/org/acme/rest/client/ExtensionsService.java` で作成し、以下の内容を持つ必要があります:"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr "`getById` メソッドは、私たちのコードに、Code Quarkus API からidを指定してエクステンションを問い合わせる機能を与えます。クライアントがすべてのネットワーキングとマーシャリングを処理してくれるので、このような技術的な詳細は一切ありません。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The purpose of the annotations in the code above is the following:"
msgstr "上のコードのアノテーションの目的は以下の通りです。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for\n"
"CDI injection as a REST Client"
msgstr "`@RegisterRestClient` により、Quarkusは、このインターフェイスがRESTクライアントとしてCDIインジェクションに利用可能であることを知ることができます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "`@Path`, `@GET` and `@QueryParam` are the standard Jakarta REST annotations used to define how to access the service"
msgstr "`@Path` と `@GET` 、 `@QueryParam` は、サービスへのアクセス方法を定義するために使用される標準的な Jakarta REST アノテーションです。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"When a JSON extension is installed such as `quarkus-resteasy-client-jackson` or `quarkus-resteasy-client-jsonb`, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via\n"
"`@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream`\n"
"respectively)."
msgstr "`quarkus-resteasy-client-jackson` や `quarkus-resteasy-client-jsonb` などのJSONエクステンションがインストールされている場合、メディアタイプが `@Produces` や `@Consumes` アノテーションによって明示的に設定されていない限り、Quarkusはほとんどの返り値に対してデフォルトで `application/json` メディアタイプを使用します（よく知られているタイプについては、 `String` や `File` などの例外があり、デフォルトではそれぞれ `text/plain` や `application/octet-stream` になります）。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this\n"
"you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr "デフォルトでJSONを使用したくない場合は、 `quarkus.resteasy-json.default-json=false` を設定すると、デフォルトは自動ネゴシエーションに戻ります。これを設定した場合、JSON を使用するためには `@Produces(MediaType.APPLICATION_JSON)` と `@Consumes(MediaType.APPLICATION_JSON)` をエンドポイントに追加する必要があります。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of Jakarta REST providers (which can be seen as converters) included in the native executable."
msgstr "JSONのデフォルトに依存しない場合は、エンドポイントに `@Produces` と `@Consumes` のアノテーションを付けて、期待されるcontent-typesを正確に定義することが強く推奨されています。これにより、ネイティブ実行可能ファイルに含まれる Jakarta REST プロバイダー（コンバーターと見なすことができます）の数を減らすことができます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Path Parameters"
msgstr "パスパラメーター"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of (or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in a mock example below."
msgstr "GET リクエストにパスパラメーターが必要な場合は、 `@QueryParam` の代わりに、または追加で、 `@PathParam(\"parameter-name\")` を利用することができます。パスとクエリパラメーターは、必要に応じて組み合わせることができます。以下のモックの例を参照してください。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Create the configuration"
msgstr "コンフィグレーションの作成"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.\n"
"The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr "REST 呼び出しが行われるベース URL を決定するために、REST クライアントは `application.properties` からの設定を使用します。プロパティーの名前は、以下のコードで表示される特定の規則に従う必要があります。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"Having this configuration means that all requests performed using `ExtensionsService` will use `https://stage.code.quarkus.io` as the base URL.\n"
"Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-resteasy-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr ""
"この設定をすると、 `ExtensionsService` を使って実行されるすべてのリクエストは、ベースURLとして `https://stage.code.quarkus.io` をベース URL として使用することを意味します。\n"
"上記の設定を使うと、 `io.quarkus:quarkus-resteasy-client` の値で `ExtensionsService` の `getById` メソッドを呼び出すと、HTTP GET リクエストは次のようになります。 `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client` ."

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"Having this configuration means that the default scope of `ExtensionsService` will be `@Singleton`. Supported scope values are `@Singleton`, `@Dependent`, `@ApplicationScoped` and `@RequestScoped`. The default scope is `@Dependent`.\n"
"The default scope can also be defined on the interface."
msgstr "この設定をすると、 `ExtensionsService` のデフォルトのスコープは `@Singleton` になります。サポートされているスコープの値は `@Singleton` , `@Dependent` , `@ApplicationScoped` および `@RequestScoped` です。既定のスコープは `@Dependent` です。デフォルトのスコープはインターフェイス上で定義することもできます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr "`org.acme.rest.client.ExtensionsService` は、前のセクションで作成した`ExtensionsService` インターフェイスの完全修飾名と _一致しなければならない_ ことに注意してください。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The standard MicroProfile Rest Client properties notation can also be used to configure the client:"
msgstr "クライアントを設定の設定には、標準の MicroProfile Rest Client のプロパティー記法を使用することもできます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "If a property is specified via both the Quarkus notation and the MicroProfile notation, the Quarkus notation takes a precedence."
msgstr "プロパティーが Quarkus 記法と MicroProfile 記法の両方で指定されている場合、 Quarkus 記法が優先されます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use another configuration root than the fully qualified name of your interface."
msgstr "設定を容易にするために、 `@RegisterRestClient` `configKey` プロパティーを使用して、インターフェースの完全修飾名とは別の設定ルートを使用することができます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Disabling Hostname Verification"
msgstr "ホスト名の検証の無効化"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr "特定の REST クライアントの SSL ホスト名検証を無効にするには、以下の内容を設定に追加します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "This setting should not be used in production as it will disable the SSL hostname verification."
msgstr "この設定は、あらゆる種類の SSL ホスト名検証を無効にするため、実運用環境では使用しないでください。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Moreover, you can configure a REST client to use your custom hostname verify strategy. All you need to do is to provide a class that implements the interface `javax.net.ssl.HostnameVerifier` and add the following property to your configuration:"
msgstr "さらに、カスタムのホスト名検証ストラテジーを使用するようにRESTクライアントを設定することができます。必要なのは、インターフェース `javax.net.ssl.HostnameVerifier` を実装したクラスを用意し、以下のプロパティを設定に追加することだけです。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Quarkus REST client provides an embedded hostname verifier strategy to disable the hostname verification called `io.quarkus.restclient.NoopHostnameVerifier`."
msgstr "Quarkus REST クライアントは、 `io.quarkus.restclient.NoopHostnameVerifier` と呼ばれるホスト名検証を無効にするための組込ホスト名検証ストラテジーを提供しています。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Disabling SSL verifications"
msgstr "SSL の検証の無効化"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "To disable all SSL verifications, add the following property to your configuration:"
msgstr "全ての SSL の検証を無効にするには、以下の内容を設定に追加します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "This setting should not be used in production as it will disable any kind of SSL verification."
msgstr "この設定は、あらゆる種類の SSL 検証を無効にするため、実運用環境では使用しないでください。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Create the Jakarta REST resource"
msgstr "Jakarta RESTリソースの作成"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr "以下の内容の `src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを作成します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Note that in addition to the standard CDI `@Inject` annotation, we also need to use the MicroProfile `@RestClient` annotation to inject `ExtensionsService`."
msgstr "標準の CDI `@Inject` アノテーションに加えて、 `ExtensionsService` を注入するために MicroProfile `@RestClient` アノテーションを使用する必要があることに注意してください。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Update the test"
msgstr "テストの更新"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"We also need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the `testExtensionIdEndpoint` method to:"
msgstr "また、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。 `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` ファイルを編集し、 `testExtensionIdEndpoint` メソッドの内容を変更します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr "上記のコードでは、 link:http://rest-assured.io/[REST Assured] の link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] 機能を使用しています。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Redirection"
msgstr "リダイレクト"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "A HTTP server can redirect a response to another location by sending a response with a status code that starts with \"3\" and a HTTP header \"Location\" holding the URL to be redirected to. When the REST Client receives a redirection response from a HTTP server, it won't automatically perform another request to the new location. However, you can enable the automatic redirection by enabling the \"follow-redirects\" property:"
msgstr "HTTPサーバーは、ステータスコードが \"3 \"で始まるレスポンスと、リダイレクト先のURLを保持するHTTPヘッダー \"Location \"を送信することで、レスポンスを別の場所にリダイレクトできます。RESTクライアントがHTTPサーバーからリダイレクトレスポンスを受信しても、新しい場所への再リクエストは自動的に実行されません。ただし、\"follow-redirects \"プロパティを有効にすることで、自動リダイレクトを有効にすることができます:"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "`quarkus.rest-client.follow-redirects` to enable redirection for all REST clients."
msgstr "`quarkus.rest-client.follow-redirects` で、すべてのRESTクライアントに対してリダイレクトが有効になります。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "`quarkus.rest-client.<client-prefix>.follow-redirects` to enable redirection for a specific REST client."
msgstr "`quarkus.rest-client.<client-prefix>.follow-redirects` で、特定のRESTクライアントに対するリダイレクトを有効にすることができます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "If this property is true, then REST Client will perform a new request that it receives a redirection response from the HTTP server."
msgstr "このプロパティがtrueの場合、REST Clientは、HTTPサーバーからリダイレクトレスポンスを受信すると、新しいリクエストを実行します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Additionally, we can limit the number of redirections using the property \"max-redirects\"."
msgstr "さらに、プロパティ \"max-redirects\" を使って、リダイレクトの回数を制限することができます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "One important note is that according to the https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] specs, by default the redirection will only happen for GET or HEAD methods."
msgstr "link:https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] 仕様によると、デフォルトではGETまたはHEADメソッドに対してのみリダイレクトが行われるという重要な注意点があります。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Async Support"
msgstr "非同期サポート"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"The rest client supports asynchronous rest calls.\n"
"Async support comes in 2 flavors: you can return a `CompletionStage` or a `Uni` (requires the `quarkus-resteasy-client-mutiny` extension).\n"
"Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr "rest クライアントは非同期の rest 呼び出しをサポートしています。非同期のサポートには、 `CompletionStage` と `Uni` ( `quarkus-resteasy-client-mutiny` エクステンションモジュールが必要) の 2 種類があります。 `ExtensionsService` REST インターフェイスに `getByIdAsync` メソッドを追加してみましょう。コードは次のようになります："

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr "`src/main/java/org/acme/rest/client/ExtensionsResource.java` ファイルを開き、以下の内容で更新してください。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr "非同期メソッドをテストするには、 `ExtensionsResourceTest` に以下のテストメソッドを追加します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The `Uni` version is very similar:"
msgstr "`Uni` 版は非常に似ています。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The `ExtensionsResource` becomes:"
msgstr "`ExtensionsResource` は次のようになります。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Mutiny"
msgstr "Mutiny"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"The previous snippet uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "前のスニペットでは、Mutinyのリアクティブ型を使用していますが、もし慣れていない場合は、まず xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] を読んでください。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"When returning a `Uni`, every _subscription_ invokes the remote service.\n"
"It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr "`Uni` を返すとき、すべての _サブスクリプション_ は 、リモートサービスを呼び出します。つまり、 `Uni` で再購読してリクエストを再送信するか、以下のように `retry` を使用することができます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"If you use a `CompletionStage`, you would need to call the service's method to retry.\n"
"This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n"
"More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr "`CompletionStage` を使用する場合は、再試行のためにサービスのメソッドを呼び出す必要があります。この違いは、 Mutiny とそのサブスクリプションプロトコルの lazy (遅延) 性の側面から来ています。これについての詳細は link:https://smallrye.io/smallrye-mutiny/#_uni_and_multi[Mutiny の ドキュメント] を参照してください。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Custom headers support"
msgstr "カスタムヘッダーのサポート"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The MicroProfile REST client allows amending request headers by registering a `ClientHeadersFactory` with the `@RegisterClientHeaders` annotation."
msgstr "MicroProfile REST クライアントでは、 `ClientHeadersFactory` を `@RegisterClientHeaders` アノテーションで登録することで、リクエストヘッダーを修正することができます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Let's see it in action by adding a `@RegisterClientHeaders` annotation pointing to a `RequestUUIDHeaderFactory` class in our `ExtensionsService` REST interface:"
msgstr "`ExtensionsResource` REST インタフェースに `@RegisterClientHeaders` アノテーションを追加して、 `RequestUUIDHeaderFactory` クラスを指すようにします。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "And the `RequestUUIDHeaderFactory` would look like:"
msgstr "そして、 `RequestUUIDHeaderFactory` は次のようになります。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by\n"
"annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr "上の例のように、 `@Singleton`, `@ApplicationScoped` などのスコープを定義するアノテーションを付けることで、 `ClientHeadersFactory` の実装をCDI Beanにすることができます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Default header factory"
msgstr "デフォルトのヘッダーファクトリー"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "You can also use `@RegisterClientHeaders` annotation without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used and all headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property will be amended. Individual header names are comma-separated."
msgstr "また、カスタムファクトリーを指定せずに `@RegisterClientHeaders` アノテーションを使用することもできます。その場合は、 `DefaultClientHeadersFactoryImpl` ファクトリーが使用され、 `org.eclipse.microprofile.rest.client.propagateHeaders` プロパティーに記載されているすべてのヘッダーが修正されます。個々のヘッダー名はコンマで区切られています。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Run the application with:"
msgstr "次のコマンドでアプリケーションを実行します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr "ブラウザで http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client を開きます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "You should see a JSON object containing some basic information about the REST Client extension."
msgstr "REST Client extension に関する基本情報を含む JSON オブジェクトが表示されます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "As usual, the application can be packaged using:"
msgstr "いつものように、アプリケーションは以下の方法でパッケージ化されます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr "そして、 `java -jar target/quarkus-app/quarkus-run.jar` で実行されます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "You can also generate the native executable with:"
msgstr "次のようにネイティブ実行可能ファイルを生成することもできます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "REST Client and RESTEasy interactions"
msgstr "REST クライアントと RESTEasy のやりとり"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"In Quarkus, the REST Client extension and xref:rest-json.adoc[the RESTEasy extension] share the same infrastructure.\n"
"One important consequence of this consideration is that they share the same list of providers (in the Jakarta REST meaning of the word)."
msgstr "Quarkusでは、REST Clientエクステンションと xref:rest-json.adoc[RESTEasyエクステンション] は、同じインフラストラクチャを共有しています。この考慮の重要な結果の1つは、（Jakarta RESTの意味での）プロバイダのリストを共有することです。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls,\n"
"which might not be the desired behavior."
msgstr "例えば、 `WriterInterceptor` を宣言した場合、デフォルトではサーバーの呼び出しとクライアントの呼び出しの両方をインターセプトしますが、これは望ましい動作ではないかもしれません。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr "しかし、このデフォルトの動作を変更してプロバイダを制約することができます。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider;"
msgstr "プロバイダーに `@ConstrainedTo(RuntimeType.CLIENT)` アノテーションを追加することで、 *クライアント* の呼び出しのみを考慮します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider."
msgstr "プロバイダーに `@ConstrainedTo(RuntimeType.SERVER)` アノテーションを追加することで、 *サーバー* の呼び出しのみを考慮します。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Using a Mock HTTP Server for tests"
msgstr "テストにモックHTTPサーバーを使用する"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"In some cases you may want to mock the remote endpoint - the HTTP server - instead of mocking the client itself.\n"
"This may be especially useful for native tests, or for programmatically created clients."
msgstr "場合によっては、クライアント自体をモックするのではなく、リモートエンドポイント (HTTP サーバー) をモックしたい場合があります。これは、ネイティブテスト、またはプログラムで作成されたクライアントに特に役立つ場合があります。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"You can easily mock an HTTP Server with Wiremock.\n"
"The xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client]\n"
"describes how to set it up in detail."
msgstr "Wiremock を使用して HTTP サーバーを簡単にモックできます。xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client] では、セットアップ方法について詳しく説明しています。"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Further reading"
msgstr "さらに詳しく"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client 仕様]"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Configuration Reference"
msgstr "設定リファレンス"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
