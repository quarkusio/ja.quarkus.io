msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Using the legacy REST Client"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "This guide is about the REST Client compatible with https://resteasy.dev[RESTEasy Classic] which used to be the default Jakarta REST (formerly known as JAX-RS) implementation until Quarkus 2.8."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"It is now recommended to use Quarkus REST (formerly RESTEasy Reactive), which supports equally well traditional blocking workloads and reactive workloads.\n"
"For more information about Quarkus REST,\n"
"please see the xref:rest-client.adoc[REST Client guide] and, for the server side, the xref:rest-json.adoc[introductory REST JSON guide] or the more detailed xref:rest.adoc[Quarkus REST guide]."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"This guide explains how to use the RESTEasy REST Client in order to interact with REST APIs\n"
"with very little effort."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "there is another guide if you need to write server xref:rest-json.adoc[JSON REST APIs]."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The solution is located in the `resteasy-client-quickstart` link:{quickstarts-tree-url}/resteasy-client-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Creating the Maven project"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "First, we need a new project. Create a new project with the following command:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "This command generates the Maven project with a REST endpoint and imports:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "the `resteasy` and `resteasy-jackson` extensions for the REST server support;"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "the `resteasy-client` and `resteasy-client-jackson` extensions for the REST client support."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"If you already have your Quarkus project configured, you can add the `resteasy-client` and the `resteasy-client-jackson` extensions\n"
"to your project by running the following command in your project base directory:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Setting up the model"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"In this guide we will be demonstrating how to consume part of the REST API supplied by the link:https://stage.code.quarkus.io[stage.code.quarkus.io] service.\n"
"Our first order of business is to set up the model we will be using, in the form of an `Extension` POJO."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Create a `src/main/java/org/acme/rest/client/Extension.java` file and set the following content:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The model above is only a subset of the fields provided by the service, but it suffices for the purposes of this guide."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Create the interface"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Using the RESTEasy REST Client is as simple as creating an interface using the proper Jakarta REST and MicroProfile annotations. In our case the interface should be created at `src/main/java/org/acme/rest/client/ExtensionsService.java` and have the following content:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The `getById` method gives our code the ability to get an extension by id from the Code Quarkus API. The client will handle all the networking and marshalling leaving our code clean of such technical details."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The purpose of the annotations in the code above is the following:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"`@RegisterRestClient` allows Quarkus to know that this interface is meant to be available for\n"
"CDI injection as a REST Client"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "`@Path`, `@GET` and `@QueryParam` are the standard Jakarta REST annotations used to define how to access the service"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"When a JSON extension is installed such as `quarkus-resteasy-client-jackson` or `quarkus-resteasy-client-jsonb`, Quarkus will use the `application/json` media type\n"
"by default for most return values, unless the media type is explicitly set via\n"
"`@Produces` or `@Consumes` annotations (there are some exceptions for well known types, such as `String` and `File`, which default to `text/plain` and `application/octet-stream`\n"
"respectively)."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"If you don't want JSON by default you can set `quarkus.resteasy-json.default-json=false` and the default will change back to being auto-negotiated. If you set this\n"
"you will need to add `@Produces(MediaType.APPLICATION_JSON)` and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use JSON."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate your endpoints with the `@Produces` and `@Consumes` annotations to define precisely the expected content-types.\n"
"It will allow to narrow down the number of Jakarta REST providers (which can be seen as converters) included in the native executable."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Path Parameters"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "If the GET request requires path parameters you can leverage the `@PathParam(\"parameter-name\")` annotation instead of (or in addition to) the `@QueryParam`. Path and query parameters can be combined, as required, as illustrated in a mock example below."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Create the configuration"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"In order to determine the base URL to which REST calls will be made, the REST Client uses configuration from `application.properties`.\n"
"The name of the property needs to follow a certain convention which is best displayed in the following code:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"Having this configuration means that all requests performed using `ExtensionsService` will use `https://stage.code.quarkus.io` as the base URL.\n"
"Using the configuration above, calling the `getById` method of `ExtensionsService` with a value of `io.quarkus:quarkus-resteasy-client` would result in an HTTP GET request being made to `https://stage.code.quarkus.io/api/extensions?id=io.quarkus:quarkus-rest-client`."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"Having this configuration means that the default scope of `ExtensionsService` will be `@Singleton`. Supported scope values are `@Singleton`, `@Dependent`, `@ApplicationScoped` and `@RequestScoped`. The default scope is `@Dependent`.\n"
"The default scope can also be defined on the interface."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Note that `org.acme.rest.client.ExtensionsService` _must_ match the fully qualified name of the `ExtensionsService` interface we created in the previous section."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The standard MicroProfile Rest Client properties notation can also be used to configure the client:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "If a property is specified via both the Quarkus notation and the MicroProfile notation, the Quarkus notation takes a precedence."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "To facilitate the configuration, you can use the `@RegisterRestClient` `configKey` property that allows to use another configuration root than the fully qualified name of your interface."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Disabling Hostname Verification"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "To disable the SSL hostname verification for a specific REST client, add the following property to your configuration:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "This setting should not be used in production as it will disable the SSL hostname verification."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Moreover, you can configure a REST client to use your custom hostname verify strategy. All you need to do is to provide a class that implements the interface `javax.net.ssl.HostnameVerifier` and add the following property to your configuration:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Quarkus REST client provides an embedded hostname verifier strategy to disable the hostname verification called `io.quarkus.restclient.NoopHostnameVerifier`."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Disabling SSL verifications"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "To disable all SSL verifications, add the following property to your configuration:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "This setting should not be used in production as it will disable any kind of SSL verification."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Create the Jakarta REST resource"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Create the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file with the following content:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Note that in addition to the standard CDI `@Inject` annotation, we also need to use the MicroProfile `@RestClient` annotation to inject `ExtensionsService`."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Update the test"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"We also need to update the functional test to reflect the changes made to the endpoint.\n"
"Edit the `src/test/java/org/acme/rest/client/ExtensionsResourceTest.java` file and change the content of the `testExtensionIdEndpoint` method to:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The code above uses link:https://rest-assured.io/[REST Assured]'s link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] capabilities."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Redirection"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "A HTTP server can redirect a response to another location by sending a response with a status code that starts with \"3\" and a HTTP header \"Location\" holding the URL to be redirected to. When the REST Client receives a redirection response from a HTTP server, it won't automatically perform another request to the new location. However, you can enable the automatic redirection by enabling the \"follow-redirects\" property:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "`quarkus.rest-client.follow-redirects` to enable redirection for all REST clients."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "`quarkus.rest-client.<client-prefix>.follow-redirects` to enable redirection for a specific REST client."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "If this property is true, then REST Client will perform a new request that it receives a redirection response from the HTTP server."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Additionally, we can limit the number of redirections using the property \"max-redirects\"."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "One important note is that according to the https://www.rfc-editor.org/rfc/rfc2616#section-10.3.8[RFC2616] specs, by default the redirection will only happen for GET or HEAD methods."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Async Support"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"The rest client supports asynchronous rest calls.\n"
"Async support comes in 2 flavors: you can return a `CompletionStage` or a `Uni` (requires the `quarkus-resteasy-client-mutiny` extension).\n"
"Let's see it in action by adding a `getByIdAsync` method in our `ExtensionsService` REST interface. The code should look like:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Open the `src/main/java/org/acme/rest/client/ExtensionsResource.java` file and update it with the following content:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "To test asynchronous methods, add the test method below in `ExtensionsResourceTest`:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The `Uni` version is very similar:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The `ExtensionsResource` becomes:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Mutiny"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"The previous snippet uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"When returning a `Uni`, every _subscription_ invokes the remote service.\n"
"It means you can re-send the request by re-subscribing on the `Uni`, or use a `retry` as follows:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"If you use a `CompletionStage`, you would need to call the service's method to retry.\n"
"This difference comes from the laziness aspect of Mutiny and its subscription protocol.\n"
"More details about this can be found in https://smallrye.io/smallrye-mutiny/latest/reference/uni-and-multi/[the Mutiny documentation]."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Custom headers support"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "The MicroProfile REST client allows amending request headers by registering a `ClientHeadersFactory` with the `@RegisterClientHeaders` annotation."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Let's see it in action by adding a `@RegisterClientHeaders` annotation pointing to a `RequestUUIDHeaderFactory` class in our `ExtensionsService` REST interface:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "And the `RequestUUIDHeaderFactory` would look like:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"As you see in the example above, you can make your `ClientHeadersFactory` implementation a CDI bean by\n"
"annotating it with a scope-defining annotation, such as `@Singleton`, `@ApplicationScoped`, etc."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Default header factory"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "You can also use `@RegisterClientHeaders` annotation without any custom factory specified. In that case the `DefaultClientHeadersFactoryImpl` factory will be used and all headers listed in `org.eclipse.microprofile.rest.client.propagateHeaders` configuration property will be amended. Individual header names are comma-separated."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Package and run the application"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Run the application with:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Open your browser to http://localhost:8080/extension/id/io.quarkus:quarkus-rest-client."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "You should see a JSON object containing some basic information about the REST Client extension."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "As usual, the application can be packaged using:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "And executed with `java -jar target/quarkus-app/quarkus-run.jar`."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "You can also generate the native executable with:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "REST Client and RESTEasy interactions"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"In Quarkus, the REST Client extension and xref:rest-json.adoc[the RESTEasy extension] share the same infrastructure.\n"
"One important consequence of this consideration is that they share the same list of providers (in the Jakarta REST meaning of the word)."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will by default intercept both the servers calls and the client calls,\n"
"which might not be the desired behavior."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "only consider *client* calls by adding the `@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider;"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "only consider *server* calls by adding the `@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Using a Mock HTTP Server for tests"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"In some cases you may want to mock the remote endpoint - the HTTP server - instead of mocking the client itself.\n"
"This may be especially useful for native tests, or for programmatically created clients."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid ""
"You can easily mock an HTTP Server with Wiremock.\n"
"The xref:rest-client.adoc#using-a-mock-http-server-for-tests[Wiremock section of the Quarkus - Using the REST Client]\n"
"describes how to set it up in detail."
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Further reading"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "link:https://download.eclipse.org/microprofile/microprofile-rest-client-2.0/microprofile-rest-client-spec-2.0.html[MicroProfile Rest Client specification]"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "Configuration Reference"
msgstr ""

#: _versions/3.27/guides/resteasy-client.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
