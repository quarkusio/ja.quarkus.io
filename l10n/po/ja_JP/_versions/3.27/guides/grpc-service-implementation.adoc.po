msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Implementing a gRPC Service"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "gRPC service implementations exposed as CDI beans are automatically registered and served by quarkus-grpc."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Implementing a gRPC service requires the gRPC classes to be generated.\n"
"Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Generated Code"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Quarkus generates a few implementation classes for services declared in the `proto` file:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "A _service interface_ using the Mutiny API"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "the class name is `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}`"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "An _implementation base_ class using the gRPC API"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "the class name is structured as follows: `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "For example, if you use the following `proto` file snippet:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "`hello` is the java package for the generated classes."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "`Greeter` is the service name."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Then the service interface is `hello.Greeter` and the implementation base is the abstract static nested class: `hello.GreeterGrpc.GreeterImplBase`."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "You'll need to implement the _service interface_ or extend the _base class_ with your service implementation bean as described in the following sections."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Implementing a Service with the Mutiny API"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"To implement a gRPC service using the Mutiny API, create a class that implements the service interface.\n"
"Then, implement the methods defined in the service interface.\n"
"If you don't want to implement a service method just throw an `java.lang.UnsupportedOperationException` from the method body (the exception will be automatically converted to the appropriate gRPC exception).\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "A gRPC service implementation bean must be annotated with the `@GrpcService` annotation and should not declare any other CDI qualifier. All gRPC services have the `jakarta.inject.Singleton` scope. Additionally, the request context is always active during a service call."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "`hello.Greeter` is the generated service interface."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "The service implementation bean can also extend the Mutiny implementation base, where the class name is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Implementing a Service with the default gRPC API"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"To implement a gRPC service using the default gRPC API, create a class that extends the default implementation base.\n"
"Then, override the methods defined in the service interface.\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Blocking Service Implementation"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"By default, all the methods from a gRPC service run on the event loop.\n"
"As a consequence, you must **not** block.\n"
"If your service logic must block, annotate the method with `io.smallrye.common.annotation.Blocking`:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Handling Streams"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "gRPC allows receiving and returning streams:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Using Mutiny, you can implement these as follows:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Health Check"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "For the implemented services, Quarkus gRPC exposes health information in the following format:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Clients can specify the fully qualified service name to get the health status of a specific service\n"
"or skip specifying the service name to get the general status of the gRPC server."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"For more details, check out the\n"
"https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC documentation]"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Additionally, if Quarkus SmallRye Health is added to the application, a readiness check for\n"
"the state of the gRPC services will be added to the MicroProfile Health endpoint response, that is `/q/health`."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Reflection Service"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Quarkus gRPC Server implements the https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflection service].\n"
"This service allows tools like https://github.com/fullstorydev/grpcurl[grpcurl] or https://github.com/gusaul/grpcox[grpcox] to interact with your services."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"The reflection service is enabled by default in _dev_ mode.\n"
"In test or production mode, you need to enable it explicitly by setting `quarkus.grpc.server.enable-reflection-service` to `true`."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Quarkus exposes both the reflection service `v1` and `v1alpha`."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Scaling"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "By default, quarkus-grpc starts a single gRPC server running on a single event loop."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "If you wish to scale your server, you can set the number of server instances by setting `quarkus.grpc.server.instances`."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Server Configuration"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"When you disable `quarkus.grpc.server.use-separate-server`, you are then using the new Vert.x gRPC server implementation\n"
"which uses the existing HTTP server. Which means that the server port is now `8080` (or the port configured with `quarkus.http.port`).\n"
"Also, most of the other configuration properties are no longer applied, since it's the HTTP server that should already be properly configured."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "When you enable `quarkus.grpc.server.xds.enabled`, it's the xDS that should handle most of the configuration above."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Example of Configuration"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Enabling TLS"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "To enable TLS, use the following configuration."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Note that all paths in the configuration may either specify a resource on the classpath\n"
"(typically from `src/main/resources` or its subfolder) or an external file."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "TLS with Mutual Auth"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Custom server building"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "When Quarkus builds a gRPC server instance, users can apply their own Server(Builder) customizers. The customizers are applied by `priority`, the higher the number the later customizer is applied. The customizers are applied before Quarkus applies user's server configuration; e.g. ideal for some initial defaults."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "There are two `customize` methods, the first one uses gRPC's `ServerBuilder` as a parameter - to be used with Quarkus' legacy gRPC support, where the other uses `GrpcServerOptions` - to be used with the new Vert.x gRPC support. User should implement the right `customize` method per gRPC support type usage, or both if the customizer is gRPC type neutral."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Server Interceptors"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "gRPC server interceptors let you perform logic, such as authentication, before your service is invoked."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "You can implement a gRPC server interceptor by creating an `@ApplicationScoped` bean implementing `io.grpc.ServerInterceptor`:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "It's also possible to annotate a producer method as a global interceptor:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] to properly implement your interceptor."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"To apply an interceptor to all exposed services, annotate it with `@io.quarkus.grpc.GlobalInterceptor`.\n"
"To apply an interceptor to a single service, register it on the service with `@io.quarkus.grpc.RegisterInterceptor`:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"When you have multiple server interceptors, you can order them by implementing the `jakarta.enterprise.inject.spi.Prioritized` interface. Please note that all the global interceptors are invoked before the service-specific\n"
"interceptors."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Interceptors with the highest priority are called first.\n"
"The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"There is also a support to inject Vert.x `RoutingContext` instance into your gRPC service, if / when needed.\n"
"Quarkus doesn't do that by default, you will need to add `RoutingContextGrpcInterceptor` to your gRPC service."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Testing your services"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"The easiest way to test a gRPC service is to use a gRPC client as described\n"
"in xref:grpc-service-consumption.adoc[Consuming a gRPC Service]."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Please note that in the case of using a client to test an exposed service that does not use TLS,\n"
"there is no need to provide any configuration. E.g. to test the `HelloService`\n"
"defined above, one could create the following test:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Trying out your services manually"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"In the dev mode, you can try out your gRPC services in the Quarkus Dev UI.\n"
"Just go to http://localhost:8080/q/dev-ui and click on _Services_ under the gRPC tile."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Please note that your application needs to expose the \"normal\" HTTP port for the Dev UI to be accessible. If your application does not expose any HTTP endpoints, you can create a dedicated profile with a dependency on `quarkus-vertx-http`:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Having it, you can run the dev mode with: `mvn quarkus:dev -Pdevelopment`."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "If you use Gradle, you can simply add a dependency for the `quarkusDev` task:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "gRPC Server metrics"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Enabling metrics collection"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"gRPC server metrics are automatically enabled when the application also uses the xref:telemetry-micrometer.adoc[`quarkus-micrometer`] extension.\n"
"Micrometer collects the metrics of all the gRPC services implemented by the application."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "The service name, method and type can be found in the _tags_."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Disabling metrics collection"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "To disable the gRPC server metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Use virtual threads"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "To use virtual threads in your gRPC service implementation, check the dedicated xref:./grpc-virtual-threads.adoc[guide]."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "gRPC Server authorization"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Quarkus includes built-in security to allow xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[authorization using annotations] when the Vert.x gRPC support, which uses existing Vert.x HTTP server, is enabled."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Add the Quarkus Security extension"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Security capabilities are provided by the Quarkus Security extension, therefore make sure your `pom.xml` file contains following dependency:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "To add the Quarkus Security extension to an existing Maven project, run the following command from your project base directory:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Overview of supported authentication mechanisms"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Some supported authentication mechanisms are built into Quarkus, while others require you to add an extension.\n"
"The following table maps specific authentication requirements to a supported mechanism that you can use in Quarkus:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Authentication requirements and mechanisms"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Authentication requirement"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Authentication mechanism"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Username and password"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "<<basic-auth-mechanism>>"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Client certificate"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "<<mutual-tls-auth-mechanism>>"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Custom requirements"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "<<custom-auth-mechanism>>"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Bearer access token"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication], xref:security-jwt.adoc[JWT], xref:security-oauth2.adoc[OAuth2]"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Do not forget to install at least one extension that provides an `IdentityProvider` based on selected authentication requirements.\n"
"Please refer to the xref:security-basic-authentication-howto.adoc[Basic authentication guide] for example how to provide the `IdentityProvider` based on username and password."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"If you use separate HTTP server to serve gRPC requests, <<custom-auth-mechanism>> is your only option.\n"
"Set the `quarkus.grpc.server.use-separate-server` configuration property to `false` so that you can use other mechanisms."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Secure gRPC service"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "The gRPC services can be secured with the xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[standard security annotations] like in the example below:"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Most of the examples of the supported mechanisms sends authentication headers, please refer to the xref:grpc-service-consumption.adoc[gRPC Headers]\n"
"section of the Consuming a gRPC Service guide for more information about the gRPC headers."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Basic authentication"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Quarkus Security provides built-in authentication support for the xref:security-basic-authentication.adoc[Basic authentication]."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Enable the Basic authentication."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Mutual TLS authentication"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates.\n"
"The simplest way to enforce authentication for all your gRPC services is described in the <<tls-with-mutual-auth>> section of this guide.\n"
"However, the Quarkus Security supports role mapping that you can use to perform even more fine-grained access control."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Adds certificate role mapping."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Example of the role mapping file"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Map the `testclient` certificate CN (Common Name) to the `SecurityIdentity` role `admin`."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Custom authentication"
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "You can always implement one or more `GrpcSecurityMechanism` bean if above-mentioned mechanisms provided by Quarkus do no meet your needs."
msgstr ""

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Example of custom `GrpcSecurityMechanism`"
msgstr ""
