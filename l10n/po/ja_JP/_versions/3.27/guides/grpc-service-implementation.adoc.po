msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Implementing a gRPC Service"
msgstr "gRPCサービスの実装"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "gRPC service implementations exposed as CDI beans are automatically registered and served by quarkus-grpc."
msgstr "CDI Beanとして公開されたgRPCサービスの実装は、quarkus-grpcによって自動的に登録、提供されます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Implementing a gRPC service requires the gRPC classes to be generated.\n"
"Place your `proto` files in `src/main/proto` and run `mvn compile`."
msgstr "gRPC サービスを実装するには、gRPC クラスを生成する必要があります。 `proto` ファイルを `src/main/proto` に置き、 `mvn compile` を実行します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Generated Code"
msgstr "生成されたコード"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Quarkus generates a few implementation classes for services declared in the `proto` file:"
msgstr "Quarkusは、 `proto` ファイルで宣言されたサービスに対して、いくつかの実装クラスを生成します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "A _service interface_ using the Mutiny API"
msgstr "Mutiny APIを使用した _サービスインターフェース_"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "the class name is `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}`"
msgstr "クラス名は `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}` "

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "An _implementation base_ class using the gRPC API"
msgstr "gRPC APIを利用した _実装のベース_ のクラス"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "the class name is structured as follows: `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`"
msgstr "クラス名は以下のように構成されています。 `${JAVA_PACKAGE}.${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` "

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "For example, if you use the following `proto` file snippet:"
msgstr "例えば、以下の `proto` ファイルスニペットを使用した場合は、"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "`hello` is the java package for the generated classes."
msgstr "`hello` は、生成されたクラスのjavaパッケージです。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "`Greeter` is the service name."
msgstr "`Greeter` はサービス名です。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Then the service interface is `hello.Greeter` and the implementation base is the abstract static nested class: `hello.GreeterGrpc.GreeterImplBase`."
msgstr "サービス・インターフェースは `hello.Greeter` であり、実装ベースは `hello.GreeterGrpc.GreeterImplBase` という抽象的な静的ネストクラスです。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "You'll need to implement the _service interface_ or extend the _base class_ with your service implementation bean as described in the following sections."
msgstr "以下のセクションで説明するように、 _サービスインターフェース_ を実装するか、 _ベースクラス_ をサービス実装Beanで拡張する必要があります。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Implementing a Service with the Mutiny API"
msgstr "Mutiny APIによるサービスの実装"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"To implement a gRPC service using the Mutiny API, create a class that implements the service interface.\n"
"Then, implement the methods defined in the service interface.\n"
"If you don't want to implement a service method just throw an `java.lang.UnsupportedOperationException` from the method body (the exception will be automatically converted to the appropriate gRPC exception).\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr "Mutiny APIを使ってgRPCサービスを実装するには、サービスインターフェースを実装したクラスを作成します。そして、サービスインターフェースで定義されているメソッドを実装します。サービスメソッドを実装したくない場合は、メソッドボディから `java.lang.UnsupportedOperationException` を投げてください（例外は適切な gRPCの例外に自動的に変換されます）。最後に、サービスを実装し、 `@GrpcService` アノテーションを追加します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "A gRPC service implementation bean must be annotated with the `@GrpcService` annotation and should not declare any other CDI qualifier. All gRPC services have the `jakarta.inject.Singleton` scope. Additionally, the request context is always active during a service call."
msgstr "gRPCサービス実装Beanは、 `@GrpcService` アノテーションを付けなければならず、他のCDI修飾子を宣言してはいけません。すべてのgRPCサービスは、 `jakarta.inject.Singleton` のスコープを持ちます。さらに、サービス呼び出しの間、リクエストコンテキストが有効になります。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "`hello.Greeter` is the generated service interface."
msgstr "`hello.Greeter` は、生成されたサービスインターフェースです。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "The service implementation bean can also extend the Mutiny implementation base, where the class name is structured as follows: `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase`."
msgstr "サービス実装Beanは、Mutinyの実装ベースを拡張することもでき、その場合、クラス名は以下のように構成されます。 `Mutiny${NAME_OF_THE_SERVICE}Grpc.${NAME_OF_THE_SERVICE}ImplBase` "

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Implementing a Service with the default gRPC API"
msgstr "デフォルトのgRPC APIでのサービス実装"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"To implement a gRPC service using the default gRPC API, create a class that extends the default implementation base.\n"
"Then, override the methods defined in the service interface.\n"
"Finally, implement the service and add the `@GrpcService` annotation:"
msgstr "デフォルトのgRPC APIを使ってgRPCサービスを実装するには、デフォルトの実装ベースを拡張したクラスを作成します。次に、サービス・インターフェースで定義されているメソッドを上書きします。最後に、サービスを実装し、 `@GrpcService` アノテーションを追加します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Blocking Service Implementation"
msgstr "ブロッキングサービスの実装"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"By default, all the methods from a gRPC service run on the event loop.\n"
"As a consequence, you must **not** block.\n"
"If your service logic must block, annotate the method with `io.smallrye.common.annotation.Blocking`:"
msgstr "デフォルトでは、gRPCサービスからのすべてのメソッドはイベントループ上で実行されます。そのため、ブロックしては *いけません* 。サービスロジックをブロックする必要がある場合は、メソッドに `io.smallrye.common.annotation.Blocking` アノテーションを追加します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Handling Streams"
msgstr "ストリームの処理"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "gRPC allows receiving and returning streams:"
msgstr "gRPCでは、ストリームを受信して返すことができます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Using Mutiny, you can implement these as follows:"
msgstr "Mutinyを使うと、以下のように実装できます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Health Check"
msgstr "ヘルスチェック"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "For the implemented services, Quarkus gRPC exposes health information in the following format:"
msgstr "実装されたサービスでは、Quarkus gRPCは以下の形式でヘルスチェックを公開しています。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Clients can specify the fully qualified service name to get the health status of a specific service\n"
"or skip specifying the service name to get the general status of the gRPC server."
msgstr "クライアントは、特定のサービスのヘルス状態を取得するために完全修飾されたサービス名を指定したり、gRPCサーバーの一般的な状態を取得するためにサービス名の指定を省略することができます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"For more details, check out the\n"
"https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPC documentation]"
msgstr "詳細については、 link:https://github.com/grpc/grpc/blob/v1.28.1/doc/health-checking.md[gRPCのドキュメント] を確認してください。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Additionally, if Quarkus SmallRye Health is added to the application, a readiness check for\n"
"the state of the gRPC services will be added to the MicroProfile Health endpoint response, that is `/q/health`."
msgstr "さらに、Quarkus SmallRye Healthがアプリケーションに追加された場合、gRPCサービスの状態に関するレディネスチェックがMicroProfile Healthエンドポイントレスポンスに追加されます( `/q/health` )。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Reflection Service"
msgstr "リフレクションサービス"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Quarkus gRPC Server implements the https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[reflection service].\n"
"This service allows tools like https://github.com/fullstorydev/grpcurl[grpcurl] or https://github.com/gusaul/grpcox[grpcox] to interact with your services."
msgstr "Quarkus gRPC Serverは、 link:https://github.com/grpc/grpc/blob/master/doc/server-reflection.md[リフレクションサービス] を実装しています。このサービスを使用すると、 link:https://github.com/fullstorydev/grpcurl[grpcurl] や link:https://github.com/gusaul/grpcox[grpcox] などのツールがサービスと対話できるようになります。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"The reflection service is enabled by default in _dev_ mode.\n"
"In test or production mode, you need to enable it explicitly by setting `quarkus.grpc.server.enable-reflection-service` to `true`."
msgstr "リフレクションサービスは、 _開発_ モードではデフォルトで有効になっています。テストモードやプロダクションモードでは、 `quarkus.grpc.server.enable-reflection-service` を `true` に設定して明示的に有効にする必要があります。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Quarkus exposes both the reflection service `v1` and `v1alpha`."
msgstr "Quarkusは、リフレクションサービス `v1` と `v1alpha` の両方を公開しています。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Scaling"
msgstr "スケーリング"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "By default, quarkus-grpc starts a single gRPC server running on a single event loop."
msgstr "デフォルトでは、quarkus-grpcは単一のイベントループ上で動作する単一のgRPCサーバーを起動します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "If you wish to scale your server, you can set the number of server instances by setting `quarkus.grpc.server.instances`."
msgstr "サーバーをスケールさせたい場合は、 `quarkus.grpc.server.instances` を設定することで、サーバーのインスタンス数をセットできます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Server Configuration"
msgstr "サーバー構成"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"When you disable `quarkus.grpc.server.use-separate-server`, you are then using the new Vert.x gRPC server implementation\n"
"which uses the existing HTTP server. Which means that the server port is now `8080` (or the port configured with `quarkus.http.port`).\n"
"Also, most of the other configuration properties are no longer applied, since it's the HTTP server that should already be properly configured."
msgstr "`quarkus.grpc.server.use-separate-server` を無効にすると、既存の HTTP サーバーを使用する新しい Vert.x gRPC サーバー実装が使用されます。つまり、サーバーのポートが `8080` (または `quarkus.http.port` で設定されたポート) になることを意味します。また、すでに適切に設定されているはずの HTTP サーバーであるため、他のほとんどの設定プロパティは適用されなくなります。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "When you enable `quarkus.grpc.server.xds.enabled`, it's the xDS that should handle most of the configuration above."
msgstr "`quarkus.grpc.server.xds.enabled` を有効にすると、上記の設定のほとんどを処理するのはxDSになります。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Example of Configuration"
msgstr "構成の例"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Enabling TLS"
msgstr "TLSを有効にする"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "To enable TLS, use the following configuration."
msgstr "TLSを有効にするには、以下の設定を使用します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Note that all paths in the configuration may either specify a resource on the classpath\n"
"(typically from `src/main/resources` or its subfolder) or an external file."
msgstr "設定のすべてのパスは、クラスパス上のリソース (通常は `src/main/resources` やそのサブフォルダーから) か外部ファイルを指定することに注意してください。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "When SSL/TLS is configured, `plain-text` is automatically disabled."
msgstr "SSL/TLSを設定すると、 `plain-text` は自動的に無効になります。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "TLS with Mutual Auth"
msgstr "相互認証付きTLS"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "To use TLS with mutual authentication, use the following configuration:"
msgstr "相互認証付きのTLSを使用するには、以下の設定を使用します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "Custom server building"
msgstr "カスタムサーバー構築"

#: _versions/3.27/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "When Quarkus builds a gRPC server instance, users can apply their own Server(Builder) customizers. The customizers are applied by `priority`, the higher the number the later customizer is applied. The customizers are applied before Quarkus applies user's server configuration; e.g. ideal for some initial defaults."
msgstr "QuarkusでgRPCサーバーインスタンスを構築する際、ユーザーは独自のServer(Builder)カスタマイザを適用できます。カスタマイザは、 `priority` 、数字が大きいほど後から適用されます。カスタマイザは、Quarkusがユーザーのサーバー構成を適用する前に適用されます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
#, fuzzy
msgid "There are two `customize` methods, the first one uses gRPC's `ServerBuilder` as a parameter - to be used with Quarkus' legacy gRPC support, where the other uses `GrpcServerOptions` - to be used with the new Vert.x gRPC support. User should implement the right `customize` method per gRPC support type usage, or both if the customizer is gRPC type neutral."
msgstr "2つの `customize` メソッドがあります。最初のメソッドは gRPC の `ServerBuilder` をパラメータとして使用し、Quarkus のレガシー gRPC サポートで使用します。もう一方は `GrpcServerOptions` を使用し、新しい Vert.x gRPC サポートで使用します。ユーザーは、gRPCサポートタイプの使用法ごとに適切な `customize` メソッドを実装する必要があります。カスタマイザーがgRPCタイプに依存しない場合は、その両方を実装する必要があります。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Server Interceptors"
msgstr "サーバーインターセプター"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "gRPC server interceptors let you perform logic, such as authentication, before your service is invoked."
msgstr "gRPCサーバーのインターセプターでは、サービスが呼び出される前に、認証などのロジックを実行することができるようになります。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "You can implement a gRPC server interceptor by creating an `@ApplicationScoped` bean implementing `io.grpc.ServerInterceptor`:"
msgstr "`io.grpc.ServerInterceptor` を実装した `@ApplicationScoped` Beanを作成することで、gRPC サーバーのインターセプターを実装できます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "It's also possible to annotate a producer method as a global interceptor:"
msgstr "プロデューサー・メソッドをグローバル・インターセプターとしてアノテーションすることも可能です："

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Check the https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] to properly implement your interceptor."
msgstr "link:https://grpc.github.io/grpc-java/javadoc/io/grpc/ServerInterceptor.html[ServerInterceptor JavaDoc] をチェックして、インターセプターを適切に実装してください。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"To apply an interceptor to all exposed services, annotate it with `@io.quarkus.grpc.GlobalInterceptor`.\n"
"To apply an interceptor to a single service, register it on the service with `@io.quarkus.grpc.RegisterInterceptor`:"
msgstr "公開されているすべてのサービスにインターセプターを適用するには、 `@io.quarkus.grpc.GlobalInterceptor` でアノテーションを付けます。インターセプターを単一のサービスに適用するには、 `@io.quarkus.grpc.RegisterInterceptor` でそのサービスに登録します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"When you have multiple server interceptors, you can order them by implementing the `jakarta.enterprise.inject.spi.Prioritized` interface. Please note that all the global interceptors are invoked before the service-specific\n"
"interceptors."
msgstr "複数のサーバーインターセプターがある場合、 `jakarta.enterprise.inject.spi.Prioritized` インターフェースを実装することで、それらを順番に並べることができます。すべてのグローバルインターセプターは、サービス固有のインターセプターの前に起動されることに注意してください。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Interceptors with the highest priority are called first.\n"
"The default priority, used if the interceptor does not implement the `Prioritized` interface, is `0`."
msgstr "最高の優先度を持つインターセプターが最初に呼び出されます。インターセプターが `Prioritized` インターフェイスを実装していない場合に使用されるデフォルトの優先度は `0` です。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
#, fuzzy
msgid ""
"There is also a support to inject Vert.x `RoutingContext` instance into your gRPC service, if / when needed.\n"
"Quarkus doesn't do that by default, you will need to add `RoutingContextGrpcInterceptor` to your gRPC service."
msgstr "また、必要に応じて、gRPCサービスにVert.x `RoutingContext` インスタンスを注入することもできます。Quarkusはデフォルトではこの機能をサポートしていないため、gRPCサービスに `RoutingContextGrpcInterceptor` 。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Testing your services"
msgstr "サービスのテスト"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"The easiest way to test a gRPC service is to use a gRPC client as described\n"
"in xref:grpc-service-consumption.adoc[Consuming a gRPC Service]."
msgstr "gRPCサービスをテストする最も簡単な方法は、 xref:grpc-service-consumption.adoc[gRPCサービスの使用] で説明したように、gRPCクライアントを使用することです。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Please note that in the case of using a client to test an exposed service that does not use TLS,\n"
"there is no need to provide any configuration. E.g. to test the `HelloService`\n"
"defined above, one could create the following test:"
msgstr "なお、TLS を使用していない公開サービスのテストにクライアントを使用する場合は、設定を行う必要はありませんのでご注意ください。例えば、上記で定義した `HelloService` をテストするには、次のようなテストを作成します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Trying out your services manually"
msgstr "手動でサービスを試す"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"In the dev mode, you can try out your gRPC services in the Quarkus Dev UI.\n"
"Just go to http://localhost:8080/q/dev-ui and click on _Services_ under the gRPC tile."
msgstr ""
"開発モードでは、Quarkus Dev UI で gRPC サービスを試すことができます。\n"
"その場合は、 http://localhost:8080/q/dev-ui にアクセスし、gRPC タイルの下にある _Services_ をクリックしてください。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Please note that your application needs to expose the \"normal\" HTTP port for the Dev UI to be accessible. If your application does not expose any HTTP endpoints, you can create a dedicated profile with a dependency on `quarkus-vertx-http`:"
msgstr "Dev UIにアクセスするには、アプリケーションが ”通常の” HTTPポートを公開する必要があることに注意してください。アプリケーションがHTTPエンドポイントを公開していない場合は、 `quarkus-vertx-http` に依存する専用のプロファイルを作成することができます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Having it, you can run the dev mode with: `mvn quarkus:dev -Pdevelopment`."
msgstr "これがあれば、次のようにしてDevモードを実行できます： `mvn quarkus:dev -Pdevelopment` "

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "If you use Gradle, you can simply add a dependency for the `quarkusDev` task:"
msgstr "Gradleを使用している場合は、 `quarkusDev` タスクの依存関係を追加するだけです。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "gRPC Server metrics"
msgstr "gRPCサーバーのメトリクス"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Enabling metrics collection"
msgstr "メトリクス収集の有効化"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"gRPC server metrics are automatically enabled when the application also uses the xref:telemetry-micrometer.adoc[`quarkus-micrometer`] extension.\n"
"Micrometer collects the metrics of all the gRPC services implemented by the application."
msgstr "アプリケーションが xref:telemetry-micrometer.adoc[`quarkus-micrometer`] エクステンションも使用している場合、gRPCサーバーのメトリクスは自動的に有効になります。 Micrometerは、アプリケーションが実装するすべてのgRPCサービスのメトリクスを収集します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "As an example, if you export the metrics to Prometheus, you will get:"
msgstr "例えば、メトリクスをPrometheusにエクスポートすると、以下のように取得できます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "The service name, method and type can be found in the _tags_."
msgstr "サービス名、メソッド、タイプは _tags_ で確認できます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Disabling metrics collection"
msgstr "メトリクス収集の無効化"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "To disable the gRPC server metrics when `quarkus-micrometer` is used, add the following property to the application configuration:"
msgstr "`quarkus-micrometer` を使用しているときに gRPC サーバーメトリクスを無効にするには、アプリケーションの設定に以下のプロパティを追加します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Use virtual threads"
msgstr "仮想スレッドの使用"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "To use virtual threads in your gRPC service implementation, check the dedicated xref:./grpc-virtual-threads.adoc[guide]."
msgstr "gRPCサービスの実装で仮想スレッドを使用するには、専用の xref:./grpc-virtual-threads.adoc[ガイド] を参照してください。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "gRPC Server authorization"
msgstr "gRPC サーバーの認可"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Quarkus includes built-in security to allow xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[authorization using annotations] when the Vert.x gRPC support, which uses existing Vert.x HTTP server, is enabled."
msgstr "Quarkus には、既存の Vert.x HTTP サーバーを使用する Vert.x gRPC サポートが有効な場合に、xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[アノテーションを使用した認可] を可能にする組み込みのセキュリティーが含まれています。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Add the Quarkus Security extension"
msgstr "Quarkus Security エクステンションを追加する"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Security capabilities are provided by the Quarkus Security extension, therefore make sure your `pom.xml` file contains following dependency:"
msgstr "セキュリティー機能は Quarkus Security エクステンションによって提供されるため、 `pom.xml` ファイルに次の依存関係が含まれていることを確認してください。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "To add the Quarkus Security extension to an existing Maven project, run the following command from your project base directory:"
msgstr "既存の Maven プロジェクトに Quarkus Security エクステンションを追加するには、プロジェクトのベースディレクトリーで次のコマンドを実行します:"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Overview of supported authentication mechanisms"
msgstr "サポートされる認証メカニズムの概要"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Some supported authentication mechanisms are built into Quarkus, while others require you to add an extension.\n"
"The following table maps specific authentication requirements to a supported mechanism that you can use in Quarkus:"
msgstr ""
"サポートされている認証メカニズムの一部は Quarkus に組み込まれていますが、それ以外ではエクステンションを追加する必要があります。\n"
"次の表では、Quarkus で使用できるサポート対象メカニズムとその認証要件をマッピングしています。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Authentication requirements and mechanisms"
msgstr "認証要件とメカニズム"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Authentication requirement"
msgstr "認証要件"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Authentication mechanism"
msgstr "認証メカニズム"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Username and password"
msgstr "ユーザー名とパスワード"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "<<basic-auth-mechanism>>"
msgstr "<<basic-auth-mechanism>>"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Client certificate"
msgstr "クライアント証明書"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "<<mutual-tls-auth-mechanism>>"
msgstr "<<mutual-tls-auth-mechanism>>"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Custom requirements"
msgstr "カスタム要件"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "<<custom-auth-mechanism>>"
msgstr "<<custom-auth-mechanism>>"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Bearer access token"
msgstr "ベアラーアクセストークン"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication], xref:security-jwt.adoc[JWT], xref:security-oauth2.adoc[OAuth2]"
msgstr "xref:security-oidc-bearer-token-authentication.adoc[OIDCベアラートークン認証] 、 xref:security-jwt.adoc[JWT] 、 xref:security-oauth2.adoc[OAuth2]"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Do not forget to install at least one extension that provides an `IdentityProvider` based on selected authentication requirements.\n"
"Please refer to the xref:security-basic-authentication-howto.adoc[Basic authentication guide] for example how to provide the `IdentityProvider` based on username and password."
msgstr ""
"選択した認証要件に応じた `IdentityProvider` を提供するエクステンションを、必ず 1 つ以上インストールします。\n"
"ユーザー名とパスワードに基づいて `IdentityProvider` を提供する方法の例については、xref:security-basic-authentication-howto.adoc[Basic 認証ガイド] を参照してください。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"If you use separate HTTP server to serve gRPC requests, <<custom-auth-mechanism>> is your only option.\n"
"Set the `quarkus.grpc.server.use-separate-server` configuration property to `false` so that you can use other mechanisms."
msgstr ""
"gRPC リクエストを処理するために別の HTTP サーバーを使用する場合、唯一の選択肢が <<custom-auth-mechanism>> です。\n"
"他のメカニズムの使用できるようにするには、 `quarkus.grpc.server.use-separate-server` 設定プロパティーを `false` に設定します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Secure gRPC service"
msgstr "セキュアな gRPC サービス"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "The gRPC services can be secured with the xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[standard security annotations] like in the example below:"
msgstr "gRPC サービスは、次の例のように、xref:security-authorize-web-endpoints-reference.adoc#standard-security-annotations[標準セキュリティーアノテーション] を使用して保護できます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Most of the examples of the supported mechanisms sends authentication headers, please refer to the xref:grpc-service-consumption.adoc[gRPC Headers]\n"
"section of the Consuming a gRPC Service guide for more information about the gRPC headers."
msgstr "サポート対象メカニズムの例のほとんどは、認証ヘッダーを送信します。gRPC ヘッダーの詳細については、gRPC Service の使用ガイドの xref:grpc-service-consumption.adoc[gRPC ヘッダー] セクションを参照してください。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Basic authentication"
msgstr "Basic認証"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Quarkus Security provides built-in authentication support for the xref:security-basic-authentication.adoc[Basic authentication]."
msgstr "Quarkus Security は、xref:security-basic-authentication.adoc[Basic 認証] の組み込み認証サポートを提供します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Enable the Basic authentication."
msgstr "Basic 認証を有効にします。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Mutual TLS authentication"
msgstr "相互TLS認証"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid ""
"Quarkus provides mutual TLS (mTLS) authentication so that you can authenticate users based on their X.509 certificates.\n"
"The simplest way to enforce authentication for all your gRPC services is described in the <<tls-with-mutual-auth>> section of this guide.\n"
"However, the Quarkus Security supports role mapping that you can use to perform even more fine-grained access control."
msgstr ""
"Quarkus には相互 TLS (mTLS) 認証があり、X.509 証明書に基づいてユーザーを認証できます。\n"
"すべての gRPC サービスに認証を適用する最も簡単な方法については、このガイドの <<tls-with-mutual-auth>> セクションを参照してください。\n"
"ただし、Quarkus Security はロールマッピングをサポートしており、これを使用することでより詳細なアクセス制御を実行できます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Adds certificate role mapping."
msgstr "証明書ロールマッピングを追加します。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Example of the role mapping file"
msgstr "ロールマッピングファイルの例"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Map the `testclient` certificate CN (Common Name) to the `SecurityIdentity` role `admin`."
msgstr "`testclient` 証明書の CN (共通名) を `SecurityIdentity` ロール `admin` にマッピングします。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Custom authentication"
msgstr "カスタム認証"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "You can always implement one or more `GrpcSecurityMechanism` bean if above-mentioned mechanisms provided by Quarkus do no meet your needs."
msgstr "Quarkus が提供する上記のメカニズムがニーズを満たさない場合は、いつでも 1 つ以上の `GrpcSecurityMechanism` Bean を実装できます。"

#: _versions/3.27/guides/grpc-service-implementation.adoc
msgid "Example of custom `GrpcSecurityMechanism`"
msgstr "カスタム `GrpcSecurityMechanism` の例"
