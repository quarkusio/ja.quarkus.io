msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing Your Application"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Learn how to test your Quarkus Application.\n"
"This guide covers:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing in JVM mode"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing in native mode"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Injection of resources into tests"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The completed greeter application from the xref:getting-started.adoc[Getting Started Guide]"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Architecture"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"In this guide, we expand on the initial test that was created as part of the Getting Started Guide.\n"
"We cover injection into tests and also how to test native executables."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Quarkus supports Continuous testing, but this is covered by the xref:continuous-testing.adoc[Continuous Testing Guide]."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The solution is located in the `getting-started-testing` link:{quickstarts-tree-url}/getting-started-testing[directory]."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This guide assumes you already have the completed application from the `getting-started` directory."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Recap of HTTP based Testing in JVM mode"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"If you have started from the Getting Started example you should already have a completed test, including the correct\n"
"tooling setup."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "In your build file you should see 2 test dependencies:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Maven"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Gradle"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`quarkus-junit5` is required for testing, as it provides the `@QuarkusTest` annotation that controls the testing framework.\n"
"`rest-assured` is not required but is a convenient way to test HTTP endpoints, we also provide integration that automatically\n"
"sets the correct URL so no configuration is required."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Because we are using JUnit 5, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin]\n"
"must be set, as the default version does not support Junit 5:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"We also set the `java.util.logging.manager` system property to make sure tests will use the correct logmanager and `maven.home` to ensure that custom configuration\n"
"from `${maven.home}/conf/settings.xml` is applied (if any)."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The project should also contain a simple test:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"This test uses HTTP to directly test our REST endpoint. When the test is run the application will be started before\n"
"the test is run."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Controlling the test port"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"While Quarkus will listen on port `8080` by default, when running tests it defaults to `8081`. This allows you to run\n"
"tests while having the application running in parallel."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Changing the test port"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "You can configure the ports used by tests by configuring `quarkus.http.test-port` for HTTP and `quarkus.http.test-ssl-port` for HTTPS in your `application.properties`:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`0` will result in the use of a random port (assigned by the operating system)."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus also provides RestAssured integration that updates the default port used by RestAssured before the tests are run,\n"
"so no additional configuration should be required."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Controlling HTTP interaction timeout"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"When using REST Assured in your test, the connection and response timeouts are set to 30 seconds.\n"
"You can override this setting with the `quarkus.http.test-timeout` property:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Injecting a URI"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"It is also possible to directly inject the URL into the test which can make is easy to use a different client. This is\n"
"done via the `@TestHTTPResource` annotation."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Let's write a simple test that shows this off to load some static resources. First create a simple HTML file in\n"
"`src/main/resources/META-INF/resources/index.html` :"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "We will create a simple test to ensure that this is being served correctly:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This annotation allows you to directly inject the URL of the Quarkus instance, the value of the annotation will be the path component of the URL"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing a specific endpoint"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n"
"a path. This currently supports both Jakarta REST endpoints, Servlets and Reactive Routes. This makes it a lot easier to see exactly which endpoints\n"
"a given test is testing."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "For the purposes of these examples I am going to assume we have an endpoint that looks like the following:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"This currently does not support the `@ApplicationPath()` annotation to set the Jakarta REST context path. Use the\n"
"`quarkus.resteasy.path` config value instead if you want a custom context path."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "TestHTTPResource"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n"
"will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n"
"be appended to the end of the endpoint path."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL\n"
"will end with `/hello`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "RESTassured"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"To control the RESTassured base path (i.e. the default path that serves as the root for every\n"
"request) you can use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation. This can\n"
"be applied at the class or method level. To test out greeting resource we would do:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This tells RESTAssured to prefix all requests with `/hello`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Note we don't need to specify a path here, as `/hello` is the default for this test"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Injection into tests"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"So far we have only covered integration style tests that test the app via HTTP endpoints, but what if we want to do unit\n"
"testing and test our beans directly?"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus supports this by allowing you to inject CDI beans into your tests via the `@Inject` annotation (in fact, tests in\n"
"Quarkus are full CDI beans, so you can use all CDI functionality). Let's create a simple test that tests the greeting\n"
"service directly without using HTTP:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `GreetingService` bean will be injected into the test"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "If you want to inject/test a `@SessionScoped` bean then it's very likely that the session context is not active and you would receive the `ContextNotActiveException` when a method of the injected bean is invoked. However, it's possible to use the `@io.quarkus.test.ActivateSessionContext` interceptor binding to activate the session context for a specific business method. Please read the javadoc for futher limitations."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Applying Interceptors to Tests"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"As mentioned above Quarkus tests are actually full CDI beans, and as such you can apply CDI interceptors as you would\n"
"normally. As an example, if you want a test method to run within the context of a transaction you can simply apply the\n"
"`@Transactional` annotation to the method and the transaction interceptor will handle it."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"In addition to this you can also create your own test stereotypes. For example, we could create a `@TransactionalQuarkusTest`\n"
"as follows:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"If we then apply this annotation to a test class it will act as if we had applied both the `@QuarkusTest` and\n"
"`@Transactional` annotations, e.g.:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Tests and Transactions"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"You can use the standard Quarkus `@Transactional` annotation on tests, but this means that the changes your\n"
"test makes to the database will be persistent. If you want any changes made to be rolled back at the end of\n"
"the test you can use the `io.quarkus.test.TestTransaction` annotation. This will run the test method in a\n"
"transaction, but roll it back once the test method is complete to revert any database changes."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Enrichment via QuarkusTest*Callback"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Alternatively or additionally to an interceptor, you can enrich *all* your `@QuarkusTest` classes by implementing the following callback interfaces:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeClassCallback`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeTestExecutionCallback`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterTestExecutionCallback`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Optionally, you can enable these callbacks also for the `@QuarkusIntegrationTest` tests if the property `quarkus.test.enable-callbacks-for-integration-tests` is `true`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Such a callback implementation has to be registered as a \"service provider\" as defined by `java.util.ServiceLoader`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "E.g. the following sample callback:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "has to be registered via `src/main/resources/META-INF/services/io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback` as follows:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "It is possible to read annotations from the test class or method to control what the callback shall be doing."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing Different Profiles"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"So far in all our examples we only start Quarkus once for all tests. Before the first test is run Quarkus will boot,\n"
"then all tests will run, then Quarkus will shut down at the end. This makes for a very fast testing experience however\n"
"it is a bit limited as you can't test different configurations."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"To get around this Quarkus supports the idea of a test profile. If a test has a different profile to the previously\n"
"run test then Quarkus will be shut down and started with the new profile before running the tests. This is obviously\n"
"a bit slower, as it adds a shutdown/startup cycle to the test time, but gives a great deal of flexibility."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"To reduce the amount of times Quarkus needs to restart, `io.quarkus.test.junit.util.QuarkusTestProfileAwareClassOrderer`\n"
"is registered as a global `ClassOrderer` as described in the\n"
"link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order-classes[JUnit 5 User Guide].\n"
"The behavior of this `ClassOrderer` is configurable via `application.properties` using the property\n"
"`quarkus.test.class-orderer`. The property accepts the FQCN of the `ClassOrderer` to use. If the class cannot be found,\n"
"it fallbacks to JUnit default behaviour which does not set a `ClassOrderer` at all. It can also be disabled entirely by\n"
"setting another `ClassOrderer` that is provided by JUnit 5 or even your own custom one."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Writing a Profile"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "To implement a test profile we need to implement `io.quarkus.test.junit.QuarkusTestProfile`:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "All these methods have default implementations so just override the ones you need to override."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "If a test profile implementation declares a CDI bean (via producer method/field or nested static class) then this bean is only taken into account if the test profile is used, i.e. it's ignored for any other test profile."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Now we have defined our profile we need to include it on our test class.\n"
"We do this by annotating the test class with `@TestProfile(MockGreetingProfile.class)`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"All the test profile configuration is stored in a single class, which makes it easy to tell if the previous test ran with the\n"
"same configuration."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Running specific tests"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus provides the ability to limit test execution to tests with specific  `@TestProfile` annotations.\n"
"This works by leveraging the `tags` method of `QuarkusTestProfile` in conjunction with the `quarkus.test.profile.tags` system property."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Essentially, any `QuarkusTestProfile` with at least one matching tag matching the value of `quarkus.test.profile.tags` will be considered active\n"
"and all the tests annotated with `@TestProfile` of active profiles, will be run while the rest will be skipped.\n"
"This is best shown in the following example."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "First let's define a few `QuarkusTestProfile` implementations like so:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Now let's assume that we have the following tests:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Let's consider the following scenarios:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`quarkus.test.profile.tags` is not set: All tests will be executed."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=foo`: In this case none of tests will be executed because none of the tags defined on the `QuarkusTestProfile` implementations match the value of `quarkus.test.profile.tags`.\n"
"Note that `NoQuarkusProfileTest` is not executed either because it is not annotated with `@TestProfile`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=test1`: In this case `SingleTagTest` and `MultipleTagsTest` will be run because the tags on their respective `QuarkusTestProfile` implementations\n"
"match the value of `quarkus.test.profile.tags`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`quarkus.test.profile.tags=test1,test3`: This case results in the same tests being executed as the previous case."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=test2,test3`: In this case only `MultipleTagsTest` will be run because `MultipleTagsTest` is the only `QuarkusTestProfile` implementation whose `tags` method\n"
"matches the value of `quarkus.test.profile.tags`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Nested Tests"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"JUnit 5 https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested[@Nested tests] are useful for structuring more complex test scenarios.\n"
"However, note that it is not possible to assign different test profiles or resources to nested tests within the same parent class."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Mock Support"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus supports the use of mock objects using two different approaches. You can either use CDI alternatives to\n"
"mock out a bean for all test classes, or use `QuarkusMock` to mock out beans on a per test basis."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "CDI `@Alternative` mechanism."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"To use this simply override the bean you wish to mock with a class in the `src/test/java` directory, and put the `@Alternative` and `@Priority(1)` annotations on the bean.\n"
"Alternatively, a convenient `io.quarkus.test.Mock` stereotype annotation could be used.\n"
"This built-in stereotype declares `@Alternative`, `@Priority(1)` and `@Dependent`.\n"
"For example if I have the following service:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "I could mock it with the following class in `src/test/java`:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Overrides the `@Dependent` scope declared on the `@Mock` stereotype."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"It is important that the alternative be present in the `src/test/java` directory rather than `src/main/java`, as otherwise\n"
"it will take effect all the time, not just when testing."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Note that at present this approach does not work with native image testing, as this would require the test alternatives\n"
"to be baked into the native image."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Mocking using QuarkusMock"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"The `io.quarkus.test.junit.QuarkusMock` class can be used to temporarily mock out any normal scoped\n"
"bean. If you use this method in a `@BeforeAll` method the mock will take effect for all tests on the current class,\n"
"while if you use this in a test method the mock will only take effect for the duration of the current test."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"This method can be used for any normal scoped CDI bean (e.g. `@ApplicationScoped`, `@RequestScoped` etc, basically\n"
"every scope except `@Singleton` and `@Dependent`)."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "An example usage could look like:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "As the injected instance is not available here we use `installMockForType`, this mock is used for both test methods"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "We use `installMockForInstance` to replace the injected bean, this takes effect for the duration of the test method."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Note that there is no dependency on Mockito, you can use any mocking library you like, or even manually override the\n"
"objects to provide the behaviour you require."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Using `@Inject` will get you a CDI proxy to the mock instance you install, which is not suitable for passing to methods such as `Mockito.verify`\n"
"which want the mock instance itself.\n"
"So if you need to call methods such as `verify` you should hang on to the mock instance in your test, or use `@io.quarkus.test.InjectMock`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Further simplification with `@InjectMock`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Building on the features provided by `QuarkusMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for mocking the beans supported by `QuarkusMock`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This functionality is available with the `@io.quarkus.test.InjectMock` annotation **only if** the `quarkus-junit5-mockito` dependency is present:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Using `@InjectMock`, the previous example could be written as follows:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`@InjectMock` results in a Mockito mock being created, which is then available in test methods of the test class (other test classes are *not* affected by this)"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `mockableBean1` is configured here for every test method of the class"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Since the `mockableBean2` mock has not been configured, it will return the default Mockito response."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "In this test the `mockableBean2` is configured, so it returns the configured response."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Although the test above is good for showing the capabilities of `@InjectMock`, it is not a good representation of a real test. In a real test\n"
"we would most likely configure a mock, but then test a bean that uses the mocked bean.\n"
"Here is an example:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Since we configured `greetingService` as a mock, the `GreetingResource` which uses the `GreetingService` bean, we get the mocked response instead of the response of the regular `GreetingService` bean"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"By default, the `@InjectMock` annotation can be used for any normal CDI scoped bean (e.g. `@ApplicationScoped`, `@RequestScoped`).\n"
"Mocking `@Singleton` beans can be performed by adding the `@MockitoConfig(convertScopes = true)` annotation.\n"
"This will convert the `@Singleton` bean to an `@ApplicationScoped` bean for the test."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This is considered an advanced option and should only be performed if you fully understand the consequences of changing the scope of the bean."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Using Spies instead of Mocks with `@InjectSpy`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Building on the features provided by `InjectMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for spying on the beans supported by `QuarkusMock`.\n"
"This functionality is available via the `@io.quarkus.test.junit.mockito.InjectSpy` annotation which is available in the `quarkus-junit5-mockito` dependency."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Sometimes when testing you only need to verify that a certain logical path was taken, or you only need to stub out a single method's response while still executing the rest of the methods on the Spied clone. Please see link:https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#13[Mockito documentation - Spying on real objects] for more details on Spy partial mocks.\n"
"In either of those situations a Spy of the object is preferable.\n"
"Using `@InjectSpy`, the previous example could be written as follows:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Instead of overriding the value, we just want to ensure that the greet method on our `GreetingService` was called by this test."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Here we are telling the Spy to return \"hi\" instead of \"hello\". When the `GreetingResource` requests the greeting from `GreetingService` we get the mocked response instead of the response of the regular `GreetingService` bean. Sometimes it's impossible or impractical to use `when(Object)` for stubbing spies. Therefore when using spies please consider `doReturn|Answer|Throw()` family of methods for stubbing."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "We are verifying that we get the mocked response from the Spy."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Using `@InjectMock` with `@RestClient`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `@RegisterRestClient` registers the implementation of the REST Client at runtime, and because the bean needs to be a regular scope, you have to annotate your interface with `@ApplicationScoped`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "For the test class here is an example:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Indicate that this injection point is meant to use an instance of `RestClient`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Mocking with Panache"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "If you are using the `quarkus-hibernate-orm-panache` or `quarkus-mongodb-panache` extensions, check out the xref:hibernate-orm-panache.adoc#mocking[Hibernate ORM with Panache Mocking] and xref:mongodb-panache.adoc#mocking[MongoDB with Panache Mocking] documentation for the easiest way to mock your data access."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing Security"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "If you are using Quarkus Security, check out the xref:security-testing.adoc[Testing Security] section for information on how to easily test security features of the application."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Starting services before the Quarkus application starts"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "A very common need is to start some services on which your Quarkus application depends, before the Quarkus application starts for testing. To address this need, Quarkus provides `@io.quarkus.test.common.QuarkusTestResource` and `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"By simply annotating any test in the test suite with `@QuarkusTestResource`, Quarkus will run the corresponding `QuarkusTestResourceLifecycleManager` before any tests are run.\n"
"A test suite is also free to utilize multiple `@QuarkusTestResource` annotations, in which case all the corresponding `QuarkusTestResourceLifecycleManager` objects will be run before the tests."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Test resources are global, even if they are defined on a test class or custom profile, which means they will all be activated for all tests, even though we do\n"
"remove duplicates. If you want to only enable a test resource on a single test class or test profile, you can use `@QuarkusTestResource(restrictToAnnotatedClass = true)`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "When using multiple test resources, they can be started concurrently. For that you need to set `@QuarkusTestResource(parallel = true)`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus provides a few implementations of `QuarkusTestResourceLifecycleManager` out of the box (see `io.quarkus.test.h2.H2DatabaseTestResource` which starts an H2 database, or `io.quarkus.test.kubernetes.client.KubernetesServerTestResource` which starts a mock Kubernetes API server),\n"
"but it is common to create custom implementations to address specific application needs.\n"
"Common cases include starting docker containers using https://www.testcontainers.org/[Testcontainers] (an example of which can be found https://github.com/quarkusio/quarkus/blob/main/test-framework/keycloak-server/src/main/java/io/quarkus/test/keycloak/server/KeycloakTestResourceLifecycleManager.java[here]),\n"
"or starting a mock HTTP server using https://wiremock.org/[Wiremock] (an example of which can be found https://github.com/geoand/quarkus-test-demo/blob/main/src/test/java/org/acme/getting/started/country/WiremockCountries.java[here])."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "As `QuarkusTestResourceLifecycleManager` is not a CDI Bean, classes that implement it can't have fields injected with `@Inject`. You can use `String propertyName = ConfigProvider.getConfig().getValue(\"quarkus.my-config-group.myconfig\", String.class);`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Altering the test class"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"When creating a custom `QuarkusTestResourceLifecycleManager` that needs to inject something into the test class, the `inject` methods can be used.\n"
"If for example you have a test like the following:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Making `MyWireMockResource` inject the `wireMockServer` field can be done as shown in the `inject` method of the following code snippet:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"It is worth mentioning that this injection into the test class is not under the control of CDI and happens after CDI has performed\n"
"any necessary injections into the test class."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Annotation-based test resources"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"It is possible to write test resources that are enabled and configured using annotations. This is enabled by placing the `@QuarkusTestResource`\n"
"on an annotation which will be used to enable and configure the test resource."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"For example, this defines the `@WithKubernetesTestServer` annotation, which you can use on your tests to activate the `KubernetesServerTestResource`,\n"
"but only for the annotated test class. You can also place them on your `QuarkusTestProfile` test profiles."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"The `KubernetesServerTestResource` class has to implement the\n"
"`QuarkusTestResourceConfigurableLifecycleManager` interface in order to be configured using the previous annotation:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"If you want to make the annotation repeatable, the containing annotation type must be annotated with `@QuarkusTestResourceRepeatable`.\n"
"For example, this would define a repeatable `@WithRepeatableTestResource` annotation."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Usage of `@WithTestResource`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"While test resources provided by `@QuarkusTestResource` are available either globally or restricted to the annotated test class (`restrictToAnnotatedClass`), the annotation `@WithTestResource` allows to additionally group tests by test resources for execution.\n"
"`@WithTestResource` has a `scope` property that takes a `TestResourceScope` enum value:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`TestResourceScope.MATCHING_RESOURCES` (default): Quarkus will group tests with the same test resources and run them together. After a group has been executed, all test resources will be stopped, and the next group will be executed."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`TestResourceScope.RESTRICTED_TO_CLASS`: The test resource is available only for the annotated test class and will be stopped after the test class has been executed."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`TestResourceScope.GLOBAL`: Test resources apply to all tests in the test suite"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Quarkus needs to restart if one of the following is true:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "At least one of the test resources of the current test is restricted to the test class"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "At least one of the test resources of the next test is restricted to the test class"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Different `MATCHING_RESOURCES` scoped test resources are being used"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Hang Detection"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusTest` has support for hang detection to help diagnose any unexpected hangs. If no progress is made for a specified\n"
"time (i.e. no JUnit callbacks are invoked) then Quarkus will print a stack trace to the console to help diagnose the hang.\n"
"The default value for this timeout is 10 minutes."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"No further action will be taken, and the tests will continue as normal (generally until CI times out), however the printed\n"
"stack traces should help diagnose why the build has failed. You can control this timeout with the\n"
"`quarkus.test.hang-detection-timeout` system property (you can also set this in application.properties, but this won't\n"
"be read until Quarkus has started, so the timeout for Quarkus start will be the default of 10 minutes)."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Native Executable Testing"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"It is also possible to test native executables using `@QuarkusIntegrationTest`. This supports all the features mentioned in this\n"
"guide except injecting into tests (and the native executable runs in a separate non-JVM process this is not really possible)."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This is covered in the xref:building-native-image.adoc[Native Executable Guide]."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Using `@QuarkusIntegrationTest`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusIntegrationTest` should be used to launch and test the artifact produced by the Quarkus build, and supports testing a jar (of whichever type), a native image or container image.\n"
"Put simply, this means that if the result of a Quarkus build (`mvn package` or `gradle build`) is a jar, that jar will be launched as `java -jar ...` and tests run against it.\n"
"If instead a native image was built, then the application is launched as `./application ...` and again the tests run against the running application.\n"
"Finally, if a container image was created during the build (by including the `quarkus-container-image-jib`, `quarkus-container-image-docker`, or `container-image-podman` extensions and having the\n"
"`quarkus.container-image.build=true` property configured), then a container is created and run (this requires the `docker` or `podman` executable being present)."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This is a black box test that supports the same set features and has the same limitations."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"As a test annotated with `@QuarkusIntegrationTest` tests the result of the build, it should be run as part of the integration test suite - i.e. by setting `-DskipITs=false` if using Maven or the `quarkusIntTest` task if using Gradle.\n"
"These tests will **not** work if run in the same phase as `@QuarkusTest` as Quarkus has not yet created the final artifact."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `pom.xml` file contains:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This instructs the failsafe-maven-plugin to run integration-test."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Then, open the `src/test/java/org/acme/quickstart/GreetingResourceIT.java`. It contains:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Use another test runner that starts the application from the native file before the tests.\n"
"The executable is retrieved by the _Failsafe Maven Plugin_."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "We extend our previous tests as a convenience, but you can also implement your tests."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "More information can be found in the link:building-native-image#testing-the-native-executable[Testing the native executable Guide]."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "When the application is tested using `@QuarkusIntegrationTest` it is launched using the `prod` configuration profile, but this can be changed using the `quarkus.test.integration-test-profile` property."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"While adding test-specific configuration properties using `src/test/resources/application.properties` (note there's `test`, not `main`)\n"
"is possible for unit tests, it's not possible for integration tests."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Debugging `@QuarkusIntegrationTest`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Debugging a failed `@QuarkusInterationTest` is trickier than debugging a `@QuarkusTest` because the Quarkus application\n"
"is launched as a separate process."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"The test code itself can be easily debugged with any of the well known methods (like launching the test from the IDE, adding `-Dmaven.failsafe.debug` if the test is launched via Maven, etc.),\n"
"but the application under test needs to have the necessary flags passed to it via `quarkus.test.arg-line` to enable debugging. For testing an application\n"
"packaged as *jar*, you can use:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "as an argument to Maven/Gradle when launching the test. This will make the application wait until a remote JVM debugger is connected to port `5005`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Launching containers"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"When `@QuarkusIntegrationTest` results in launching a container (because the application was built with `quarkus.container-image.build` set to `true`), the container is launched on a predictable container network. This facilitates writing integration tests that need to launch services to support the application.\n"
"This means that `@QuarkusIntegrationTest` works out of the box with containers launched via xref:dev-services.adoc[Dev Services], but it also means that it enables using <<quarkus-test-resource,QuarkusTestLifecycleManager>> resources that launch additional containers.\n"
"This can be achieved by having your `QuarkusTestLifecycleManager` implement `io.quarkus.test.common.DevServicesContext.ContextAware`. A simple example could be the following:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"The container running the resource to test against, for example PostgreSQL via Testcontainers, is assigned an IP address from the container's network.\n"
"Use the container's \"public\" IP from its network and the \"unmapped\" port number to connect to the service.\n"
"The Testcontainers library usually return connection strings without respecting the container network, so additional code is needed to provide Quarkus the \"correct\" connection string using the container's IP on the container network and the _unmapped_ port number."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The following example illustrates the use with PostgreSQL, but the approach is applicable to all containers."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`CustomResource` would be activated on a `@QuarkusIntegrationTest` using `@QuarkusTestResource` as is described in the corresponding section of this doc."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Executing against a running application"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusIntegrationTest` supports executing tests against an already running instance of the application. This can be achieved by setting the\n"
"`quarkus.http.test-host` system property when running the tests."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "An example use of this could be the following Maven command, that forces `@QuarkusIntegrationTest` to execute against that is accessible at `http://1.2.3.4:4321`:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "To test against a running instance that only accepts SSL/TLS connection (example: `https://1.2.3.4:4321`) set the system property `quarkus.http.test-ssl-enabled` to `true` and `quarkus.http.test-ssl-port` to the target HTTPS port."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Mixing `@QuarkusTest` with other type of tests"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Mixing tests annotated with `@QuarkusTest` with tests annotated with either `@QuarkusDevModeTest`, `@QuarkusProdModeTest` or `@QuarkusUnitTest`\n"
"is not allowed in a single execution run (in a single Maven Surefire Plugin execution, for instance),\n"
"while the latter three can coexist."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"The reason of this restriction is that `@QuarkusTest` starts a Quarkus server for the whole lifetime of the tests execution run,\n"
"thus preventing the other tests to start their own Quarkus server."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"To alleviate this restriction, the `@QuarkusTest` annotation defines a JUnit 5 `@Tag`: `io.quarkus.test.junit.QuarkusTest`.\n"
"You can use this tag to isolate the `@QuarkusTest` test in a specific execution run, for example with the Maven Surefire Plugin:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Currently `@QuarkusTest` and `@QuarkusIntegrationTest` should not be run in the same test run."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "For Maven, this means that the former should be run by the surefire plugin while the latter should be run by the failsafe plugin."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "For Gradle, this means the two types of tests should belong to different source sets."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Source set configuration example"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Running `@QuarkusTest` from an IDE"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Most IDEs offer the possibility to run a selected class as a JUnit test directly. For this you should set a few properties in the settings of your chosen IDE:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`java.util.logging.manager` (see xref:logging.adoc[Logging Guide])"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`maven.home` (only if there are any custom settings in `${maven.home}/conf/settings.xml`, see xref:maven-tooling.adoc[Maven Guide])"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`maven.settings` (in case a custom version of `settings.xml` file should be used for the tests)"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Eclipse separate JRE definition"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Copy your current \"Installed JRE\" definition into a new one, where you will add the properties as a new VM arguments:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`-Djava.util.logging.manager=org.jboss.logmanager.LogManager`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`-Dmaven.home=<path-to-your-maven-installation>`"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Use this JRE definition as your Quarkus project targeted runtime and the workaround will be applied to any \"Run as JUnit\" configuration."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "VSCode \"run with\" configuration"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `settings.json` placed in the root of your project directory or in the workspace will need the following workaround in your test configuration:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "IntelliJ IDEA JUnit template"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Nothing needed in IntelliJ IDEA because the IDE will pick the `systemPropertyVariables` from the surefire plugin configuration in `pom.xml`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing Dev Services"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"By default, tests should just work with xref:dev-services.adoc[Dev Services], however from some use cases you may need access to\n"
"the automatically configured properties in your tests."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"You can do this with `io.quarkus.test.common.DevServicesContext`, which can be injected directly into any `@QuarkusTest`\n"
"or `@QuarkusIntegrationTest`. All you need to do is define a field of type `DevServicesContext` and it will be automatically\n"
"injected. Using this you can retrieve any properties that have been set. Generally this is used to directly connect to a\n"
"resource from the test itself, e.g. to connect to kafka to send messages to the application under test."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Injection is also supported into objects that implement `io.quarkus.test.common.DevServicesContext.ContextAware`. If you\n"
"have a field that implements `io.quarkus.test.common.DevServicesContext.ContextAware` Quarkus will call the\n"
"`setIntegrationTestContext` method to pass the context into this object. This allows client logic to be encapsulated in\n"
"a utility class."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`QuarkusTestResourceLifecycleManager` implementations can also implement `ContextAware` to get access to these properties,\n"
"which allows you to set up the resource before Quarkus starts (e.g. configure a KeyCloak instance, add data to a database etc)."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"For `@QuarkusIntegrationTest` tests that result in launcher the application as a container, `io.quarkus.test.common.DevServicesContext` also provides access to the id of the container network on which the application container was launched (via the `containerNetworkId` method).\n"
"This can be used by `QuarkusTestResourceLifecycleManager` that need to launch additional containers that the application will communicate with."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing Components"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus provides the `QuarkusComponentTestExtension`, a JUnit extension to ease the testing of components and mocking of their dependencies.\n"
"This JUnit extension is available in the `quarkus-junit5-component` dependency."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Let's have a component `Foo` - a CDI bean with two injection points."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`Foo` component"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`Foo` is an `@ApplicationScoped` CDI bean."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`Foo` depends on the config property `bar`. `@Inject` is not needed for this injection point because it also declares a CDI qualifier - this is a Quarkus-specific feature."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Then a component test could look like:"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Simple component test"
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `QuarkusComponentTest` annotation registers the JUnit extension."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Sets a configuration property for the test."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The test injects the component under the test. The types of all fields annotated with `@Inject` are considered the component types under test. You can also specify additional component classes via `@QuarkusComponentTest#value()`. Furthermore, the static nested classes declared on the test class are components too."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The test also injects a mock for `Charlie`. `Charlie` is an _unsatisfied_ dependency for which a synthetic `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "We can leverage the Mockito API in a test method to configure the behavior."
msgstr ""

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "You can find more examples and hints in the xref:testing-components.adoc[testing components reference guide]."
msgstr ""
