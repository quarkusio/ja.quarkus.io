msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing Your Application"
msgstr "アプリケーションのテスト"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Learn how to test your Quarkus Application.\n"
"This guide covers:"
msgstr "Quarkusアプリケーションのテスト方法について説明します。このガイドでは、以下の内容について説明します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing in JVM mode"
msgstr "JVM モードでのテスト"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing in native mode"
msgstr "ネイティブモードでのテスト"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Injection of resources into tests"
msgstr "テストへのリソースの注入"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The completed greeter application from the xref:getting-started.adoc[Getting Started Guide]"
msgstr "link:getting-started.html[入門ガイド]に掲載されている、完了済のGreeterアプリケーション"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Architecture"
msgstr "アーキテクチャ"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"In this guide, we expand on the initial test that was created as part of the Getting Started Guide.\n"
"We cover injection into tests and also how to test native executables."
msgstr "このガイドでは、入門ガイドの一部として作成された最初のテストを拡張します。テストへのインジェクションと、ネイティブ実行可能ファイルをテストする方法もカバーしています。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Quarkus supports Continuous testing, but this is covered by the xref:continuous-testing.adoc[Continuous Testing Guide]."
msgstr "Quarkus は継続的テストをサポートしていますが、これについては xref:continuous-testing.adoc[継続的テストガイド] で説明しています。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The solution is located in the `getting-started-testing` link:{quickstarts-tree-url}/getting-started-testing[directory]."
msgstr "ソリューションは `getting-started-testing` link:{quickstarts-tree-url}/getting-started-testing[ディレクトリー] にあります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This guide assumes you already have the completed application from the `getting-started` directory."
msgstr "このガイドでは、 `getting-started`  ディレクトリーの完成したアプリケーションをすでに持っていることを前提としています。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Recap of HTTP based Testing in JVM mode"
msgstr "JVM モードでの HTTP ベースのテストの要約"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"If you have started from the Getting Started example you should already have a completed test, including the correct\n"
"tooling setup."
msgstr "「はじめに」のサンプルから始めた場合は、正しいツールマップの設定を含めて、すでにテストが完了しているはずです。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "In your build file you should see 2 test dependencies:"
msgstr "ビルドファイルには、2 つのテスト依存関係が表示されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Gradle"
msgstr "Gradle"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`quarkus-junit5` is required for testing, as it provides the `@QuarkusTest` annotation that controls the testing framework.\n"
"`rest-assured` is not required but is a convenient way to test HTTP endpoints, we also provide integration that automatically\n"
"sets the correct URL so no configuration is required."
msgstr "`quarkus-junit5`  は、テストフレームワークを制御する `@QuarkusTest`  アノテーションを提供するため、テストには必須です。 `rest-assured`  は必須ではありませんが、HTTP エンドポイントをテストするのに便利な方法です。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Because we are using JUnit 5, the version of the https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin]\n"
"must be set, as the default version does not support Junit 5:"
msgstr "JUnit 5を使用しているので、 link:https://maven.apache.org/surefire/maven-surefire-plugin/[Surefire Maven Plugin]のバージョンを設定する必要があります。デフォルトのバージョンはJUnit 5をサポートしていない為です。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"We also set the `java.util.logging.manager` system property to make sure tests will use the correct logmanager and `maven.home` to ensure that custom configuration\n"
"from `${maven.home}/conf/settings.xml` is applied (if any)."
msgstr "また、 `java.util.logging.manager`  システムプロパティーを設定して、テストが正しい logmanager と `maven.home`  を使用して、 `${maven.home}/conf/settings.xml` からのカスタム設定が適用されるようにしています (存在する場合)。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The project should also contain a simple test:"
msgstr "プロジェクトには簡単なテストも含まれているはずです:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"This test uses HTTP to directly test our REST endpoint. When the test is run the application will be started before\n"
"the test is run."
msgstr "このテストはHTTPを使用して、RESTエンドポイントを直接テストします。テストが実行されると、テストが実行される前にアプリケーションが開始されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Controlling the test port"
msgstr "テストポートの制御"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"While Quarkus will listen on port `8080` by default, when running tests it defaults to `8081`. This allows you to run\n"
"tests while having the application running in parallel."
msgstr "Quarkusはデフォルトではポート `8080`  をリッスンしますが、テストを実行する場合はデフォルトで `8081`  をリッスンします。これにより、アプリケーションを並行して実行しながらテストを実行することができます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Changing the test port"
msgstr "テストポートの変更"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "You can configure the ports used by tests by configuring `quarkus.http.test-port` for HTTP and `quarkus.http.test-ssl-port` for HTTPS in your `application.properties`:"
msgstr " `application.properties` の `quarkus.http.test-port` を設定することで、を HTTP 用にテストで使われるポートを設定出来、 `quarkus.http.test-ssl-port` を設定することで HTTPS 用にテストで使用するポートを設定することが出来ます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`0` will result in the use of a random port (assigned by the operating system)."
msgstr "`0` を使用すると、(オペレーティングシステムによって割り当てられた)ランダムなポートが使用されることになります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus also provides RestAssured integration that updates the default port used by RestAssured before the tests are run,\n"
"so no additional configuration should be required."
msgstr "Quarkusはまた、テストを実行する前にRestAssuredによって使用されるデフォルトのポートを更新するRestAssuredインテグレーションも提供しているため、追加の設定は必要ありません。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Controlling HTTP interaction timeout"
msgstr "HTTP インタラクションタイムアウトの制御"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"When using REST Assured in your test, the connection and response timeouts are set to 30 seconds.\n"
"You can override this setting with the `quarkus.http.test-timeout` property:"
msgstr "テストで REST Assured を使用する場合、接続と応答のタイムアウトは 30 秒に設定されます。この設定は `quarkus.http.test-timeout`  プロパティーでオーバーライドできます:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Injecting a URI"
msgstr "URI の挿入"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"It is also possible to directly inject the URL into the test which can make is easy to use a different client. This is\n"
"done via the `@TestHTTPResource` annotation."
msgstr "URLをテストに直接注入することも可能で、別のクライアントを使用するのが簡単になります。これは `@TestHTTPResource`  アノテーションで行います。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Let's write a simple test that shows this off to load some static resources. First create a simple HTML file in\n"
"`src/main/resources/META-INF/resources/index.html` :"
msgstr "静的なリソースをロードするための簡単なテストを書いてみましょう。まず、シンプルなHTMLファイルを `src/main/resources/META-INF/resources/index.html` に作成します:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "We will create a simple test to ensure that this is being served correctly:"
msgstr "これが正しく提供されているかどうかを確認するための簡単なテストを作成します:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This annotation allows you to directly inject the URL of the Quarkus instance, the value of the annotation will be the path component of the URL"
msgstr "このアノテーションを使用すると、QuarkusインスタンスのURLを直接注入することができます。アノテーションの値は、URLのパス部分になります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "For now `@TestHTTPResource` allows you to inject `URI`, `URL` and `String` representations of the URL."
msgstr "今のところ `@TestHTTPResource`  では、URL の `URI` , `URL` , `String`  表現を注入することができます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing a specific endpoint"
msgstr "特定のエンドポイントのテスト"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Both RESTassured and `@TestHTTPResource` allow you to specify the endpoint class you are testing rather than hard coding\n"
"a path. This currently supports both Jakarta REST endpoints, Servlets and Reactive Routes. This makes it a lot easier to see exactly which endpoints\n"
"a given test is testing."
msgstr "RESTassuredと `@TestHTTPResource` の両方が、パスをハードコーディングするのではなく、テストするエンドポイントクラスを指定することをサポートしています。現在、Jakarta RESTエンドポイント、Servlet、Reactive Routesの両方をサポートしています。これにより、あるテストがどのエンドポイントをテストしているのかを正確に把握することが非常に容易になります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "For the purposes of these examples I am going to assume we have an endpoint that looks like the following:"
msgstr "これらの例では、以下のようなエンドポイントを想定しています:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"This currently does not support the `@ApplicationPath()` annotation to set the Jakarta REST context path. Use the\n"
"`quarkus.resteasy.path` config value instead if you want a custom context path."
msgstr "現在、Jakarta RESTのコンテキストパスを設定するための `@ApplicationPath()` アノテーションをサポートしていません。カスタムコンテキストパスが必要な場合は、代わりに `quarkus.resteasy.path` の設定値を使用してください。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "TestHTTPResource"
msgstr "テストHTTPリソース"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"You can the use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation to specify the endpoint path, and the path\n"
"will be extracted from the provided endpoint. If you also specify a value for the `TestHTTPResource` endpoint it will\n"
"be appended to the end of the endpoint path."
msgstr "`io.quarkus.test.common.http.TestHTTPEndpoint`  アノテーションを使用してエンドポイントのパスを指定することが出来、指定されたエンドポイントからパスが抽出されます。 `TestHTTPResource`  エンドポイントにも値を指定すると、エンドポイントパスの最後に追加されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Because `GreetingResource` is annotated with `@Path(\"/hello\")` the injected URL\n"
"will end with `/hello`."
msgstr "`GreetingResource`  は `@Path(\"/hello\")`  とアノテーションされているので、注入された URL は `/hello`  で終わります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "RESTassured"
msgstr "RESTassured"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"To control the RESTassured base path (i.e. the default path that serves as the root for every\n"
"request) you can use the `io.quarkus.test.common.http.TestHTTPEndpoint` annotation. This can\n"
"be applied at the class or method level. To test out greeting resource we would do:"
msgstr "RESTassured ベースパス (すなわち、すべてのリクエストのルートとなるデフォルトパス) を制御するには、 `io.quarkus.test.common.http.TestHTTPEndpoint`  アノテーションを使用できます。これはクラスやメソッドレベルで適用できます。グリーティングリソースをテストするには、以下のようにします:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This tells RESTAssured to prefix all requests with `/hello`."
msgstr "これにより、RESTAssured はすべてのリクエストの前に `/hello` を付けます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Note we don't need to specify a path here, as `/hello` is the default for this test"
msgstr "このテストでは `/hello`  がデフォルトなので、ここでパスを指定する必要はないことに注意してください。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Injection into tests"
msgstr "テストへの注入"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"So far we have only covered integration style tests that test the app via HTTP endpoints, but what if we want to do unit\n"
"testing and test our beans directly?"
msgstr "これまでは、HTTP エンドポイントを介してアプリをテストする統合スタイルのテストしか取り上げてきませんでしたが、ユニットテストを行い、Beanを直接テストしたい場合はどうでしょうか?"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus supports this by allowing you to inject CDI beans into your tests via the `@Inject` annotation (in fact, tests in\n"
"Quarkus are full CDI beans, so you can use all CDI functionality). Let's create a simple test that tests the greeting\n"
"service directly without using HTTP:"
msgstr "Quarkusでは、 `@Inject`  アノテーションを介してテストにCDI Beanを注入できるようにすることで、これをサポートしています(実際、Quarkusのテストは完全なCDI Beanなので、すべてのCDI機能を使用することができます)。HTTPを使用せずにグリーティングサービスを直接テストするシンプルなテストを作成してみましょう。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `GreetingService` bean will be injected into the test"
msgstr "`GreetingService`  Beanがテストに注入されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "If you want to inject/test a `@SessionScoped` bean then it's very likely that the session context is not active and you would receive the `ContextNotActiveException` when a method of the injected bean is invoked. However, it's possible to use the `@io.quarkus.test.ActivateSessionContext` interceptor binding to activate the session context for a specific business method. Please read the javadoc for futher limitations."
msgstr "`@SessionScoped` Bean を注入/テストする場合、セッションコンテキストがアクティブではない可能性が高く、注入された Bean のメソッドが呼び出されたときに `ContextNotActiveException` を受け取ることになります。ただし、 `@io.quarkus.test.ActivateSessionContext` インターセプターバインディングを使用して、特定のビジネスメソッドのセッションコンテキストをアクティブ化することは可能です。その他の制限については、javadoc を参照してください。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Applying Interceptors to Tests"
msgstr "テストへのインターセプターの適用"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"As mentioned above Quarkus tests are actually full CDI beans, and as such you can apply CDI interceptors as you would\n"
"normally. As an example, if you want a test method to run within the context of a transaction you can simply apply the\n"
"`@Transactional` annotation to the method and the transaction interceptor will handle it."
msgstr "前述したように、Quarkusのテストは実際には完全なCDI Beanであり、通常のようにCDIインターセプターを適用することができます。例えば、トランザクションのコンテキスト内でテストメソッドを実行したい場合、 `@Transactional`  アノテーションをメソッドに適用するだけで、トランザクションインターセプターがそれを処理します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"In addition to this you can also create your own test stereotypes. For example, we could create a `@TransactionalQuarkusTest`\n"
"as follows:"
msgstr "これに加えて、独自のテストステレオタイプを作成することもできます。例えば、以下のように `@TransactionalQuarkusTest` を作成することができます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"If we then apply this annotation to a test class it will act as if we had applied both the `@QuarkusTest` and\n"
"`@Transactional` annotations, e.g.:"
msgstr "このアノテーションをテストクラスに適用すると、 `@QuarkusTest`  と `@Transactional`  の両方のアノテーションを適用したかのように動作します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Tests and Transactions"
msgstr "テストとトランザクション"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"You can use the standard Quarkus `@Transactional` annotation on tests, but this means that the changes your\n"
"test makes to the database will be persistent. If you want any changes made to be rolled back at the end of\n"
"the test you can use the `io.quarkus.test.TestTransaction` annotation. This will run the test method in a\n"
"transaction, but roll it back once the test method is complete to revert any database changes."
msgstr "テストでは標準のQuarkus `@Transactional`  アノテーションを使用することができますが、これは、テストでデータベースに加えた変更が永続化されることを意味します。テストの終了時に変更をロールバックしたい場合は、 `io.quarkus.test.TestTransaction`  アノテーションを使用することができます。これは、トランザクション内でテストメソッドを実行しますが、テストメソッドが完了したらロールバックして、データベースの変更を元に戻します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Enrichment via QuarkusTest*Callback"
msgstr "QuarkusTest* コールバックによる強化"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Alternatively or additionally to an interceptor, you can enrich *all* your `@QuarkusTest` classes by implementing the following callback interfaces:"
msgstr "インターセプターの代わりに、あるいはインターセプターに加えて、以下のコールバックインターフェースを実装することで、 *すべての* `@QuarkusTest` クラスを充実させることができます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeClassCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestBeforeClassCallback`"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestAfterConstructCallback`"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback`"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestBeforeTestExecutionCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestBeforeTestExecutionCallback`"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterTestExecutionCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestAfterTestExecutionCallback`"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`"
msgstr "`io.quarkus.test.junit.callback.QuarkusTestAfterEachCallback`"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Optionally, you can enable these callbacks also for the `@QuarkusIntegrationTest` tests if the property `quarkus.test.enable-callbacks-for-integration-tests` is `true`."
msgstr "オプションとして、プロパティ `quarkus.test.enable-callbacks-for-integration-tests` を `true` とすることで、これらのコールバックを `@QuarkusIntegrationTest` テストでも有効にすることができます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Such a callback implementation has to be registered as a \"service provider\" as defined by `java.util.ServiceLoader`."
msgstr "このようなコールバックの実装は、 `java.util.ServiceLoader`  で定義されている「サービスプロバイダ」として登録する必要があります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "E.g. the following sample callback:"
msgstr "例えば、以下のようなサンプルコールバックです:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "has to be registered via `src/main/resources/META-INF/services/io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback` as follows:"
msgstr "次のように、 `src/main/resources/META-INF/services/io.quarkus.test.junit.callback.QuarkusTestBeforeEachCallback` を介して登録する必要があります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "It is possible to read annotations from the test class or method to control what the callback shall be doing."
msgstr "テストクラスやメソッドからアノテーションを読み込んで、コールバックが何をするかを制御することができます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing Different Profiles"
msgstr "異なるプロファイルのテスト"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"So far in all our examples we only start Quarkus once for all tests. Before the first test is run Quarkus will boot,\n"
"then all tests will run, then Quarkus will shut down at the end. This makes for a very fast testing experience however\n"
"it is a bit limited as you can't test different configurations."
msgstr "これまでの例では、すべてのテストで Quarkus を 1 回だけ起動しました。最初のテストが実行される前に Quarkus が起動し、その後すべてのテストが実行され、最後に Quarkus がシャットダウンされます。これにより、非常に高速なテストが可能になりますが、様々な設定をテストすることができないため、少し制限されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"To get around this Quarkus supports the idea of a test profile. If a test has a different profile to the previously\n"
"run test then Quarkus will be shut down and started with the new profile before running the tests. This is obviously\n"
"a bit slower, as it adds a shutdown/startup cycle to the test time, but gives a great deal of flexibility."
msgstr "この問題を回避するために、Quarkusはテストプロファイルの考え方をサポートしています。以前に実行したテストとは異なるプロファイルを持つテストがある場合、Quarkusはテストを実行する前にシャットダウンされ、新しいプロファイルで開始されます。これは、テスト時間にシャットダウン/起動サイクルが追加されるため、明らかに少し遅くなりますが、非常に大きな柔軟性が得られます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"To reduce the amount of times Quarkus needs to restart, `io.quarkus.test.junit.util.QuarkusTestProfileAwareClassOrderer`\n"
"is registered as a global `ClassOrderer` as described in the\n"
"link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order-classes[JUnit 5 User Guide].\n"
"The behavior of this `ClassOrderer` is configurable via `application.properties` using the property\n"
"`quarkus.test.class-orderer`. The property accepts the FQCN of the `ClassOrderer` to use. If the class cannot be found,\n"
"it fallbacks to JUnit default behaviour which does not set a `ClassOrderer` at all. It can also be disabled entirely by\n"
"setting another `ClassOrderer` that is provided by JUnit 5 or even your own custom one."
msgstr ""
"Quarkus の再起動回数を減らすために、 `io.quarkus.test.junit.util.QuarkusTestProfileAwareClassOrderer`\n"
"は、link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order-classes[JUnit 5 ユーザーガイド] に記載\n"
"されているように、グローバル `ClassOrderer` として登録されます。\n"
"この `ClassOrderer` の動作は、 `quarkus.test.class-orderer` プロパティーを使用して `application.properties` 経由で設定できます。\n"
"このプロパティーは、使用する `ClassOrderer` の FQCN を受け入れます。クラスが見つからない場合は、\n"
"JUnit のデフォルトの動作にフォールバックし、 `ClassOrderer` をまったく設定しません。また、JUnit 5 が提供する別の `ClassOrderer` や、独自のカスタム ClassOrderer を設定することで、完全に無効にすることもできます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Writing a Profile"
msgstr "プロフィールの書き方"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "To implement a test profile we need to implement `io.quarkus.test.junit.QuarkusTestProfile`:"
msgstr "テスト プロファイルを実装するには、 `io.quarkus.test.junit.QuarkusTestProfile` を実装する必要があります:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "All these methods have default implementations so just override the ones you need to override."
msgstr "これらのメソッドにはすべてデフォルトの実装があるため、オーバーライドが必要なメソッドのみオーバーライドします。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "If a test profile implementation declares a CDI bean (via producer method/field or nested static class) then this bean is only taken into account if the test profile is used, i.e. it's ignored for any other test profile."
msgstr "テストプロファイルの実装で CDI Bean が宣言されている場合 (プロデューサーメソッド/フィールドまたはネストされた静的クラス経由)、この Bean はテストプロファイルが使用されている場合にのみ考慮され、他のテストプロファイルでは無視されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Now we have defined our profile we need to include it on our test class.\n"
"We do this by annotating the test class with `@TestProfile(MockGreetingProfile.class)`."
msgstr "これでプロファイルを定義したので、それをテストクラスに含める必要があります。そのためには、テストクラスに `@TestProfile(MockGreetingProfile.class)` アノテーションを付けます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"All the test profile configuration is stored in a single class, which makes it easy to tell if the previous test ran with the\n"
"same configuration."
msgstr "テストプロファイルの設定はすべて単一のクラスに保存されているので、前回のテストが同じ設定で実行されたかどうかが簡単にわかります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Running specific tests"
msgstr "特定のテストの実行"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus provides the ability to limit test execution to tests with specific  `@TestProfile` annotations.\n"
"This works by leveraging the `tags` method of `QuarkusTestProfile` in conjunction with the `quarkus.test.profile.tags` system property."
msgstr "Quarkus は、テストの実行を特定の `@TestProfile` アノテーションを持つテストに制限できます。これは、 `QuarkusTestProfile` の `tags` メソッドを `quarkus.test.profile.tags` システムプロパティーと組み合わせて利用することで機能します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Essentially, any `QuarkusTestProfile` with at least one matching tag matching the value of `quarkus.test.profile.tags` will be considered active\n"
"and all the tests annotated with `@TestProfile` of active profiles, will be run while the rest will be skipped.\n"
"This is best shown in the following example."
msgstr "基本的に、 `quarkus.test.profile.tags` の値と一致するタグが少なくとも 1 つある `QuarkusTestProfile` はアクティブであると見なされ、アクティブなプロファイルの `@TestProfile` でアノテーションが付けられたすべてのテストが実行されますが、それ以外はスキップされます。以下は、その典型的な例です。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "First let's define a few `QuarkusTestProfile` implementations like so:"
msgstr "まず、次のようないくつかの `QuarkusTestProfile` 実装を定義しましょう。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Now let's assume that we have the following tests:"
msgstr "ここで、次のテストがあると仮定します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Let's consider the following scenarios:"
msgstr "次のシナリオを考えてみましょう。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`quarkus.test.profile.tags` is not set: All tests will be executed."
msgstr "`quarkus.test.profile.tags` が設定されていない: すべてのテストが実行されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=foo`: In this case none of tests will be executed because none of the tags defined on the `QuarkusTestProfile` implementations match the value of `quarkus.test.profile.tags`.\n"
"Note that `NoQuarkusProfileTest` is not executed either because it is not annotated with `@TestProfile`."
msgstr "`quarkus.test.profile.tags=foo`: この場合、 `QuarkusTestProfile` 実装で定義されたタグはいずれも `quarkus.test.profile.tags` の値と一致しないため、テストは実行されません。 `@TestProfile` でアノテーションが付けられていないため、 `NoQuarkusProfileTest` も実行されないことに注意してください。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=test1`: In this case `SingleTagTest` and `MultipleTagsTest` will be run because the tags on their respective `QuarkusTestProfile` implementations\n"
"match the value of `quarkus.test.profile.tags`."
msgstr "`quarkus.test.profile.tags=test1`: この場合、それぞれの `QuarkusTestProfile` 実装のタグが `quarkus.test.profile.tags` の値と一致するため、 `SingleTagTest` と `MultipleTagsTest` が実行されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`quarkus.test.profile.tags=test1,test3`: This case results in the same tests being executed as the previous case."
msgstr "`quarkus.test.profile.tags=test1,test3`: この場合、前の場合と同じテストが実行されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`quarkus.test.profile.tags=test2,test3`: In this case only `MultipleTagsTest` will be run because `MultipleTagsTest` is the only `QuarkusTestProfile` implementation whose `tags` method\n"
"matches the value of `quarkus.test.profile.tags`."
msgstr "`quarkus.test.profile.tags=test2,test3`: この場合、 `MultipleTagsTest` は、 `tags` メソッドが `quarkus.test.profile.tags` の値と一致する唯一の `QuarkusTestProfile` 実装であるため、 `MultipleTagsTest` のみ実行されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Nested Tests"
msgstr "ネストしたテスト"

#: _versions/3.27/guides/getting-started-testing.adoc
#, fuzzy
msgid ""
"JUnit 5 https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested[@Nested tests] are useful for structuring more complex test scenarios.\n"
"However, note that it is not possible to assign different test profiles or resources to nested tests within the same parent class."
msgstr "JUnit 5 link:https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested[@入れ子になったテストは] 、より複雑なテストシナリオを作成するのに便利です。しかし、同じ親クラス内で入れ子になったテストに異なるテストプロファイルやリソースを割り当てることはできないことに注意しましょう。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Mock Support"
msgstr "モックサポート"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus supports the use of mock objects using two different approaches. You can either use CDI alternatives to\n"
"mock out a bean for all test classes, or use `QuarkusMock` to mock out beans on a per test basis."
msgstr "Quarkusでは、2つの異なるアプローチを使用したモックオブジェクトの使用をサポートしています。CDIの代替品を使用してすべてのテストクラスのBeanをモックアウトするか、 `QuarkusMock`  を使用してテストごとにBeanをモックアウトすることができます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "CDI `@Alternative` mechanism."
msgstr "CDI `@Alternative`  メカニズム"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"To use this simply override the bean you wish to mock with a class in the `src/test/java` directory, and put the `@Alternative` and `@Priority(1)` annotations on the bean.\n"
"Alternatively, a convenient `io.quarkus.test.Mock` stereotype annotation could be used.\n"
"This built-in stereotype declares `@Alternative`, `@Priority(1)` and `@Dependent`.\n"
"For example if I have the following service:"
msgstr "これを使用するには、 `src/test/java`  ディレクトリーのクラスでモックしたいBeanをオーバーライドし、 `@Alternative`  と `@Priority(1)`  アノテーションをBeanに配置するだけです。あるいは、便利な `io.quarkus.test.Mock`  ステレオタイプアノテーションを使用することもできます。この組み込みステレオタイプは、 `@Alternative`  、 `@Priority(1)`  、 `@Dependent`  を宣言します。例えば、以下のようなサービスがあるとします:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "I could mock it with the following class in `src/test/java`:"
msgstr "`src/test/java`  で以下のクラスでモックできました:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Overrides the `@Dependent` scope declared on the `@Mock` stereotype."
msgstr "`@Mock`  ステレオタイプで宣言された `@Dependent`  スコープをオーバーライドします。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"It is important that the alternative be present in the `src/test/java` directory rather than `src/main/java`, as otherwise\n"
"it will take effect all the time, not just when testing."
msgstr "代替品が `src/main/java`  ではなく `src/test/java`  ディレクトリーに存在することが重要です。そうでなければ、テスト以外も常に有効になってしまいます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Note that at present this approach does not work with native image testing, as this would require the test alternatives\n"
"to be baked into the native image."
msgstr "現時点では、このアプローチはネイティブイメージテストでは機能しないことに注意してください。これには、代替テストをネイティブイメージに焼き付ける必要があるためです。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Mocking using QuarkusMock"
msgstr "QuarkusMock を使用したモッキング"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"The `io.quarkus.test.junit.QuarkusMock` class can be used to temporarily mock out any normal scoped\n"
"bean. If you use this method in a `@BeforeAll` method the mock will take effect for all tests on the current class,\n"
"while if you use this in a test method the mock will only take effect for the duration of the current test."
msgstr "`io.quarkus.test.junit.QuarkusMock`  クラスは、通常のスコープ付きBeanを一時的にモックアウトするために使用することができます。 `@BeforeAll`  メソッドでこのメソッドを使用した場合、モックは現在のクラスのすべてのテストに対して有効になりますが、test メソッドでこれを使用した場合、モックは現在のテストの間のみ有効になります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"This method can be used for any normal scoped CDI bean (e.g. `@ApplicationScoped`, `@RequestScoped` etc, basically\n"
"every scope except `@Singleton` and `@Dependent`)."
msgstr "この方法は、通常のスコープ付き CDI Bean(例: `@ApplicationScoped` , `@RequestScoped`  など、 `@Singleton`  と `@Dependent`  以外の基本的にすべてのスコープ)に対して使用することができます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "An example usage could look like:"
msgstr "使用例は次のようになります:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "As the injected instance is not available here we use `installMockForType`, this mock is used for both test methods"
msgstr "インジェクションされたインスタンスはここでは利用できないので、 `installMockForType` を使用します。このモックは両方のテストメソッドに使用されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "We use `installMockForInstance` to replace the injected bean, this takes effect for the duration of the test method."
msgstr "私たちは `installMockForInstance`  を使用して注入されたBeanを置き換えます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Note that there is no dependency on Mockito, you can use any mocking library you like, or even manually override the\n"
"objects to provide the behaviour you require."
msgstr "Mockitoには依存しないことに注意してください。好きなモッキングライブラリを使うことができますし、必要な動作を提供するためにオブジェクトを手動でオーバーライドすることもできます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Using `@Inject` will get you a CDI proxy to the mock instance you install, which is not suitable for passing to methods such as `Mockito.verify`\n"
"which want the mock instance itself.\n"
"So if you need to call methods such as `verify` you should hang on to the mock instance in your test, or use `@io.quarkus.test.InjectMock`."
msgstr ""
"`@Inject` を使用すると、インストールしたモックインスタンスへの CDI プロキシーが取得されますが、これは `Mockito.verify` などのメソッドに渡すのには適していません。\n"
"これらのメソッドはモックインスタンスそのものを要求するためです。\n"
"したがって、 `verify` などのメソッドを呼び出す必要がある場合は、テストでモックインスタンスを保持するか、 `@io.quarkus.test.InjectMock` を使用する必要があります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Further simplification with `@InjectMock`"
msgstr "`@InjectMock` での更なる単純化"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Building on the features provided by `QuarkusMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for mocking the beans supported by `QuarkusMock`."
msgstr "`QuarkusMock` が提供する機能を基に構築されている Quarkus では、ユーザーが link:https://site.mockito.org/[Mockito] を簡単に利用して、 `QuarkusMock` でサポートされている Bean をモックすることもできます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This functionality is available with the `@io.quarkus.test.InjectMock` annotation **only if** the `quarkus-junit5-mockito` dependency is present:"
msgstr "この機能は、 `quarkus-junit5-mockito` 依存関係が存在する場合にのみ、 `@io.quarkus.test.InjectMock` アノテーションで利用できます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Using `@InjectMock`, the previous example could be written as follows:"
msgstr "`@InjectMock`  を使用すると、先ほどの例は次のように書くことができます:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`@InjectMock` results in a Mockito mock being created, which is then available in test methods of the test class (other test classes are *not* affected by this)"
msgstr "`@InjectMock` を使用すると、Mockitoのモックが作成され、テストクラスのテストメソッドで利用できるようになります（他のテストクラスはこの影響を *受けません* ）。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `mockableBean1` is configured here for every test method of the class"
msgstr "クラスのすべてのテストメソッドに対して `mockableBean1`  が設定されています。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Since the `mockableBean2` mock has not been configured, it will return the default Mockito response."
msgstr "`mockableBean2`  のモックが設定されていないので、デフォルトの Mockito レスポンスを返します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "In this test the `mockableBean2` is configured, so it returns the configured response."
msgstr "このテストでは、 `mockableBean2`  が設定されているので、設定されたレスポンスを返します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Although the test above is good for showing the capabilities of `@InjectMock`, it is not a good representation of a real test. In a real test\n"
"we would most likely configure a mock, but then test a bean that uses the mocked bean.\n"
"Here is an example:"
msgstr "上のテストは `@InjectMock`  の機能を示すのには良いですが、実際のテストを上手く表してはいません。実際のテストでは、ほとんどの場合、モックを設定し、モックされたBeanを使用するBeanをテストします。以下に例を示します:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Since we configured `greetingService` as a mock, the `GreetingResource` which uses the `GreetingService` bean, we get the mocked response instead of the response of the regular `GreetingService` bean"
msgstr "`greetingService`  をモックとして設定したので、 `GreetingService`  Beanを使用する `GreetingResource`  は、通常の `GreetingService` Beanのレスポンスの代わりにモックされたレスポンスを取得します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"By default, the `@InjectMock` annotation can be used for any normal CDI scoped bean (e.g. `@ApplicationScoped`, `@RequestScoped`).\n"
"Mocking `@Singleton` beans can be performed by adding the `@MockitoConfig(convertScopes = true)` annotation.\n"
"This will convert the `@Singleton` bean to an `@ApplicationScoped` bean for the test."
msgstr ""
"デフォルトでは、 `@InjectMock` アノテーションは、通常の CDI スコープ Bean (例: `@ApplicationScoped`、 `@RequestScoped`) に使用できます。\n"
"`@Singleton` Bean のモック化は、 `@MockitoConfig(convertScopes = true)` アノテーションを追加することで実行できます。\n"
"これにより、テストのために `@Singleton` Bean が `@ApplicationScoped` Bean に変換されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This is considered an advanced option and should only be performed if you fully understand the consequences of changing the scope of the bean."
msgstr "これは高度なオプションと見なされ、Bean のスコープを変更することで引き起こされる結果を完全に理解している場合にのみ実行する必要があります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Using Spies instead of Mocks with `@InjectSpy`"
msgstr " `@InjectSpy` で、モックの代わりにスパイを使用する"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Building on the features provided by `InjectMock`, Quarkus also allows users to effortlessly take advantage of link:https://site.mockito.org/[Mockito] for spying on the beans supported by `QuarkusMock`.\n"
"This functionality is available via the `@io.quarkus.test.junit.mockito.InjectSpy` annotation which is available in the `quarkus-junit5-mockito` dependency."
msgstr "`InjectMock`  で提供されている機能をベースに、 `QuarkusMock`  でサポートされているBeanをスパイするために link:https://site.mockito.org/[Mockito ]を簡単に利用できるようにしました。この機能は、 `quarkus-junit5-mockito`  依存関係で利用可能な `@io.quarkus.test.junit.mockito.InjectSpy`  アノテーションを介して利用できます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Sometimes when testing you only need to verify that a certain logical path was taken, or you only need to stub out a single method's response while still executing the rest of the methods on the Spied clone. Please see link:https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#13[Mockito documentation - Spying on real objects] for more details on Spy partial mocks.\n"
"In either of those situations a Spy of the object is preferable.\n"
"Using `@InjectSpy`, the previous example could be written as follows:"
msgstr "テストの際に、特定の論理パスが通ったことを確認するだけでよい場合や、Spyされたクローン上の残りのメソッドを実行したまま、単一のメソッドのレスポンスをスタブアウトするだけでよい場合があります。Spy部分モックの詳細については、 link:https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#13[Mockitoドキュメント - Spying on real objects] を参照してください。いずれの場合も、オブジェクトのSpyを使用することが望ましいです。 `@InjectSpy` を使うと、先ほどの例は次のように書くことができます:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Instead of overriding the value, we just want to ensure that the greet method on our `GreetingService` was called by this test."
msgstr "値をオーバーライドするのではなく、 `GreetingService`  の greet メソッドがこのテストで呼び出されたことを確認したいだけです。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Here we are telling the Spy to return \"hi\" instead of \"hello\". When the `GreetingResource` requests the greeting from `GreetingService` we get the mocked response instead of the response of the regular `GreetingService` bean. Sometimes it's impossible or impractical to use `when(Object)` for stubbing spies. Therefore when using spies please consider `doReturn|Answer|Throw()` family of methods for stubbing."
msgstr "ここでは、Spyに \"hello \"の代わりに \"hi \"を返すように指示しています。 `GreetingResource` が `GreetingService` に挨拶を要求すると、通常の `GreetingService` Bean の応答の代わりに、モックされた応答が返ってきます。スパイをスタブするために `when(Object)` を使用することが不可能であったり、現実的でなかったりすることがあります。したがって、spyを使用する場合は、スタブ用のメソッドである `doReturn|Answer|Throw()` ファミリーを検討してください。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "We are verifying that we get the mocked response from the Spy."
msgstr "私たちは、スパイからのモックされた応答を得ることを検証しています。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Using `@InjectMock` with `@RestClient`"
msgstr "`@InjectMock`  との併用 `@RestClient`"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `@RegisterRestClient` registers the implementation of the REST Client at runtime, and because the bean needs to be a regular scope, you have to annotate your interface with `@ApplicationScoped`."
msgstr "`@RegisterRestClient` は、ランタイムに REST Client の実装を登録します。Beanは通常のスコープである必要があるため、インターフェイスに `@ApplicationScoped` アノテーションを付ける必要があります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "For the test class here is an example:"
msgstr "テストクラスの例です:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Indicate that this injection point is meant to use an instance of `RestClient`."
msgstr "この注入ポイントが `RestClient`  のインスタンスを使用することを意味していることを示します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Mocking with Panache"
msgstr "Mocking with Panache"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "If you are using the `quarkus-hibernate-orm-panache` or `quarkus-mongodb-panache` extensions, check out the xref:hibernate-orm-panache.adoc#mocking[Hibernate ORM with Panache Mocking] and xref:mongodb-panache.adoc#mocking[MongoDB with Panache Mocking] documentation for the easiest way to mock your data access."
msgstr "`quarkus-hibernate-orm-panache`  や `quarkus-mongodb-panache` のエクステンションを使っている場合は、xref:hibernate-orm-panache.adoc#mocking[Hibernate ORM と Panache モック] および xref:mongodb-panache.adoc#mocking[MongoDB と Panache モック ]のドキュメントをチェックして、データアクセスをモックする最も簡単な方法を確認してください。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing Security"
msgstr "セキュリティーのテスト"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "If you are using Quarkus Security, check out the xref:security-testing.adoc[Testing Security] section for information on how to easily test security features of the application."
msgstr "Quarkus Securityを使用している場合、アプリケーションのセキュリティー機能を簡単にテストする方法については、xref:security-testing.adoc[セキュリティーのテスト] のセクションをご覧ください。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Starting services before the Quarkus application starts"
msgstr "Quarkus アプリケーションの開始前にサービスを開始する"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "A very common need is to start some services on which your Quarkus application depends, before the Quarkus application starts for testing. To address this need, Quarkus provides `@io.quarkus.test.common.QuarkusTestResource` and `io.quarkus.test.common.QuarkusTestResourceLifecycleManager`."
msgstr "非常に一般的なニーズとして、Quarkus アプリケーションをテスト用に起動する前に、Quarkus アプリケーションが依存するいくつかのサービスを起動することが挙げられます。このニーズに対応するために、Quarkusでは、 `@io.quarkus.test.common.QuarkusTestResource`  と `io.quarkus.test.common.QuarkusTestResourceLifecycleManager` を提供します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"By simply annotating any test in the test suite with `@QuarkusTestResource`, Quarkus will run the corresponding `QuarkusTestResourceLifecycleManager` before any tests are run.\n"
"A test suite is also free to utilize multiple `@QuarkusTestResource` annotations, in which case all the corresponding `QuarkusTestResourceLifecycleManager` objects will be run before the tests."
msgstr ""
"テストスイート内の任意のテストに `@QuarkusTestResource` というアノテーションを付けるだけで、Quarkus はテストが実行される前に、対応する `QuarkusTestResourceLifecycleManager` を実行します。\n"
"テストスイートでは、複数の `@QuarkusTestResource` アノテーションを自由に利用することもできます。その場合、対応するすべての `QuarkusTestResourceLifecycleManager` オブジェクトがテストの前に実行されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Test resources are global, even if they are defined on a test class or custom profile, which means they will all be activated for all tests, even though we do\n"
"remove duplicates. If you want to only enable a test resource on a single test class or test profile, you can use `@QuarkusTestResource(restrictToAnnotatedClass = true)`."
msgstr "テストリソースは、テストクラスまたはカスタムプロファイルで定義されている場合でもグローバルです。つまり、重複を削除しても、すべてのテストですべてアクティブになります。単一のテストクラスまたはテストプロファイルに限定してテストリソースを有効にする場合は、 `@QuarkusTestResource(restrictToAnnotatedClass = true)` を使用できます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "When using multiple test resources, they can be started concurrently. For that you need to set `@QuarkusTestResource(parallel = true)`."
msgstr "複数のテストリソースを使用する場合、それらを同時に開始できます。そのためには、 `@QuarkusTestResource(parallel = true)` を設定する必要があります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus provides a few implementations of `QuarkusTestResourceLifecycleManager` out of the box (see `io.quarkus.test.h2.H2DatabaseTestResource` which starts an H2 database, or `io.quarkus.test.kubernetes.client.KubernetesServerTestResource` which starts a mock Kubernetes API server),\n"
"but it is common to create custom implementations to address specific application needs.\n"
"Common cases include starting docker containers using https://www.testcontainers.org/[Testcontainers] (an example of which can be found https://github.com/quarkusio/quarkus/blob/main/test-framework/keycloak-server/src/main/java/io/quarkus/test/keycloak/server/KeycloakTestResourceLifecycleManager.java[here]),\n"
"or starting a mock HTTP server using https://wiremock.org/[Wiremock] (an example of which can be found https://github.com/geoand/quarkus-test-demo/blob/main/src/test/java/org/acme/getting/started/country/WiremockCountries.java[here])."
msgstr "Quarkusでは、 `QuarkusTestResourceLifecycleManager` の実装がいくつか提供されていますが (H2 データベースを起動する `io.quarkus.test.h2.H2DatabaseTestResource` や、モック Kubernetes API サーバーを起動する `io.quarkus.test.kubernetes.client.KubernetesServerTestResource` を参照)、特定のアプリケーションのニーズに対応するためにカスタム実装を作成するのが一般的です。一般的なケースとしては、link:https://www.testcontainers.org/[Testcontainers] を使用した docker コンテナーの起動 (その例は https://github.com/quarkusio/quarkus/blob/main/test-framework/keycloak-server/src/main/java/io/quarkus/test/keycloak/server/KeycloakTestResourceLifecycleManager.java[こちら] を参照)、link:https://wiremock.org/[Wiremock] を使用したモック HTTP サーバの起動 (その例は link:https://github.com/geoand/quarkus-test-demo/blob/master/src/test/java/org/acme/getting/started/country/WiremockCountries.java[こちら] を参照) などがあります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "As `QuarkusTestResourceLifecycleManager` is not a CDI Bean, classes that implement it can't have fields injected with `@Inject`. You can use `String propertyName = ConfigProvider.getConfig().getValue(\"quarkus.my-config-group.myconfig\", String.class);`"
msgstr "`QuarkusTestResourceLifecycleManager` は CDI Bean ではないため、これを実装するクラスには `@Inject` で注入されたフィールドを含めることはできません。 `String propertyName = ConfigProvider.getConfig().getValue(\"quarkus.my-config-group.myconfig\", String.class);` を使用できます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Altering the test class"
msgstr "テストクラスの変更"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"When creating a custom `QuarkusTestResourceLifecycleManager` that needs to inject something into the test class, the `inject` methods can be used.\n"
"If for example you have a test like the following:"
msgstr ""
"テストクラスに何かを注入する必要があるカスタムの `QuarkusTestResourceLifecycleManager` を作成する場合、 `inject` メソッドを使用できます。\n"
"たとえば、次のようなテストがある場合などです。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Making `MyWireMockResource` inject the `wireMockServer` field can be done as shown in the `inject` method of the following code snippet:"
msgstr "次のコードスニペットの `inject` メソッドに示すように、 `MyWireMockResource` に `wireMockServer` フィールドを注入させることができます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"It is worth mentioning that this injection into the test class is not under the control of CDI and happens after CDI has performed\n"
"any necessary injections into the test class."
msgstr "テストクラスへのこの注入は CDI の制御下になく、CDI がテストクラスへの必要な注入を実行した後に発生することは言及に値します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Annotation-based test resources"
msgstr "アノテーションベースのテストリソース"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"It is possible to write test resources that are enabled and configured using annotations. This is enabled by placing the `@QuarkusTestResource`\n"
"on an annotation which will be used to enable and configure the test resource."
msgstr "アノテーションを使用して有効化および設定されたテストリソースを作成することができます。これは、テストリソースの有効化と設定に使用されるアノテーション に `@QuarkusTestResource` を配置することで可能になります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"For example, this defines the `@WithKubernetesTestServer` annotation, which you can use on your tests to activate the `KubernetesServerTestResource`,\n"
"but only for the annotated test class. You can also place them on your `QuarkusTestProfile` test profiles."
msgstr "たとえば、これは `@WithKubernetesTestServer` アノテーションを定義します。これは、テストで `KubernetesServerTestResource` をアクティブ化するために使用できますが、アノテーションが付けられたテストクラスに限定されます。これは `QuarkusTestProfile` テストプロファイルに配置することもできます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"The `KubernetesServerTestResource` class has to implement the\n"
"`QuarkusTestResourceConfigurableLifecycleManager` interface in order to be configured using the previous annotation:"
msgstr "`KubernetesServerTestResource` クラスは、前のアノテーションを使用して設定するために、 `QuarkusTestResourceConfigurableLifecycleManager` インターフェイスを実装する必要があります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"If you want to make the annotation repeatable, the containing annotation type must be annotated with `@QuarkusTestResourceRepeatable`.\n"
"For example, this would define a repeatable `@WithRepeatableTestResource` annotation."
msgstr "アノテーションを繰り返し使えるようにするには、包含するアノテーション型に `@QuarkusTestResourceRepeatable` を付ける必要があります。例えば、この場合、繰り返し使える `@WithRepeatableTestResource` アノテーションを定義することになります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Usage of `@WithTestResource`"
msgstr "`@WithTestResource` の使用法"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"While test resources provided by `@QuarkusTestResource` are available either globally or restricted to the annotated test class (`restrictToAnnotatedClass`), the annotation `@WithTestResource` allows to additionally group tests by test resources for execution.\n"
"`@WithTestResource` has a `scope` property that takes a `TestResourceScope` enum value:"
msgstr ""
"`@QuarkusTestResource` によって提供されるテストリソースは、グローバルに使用できるか、またはアノテーション付きテストクラス (`restrictToAnnotatedClass`) に制限されますが、アノテーション `@WithTestResource` を使用すると、実行用にテストリソース別にテストをさらにグループ化できます。\n"
"`@WithTestResource` には、 `TestResourceScope` 列挙値を取る `scope` プロパティーがあります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`TestResourceScope.MATCHING_RESOURCES` (default): Quarkus will group tests with the same test resources and run them together. After a group has been executed, all test resources will be stopped, and the next group will be executed."
msgstr "`TestResourceScope.MATCHING_RESOURCES` (デフォルト): Quarkus は同じテストリソースを持つテストをグループ化し、まとめてに実行します。グループが実行されると、すべてのテストリソースが停止され、次のグループが実行されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`TestResourceScope.RESTRICTED_TO_CLASS`: The test resource is available only for the annotated test class and will be stopped after the test class has been executed."
msgstr "`TestResourceScope.RESTRICTED_TO_CLASS`: テストリソースは、アノテーションが付けられたテストクラスでのみ使用でき、テストクラスが実行されると停止されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`TestResourceScope.GLOBAL`: Test resources apply to all tests in the test suite"
msgstr "`TestResourceScope.GLOBAL`: テストリソースはテストスイート内のすべてのテストに適用されます"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Quarkus needs to restart if one of the following is true:"
msgstr "次のいずれかに該当する場合は、Quarkus を再起動する必要があります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "At least one of the test resources of the current test is restricted to the test class"
msgstr "現在のテストのテストリソースの少なくとも 1 つが、テストクラスに制限されている"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "At least one of the test resources of the next test is restricted to the test class"
msgstr "次のテストのテストリソースの少なくとも 1 つが、テストクラスに制限されている"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Different `MATCHING_RESOURCES` scoped test resources are being used"
msgstr "異なる `MATCHING_RESOURCES` スコープのテストリソースが使用されている"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Hang Detection"
msgstr "ハング検出"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusTest` has support for hang detection to help diagnose any unexpected hangs. If no progress is made for a specified\n"
"time (i.e. no JUnit callbacks are invoked) then Quarkus will print a stack trace to the console to help diagnose the hang.\n"
"The default value for this timeout is 10 minutes."
msgstr "`@QuarkusTest` は、予期しないハングを診断するために使用できるハング検出をサポートしています。指定された時間内に進捗がない場合 (つまり、JUnit コールバックが呼び出されない場合)、Quarkus はスタックトレースをコンソールに出力して、ハングの診断を助けます。このタイムアウトのデフォルト値は 10 分です。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"No further action will be taken, and the tests will continue as normal (generally until CI times out), however the printed\n"
"stack traces should help diagnose why the build has failed. You can control this timeout with the\n"
"`quarkus.test.hang-detection-timeout` system property (you can also set this in application.properties, but this won't\n"
"be read until Quarkus has started, so the timeout for Quarkus start will be the default of 10 minutes)."
msgstr "これ以上のアクションは実行されず、テストは通常どおり (通常は CI がタイムアウトするまで) 続行されますが、出力されたスタックトレースは、ビルドが失敗した理由を診断するのに役立ちます。このタイムアウトは、 `quarkus.test.hang-detection-timeout` システムプロパティーで制御できます (これは application.properties でも設定できますが、Quarkus が起動するまで読み取られないため、Quarkus の起動タイムアウトはデフォルトの 10 分です)。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Native Executable Testing"
msgstr "ネイティブ実行可能ファイルテスト"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"It is also possible to test native executables using `@QuarkusIntegrationTest`. This supports all the features mentioned in this\n"
"guide except injecting into tests (and the native executable runs in a separate non-JVM process this is not really possible)."
msgstr "`@QuarkusIntegrationTest` を使用してネイティブ実行可能ファイルをテストすることも可能です。これは、テストに注入すること (そして、ネイティブ実行可能ファイルは別の非 JVM プロセスで実行されることーこれは実際には可能ではありません) を除いて、このガイドで述べたすべての機能をサポートしています。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This is covered in the xref:building-native-image.adoc[Native Executable Guide]."
msgstr "これについては、xref:building-native-image.adoc[ネイティブ実行可能ファイルガイド] で説明されています。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Using `@QuarkusIntegrationTest`"
msgstr "Using `@QuarkusIntegrationTest`"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusIntegrationTest` should be used to launch and test the artifact produced by the Quarkus build, and supports testing a jar (of whichever type), a native image or container image.\n"
"Put simply, this means that if the result of a Quarkus build (`mvn package` or `gradle build`) is a jar, that jar will be launched as `java -jar ...` and tests run against it.\n"
"If instead a native image was built, then the application is launched as `./application ...` and again the tests run against the running application.\n"
"Finally, if a container image was created during the build (by including the `quarkus-container-image-jib`, `quarkus-container-image-docker`, or `container-image-podman` extensions and having the\n"
"`quarkus.container-image.build=true` property configured), then a container is created and run (this requires the `docker` or `podman` executable being present)."
msgstr ""
"`@QuarkusIntegrationTest` は、Quarkus ビルドによって生成されたアーティファクトを起動およびテストするために使用する必要があり、jar (タイプを問わず)、ネイティブイメージ、またはコンテナーイメージのテストをサポートします。\n"
"簡単に言えば、Quarkus ビルド (`mvn package` または `gradle build`) の結果が jar である場合、その jar は `java -jar ...` として起動され、それに対して実行がテストされることを意味します。\n"
"代わりにネイティブイメージがビルドされた場合、アプリケーションは `./application ...` として起動され、実行中のアプリケーションに対して実行がテストされます。\n"
"最後に、ビルド中に (`quarkus-container-image-jib`、 `quarkus-container-image-docker` または `container-image-podman` エクステンションを含め、 `quarkus.container-image.build=true` プロパティーを設定することで) コンテナーイメージが作成された場合、コンテナーが作成されて実行されます (これには、 `docker` または `podman` の実行可能ファイルが存在する必要があります)。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This is a black box test that supports the same set features and has the same limitations."
msgstr "これは、同じ機能セットをサポートし、同じ制限を持つブラックボックステストです。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"As a test annotated with `@QuarkusIntegrationTest` tests the result of the build, it should be run as part of the integration test suite - i.e. by setting `-DskipITs=false` if using Maven or the `quarkusIntTest` task if using Gradle.\n"
"These tests will **not** work if run in the same phase as `@QuarkusTest` as Quarkus has not yet created the final artifact."
msgstr "`@QuarkusIntegrationTest` でアノテーションが付けられたテストはビルドの結果をテストするため、統合テストスイートの一部として実行する必要があります。 - 例えば、Maven を使用している場合は `-DskipITs=false` を設定し、Gradle を使用している場合は `quarkusIntTest` タスクを設定します。これらのテストは、Quarkus がまだ最終のアーティファクトを作成していないため、 `@QuarkusTest` と同じフェーズで実行すると **機能しません**。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `pom.xml` file contains:"
msgstr "`pom.xml` ファイルには以下が含まれます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "This instructs the failsafe-maven-plugin to run integration-test."
msgstr "これは、failsafe-maven-plugin に統合テストを実行するように指示します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Then, open the `src/test/java/org/acme/quickstart/GreetingResourceIT.java`. It contains:"
msgstr "次に、 `src/test/java/org/acme/quickstart/GreetingResourceIT.java` を開きます。次の内容が含まれています:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Use another test runner that starts the application from the native file before the tests.\n"
"The executable is retrieved by the _Failsafe Maven Plugin_."
msgstr "テストの前にネイティブファイルからアプリケーションを起動する別のテストランナーを使用します。実行可能ファイルは、_Failsafe Maven Plugin_ によって取得されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "We extend our previous tests as a convenience, but you can also implement your tests."
msgstr "便宜上、以前のテストを拡張していますが、独自のテストを実装することもできます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "More information can be found in the link:building-native-image#testing-the-native-executable[Testing the native executable Guide]."
msgstr "詳細については、次のリンクを参照してください:  building-native-image#testing-the-native-executable[ネイティブ実行可能ファイルのテストのガイド]"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "When the application is tested using `@QuarkusIntegrationTest` it is launched using the `prod` configuration profile, but this can be changed using the `quarkus.test.integration-test-profile` property."
msgstr "`@QuarkusIntegrationTest` を使ってアプリケーションをテストすると、 `prod` の設定プロファイルを使って起動しますが、これは `quarkus.test.integration-test-profile` プロパティを使って変更することができます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"While adding test-specific configuration properties using `src/test/resources/application.properties` (note there's `test`, not `main`)\n"
"is possible for unit tests, it's not possible for integration tests."
msgstr ""
"`src/test/resources/application.properties` を使用してテスト固有の設定プロパティーを追加する際 (`main` ではなく `test` があることに注意)、\n"
"ユニットテストは可能ですが、インテグレーションテストは不可能です。"

#: _versions/3.27/guides/getting-started-testing.adoc
#, fuzzy
msgid "Debugging `@QuarkusIntegrationTest`"
msgstr "デバッグ `@QuarkusIntegrationTest`"

#: _versions/3.27/guides/getting-started-testing.adoc
#, fuzzy
msgid ""
"Debugging a failed `@QuarkusInterationTest` is trickier than debugging a `@QuarkusTest` because the Quarkus application\n"
"is launched as a separate process."
msgstr "Quarkusアプリケーションは別のプロセスとして起動されるため、失敗した `@QuarkusInterationTest` のデバッグは、 `@QuarkusTest` のデバッグよりも厄介です。"

#: _versions/3.27/guides/getting-started-testing.adoc
#, fuzzy
msgid ""
"The test code itself can be easily debugged with any of the well known methods (like launching the test from the IDE, adding `-Dmaven.failsafe.debug` if the test is launched via Maven, etc.),\n"
"but the application under test needs to have the necessary flags passed to it via `quarkus.test.arg-line` to enable debugging. For testing an application\n"
"packaged as *jar*, you can use:"
msgstr "テストコード自体は、よく知られた方法 (IDE からテストを起動する、Maven 経由でテストを起動する場合、 `-Dmaven.failsafe.debug` を追加する、など) で簡単にデバッグできますが、テスト対象のアプリケーションは、デバッグを可能にするために `quarkus.test.arg-line` 経由で必要なフラグを渡す必要があります。 *jarとして* パッケージ化されたアプリケーションをテストするために、あなたは使うことができます："

#: _versions/3.27/guides/getting-started-testing.adoc
#, fuzzy
msgid "as an argument to Maven/Gradle when launching the test. This will make the application wait until a remote JVM debugger is connected to port `5005`."
msgstr "をテスト起動時にMaven/Gradleに引数として渡します。これは、リモートJVMデバッガがポート `5005` に接続されるまで、アプリケーションを待機させます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Launching containers"
msgstr "コンテナーの起動"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"When `@QuarkusIntegrationTest` results in launching a container (because the application was built with `quarkus.container-image.build` set to `true`), the container is launched on a predictable container network. This facilitates writing integration tests that need to launch services to support the application.\n"
"This means that `@QuarkusIntegrationTest` works out of the box with containers launched via xref:dev-services.adoc[Dev Services], but it also means that it enables using <<quarkus-test-resource,QuarkusTestLifecycleManager>> resources that launch additional containers.\n"
"This can be achieved by having your `QuarkusTestLifecycleManager` implement `io.quarkus.test.common.DevServicesContext.ContextAware`. A simple example could be the following:"
msgstr "`@QuarkusIntegrationTest` によってコンテナーが起動されると (アプリケーションは `quarkus.container-image.build` が `true` に設定されているため)、コンテナーは予測可能なコンテナーネットワーク上で起動されます。これにより、アプリケーションをサポートするためにサービスを起動する必要がある統合テストの作成が容易になります。これは、 `@QuarkusIntegrationTest` が、xref:dev-services.adoc[Dev Services] を介して起動されたコンテナーでそのまま機能することを意味しますが、追加のコンテナーを起動する <<quarkus-test-resource,QuarkusTestLifecycleManager>> リソースを使用して有効化することも意味します。これは、 `QuarkusTestLifecycleManager` に `io.quarkus.test.common.DevServicesContext.ContextAware` を実装することで実現できます。以下は、その簡単な例です。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"The container running the resource to test against, for example PostgreSQL via Testcontainers, is assigned an IP address from the container's network.\n"
"Use the container's \"public\" IP from its network and the \"unmapped\" port number to connect to the service.\n"
"The Testcontainers library usually return connection strings without respecting the container network, so additional code is needed to provide Quarkus the \"correct\" connection string using the container's IP on the container network and the _unmapped_ port number."
msgstr "テストするリソースを実行しているコンテナー (たとえば Testcontainers を介した PostgreSQL) には、コンテナーのネットワークから IP アドレスが割り当てられます。コンテナーのネットワークからの「パブリック」IP と「マップされていない」ポート番号を使用してサービスに接続します。Testcontainers ライブラリーは通常、コンテナーネットワークを尊重せずに接続文字列を返すため、コンテナーネットワーク上のコンテナーの IP と_マップされていない_ポート番号を使用して Quarkus に正しい接続文字列を提供するには、追加のコードが必要です。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The following example illustrates the use with PostgreSQL, but the approach is applicable to all containers."
msgstr "次の例は PostgreSQL での使用法を示していますが、このアプローチはすべてのコンテナーに適用できます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`CustomResource` would be activated on a `@QuarkusIntegrationTest` using `@QuarkusTestResource` as is described in the corresponding section of this doc."
msgstr "このドキュメントの対応するセクションで説明されているように、 `CustomResource` は `@QuarkusTestResource` を使用して `@QuarkusIntegrationTest` でアクティブ化されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Executing against a running application"
msgstr "実行中のアプリケーションに対する実行"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`@QuarkusIntegrationTest` supports executing tests against an already running instance of the application. This can be achieved by setting the\n"
"`quarkus.http.test-host` system property when running the tests."
msgstr "`@QuarkusIntegrationTest` は、アプリケーションのすでに実行中のインスタンスに対するテストの実行をサポートします。これは、テストの実行時に `quarkus.http.test-host` システムプロパティーを設定することで実現できます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "An example use of this could be the following Maven command, that forces `@QuarkusIntegrationTest` to execute against that is accessible at `http://1.2.3.4:4321`:"
msgstr "次の Maven コマンドはその使用例で、 `@QuarkusIntegrationTest` を強制的に実行し、 `http://1.2.3.4:4321` からアクセスできます。"

#: _versions/3.27/guides/getting-started-testing.adoc
#, fuzzy
msgid "To test against a running instance that only accepts SSL/TLS connection (example: `https://1.2.3.4:4321`) set the system property `quarkus.http.test-ssl-enabled` to `true` and `quarkus.http.test-ssl-port` to the target HTTPS port."
msgstr "SSL/TLS接続のみを受け付ける実行中のインスタンスに対してテストするには（例： `https://1.2.3.4:4321` ) システム・プロパティ `quarkus.http.test-ssl-enabled` を `true` に、 `quarkus.http.test-ssl-port` をターゲットの HTTPS ポートに設定します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Mixing `@QuarkusTest` with other type of tests"
msgstr "`@QuarkusTest` と他のタイプのテストを混合"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Mixing tests annotated with `@QuarkusTest` with tests annotated with either `@QuarkusDevModeTest`, `@QuarkusProdModeTest` or `@QuarkusUnitTest`\n"
"is not allowed in a single execution run (in a single Maven Surefire Plugin execution, for instance),\n"
"while the latter three can coexist."
msgstr "`@QuarkusTest` でアノテーションが付けられたテストと、 `@QuarkusDevModeTest`、 `@QuarkusProdModeTest`、 `@QuarkusUnitTest` のいずれかでアノテーションが付けられたテストを、1 回の実行 (たとえば、1 回の Maven Surefire プラグインの実行) で混合することはできません。ただし、後者の 3 つは共存できます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"The reason of this restriction is that `@QuarkusTest` starts a Quarkus server for the whole lifetime of the tests execution run,\n"
"thus preventing the other tests to start their own Quarkus server."
msgstr "この制限の理由は、 `@QuarkusTest` がテスト実行の期間全体にわたって Quarkus サーバーを起動するため、他のテストが独自の Quarkus サーバーを起動できないようにするためです。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"To alleviate this restriction, the `@QuarkusTest` annotation defines a JUnit 5 `@Tag`: `io.quarkus.test.junit.QuarkusTest`.\n"
"You can use this tag to isolate the `@QuarkusTest` test in a specific execution run, for example with the Maven Surefire Plugin:"
msgstr "この制限を緩和するために、 `@QuarkusTest` アノテーションは JUnit5 `@Tag` を定義します: `io.quarkus.test.junit.QuarkusTest` 。このタグを使用して、特定の実行 で `@QuarkusTest` テストを分離できます。以下は Maven Surefire プラグインを使用した例です。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Currently `@QuarkusTest` and `@QuarkusIntegrationTest` should not be run in the same test run."
msgstr "現在、 `@QuarkusTest` と `@QuarkusIntegrationTest` を同じテストランで実行しないでください。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "For Maven, this means that the former should be run by the surefire plugin while the latter should be run by the failsafe plugin."
msgstr "Maven の場合、前者は surefire プラグインによって、後者は failsafe プラグインによって実行される必要があることを意味します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "For Gradle, this means the two types of tests should belong to different source sets."
msgstr "Gradle の場合、これは 2 種類のテストが異なるソースセットに属する必要があることを意味します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Source set configuration example"
msgstr "ソースセットの設定例"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Running `@QuarkusTest` from an IDE"
msgstr "IDE から `@QuarkusTest`  を実行する"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Most IDEs offer the possibility to run a selected class as a JUnit test directly. For this you should set a few properties in the settings of your chosen IDE:"
msgstr "ほとんどの IDE では、選択したクラスを JUnit テストとして直接実行できるようになっています。そのためには、選択した IDE の設定でいくつかのプロパティーを設定する必要があります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`java.util.logging.manager` (see xref:logging.adoc[Logging Guide])"
msgstr "`java.util.logging.manager` (xref:logging.adoc[ロギングガイド] を参照)"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`maven.home` (only if there are any custom settings in `${maven.home}/conf/settings.xml`, see xref:maven-tooling.adoc[Maven Guide])"
msgstr "`maven.home` (`${maven.home}/conf/settings.xml` にカスタム設定がある場合のみ)、xref:maven-tooling.adoc[Maven Guide] を参照)"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`maven.settings` (in case a custom version of `settings.xml` file should be used for the tests)"
msgstr "`maven.settings`  (カスタム版の `settings.xml`  ファイルをテストに使用する場合)"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Eclipse separate JRE definition"
msgstr "Eclipse の別個の JRE 定義"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Copy your current \"Installed JRE\" definition into a new one, where you will add the properties as a new VM arguments:"
msgstr "現在の\"Installed JRE\"定義を新しい定義にコピーし、新しいVMの引数としてプロパティーを追加します:"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`-Djava.util.logging.manager=org.jboss.logmanager.LogManager`"
msgstr "`-Djava.util.logging.manager=org.jboss.logmanager.LogManager`"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`-Dmaven.home=<path-to-your-maven-installation>`"
msgstr "`-Dmaven.home=&amp;lt;path-to-your-maven-installation>`"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Use this JRE definition as your Quarkus project targeted runtime and the workaround will be applied to any \"Run as JUnit\" configuration."
msgstr "このJRE定義をQuarkusプロジェクトのターゲットランタイムとして使用すると、「Run as JUnit」設定に回避策が適用されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "VSCode \"run with\" configuration"
msgstr "VSCode \"run with\" 設定"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `settings.json` placed in the root of your project directory or in the workspace will need the following workaround in your test configuration:"
msgstr "プロジェクトディレクトリーやワークスペースのルートにある `settings.json` には、テスト設定で次の回避策が必要です。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "IntelliJ IDEA JUnit template"
msgstr "IntelliJ IDEA JUnit テンプレート"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Nothing needed in IntelliJ IDEA because the IDE will pick the `systemPropertyVariables` from the surefire plugin configuration in `pom.xml`."
msgstr "IntelliJ IDEA では何も必要ありません。なぜなら、IDEは `systemPropertyVariables` を `pom.xml` の surefire プラグイン設定から取得するからです。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing Dev Services"
msgstr "開発サービスのテスト"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"By default, tests should just work with xref:dev-services.adoc[Dev Services], however from some use cases you may need access to\n"
"the automatically configured properties in your tests."
msgstr "デフォルトでは、テストは xref:dev-services.adoc[Dev Services] でのみ機能するはずですが、一部のユースケースでは、テストで自動的に設定されたプロパティーにアクセスする必要がある場合があります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"You can do this with `io.quarkus.test.common.DevServicesContext`, which can be injected directly into any `@QuarkusTest`\n"
"or `@QuarkusIntegrationTest`. All you need to do is define a field of type `DevServicesContext` and it will be automatically\n"
"injected. Using this you can retrieve any properties that have been set. Generally this is used to directly connect to a\n"
"resource from the test itself, e.g. to connect to kafka to send messages to the application under test."
msgstr "これは、 `@QuarkusTest` または `@QuarkusIntegrationTest` に直接注入できる `io.quarkus.test.common.DevServicesContext` を使用して行うことができます。タイプ `DevServicesContext` のフィールドを定義するだけで、自動的に注入されます。これを使用して、設定されている任意のプロパティーを取得できます。通常、これは、テスト自体からリソースに直接接続するために使用されます。たとえば、kafka に接続して、テスト対象のアプリケーションにメッセージを送信するために使用されます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Injection is also supported into objects that implement `io.quarkus.test.common.DevServicesContext.ContextAware`. If you\n"
"have a field that implements `io.quarkus.test.common.DevServicesContext.ContextAware` Quarkus will call the\n"
"`setIntegrationTestContext` method to pass the context into this object. This allows client logic to be encapsulated in\n"
"a utility class."
msgstr "`io.quarkus.test.common.DevServicesContext.ContextAware` を実装するオブジェクトへの注入もサポートされています。 `io.quarkus.test.common.DevServicesContext.ContextAware` を実装するフィールドがある場合、Quarkus は ` setIntegrationTestContext` メソッドを呼び出して、コンテキストをこのオブジェクトに渡します。これにより、クライアントロジックをユーティリティークラスにカプセル化できます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"`QuarkusTestResourceLifecycleManager` implementations can also implement `ContextAware` to get access to these properties,\n"
"which allows you to set up the resource before Quarkus starts (e.g. configure a KeyCloak instance, add data to a database etc)."
msgstr "`QuarkusTestResourceLifecycleManager` 実装は、 `ContextAware` を実装してこれらのプロパティーにアクセスすることもできます。これにより、Quarkus が起動する前にリソースを設定できます (たとえば、KeyCloak インスタンスの設定、データベースへのデータの追加など)。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"For `@QuarkusIntegrationTest` tests that result in launcher the application as a container, `io.quarkus.test.common.DevServicesContext` also provides access to the id of the container network on which the application container was launched (via the `containerNetworkId` method).\n"
"This can be used by `QuarkusTestResourceLifecycleManager` that need to launch additional containers that the application will communicate with."
msgstr "アプリケーションをコンテナーとしてランチャーにする `@QuarkusIntegrationTest` テストの場合、 `io.quarkus.test.common.DevServicesContext` は、アプリケーションコンテナーが起動されたコンテナーネットワークの ID へのアクセスも提供します (`containerNetworkId` メソッドを使用)。これは、アプリケーションが通信する追加のコンテナーを起動する必要がある `QuarkusTestResourceLifecycleManager` で使用できます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Testing Components"
msgstr "コンポーネントのテスト"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid ""
"Quarkus provides the `QuarkusComponentTestExtension`, a JUnit extension to ease the testing of components and mocking of their dependencies.\n"
"This JUnit extension is available in the `quarkus-junit5-component` dependency."
msgstr ""
"Quarkus は、コンポーネントのテストと依存関係のモック作成を容易にする JUnit エクステンションである `QuarkusComponentTestExtension` を提供します。\n"
"この JUnit エクステンションは、 `quarkus-junit5-component` 依存関係で利用できます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Let's have a component `Foo` - a CDI bean with two injection points."
msgstr "2 つの注入ポイントを持つ CDI Bean であるコンポーネント `Foo` があるとします。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`Foo` component"
msgstr "`Foo` コンポーネント"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`Foo` is an `@ApplicationScoped` CDI bean."
msgstr "`Foo` は `@ApplicationScoped` CDI Bean です。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`Foo` depends on `Charlie` which declares a method `ping()`."
msgstr "`Foo` は、メソッド `ping()` を宣言する `Charlie` に依存します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "`Foo` depends on the config property `bar`. `@Inject` is not needed for this injection point because it also declares a CDI qualifier - this is a Quarkus-specific feature."
msgstr "`Foo` は設定プロパティー `bar` に依存します。 `@Inject` は CDI 修飾子も宣言するため、この注入ポイントには必要ありません。これは Quarkus 固有の機能です。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Then a component test could look like:"
msgstr "この場合、コンポーネントテストは次のようになります。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Simple component test"
msgstr "シンプルなコンポーネントテスト"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The `QuarkusComponentTest` annotation registers the JUnit extension."
msgstr "`QuarkusComponentTest` アノテーションは JUnit エクステンションを登録します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "Sets a configuration property for the test."
msgstr "テストの設定プロパティーを設定します。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The test injects the component under the test. The types of all fields annotated with `@Inject` are considered the component types under test. You can also specify additional component classes via `@QuarkusComponentTest#value()`. Furthermore, the static nested classes declared on the test class are components too."
msgstr "このテストはテスト対象のコンポーネントを注入します。 `@Inject` でアノテーションが付けられたすべてのフィールドの型が、テスト対象のコンポーネント型とみなされます。 `@QuarkusComponentTest#value()` を使用して追加のコンポーネントクラスを指定することもできます。さらに、テストクラスで宣言された静的ネストクラスもコンポーネントです。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "The test also injects a mock for `Charlie`. `Charlie` is an _unsatisfied_ dependency for which a synthetic `@Singleton` bean is registered automatically. The injected reference is an \"unconfigured\" Mockito mock."
msgstr "このテストは `Charlie` のモックも挿入します。 `Charlie` は、 `@Singleton` 合成 Bean が自動的に登録される、_満たされていない_ 依存関係です。挿入される参照は、\"未設定\" の Mockito モックです。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "We can leverage the Mockito API in a test method to configure the behavior."
msgstr "テストメソッドで Mockito API を活用して動作を設定できます。"

#: _versions/3.27/guides/getting-started-testing.adoc
msgid "You can find more examples and hints in the xref:testing-components.adoc[testing components reference guide]."
msgstr "さらに多くの例とヒントについては、 xref:testing-components.adoc[テストコンポーネントリファレンスガイド] を参照してください。"
