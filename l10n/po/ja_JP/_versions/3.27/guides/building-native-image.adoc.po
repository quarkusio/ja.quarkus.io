msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/building-native-image.adoc
msgid "Building a Native Executable"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "This guide covers:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Compiling the application to a native executable"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Packaging the native executable in a container"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Debugging native executable"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "This guide takes as input the application developed in the xref:getting-started.adoc[Getting Started Guide]."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Prerequisites"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "A xref:configuring-c-development[working C development environment]"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The code of the application developed in the xref:getting-started.adoc[Getting Started Guide]."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Supporting native compilation in C"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "What does having a working C developer environment mean?"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "On Linux, you will need GCC, and the glibc and zlib headers. Examples for common distributions:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "XCode provides the required dependencies on macOS:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "On Windows, you will need to install the https://aka.ms/vs/17/release/vs_buildtools.exe[Visual Studio 2022 Visual C++ Build Tools]"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Background"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Building a native executable requires using a distribution of GraalVM.\n"
"There are three distributions:\n"
"Oracle GraalVM Community Edition (CE), Oracle GraalVM Enterprise Edition (EE) and Mandrel.\n"
"The differences between the Oracle and Mandrel distributions are as follows:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Mandrel is a downstream distribution of the Oracle GraalVM CE.\n"
"Mandrel's main goal is to provide a way to build native executables specifically designed to support Quarkus."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Mandrel releases are built from a code base derived from the upstream Oracle GraalVM CE code base,\n"
"with only minor changes but some significant exclusions that are not necessary for Quarkus native apps.\n"
"They support the same capabilities to build native executables as Oracle GraalVM CE,\n"
"with no significant changes to functionality.\n"
"Notably, they do not include support for polyglot programming.\n"
"The reason for these exclusions is to provide a better level of support for the majority of Quarkus users.\n"
"These exclusions also mean Mandrel offers a considerable reduction in its distribution size\n"
"when compared with Oracle GraalVM CE/EE."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Mandrel is built slightly differently to Oracle GraalVM CE, using the standard OpenJDK project.\n"
"This means that it does not profit from a few small enhancements that Oracle have added to the version of OpenJDK used to build their own GraalVM downloads.\n"
"These enhancements are omitted because upstream OpenJDK does not manage them, and cannot vouch for.\n"
"This is particularly important when it comes to conformance and security."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Mandrel is recommended for building native executables that target Linux containerized environments.\n"
"This means that Mandrel users are encouraged to use containers to build their native executables.\n"
"If you are building native executables for macOS on amd64/x86,\n"
"you should consider using Oracle GraalVM instead,\n"
"because Mandrel does not currently target this platform.\n"
"Building native executables directly on bare metal Linux, macOS (on M processors), or Windows is possible,\n"
"with details available in the https://github.com/graalvm/mandrel/blob/default/README.md[Mandrel README]\n"
"and https://github.com/graalvm/mandrel/releases[Mandrel releases]."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Configuring GraalVM"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"This step is only required for generating native executables targeting non-Linux operating systems.\n"
"For generating native executables targeting Linux, you can optionally skip this section and <<#container-runtime,use a builder image>> instead."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"If you cannot install GraalVM, you can use a multi-stage Docker build to run Maven inside a Docker container that embeds GraalVM.\n"
"There is an explanation of how to do this at <<#multistage-docker,the end of this guide>>."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "GraalVM {graalvm-version} is required."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Install GraalVM if you haven't already. You have a few options for this:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Download the appropriate archive from <https://github.com/graalvm/mandrel/releases> or <https://github.com/graalvm/graalvm-ce-builds/releases>, and unpack it like you would any other JDK."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Use platform-specific installer tools like https://sdkman.io/jdks#graalce[sdkman], https://github.com/graalvm/homebrew-tap[homebrew], or https://github.com/ScoopInstaller/Java[scoop].\n"
"We recommend the _community edition_ of GraalVM. For example, install it with `sdk install java 21-graalce`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Configure the runtime environment. Set `GRAALVM_HOME` environment variable to the GraalVM installation directory, for example:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "On macOS (amd64/x86 based Macs not supported), point the variable to the `Home` sub-directory:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "On Windows, you will have to go through the Control Panel to set your environment variables."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Installing via scoop will do this for you."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "(Optional) Set the `JAVA_HOME` environment variable to the GraalVM installation directory."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "(Optional) Add the GraalVM `bin` directory to the path"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Issues using GraalVM with macOS"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "GraalVM binaries are not (yet) notarized for macOS as reported in this https://github.com/oracle/graal/issues/1724[GraalVM issue]. This means that you may see the following error when using `native-image`:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Use the following command to recursively delete the `com.apple.quarantine` extended attribute on the GraalVM install directory as a workaround:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "We recommend that you follow the instructions in the next sections and package the application step by step. However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The solution is located in the `getting-started` directory."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Producing a native executable"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The native executable for our application will contain the application code, required libraries, Java APIs, and a reduced version of a VM. The smaller VM base improves the startup time of the application and produces a minimal disk footprint."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "image:native-executable-process.png[Creating a native executable]"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "If you have generated the application from the previous tutorial, you can find in the `pom.xml` the following Maven profile section:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"You can provide custom options for the `native-image` command using the `quarkus.native.additional-build-args` and `quarkus.native.additional-build-args-append` properties.\n"
"Multiple options may be separated by a comma."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "By convention `quarkus.native.additional-build-args-append` is meant to be defined at the command line (e.g. `-Dquarkus.native.additional-build-args-append=--verbose`), while `quarkus.native.additional-build-args` may be defined either at the command line or in your `application.properties`. Note that, any arguments included in `quarkus.native.additional-build-args-append` may override those included in `quarkus.native.additional-build-args`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "You can find more information about how to configure the native image building process in the <<configuration-reference>> section below."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"We use a profile because, you will see very soon, packaging the native executable takes a _few_ minutes. You could\n"
"just pass -Dquarkus.native.enabled=true as a property on the command line, however it is better to use a profile as\n"
"this allows native image tests to also be run."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Create a native executable using:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Issues with packaging on Windows"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"The Microsoft Native Tools for Visual Studio must first be initialized before packaging.\n"
"You can do this by starting the `x64 Native Tools Command Prompt` that was installed with the Visual Studio Build Tools.\n"
"At the `x64 Native Tools Command Prompt`, you can navigate to your project folder and run `./mvnw package -Dnative`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Another solution is to write a script to do this for you:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"In addition to the regular files, the build also produces `target/getting-started-1.0.0-SNAPSHOT-runner`.\n"
"You can run it using: `./target/getting-started-1.0.0-SNAPSHOT-runner`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Java preview features"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Java code that relies on preview features requires special attention.\n"
"To produce a native executable, this means that the `--enable-preview` flag needs to be passed to the underlying native image invocation.\n"
"You can do so by prepending the flag with `-J` and passing it as additional native build argument: `-Dquarkus.native.additional-build-args=-J--enable-preview`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Build fully static native executables"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Fully static native executables support is experimental."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"On Linux it's possible to package a native executable that doesn't depend on any system shared library.\n"
"There are link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/guides/build-static-executables/#prerequisites-and-preparation[some system requirements] to be fulfilled and additional build arguments to be used along with the `native-image` invocation, a minimum is `-Dquarkus.native.additional-build-args=\"--static\",\"--libc=musl\"`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Compiling fully static binaries is done by statically linking https://musl.libc.org/[musl] instead of `glibc` and should not be used in production without rigorous testing."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Testing the native executable"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Producing a native executable can lead to a few issues, and so it's also a good idea to run some tests against the application running in the native file. The reasoning is explained in the link:getting-started-testing#quarkus-integration-test[Testing Guide]."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "To see the `GreetingResourceIT` run against the native executable, use `./mvnw verify -Dnative`:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"By default, Quarkus waits for 60 seconds for the native image to start before automatically failing the native tests. This\n"
"duration can be changed using the `quarkus.test.wait-time` system property. For example, to increase the duration\n"
"to 300 seconds, use: `./mvnw verify -Dnative -Dquarkus.test.wait-time=300`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"This procedure was formerly accomplished using the `@NativeImageTest` annotation. `@NativeImageTest` was replaced by `@QuarkusIntegrationTest` which provides a superset of the testing\n"
"capabilities of `@NativeImageTest`. More information about `@QuarkusIntegrationTest` can be found in the xref:getting-started-testing.adoc#quarkus-integration-test[Testing Guide]."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Profiles"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "By default, integration tests both *build* and *run* the native executable using the `prod` profile."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"You can override the profile the executable *runs* with during the test using the `quarkus.test.native-image-profile` property.\n"
"Either by adding it to `application.properties` or by appending it to the command line:\n"
"`./mvnw verify -Dnative -Dquarkus.test.native-image-profile=test`.\n"
"Your `%test.` prefixed properties will be used at the test runtime."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"You can override the profile the executable is *built* with and *runs* with using the `quarkus.profile=test` property, e.g.\n"
"`./mvnw clean verify -Dnative -Dquarkus.profile=test`. This might come handy if there are test specific resources to be processed,\n"
"such as importing test data into the database."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"With the aforementioned example in your `application.properties`, your Hibernate ORM managed database will be populated with test\n"
"data both during the JVM mode test run and during the native mode test run. The production\n"
"executable will contain only the `version.txt` resource, no superfluous test data."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"The executable built with `-Dquarkus.profile=test` is not suitable for production deployment.\n"
"It contains your test resources files and settings. Once the testing is done, the executable would have to be built again,\n"
"using the default, `prod` profile."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Alternatively, if you need to specify specific properties when running tests against the native executable\n"
"built using the `prod` profile, an option is to put those properties in file `src/test/resources/application-nativeit.yaml`, and refer to it from the `failsafe` plugin configuration using the `QUARKUS_CONFIG_LOCATIONS` environment variable. For instance:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Java code that relies on preview features requires special attention.\n"
"To test a native executable, this means that the `--enable-preview` flag needs to be passed to the Surefire plugin.\n"
"Adding `<argLine>--enable-preview</argLine>` to its `configuration` section is one way to do so."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Excluding tests when running as a native executable"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"When running tests this way, the only things that actually run natively are your application endpoints, which\n"
"you can only test via HTTP calls. Your test code does not actually run natively, so if you are testing code\n"
"that does not call your HTTP endpoints, it's probably not a good idea to run them as part of native tests."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"If you share your test class between JVM and native executions like we advise above, you can mark certain tests\n"
"with the `@DisabledOnIntegrationTest` annotation in order to skip them when testing against a native image."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Using `@DisabledOnIntegrationTest` will also disable the test in all integration test instances, including\n"
"testing the application in JVM mode, in a container image, and native image."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Testing an existing native executable"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"It is also possible to re-run the tests against a native executable that has already been built. To do this run\n"
"`./mvnw test-compile failsafe:integration-test -Dnative`. This will discover the existing native image and run the tests against it using failsafe."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"If the process cannot find the native image for some reason, or you want to test a native image that is no longer in the\n"
"target directory you can specify the executable with the `-Dnative.image.path=` system property."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Creating a Linux executable without GraalVM installed"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Before going further, be sure to have a working container runtime (Docker, podman) environment. If you use Docker\n"
"on Windows you should share your project's drive at Docker Desktop file share settings and restart Docker Desktop."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Quite often one only needs to create a native Linux executable for their Quarkus application (for example in order to run in a containerized environment) and would like to avoid\n"
"the trouble of installing the proper GraalVM version in order to accomplish this task (for example, in CI environments it's common practice\n"
"to install as little software as possible)."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"To this end, Quarkus provides a very convenient way of creating a native Linux executable by leveraging a container runtime such as Docker or podman.\n"
"The easiest way of accomplishing this task is to execute:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"By default, Quarkus automatically detects the container runtime.\n"
"If you want to explicitly select the container runtime, you can do it with:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "For Docker:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "CLI"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Maven"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Gradle"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "For podman:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"These are regular Quarkus config properties, so if you always want to build in a container\n"
"it is recommended you add these to your `application.properties` in order to avoid specifying them every time."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Executable built that way with the container runtime will be a 64-bit Linux executable, so depending on your operating system it may no longer be runnable."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Starting with Quarkus 3.19+, the _builder_ image used to build the native executable is based on UBI 9.\n"
"It means that the native executable produced by the container build will be based on UBI 9 as well.\n"
"So, if you plan to build a container, make sure that the base image in your `Dockerfile` is compatible with UBI 9.\n"
"The native executable will not run on UBI 8 base images."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"You can configure the builder image used for the container build by setting the `quarkus.native.builder-image` property.\n"
"For example to switch back to an UBI8 _builder image_ you can use:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "`quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:{mandrel-flavor}`"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"You can see the available tags for UBI8 https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[here]\n"
"and for UBI9 https://quay.io/repository/quarkus/ubi9-quarkus-mandrel-builder-image?tab=tags[here (UBI 9)])"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "If you see the following invalid path error for your application JAR when trying to create a native executable using a container build, even though your JAR was built successfully, you're most likely using a remote daemon for your container runtime."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Error: Invalid Path entry getting-started-1.0.0-SNAPSHOT-runner.jar\n"
"Caused by: java.nio.file.NoSuchFileException: /project/getting-started-1.0.0-SNAPSHOT-runner.jar"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "In this case, use the parameter `-Dquarkus.native.remote-container-build=true` instead of `-Dquarkus.native.container-build=true`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The reason for this is that the local build driver invoked through `-Dquarkus.native.container-build=true` uses volume mounts to make the JAR available in the build container, but volume mounts do not work with remote daemons. The remote container build driver copies the necessary files instead of mounting them. Note that even though the remote driver also works with local daemons, the local driver should be preferred in the local case because mounting is usually more performant than copying."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Building with GraalVM instead of Mandrel requires a custom builder image parameter to be passed additionally:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Please note that the above command points to a floating tag.\n"
"It is highly recommended to use the floating tag,\n"
"so that your builder image remains up-to-date and secure.\n"
"If you absolutely must, you may hard-code to a specific tag\n"
"(see https://quay.io/repository/quarkus/ubi-quarkus-mandrel-builder-image?tab=tags[here (UBI 8)]\n"
"and  https://quay.io/repository/quarkus/ubi9-quarkus-mandrel-builder-image?tab=tags[here (UBI 9)] for available tags),\n"
"but be aware that you won't get security updates that way and it's unsupported."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Creating a container"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Using the container-image extensions"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "By far the easiest way to create a container-image from your Quarkus application is to leverage one of the container-image extensions."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "If one of those extensions is present, then creating a container image for the native executable is essentially a matter of executing a single command:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "`quarkus.native.container-build=true` allows for creating a Linux executable without GraalVM being installed (and is only necessary if you don't have GraalVM installed locally or your local operating system is not Linux)"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "If you're running a remote Docker daemon, you need to replace `quarkus.native.container-build=true` with `quarkus.native.remote-container-build=true`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "See <<tip-quarkus-native-remote-container-build,Creating a Linux executable without GraalVM installed>> for more details."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "`quarkus.container-image.build=true` instructs Quarkus to create a container-image using the final application artifact (which is the native executable in this case)"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "See the xref:container-image.adoc[Container Image guide] for more details."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Manually using the micro base image"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"You can run the application in a container using the JAR produced by the Quarkus Maven Plugin.\n"
"However, in this section we focus on creating a container image using the produced native executable."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "image:containerization-process.png[Containerization Process]"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"When using a local GraalVM installation, the native executable targets your local operating system (Linux, macOS, Windows etc).\n"
"However, as a container may not use the same _executable_ format as the one produced by your operating system,\n"
"we will instruct the Maven build to produce an executable by leveraging a container runtime (as described in <<#container-runtime,this section>>):"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"The produced executable will be a 64-bit Linux executable, so depending on your operating system it may no longer be runnable.\n"
"However, it's not an issue as we are going to copy it to a container.\n"
"The project generation has provided a `Dockerfile.native-micro` in the `src/main/docker` directory with the following content:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Quarkus Micro Image?"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"The Quarkus Micro Image is a small container image providing the right set of dependencies to run your native application.\n"
"It is based on https://catalog.redhat.com/software/containers/ubi9-micro/61832b36dd607bfc82e66399?container-tabs=overview[UBI Micro].\n"
"This base image has been tailored to work perfectly in containers."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "You can read more about UBI images on:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "https://www.redhat.com/en/blog/introducing-red-hat-universal-base-image[Introduction to Universal Base Image]"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "https://catalog.redhat.com/software/containers/ubi9/ubi/615bcf606feffc5384e8452e[Red Hat Universal Base Image 9]"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "UBI images can be used without any limitations."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "xref:quarkus-runtime-base-image.adoc[This page] explains how to extend the `quarkus-micro` image when your application has specific requirements."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Then, if you didn't delete the generated native executable, you can build the docker image with:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "And finally, run it with:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Manually using the minimal base image"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The project generation has also provided a `Dockerfile.native` in the `src/main/docker` directory with the following content:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"The UBI minimal image is bigger than the micro one mentioned above.\n"
"It contains more utilities such as the `microdnf` package manager."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Using a multi-stage Docker build"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"The previous section showed you how to build a native executable using Maven or Gradle, but it requires you to have created the native executable first.\n"
"In addition, this native executable must be a Linux 64 bits executable."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"You may want to build the native executable directly in a container without having a final container containing the build tools.\n"
"That approach is possible with a multi-stage Docker build:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The first stage builds the native executable using Maven or Gradle"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The second stage is a minimal image copying the produced native executable"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Before building a container image from the Dockerfiles shown below, you need to update the default `.dockerignore` file, as it filters everything except the `target` directory. In order to build inside a container, you need to copy the `src` directory. Thus, edit your `.dockerignore` and remove the `*` line."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Such a multi-stage build can be achieved as follows:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Sample Dockerfile for building with Maven:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"This multi-stage Docker build copies the Maven wrapper from the host machine.\n"
"The Maven wrapper (or the Gradle wrapper) is a convenient way to provide a specific version of Maven/Gradle.\n"
"It avoids having to create a base image with Maven and Gradle.\n"
"To provision the Maven Wrapper in your project, use: `mvn wrapper:wrapper`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Save this file in `src/main/docker/Dockerfile.multistage` as it is not included in the getting started quickstart."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Sample Dockerfile for building with Gradle:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "If you are using Gradle in your project, you can use this sample Dockerfile.  Save it in `src/main/docker/Dockerfile.multistage`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "And, finally, run it with:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "If you need SSL support in your native executable, you can easily include the necessary libraries in your Docker image."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Please see xref:native-and-ssl.adoc#working-with-containers[our Using SSL With Native Executables guide] for more information."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "To use GraalVM CE instead of Mandrel, update the `FROM` clause to: `FROM quay.io/quarkus/ubi9-quarkus-graalvmce-builder-image:{graalvm-flavor} AS build`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Using a Distroless base image"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Distroless image support is experimental."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"If you are looking for small container images, the https://github.com/GoogleContainerTools/distroless[distroless] approach reduces the size of the base layer.\n"
"The idea behind _distroless_ is the usage of a single and minimal base image containing all the requirements, and sometimes even the application itself."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Quarkus provides a distroless base image that you can use in your `Dockerfile`.\n"
"You only need to copy your application, and you are done:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Quarkus provides the `quay.io/quarkus/quarkus-distroless-image:2.0` image.\n"
"It contains the required packages to run a native executable and is only **9Mb**.\n"
"Just add your application on top of this image, and you will get a tiny container image."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Distroless images should not be used in production without rigorous testing."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Build a container image from scratch"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Scratch image support is experimental."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Building fully statically linked binaries enables the usage of a https://hub.docker.com/_/scratch[scratch image] containing solely the resulting native executable."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Sample multistage Dockerfile for building an image from `scratch`:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Scratch images should not be used in production without rigorous testing."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The versions of musl and zlib may need to be updated to meet the native-image executable requirements (and UPX if you use native image compression)."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Compress native images"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Quarkus can compress the produced native executable using UPX.\n"
"More details on xref:./upx.adoc[UPX Compression documentation]."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Separating Java and native image compilation"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"In certain circumstances, you may want to build the native image in a separate step.\n"
"For example, in a CI/CD pipeline, you may want to have one step to generate the source that will be used for the native image generation and another step to use these sources to actually build the native executable.\n"
"For this use case, you can set the additional flag `quarkus.native.sources-only=true`.\n"
"This will execute the java compilation as if you had started native compilation (`-Dnative`), but stops before triggering the actual call to GraalVM's `native-image`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "After compilation has finished, you find the build artifact in `target/native-sources`:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"From the output above one can see that, in addition to the produced jar file and the associated lib directory, a text file named `native-image.args` was created.\n"
"This file holds all parameters (including the name of the JAR to compile) to pass along to GraalVM's `native-image` command.\n"
"A text file named `graalvm.version` was also created and holds the GraalVM version that should be used.\n"
"If you have GraalVM installed and it matches this version, you can start the native compilation by executing:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The process for Gradle is analogous."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Running the build process in a container is also possible:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "`-Dquarkus.native.container-build=true` will produce an additional text file named `native-builder.image` holding the docker image name to be used to build the native image."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Mount the host's directory `target/native-image` to the container's `/work`. Thus, the generated binary will also be written to this directory."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Switch the working directory to `/work`, which we have mounted in <1>."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Use the docker image from the file `native-builder.image`."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Call `native-image` with the content of file `native-image.args` as arguments. We also supply an additional argument to limit the process's maximum memory to 4 Gigabytes (this may vary depending on the project being built and the machine building it)."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"If you are running on a Windows machine, please keep in mind that the binary was created within a Linux docker container.\n"
"Hence, the binary will not be executable on the host Windows machine."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "A high level overview of what the various steps of a CI/CD pipeline would look is the following:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Register the output of the step executing `./mvnw ...` command (i.e. directory `target/native-image`) as a build artifact,"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Require this artifact in the step executing the `native-image ...` command, and"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Register the output of the step executing the `native-image ...` command (i.e. files matching `target/*runner`) as build artifact."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The environment executing step `1` only needs Java and Maven (or Gradle) installed, while the environment executing step `3` only needs a GraalVM installation (including the `native-image` feature)."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Depending on what the final desired output of the CI/CD pipeline is, the generated binary might then be used to create a container image."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Native executables can be debugged using tools such as `gdb`.\n"
"For this to be possible native executables need to be generated with debug symbols."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Debug symbol generation is only supported on Linux.\n"
"Windows support is still under development, while macOS is not supported."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"To generate debug symbols,\n"
"add `-Dquarkus.native.debug.enabled=true` flag when generating the native executable.\n"
"You will find the debug symbols for the native executable in a `.debug` file next to the native executable."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"The generation of the `.debug` file depends on `objcopy`.\n"
"As a result, when using a local GraalVM installation on common Linux distributions you will need to install the `binutils` package:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "When `objcopy` is not available debug symbols are embedded in the executable."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Aside from debug symbols,\n"
"setting `-Dquarkus.native.debug.enabled=true` flag generates a cache of source files\n"
"for any JDK runtime classes, GraalVM classes and application classes resolved during native executable generation.\n"
"This source cache is useful for native debugging tools,\n"
"to establish the link between the symbols and matching source code.\n"
"It provides a convenient way of making just the necessary sources available to the debugger/IDE when debugging a native executable."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Sources for third party jar dependencies, including Quarkus source code,\n"
"are not added to the source cache by default.\n"
"To include those, make sure you invoke `mvn dependency:sources` first.\n"
"This step is required in order to pull the sources for these dependencies,\n"
"and get them included in the source cache."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The source cache is located in the `target/sources` folder."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "If running `gdb` from a different directory than `target`, then the sources can be loaded by running:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "in the `gdb` prompt."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Or start `gdb` with:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "e.g.,"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "For a more detailed guide about debugging native images please refer to the xref:native-reference.adoc[Native Reference Guide]."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Using Monitoring Options"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"Monitoring options such as JDK flight recorder, jvmstat, heap dumps, NMT (starting with Mandrel 24.1 for JDK 23), and remote JMX\n"
"can be added to the native executable build. Simply supply a comma separated list of the monitoring options you wish to\n"
"include at build time."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Monitoring Option"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Description"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Availability As Of"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "jfr"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Include JDK Flight Recorder support"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "GraalVM CE 21.3 Mandrel 21.3"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "jvmstat"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Adds jvmstat support"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "GraalVM 22.3, GraalVM CE 17.0.7 Mandrel 22.3 Mandrel 23.0 (17.0.7)"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "heapdump"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Adds support for generating heap dumps"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "jmxclient"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Adds support for connections to JMX servers."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "GraalVM for JDK 17/20 Mandrel 23.0"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "jmxserver"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Adds support for accepting connections from JMX clients."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "GraalVM for JDK 17/20 Mandrel 23.0 (17.0.7)"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "nmt"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Adds support for native memory tracking."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "GraalVM for JDK 23 Mandrel 24.1"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "none"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Disables support for all monitoring options that would be enabled by default in Quarkus"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Pseudo option used by Quarkus"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "all"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Adds all monitoring options."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Please see the Quarkus Native Reference Guide for more detailed information on these monitoring options."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "Configuring the Native Executable"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"There are a lot of different configuration options that can affect how the native executable is generated.\n"
"These are provided in `application.properties` the same as any other config property."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "The properties are shown below:"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "What's next?"
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid ""
"This guide covered the creation of a native (binary) executable for your application.\n"
"It provides an application exhibiting a swift startup time and consuming less memory.\n"
"However, there is much more."
msgstr ""

#: _versions/3.27/guides/building-native-image.adoc
msgid "We recommend continuing the journey with the xref:deploying-to-kubernetes.adoc[deployment to Kubernetes and OpenShift]."
msgstr ""
