msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/funqy.adoc
msgid "Funqy"
msgstr "Funqy"

#: _versions/3.27/guides/funqy.adoc
msgid ""
"Quarkus Funqy is part of Quarkus's serverless strategy and aims to provide a portable Java API to write functions\n"
"deployable to various FaaS environments like AWS Lambda, Azure Functions, Google Cloud Functions, Knative, and Knative Events (Cloud Events).\n"
"It is also usable as a standalone service."
msgstr "Quarkus Funqy は、Quarkus のサーバーレス戦略の一部であり、AWS Lambda、Azure Functions、Google Cloud Functions、Knative、Knative Events（Cloud Events）などの様々な FaaS 環境にデプロイ可能なファンクションを書くためのポータブルな Java API を提供することを目的としています。また、スタンドアロンのサービスとしても使用することができます。"

#: _versions/3.27/guides/funqy.adoc
msgid ""
"Because Funqy is an abstraction that spans multiple different cloud/function providers\n"
"and protocols it has to be a very simple API and thus, might not have all the features you are used\n"
"to in other remoting abstractions.  A nice side effect though is that Funqy is as optimized and\n"
"as small as possible.  This means that because Funqy sacrifices a little on flexibility, you'll\n"
"get a framework that has little to no overhead."
msgstr "Funqy は複数の異なるクラウド、ファンクションプロバイダーやプロトコルに跨った抽象化を提供するため、その API は非常にシンプルである必要があり、ユーザーが使い慣れている他のリモーティング抽象化で提供される機能を全て備えているとは限りません。一方で、Funqy は可能な限り最適化され、かつ小さいという良い副次的効果があります。これは、Funqy は柔軟性を少し犠牲にしている分、オーバーヘッドが非常に少ないフレームワークであることを意味しています。"

#: _versions/3.27/guides/funqy.adoc
msgid "Funqy Basics"
msgstr "Funqy の基礎"

#: _versions/3.27/guides/funqy.adoc
msgid ""
"The Funqy API is simple.  Annotate a method with `@Funq`.  This method may only have one optional input parameter\n"
"and may or may not return a response."
msgstr "Funqy API はシンプルです。メソッドに `@Funq` をアノテーションします。このメソッドはオプションの入力パラメータを1つだけ持つことができ、レスポンスを返すこともあれば返さないこともあります。"

#: _versions/3.27/guides/funqy.adoc
msgid ""
"Java classes can also be used as input and output and must follow the Java bean convention and have\n"
"a default constructor.  The Java type that is declared as the parameter or return type is the type that will be\n"
"expected by the Funqy runtime.  Funqy does type introspection at build time to speed up boot time, so any derived types\n"
"will not be noticed by the Funqy marshalling layer at runtime."
msgstr "Javaクラスは入力と出力としても使用でき、Java Bean の規約に従う必要があり、デフォルトのコンストラクタを持たなければなりません。パラメータや戻り値の型として宣言されたJavaの型は、Funqyのランタイムが期待する型です。Funqyは起動時間を短縮するためにビルド時に型のイントロスペクションを行いますので、派生型は実行時にFunqyのマーシャリング層に意識されません。"

#: _versions/3.27/guides/funqy.adoc
msgid "Here's an example of using a POJO as input and output types."
msgstr "POJO を入出力タイプとして使用した例をご紹介します。"

#: _versions/3.27/guides/funqy.adoc
msgid "Async Reactive Types"
msgstr "非同期リアクティブ型"

#: _versions/3.27/guides/funqy.adoc
msgid ""
"Funqy supports the https://smallrye.io/smallrye-mutiny[SmallRye Mutiny] `Uni` reactive type as a return type.  The only requirement is that\n"
"the `Uni` must fill out the generic type."
msgstr "Funqyは link:https://smallrye.io/smallrye-mutiny[SmallRye Mutiny] `Uni` のリアクティブ型を戻り値の型としてサポートしています。唯一の条件は、 `Uni` 、ジェネリック型を記入することです。"

#: _versions/3.27/guides/funqy.adoc
msgid "Function Names"
msgstr "ファンクション名"

#: _versions/3.27/guides/funqy.adoc
msgid ""
"The function name defaults to the method name and is case-sensitive.  If you want your function referenced by a different name,\n"
"parameterize the `@Funq` annotation as follows:"
msgstr "ファンクション名のデフォルト値はメソッド名で、大文字と小文字は区別されます。ファンクションを別の名前で参照したい場合は、以下のように `@Funq` アノテーションにパラメータを記述します。"

#: _versions/3.27/guides/funqy.adoc
msgid "Funqy DI"
msgstr "Funqy DI"

#: _versions/3.27/guides/funqy.adoc
msgid ""
"Each Funqy Java class is a Quarkus Arc component and supports dependency injection through\n"
"CDI or Spring DI.  Spring DI requires including the `quarkus-spring-di` dependency in your build."
msgstr "各Funqy JavaクラスはQuarkus Arcコンポーネントであり、CDIまたはSpring DIによる依存性注入をサポートしています。Spring DIでは、ビルドに `quarkus-spring-di` 依存関係を含める必要があります。"

#: _versions/3.27/guides/funqy.adoc
msgid "The default object lifecycle for a Funqy class is `@Dependent`."
msgstr "Funqy クラスのデフォルトのオブジェクトライフサイクルは `@Dependent` です。"

#: _versions/3.27/guides/funqy.adoc
msgid "Context injection"
msgstr "コンテキスト注入"

#: _versions/3.27/guides/funqy.adoc
msgid ""
"The Funqy API will usually not allow you to inject or use abstractions that\n"
"are specific to a protocol (i.e. HTTP) or function API (i.e. AWS Lambda).  There are\n"
"exceptions to the rule though, and you may be able to inject\n"
"contextual information that is specific to the environment you are deploying in."
msgstr "通常、 Funqy API はプロトコル (例: HTTP ) やファンクション API (例: AWS Lambda) に固有の抽象化を注入したり、使用したりすることはできません。例外もあり、デプロイ先の環境に応じたコンテキスト情報を注入できる場合もあります。"

#: _versions/3.27/guides/funqy.adoc
msgid "We do not recommend injecting contextual information specific to a runtime.  Keep your functions portable."
msgstr "ランタイムに固有のコンテキスト情報を注入することはお勧めしません。 Function を移植性の高いものにしてください。"

#: _versions/3.27/guides/funqy.adoc
msgid ""
"Contextual information is injected via the `@Context` annotation which can be used on a function parameter\n"
"or a class field.  A good example is the `io.quarkus.funqy.knative.events.CloudEvent` interface that comes with our Funqy\n"
"Knative Cloud Events integration:"
msgstr "コンテキスト情報は、ファンクションのパラメータやクラスのフィールドに使用できる `@Context` アノテーションを介して注入されます。例として、 Funqy Knative Cloud Events に搭載されている `io.quarkus.funqy.knative.events.CloudEvent` インターフェースがあります。"

#: _versions/3.27/guides/funqy.adoc
msgid "Should I Use Funqy?"
msgstr "Funqy を使うべきか？"

#: _versions/3.27/guides/funqy.adoc
msgid ""
"REST over HTTP has become a very common way to write services over the past decade.  While Funqy\n"
"has an HTTP binding it is not a replacement for REST.  Because Funqy has to work across a variety\n"
"of protocols and function cloud platforms, it is very minimalistic and constrained.  For example, if you\n"
"use Funqy you lose the ability to link (think URIs) to the data your functions spit out.  You also\n"
"lose the ability to leverage cool HTTP features like `cache-control` and conditional GETs.  Many\n"
"developers will be ok with that as many won't be using these REST/HTTP features or styles. You'll\n"
"have to make the decision on what camp you are in.  Quarkus does support REST integration (through Jakarta REST,\n"
" Spring MVC, Vert.x Web, and Servlet) with\n"
"various cloud/function providers, but there are some disadvantages of using that approach as well.  For example,\n"
"if you want to do xref:aws-lambda-http.adoc[HTTP with AWS Lambda], this requires you to use the AWS API Gateway which may\n"
"slow down deployment and cold start time or even cost you more."
msgstr ""
"REST over HTTPは、過去10年間でサービスを書くための非常に一般的な方法となりました。\n"
"FunqyはHTTPバインディングを持っていますが、RESTの代わりではありません。Funqyはさまざまなプロトコルや機能のクラウドプラットフォームで動作する必要があるため、非常にミニマルで制約があります。\n"
"例えば、Funqyを使うと、関数が吐き出すデータにリンクする（URIを考える）機能が失われます。また、 `cache-control` や条件付きGETのようなクールなHTTP機能を活用することもできなくなります。\n"
"多くの開発者はこのようなREST/HTTPの機能やスタイルを使用しないので、それで問題ないでしょう。自分がどの陣営に属するかを判断する必要があります。Quarkusは、（Jakarta REST、Spring MVC、Vert.x Web、Servletを通じて）様々なクラウド/ファンクションプロバイダーとのREST統合をサポートしていますが、そのアプローチを使うことにはデメリットもあります。例えば、 xref:aws-lambda-http.adoc[AWS LambdaでHTTP] を行いたい場合、AWS API Gatewayを使用する必要があり、デプロイやコールドスタート時間が遅くなったり、コストがかかったりする可能性があります。"

#: _versions/3.27/guides/funqy.adoc
msgid ""
"The purpose of Funqy is to allow you to write cross-provider functions so that you can move\n"
"off of your current function provider if, for instance, they start charging you a lot more for their\n"
"service.  Another reason you might not want to use Funqy is if you need access specific APIs of the\n"
"target function environment.  For example, developers often want access to the AWS Context on\n"
"Lambda.  In this case, we tell them they may be better off using the xref:aws-lambda.adoc[Quarkus AWS Lambda] integration instead."
msgstr ""
"Funqyの目的は、クロスプロバイダー関数を書けるようにすることで、例えば、現在の関数プロバイダーが高額な料金を請求するようになった場合、そのプロバイダーから移ることができるようにすることです。\n"
"Funqyを使いたくないもう一つの理由として、ターゲット関数環境の特定のAPIにアクセスする必要がある場合もあるでしょう。例えば、開発者はLambdaのAWS Contextにアクセスしたいことがよくあります。この場合、代わりに xref:aws-lambda.adoc[QuarkusのAWS Lambda] インテグレーションを使用する方がよいかもしれません。"
