msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Contexts and Dependency Injection"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Quarkus DI solution (also called ArC) is based on the https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html[Jakarta Contexts and Dependency Injection 4.1, window=\"_blank\"] specification.\n"
"It implements the CDI Lite specification, with selected improvements on top, and passes the CDI Lite TCK.\n"
"It does not implement CDI Full.\n"
"See also <<supported_features_and_limitations,the list of supported features and limitations>>.\n"
"Most of the existing CDI code should work just fine but there are some small differences which follow from the Quarkus architecture and goals."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "If you're new to CDI we recommend you to read the xref:cdi.adoc[Introduction to CDI] first."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The xref:cdi-integration.adoc[CDI integration guide] has more detail on common CDI-related integration use cases, and example code for solutions."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Bean Discovery"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Bean discovery in CDI is a complex process which involves legacy deployment structures and accessibility requirements of the underlying module architecture.\n"
"However, Quarkus is using a *simplified bean discovery*.\n"
"There is only single bean archive with the https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#default_bean_discovery[bean discovery mode `annotated`, window=\"_blank\"] and no visibility boundaries."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The bean archive is synthesized from:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "the application classes,"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "dependencies that contain a `beans.xml` descriptor (content is ignored),"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "dependencies that contain a Jandex index - `META-INF/jandex.idx`,"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "dependencies referenced by `quarkus.index-dependency` in `application.properties`,"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "and Quarkus integration code."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Bean classes that don't have a https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1.html#bean_defining_annotations[bean defining annotation, window=\"_blank\"] are not discovered.\n"
"This behavior is defined by CDI.\n"
"But producer methods and fields and observer methods are discovered even if the declaring class is not annotated with a bean defining annotation (this behavior is different to what is defined in CDI).\n"
"In fact, the declaring bean classes are considered annotated with `@Dependent`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Quarkus extensions may declare additional discovery rules. For example, `@Scheduled` business methods are registered even if the declaring class is not annotated with a bean defining annotation."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "How to Generate a Jandex Index"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"A dependency with a Jandex index is automatically scanned for beans.\n"
"To generate the index just add the following plugin to your build file:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Maven"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Gradle (Groovy DSL)"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "You can find the latest plugin version in the https://plugins.gradle.org/plugin/org.kordamp.gradle.jandex[Gradle Plugin Portal]"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Gradle (Kotlin DSL)"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "If you can't modify the dependency, you can still index it by adding `quarkus.index-dependency` entries to your `application.properties`:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "If no `artifact-id` is specified then all dependencies with the specified `group-id` are indexed."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "For example, the following entries ensure that the `org.acme:acme-api` dependency is indexed:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Example application.properties"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Value is a group id for a dependency identified by name `acme`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Value is an artifact id for a dependency identified by name `acme`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "How To Exclude Types and Dependencies from Discovery"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"It may happen that some beans from third-party libraries do not work correctly in Quarkus.\n"
"A typical example is a bean injecting a portable extension.\n"
"In such case, it's possible to exclude types and dependencies from the bean discovery.\n"
"The `quarkus.arc.exclude-types` property accepts a list of string values that are used to match classes that should be excluded."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Value Examples"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Value"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Description"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`org.acme.Foo`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Match the fully qualified name of the class"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`org.acme.*`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Match classes with package `org.acme`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`org.acme.**`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Match classes where the package starts with `org.acme`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`Bar`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Match the simple name of the class"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Exclude the type `org.acme.Foo`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Exclude all types from the `org.acme` package."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Exclude all types whose simple name is `Bar`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"It is also possible to exclude a dependency artifact that would be otherwise scanned for beans.\n"
"For example, because it contains a `beans.xml` descriptor."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid "String-Based Qualifiers"
msgstr "文字列ベースの修飾子"

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"The `@Named` qualifier, which you might be familiar with, is a _string-based qualifier_.\n"
"That is, it's the string value of the qualifier annotation who determines whether the qualifier matches or not.\n"
"This is not type-safe and should not be the norm in CDI applications.\n"
"Specific qualifier types should be preferred."
msgstr "`@Named` 、これは _文字列ベースの修飾子_ です。つまり、修飾子がマッチするかどうかを決定するのは、修飾子アノテーションの文字列値です。これは型安全ではないので、CDIアプリケーションでは一般的ではありません。特定の修飾子型が望ましいでしょう。"

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"However, sometimes string-based qualifiers are necessary.\n"
"In that case, avoid the `@Named` qualifier, because in CDI, it works differently to all other qualifiers."
msgstr "しかし、文字列ベースの修飾子が必要な場合もあります。CDIでは、 `@Named` 修飾子は他の修飾子とは異なる動作をするので、そのような場合は避けてください。"

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Specifically: if the only qualifier a bean has is `@Named`, it also automatically gets `@Default`.\n"
"This means that if multiple beans of the same type exist, one of them without qualifiers and the others with `@Named`, they _all_ get the `@Default` qualifier and bean resolution will error with ambiguity.\n"
"For example:"
msgstr "具体的には: ビーンが持つ唯一の修飾子が `@Named` の場合、自動的に `@Default` も取得します。これは，同じ型の複数のBeanが存在し，そのうちの一つが修飾子なしで，他の一つが `@Named` ，それらは _すべて_ `@Default` 修飾子を得て，Bean解決は曖昧さでエラーになることを意味します。例えば"

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid "In this case, the `Consumer#bean` injection point will cause ambiguity error, because both `MyBean` producers will have the `@Default` qualifier."
msgstr "この場合、 `Consumer#bean` 注入ポイントは、 `MyBean` プロデューサーの両方が `@Default` 修飾子を持つため、あいまい性エラーを引き起こします。"

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Instead of `@Named`, use `@io.smallrye.common.annotation.Identifier`.\n"
"This is a regular qualifier that works like all others.\n"
"So if we rewrite the example to use `@Identifier`:"
msgstr "`@Named` の代わりに `@io.smallrye.common.annotation.Identifier` を使ってください。これは他の修飾子と同じように機能します。ですから、この例を `@Identifier` を使うように書き直すと、次のようになります："

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Only the first producer will get the `@Default` qualifier, the second will not.\n"
"Hence, there will be no error and everything will work as expected."
msgstr "最初のプロデューサーだけが `@Default` 、2番目のプロデューサーはそうではありません。したがって、エラーは発生せず、すべてが期待通りに動作します。"

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid "When To Use `@Named`?"
msgstr "`@Named` をいつ使うべきか？"

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid "There is one case where `@Named` is the right thing to use: specifying an external identifier for a different language that doesn't support dependency injection directly."
msgstr "`@Named` 、依存性注入を直接サポートしていない別の言語の外部識別子を指定する場合です。"

#: _versions/3.27/guides/cdi-reference.adoc
msgid "For example:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"As you can see, in the application code, the bean is injected without a qualifier.\n"
"The bean name is only used to refer to the bean in the other language."
msgstr "ご覧のように、アプリケーションコードでは、Beanは修飾子なしで注入されます。Bean名は、他言語でBeanを参照するためにのみ使用されます。"

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid ""
"Historically, the most common external language that used bean names was JSF.\n"
"In Quarkus, we have xref:qute-reference.adoc#injecting-beans-directly-in-templates[Qute].\n"
"In a Qute template, one would refer to the bean using its name:"
msgstr "歴史的に、ビーン名を使用する最も一般的な外部言語はJSFでした。Quarkusには xref:qute-reference.adoc#injecting-beans-directly-in-templates[Quteが] あります。Quteテンプレートでは、その名前を使用してBeanを参照します："

#: _versions/3.27/guides/cdi-reference.adoc
#, fuzzy
msgid "Outside of this use-case, just use `@Identifier`."
msgstr "この使用例以外では、 `@Identifier` を使用してください。"

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Native Executables and Private Members"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Quarkus is using GraalVM to build a native executable.\n"
"One of the limitations of GraalVM is the usage of link:https://www.graalvm.org/{graalvm-docs-version}/reference-manual/native-image/Reflection/[Reflection, window=\"_blank\"].\n"
"Reflective operations are supported but all relevant members must be registered for reflection explicitly.\n"
"Those registrations result in a bigger native executable."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"And if Quarkus DI needs to access a private member it *has to use reflection*.\n"
"That's why Quarkus users are encouraged __not to use private members__ in their beans.\n"
"This involves injection fields, constructors and initializers, observer methods, producer methods and fields, disposers and interceptor methods."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"How to avoid using private members?\n"
"You can use package-private modifiers:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "A package-private injection field."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "A package-private observer method."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Or constructor injection:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "A package-private constructor injection. `@Inject` is optional in this particular case."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "[[supported_features]][[limitations]] Supported Features and Limitations"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The CDI Lite specification is fully supported.\n"
"The following features from CDI Full are also supported:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Decorators"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Decoration of built-in beans, such as `Event`, is not supported"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`BeanManager`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "In addition to the `BeanContainer` methods, the following methods are supported: `getInjectableReference()`, `resolveDecorators()`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`@SessionScoped`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Only with the Undertow extension; see xref:cdi.adoc#bean-scope-available[here] for details"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The _method invokers_ implementation supports asynchronous methods.\n"
"The following methods are considered asynchronous and `@Dependent` instances are only destroyed when the asynchronous action completes:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "methods that declare a return type of `CompletionStage`, `Uni`, or `Multi`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "These additional features are not covered by the CDI Lite TCK."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Non-standard Features"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Eager Instantiation of Beans"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Lazy By Default"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"By default, CDI beans are created lazily, when needed.\n"
"What exactly \"needed\" means depends on the scope of a bean."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "A *normal scoped bean* (`@ApplicationScoped`, `@RequestScoped`, etc.) is needed when a method is invoked upon an injected instance (contextual reference per the specification)."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "In other words, injecting a normal scoped bean will not suffice because a _client proxy_ is injected instead of a contextual instance of the bean."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "A *bean with a pseudo-scope* (`@Dependent` and `@Singleton` ) is created when injected."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Lazy Instantiation Example"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Injection triggers the instantiation of `AmazingService`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Injection itself does not result in the instantiation of `CoolService`. A client proxy is injected."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The first invocation upon the injected proxy triggers the instantiation of `CoolService`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Startup Event"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "However, if you really need to instantiate a bean eagerly you can:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Declare an observer of the `StartupEvent` - the scope of the bean does not matter in this case:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "A `CoolService` is created during startup to service the observer method invocation."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Use the bean in an observer of the `StartupEvent` - normal scoped beans must be used as described in <<lazy_by_default>>:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The `AmazingService` is created during injection."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The `CoolService` is a normal scoped bean, so we have to invoke a method upon the injected proxy to force the instantiation."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Annotate the bean with `@io.quarkus.runtime.Startup` as described in xref:lifecycle.adoc#startup_annotation[Startup annotation]:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Quarkus users are encouraged to always prefer the `@Observes StartupEvent` to `@Initialized(ApplicationScoped.class)` as explained in the xref:lifecycle.adoc[Application Initialization and Termination] guide."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Request Context Lifecycle"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The request context is also active:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "during notification of a synchronous observer method."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The request context is destroyed:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "after the observer notification completes for an event, if it was not already active when the notification started."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "An event with qualifier `@Initialized(RequestScoped.class)` is fired when the request context is initialized for an observer notification. Moreover, the events with qualifiers `@BeforeDestroyed(RequestScoped.class)` and `@Destroyed(RequestScoped.class)` are fired when the request context is destroyed."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "How to Enable Trace Logging for Request Context Activation"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "You can set the `TRACE` level for the logger `io.quarkus.arc.requestContext` and try to analyze the log output afterwards."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`application.properties` Example"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "You also need to adjust the minimum log level for the relevant category."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Qualified Injected Fields"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "In CDI, if you declare a field injection point you need to use `@Inject` and optionally a set of qualifiers."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "In Quarkus, you can skip the `@Inject` annotation completely if the injected field declares at least one qualifier."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "With the notable exception of one special case discussed below, `@Inject` is still required for constructor and method injection."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Simplified Constructor Injection"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"In CDI, a normal scoped bean must always declare a no-args constructor (this constructor is normally generated by the compiler unless you declare any other constructor).\n"
"However, this requirement complicates constructor injection - you need to provide a dummy no-args constructor to make things work in CDI."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"There is no need to declare dummy constructors for normal scoped bean in Quarkus - they are generated automatically.\n"
"Also, if there's only one constructor there is no need for `@Inject`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "We don't generate a no-args constructor automatically if a bean class extends a class that does not declare a no-args constructor."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Removing Unused Beans"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The container attempts to remove all unused beans, interceptors and decorators during build by default.\n"
"This optimization helps to minimize the amount of generated classes, thus conserving memory.\n"
"However, Quarkus can't detect the programmatic lookup performed via the `CDI.current()` static method.\n"
"Therefore, it is possible that a removal results in a false positive error, i.e. a bean is removed although it's actually used.\n"
"In such cases, you'll notice a big warning in the log.\n"
"Users and extension authors have several options <<eliminate_false_positives,how to eliminate false positives>>."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The optimization can be disabled by setting `quarkus.arc.remove-unused-beans` to `none` or `false`.\n"
"Quarkus also provides a middle ground where application beans are never removed whether or not they are unused, while the optimization proceeds normally for non application classes.\n"
"To use this mode, set `quarkus.arc.remove-unused-beans` to `fwk` or `framework`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "What's Removed?"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Quarkus first identifies so-called _unremovable_ beans that form the roots in the dependency tree.\n"
"A good example is a Jakarta REST resource class or a bean which declares a `@Scheduled` method."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "An _unremovable_ bean:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "is <<eliminate_false_positives,excluded from removal>>, or"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "has a name designated via `@Named`, or"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "declares an observer method."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "An _unused_ bean:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "is not _unremovable_, and"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "is not eligible for injection to any injection point in the dependency tree of _unremovable_ beans, and"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "does not declare any producer which is eligible for injection to any injection point in the dependency tree, and"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "is not eligible for injection into any `jakarta.enterprise.inject.Instance` or `jakarta.inject.Provider` injection point, and"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "is not eligible for injection into any <<injecting-multiple-bean-instances-intuitively,`@Inject @All List<>`>> injection point."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Unused interceptors and decorators are not associated with any bean."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "When using the dev mode (running `./mvnw quarkus:dev`), you can see more information about which beans are being removed:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "In the console - just enable the DEBUG level in your `application.properties`, i.e. `quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "In the relevant Dev UI page"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "How To Eliminate False Positives"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Users can instruct the container to not remove any of their specific beans (even if they satisfy all the rules specified above) by annotating them with `@io.quarkus.arc.Unremovable`.\n"
"This annotation can be declared on a class, a producer method or field."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Since this is not always possible, there is an option to achieve the same via `application.properties`.\n"
"The `quarkus.arc.unremovable-types` property accepts a list of string values that are used to match beans based on their name or package."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Match the fully qualified name of the bean class"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Match beans where the package of the bean class is `org.acme`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Match beans where the package of the bean class starts with `org.acme`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Match the simple name of the bean class"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Furthermore, extensions can eliminate false positives by producing an `UnremovableBeanBuildItem`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Default Beans"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Quarkus adds a capability that CDI currently does not support which is to conditionally declare a bean if no other bean with equal types and qualifiers was declared by any available means (bean class, producer, synthetic bean, ...)\n"
"This is done using the `@io.quarkus.arc.DefaultBean` annotation and is best explained with an example."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Say there is a Quarkus extension that among other things declares a few CDI beans like the following code does:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The idea is that the extension autoconfigures things for the user, eliminating a lot of boilerplate - we can just `@Inject` a `Tracer` wherever it is needed.\n"
"Now imagine that in our application we would like to utilize the configured `Tracer`, but we need to customize it a little, for example by providing a custom `Reporter`.\n"
"The only thing that would be needed in our application would be something like the following:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"`@DefaultBean` allows extensions (or any other code for that matter) to provide defaults while backing off if beans of that type are supplied in any\n"
"way Quarkus supports."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Default beans can optionally declare `@jakarta.annotation.Priority`.\n"
"If there is no priority defined, `@Priority(0)` is assumed.\n"
"Priority value is used for bean ordering and during typesafe resolution to disambiguate multiple matching default beans."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Enabling Beans for Quarkus Build Profile"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Quarkus adds a capability that CDI currently does not support which is to conditionally enable a bean when a Quarkus build time profile is enabled,\n"
"via the `@io.quarkus.arc.profile.IfBuildProfile` and `@io.quarkus.arc.profile.UnlessBuildProfile` annotations.\n"
"When used in conjunction with `@io.quarkus.arc.DefaultBean`, these annotations allow for the creation of different bean configurations for different build profiles."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Imagine for instance that an application contains a bean named `Tracer`, which needs to do nothing when in tests or in dev mode, but works in its normal capacity for the production artifact.\n"
"An elegant way to create such beans is the following:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "If instead, it is required that the `Tracer` bean also works in dev mode and only default to doing nothing for tests, then `@UnlessBuildProfile` would be ideal. The code would look like:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The runtime profile has absolutely no effect on the bean resolution using `@IfBuildProfile` and `@UnlessBuildProfile`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "It is also possible to use `@IfBuildProfile` and `@UnlessBuildProfile` on stereotypes."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Enabling Beans for Quarkus Build Properties"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Quarkus adds a capability that CDI currently does not support which is to conditionally enable a bean when a Quarkus build time property has or does not have a specific value,\n"
"via the `@io.quarkus.arc.properties.IfBuildProperty` and `@io.quarkus.arc.properties.UnlessBuildProperty` annotations.\n"
"When used in conjunction with `@io.quarkus.arc.DefaultBean`, these annotations allow for the creation of different bean configurations for different build properties."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The scenario we mentioned above with `Tracer` could also be implemented in the following way:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`@IfBuildProperty` and `@UnlessBuildProperty` are repeatable annotations, i.e. a bean will only be enabled if **all** the conditions defined by these annotations are satisfied."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "If instead, it is required that the `RealTracer` bean is only used if the `some.tracer.enabled` property is not `false`, then `@UnlessBuildProperty` would be ideal. The code would look like:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Properties set at runtime have absolutely no effect on the bean resolution using `@IfBuildProperty`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "It is also possible to use `@IfBuildProperty` and `@UnlessBuildProperty` on stereotypes."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Declaring Selected Alternatives"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"In CDI, an alternative bean may be selected either globally for an application by means of `@Priority`, or for a bean archive using a `beans.xml` descriptor.\n"
"Quarkus has a simplified bean discovery and the content of `beans.xml` is ignored."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"However, it is also possible to select alternatives for an application using the unified configuration.\n"
"The `quarkus.arc.selected-alternatives` property accepts a list of string values that are used to match alternative beans.\n"
"If any value matches then the priority of `Integer#MAX_VALUE` is used for the relevant bean.\n"
"The priority declared via `@Priority` or inherited from a stereotype is overridden."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Match the fully qualified name of the bean class or the bean class of the bean that declares the producer"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Match the simple name of the bean class or the bean class of the bean that declares the producer"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Simplified Producer Method Declaration"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "In CDI, a producer method must be always annotated with `@Produces`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "In Quarkus, you can skip the `@Produces` annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Interception of Static Methods"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The Interceptors specification is clear that _around-invoke_ methods must not be declared static.\n"
"However, this restriction was driven mostly by technical limitations.\n"
"And since Quarkus is a build-time oriented stack that allows for additional class transformations, those limitations don't apply anymore.\n"
"It's possible to annotate a non-private static method with an interceptor binding:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`Logged` is an interceptor binding."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Each method invocation is intercepted if there is an interceptor associated with `Logged`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Limitations"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Only *method-level bindings* are considered for backward compatibility reasons (otherwise static methods of bean classes that declare class-level bindings would be suddenly intercepted)"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Private static methods are never intercepted"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`InvocationContext#getTarget()` returns `null` for obvious reasons; therefore not all existing interceptors may behave correctly when intercepting static methods"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Interceptors can use `InvocationContext.getMethod()` to detect static methods and adjust the behavior accordingly."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Ability to handle 'final' classes and methods"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"In normal CDI, classes that are marked as `final` and / or have `final` methods are not eligible for proxy creation,\n"
"which in turn means that interceptors and normal scoped beans don't work properly.\n"
"This situation is very common when trying to use CDI with alternative JVM languages like Kotlin where classes and methods are `final` by default."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Quarkus however, can overcome these limitations when `quarkus.arc.transform-unproxyable-classes` is set to `true` (which is the default value)."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Container-managed Concurrency"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"There is no standard concurrency control mechanism for CDI beans.\n"
"Nevertheless, a bean instance can be shared and accessed concurrently from multiple threads.\n"
"In that case it should be thread-safe.\n"
"You can use standard Java constructs (`volatile`, `synchronized`, `ReadWriteLock`, etc.) or let the container control the concurrent access.\n"
"Quarkus provides `@io.quarkus.arc.Lock` and a built-in interceptor for this interceptor binding.\n"
"Each interceptor instance associated with a contextual instance of an intercepted bean holds a separate `ReadWriteLock` with non-fair ordering policy."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`io.quarkus.arc.Lock` is a regular interceptor binding and as such can be used for any bean with any scope. However, it is especially useful for \"shared\" scopes, e.g. `@Singleton` and `@ApplicationScoped`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Container-managed Concurrency Example"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`@Lock` (which maps to `@Lock(Lock.Type.WRITE)`) declared on the class instructs the container to lock the bean instance for any invocation of any business method, i.e. the client has \"exclusive access\" and no concurrent invocations will be allowed."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`@Lock(Lock.Type.READ)` overrides the value specified at class level. It means that any number of clients can invoke the method concurrently, unless the bean instance is locked by `@Lock(Lock.Type.WRITE)`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "You can also specify the \"wait time\". If it's not possible to acquire the lock in the given time a `LockException` is thrown."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Repeatable interceptor bindings"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Quarkus has limited support for `@Repeatable` interceptor binding annotations."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"When binding an interceptor to a component, you can declare multiple `@Repeatable` annotations on methods.\n"
"Repeatable interceptor bindings declared on classes and stereotypes are not supported, because there are some open questions around interactions with the Interceptors specification.\n"
"This might be added in the future."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"As an example, suppose we have an interceptor that clears a cache.\n"
"The corresponding interceptor binding would be called `@CacheInvalidateAll` and would be declared as `@Repeatable`.\n"
"If we wanted to clear two caches at the same time, we would add `@CacheInvalidateAll` twice:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"This is how interceptors are used.\n"
"What about creating an interceptor?"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"When declaring interceptor bindings of an interceptor, you can add multiple `@Repeatable` annotations to the interceptor class as usual.\n"
"This is useless when the annotation members are `@Nonbinding`, as would be the case for the `@Cached` annotation, but is important otherwise."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"For example, suppose we have an interceptor that can automatically log method invocations to certain targets.\n"
"The interceptor binding annotation `@Logged` would have a member called `target`, which specifies where to store the log.\n"
"Our implementation could be restricted to console logging and file logging:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Other interceptors could be provided to log method invocations to different targets."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Caching the Result of Programmatic Lookup"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"In certain situations, it is practical to obtain a bean instance programmatically via an injected `jakarta.enterprise.inject.Instance` and `Instance.get()`.\n"
"However, according to the specification the `get()` method must identify the matching bean and obtain a contextual reference.\n"
"As a consequence, a new instance of a  `@Dependent` bean is returned from each invocation of `get()`.\n"
"Moreover, this instance is a dependent object of the injected `Instance`.\n"
"This behavior is well-defined, but it may lead to unexpected errors and memory leaks.\n"
"Therefore, Quarkus comes with the `io.quarkus.arc.WithCaching` annotation.\n"
"An injected `Instance` annotated with this annotation will cache the result of the `Instance#get()` operation.\n"
"The result is computed on the first call and the same value is returned for all subsequent calls, even for `@Dependent` beans."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "It is also possible to clear the cached value via `io.quarkus.arc.InjectableInstance.clearCache()`. In this case, you'll need to inject the Quarkus-specific `io.quarkus.arc.InjectableInstance` instead of `jakarta.enterprise.inject.Instance`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Declaratively Choose Beans That Can Be Obtained by Programmatic Lookup"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"It is sometimes useful to narrow down the set of beans that can be obtained by programmatic lookup via `jakarta.enterprise.inject.Instance`.\n"
"Typically, a user needs to choose the appropriate implementation of an interface based on a runtime configuration property."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Imagine that we have two beans implementing the interface `org.acme.Service`.\n"
"You can't inject the `org.acme.Service` directly unless your implementations declare a CDI qualifier.\n"
"However, you can inject the `Instance<Service>` instead, then iterate over all implementations and choose the correct one manually.\n"
"Alternatively, you can use the `@LookupIfProperty` and `@LookupUnlessProperty` annotations.\n"
"`@LookupIfProperty` indicates that a bean should only be obtained if a runtime configuration property matches the provided value.\n"
"`@LookupUnlessProperty`, on the other hand, indicates that a bean should only be obtained if a runtime configuration property does not match the provided value."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`@LookupIfProperty` Example"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Sorting beans obtained with programmatic lookup"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"If there is more than one bean that matches the required type and qualifiers and is eligible for injection, it is possible to iterate (or stream) available bean instances.\n"
"Beans returned by both stream and iterator methods are sorted by priority as defined by `io.quarkus.arc.InjectableBean#getPriority()`. Higher priority goes first.\n"
"If no priority is explicitly declared, 0 is assumed."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Injecting Multiple Bean Instances Intuitively"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"In CDI, it's possible to inject multiple bean instances (aka contextual references) via the `jakarta.enterprise.inject.Instance` which implements `java.lang.Iterable`.\n"
"However, it's not exactly intuitive.\n"
"Therefore, a new way was introduced in Quarkus - you can inject a `java.util.List` annotated with the `io.quarkus.arc.All` qualifier.\n"
"The type of elements in the list is used as the required type when performing the lookup."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The injected instance is an _immutable list_ of the contextual references of the _disambiguated_ beans."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "For this injection point the required type is `Service` and no additional qualifiers are declared."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The list is sorted by priority as defined by `io.quarkus.arc.InjectableBean#getPriority()`. Higher priority goes first. In general, the `@jakarta.annotation.Priority` annotation can be used to assign the priority to a class bean, producer method or producer field."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "If an injection point declares no other qualifier than `@All` then `@Any` is used, i.e. the behavior is equivalent to `@Inject @Any Instance<Service>`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"You can also inject a list of bean instances wrapped in `io.quarkus.arc.InstanceHandle`.\n"
"This can be useful if you need to inspect the related bean metadata."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Neither a type variable nor a wildcard is a legal type parameter for an `@All List<>` injection point, i.e. `@Inject @All List<?> all` is not supported and results in a deployment error."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "It is also possible to obtain the list of all bean instance handles programmatically via the `Arc.container().listAll()` methods."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Ignoring Class-Level Interceptor Bindings for Methods and Constructors"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"If a managed bean declares interceptor binding annotations on the class level, the corresponding `@AroundInvoke` interceptors will apply to all business methods.\n"
"Similarly, the corresponding `@AroundConstruct` interceptors will apply to the bean constructor."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "For example, suppose we have a logging interceptor with the `@Logged` binding annotation and a tracing interceptor with the `@Traced` binding annotation:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"In this example, both `doSomething` and `doSomethingElse` will be intercepted by the hypothetical logging interceptor.\n"
"Additionally, the `doSomethingElse` method will be intercepted by the hypothetical tracing interceptor."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Now, if that `@Traced` interceptor also performed all the necessary logging, we'd like to skip the `@Logged` interceptor for this method, but keep it for all other methods.\n"
"To achieve that, you can annotate the method with `@NoClassInterceptors`:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The `@NoClassInterceptors` annotation may be put on methods and constructors and means that all class-level interceptors are ignored for these methods and constructors.\n"
"In other words, if a method/constructor is annotated `@NoClassInterceptors`, then the only interceptors that will apply to this method/constructor are interceptors declared directly on the method/constructor."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "This annotation affects only business method interceptors (`@AroundInvoke`) and constructor lifecycle callback interceptors (`@AroundConstruct`)."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Exceptions Thrown By An Asynchronous Observer Method"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"If an exception is thrown by an asynchronous observer then the `CompletionStage` returned by the `fireAsync()` method completes exceptionally so that the event producer may react appropriately.\n"
"However, if the event producer does not care then the exception is ignored silently.\n"
"Therefore, Quarkus logs an error message by default.\n"
"It is also possible to implement a custom `AsyncObserverExceptionHandler`.\n"
"A bean that implements this interface should be `@jakarta.inject.Singleton` or `@jakarta.enterprise.context.ApplicationScoped`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`NoopAsyncObserverExceptionHandler`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Intercepted self-invocation"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Quarkus supports what is known as intercepted self-invocation or just self-interception - a scenario where CDI bean invokes its own intercepted method from within another method while triggering any associated interceptors.\n"
"This is a non-standard feature as CDI specification doesn't define whether self-interception should work or not."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Suppose we have a CDI bean with two methods, one of which has the `@Transactional` interceptor binding associated with it:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "One or more interceptor bindings; `@Transactional` is just an example."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Non-intercepted method invoking another method from the same bean that has associated binding(s); this will trigger interception."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"In the above example, any code calling the `doSomething()` method triggers interception - in this case, the method becomes transactional.\n"
"This is regardless of whether the invocation originated directly from the `MyService` bean (such as `MyService#doSomethingElse`) or from some other bean."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Intercepting Producer Methods and Synthetic Beans"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"By default, interception is only supported for managed beans (also known as class-based beans).\n"
"To support interception of producer methods and synthetic beans, the CDI specification includes an `InterceptionFactory`, which is a runtime oriented concept and therefore cannot be supported in Quarkus."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Instead, Quarkus has its own API: `InterceptionProxy` and `@BindingsSource`.\n"
"The `InterceptionProxy` is very similar to `InterceptionFactory`: it creates a proxy that applies `@AroundInvoke` interceptors before forwarding the method call to the target instance.\n"
"The `@BindingsSource` annotation allows setting interceptor bindings in case the intercepted class is external and cannot be changed."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Declares an injection point of type `InterceptionProxy<MyClass>`.\n"
"This means that at build time, a subclass of `MyClass` is generated that does the interception and forwarding.\n"
"Note that the type argument must be identical to the return type of the producer method."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Creates an instance of the interception proxy for the given instance of `MyClass`.\n"
"The method calls will be forwarded to this target instance after all interceptors run."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "In this example, interceptor bindings are read from the `MyClass` class."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Note that `InterceptionProxy` only supports `@AroundInvoke` interceptors declared on interceptor classes.\n"
"Other kinds of interception, as well as `@AroundInvoke` interceptors declared on the target class and its superclasses, are not supported."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The intercepted class should be https://jakarta.ee/specifications/cdi/4.1/jakarta-cdi-spec-4.1#unproxyable[proxyable] and therefore should not be `final`, should not have non-private `final` methods, and should have a non-private zero-parameter constructor.\n"
"If it isn't, a bytecode transformation will attempt to fix it if <<unproxyable_classes_transformation,enabled>>, but note that adding a zero-parameter constructor is not always possible."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"It is often the case that the produced classes come from external libraries and don't contain interceptor binding annotations at all.\n"
"To support such cases, the `@BindingsSource` annotation may be declared on the `InterceptionProxy` parameter:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "A class that mirrors the `MyClass` structure and contains interceptor bindings."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The `@BindingsSource` annotation says that interceptor bindings for `MyClass` should be read from `MyClassBindings`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The concept of _bindings source_ is a build-time friendly equivalent of `InterceptionFactory.configure()`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Producer method interception and synthetic bean interception only works for instance methods.\n"
"<<interception_of_static_methods>> is not supported for producer methods and synthetic beans."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Declaring `@BindingsSource`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The `@BindingsSource` annotation specifies a class that mirrors the structure of the intercepted class.\n"
"Interceptor bindings are then read from that class and treated as if they were declared on the intercepted class."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Specifically: class-level interceptor bindings declared on the bindings source class are treated as class-level bindings of the intercepted class.\n"
"Method-level interceptor bindings declared on the bindings source class are treated as method-level bindings of a method with the same name, return type, parameter types and `static` flag of the intercepted class."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "It is common to make the bindings source class and methods `abstract` so that you don't have to write method bodies:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Since this class is never instantiated and its method are never invoked, this is okay, but it's also possible to create a non-`abstract` class:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The method body does not matter."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Note that for generic classes, the type variable names must also be identical.\n"
"For example, for the following class:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "the bindings source class must also use `T` as the name of the type variable:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"You don't need to declare methods that are not annotated simply because they exist on the intercepted class.\n"
"If you want to add method-level bindings to a subset of methods, you only have to declare the methods that are supposed to have an interceptor binding.\n"
"If you only want to add class-level bindings, you don't have to declare any methods at all."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "These annotations can be present on a bindings source class:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "_interceptor bindings_: on the class and on the methods"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "_stereotypes_: on the class"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`@NoClassInterceptors`: on the methods"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Any other annotation present on a bindings source class is ignored."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Synthetic Beans"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Using `InterceptionProxy` in synthetic beans is similar."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "First, you have to declare that your synthetic bean injects the `InterceptionProxy`:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Once again, this means that at build time, a subclass of `MyClass` is generated that does the interception and forwarding."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Second, you have to obtain the `InterceptionProxy` from the `SyntheticCreationalContext` in the `BeanCreator` and use it:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Obtains the `InterceptionProxy` for `MyClass`, as declared above.\n"
"It would also be possible to use the `getInjectedReference()` method, passing a `TypeLiteral`, but `getInterceptionProxy()` is easier."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"There's also an equivalent of `@BindingsSource`.\n"
"The `injectInterceptionProxy()` method has an overload with a parameter:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "The argument is the bindings source class."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`Instance.Handle.close()` Behavior"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Per the CDI specification, the `Instance.Handle.close()` method always delegates to `destroy()`.\n"
"In ArC, this is only true in the <<strict_mode>>."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"In the default mode, the `close()` method only delegates to `destroy()` when the bean is `@Dependent` (or when the instance handle does not represent a CDI contextual object).\n"
"When the instance handle represents a bean of any other scope, the `close()` method does nothing; the bean is left as is and will be destroyed whenever its context is destroyed."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "This is to make the following code behave as one would naively expect:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The `@Dependent` beans are destroyed immediately, while other beans are not destroyed at all.\n"
"This is important when multiple beans of different scopes might be returned by the `Instance`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Pitfalls with Reactive Programming"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"CDI is a purely synchronous framework.\n"
"Its notion of asynchrony is very limited and based solely on thread pools and thread offloading.\n"
"Therefore, there is a number of pitfalls when using CDI together with reactive programming."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Detecting When Blocking Is Allowed"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The `io.quarkus.runtime.BlockingOperationControl#isBlockingAllowed()` method can be used to detect whether blocking is allowed on the current thread.\n"
"When it is not, and you need to perform a blocking operation, you have to offload it to another thread.\n"
"The easiest way is to use the `Vertx.executeBlocking()` method:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Asynchronous Observers"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"CDI asynchronous observers (`@ObservesAsync`) are not aware of reactive programming and are not meant to be used as part of reactive pipelines.\n"
"The observer methods are meant to be synchronous, they are just offloaded to a thread pool."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The `Event.fireAsync()` method returns a `CompletionStage` that completes when all observers are notified.\n"
"If all observers were notified successfully, the `CompletionStage` completes with the event payload.\n"
"If some observers have thrown an exception, the `CompletionStage` completes exceptionally with a `CompletionException`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"The return type of the observer _does not matter_.\n"
"The return value of the observer is _ignored_."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"You may declare an observer method that has a return type of `CompletionStage<>` or `Uni<>`, but neither the return type nor the actual return value affect the result of `Event.fireAsync()`.\n"
"Further, if the observer declares a return type of `Uni<>`, the returned `Uni` will not be subscribed to, so it is quite possible that part of the observer logic will not even execute."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Therefore, it is recommended that observer methods, both synchronous and asynchronous, are always declared `void`."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Build Time Extensions"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Quarkus incorporates build-time optimizations in order to provide instant startup and low memory footprint.\n"
"The downside of this approach is that CDI Portable Extensions cannot be supported.\n"
"Nevertheless, most of the functionality can be achieved using Quarkus xref:writing-extensions.adoc[extensions].\n"
"See the xref:cdi-integration.adoc[integration guide] for more information."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "[[development-mode]] Dev mode"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "In dev mode, two special endpoints are registered automatically to provide some basic debug info in the JSON format:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "HTTP GET `/q/arc` - returns the summary; number of beans, config properties, etc."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "HTTP GET `/q/arc/beans` - returns the list of all beans"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "You can use query params to filter the output:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`scope` - include beans with scope that ends with the given value, i.e. `http://localhost:8080/q/arc/beans?scope=ApplicationScoped`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`beanClass` - include beans with bean class that starts with the given value, i.e. `http://localhost:8080/q/arc/beans?beanClass=org.acme.Foo`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "`kind` - include beans of the specified kind (`CLASS`, `PRODUCER_FIELD`, `PRODUCER_METHOD`, `INTERCEPTOR` or `SYNTHETIC`), i.e. `http://localhost:8080/q/arc/beans?kind=PRODUCER_METHOD`"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "HTTP GET `/q/arc/removed-beans` - returns the list of unused beans removed during build"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "HTTP GET `/q/arc/observers` - returns the list of all observer methods"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "These endpoints are only available in dev mode, i.e. when you run your application via `mvn quarkus:dev` (or `./gradlew quarkusDev`)."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Monitoring Business Method Invocations and Events"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"In dev mode, it is also possible to enable monitoring of business method invocations and fired events.\n"
"Simply set the `quarkus.arc.dev-mode.monitoring-enabled` configuration property to `true` and explore the relevant Dev UI pages."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Strict Mode"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"By default, ArC does not perform all validations required by the CDI specification.\n"
"It also improves CDI usability in many ways, some of them being directly against the specification."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"To pass the CDI Lite TCK, ArC also has a _strict_ mode.\n"
"This mode enables additional validations and disables certain improvements that conflict with the specification."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "To enable the strict mode, use the following configuration:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "Some other features affect specification compatibility as well:"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "<<unproxyable_classes_transformation,Transformation of unproxyable classes>>"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "<<remove_unused_beans,Unused beans removal>>"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "To get a behavior closer to the specification, these features should be disabled."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid ""
"Applications are recommended to use the default, non-strict mode, which makes CDI more convenient to use.\n"
"The \"strictness\" of the strict mode (the set of additional validations and the set of disabled improvements on top of the CDI specification) may change over time."
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "ArC Configuration Reference"
msgstr ""

#: _versions/3.27/guides/cdi-reference.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""
