msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Kubernetes extension"
msgstr "Kubernetes エクステンション"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Quarkus offers the ability to automatically generate Kubernetes resources based on sane defaults and user-supplied configuration using https://github.com/dekorateio/dekorate/[dekorate].\n"
"It currently supports generating resources for vanilla <<#kubernetes,Kubernetes>>, <<#openshift,OpenShift>> and <<#knative,Knative>>.\n"
"Furthermore, Quarkus can deploy the application to a target Kubernetes cluster by applying the generated manifests to the target cluster's API Server.\n"
"Finally, when either one of container image extensions is present (see the xref:container-image.adoc[container image guide] for more details), Quarkus has the ability to create a container image and push it to a registry *before* deploying the application to the target platform."
msgstr "Quarkusは、 https://github.com/dekorateio/dekorate/[dekorate] を使用して、妥当なデフォルトとユーザーが提供する設定に基づいて Kubernetes リソースを自動的に生成する機能を提供しています。現在、バニラ <<#kubernetes,Kubernetes>>、<<#openshift,OpenShift>>、および <<#knative,Knative>> のリソースの生成をサポートしています。さらに、Quarkusは、生成されたマニフェストをターゲットクラスターの API Server に適用することで、ターゲット Kubernetes クラスターにアプリケーションをデプロイすることができます。最後に、コンテナーイメージエクステンションのいずれかが存在する場合 (詳細は xref:container-image.adoc[container image guide] を参照)、Quarkus では、ターゲットプラットフォームにアプリケーションをデプロイする *前* に、コンテナーイメージを作成してレジストリーにプッシュする機能があります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Access to a Kubernetes cluster (Minikube is a viable option)"
msgstr "Kubernetesクラスターへのアクセス（Minikubeは有効な選択肢です）"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Kubernetes"
msgstr "Kubernetes"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Let's create a new project that contains both the Kubernetes and Jib extensions:"
msgstr "Kubernetes エクステンションとJib エクステンションの両方を含む新しいプロジェクトを作成してみましょう。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "This added the following dependencies to the build file:"
msgstr "これにより、ビルドファイルに以下の依存関係が追加されました。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"By adding these dependencies, we enable the generation of Kubernetes manifests each time we perform a build while also enabling the build of a container image using Jib.\n"
"For example, following the execution of:"
msgstr "これらの依存関係を追加することで、ビルドを実行するたびに Kubernetes マニフェストの生成を可能にし、同時に Jib を使ったコンテナーイメージのビルドを可能にします。たとえば、以下を実行した後、"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"you will notice amongst the other files that are created, two files named\n"
"`kubernetes.json` and `kubernetes.yml` in the `target/kubernetes/` directory."
msgstr "作成された他のファイルの中に `kubernetes.json` と `kubernetes.yml` という名前の 2 つのファイルが `target/kubernetes/` ディレクトリーにあることに気づくでしょう。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "If you look at either file you will see that it contains both a Kubernetes `Deployment` and a `Service`."
msgstr "どちらのファイルを見ても、Kubernetes `Deployment` と `Service` 両方が含まれていることに気づくでしょう。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The full source of the `kubernetes.json` file looks something like this:"
msgstr "`kubernetes.json` ファイルの完全なソースはこんな感じです:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The generated manifest can be applied to the cluster from the project root using `kubectl`:"
msgstr "生成されたマニフェストは、 `kubectl` を使用してプロジェクトのルートからクラスターに適用することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"An important thing to note about the `Deployment` (or `StatefulSet`) is that is uses `yourDockerUsername/test-quarkus-app:1.0.0-SNAPSHOT` as the container image of the `Pod`.\n"
"The name of the image is controlled by the Jib extension and can be customized using the usual `application.properties`."
msgstr "`Deployment` (または `StatefulSet`) について注意すべき重要なことは、 `Pod` のコンテナーイメージとして `yourDockerUsername/test-quarkus-app:1.0.0-SNAPSHOT` を使用していることです。イメージの名前は Jib エクステンションによって制御され、通常の `application.properties` を利用してカスタマイズすることができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "For example with a configuration like:"
msgstr "例えば、次のような設定の場合:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The image that will be used in the generated manifests will be `quarkus/demo-app:1.0`"
msgstr "生成されたマニフェストで使用されるイメージは `quarkus/demo-app:1.0` となります"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Generating idempotent resources"
msgstr "冪等性リソースの生成"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "When generating the Kubernetes manifests, Quarkus automatically adds some labels and annotations to give extra information about the generation date or versions. For example:"
msgstr "Kubernetesマニフェストを生成する際、Quarkusは自動的にいくつかのラベルとアノテーションを追加し、生成日やバージョンに関する追加情報を提供します。例えば、以下のようなものです:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The `app.quarkus.io/commit-id`, `app.quarkus.io/build-timestamp` labels and the `app.kubernetes.io/version` annotation might change every time we re-build the Kubernetes manifests which can be problematic when we want to deploy these resources using a Git-Ops tool (because these tools will detect differences and hence will perform a re-deployment)."
msgstr "`app.quarkus.io/commit-id` , `app.quarkus.io/build-timestamp` ラベルと `app.kubernetes.io/version` アノテーションは、Kubernetes マニフェストを再ビルドするたびに変わる可能性があり、Git-Ops ツールを使用してこれらのリソースをデプロイしたいときに問題になることがあります（これらのツールは違いを検出し、したがって再デプロイを実行するため）。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To make the generated resources Git-Ops friendly and only produce idempotent resources (resources that won't change every time we build the sources), we need to add the following property:"
msgstr "生成されるリソースをGit-Opsに対応させ、冪等なリソース（ソースをビルドするたびに変化しないリソース）だけを生成するには、次のプロパティを追加する必要があります:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Moreover, by default the directory where the generated resources are created is `target/kubernetes`, to change it, we need to use:"
msgstr "また、デフォルトでは生成されたリソースが作成されるディレクトリは `target/kubernetes` です。これを変更するには次を使用する必要があります:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Note that the property `quarkus.kubernetes.output-directory` is relative to the current project location."
msgstr "なお、プロパティ `quarkus.kubernetes.output-directory` は、現在のプロジェクトの位置からの相対的なものです。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Changing the generated deployment resource"
msgstr "生成されるデプロイメントリソースの変更"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Besides generating a `Deployment` resource, you can also choose to generate either a `StatefulSet`, or a `Job`, or a `CronJob` resource instead via `application.properties`:"
msgstr "`Deployment` リソースの他に、 `StatefulSet` 、 `Job` 、 `CronJob` リソースの代わりに `application.properties` を生成することもできます："

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Generating Job resources"
msgstr "Job リソースの生成"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "If you want to generate a Job resource, you need to add the following property to the `application.properties`:"
msgstr "Job リソースを生成する場合は、 `application.properties` で以下のプロパティを追加する必要があります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "If you are using the Picocli extension, by default a Job resource will be generated."
msgstr "Picocliエクステンションを使用している場合、デフォルトでJobリソースが生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "You can provide the arguments that will be used by the Kubernetes Job via the property `quarkus.kubernetes.arguments`. For example, by adding the property `quarkus.kubernetes.arguments=A,B`."
msgstr "Kubernetes Jobで使用される引数は、プロパティ `quarkus.kubernetes.arguments` で指定できます。例えば、 `quarkus.kubernetes.arguments=A,B`というプロパティを追加することで。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Finally, the Kubernetes job will be launched every time it is installed in Kubernetes. You can know more about how to run Kubernetes jobs in this https://kubernetes.io/docs/concepts/workloads/controllers/job/#running-an-example-job[link]."
msgstr "最後に、OpenShiftにインストールされる度にKubernetesのJobは毎回起動されます。KubernetesのJobの実行方法については、こちらの link:https://kubernetes.io/docs/concepts/workloads/controllers/job/#running-an-example-job[リンク] で詳しく解説しています。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "You can configure the rest of the Kubernetes Job configuration using the properties under `quarkus.kubernetes.job.xxx` (see xref:deploying-to-kubernetes.adoc#quarkus-kubernetes_quarkus-kubernetes-job-parallelism[link])."
msgstr "Kubernetes Job 設定の残りの部分は、`quarkus.kubernetes.job.xxx` (xref:deploying-to-kubernetes.adoc#quarkus-kubernetes_quarkus-kubernetes-job-parallelism[リンク] を参照) のプロパティーを使用して設定できます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Generating CronJob resources"
msgstr "CronJob リソースの生成"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "If you want to generate a CronJob resource, you need to add the following property via the `application.properties`:"
msgstr "CronJob リソースを生成したい場合、 `application.properties` で以下のプロパティを追加する必要があります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "CronJob resources require the https://en.wikipedia.org/wiki/Cron[Cron] expression to specify when to launch the job via the property `quarkus.kubernetes.cron-job.schedule`. If not provide, the build will fail."
msgstr "CronJob リソースは、 link:https://en.wikipedia.org/wiki/Cron[Cron] 式がプロパティ `quarkus.openshift.cron-job.schedule` を介してジョブを起動するタイミングを指定することを必要とします。提供されない場合、ビルドは失敗します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "You can configure the rest of the Kubernetes CronJob configuration using the properties under `quarkus.kubernetes.cron-job.xxx` (see xref:deploying-to-kubernetes.adoc#quarkus-kubernetes_quarkus-kubernetes-cron-job-parallelism[link])."
msgstr "Kubernetes CronJob 設定の残りの部分は、`quarkus.kubernetes.cron-job.xxx` (xref:deploying-to-kubernetes.adoc#quarkus-kubernetes_quarkus-kubernetes-cron-job-parallelism[リンク] を参照) のプロパティーを使用して設定できます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Namespace"
msgstr "名前空間"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "By default, Quarkus omits the namespace in the generated manifests, rather than enforce the `default` namespace. That means that you can apply the manifest to your chosen namespace when using `kubectl`, which in the example below is `test`:"
msgstr "デフォルトでは、Quarkusは生成されたマニフェストの名前空間を省略し、 `default` 名前空間を強制しません。つまり、 `kubectl` (以下の例では `test` )を使用している場合は、選択したネームスペースにマニフェストを適用することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To specify the namespace in your manifest customize with the following property in your `application.properties`:"
msgstr "マニフェストで名前空間を指定するには、 `application.properties` の中で次のプロパティによってカスタマイズします。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Defining a Docker registry"
msgstr "Docker レジストリーの定義"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The Docker registry can be specified with the following property:"
msgstr "Docker レジストリーは、以下のプロパティーで指定できます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"By adding this property along with the rest of the container image properties of the previous section, the generated manifests will use the image `my.docker-registry.net/quarkus/demo-app:1.0`.\n"
"The image is not the only thing that can be customized in the generated manifests, as will become evident in the following sections."
msgstr "前のセクションで説明したコンテナーイメージプロパティーと一緒にこのプロパティーを追加すると、生成されるマニフェストではイメージ `my.docker-registry.net/quarkus/demo-app:1.0` を使用するようになります。次のセクションで明らかになるように、生成されるマニフェストでカスタマイズできるのはイメージだけではありません。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Automatic generation of pull secrets"
msgstr "プル・シークレットの自動生成"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "When docker registries are used, users often provide credentials, so that an image is built and pushed to the specified registry during the build."
msgstr "Dockerレジストリを使用する場合、ユーザーはしばしばクレデンシャルを提供し、ビルド中にイメージがビルドされ、指定されたレジストリにプッシュされます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Kubernetes will also need these credentials when it comes to pull the image from the registry. This is where image pull secrets are used. An image pull secret is a special kind\n"
"of secret that contains the required credentials. Quarkus can automatically generate and configure when:"
msgstr "Kubernetesは、レジストリからイメージをプルする際にもこれらのクレデンシャルを必要とします。そこで、イメージプルシークレットが使用されます。イメージプルシークレットは、必要なクレデンシャルを含む特別な種類のシークレットです。Quarkusでは、以下の時、このシークレットを自動的に生成して設定できます："

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "More specifically a `Secret` like the one below is generated:"
msgstr "具体的には、以下のような `Secret` が生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "And also `test-quarkus-app-pull-secret` is added to the `imagePullSecrets` list."
msgstr "また、 `test-quarkus-app-pull-secret` が `imagePullSecrets` リストに追加されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Labels and Annotations"
msgstr "ラベルとアノテーション"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Labels"
msgstr "ラベル"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"The generated manifests use the Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[recommended labels].\n"
"These labels can be customized using `quarkus.kubernetes.name`, `quarkus.kubernetes.version` and `quarkus.kubernetes.part-of`.\n"
"For example by adding the following configuration to your `application.properties`:"
msgstr "生成されたマニフェストには、Kubernetes link:https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels[推奨のラベル]が使用されます。これらのラベルは、 `quarkus.kubernetes.name`, `quarkus.kubernetes.version` および `quarkus.kubernetes.part-of` を使用してカスタマイズすることができます。例えば、 `application.properties` に以下の設定を追加してください:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"As is described in detail in the <<#openshift, OpenShift>> section, customizing OpenShift (or Knative) properties is done in the same way, but replacing\n"
"`kubernetes` with `openshift` (or `knative`). The previous example for OpenShift would look like this:"
msgstr "link:#openshift[OpenShift] のセクションで詳しく説明しているように、OpenShift (または Knative) のプロパティーのカスタマイズは同じ方法で行いますが、 `kubernetes` を `openshift` (または `knative` ) に置き換えます。OpenShiftに対する先ほどの例は次のようになります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The labels in generated resources will look like:"
msgstr "生成されたリソースのラベルは次のようになります:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "You can also remove the `app.kubernetes.io/version` label by applying the following configuration:"
msgstr "以下の設定を適用することで、 `app.kubernetes.io/version` のラベルを削除することもできます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Custom Labels"
msgstr "Custom Labels"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To add additional custom labels, for example `foo=bar` just apply the following configuration:"
msgstr "追加のカスタムラベルを追加するには、例えば `foo=bar` を設定する場合、以下の設定を適用するだけです。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "When using the `quarkus-container-image-jib` extension to build a container image, then any label added via the aforementioned property will also be added to the generated container image."
msgstr "`quarkus-container-image-jib` エクステンションモジュールを使用してコンテナーイメージを作成する場合、前述のプロパティーを介して追加されたラベルも生成されたコンテナーイメージに追加されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Annotations"
msgstr "アノテーション"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Out of the box, the generated resources will be annotated with version control related information that can be used either by tooling, or by the user for troubleshooting purposes."
msgstr "生成されたリソースにはバージョン管理に関連する情報がアノテーションされ、ツールによって、またはユーザーがトラブルシューティングの目的で使用することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Custom Annotations"
msgstr "カスタムアノテーション"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Custom annotations can be added in a way similar to labels.For example to add the annotation `foo=bar` and `app.quarkus/id=42` just apply the following configuration:"
msgstr "例えば、アノテーション `foo=bar` と `app.quarkus/id=42` を追加するには、次の設定を適用するだけです。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Environment variables"
msgstr "環境変数"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Kubernetes provides multiple ways of defining environment variables:"
msgstr "Kubernetesでは、環境変数を定義する方法が複数用意されています。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "key/value pairs"
msgstr "キー/値のペア"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "import all values from a Secret or ConfigMap"
msgstr "Secret または ConfigMap からすべての値をインポート"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "interpolate a single value identified by a given field in a Secret or ConfigMap"
msgstr "Secret または ConfigMap の指定されたフィールドで識別される単一の値を補間"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "interpolate a value from a field within the same resource"
msgstr "同じリソース内のフィールドから値を補間"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Environment variables from key/value pairs"
msgstr "キー/値のペアからの環境変数"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To add a key/value pair as an environment variable in the generated resources:"
msgstr "生成されたリソースに環境変数としてキーとバリューのペアを追加する場合:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"The command above will add `MY_ENV_VAR=foobar` as an environment variable.\n"
"Please note that the key `my-env-var` will be converted to uppercase and dashes will be replaced by underscores resulting in `MY_ENV_VAR`."
msgstr "上のコマンドは `MY_ENV_VAR=foobar` を環境変数として追加します。キー `my-env-var` は大文字に変換され、ダッシュはアンダースコアに置き換えられて `MY_ENV_VAR` となることに注意してください。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Environment variables from Secret"
msgstr "シークレットからの環境変数"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"To add all key/value pairs of `Secret` as environment variables just apply the following configuration, separating each `Secret`\n"
"to be used as source by a comma (`,`):"
msgstr "`Secret` のすべてのキーと値のペアを環境変数として追加するには、以下の設定を適用し、ソースとして使用する各 `Secret` をカンマ ( `,` ) で区切ってください。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "which would generate the following in the container definition:"
msgstr "とすると、コンテナーの定義に以下のようなものが生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The following extracts a value identified by the `keyName` field from the `my-secret` Secret into a `foo` environment variable:"
msgstr "以下は、 `my-secret` Secret から `keyName` フィールドで識別される値を `foo` 環境変数に抽出します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "This would generate the following in the `env` section of your container:"
msgstr "これにより、コンテナーの `env` セクションに以下のようなものが生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "It is also possible to add a prefix when you are generating env from Secret, the following configuration creates environment variable from Secret with key `foo` adding a prefix `BAR`:"
msgstr "Secret から env を生成するときに接頭辞を追加することもできます。次の設定では、接頭辞 `BAR` を追加したキー `foo` を使用して Secret から環境変数を作成します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Environment variables from ConfigMap"
msgstr "ConfigMap から環境変数を取得"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"To add all key/value pairs from `ConfigMap` as environment variables just apply the following configuration, separating each\n"
"`ConfigMap` to be used as source by a comma (`,`):"
msgstr "`ConfigMap` からのすべてのキーと値のペアを環境変数として追加するには、以下の設定を適用し、ソースとして使用する各 `ConfigMap` をカンマ ( `,` ) で区切ってください。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"The following extracts a value identified by the `keyName` field from the `my-config-map` ConfigMap into a `foo`\n"
"environment variable:"
msgstr "以下は、 `my-config-map` ConfigMap から `keyName` フィールドで識別される値を `foo` 環境変数に抽出したものです。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "It is also possible to add a prefix when you are generating env from ConfigMap, the following configuration creates environment variable from ConfigMap with key `foo` adding a prefix `BAR`:"
msgstr "ConfigMap から env を生成するときに接頭辞を追加することもできます。次の設定では、キー `foo` に接頭辞 `BAR` を追加して、ConfigMap から環境変数を作成します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Environment variables from fields"
msgstr "フィールドからの環境変数"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "It's also possible to use the value from another field to add a new environment variable by specifying the path of the field to be used as a source, as follows:"
msgstr "また、以下のように、ソースとして使用するフィールドのパスを指定することで、別のフィールドの値を使用して新しい環境変数を追加することも可能です。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"As is described in detail in the <<#openshift, OpenShift>> section, customizing OpenShift properties is done in the same way, but replacing\n"
"`kubernetes` with `openshift`. The previous example for OpenShift would look like this:"
msgstr "link:#openshift[OpenShift] の項で詳しく説明していますが、OpenShift のプロパティーのカスタマイズも同じ方法で行いますが、 `kubernetes` を `openshift` に置き換えます。OpenShiftの先ほどの例は次のようになります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Validation"
msgstr "バリデーション"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "A conflict between two definitions, e.g. mistakenly assigning both a value and specifying that a variable is derived from a field, will result in an error being thrown at build time so that you get the opportunity to fix the issue before you deploy your application to your cluster where it might be more difficult to diagnose the source of the issue."
msgstr "例えば、誤って両方の値を代入したり、変数がフィールドから派生したものであることを指定したりするなど、2つの定義の間で競合が発生すると、ビルド時にエラーが発生します。そのため、問題の原因を診断するのが困難なクラスターにアプリケーションをデプロイする前に問題を修正する機会を得ることができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Similarly, two redundant definitions, e.g. defining an injection from the same secret twice, will not cause an issue but will indeed report a warning to let you know that you might not have intended to duplicate that definition."
msgstr "同様に、同じシークレットからのインジェクションを2回定義するなど、2つの冗長な定義があっても問題は発生しませんが、その定義を複製することを意図していなかった可能性があることを知らせる警告が実際に報告されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Backwards compatibility"
msgstr "下位互換性"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Previous versions of the Kubernetes extension supported a different syntax to add environment variables. The older syntax is still supported but is deprecated, and it's advised that you migrate to the new syntax."
msgstr "Kubernetes エクステンションの以前のバージョンでは、環境変数を追加するための異なる構文をサポートしていました。古い構文はまだサポートされていますが、非推奨ですので、新しい構文に移行することをお勧めします。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Old vs. new syntax"
msgstr "古い構文と新しい構文"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Old"
msgstr "旧"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "New"
msgstr "新"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Plain variable"
msgstr "素の変数"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env-vars.my-env-var.value=foobar`"
msgstr "`quarkus.kubernetes.env-vars.my-env-var.value=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env.vars.my-env-var=foobar`"
msgstr "`quarkus.kubernetes.env.vars.my-env-var=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "From field"
msgstr "フィールドから"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env-vars.my-env-var.field=foobar`"
msgstr "`quarkus.kubernetes.env-vars.my-env-var.field=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env.fields.my-env-var=foobar`"
msgstr "`quarkus.kubernetes.env.fields.my-env-var=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "All from `ConfigMap`"
msgstr "すべての `ConfigMap` から"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env-vars.xxx.configmap=foobar`"
msgstr "`quarkus.kubernetes.env-vars.xxx.configmap=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env.configmaps=foobar`"
msgstr "`quarkus.kubernetes.env.configmaps=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "All from `Secret`"
msgstr "すべての `Secret` から"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env-vars.xxx.secret=foobar`"
msgstr "`quarkus.kubernetes.env-vars.xxx.secret=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env.secrets=foobar`"
msgstr "`quarkus.kubernetes.env.secrets=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "From one `Secret` field"
msgstr "ある `Secret` フィールドから"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env-vars.foo.secret=foobar`"
msgstr "`quarkus.kubernetes.env-vars.foo.secret=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env.mapping.foo.from-secret=foobar`"
msgstr "`quarkus.kubernetes.env.mapping.foo.from-secret=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env-vars.foo.value=field`"
msgstr "`quarkus.kubernetes.env-vars.foo.value=field`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env.mapping.foo.with-key=field`"
msgstr "`quarkus.kubernetes.env.mapping.foo.with-key=field`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "From one `ConfigMap` field"
msgstr "ある `ConfigMap` フィールドから"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env-vars.foo.configmap=foobar`"
msgstr "`quarkus.kubernetes.env-vars.foo.configmap=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus.kubernetes.env.mapping.foo.from-configmap=foobar`"
msgstr "`quarkus.kubernetes.env.mapping.foo.from-configmap=foobar`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"If you redefine the same variable using the new syntax while keeping the old syntax, **ONLY** the new version will be kept\n"
"and a warning will be issued to alert you of the problem.For example, if you define both\n"
"`quarkus.kubernetes.env-vars.my-env-var.value=foobar` and `quarkus.kubernetes.env.vars.my-env-var=newValue`, the extension will\n"
"only generate an environment variable `MY_ENV_VAR=newValue` and issue a warning."
msgstr "古い文法を残した状態で新しい文法を使って同じ変数を再定義した場合、 新しいバージョン **のみ** が保持され、問題を通知するために警告が発せられます。例えば、 `quarkus.kubernetes.env-vars.my-env-var.value=foobar` と `quarkus.kubernetes.env.vars.my-env-var=newValue` の両方を定義した場合、エクステンションは環境変数 `MY_ENV_VAR=newValue` のみを生成して警告を発します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Mounting volumes"
msgstr "ボリュームのマウント"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"The Kubernetes extension allows the user to configure both volumes and mounts for the application.\n"
"Any volume can be mounted with a simple configuration:"
msgstr "Kubernetes エクステンションを使用すると、アプリケーションのボリュームとマウントの両方を設定することができます。 簡単な設定で任意のボリュームをマウントすることができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"This will add a mount to the pod for volume `my-volume` to path `/where/to/mount`.\n"
"The volumes themselves can be configured as shown in the sections below."
msgstr "これにより、Pod のパス `/where/to/mount` にボリューム `my-volume` のマウントを追加します。 ボリューム自体は、以下のセクションに示すように設定することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Secret volumes"
msgstr "シークレットのボリューム"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "ConfigMap volumes"
msgstr "ConfigMap ボリューム"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Passing application configuration"
msgstr "アプリケーション設定の受け渡し"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Quarkus supports passing configuration from external locations (via SmallRye Config). This usually requires setting an additional environment variable or system property.\n"
"When you need to use a secret or a config map for the purpose of application configuration, you need to:"
msgstr ""
"Quarkus は、(Smallrye Config を介して) 外部の場所から設定を渡すことをサポートしています。これには通常、追加の環境変数またはシステムプロパティーを設定する必要があります。\n"
"アプリケーション設定の目的でシークレットまたは config map を使用する必要がある場合は、以下を行う必要があります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "define a volume"
msgstr "ボリュームを定義する"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "mount the volume"
msgstr "ボリュームをマウントする"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "create an environment variable for `SMALLRYE_CONFIG_LOCATIONS`"
msgstr "`SMALLRYE_CONFIG_LOCATIONS` の環境変数を作成する"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To simplify things, quarkus provides single step alternative:"
msgstr "物事を単純化するために、Quarkus はシングルステップの代替手段を提供しています。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "or"
msgstr "あるいは\n"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"When these properties are used, the generated manifests will contain everything required.\n"
"The application config volumes will be created using path: `/mnt/app-secret` and `/mnt/app-config-map` for secrets and configmaps respectively."
msgstr "これらのプロパティを使用すると、生成されたマニフェストには必要なものがすべて含まれます。 アプリケーションのコンフィグボリュームは、Secret と ConfigMap にそれぞれパスを使用して作成されます。Secret と ConfigMap  はそれぞれ `/mnt/app-secret` と `/mnt/app-config-map` を使用して作成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Note: Users may use both properties at the same time."
msgstr "注：ユーザーは両方のプロパティを同時に使用することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Changing the number of replicas"
msgstr "レプリカ数を変更する"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To change the number of replicas from 1 to 3:"
msgstr "レプリカ数を1から3に変更するためには次のようにします。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Add readiness and liveness probes"
msgstr "rediness および liveness プローブを追加する"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "By default, the Kubernetes resources do not contain readiness and liveness probes in the generated `Deployment`. Adding them however is just a matter of adding the SmallRye Health extension like so:"
msgstr "デフォルトでは、Kubernetesリソースは、生成された `Deployment` の中に readiness と liveness のプローブを含みません。しかし、これらを追加するには、以下のように SmallRye Health エクステンションを追加するだけです。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"The values of the generated probes will be determined by the configured health properties: `quarkus.smallrye-health.root-path`, `quarkus.smallrye-health.liveness-path` and `quarkus.smallrye-health.readiness-path`.\n"
"More information about the health extension can be found in the relevant xref:smallrye-health.adoc[guide]."
msgstr ""
"生成されたプローブの値は、設定されたヘルスプロパティー (`quarkus.smallrye-health.root-path`、`quarkus.smallrye-health.liveness-path` および `quarkus.smallrye-health.readiness-path`.) によって決定されます。\n"
"health エクステンションの詳細については、関連する xref:smallrye-health.adoc[ガイド] を参照してください。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Customizing the readiness probe"
msgstr "readiness probeのカスタマイズ"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To set the initial delay of the probe to 20 seconds and the period to 45:"
msgstr "プローブの初期遅延を 20 秒、周期を 45 秒に設定します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Add hostAliases"
msgstr "hostAliases の追加"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To add entries to a Pod's `/etc/hosts` file (more information can be found in https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/[Kubernetes documentation]), just apply the following configuration:"
msgstr "Podの `/etc/hosts`ファイルにエントリを追加するには(詳細は https://kubernetes.io/docs/concepts/services-networking/add-entries-to-pod-etc-hosts-with-host-aliases/[Kubernetes documentation] )、以下の設定を適用するだけです。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "This would generate the following `hostAliases` section in the `deployment` definition:"
msgstr "これにより、 `deployment`定義の中に以下の `hostAliases` セクションが生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Add nodeSelector"
msgstr "ノードセレクターの追加"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To add a nodeSelector in the generated `Deployment` (more information can be found in https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes[Kubernetes documentation]), just apply the following configuration:"
msgstr "以下の設定を適用するだけで、生成された `Deployment` に nodeSelector を追加できます (詳細は https://kubernetes.io/docs/tasks/configure-pod-container/assign-pods-nodes[Kubernetes ドキュメント] を参照)。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "This would generate the following `nodeSelector` section in the `deployment` definition:"
msgstr "これにより、`deployment` 定義に次の `nodeSelector` セクションが生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Container Resources Management"
msgstr "コンテナリソース管理"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "CPU & Memory limits and requests can be applied to a `Container` (more info in https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/[Kubernetes documentation]) using the following configuration:"
msgstr "CPUやメモリの制限やリクエストは、以下の設定で `Container` (詳細は https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/[Kubernetes documentation] を参照) に適用することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "This would generate the following entry in the `container` section:"
msgstr "これにより、 `container`セクションに以下のエントリが生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Exposing your application in Kubernetes"
msgstr "アプリケーションをKubernetesに公開"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Kubernetes exposes applications using https://kubernetes.io/docs/concepts/services-networking/ingress[Ingress resources]. To generate the Ingress resource, just apply the following configuration:"
msgstr "Kubernetes は、 https://kubernetes.io/docs/concepts/services-networking/ingress[Ingress リソース] を使用してアプリケーションを公開します。Ingress リソースを生成するには、次の設定を適用するだけです。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "This would generate the following Ingress resource:"
msgstr "この場合、以下のような Ingress リソースが生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "After deploying these resources to Kubernetes, the Ingress resource will allow unsecured connections to reach out your application."
msgstr "これらのリソースを Kubernetes にデプロイすると、Ingress リソースによって、セキュリティーで保護されていない接続がアプリケーションに到達できるようになります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Adding Ingress rules"
msgstr "Ingressルールの追加"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To customize the default `host` and `path` properties of the generated Ingress resources, you need to apply the following configuration:"
msgstr "生成されたIngressリソースのデフォルトの `host` 、 `path` プロパティをカスタマイズするには、次の設定を適用する必要があります："

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Additionally, you can also add new Ingress rules by adding the following configuration:"
msgstr "以下の設定を適用することで、新しいIngressルールを追加することもできます:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Securing the Ingress resource"
msgstr "Ingressリソースの保護"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To secure the incoming connections, Kubernetes allows enabling https://kubernetes.io/docs/concepts/services-networking/ingress/#tls[TLS] within the Ingress resource by specifying a Secret that contains a TLS private key and certificate. You can generate a secured Ingress resource by simply adding the \"tls.secret-name\" properties:"
msgstr "着信接続を保護するために、Kubernetes では、TLS 秘密鍵と証明書を含むシークレットを指定することで、Ingress リソース内で https://kubernetes.io/docs/concepts/services-networking/ingress/#tls[TLS] を有効にすることができます。 \"tls.secret-name\" プロパティーを追加するだけで、安全な Ingress リソースを生成できます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "This configuration will generate the following secured Ingress resource:"
msgstr "この設定では、以下のようなセキュアな Ingress リソースが生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Now, Kubernetes will validate all the incoming connections using SSL with the certificates provided within the secret with name \"my-secret\"."
msgstr "これで、Kubernetes は、 \"my-secret\" という名前のシークレット内で提供された証明書を使用して、SSL を使用してすべての着信接続を検証します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "More information about how to create the secret in https://kubernetes.io/docs/concepts/services-networking/ingress/#tls[here]."
msgstr "シークレットの作成方法の詳細については、 https://kubernetes.io/docs/concepts/services-networking/ingress/#tls[こちら] を参照してください。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Using the Kubernetes client"
msgstr "Kubernetes クライアントの使用"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Applications that are deployed to Kubernetes and need to access the API server will usually make use of the `kubernetes-client` extension:"
msgstr "Kubernetesにデプロイされ、APIサーバにアクセスする必要があるアプリケーションは、通常 `kubernetes-client` エクステンションを利用します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"To access the API server from within a Kubernetes cluster, some RBAC related resources are required (e.g. a ServiceAccount, a RoleBinding).\n"
"To ease the usage of the `kubernetes-client` extension, the `kubernetes` extension is going to generate a RoleBinding resource that binds a cluster role named \"view\" to the application ServiceAccount resource. It's important to note that the cluster role \"view\" won't be generated automatically, so it's expected that you have this cluster role with name \"view\" already installed in your cluster."
msgstr "Kubernetesクラスタ内からAPIサーバにアクセスするには、いくつかのRBAC関連リソースが必要です（ServiceAccountやRoleBindingなど）。 `kubernetes-client` エクステンションの使い方を簡単にするために、 `kubernetes` エクステンションは、\"view\"という名前のクラスタロールをアプリケーションのServiceAccountリソースにバインドするRoleBindingリソースを生成します。クラスタロール\"view\"は自動生成されないので、クラスタに\"view\"という名前のクラスタロールがすでにインストールされていることが期待されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "On the other hand, you can fully customize the roles, subjects and role bindings to generate using the properties under `quarkus.kubernetes.rbac.role-bindings`, and if present, the `kubernetes-client` extension will use it and hence won't generate any RoleBinding resource."
msgstr "一方、 `quarkus.kubernetes.rbac.role-bindings` のプロパティを使用して、生成するロール、サブジェクト、ロールバインディングを完全にカスタマイズすることができます。もし存在すれば、 `kubernetes-client` エクステンションはそれを使用するので、RoleBindingリソースは生成しません。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "You can disable the RBAC resources generation using the property `quarkus.kubernetes-client.generate-rbac=false`."
msgstr "You can disable the RBAC resources generation using the property `quarkus.kubernetes-client.generate-rbac=false`."

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Generating RBAC resources"
msgstr "RBACリソースの生成"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "In some scenarios, it's necessary to generate additional https://kubernetes.io/docs/reference/access-authn-authz/rbac/[RBAC] resources that are used by Kubernetes to grant or limit access to other resources. For example, in our use case, we are building https://kubernetes.io/docs/concepts/extend-kubernetes/operator/#operators-in-kubernetes[a Kubernetes operator] that needs to read the list of the installed deployments. To do this, we would need to assign a service account to our operator and link this service account with a role that grants access to the Deployment resources. Let's see how to do this using the `quarkus.kubernetes.rbac` properties:"
msgstr "シナリオによっては、Kubernetesが他のリソースへのアクセスを許可または制限するために使用される追加の link:https://kubernetes.io/docs/reference/access-authn-authz/rbac/[RBAC] リソースを生成する必要があります。例えば、今回のユースケースでは、インストールされているデプロイのリストを読む必要のある link:https://kubernetes.io/docs/concepts/extend-kubernetes/operator/#operators-in-kubernetes[Kubernetesオペレーター] を構築しています。これを行うには、オペレータにサービスアカウントを割り当て、このサービスアカウントとDeploymentリソースへのアクセスを許可するロールをリンクする必要があります。 `quarkus.kubernetes.rbac` のプロパティを使用して、この方法を確認してみましょう:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "In this example, the role \"my-role\" will be generated with a policy rule to get the list of deployments."
msgstr "この例では、デプロイメントのリストを取得するためのポリシールールを持つロール\"my-role\"が生成されることになります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "By default, if one role is configured, a RoleBinding resource will be generated as well to link this role with the ServiceAccount resource."
msgstr "デフォルトでは、1つのロールが設定されている場合、このロールとServiceAccountリソースをリンクするためのRoleBindingリソースも生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Moreover, you can have more control over the RBAC resources to be generated:"
msgstr "さらに、生成されるRBACリソースをよりコントロールすることができます:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "In this example, the role \"my-role\" will be generated with the specified policy rules."
msgstr "この例では、指定されたポリシールールでロール \"my-role\" が生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Also, the service account \"my-service-account\" will be generated."
msgstr "また、サービスアカウント \"my-service-account\" が生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "And we can configure the generated RoleBinding resource by selecting the role to be used and the subject."
msgstr "そして、生成されたRoleBindingリソースは、使用するロールとサブジェクトを選択することで設定することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Finally, we can also generate the cluster wide role resource of \"ClusterRole\" kind and a \"ClusterRoleBinding\" resource as follows:"
msgstr "最後に、以下のように\"ClusterRole\"種類のクラスタワイドロールリソースと\"ClusterRoleBinding\"リソースを生成することもできます:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "In this example, the cluster role \"my-cluster-role\" will be generated with the specified policy rules."
msgstr "この例では、指定されたポリシールールでクラスタロール\"my-cluster-role\"が生成されることになります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The name of the ClusterRole resource to use. Role resources are namespace-based and hence not allowed in ClusterRoleBinding resources."
msgstr "使用するClusterRoleリソースの名前です。Roleリソースは名前空間ベースであるため、ClusterRoleBindingリソースでは使用できません。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Deploying to local Kubernetes"
msgstr "ローカルKubernetesへのデプロイ"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"When deploying to local Kubernetes environments, users often perform minor changes to their manifests that simplify the development process.\n"
"The most common changes are:"
msgstr ""
"ローカルのKubernetes環境にデプロイするとき、ユーザーは開発プロセスを簡素化するために、マニフェストにマイナーな変更を行うことがよくあります。\n"
"最も一般的な変更は次のとおりです："

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Setting `imagePullPolicy` to `IfNotPresent`"
msgstr "`imagePullPolicy` に `IfNotPresent` をセット"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Using `NodePort` as `Service` type"
msgstr "`Service` のtypeとして `NodePort` を使用"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Quarkus provides extensions that among others set these options by default.\n"
"Such extensions are:"
msgstr ""
"Quarkusには、これらのオプションをデフォルトで設定するエクステンションがあります。\n"
"そのようなエクステンションは以下のとおりです："

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "quarkus-minikube"
msgstr "quarkus-minikube"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "quarkus-kind"
msgstr "quarkus-kind"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"If the list of extensions does not match the tool you are using (e.g. Docker Desktop, microk8s etc) then it is suggested to use the `quarkus-minikube` extension.\n"
"as its defaults should be reasonable for most environments."
msgstr ""
"エクステンションのリストが使用しているツール（例：Docker Desktop、microk8sなど）と一致しない場合は、 `quarkus-minikube` のエクステンションを使用することをお勧めします。\n"
"そのデフォルト値は殆どの環境で妥当なためです。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Deploying to Minikube"
msgstr "Minikube へのデプロイ"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"https://github.com/kubernetes/minikube[Minikube] is quite popular when a Kubernetes cluster is needed for development purposes. To make the deployment to Minikube\n"
"experience as frictionless as possible, Quarkus provides the `quarkus-minikube` extension. This extension can be added to a project like so:"
msgstr "https://github.com/kubernetes/minikube[Minikube] は、開発目的でKubernetesクラスタが必要な場合に非常に人気があります。Minikubeへのデプロイをできるだけ摩擦のないものにするために、Quarkusは `quarkus-minikube` エクステンションを提供しています。このエクステンションは、以下のようなプロジェクトに追加することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"The purpose of this extension is to generate Kubernetes manifests (`minikube.yaml` and `minikube.json`) that are tailored to Minikube.\n"
"This extension assumes a couple of things:"
msgstr "このエクステンションの目的は、Minikube に合わせた Kubernetes マニフェスト (`minikube.yaml` および `minikube.json`) を生成することです。このエクステンションは、いくつかのことを前提としています。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Users won't be using an image registry and will instead make their container image accessible to the Kubernetes cluster by building it directly\n"
"into Minikube's Docker daemon. To use Minikube's Docker daemon you must first execute:"
msgstr "ユーザーはイメージレジストリを使用せず、コンテナイメージをMinikubeのDockerデーモンに直接ビルドしてKubernetesクラスタにアクセスできるようにします。MinikubeのDockerデーモンを使用するには、まず実行する必要があります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Applications deployed to Kubernetes won't be accessed via a Kubernetes `Ingress`, but rather as a `NodePort` `Service`.\n"
"The advantage of doing this is that the URL of an application can be retrieved trivially by executing:"
msgstr "Kubernetesにデプロイされたアプリケーションは、Kubernetesの `Ingress` ではなく、 `NodePort` `Service` としてアクセスされます。 この方法の利点は、アプリケーションのURLを実行することで、アプリケーションのURLを簡単に取得できることです。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"To control the https://kubernetes.io/docs/concepts/services-networking/service/#nodeport[nodePort] that is used in this case, users can set `quarkus.kubernetes.node-port`.\n"
"Note however that this configuration is entirely optional because Quarkus will automatically use a proper (and non-changing) value if none is set."
msgstr "この場合に使用される https://kubernetes.io/docs/concepts/services-networking/service/#nodeport[nodePort] を制御するために、ユーザーは `quarkus.kubernetes.node-port` を設定することができます。 しかし、何も設定されていない場合、Quarkusは自動的に適切な（変更されない）値を使用するため、この設定は完全に任意であることに注意してください。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"It is highly discouraged to use the manifests generated by the Minikube extension when deploying to production as these manifests are intended for development purposes\n"
"only. When deploying to production, consider using the vanilla Kubernetes manifests (or the OpenShift ones when targeting OpenShift)."
msgstr "本番環境へのデプロイ時に Minikube エクステンションで生成されたマニフェストを使用することはまったくお勧めできません。本番環境にデプロイする場合は、バニラ Kubernetes マニフェスト (または OpenShift をターゲットにしている場合は OpenShift マニフェスト) の使用を検討してください。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"If the assumptions the Minikube extension makes don't fit your workflow, nothing prevents you from using the regular Kubernetes extension to generate Kubernetes manifests\n"
"and apply those to your Minikube cluster."
msgstr "Minikube エクステンションが想定している前提がワークフローに合わない場合、通常の Kubernetes エクステンションを使用して Kubernetes マニフェストを生成し、それを Minikube クラスタに適用することを妨げるものは何もありません。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Deploying to Kind"
msgstr "Kind へのデプロイメント"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"https://kind.sigs.k8s.io/[Kind] is another popular tool used as a Kubernetes cluster for development purposes. To make the deployment to Kind\n"
"experience as frictionless as possible, Quarkus provides the `quarkus-kind` extension. This extension can be added to a project like so:"
msgstr "https://kind.sigs.k8s.io/[Kind] は、開発目的で Kubernetes クラスターとして使用されるもう 1 つの一般的なツールです。Kind エクスペリエンスへのデプロイを可能な限りスムーズにするために、Quarkus は `quarkus-kind` エクステンションを提供します。このエクステンションは、次のようにプロジェクトに追加できます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"The purpose of this extension is to generate Kubernetes manifests (`kind.yaml` and `kind.json`) that are tailored to Kind and also to automate the process of loading images to the cluster\n"
"when performing container image builds. The tailor made manifests will be pretty similar (they share the same rules) with Minikube (see above)."
msgstr "このエクステンションの目的は、Kind に合わせた Kubernetes マニフェスト (`kind.yaml` と `kind.json`) を生成することと、コンテナーイメージのビルドを行う際にクラスターにイメージをロードする処理を自動化することにあります。テーラーメードのマニフェストは、Minikube (上記を参照) と非常によく似ています (同じルールを共有)。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Tuning the generated resources using application.properties"
msgstr "application.properties を使用して生成されたリソースをチューニングする"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"The Kubernetes extension allows tuning the generated manifest, using the `application.properties` file.\n"
"Here are some examples:"
msgstr "Kubernetes のエクステンションでは、 `application.properties` ファイルを使用して生成されたマニフェストをチューニングすることができます。 ここではいくつかの例を紹介します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Configuration options"
msgstr "設定オプション"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The table below describe all the available configuration options."
msgstr "以下の表は、利用可能なすべての設定オプションについて説明しています。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span>ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Properties that use non-standard types, can be referenced by expanding the property.\n"
"For example to define a `kubernetes-readiness-probe` which is of type `Probe`:"
msgstr "非標準型を使用するプロパティーは、プロパティーを展開することで参照することができます。例えば、 `Probe` 型の  `kubernetes-readiness-probe` を定義するには次のようにします。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"In this example `initial-delay` and `period` are fields of the type `Probe`.\n"
"Below you will find tables describing all available types."
msgstr "この例では、 `initial-delay` と `period` は `Probe` タイプのフィールドです。以下に、利用可能なすべてのタイプを説明した表を示します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Client Connection Configuration"
msgstr "クライアント接続の設定"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"You may need to configure the connection to your Kubernetes cluster.\n"
"By default, it automatically uses the active _context_ used by `kubectl`."
msgstr "Kubernetes クラスターへの接続の設定が必要な場合があります。デフォルトでは、 `kubectl` が使用するアクティブな _context_ が自動的に使用されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "For instance, if your cluster API endpoint uses a self-signed SSL Certificate you need to explicitly configure the client to trust it. You can achieve this by defining the following property:"
msgstr "たとえば、クラスター API のエンドポイントが自己署名入り SSL 証明書を使用している場合、それを信頼するようにクライアントを明示的に設定する必要があります。これを実現するには、以下のプロパティーを定義します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The full list of the Kubernetes client configuration properties is provided below."
msgstr "Kubernetes クライアント設定プロパティーの完全なリストを以下に示します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span> ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは、実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "OpenShift"
msgstr "OpenShift"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "One way to deploy an application to OpenShift is to use s2i (source to image) to create an image stream from the source and then deploy the image stream:"
msgstr "アプリケーションを OpenShift にデプロイする方法の1つとして、s2i(source to image)を使用してソースからイメージストリームを作成し、イメージストリームをデプロイする方法があります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "CLI"
msgstr "コマンドラインインタフェース"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Maven"
msgstr "Maven"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Gradle"
msgstr "Gradle"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "See further information in xref:deploying-to-openshift.adoc[Deploying to OpenShift]."
msgstr "詳細は xref:deploying-to-openshift.adoc[Deploying to OpenShift] を参照してください。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
#, fuzzy
msgid "A description of OpenShift resources and customisable properties is given below alongside Kubernetes resources to show similarities where applicable.   This includes an alternative to  `oc new-app ...` above, i.e. `oc apply -f target/kubernetes/openshift.json` ."
msgstr "OpenShift リソースとカスタマイズ可能なプロパティの説明は、Kubernetes リソースと並べて以下に示します。これには、上記の `oc new-app …​` の代替、つまり `oc apply -f target/kubernetes/openshift.json` も含まれます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To enable the generation of OpenShift resources, you need to include OpenShift in the target platforms:"
msgstr "OpenShift リソースの生成を有効にするには、ターゲットプラットフォームに OpenShift を含める必要があります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "If you need to generate resources for both platforms (vanilla Kubernetes and OpenShift), then you need to include both (comma separated)."
msgstr "両方のプラットフォーム(バニラKubernetesとOpenShift)のリソースを生成する必要がある場合は、両方を含める必要があります(カンマ区切り)。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Following the execution of `./mvnw package -Dquarkus.container-image.build=true` you will notice amongst the other files that are created, two files named\n"
"`openshift.json` and `openshift.yml` in the `target/kubernetes/` directory."
msgstr "`./mvnw package -Dquarkus.container-image.build=true` の実行後に、作成された他のファイルの中に `openshift.json` と `openshift.yml` という名前の 2 つのファイルが `target/kubernetes/` ディレクトリーにあることに気づくでしょう。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "These manifests can be deployed as is to a running cluster, using `kubectl`:"
msgstr "これらのマニフェストは、 `kubectl` を使用して、実行中のクラスターにそのままデプロイすることができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "OpenShift's users might want to use `oc` rather than `kubectl`:"
msgstr "OpenShift のユーザーは、kubectl ではなく oc を使用したい場合があります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"For users that prefer to keep the `application.properties` independent of the deployment platform, the deployment target can be specified directly in the deploy command by adding `-Dquarkus.kubernetes.deployment-target=openshift`\n"
"in addition to `-Dquarkus.kubernetes.deploy=true`. Furthermore, Quarkus allows collapsing the two properties into one: `-Dquarkus.openshift.deploy=true`."
msgstr "`application.properties` をデプロイメントプラットフォームから独立させたいユーザーのために、 `-Dquarkus.kubernetes.deploy=true` に加えて `-Dquarkus.kubernetes.deployment-target=openshift` を追加することで、デプロイコマンドでデプロイメントターゲットを直接指定することができます。さらに、Quarkusでは、この2つのプロパティを1つにまとめることができます（ `-Dquarkus.openshift.deploy=true` ）。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The equivalent with gradle:"
msgstr "gradleでの同等コマンド:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "In case that both properties are used with conflicting values `quarkus.kubernetes.deployment-target` is used."
msgstr "両プロパティが相反する値で使用されている場合、 `quarkus.kubernetes.deployment-target` が使用されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Quarkus also provides the xref:deploying-to-openshift.adoc[OpenShift] extension. This extension is basically a wrapper around the Kubernetes extension and\n"
"relieves OpenShift users of the necessity of setting the `deployment-target` property to `openshift`"
msgstr "Quarkus は xref:deploying-to-openshift.adoc[OpenShift] エクステンションも提供しています。このエクステンションは、基本的に Kubernetes エクステンションのラッパーであり、これにより、OpenShift ユーザーは `deployment-target` プロパティーを `openshift` に設定する必要がなくなります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The OpenShift resources can be customized in a similar approach with Kubernetes."
msgstr "Kubernetesと同様のアプローチでOpenShiftのリソースをカスタマイズすることができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-2\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span> ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは、実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-2\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Knative"
msgstr "Knative"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To enable the generation of Knative resources, you need to include Knative in the target platforms:"
msgstr "Knative リソースの生成を可能にするには、ターゲットプラットフォームに Knative を含める必要があります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Following the execution of `./mvnw package` you will notice amongst the other files that are created, two files named\n"
"`knative.json` and `knative.yml` in the `target/kubernetes/` directory."
msgstr "`./mvnw package` の実行後、作成された他のファイルの中に `knative.json` と `knative.yml` という名前のファイルが `target/kubernetes/` ディレクトリーにあることに気づくでしょう。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "If you look at either file you will see that it contains a Knative `Service`."
msgstr "どちらかのファイルを見ると、Knative `Service` が含まれることが確認できます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The full source of the `knative.json` file looks something like this:"
msgstr "`knative.json` ファイルの完全なソースはこんな感じです。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The generated manifest can be deployed as is to a running cluster, using `kubectl`:"
msgstr "生成されたマニフェストは、 `kubectl` を使用して、実行中のクラスターにそのままデプロイすることができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The generated service can be customized using the following properties:"
msgstr "生成されたサービスは、以下のプロパティーを使用してカスタマイズすることができます:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-3\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"ビルド時に固定\"></i></span> ビルド時に固定される設定プロパティ - 他のすべての設定プロパティは、実行時にオーバーライド可能 <input type=\"search\" id=\"config-search-3\" placeholder=\"FILTER CONFIGURATION\" disabled>"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Deployment targets"
msgstr "デプロイメントターゲット"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Mentioned in the previous sections was the concept of `deployment-target`. This concept allows users to control which Kubernetes manifests will be generated\n"
"and deployed to a cluster (if `quarkus.kubernetes.deploy` has been set to `true`)."
msgstr "前のセクションで述べたのは `deployment-target` という概念です。この概念により、ユーザーはどの Kubernetes マニフェストを生成してクラスターにデプロイするかを制御することができます ( `quarkus.kubernetes.deploy` が `true` に設定されている場合)。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"By default, when no `deployment-target` is set, then only vanilla Kubernetes resources are generated and deployed. When multiple values are set (for example\n"
"`quarkus.kubernetes.deployment-target=kubernetes,openshift`) then the resources for all targets are generated, but only the resources\n"
"that correspond to the *first* target are applied to the cluster (if deployment is enabled)."
msgstr "デフォルトでは、 `deployment-target` が設定されていない場合は、バニラ Kubernetes リソースのみが生成され、デプロイされます。複数の値が設定されている場合 (例: `quarkus.kubernetes.deployment-target=kubernetes,openshift` )、すべてのターゲットのリソースが生成されますが、 *最初* のターゲットに対応するリソースのみがクラスターに適用されます (デプロイが有効な場合)。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"For users that prefer to keep the `application.properties` independent of the deployment platform, the deployment target can be specified directly in the deploy command by adding `-Dquarkus.kubernetes.deployment-target=knative`\n"
"in addition to `-Dquarkus.knative.deploy=true`. Furthermore, Quarkus allows collapsing the two properties into one: `-Dquarkus.knative.deploy=true`."
msgstr "`application.properties` をデプロイメントプラットフォームから独立させたいユーザーのために、 `-Dquarkus.knative.deploy=true` に加えて `-Dquarkus.kubernetes.deployment-target=knative` を追加することで、デプロイコマンドでデプロイメントターゲットを直接指定することができます。さらに、Quarkusでは、この2つのプロパティを1つにまとめることができます（ `-Dquarkus.knative.deploy=true` ）。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "In case that both properties are used with conflicting values `-Dquarkus.kubernetes.deployment-target` is used."
msgstr "両プロパティが相反する値で使用されている場合、 `-Dquarkus.kubernetes.deployment-target` が使用されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"In the case of wrapper extensions like OpenShift and Minikube, when these extensions have been explicitly added to the project, the default `deployment-target`\n"
"is set by those extensions. For example if `quarkus-minikube` has been added to a project, then `minikube` becomes the default deployment target and its\n"
"resources will be applied to the Kubernetes cluster when deployment via `quarkus.kubernetes.deploy` has been set.\n"
"Users can still override the deployment-targets manually using `quarkus.kubernetes.deployment-target`."
msgstr "OpenShiftやMinikubeのようなラッパーエクステンションの場合、これらのエクステンションがプロジェクトに明示的に追加されているときは、それらのエクステンションによってデフォルトの `deployment-target` が設定されます。例えば、 `quarkus-minikube` がプロジェクトに追加されている場合、 `minikube` がデフォルトのデプロイメントターゲットになり、 `quarkus.kubernetes.deploy` 経由のデプロイメントが設定されていると、そのリソースが Kubernetes クラスターに適用されます。ユーザーは、 `quarkus.kubernetes.deployment-target` を使用して手動でディプロイメント ターゲットを上書きすることもできます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Deprecated configuration"
msgstr "非推奨の設定"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The following categories of configuration properties have been deprecated."
msgstr "以下のカテゴリの設定プロパティーは非推奨となりました。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Properties without the quarkus prefix"
msgstr "quarkus接頭辞のないプロパティー"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "In earlier versions of the extension, the `quarkus.` was missing from those properties. These properties are now deprecated."
msgstr "以前のバージョンのエクステンションでは、これらのプロパティーに `quarkus.` がありませんでした。これらのプロパティーは現在非推奨となっています。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Docker and S2i properties"
msgstr "Docker と S2i のプロパティー"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The properties for configuring `docker` and `s2i` are also deprecated in favor of the new container-image extensions."
msgstr "`docker` と `s2i` を設定するためのプロパティーも非推奨となり、新しいコンテナーイメージエクステンションが採用されました。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Config group arrays"
msgstr "コンフィググループ配列"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Properties referring to config group arrays (e.g. `kubernetes.labels[0]`, `kubernetes.env-vars[0]` etc) have been converted to Maps to align with the rest of the Quarkus ecosystem."
msgstr "設定グループ配列を参照するプロパティー (例: `kubernetes.labels0`、 `kubernetes.env-vars0` など) は、Quarkus エコシステムの残りの部分に合わせてマップに変換されました。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The code below demonstrates the change in `labels` config:"
msgstr "以下のコードは `labels` の設定を変更した様子を示しています:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The code below demonstrates the change in `env-vars` config:"
msgstr "以下のコードは `env-vars` の設定を変更した様子を示しています:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`env-vars` properties"
msgstr "env-vars プロパティー"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"`quarkus.kubernetes.env-vars` are deprecated (though still currently supported as of this writing) and the new declaration style should be used instead.\n"
"See <<#env-vars>> and more specifically <<env-vars-backwards>> for more details."
msgstr "`quarkus.kubernetes.env-vars` は非推奨です(この記事を書いている時点ではまだサポートされていますが)ので、代わりに新しい宣言スタイルを使うべきです。詳細は link:#env-vars[[env-vars]] とより具体的には link:#env-vars-backwards[[env-vars-backwards] ] を参照してください。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Deployment"
msgstr "デプロイメント"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"To trigger building and deploying a container image you need to enable the `quarkus.kubernetes.deploy` flag (the flag is disabled by default - furthermore it has no effect during test runs or dev mode).\n"
"This can be easily done with the command line:"
msgstr "コンテナーイメージをビルドしてデプロイするには、 `quarkus.kubernetes.deploy` フラグを有効にする必要があります (このフラグはデフォルトでは無効になっています - さらに、テスト実行中や開発モードでは何の効果もありません)。これはコマンドラインで簡単に行えます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Building a container image"
msgstr "コンテナーイメージのビルド"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Building a container image is possible, using any of the 3 available `container-image` extensions:"
msgstr "コンテナーイメージのビルドは、利用可能な3つの `container-image` エクステンションのいずれかを使用して可能です。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "xref:container-image.adoc#docker[Docker]"
msgstr "xref:container-image.adoc#docker[Docker]"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "xref:container-image.adoc#jib[Jib]"
msgstr "xref:container-image.adoc#jib[Jib]"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "xref:container-image.adoc#s2i[s2i]"
msgstr "xref:container-image.adoc#s2i[s2i]"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Each time deployment is requested, a container image build will be implicitly triggered (no additional properties are required when the Kubernetes deployment has been enabled)."
msgstr "デプロイが要求されるたびに、暗黙のうちにコンテナーイメージのビルドがトリガーされます(Kubernetes のデプロイが有効になっている場合は、追加のプロパティーは必要ありません)。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Deploying"
msgstr "デプロイ"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"When deployment is enabled, the Kubernetes extension will select the resources specified by `quarkus.kubernetes.deployment-target` and deploy them.\n"
"This assumes that a `.kube/config` is available in your user directory that points to the target Kubernetes cluster.\n"
"In other words the extension will use whatever cluster `kubectl` uses. The same applies to credentials."
msgstr "デプロイメントを有効にすると、Kubernetes エクステンションは `quarkus.kubernetes.deployment-target` で指定されたリソースを選択してデプロイします。これは、ターゲットの Kubernetes クラスターを指す `.kube/config` がユーザーディレクトリーで利用可能であることを前提としています。言い換えれば、エクステンションは `kubectl` が使用しているクラスターであればどれでも使用します。これは、クレデンシャルについても当てはまります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "At the moment no additional options are provided for further customization."
msgstr "現在のところ、さらなるカスタマイズのための追加オプションは提供されていません。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Remote Debugging"
msgstr "リモートデバッグ"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To remotely debug applications that are running on a kubernetes environment, we need to deploy the application as described in the previous section and add as new property: `quarkus.kubernetes.remote-debug.enabled=true`. This property will automatically configure the Java application to append the java agent configuration (for example: `-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005`) and also the service resource to listen using the java agent port."
msgstr "kubernetes 環境で動作しているアプリケーションをリモートでデバッグするには、前のセクションで説明したようにアプリケーションをデプロイし、新しいプロパティー (`quarkus.kubernetes.remote-debug.enabled=true`) として追加する必要があります。このプロパティーは、Java アプリケーションを自動的に設定し、Java エージェント設定 (例: `-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005`) だけでなく、Java エージェントポートを使ってリッスンするサービスリソースも追加します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "After your application has been deployed with the debug enabled, next you need to tunnel the traffic from your local host machine to the specified port of the java agent:"
msgstr "デバッグを有効にした状態でアプリケーションをデプロイしたら、次に、ローカルホストマシンから java エージェントの指定されたポートにトラフィックをトンネルする必要があります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Using this command, you'll forward the traffic from the \"localhost:5005\" to the kubernetes service running the java agent using the port \"5005\" which is the one that the java agent uses by default for remote debugging. You can also configure another java agent port using the property `quarkus.kubernetes.remote-debug.address-port`."
msgstr "このコマンドを使用すると、java エージェントがリモートデバッグ用にデフォルトで使用するポート \"5005\" を使用して、\"localhost:5005\" からのトラフィックを java エージェントを実行している kubernetes サービスに転送することになります。プロパティー `quarkus.kubernetes.remote-debug.address-port` を使用して、別の java エージェントポートを設定することも可能です。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Finally, all you need to do is to configure your favorite IDE to attach the java agent process that is forwarded to `localhost:5005` and start to debug your application. For example, in IntelliJ IDEA, you can follow https://www.jetbrains.com/help/idea/tutorial-remote-debug.html[this tutorial] to debug remote applications."
msgstr "最後に、やらなければならないのは、 `localhost:5005` に転送される java エージェントプロセスをアタッチするようにお気に入りの IDE を設定し、アプリケーションのデバッグを開始することだけです。たとえば、IntelliJ IDEA では、 https://www.jetbrains.com/help/idea/tutorial-remote-debug.html:[このチュートリアル] に従って、リモートアプリケーションのデバッグを行うことができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Using existing resources"
msgstr "既存のリソースの利用"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Sometimes it's desirable to either provide additional resources (e.g. a ConfigMap, a Secret, a Deployment for a database) or provide custom ones that will be used as a `base` for the generation process.\n"
"Those resources can be added under `src/main/kubernetes` directory and can be named after the target environment (e.g. kubernetes.json, openshift.json, knative.json, or the yml equivalents). The correlation between provided and generated files is done by file name.\n"
"So, a `kubernetes.json`/`kubernetes.yml` file added in `src/main/kubernetes` will only affect the generated `kubernetes.json`/`kubernetes.yml`. An `openshift.json`/`openshift.yml` file added in `src/main/kubernetes` will only affect the generated `openshift.json`/`openshift.yml`.\n"
"A `knative.json`/`knative.yml` file added in `src/main/kubernetes` will only affect the generated `knative.json`/`knative.yml` and so on. The provided file may be either in json or yaml format and may contain one or more resources. These resources will end up in both generated formats (json and yaml). For example, a secret added in `src/main/kubernetes/kubernetes.yml` will be added to both the generated `kubernetes.yml` and `kubernetes.json`."
msgstr "追加のリソース (ConfigMap、Secret、データベースの Deployment など) を提供するか、生成プロセスのベースとして使用されるカスタムリソースを提供することが望ましい場合があります。これらのリソースは `src/main/kubernetes` ディレクトリーの下に追加でき、ターゲット環境にちなんだ名前を付けることができます (例: kubernetes.json、openshift.json、knative.json、または同等の yml)。提供されたファイルと生成されたファイルの関連付けは、ファイル名によって行われます。したがって、 `src/main/kubernetes` に追加された `kubernetes.json`/`kubernetes.yml` ファイルは、生成された `kubernetes.json`/`kubernetes.yml` にのみ影響します。 `src/main/kubernetes` に追加された `openshift.json`/`openshift.yml` ファイルは、生成された `openshift.json`/`openshift.yml` にのみ影響します。 `src/main/kubernetes` に追加された `knative.json`/`knative.yml` ファイルは、生成された `knative.json`/`knative.yml` などにのみ影響します。提供されるファイルは、json または yaml 形式のいずれかで、1 つ以上のリソースが含まれる場合があります。これらのリソースは、生成された両方の形式 (json と yaml) になります。たとえば、 `src/main/kubernetes/kubernetes.yml` に追加されたシークレットは、生成された `kubernetes.yml` と `kubernetes.json` の両方に追加されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Note: At the time of writing there is no mechanism in place that allows a one-to-many relationship between provided and generated files. Minikube is not an exception to the rule above, so if you want to customize the generated minikube manifests, the file placed under `src/main/kubernetes` will have to be named `minikube.json` or `minikube.yml` (naming it `kubernetes.yml` or `kubernetes.json` will result in having only the generated `kubernetes.yml` and `kubernetes.json` affected)."
msgstr "注記: 執筆時点では、提供ファイルと生成ファイルの間に一対多の関係を可能にするメカニズムは存在しません。Minikube も上記の例外ではないため、生成された minikube マニフェストをカスタマイズしたい場合は、 `src/main/kubernetes` 配下のファイルの名前を `minikube.json` または `minikube.yml` にしなければなりません (名前を `kubernetes.yml` または `kubernetes.json` にすると、生成した `kubernetes.yml` と `kubernetes.json` のみが影響を受けることになります)。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid ""
"Any resource found will be added in the generated manifests. Global modifications (e.g. labels, annotations) will also be applied to those resources.\n"
"If one of the provided resources has the same name as one of the generated ones, then the generated resource will be created on top of the provided resource, respecting existing content when possible (e.g. existing labels, annotations, environment variables, mounts, replicas etc)."
msgstr "見つかったリソースは、生成されたマニフェストに追加されます。グローバルな変更 (ラベルやアノテーションなど) は、それらのリソースにも適用されます。提供されたリソースの一つが、生成されたリソースの一つと同じ名前を持つ場合、生成されたリソースは提供されたリソースの上に作成され、可能な限り既存のコンテンツ (既存のラベル、アノテーション、環境変数、マウント、レプリカなど) を尊重します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The name of the resource is determined by the application name and may be overridden by `quarkus.kubernetes.name`, `quarkus.openshift.name` and `quarkus.knative.name`."
msgstr "リソースの名前はアプリケーション名によって決定され、 `quarkus.kubernetes.name` 、 `quarkus.openshift.name` 、 `quarkus.knative.name` で上書きすることができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "For example, in the `kubernetes-quickstart` application, we can add a `kubernetes.yml` file in the `src/main/kubernetes` that looks like:"
msgstr "例えば、 `kubernetes-quickstart` アプリケーションでは、 `src/main/kubernetes` の中に `kubernetes.yml` のようなファイルを追加することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The generated `kubernetes.yml` will look like:"
msgstr "生成された `kubernetes.yml` は以下のようになります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The provided replicas,"
msgstr "提供されたレプリカ"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "labels and"
msgstr "ラベルおよび"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "environment variables were retained."
msgstr "環境変数は保持されました。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "However, the image and"
msgstr "しかし、イメージと"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "the container port were modified."
msgstr "コンテナーポートが変更されました。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Moreover, the default annotations have been added."
msgstr "さらに、デフォルトのアノテーションが追加されました。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "When the resource name does not match the application name (or the overridden name) rather than reusing the resource a new one will be added. Same goes for the container."
msgstr "リソース名がアプリケーション名 (またはオーバーライドされた名前) と一致しない場合、リソースを再利用するのではなく、新しいものが追加されます。これは、コンテナについても当てはまります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "When the name of the container does not match the application name (or the overridden name), container specific configuration will be ignored."
msgstr "コンテナ名がアプリケーション名 (またはオーバーライドされた名前) と一致しない場合、コンテナ固有の設定は無視されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Using common resources"
msgstr "共通のリソースの利用"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "When generating the manifests for multiple deployment targets like Kubernetes, OpenShift or Knative, we can place the common resources in `src/main/kubernetes/common.yml`, so these resources will be integrated into the generated `kubernetes.json`/`kubernetes.yml`, and `openshift.json`/`openshift.yml` files (if you configure the Kubernetes and OpenShift extensions at the same time)."
msgstr "Kubernetes、OpenShift、Knative など複数のデプロイメントターゲット用のマニフェストを生成する場合、共通リソースを `src/main/kubernetes/common.yml` に配置することで、これらのリソースは生成された `kubernetes.json`/`kubernetes.yml` ファイルおよび `openshift.json`/`openshift.yml` ファイルに統合されます (Kubernetes および OpenShift エクステンションを同時に設定した場合）。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "For example, we can write a ConfigMap resource only once in the file `src/main/kubernetes/common.yml`:"
msgstr "例えば、ConfigMapリソースをファイル `src/main/kubernetes/common.yml` に一度だけ書き込むことができます:"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "And this config map resource will be integrated into the generated `kubernetes.json`/`kubernetes.yml`, and `openshift.json`/`openshift.yml` files."
msgstr "そして、このconfig mapリソースは、生成された `kubernetes.json `/ `kubernetes.yml `, および `openshift.json `/ `openshift.yml` ファイルに統合されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Service Binding"
msgstr "サービスバインディング"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Quarkus supports the link:https://github.com/servicebinding/spec[Service Binding Specification for Kubernetes] to bind services to applications."
msgstr "Quarkus は、サービスをアプリケーションにバインドするために、link:https://github.com/servicebinding/spec[Service Binding Specification for Kubernetes] をサポートします。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Specifically, Quarkus implements the link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] part of the specification, therefore allowing applications to bind to services, such as a Database or a Broker, without the need for user configuration."
msgstr "具体的には、Quarkus は、仕様の link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] の部分を実装しているため、アプリケーションから Database または Broker などのサービスに、ユーザー設定なしでバインドすることができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To enable Service Binding for supported extensions, add the `quarkus-kubernetes-service-binding` extension to the application dependencies."
msgstr "サポートされるエクステンションの Service Binding を有効にするには、 `quarkus-kubernetes-service-binding` エクステンションをアプリケーションの依存関係に追加します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The following extensions can be used with Service Binding and are supported for Workload Projection:"
msgstr "Service Binding では、以下のエクステンションを使用でき、Workload Projection に対応しています。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-jdbc-mariadb`"
msgstr "`quarkus-jdbc-mariadb`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-jdbc-mssql`"
msgstr "`quarkus-jdbc-mssql`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-jdbc-mysql`"
msgstr "`quarkus-jdbc-mysql`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-jdbc-postgresql`"
msgstr "`quarkus-jdbc-postgresql`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-mongodb-client`"
msgstr "`quarkus-mongodb-client`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-kafka-client`"
msgstr "`quarkus-kafka-client`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-messaging-kafka`"
msgstr "`quarkus-messaging-kafka`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-reactive-db2-client`"
msgstr "`quarkus-reactive-db2-client`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-reactive-mssql-client`"
msgstr "`quarkus-reactive-mssql-client`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-reactive-mysql-client`"
msgstr "`quarkus-reactive-mysql-client`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-reactive-oracle-client`"
msgstr "`quarkus-reactive-oracle-client`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-reactive-pg-client`"
msgstr "`quarkus-reactive-pg-client`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`quarkus-infinispan-client`"
msgstr "`quarkus-infinispan-client`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Workload Projection"
msgstr "Workload Projection"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Workload Projection is a process of obtaining the configuration for services from the Kubernetes cluster. This configuration takes the form of directory structures that follow certain conventions and is attached to an application or to a service as a mounted volume. The `kubernetes-service-binding` extension uses this directory structure to create configuration sources, which allows you to configure additional modules, such as databases or message brokers."
msgstr "Workload Projection は、Kubernetes クラスターからのサービスの設定を取得するプロセスです。この設定は、特定の規約に従ったディレクトリー構造の形式をとり、アプリケーションまたはサービスにマウントされたボリュームとしてアタッチされます。 `kubernetes-service-binding` エクステンションは、このディレクトリー構造を利用して設定ソースを作成し、これにより、データベースやメッセージブローカーなどの追加モジュールを設定することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "During application development, users can use workload projection to connect their application to a development database, or other locally-run services, without changing the actual application code or configuration."
msgstr "アプリケーションの開発中、ユーザーは Workload Projection を使用して、実際のアプリケーションコードや設定を変更することなく、開発用データベースやその他のローカルで実行されるサービスにアプリケーションを接続することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "For an example of a workload projection where the directory structure is included in the test resources and passed to integration test, see the link:https://github.com/quarkusio/quarkus/tree/e7efe6b3efba91b9c4ae26f9318f8397e23e7505/integration-tests/kubernetes-service-binding-jdbc/src/test/resources/k8s-sb[Kubernetes Service Binding datasource] GitHub repository."
msgstr "ディレクトリー構造をテストリソースに含めて統合テストに渡すワークロードの投影の例については、link:https://github.com/quarkusio/quarkus/tree/e7efe6b3efba91b9c4ae26f9318f8397e23e7505/integration-tests/kubernetes-service-binding-jdbc/src/test/resources/k8s-sb[Kubernetes Service Binding datasource] GitHub リポジトリーを参照してください。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The `k8s-sb` directory is the root of all service bindings. In this example, only one database called `fruit-db` is intended to be bound. This binding database has the `type` file, that indicates `postgresql` as the database type, while the other files in the directory provide the necessary information to establish the connection."
msgstr "`k8s-sb` ディレクトリーは、すべてのサービスバインディングの root です。この例では、 `fruit-db` と呼ばれる 1 つのデータベースのみをバインドすることを意図しています。このバインディングデータベースには、データベースタイプとして `postgresql` を示す `type` ファイルがあり、ディレクトリー内の他のファイルは、接続を確立するために必要な情報を提供します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "After your Quarkus project obtains information from `SERVICE_BINDING_ROOT` environment variables that are set by OpenShift, you can locate generated configuration files that are present in the file system and use them to map the configuration-file values to properties of certain extensions."
msgstr "Quarkus プロジェクトが、OpenShift によって設定された `SERVICE_BINDING_ROOT` 環境変数から情報を取得した後、ファイルシステム内に存在する生成された設定ファイルを探し出し、設定ファイルの値を特定のエクステンションのプロパティーにマッピングするために使用することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Introduction to the Service Binding Operator"
msgstr "サービスバインディング Operator の紹介"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The link:https://github.com/redhat-developer/service-binding-operator[Service Binding Operator] is an Operator that implements link:https://github.com/servicebinding/spec[Service Binding Specification for Kubernetes] and is meant to simplify the binding of services to an application. Containerized applications that support link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] obtain service binding information in the form of volume mounts. The Service Binding Operator reads binding service information and mounts it to the application containers that need it."
msgstr "link:https://github.com/redhat-developer/service-binding-operator[Service Binding Operator] は、link:https://github.com/k8s-service-bindings/spec[Service Binding Specification for Kubernetes] を実装する Operator で、アプリケーションへのサービスのバインディングを簡素化するためのものです。link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] をサポートするコンテナ型アプリケーションは、サービスバインディング情報をボリュームマウントの形で取得します。Service Binding Operator は、バインディングサービス情報を読み取り、それを必要とするアプリケーションコンテナにマウントします。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The correlation between application and bound services is expressed through the `ServiceBinding` resources, which declares the intent of what services are meant to be bound to what application."
msgstr "アプリケーションとバインドされたサービスの相関は `ServiceBinding` リソースによって表現され、これにより、どのサービスがどのアプリケーションにバインドされるかという意図が宣言されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The Service Binding Operator watches for `ServiceBinding` resources, which inform the Operator what applications are meant to be bound with what services. When a listed application is deployed, the Service Binding Operator collects all the binding information that must be passed to the application, then upgrades the application container by attaching a volume mount with the binding information."
msgstr "Service Binding Operator は `ServiceBinding` リソースを監視し、どのアプリケーションがどのサービスとバインドされるべきかを Operator に知らせます。リストされたアプリケーションがデプロイされると、Service Binding Operator はアプリケーションに渡さなければならないすべてのバインディング情報を収集し、バインディング情報でボリュームマウントをアタッチしてアプリケーションコンテナーをアップグレードします。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The Service Binding Operator completes the following actions:"
msgstr "Service Binding Operator は、以下の操作を実施します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Observes `ServiceBinding` resources for workloads intended to be bound to a particular service"
msgstr "特定のサービスにバインドされることを意図したワークロードの `ServiceBinding` リソースを観察する"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Applies the binding information to the workload using volume mounts"
msgstr "ボリュームマウントを使用して、ワークロードにバインド情報を適用する"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The following chapter describes the automatic and semi-automatic service binding approaches and their use cases. With either approach, the `kubernetes-service-binding` extension generates a `ServiceBinding` resource. With the semi-automatic approach, users must provide a configuration for target services manually. With the automatic approach, for a limited set of services generating the `ServiceBinding` resource, no additional configuration is needed."
msgstr "次の章では、自動および半自動のサービスバインディングのアプローチとそのユースケースについて説明します。どちらのアプローチでも、 `kubernetes-service-binding` エクステンションは、 `ServiceBinding` リソースを生成します。半自動アプローチでは、ユーザーはターゲットサービスの設定を手動で提供する必要があります。自動アプローチでは、 `ServiceBinding` リソースを生成する限定されたサービスセットの場合、追加の設定は必要ありません。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Semi-automatic service binding"
msgstr "半自動のサービスバインディング"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "A service binding process starts with a user specification of required services that will be bound to a certain application. This expression is summarized in the `ServiceBinding` resource that is generated by the `kubernetes-service-binding` extension. The use of the `kubernetes-service-binding` extensions helps users to generate `ServiceBinding` resources with minimal configuration, therefore simplifying the process overall."
msgstr "サービスバインディングのプロセスは、あるアプリケーションにバインドされる必要なサービスをユーザーが指定するところから始まります。この表現は、 `kubernetes-service-binding` エクステンションによって生成される `ServiceBinding` リソースに要約されています。 `kubernetes-service-binding` エクステンションを使用することで、ユーザーは最小限の設定で `ServiceBinding` リソースを生成できるため、プロセス全体が簡素化されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The Service Binding Operator responsible for the binding process then reads the information from the `ServiceBinding` resource and mounts the required files to a container accordingly."
msgstr "バインディングプロセスを担当するService Binding Operator は、 `ServiceBinding` リソースから情報を読み取り、それに応じて必要なファイルをコンテナーにマウントします。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "An example of the `ServiceBinding` resource:"
msgstr "以下は、 `ServiceBinding` リソースの例です。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The `quarkus-kubernetes-service-binding` extension provides a more compact way of expressing the same information. For example:"
msgstr "`quarkus-kubernetes-service-binding` エクステンションは、同じ情報をよりコンパクトに表現する方法を提供します。以下に例を示します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "After adding the earlier configuration properties inside your `application.properties`, the `quarkus-kubernetes`, in combination with the `quarkus-kubernetes-service-binding` extension, automatically generates the `ServiceBinding` resource."
msgstr "先ほどの設定プロパティーを `application.properties` 内に追加すると、 `quarkus-kubernetes` は、 `quarkus-kbernetes-service-binding` エクステンションとの組み合わせにより、自動的に `ServiceBinding` リソースを生成します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The earlier mentioned `db-demo` property-configuration identifier now has a double role and also completes the following actions:"
msgstr "先に述べた `db-demo` property-configuration 識別子は、2 つのロールを持つようになり、以下の動作も完了します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Correlates and groups `api-version` and `kind` properties together"
msgstr "`api-version` と `kind` のプロパティーを相互に関連付け、グループ化する"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Defines the `name` property for the custom resource with a possibility for a later edit. For example:"
msgstr "後で編集できるように、カスタムリソースの `name` プロパティーを定義します。以下に例を示します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Additional resources"
msgstr "追加リソース"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "For a semi-automatic service binding demonstration, see link:https://developers.redhat.com/articles/2021/12/22/how-use-quarkus-service-binding-operator#create_the_quarkus_application[How to use Quarkus with the Service Binding Operator]"
msgstr "半自動のサービスバインディングのデモについては、link:https://developers.redhat.com/articles/2021/12/22/how-use-quarkus-service-binding-operator#create_the_quarkus_application[How to use Quarkus with the Service Binding Operator] を参照してください。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "link:https://github.com/redhat-developer/service-binding-operator#known-bindable-operators[List of bindable Operators]"
msgstr "link:https://github.com/redhat-developer/service-binding-operator#known-bindable-operators[bindable Operator の一覧]"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Automatic service binding"
msgstr "自動サービスバインディング"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The `quarkus-kubernetes-service-binding` extension can generate the `ServiceBinding` resource automatically after detecting that an application requires access to the external services that are provided by available bindable Operators."
msgstr "`quarkus-kubernetes-service-binding` エクステンションは、アプリケーションが利用可能でバインド可能な Operator によって提供される外部サービスへのアクセスを必要とすることを検出した後、自動的に `ServiceBinding` リソースを生成することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Automatic service binding can be generated for a limited number of service types. To be consistent with established terminology for Kubernetes and Quarkus services, this chapter refers to these service types as kinds."
msgstr "自動サービスバインディングは、限られた数のサービスタイプに対して生成することができます。Kubernetes および Quarkus のサービスに関する確立された用語と一致させるために、この章ではこれらのサービスタイプを kind と呼びます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Operators that support the service auto-binding"
msgstr "サービス auto-binding をサポートするオペレーター"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Operator"
msgstr "オペレーター"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "API Version"
msgstr "API バージョン"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Kind"
msgstr "種類"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`postgresql`"
msgstr "`postgresql`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "link:https://operatorhub.io/operator/postgresql[CrunchyData Postgres]"
msgstr "link:https://operatorhub.io/operator/postgresql[CrunchyData Postgres]"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "postgres-operator.crunchydata.com/v1beta1"
msgstr "postgres-operator.crunchydata.com/v1beta1"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "PostgresCluster"
msgstr "PostgresCluster"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`mysql`"
msgstr "`mysql`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "link:https://operatorhub.io/operator/percona-xtradb-cluster-operator[Percona XtraDB Cluster]"
msgstr "link:https://operatorhub.io/operator/percona-xtradb-cluster-operator[Percona XtraDB Cluster]"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "pxc.percona.com/v1-9-0"
msgstr "pxc.percona.com/v1-9-0"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "PerconaXtraDBCluster"
msgstr "PerconaXtraDBCluster"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "`mongo`"
msgstr "`mongo`"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "link:https://operatorhub.io/operator/percona-server-mongodb-operator[Percona Mongo]"
msgstr "link:https://operatorhub.io/operator/percona-server-mongodb-operator[Percona Mongo]"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "psmdb.percona.com/v1-9-0"
msgstr "psmdb.percona.com/v1-9-0"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "PerconaServerMongoDB"
msgstr "PerconaServerMongoDB"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Automatic datasource binding"
msgstr "自動データソースバインディング"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "For traditional databases, automatic binding is initiated whenever a datasource is configured as follows:"
msgstr "従来のデータベースの場合、データソースが以下のように設定されるたびに自動バインディングが開始されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The previous configuration, combined with the presence of `quarkus-datasource`, `quarkus-jdbc-postgresql`, `quarkus-kubernetes`, and `quarkus-kubernetes-service-binding` properties in the application, results in the generation of the `ServiceBinding` resource for the `postgresql` database type."
msgstr "前述の設定と、アプリケーション内の `quarkus-datasource`、 `quarkus-jdbc-postgresql`、 `quarkus-kubernetes` および `quarkus-kbernetes-service-binding` プロパティーの存在により、データベースタイプ `postgresql` 用の `ServiceBinding` リソースが生成されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "By using the `apiVersion` and `kind` properties of the Operator resource, which matches the used `postgresql` Operator, the generated `ServiceBinding` resource binds the service or resource to the application."
msgstr "使用された `postgresql`` Operator と一致する Operator リソースの `apiVersion` プロパティーと `kind` プロパティーを使用することにより、生成された `ServiceBinding` リソースは、サービスまたはリソースをアプリケーションにバインドします。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "When you do not specify a name for your database service, the value of the `db-kind` property is used as the default name."
msgstr "データベースサービスの名前を指定しない場合、 `db-kind` プロパティの値がデフォルトの名前として使用されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Specified the name of the datasource as follows:"
msgstr "データソースの名前を以下のように指定しました。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The `service` in the generated `ServiceBinding` then displays as follows:"
msgstr "生成された `ServiceBinding` 内の `service` は、以下のように表示されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Similarly, if you use `mysql`, the name of the datasource can be specified as follows:"
msgstr "同様に、 `mysql` を使う場合は、データソース名を以下のように指定することができます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The generated `service` contains the following:"
msgstr "生成された `service` には、以下の内容が含まれます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Customizing Automatic Service Binding"
msgstr "自動サービスバインディングのカスタマイズ"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Even though automatic binding was developed to eliminate as much manual configuration as possible, there are cases where modifying the generated `ServiceBinding` resource might still be needed. The generation process exclusively relies on information extracted from the application and the knowledge of the supported Operators, which may not reflect what is deployed in the cluster. The generated resource is based purely on the knowledge of the supported bindable Operators for popular service kinds and a set of conventions that were developed to prevent possible mismatches, such as:"
msgstr "自動バインディングは手動での設定をできるだけ排除するために開発されましたが、生成された `ServiceBinding` リソースを修正しなければならない場合もあります。生成プロセスはアプリケーションから抽出された情報とサポートされる Operator のナレッジにのみ依存しており、これはクラスターにデプロイされているものを反映していない可能性があります。生成されるリソースは、一般的なサービス kind のサポートされているバインディング可能な Operator のナレッジと、以下のようなミスマッチの可能性を防ぐために開発された一連の規約にのみ基づいています。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The target resource name does not match the datasource name"
msgstr "ターゲットリソース名がデータソース名と一致しない"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "A specific Operator needs to be used rather than the default Operator for that service kind"
msgstr "そのサービスの kind のデフォルトの Operator ではなく、特定の Operator を使用する必要がある"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Version conflicts that occur when a user needs to use any other version than default or latest"
msgstr "ユーザーがデフォルトまたは最新以外のバージョンを使用する必要がある場合に発生するバージョンの競合"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Conventions"
msgstr "規約"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The target resource coordinates are determined based on the type of Operator and the kind of service."
msgstr "対象リソース座標は、Operator のタイプとサービスの kind に応じて決定されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The target resource name is set by default to match the service kind, such as `postgresql`, `mysql`, `mongo`."
msgstr "ターゲットリソース名は、デフォルトでは `postgresql`、 `mysql`、 `mongo` などのサービスの kind に一致するように設定されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "For named datasources, the name of the datasource is used."
msgstr "名前付きデータソースの場合、データソースの名前が使用されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "For named `mongo` clients, the name of the client is used."
msgstr "名前付き `mongo` クライアントの場合、クライアントの名前が使われます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Example 1 - Name mismatch"
msgstr "例 1 - 名前の不一致"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "For cases in which you need to modify the generated `ServiceBinding` to fix a name mismatch, use the `quarkus.kubernetes-service-binding.services` properties and specify the service's name as the service key."
msgstr "生成された `ServiceBinding` を修正して名前の不一致を修正する必要がある場合は、 `quarkus.kubernetes-service-binding.services` プロパティーを使用して、サービスの名前をサービスキーとして指定します。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The `service key` is usually the name of the service, for example the name of the datasource, or the name of the `mongo` client. When this value is not available, the datasource type, such as `postgresql`, `mysql`, `mongo`, is used instead."
msgstr "`service key` は通常、データソースの名前や `mongo` クライアントの名前など、サービスの名前です。この値がない場合は、 `postgresql`、 `mysql`、 `mongo` などのデータソースのタイプが代わりに使用されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "To avoid naming conflicts between different types of services, prefix the `service key` with a specific datasource type, such as `postgresql-__<person>__`."
msgstr "異なるタイプのサービス間での名前の競合を避けるために、 `service key` の前に postgresql-__<person>__` のような特定のデータソースのタイプを付けます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The following example shows how to customize the `apiVersion` property of the `PostgresCluster` resource:"
msgstr "次の例は、 `PostgresCluster` リソースの `apiVersion` プロパティーをカスタマイズする方法を示しています。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "Example 2: Application of a custom name for a datasource"
msgstr "例 2: データソースのカスタム名のアプリケーション"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "In Example 1, the `db-kind`(`postgresql`) was used as a service key. In this example, because the datasource is named, according to convention, the datasource name (`fruits-db`) is used instead."
msgstr "例 1 では、 `db-kind`(`postgresql`) がサービスキーとして使用されました。この例では、規約に従ってデータソースに名前がついているので、データソース名 (`fruits-db`) が代わりに使用されます。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "The following example shows that for a named datasource, the datasource name is used as the name of the target resource:"
msgstr "次の例は、名前付きデータソースの場合、データソース名がターゲットリソースの名前として使用されることを示しています。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "This has the same effect as the following configuration:"
msgstr "これは、以下の設定と同じ効果があります。"

#: _versions/3.27/guides/deploying-to-kubernetes.adoc
msgid "For more details about the available properties and how do they work, see the link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] part of the Service Binding specification."
msgstr "利用可能なプロパティーとその動作の詳細については、Service Binding 仕様 の link:https://github.com/servicebinding/spec#workload-projection[Workload Projection] の部分を参照してください。"
