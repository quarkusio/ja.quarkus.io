msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "OpenID Connect (OIDC) and OAuth2 client and filters"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can use Quarkus extensions for OpenID Connect and OAuth 2.0 access token management, focusing on acquiring, refreshing, and propagating tokens."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "This includes the following:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Using `quarkus-oidc-client`, `quarkus-rest-client-oidc-filter` and `quarkus-resteasy-client-oidc-filter` extensions to acquire and refresh access tokens from OpenID Connect and OAuth 2.0 compliant Authorization Servers such as link:https://www.keycloak.org[Keycloak]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Using `quarkus-rest-client-oidc-token-propagation` and `quarkus-resteasy-client-oidc-token-propagation` extensions to propagate the current `Bearer` or `Authorization Code Flow` access tokens."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "The access tokens managed by these extensions can be used as HTTP Authorization Bearer tokens to access the remote services."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Also see xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "OidcClient"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependency:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client.OidcClient`, which can be used to acquire and refresh tokens using SmallRye Mutiny `Uni` and `Vert.x WebClient`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` is initialized at build time with the IDP token endpoint URL, which can be auto-discovered or manually configured. `OidcClient` uses this endpoint to acquire access tokens by using token grants such as `client_credentials` or `password` and refresh the tokens by using a `refresh_token` grant."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Token endpoint configuration"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "By default, the token endpoint address is discovered by adding a `/.well-known/openid-configuration` path to the configured `quarkus.oidc-client.auth-server-url`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "For example, given this Keycloak URL:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` will discover that the token endpoint URL is `http://localhost:8180/auth/realms/quarkus/protocol/openid-connect/tokens`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, if the discovery endpoint is unavailable or you want to save on the discovery endpoint round-trip, you can disable the discovery and configure the token endpoint address with a relative path value. For example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "A more compact way to configure the token endpoint URL without the discovery is to set `quarkus.oidc-client.token-path` to an absolute URL:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Setting `quarkus.oidc-client.auth-server-url` and `quarkus.oidc-client.discovery-enabled` is not required in this case."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Supported token grants"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "The main token grants that `OidcClient` can use to acquire the tokens are the `client_credentials` (default) and `password` grants."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Client credentials grant"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Here is how `OidcClient` can be configured to use the `client_credentials` grant:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "The `client_credentials` grant allows setting extra parameters for the token request by using `quarkus.oidc-client.grant-options.client.<param-name>=<value>`. Here is how to set the intended token recipient by using the `audience` parameter:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Password grant"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "It can be further customized by using a `quarkus.oidc-client.grant-options.password` configuration prefix, similar to how the client credentials grant can be customized."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Other grants"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` can also help acquire the tokens by using grants that require some extra input parameters that cannot be captured in the configuration. These grants are `refresh_token` (with the external refresh token), `authorization_code`, and two grants which can be used to exchange the current access token, namely, `urn:ietf:params:oauth:grant-type:token-exchange` and `urn:ietf:params:oauth:grant-type:jwt-bearer`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"If you need to acquire an access token and have posted an existing refresh token to the current Quarkus endpoint, you must use the `refresh_token` grant. This grant employs an out-of-band refresh token to obtain a new token set.\n"
"In this case, configure `OidcClient` as follows:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Then you can use the `OidcClient.refreshTokens` method with a provided refresh token to get the access token."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Using the `urn:ietf:params:oauth:grant-type:token-exchange` or `urn:ietf:params:oauth:grant-type:jwt-bearer` grants might be required if you are building a complex microservices application and want to avoid the same `Bearer` token be propagated to and used by more than one service. See <<token-propagation-rest,Token Propagation for Quarkus REST>> and <<token-propagation-resteasy,Token Propagation for RESTEasy Classic>> for more details."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Using `OidcClient` to support the `authorization code` grant might be required if, for some reason, you cannot use the xref:security-oidc-code-flow-authentication.adoc[Quarkus OIDC extension] to support Authorization Code Flow. If there is a very good reason for you to implement Authorization Code Flow, then you can configure `OidcClient` as follows:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the current `code` and `redirect_uri` parameters to exchange the authorization code for the tokens."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClient` also supports the `urn:openid:params:grant-type:ciba` grant:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Then, you can use the `OidcClient.accessTokens` method to accept a Map of extra properties and pass the `auth_req_id` parameter to exchange the token authorization code."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Grant scopes"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"You might need to request that a specific set of scopes be associated with an issued access token.\n"
"Use a dedicated `quarkus.oidc-client.scopes` list property, for example: `quarkus.oidc-client.scopes=email,phone`"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Use OidcClient directly"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can use `OidcClient` directly to acquire access tokens and set them in an HTTP `Authorization` header as a `Bearer` scheme value."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"For example, let's assume the Quarkus endpoint has to access a microservice that returns a user name.\n"
"First, create a REST client:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Now, use `OidcClient` to acquire the tokens and propagate them:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`io.quarkus.oidc.client.runtime.TokensHelper` manages the access token acquisition and refresh."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Inject tokens"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can inject `Tokens` that use `OidcClient` internally. `Tokens` can be used to acquire the access tokens and refresh them if necessary:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Use OidcClients"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`io.quarkus.oidc.client.OidcClients` is a container of ``OidcClient``s - it includes a default `OidcClient` and named clients which can be configured like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "In this case, the default client is disabled with a `client-enabled=false` property. The `jwt-secret` client can be accessed like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "See the `RestClientWithTokenHeaderParam` declaration in the <<use-oidc-client-directly>> section."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If you also use xref:security-openid-connect-multitenancy.adoc[OIDC multitenancy], and each OIDC tenant has its own associated `OidcClient`, you can use a Vert.x `RoutingContext` `tenant-id` attribute. For example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"You can also create a new `OidcClient` programmatically.\n"
"For example, let's assume you must create it at startup time:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Now, you can use this client like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Inject named OidcClient and tokens"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "In case of multiple configured `OidcClient` objects, you can specify the `OidcClient` injection target by the extra qualifier `@NamedOidcClient` instead of working with `OidcClients`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "The same qualifier can be used to specify the `OidcClient` used for a `Tokens` injection:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Use OidcClient in RestClient Reactive ClientFilter"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Add the following Maven Dependency:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "It will also bring `io.quarkus:quarkus-oidc-client`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-rest-client-oidc-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestReactiveFilter`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "It works similarly to the way `OidcClientRequestFilter` does (see <<resteasy-client-oidc-filter,Use OidcClient in MicroProfile RestClient client filter>>) - it uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization Bearer` scheme value. The difference is that it works with xref:rest-client.adoc[Reactive RestClient] and implements a non-blocking client filter that does not block the current IO thread when acquiring or refreshing the tokens."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`OidcClientRequestReactiveFilter` delays an initial token acquisition until it is executed to avoid blocking an IO thread."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `OidcClientRequestReactiveFilter` by using either `io.quarkus.oidc.client.reactive.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "or"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.rest-client-oidc-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.rest-client-oidc-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients,this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you also want to refresh the token every time the `ProtectedResourceService#getUserName` call results in a 401 Unauthorized error, use the `quarkus.rest-client-oidc-filter.refresh-on-unauthorized` configuration property like in the example below:"
msgstr "`ProtectedResourceService#getUserName` 呼び出しの結果、401 Unauthorized エラーが発生するたびにトークンもリフレッシュしたい場合は、以下の例のように `quarkus.rest-client-oidc-filter.refresh-on-unauthorized` 構成プロパティを使用します："

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Alternatively, if you only need to enable this feature for individual endpoints, create a custom filter like in the example below:"
msgstr "また、個々のエンドポイントに対してのみこの機能を有効にする必要がある場合は、以下の例のようにカスタムフィルタを作成してください："

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Use OidcClient in RestClient ClientFilter"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-resteasy-client-oidc-filter` extension provides `io.quarkus.oidc.client.filter.OidcClientRequestFilter` Jakarta REST ClientRequestFilter which uses `OidcClient` to acquire the access token, refresh it if needed, and set it as an HTTP `Authorization Bearer` scheme value."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "By default, this filter will get `OidcClient` to acquire the first pair of access and refresh tokens at its initialization time. If the access tokens are short-lived and refresh tokens are unavailable, then the token acquisition should be delayed with `quarkus.oidc-client.early-tokens-acquisition=false`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `OidcClientRequestFilter` by using either `io.quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotations:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `OidcClientRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.resteasy-client-oidc-filter.register-filter=true` property is set."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.resteasy-client-oidc-filter.client-name` configuration property.\n"
"You can also select `OidcClient` by setting the `value` attribute of the `@OidcClientFilter` annotation. The client name set through annotation has higher priority than the `quarkus.resteasy-client-oidc-filter.client-name` configuration property.\n"
"For example, given <<use-oidc-clients,this>> `jwt-secret` named OIDC client declaration, you can refer to this client like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "If you also want to refresh the token every time the `ProtectedResourceService#getUserName` call results in a 401 Unauthorized error, use the `quarkus.resteasy-client-oidc-filter.refresh-on-unauthorized` configuration property like in the example below:"
msgstr "`ProtectedResourceService#getUserName` 呼び出しの結果、401 Unauthorized エラーが発生するたびにトークンもリフレッシュしたい場合は、以下の例のように `quarkus.resteasy-client-oidc-filter.refresh-on-unauthorized` 構成プロパティを使用します："

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Use a custom RestClient ClientFilter"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If you prefer, you can use your own custom filter and inject `Tokens`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "The `Tokens` producer will acquire and refresh the tokens, and the custom filter will decide how and when to use the token."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can also inject named `Tokens`, see <<named-oidc-clients,Inject named OidcClient and Tokens>>"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Refreshing access tokens"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClientRequestReactiveFilter`, `OidcClientRequestFilter` and `Tokens` producers will refresh the current expired access token if the refresh token is available.\n"
"Additionally, the `quarkus.oidc-client.refresh-token-time-skew` property can be used for a preemptive access token refreshment to avoid sending nearly expired access tokens that might cause HTTP 401 errors. For example, if this property is set to `3S` and the access token will expire in less than 3 seconds, then this token will be auto-refreshed."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"By default, OIDC client refreshes the token during the current request, when it detects that it has expired, or nearly expired if the xref:#quarkus-oidc-client_quarkus-oidc-client-refresh-token-time-skew[refresh token time skew] is configured.\n"
"Performance critical applications may want to avoid having to wait for a possible token refresh during the incoming requests and configure an asynchronous token refresh instead, for example:"
msgstr "デフォルトでは、OIDCクライアントは現在のリクエスト中にトー xref:quarkus-oidc-client_quarkus-oidc-client-refresh-token-time-skew[クンの] リフレッシュを行います。パフォーマンスを重視するアプリケーションでは、リクエスト中にトークンがリフレッシュされるのを待つ必要がないように、例えば非同期トークン・リフレッシュを設定することができます："

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "Check every minute if the current access token is expired and must be refreshed."
msgstr "現在のアクセストークンの有効期限が切れ、更新する必要があるかどうかを1分ごとにチェックします。"

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If the access token needs to be refreshed, but no refresh token is available, then an attempt is made to acquire a new token by using a configured grant, such as `client_credentials`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Some OpenID Connect Providers will not return a refresh token in a `client_credentials` grant response. For example, starting from Keycloak 12, a refresh token will not be returned by default for `client_credentials`. The providers might also restrict the number of times a refresh token can be used."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Revoking access tokens"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If your OpenId Connect provider, such as Keycloak, supports a token revocation endpoint, then `OidcClient#revokeAccessToken` can be used to revoke the current access token. The revocation endpoint URL will be discovered alongside the token request URI or can be configured with `quarkus.oidc-client.revoke-path`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You might want to have the access token revoked if using this token with a REST client fails with an HTTP `401` status code or if the access token has already been used for a long time and you would like to refresh it."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "This can be achieved by requesting a token refresh by using a refresh token. However, if the refresh token is unavailable, you can refresh it by revoking it first and then requesting a new access token."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "OidcClient authentication"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcClient` has to authenticate to the OpenID Connect Provider for the `client_credentials` and other grant requests to succeed.\n"
"All the https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC Client Authentication] options are supported, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_basic`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider]:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_post`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`client_secret_jwt`, signature algorithm is `HS256`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Or with the secret retrieved from a xref:credentials-provider.adoc[CredentialsProvider], signature algorithm is `HS256`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`private_key_jwt` with the PEM key inlined in application.properties, and where the signature algorithm is `RS256`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`private_key_jwt` with the PEM key file, signature algorithm is `RS256`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`private_key_jwt` with the keystore file, signature algorithm is `RS256`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Using `client_secret_jwt` or `private_key_jwt` authentication methods ensures that no client secret goes over the wire."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Additional JWT authentication options"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If either `client_secret_jwt` or `private_key_jwt` authentication methods are used, then the JWT signature algorithm, key identifier, audience, subject, and issuer can be customized, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "JWT Bearer"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "link:https://www.rfc-editor.org/rfc/rfc7523[RFC7523] explains how JWT Bearer tokens can be used to authenticate clients, see the link:https://www.rfc-editor.org/rfc/rfc7523#section-2.2[Using JWTs for Client Authentication] section for more information."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "It can be enabled as follows:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Next, the JWT bearer token must be provided as a `client_assertion` parameter to the OIDC client."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"Quarkus can load the JWT bearer token from a file system.\n"
"For example, in Kubernetes, a service account token projection can be mounted to a `/var/run/secrets/tokens` path.\n"
"Then all you need to do is configure a JWT bearer token path as follows:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Path to a JWT bearer token. Quarkus loads a new token from a filesystem and reload it when the token has expired."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Your other option is to use `OidcClient` methods for acquiring or refreshing tokens which accept additional grant parameters, for example, `oidcClient.getTokens(Map.of(\"client_assertion\", \"ey...\"))`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If you work work with the OIDC client filters then you must register a custom filter which will provide this assertion."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Here is an example of the Quarkus REST (formerly RESTEasy Reactive) custom filter:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Here is an example of the RESTEasy Classic custom filter:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Apple POST JWT"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Apple OpenID Connect Provider uses a `client_secret_post` method where a secret is a JWT produced with a `private_key_jwt` authentication method but with Apple account-specific issuer and subject properties."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` supports a non-standard `client_secret_post_jwt` authentication method, which can be configured as follows:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Mutual TLS"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Some OpenID Connect Providers require that a client is authenticated as part of the mutual TLS (`mTLS`) authentication process."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`quarkus-oidc-client` can be configured as follows to support `mTLS`:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "OIDC Client SPI"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "When your custom extension must acquire OIDC tokens using one of the OIDC token grants supported by OIDC client, this extension can depend on the OIDC Client SPI only and let OIDC client itself acquire and refresh access tokens as necessary."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Next update your extension to use `io.quarkus.oidc.client.spi.TokenProvider` CDI bean as required, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Currently, `io.quarkus.oidc.client.spi.TokenProvider` is only available for default OIDC clients, since custom extensions are unlikely to be aware of multiple named OIDC clients."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Testing"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Start by adding the following dependencies to your test project:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Wiremock"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Add the following dependencies to your test project:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Use a proper Wiremock version. All available versions can be found link:https://search.maven.org/artifact/org.wiremock/wiremock[here]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Write a Wiremock-based `QuarkusTestResourceLifecycleManager`, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Prepare the REST test endpoints. You can have the test front-end endpoint, which uses the injected MP REST client with a registered OidcClient filter, call the downstream endpoint. This endpoint echoes the token back. For example, see the `integration-tests/oidc-client-wiremock` in the `main` Quarkus repository."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Set `application.properties`, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "And finally, write the test code. Given the Wiremock-based resource above, the first test invocation should return the `access_token_1` access token, which will expire in 4 seconds. Use `awaitility` to wait for about 5 seconds, and now the next test invocation should return the `access_token_2` access token, which confirms the expired `access_token_1` access token has been refreshed."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Keycloak"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If you work with Keycloak, you can use the same approach described in the xref:security-oidc-bearer-token-authentication.adoc#bearer-token-integration-testing-keycloak[OpenID Connect Bearer Token Integration testing] Keycloak section."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "How to check the errors in the logs"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientImpl` `TRACE` level logging to see more details about the token acquisition and refresh errors:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Enable `io.quarkus.oidc.client.runtime.OidcClientRecorder` `TRACE` level logging to see more details about the OidcClient initialization errors:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "OIDC request filters"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid "You can filter OIDC requests made by OIDC client to the OIDC provider by registering one or more `OidcRequestFilter` implementations, which can update or add new request headers, customize or analyze the request body."
msgstr "OIDCクライアントからOIDCプロバイダへのOIDCリクエストをフィルタリングするには、リクエストヘッダの更新や追加、リクエストボディのカスタマイズや解析が可能な `OidcRequestFilter` 。"

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can have a single filter intercepting requests to all OIDC provider endpoints, or use an `@OidcEndpoint` annotation to apply this filter to requests to specific endpoints only. For example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"`OidcRequestContextProperties` can be used to access request properties.\n"
"Currently, you can use a `client_id` key to access the client tenant id and a `grant_type` key to access the grant type which the OIDC client uses to acquire tokens."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcRequestFilter` can customize a request body by preparing an instance of `io.vertx.mutiny.core.buffer.Buffer`\n"
"and setting it on a request context, for example:"
msgstr "`OidcRequestFilter` は、 のインスタンスを用意してリクエストコンテキストに設定するなどして、リクエストボディをカスタマイズすることができます： `io.vertx.mutiny.core.buffer.Buffer`"

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "OIDC response filters"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can filter responses to the OIDC client requests by registering one or more `OidcResponseFilter` implementations, which can check the response status, headers and body, in order to log them or perform other actions."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can have a single filter intercepting responses to all OIDC client requests, or use an `@OidcEndpoint` annotation to apply this filter to the responses to the specific OIDC client requests only. For example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Restrict this filter to requests targeting the OIDC token endpoint only."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Check the response `Content-Type` header."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Use `OidcRequestContextProperties` request properties to confirm it is a `refresh_grant` token grant response."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Confirm the response JSON contains a `refresh_token` property."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
#, fuzzy
msgid ""
"`OidcResponseFilter` can customize a response body by preparing an instance of `io.vertx.mutiny.core.buffer.Buffer`\n"
"and setting it as a property on a response context, for example:"
msgstr "`OidcResponseFilter` は、 のインスタンスを用意し、レスポンスコンテキストのプロパティに設定するなどして、レスポンスボディをカスタマイズすることができます： `io.vertx.mutiny.core.buffer.Buffer`"

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Token Propagation for Quarkus REST"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "The `quarkus-rest-client-oidc-token-propagation` extension provides a REST Client filter, `io.quarkus.oidc.token.propagation.reactive.AccessTokenRequestReactiveFilter`, that simplifies the propagation of authentication information. This client propagates the xref:security-oidc-bearer-token-authentication.adoc[bearer token] present in the currently active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[authorization code flow mechanism] as the HTTP `Authorization` header's `Bearer` scheme value."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `AccessTokenRequestReactiveFilter` by using either `io.quarkus.oidc.token.propagation.common.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider` annotation, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Additionally, `AccessTokenRequestReactiveFilter` can support a complex application that needs to exchange the tokens before propagating them."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If you work with link:https://www.keycloak.org/securing-apps/token-exchange[Keycloak] or another OIDC provider that supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Please note that the `exchange-token` configuration property is ignored when the OidcClient name is set with the `io.quarkus.oidc.token.propagation.common.AccessToken#exchangeTokenClient` annotation attribute."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestReactiveFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token, then you can configure `AccessTokenRequestReactiveFilter` to exchange the token like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestReactiveFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.rest-client-oidc-token-propagation.client-name` configuration property or with the `io.quarkus.oidc.token.propagation.common.AccessToken#exchangeTokenClient` annotation attribute."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Token Propagation for RESTEasy Classic"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"The `quarkus-resteasy-client-oidc-token-propagation` extension provides two Jakarta REST `jakarta.ws.rs.client.ClientRequestFilter` class implementations that simplify the propagation of authentication information.\n"
"`io.quarkus.oidc.token.propagation.AccessTokenRequestFilter` propagates the xref:security-oidc-bearer-token-authentication.adoc[Bearer token] present in the current active request or the token acquired from the xref:security-oidc-code-flow-authentication.adoc[Authorization code flow mechanism], as the HTTP `Authorization` header's `Bearer` scheme value.\n"
"The `io.quarkus.oidc.token.propagation.JsonWebTokenRequestFilter` provides the same functionality but, in addition, provides support for JWT tokens."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "When you need to propagate the current Authorization Code Flow access token, then the immediate token propagation will work well - as the code flow access tokens (as opposed to ID tokens) are meant to be propagated for the current Quarkus endpoint to access the remote services on behalf of the currently authenticated user."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "However, the direct end-to-end Bearer token propagation should be avoided. For example, `Client -> Service A -> Service B` where `Service B` receives a token sent by `Client` to `Service A`. In such cases, `Service B` cannot distinguish if the token came from `Service A` or from `Client` directly. For `Service B` to verify the token came from `Service A`, it should be able to assert a new issuer and audience claims."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Additionally, a complex application might need to exchange or update the tokens before propagating them. For example, the access context might be different when `Service A` is accessing `Service B`. In this case, `Service A` might be granted a narrow or completely different set of scopes to access `Service B`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "The following sections show how `AccessTokenRequestFilter` and `JsonWebTokenRequestFilter` can help."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "RestClient AccessTokenRequestFilter"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` treats all tokens as Strings, and as such, it can work with both JWT and opaque tokens."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `AccessTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.common.AccessToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `AccessTokenRequestFilter` can be registered automatically with all MP Rest or Jakarta REST clients if the `quarkus.resteasy-client-oidc-token-propagation.register-filter` property is set to `true` and `quarkus.resteasy-client-oidc-token-propagation.json-web-token` property is set to `false` (which is a default value)."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Exchange token before propagation"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If the current access token needs to be exchanged before propagation and you work with link:https://www.keycloak.org/securing-apps/token-exchange[Keycloak] or other OpenID Connect Provider which supports a link:https://tools.ietf.org/html/rfc8693[Token Exchange] token grant, then you can configure `AccessTokenRequestFilter` like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If you work with providers such as `Azure` that link:https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow#example[require using] link:https://www.rfc-editor.org/rfc/rfc7523#section-2.1[JWT bearer token grant] to exchange the current token, then you can configure `AccessTokenRequestFilter` to exchange the token like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` will use `OidcClient` to exchange the current token, and you can use `quarkus.oidc-client.grant-options.exchange` to set the additional exchange properties expected by your OpenID Connect Provider."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`AccessTokenRequestFilter` uses a default `OidcClient` by default. A named `OidcClient` can be selected with a `quarkus.resteasy-client-oidc-token-propagation.client-name` configuration property."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "RestClient JsonWebTokenRequestFilter"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Using `JsonWebTokenRequestFilter` is recommended if you work with Bearer JWT tokens where these tokens can have their claims, such as `issuer` and `audience` modified and the updated tokens secured (for example, re-signed) again. It expects an injected `org.eclipse.microprofile.jwt.JsonWebToken` and, therefore, will not work with the opaque tokens. Also, if your OpenID Connect Provider supports a Token Exchange protocol, then it is recommended to use `AccessTokenRequestFilter` instead - as both JWT and opaque bearer tokens can be securely exchanged with `AccessTokenRequestFilter`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "`JsonWebTokenRequestFilter` makes it easy for `Service A` implementations to update the injected `org.eclipse.microprofile.jwt.JsonWebToken` with the new `issuer` and `audience` claim values and secure the updated token again with a new signature. The only difficult step is ensuring that `Service A` has a signing key which should be provisioned from a secure file system or remote secure storage such as Vault."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "You can selectively register `JsonWebTokenRequestFilter` by using either `io.quarkus.oidc.token.propagation.JsonWebToken` or `org.eclipse.microprofile.rest.client.annotation.RegisterProvider`, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Alternatively, `JsonWebTokenRequestFilter` can be registered automatically with all MicroProfile REST or Jakarta REST clients if both `quarkus.resteasy-client-oidc-token-propagation.register-filter` and `quarkus.resteasy-client-oidc-token-propagation.json-web-token` properties are set to `true`."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Update token before propagation"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "If the injected token needs to have its `iss` (issuer) or `aud` (audience) claims updated and secured again with a new signature, then you can configure `JsonWebTokenRequestFilter` like this:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "As mentioned, use `AccessTokenRequestFilter` if you work with Keycloak or an OpenID Connect Provider that supports a Token Exchange protocol."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"Typically, you must prepare two REST test endpoints.\n"
"The first endpoint uses the injected MP REST client with a registered token propagation filter to call the second endpoint."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "To learn how it can be done, please follow the xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation] quickstart, and its xref:security-openid-connect-client.adoc#testing[Testing] section in particular."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "GraphQL client integration"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"The `quarkus-oidc-client-graphql` extension provides a way to integrate an OIDC client into xref:smallrye-graphql-client.adoc[GraphQL clients] paralleling the approach used with REST clients.\n"
"When this extension is active, any GraphQL client configured through properties (rather than programmatically by the builder) will use the OIDC client to acquire an access token, which it will then set as the `Authorization` header value.\n"
"The OIDC client will also refresh expired access tokens."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "To configure which OIDC client should be used by the GraphQL client, select one of the configured OIDC clients with the `quarkus.oidc-client-graphql.client-name` property, for example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"quarkus.oidc-client-graphql.client-name=oidc-client-for-graphql\n"
"\n"
"# example declaration of the OIDC client itself\n"
"quarkus.oidc-client.oidc-client-for-graphql.auth-server-url=${keycloak.url}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant.type=password\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.username=${username}\n"
"quarkus.oidc-client.oidc-client-for-graphql.grant-options.password.password=${password}\n"
"quarkus.oidc-client.oidc-client-for-graphql.client-id=${quarkus.oidc.client-id}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.value=${keycloak.credentials.secret}\n"
"quarkus.oidc-client.oidc-client-for-graphql.credentials.client-secret.method=POST"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"If you don't specify the `quarkus.oidc-client-graphql.client-name` property,\n"
"GraphQL clients will use the default OIDC client (without an explicit name)."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"Specifically for type-safe GraphQL clients, you can override this on a\n"
"per-client basis by annotating the `GraphQLClientApi` interface with\n"
"`@io.quarkus.oidc.client.filter.OidcClientFilter`. For example:"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid ""
"To be able to use this with a programmatically created GraphQL client, both\n"
"builders (`VertxDynamicGraphQLClientBuilder` and\n"
"`VertxTypesafeGraphQLClientBuilder`) contain a method `dynamicHeader(String,\n"
"Uni<String>`) that allows you to plug in a header that might change for\n"
"every request. To plug an OIDC client into it, use"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "Configuration reference"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "OIDC client"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-0\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "OIDC token propagation"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "<span class=\"icon\"><i class=\"fa fa-lock\" title=\"Fixed at build time\"></i></span> Configuration property fixed at build time - All other configuration properties are overridable at runtime <input type=\"search\" id=\"config-search-1\" placeholder=\"FILTER CONFIGURATION\" disabled>"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "References"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-openid-connect-client.adoc[OpenID Connect client and token propagation quickstart]."
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-oidc-bearer-token-authentication.adoc[OIDC Bearer token authentication]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-oidc-code-flow-authentication.adoc[OIDC code flow mechanism for protecting web applications]"
msgstr ""

#: _versions/3.27/guides/security-openid-connect-client-reference.adoc
msgid "xref:security-overview.adoc[Quarkus Security overview]"
msgstr ""
