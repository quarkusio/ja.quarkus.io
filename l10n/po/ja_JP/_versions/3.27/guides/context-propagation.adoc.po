msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Context Propagation in Quarkus"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"Traditional blocking code uses link:https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/ThreadLocal.html[`ThreadLocal`]\n"
" variables to store contextual objects in order to avoid\n"
"passing them as parameters everywhere. Many Quarkus extensions require those contextual objects to operate\n"
"properly: xref:rest-json.adoc[Quarkus REST (formerly RESTEasy Reactive)], xref:cdi-reference.adoc[ArC] and xref:transaction.adoc[Transaction]\n"
"for example."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"If you write reactive/async code, you have to cut your work into a pipeline of code blocks that get executed\n"
"\"later\", and in practice after the method you defined them in have returned. As such, `try/finally` blocks\n"
"as well as `ThreadLocal` variables stop working, because your reactive code gets executed in another thread,\n"
"after the caller ran its `finally` block."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"link:https://github.com/smallrye/smallrye-context-propagation[SmallRye Context Propagation] an implementation of\n"
"link:https://github.com/eclipse/microprofile-context-propagation[MicroProfile Context Propagation] was made to\n"
"make those Quarkus extensions work properly in reactive/async settings. It works by capturing those contextual\n"
"values that used to be in thread-locals, and restoring them when your code is called."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Solution"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "The solution is located in the `context-propagation-quickstart` link:{quickstarts-tree-url}/context-propagation-quickstart[directory]."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Setting it up"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"If you are using link:https://smallrye.io/smallrye-mutiny[Mutiny] (the `quarkus-mutiny` extension), you just need to add\n"
"the `quarkus-smallrye-context-propagation` extension to enable context propagation."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "In other words, add the following dependencies to your build file:"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "pom.xml"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "build.gradle"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "With this, you will get context propagation for ArC, Quarkus REST and transactions, if you are using them."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Usage example with Mutiny"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Mutiny"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"This section uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"Let's write a REST endpoint that reads the next 3 items from a xref:kafka.adoc[Kafka topic], stores them in a database using\n"
"xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] (all in the same transaction) before returning\n"
"them to the client, you can do it like this:"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"Notice that thanks to Mutiny support for context propagation, this works out of the box.\n"
"The 3 items are persisted using the same transaction and this transaction is committed when the stream completes."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Usage example for `CompletionStage`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"If you are using link:https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/CompletionStage.html[`CompletionStage`]\n"
"you need manual context propagation. You can do that by injecting a `ThreadContext`\n"
"or `ManagedExecutor` that will propagate every context. For example, here we use the xref:vertx.adoc[Vert.x Web Client]\n"
"to get the list of Star Wars people, then store them in the database using\n"
"xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] (all in the same transaction) before returning\n"
"them to the client as JSON using xref:rest-json.adoc[Jackson or JSON-B]:"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"Using `ThreadContext` or `ManagedExecutor` you can wrap most useful functional types and `CompletionStage`\n"
"in order to get context propagated."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "The injected `ManagedExecutor` uses the Quarkus thread pool."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Overriding which contexts are propagated"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "By default, all available contexts are propagated. However, you can override this behaviour in several ways."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Using configuration"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "The following configuration properties allow you to specify the default sets of propagated contexts:"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Configuration property"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Description"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Default Value"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`mp.context.ThreadContext.propagated`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "The comma-separated set of propagated contexts"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Remaining` (all non-explicitly list contexts)"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`mp.context.ThreadContext.cleared`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "The comma-separated set of cleared contexts"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`None` (no context), unless neither the propagated nor cleared sets contain `Remaining`, in which case the default is `Remaining` (all non-explicitly listed contexts)"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`mp.context.ThreadContext.unchanged`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "The comma-separated set of unchanged contexts"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`None` (no context)"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"The following contexts are available in Quarkus either out of the box, or depending on whether you include\n"
"their extensions:"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Context Name"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Name Constant"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`None`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#NONE[`ThreadContext.NONE`]"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Can be used to specify an empty set of contexts, but setting the value to empty works too"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Remaining`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#ALL_REMAINING[`ThreadContext.ALL_REMAINING`]"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "All the contexts that are not explicitly listed in other sets"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Transaction`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#TRANSACTION[`ThreadContext.TRANSACTION`]"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "The JTA transaction context"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`CDI`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#CDI[`ThreadContext.CDI`]"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "The CDI (ArC) context"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Servlet`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "N/A"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "The servlet context"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Jakarta REST`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "The Quarkus REST or RESTEasy Classic context"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Application`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#APPLICATION[`ThreadContext.APPLICATION`]"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "The current `ThreadContextClassLoader`"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Overriding the propagated contexts using annotations"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"In order for automatic context propagation, such as Mutiny uses, to be overridden in specific methods,\n"
"you can use the https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/CurrentThreadContext.html[`@CurrentThreadContext`]\n"
"annotation:"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Overriding the propagated contexts using CDI injection"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "You can also inject a custom-built `ThreadContext` using the https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/ThreadContextConfig.html[`@ThreadContextConfig`] annotation on your injection point:"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Likewise, there is a similar way to inject a configured instance of `ManagedExecutor` using the https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/ManagedExecutorConfig.html[`@ManagedExecutorConfig`] annotation:"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Sharing configured CDI instances of ManagedExecutor and ThreadContext"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"If you need to inject the same `ManagedExecutor` or `ThreadContext` into several places and share its capacity, you can name the instance with https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/NamedInstance.html[`@NamedInstance`] annotation.\n"
"`@NamedInstance` is a CDI qualifier and all injections of the same type and name will therefore share the same underlying instance.\n"
"If you also need to customize your instance, you can do so using `@ManagedExecutorConfig`/`ThreadContextConfig` annotation on one of its injection points:"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Context Propagation for CDI"
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"In terms of CDI, `@RequestScoped`, `@ApplicationScoped` and `@Singleton` beans get propagated and are available in other threads.\n"
"`@Dependent` beans as well as any custom scoped beans cannot be automatically propagated via CDI Context Propagation."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"`@ApplicationScoped` and `@Singleton` beans are always active scopes and as such are easy to deal with - context propagation tasks can work with those beans so long as the CDI container is running.\n"
"However, `@RequestScoped` beans are a different story. They are only active for a short period of time which can be bound either to HTTP request or some other request/task when manually activated/deactivated.\n"
"In this case user must be aware that once the original thread gets to an end of a request, it will terminate the context, calling `@PreDestroy` on those beans and then clearing them from the context.\n"
"Subsequent attempts to access those beans from other threads can result in unexpected behaviour.\n"
"It is therefore recommended to make sure all tasks using request scoped beans via context propagation are performed in such a manner that they don't outlive the original request duration."
msgstr ""

#: _versions/3.27/guides/context-propagation.adoc
msgid "Due to the above described behavior, it is recommended to avoid using `@PreDestroy` on `@RequestScoped` beans when working with Context Propagation in CDI."
msgstr ""
