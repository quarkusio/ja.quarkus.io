msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Context Propagation in Quarkus"
msgstr "Quarkusでのコンテキスト伝搬"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"Traditional blocking code uses link:https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/ThreadLocal.html[`ThreadLocal`]\n"
" variables to store contextual objects in order to avoid\n"
"passing them as parameters everywhere. Many Quarkus extensions require those contextual objects to operate\n"
"properly: xref:rest-json.adoc[Quarkus REST (formerly RESTEasy Reactive)], xref:cdi-reference.adoc[ArC] and xref:transaction.adoc[Transaction]\n"
"for example."
msgstr ""
"従来のブロッキング・コードでは link:https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/ThreadLocal.html[ThreadLocal] 変数を使用してコンテキストオブジェクトを保存します。\n"
"Quarkusのエクステンションの多くは、適切に動作するためにコンテキストオブジェクトを必要とします：例えば、 xref:rest-json.adoc[Quarkus REST（旧RESTEasy Reactive）] 、 xref:cdi-reference.adoc[ArC] 、 xref:transaction.adoc[Transaction] などです。"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"If you write reactive/async code, you have to cut your work into a pipeline of code blocks that get executed\n"
"\"later\", and in practice after the method you defined them in have returned. As such, `try/finally` blocks\n"
"as well as `ThreadLocal` variables stop working, because your reactive code gets executed in another thread,\n"
"after the caller ran its `finally` block."
msgstr "リアクティブ/非同期コードを書く場合、「後で」実行されるコードブロックのパイプラインに作業を切り 込まなければならず、実際には、定義したメソッドがreturnされた後に実行されます。そのため、 `try/finally` ブロックや `ThreadLocal` 変数は動作しなくなります。なぜならば、呼び出し元が `finally` ブロックを実行した後に、 リアクティブコードは別のスレッドで実行されるからです。"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"link:https://github.com/smallrye/smallrye-context-propagation[SmallRye Context Propagation] an implementation of\n"
"link:https://github.com/eclipse/microprofile-context-propagation[MicroProfile Context Propagation] was made to\n"
"make those Quarkus extensions work properly in reactive/async settings. It works by capturing those contextual\n"
"values that used to be in thread-locals, and restoring them when your code is called."
msgstr "link:https://github.com/eclipse/microprofile-context-propagation[MicroProfile Context Propagation] の実装である link:https://github.com/smallrye/smallrye-context-propagation[SmallRye Context Propagation] は、リアクティブ/非同期設定でQuarkusエクステンションが正しく動作するようにするために作られました。これは、スレッドローカルにあったコンテキスト値を取得し、コードが呼び出されたときにそれらを復元することで動作します。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Solution"
msgstr "ソリューション"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"We recommend that you follow the instructions in the next sections and create the application step by step.\n"
"However, you can go right to the completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Clone the Git repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-archive-url}[archive]."
msgstr "Gitレポジトリをクローンするか `git clone {quickstarts-clone-url}` 、 {quickstarts-archive-url}[アーカイブ] をダウンロードします。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "The solution is located in the `context-propagation-quickstart` link:{quickstarts-tree-url}/context-propagation-quickstart[directory]."
msgstr "ソリューションは `context-propagation-quickstart` link:{quickstarts-tree-url}/context-propagation-quickstart[ディレクトリ] にあります。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Setting it up"
msgstr "設定"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"If you are using link:https://smallrye.io/smallrye-mutiny[Mutiny] (the `quarkus-mutiny` extension), you just need to add\n"
"the `quarkus-smallrye-context-propagation` extension to enable context propagation."
msgstr "link:http://smallrye.io/smallrye-mutiny[Mutiny] ( `quarkus-mutiny` のエクステンション) を使用している場合は、コンテキスト伝播を有効にするために `quarkus-smallrye-context-propagation` のエクステンションを追加するだけです。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "In other words, add the following dependencies to your build file:"
msgstr "つまり、ビルドファイルに以下の依存関係を追加してください:"

#: _versions/3.27/guides/context-propagation.adoc
msgid "pom.xml"
msgstr "pom.xml"

#: _versions/3.27/guides/context-propagation.adoc
msgid "build.gradle"
msgstr "build.gradle"

#: _versions/3.27/guides/context-propagation.adoc
msgid "With this, you will get context propagation for ArC, Quarkus REST and transactions, if you are using them."
msgstr "これにより、ArC、Quarkus REST、トランザクションを使用している場合、それらのコンテキストが伝搬されます。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Usage example with Mutiny"
msgstr "Mutinyとの使用例"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Mutiny"
msgstr "Mutiny"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"This section uses Mutiny reactive types.\n"
"If you are not familiar with Mutiny, check xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]."
msgstr "このセクションでは、Mutinyのリアクティブ型を使用しています。もしMutinyに慣れていない場合は、まず xref:mutiny-primer.adoc[Mutiny - 直感的なリアクティブプログラミングライブラリ] を参照してください。"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"Let's write a REST endpoint that reads the next 3 items from a xref:kafka.adoc[Kafka topic], stores them in a database using\n"
"xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] (all in the same transaction) before returning\n"
"them to the client, you can do it like this:"
msgstr "link:kafka.html[Kafkaトピック]から次の3つのアイテムを読み込み、 link:hibernate-orm-panache.html[Panacheを使ったHibernate ORM]でデータベースに格納してから（すべて同じトランザクションで）、クライアントに返すRESTエンドポイントを書くとしたら、次のようになります:"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"Notice that thanks to Mutiny support for context propagation, this works out of the box.\n"
"The 3 items are persisted using the same transaction and this transaction is committed when the stream completes."
msgstr "コンテキストの伝播のための Mutiny サポートのおかげで、これは、そのまま直ぐに動作することに注目してください。3つのアイテムは同じトランザクションを使用して保持され、このトランザクションはストリームが完了するとコミットされます。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Usage example for `CompletionStage`"
msgstr "`CompletionStage` の使用例"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"If you are using link:https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/CompletionStage.html[`CompletionStage`]\n"
"you need manual context propagation. You can do that by injecting a `ThreadContext`\n"
"or `ManagedExecutor` that will propagate every context. For example, here we use the xref:vertx.adoc[Vert.x Web Client]\n"
"to get the list of Star Wars people, then store them in the database using\n"
"xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] (all in the same transaction) before returning\n"
"them to the client as JSON using xref:rest-json.adoc[Jackson or JSON-B]:"
msgstr ""
"もし link:https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/CompletionStage.html[CompletionStage] を使っている場合は、\n"
"コンテキストの伝播を手動で行う必要があります。\n"
"すべてのコンテキストを伝搬する `ThreadContext` または `ManagedExecutor` を注入することで、それを行うことができます。\n"
"例えば、ここでは xref:vertx.adoc[Vert.x Web Client] を使用してStar Warsの人物のリストを取得し、 xref:hibernate-orm-panache.adoc[Hibernate ORM with Panache] を使用してデータベースに格納してから（すべて同じトランザクションで）、 xref:rest-json.adoc[JacksonまたはJSON-B] を使用してJSONとしてクライアントに返します："

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"Using `ThreadContext` or `ManagedExecutor` you can wrap most useful functional types and `CompletionStage`\n"
"in order to get context propagated."
msgstr "`ThreadContext` または `ManagedExecutor` を使用することで、ほとんどの有用な関数型と `CompletionStage` をラップしてコンテキストを伝播させることができます。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "The injected `ManagedExecutor` uses the Quarkus thread pool."
msgstr "注入された `ManagedExecutor` は、Quarkus のスレッドプールを使用しています。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Overriding which contexts are propagated"
msgstr "どのコンテキストが伝搬されるかをオーバーライドする"

#: _versions/3.27/guides/context-propagation.adoc
msgid "By default, all available contexts are propagated. However, you can override this behaviour in several ways."
msgstr "デフォルトでは、利用可能なすべてのコンテキストが伝搬されます。しかし、この動作をいくつかの方法で上書きすることができます。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Using configuration"
msgstr "設定の使用"

#: _versions/3.27/guides/context-propagation.adoc
msgid "The following configuration properties allow you to specify the default sets of propagated contexts:"
msgstr "以下の設定プロパティでは、伝搬されるコンテキストのデフォルトセットを指定できます。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Configuration property"
msgstr "設定プロパティ"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Description"
msgstr "説明"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Default Value"
msgstr "デフォルト値"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`mp.context.ThreadContext.propagated`"
msgstr "`mp.context.ThreadContext.propagated`"

#: _versions/3.27/guides/context-propagation.adoc
msgid "The comma-separated set of propagated contexts"
msgstr "伝播されたコンテクストのコンマで区切られたセット"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Remaining` (all non-explicitly list contexts)"
msgstr "`Remaining` (すべての非明示的にリスト化されたコンテキスト)"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`mp.context.ThreadContext.cleared`"
msgstr "`mp.context.ThreadContext.cleared`"

#: _versions/3.27/guides/context-propagation.adoc
msgid "The comma-separated set of cleared contexts"
msgstr "クリアされたコンテキストのコンマで区切りのセット"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`None` (no context), unless neither the propagated nor cleared sets contain `Remaining`, in which case the default is `Remaining` (all non-explicitly listed contexts)"
msgstr "`None`（コンテキストなし）。ただし、伝播されたセットとクリアされたセットのどちらにも `Remaining` が含まれていない場合は、デフォルトで `Remaining` （明示されていないすべてのコンテキスト）となります"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`mp.context.ThreadContext.unchanged`"
msgstr "`mp.context.ThreadContext.unchanged`"

#: _versions/3.27/guides/context-propagation.adoc
msgid "The comma-separated set of unchanged contexts"
msgstr "変更されていないコンテキストのコンマで区切られたセット"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`None` (no context)"
msgstr "`None` （コンテキストなし）"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"The following contexts are available in Quarkus either out of the box, or depending on whether you include\n"
"their extensions:"
msgstr "以下のコンテキストは、Quarkusで設定不要で利用可能か、エクステンションを追加するかによって使用できます:"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Context Name"
msgstr "コンテキスト名"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Name Constant"
msgstr "ネーム定数"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`None`"
msgstr "`None`"

#: _versions/3.27/guides/context-propagation.adoc
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#NONE[`ThreadContext.NONE`]"
msgstr "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#NONE[`ThreadContext.NONE`]"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Can be used to specify an empty set of contexts, but setting the value to empty works too"
msgstr "コンテキストの空のセットを指定するために使用できますが、値を空に設定しても機能します。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Remaining`"
msgstr "`Remaining`"

#: _versions/3.27/guides/context-propagation.adoc
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#ALL_REMAINING[`ThreadContext.ALL_REMAINING`]"
msgstr "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#ALL_REMAINING[`ThreadContext.ALL_REMAINING`]"

#: _versions/3.27/guides/context-propagation.adoc
msgid "All the contexts that are not explicitly listed in other sets"
msgstr "他のセットに明示されていないすべてのコンテクスト"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Transaction`"
msgstr "`Transaction`"

#: _versions/3.27/guides/context-propagation.adoc
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#TRANSACTION[`ThreadContext.TRANSACTION`]"
msgstr "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#TRANSACTION[`ThreadContext.TRANSACTION`]"

#: _versions/3.27/guides/context-propagation.adoc
msgid "The JTA transaction context"
msgstr "JTAトランザクションコンテキスト"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`CDI`"
msgstr "`CDI`"

#: _versions/3.27/guides/context-propagation.adoc
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#CDI[`ThreadContext.CDI`]"
msgstr "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#CDI[`ThreadContext.CDI`]"

#: _versions/3.27/guides/context-propagation.adoc
msgid "The CDI (ArC) context"
msgstr "CDI(ArC)のコンテキスト"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Servlet`"
msgstr "`Servlet`"

#: _versions/3.27/guides/context-propagation.adoc
msgid "N/A"
msgstr "N/A"

#: _versions/3.27/guides/context-propagation.adoc
msgid "The servlet context"
msgstr "サーブレットコンテキスト"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Jakarta REST`"
msgstr "`Jakarta REST`"

#: _versions/3.27/guides/context-propagation.adoc
msgid "The Quarkus REST or RESTEasy Classic context"
msgstr "Quarkus RESTまたはRESTEasy Classicのコンテキスト"

#: _versions/3.27/guides/context-propagation.adoc
msgid "`Application`"
msgstr "`Application`"

#: _versions/3.27/guides/context-propagation.adoc
msgid "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#APPLICATION[`ThreadContext.APPLICATION`]"
msgstr "https://javadoc.io/static/org.eclipse.microprofile.context-propagation/microprofile-context-propagation-api/1.2/org/eclipse/microprofile/context/ThreadContext.html#APPLICATION[`ThreadContext.APPLICATION`]"

#: _versions/3.27/guides/context-propagation.adoc
msgid "The current `ThreadContextClassLoader`"
msgstr "現在の `ThreadContextClassLoader`"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Overriding the propagated contexts using annotations"
msgstr "伝播されたコンテキストをアノテーションで上書き"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"In order for automatic context propagation, such as Mutiny uses, to be overridden in specific methods,\n"
"you can use the https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/CurrentThreadContext.html[`@CurrentThreadContext`]\n"
"annotation:"
msgstr "Mutinyが使用しているような自動コンテキスト伝搬を、特定のメソッドでオーバーライドするためには link:https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/CurrentThreadContext.html[`@CurrentThreadContext`] アノテーションを使用します:"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Overriding the propagated contexts using CDI injection"
msgstr "CDIインジェクションを用いた伝搬されたコンテキストのオーバーライド"

#: _versions/3.27/guides/context-propagation.adoc
msgid "You can also inject a custom-built `ThreadContext` using the https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/ThreadContextConfig.html[`@ThreadContextConfig`] annotation on your injection point:"
msgstr "また、インジェクションポイントに link:https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/ThreadContextConfig.html[`@ThreadContextConfig`]アノテーションを使うことでカスタムメイドの `ThreadContext` を注入することもできます:"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Likewise, there is a similar way to inject a configured instance of `ManagedExecutor` using the https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/ManagedExecutorConfig.html[`@ManagedExecutorConfig`] annotation:"
msgstr "同様に、 https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/ManagedExecutorConfig.html[`@ManagedExecutorConfig`] アノテーションを使用して設定された `ManagedExecutor` のインスタンスをインジェクトする類似の方法があります:"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Sharing configured CDI instances of ManagedExecutor and ThreadContext"
msgstr "ManagedExecutorとThreadContextの構成されたCDIインスタンスの共有"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"If you need to inject the same `ManagedExecutor` or `ThreadContext` into several places and share its capacity, you can name the instance with https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/NamedInstance.html[`@NamedInstance`] annotation.\n"
"`@NamedInstance` is a CDI qualifier and all injections of the same type and name will therefore share the same underlying instance.\n"
"If you also need to customize your instance, you can do so using `@ManagedExecutorConfig`/`ThreadContextConfig` annotation on one of its injection points:"
msgstr "同じ `ManagedExecutor` や `ThreadContext` を複数の場所に注入し、その容量を共有したい場合、そのインスタンスに link:https://javadoc.io/doc/io.smallrye/smallrye-context-propagation-api/latest/io/smallrye/context/api/NamedInstance.html[`@NamedInstance`] アノテーションで名前を付けることが出来ます。 `@NamedInstance` はCDIアノテーションであり、同じ型と名前のすべての注入は、したがって、同じ基礎となるインスタンスを共有します。インスタンスをカスタマイズする必要がある場合は、インジェクションポイントの1つで `@ManagedExecutorConfig`/ `ThreadContextConfig` アノテーションを使用して、カスタマイズすることができます。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Context Propagation for CDI"
msgstr "CDIのためのコンテキスト伝搬"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"In terms of CDI, `@RequestScoped`, `@ApplicationScoped` and `@Singleton` beans get propagated and are available in other threads.\n"
"`@Dependent` beans as well as any custom scoped beans cannot be automatically propagated via CDI Context Propagation."
msgstr "CDI の観点からは、 `@RequestScoped`, `@ApplicationScoped`, `@Singleton` Beanは伝播され、他のスレッドで利用可能です。 `@Dependent` BeanやカスタムスコープされたBeanは、CDI コンテキスト伝播を介して自動的に伝播されることはありません。"

#: _versions/3.27/guides/context-propagation.adoc
msgid ""
"`@ApplicationScoped` and `@Singleton` beans are always active scopes and as such are easy to deal with - context propagation tasks can work with those beans so long as the CDI container is running.\n"
"However, `@RequestScoped` beans are a different story. They are only active for a short period of time which can be bound either to HTTP request or some other request/task when manually activated/deactivated.\n"
"In this case user must be aware that once the original thread gets to an end of a request, it will terminate the context, calling `@PreDestroy` on those beans and then clearing them from the context.\n"
"Subsequent attempts to access those beans from other threads can result in unexpected behaviour.\n"
"It is therefore recommended to make sure all tasks using request scoped beans via context propagation are performed in such a manner that they don't outlive the original request duration."
msgstr "`@ApplicationScoped` と `@Singleton` のBeanは常にアクティブなスコープであり、そのため対処が簡単です - コンテキスト伝播タスクは、CDI コンテナーが動作している限り、これらのBeanで動作します。しかし、 `@RequestScoped` Beanは話が違います。手動で有効化/無効化すると、HTTP リクエストや他のリクエスト/タスクにバインドされます。この場合、元のスレッドがリクエストの終了に到達すると、コンテキストを終了し、それらのBeanで `@PreDestroy` を呼び出し、コンテキストからクリアされることに注意しなければなりません。その後、他のスレッドからこれらのBeanにアクセスしようとすると、予期せぬ動作をすることがあります。したがって、コンテキストの伝播を介してリクエストスコープされたBeanを使用するすべてのタスクは、元のリクエストの持続時間を超えないような方法で実行されることを確認することが推奨されます。"

#: _versions/3.27/guides/context-propagation.adoc
msgid "Due to the above described behavior, it is recommended to avoid using `@PreDestroy` on `@RequestScoped` beans when working with Context Propagation in CDI."
msgstr "上記で説明した動作のため、CDI で Context Propagation を使用する際には `@PreDestroy` を `@RequestScoped` Beanで使用しないことをお勧めします。"
