msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Getting Started With Reactive"
msgstr "リアクティブ入門"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"_Reactive_ is a set of principles to build robust, efficient, and concurrent applications and systems.\n"
"These principles let you handle more load than traditional approaches while using the resources (CPU and memory) more efficiently while also reacting to failures gracefully."
msgstr "_リアクティブ_ とは、堅牢で効率的、かつコンカレントなアプリケーションやシステムを構築するための一連の原則です。これらの原則により、従来のアプローチよりも多くの負荷を処理しながら、リソース（CPUやメモリ）をより効率的に使用し、また障害にも適切に対応することができます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"Quarkus is a _Reactive_ framework.\n"
"Since the beginning, _Reactive_ has been an essential tenet of the Quarkus architecture.\n"
"It includes many reactive features and offers a broad ecosystem."
msgstr "Quarkusは _Reactive_ フレームワークです。当初から、 _Reactive_はQuarkusのアーキテクチャに欠かせない要素でした。多くのReactive機能が含まれており、幅広いエコシステムを提供しています。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"This guide is not an in-depth article about what _Reactive_ is and how Quarkus enables reactive architectures.\n"
"If you want to read more about these topics, refer to the xref:quarkus-reactive-architecture.adoc[Reactive Architecture guide], which provides an overview of the Quarkus reactive ecosystem."
msgstr "このガイドは、 _リアクティブ_ とは何か、Quarkusでどのようにリアクティブアーキテクチャを実現するかについての詳細な記事ではありません。これらのトピックについて詳しく知りたい場合は、Quarkusのリアクティブエコシステムの概要を説明した xref:quarkus-reactive-architecture.adoc[リアクティブアーキテクチャガイド] を参照してください。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"In this guide, we will get you started with some reactive features of Quarkus.\n"
"We are going to implement a simple CRUD application.\n"
"Yet, unlike in the xref:hibernate-orm-panache.adoc[Hibernate with Panache guide], it uses the reactive features of Quarkus."
msgstr "このガイドでは、Quarkusのリアクティブな機能をご紹介します。簡単なCRUDアプリケーションを実装する予定です。ただし、 xref:hibernate-orm-panache.adoc[Hibernate with Panacheガイド] とは異なり、Quarkusのリアクティブ機能を使用します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "This guide will help you with:"
msgstr "このガイドでは、次の情報を提供します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Bootstrapping a reactive CRUD application with Quarkus"
msgstr "RESTEasy Reactiveを使ったリアクティブCRUDアプリケーションのブートストラップ"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Using Hibernate Reactive with Panache to interact with a database in a reactive fashion"
msgstr "Hibernate Reactive with Panacheによるリアクティブなデータベースとの連携"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Using Quarkus REST (formerly RESTEasy Reactive) to implement HTTP API while enforcing the reactive principle"
msgstr "Quarkus REST（旧RESTEasy Reactive）を使用して、リアクティブ原則に基づいてHTTP APIを実装します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Packaging and Running the application"
msgstr "アプリケーションのパッケージ化と実行"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Prerequisites"
msgstr "前提条件"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"Verify that Maven is using the Java version you expect.\n"
"If you have multiple JDKs installed, make sure Maven is using the expected one.\n"
"You can verify which JDK Maven uses by running `mvn --version`."
msgstr ""
"Mavenが期待するJavaバージョンを使用していることを確認します。\n"
"複数のJDKがインストールされている場合、Mavenが期待されるものを使用していることを確認してください。Maven がどの JDK を使用しているかは、 `mvn --version` を実行することで確認できます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Imperative vs. Reactive: a question of threads"
msgstr "命令型かリアクティブ型か: スレッドの問題だ"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"As mentioned above, in this guide, we are going to implement a reactive CRUD application.\n"
"But you may wonder what the differences and benefits are in comparison to the traditional and imperative model."
msgstr "前述したように、このガイドでは、リアクティブなCRUDアプリケーションを実装します。しかし、伝統的なモデルや命令型のモデルと比べて、どのような違いや利点があるのか疑問に思うかもしれません。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"To better understand the contrast, we need to explain the difference between the reactive and imperative execution models.\n"
"It's essential to comprehend that _Reactive_ is not just a different execution model, but that distinction is necessary to understand this guide."
msgstr "この対比をよりよく理解するためには、リアクティブ型と命令型の実行モデルの違いを説明する必要があります。 _リアクティブ_ は単なる実行モデルの違いではなく、このガイドを理解するためにはその区別が必要であることを理解しておく必要があります。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"In the traditional and imperative approach, frameworks assign a thread to handle the request.\n"
"So, the whole processing of the request runs on this worker thread.\n"
"This model does not scale very well.\n"
"Indeed, to handle multiple concurrent requests, you need multiple threads; and so your application concurrency is constrained by the number of threads.\n"
"In addition, these threads are blocked as soon as your code interacts with remote services.\n"
"So, it leads to inefficient usage of the resources, as you may need more threads, and each thread, as they are mapped to OS threads, has a cost in terms of memory and CPU."
msgstr "伝統的な命令型のアプローチでは、フレームワークはリクエストを処理するスレッドを割り当てます。つまり、リクエストの処理全体がこのワーカースレッド上で実行されるのです。このモデルは、スケールがあまりよくありません。実際、複数の同時リクエストを処理するためには、複数のスレッドが必要となり、アプリケーションの同時実行性はスレッドの数によって制限されます。さらに、これらのスレッドは、コードがリモートサービスとやり取りするとすぐにブロックされます。そのため、より多くのスレッドが必要となり、各スレッドはOSのスレッドにマッピングされているため、メモリやCPUのコストがかかり、リソースの非効率的な使用につながります。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"On the other side, the reactive model relies on non-blocking I/Os and a different execution model.\n"
"Non-blocking I/O provides an efficient way to deal with concurrent I/O.\n"
"A minimal amount of threads called I/O threads, can handle many concurrent I/O.\n"
"With such a model, request processing is not delegated to a worker thread but uses these I/O threads directly.It saves memory and CPU as there is no need to create worker threads to handle the requests.\n"
"It also improves the concurrency as it removes the constraint on the number of threads.\n"
"Finally, it also improves response time as it reduces the number of thread switches."
msgstr "一方、リアクティブモデルは、ノンブロッキングI/Oおよび、異なる実行モデルに依存しています。ノンブロッキングI/Oは、同時I/Oを効率的に処理する方法です。I/Oスレッドと呼ばれる最小限のスレッドで、多くの同時I/Oを処理することができます。このようなモデルでは、リクエスト処理をワーカースレッドに委ねるのではなく、I/Oスレッドを直接使用します。リクエストを処理するためにワーカースレッドを作成する必要がないため、メモリとCPUを節約できます。リクエストを処理するためにワーカスレッドを作成する必要がないため、メモリやCPUを節約できます。また、スレッド数の制約がなくなるため、同時実行性も向上します。最後に、スレッドの切り替え回数が減ることで、応答時間も改善されます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "From sequential to continuation style"
msgstr "シーケンシャルから継続タイルへ"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"So, with the reactive execution model, the requests are processed using I/O threads.\n"
"But that's not all.\n"
"An I/O thread can handle multiple concurrent requests.\n"
"How? Here is the trick and one of the most significant differences between reactive and imperative."
msgstr "つまり、リアクティブな実行モデルでは、I/Oスレッドを使ってリクエストを処理します。しかし、それだけではありません。I/Oスレッドは、複数の同時リクエストを処理することができます。どうやって？これが、リアクティブとインペラティブの最も重要な違いの一つであるトリックです。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"When processing a request requires interacting with a remote service, like an HTTP API or a database, it does not block the execution while waiting for the response.\n"
"Instead, it schedules the I/O operation and attaches a continuation, i.e., the request processing remaining code.\n"
"This continuation can be passed as a callback (a function invoked with the I/O outcome), or use more advanced constructs such as reactive programming or co-routines.\n"
"Regardless of how the continuation is expressed, the essential aspect is the release of the I/O thread and, as a consequence, the fact that this thread can be used to process another request.\n"
"When the scheduled I/O completes, the I/O thread executes the continuation, and the processing of the pending request continues."
msgstr "リクエストの処理に、HTTP APIやデータベースなどのリモートサービスとのやりとりが必要な場合、レスポンスを待つ間に実行をブロックすることはありません。代わりに、I/O操作をスケジューリングし、リクエスト処理の残りのコードである継続を添付します。この継続は、コールバック（I/Oの結果とともに呼び出される関数）として渡すこともできますし、リアクティブプログラミングやコルーティンなどのより高度な構成を使用することもできます。継続をどのように表現するかに関わらず、重要な点はI/Oスレッドの解放であり、その結果、このスレッドを使って別のリクエストを処理することができるという事実です。スケジュールされたI/Oが完了すると、I/Oスレッドは継続を実行し、保留中のリクエストの処理は継続されます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"So, unlike the imperative model, where I/O blocks the execution, reactive switches to a continuation-based design, where the I/O threads are released, and continuation invoked when the I/Os complete.\n"
"As a result, the I/O thread can handle multiple concurrent requests, improving the overall concurrency of the application."
msgstr "そのため、I/Oが実行をブロックするような命令型モデルとは異なり、リアクティブ型ではI/Oスレッドを解放し、I/Oが完了した時点で継続を呼び出す継続型のデザインに切り替わります。その結果、I/Oスレッドは複数の同時リクエストを処理できるようになり、アプリケーション全体の同時性が向上します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"But, there is a catch.\n"
"We need a way to write continuation-passing code.\n"
"There are many ways of doing this.\n"
"In Quarkus, we propose:"
msgstr "しかし、これには問題があります。継続パッシングのコードを書くための方法が必要なのです。これにはいろいろな方法があります。Quarkusでは、以下を提案しています:"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Mutiny - an intuitive and event-driven reactive programming library"
msgstr "Mutiny - 直感的でイベント駆動型のリアクティブ・プログラミング・ライブラリ"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Kotlin co-routines - a way to write asynchronous code in a sequential manner"
msgstr "Kotlin co-routines - 非同期のコードを逐次的に記述する方法"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"In this guide, we will use Mutiny.\n"
"To know more about Mutiny, check the xref:mutiny-primer.adoc[Mutiny documentation]."
msgstr "このガイドでは、Mutinyを使用します。Mutinyについて詳しく知りたい方は、 link:mutiny-primer.html[Mutinyのドキュメント]をご覧ください。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"Project Loom is coming to the JDK soon and proposes a virtual thread-based model.\n"
"The Quarkus architecture is ready to support Loom as soon as it's become globally available."
msgstr "JDKに近々導入されるProject Loomは、仮想スレッドベースのモデルを提案しています。Quarkusのアーキテクチャは、Loomがグローバルに利用可能になり次第、サポートする準備ができています。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Bootstrapping the Reactive Fruits application"
msgstr "リアクティブフルーツアプリケーションの起動"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "With this in mind, let's see how we can develop a CRUD application with Quarkus, which will use the I/O thread to handle the HTTP requests, interact with a database, process the result, and write the HTTP response; in other words: a reactive CRUD application."
msgstr "これを念頭に置いて、Quarkusを使用してCRUDアプリケーションを開発する方法を見てみましょう。このアプリケーションは、I / Oスレッドを使用してHTTPリクエストを処理し、データベースとやり取りし、結果を処理し、HTTP応答を記述します。言い換えれば、リアクティブCRUDアプリケーションです。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "While we recommend you to follow the step-by-step instructions, you can find the final solution on https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart."
msgstr "ステップバイステップの手順に従うことをお勧めしますが、最終的なソリューションは https://github.com/quarkusio/quarkus-quickstarts/tree/main/hibernate-reactive-panache-quickstart  で見つけることができます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "First, go to https://code.quarkus.io[code.quarkus.io] and select the following extensions:"
msgstr "まず、 link:https://code.quarkus.io[code.quarkus.io]にアクセスし、以下のエクステンションを選択します:"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Quarkus REST Jackson"
msgstr "Quarkus REST Jackson"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Hibernate Reactive with Panache"
msgstr "Hibernate Reactive with Panache"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Reactive PostgreSQL client"
msgstr "リアクティブなPostgreSQLクライアント"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"The last extension is the reactive database driver for PostgreSQL.\n"
"Hibernate Reactive uses that driver to interact with the database without blocking the caller thread."
msgstr "最後のエクステンションは、PostgreSQL用のリアクティブデータベースドライバです。Hibernate Reactiveはこのドライバを使用して、呼び出し元のスレッドをブロックすることなくデータベースと対話します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Once selected, click on \"Generate your application\", download the zip file, unzip it and open the code in your favorite IDE."
msgstr "選択したら、\"Generate your application \"をクリックし、zipファイルをダウンロードして解凍し、お好みのIDEでコードを開きます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Reactive Panache Entity"
msgstr "Reactive Panache Entity"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Let's start with the `Fruit` entity.Create the `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` file with the following content:"
msgstr "では、 `Fruit` から始めましょう。以下の内容で `src/main/java/org/acme/hibernate/orm/panache/Fruit.java` ファイルを作成します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Make sure you import the reactive variant of `PanacheEntity`."
msgstr "`PanacheEntity` のリアクティブ版をインポートしてください。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"This class represents `Fruits`.\n"
"It's a straightforward entity with a single field (`name`).\n"
"Note that it uses `io.quarkus.hibernate.reactive.panache.PanacheEntity`, the reactive variant of `PanacheEntity`.\n"
"So, behind the scenes, Hibernate uses the execution model we described above.\n"
"It interacts with the database without blocking the thread.\n"
"In addition, this reactive `PanacheEntity` proposes a reactive API.\n"
"We will use this API to implement the REST endpoint."
msgstr "このクラスは `Fruits` を表します。1つのフィールド( `name`)を持つ単純なエンティティです。なお、このクラスは `PanacheEntity` のリアクティブ版である `io.quarkus.hibernate.reactive.panache.PanacheEntity` を使用しています。つまり、舞台裏では、Hibernate は上述の実行モデルを使用しています。スレッドをブロックすることなく、データベースと対話します。さらに、このリアクティブな `PanacheEntity` は、リアクティブな API を提案しています。このAPIを使用してRESTエンドポイントを実装します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Before going further, open the `src/main/resources/application.properties` file and add:"
msgstr "先に進む前に、 `src/main/resources/application.properties` ファイルを開き、以下を追加します:"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "It instructs the application to use PostgreSQL for the database and to handle the database schema generation."
msgstr "データベースにPostgreSQLを使用し、データベーススキーマの生成を処理するようにアプリケーションに指示します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "In the same directory, create an `import.sql` file, which inserts a few fruits, so we don't start with an empty database in dev mode:"
msgstr "同じディレクトリに、 `import.sql` ファイルを作成します。このファイルにはいくつかのフルーツが挿入されており、開発モードで空のデータベースから始めないようになっています。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"In a terminal, launch the application in dev mode using: `./mvnw quarkus:dev`.\n"
"Quarkus automatically starts a database instance for you and configure the application. Now we only need to implement the HTTP endpoint."
msgstr "ターミナルで、次のようにしてアプリケーションを開発モードで起動します： `./mvnw quarkus:dev`. Quarkusは自動的にデータベースインスタンスを起動し、アプリケーションの設定を行います。あとは、HTTPエンドポイントを実装するだけです。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Reactive Resource"
msgstr "リアクティブリソース"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"Because the interaction with the database is non-blocking and asynchronous, we need to use asynchronous constructs to implement our HTTP resource.\n"
"Quarkus uses Mutiny as its central reactive programming model.\n"
"So, it supports returning Mutiny types (`Uni` and `Multi`) from HTTP endpoints.\n"
"Also, our Fruit Panache entity exposes methods using these types, so we only need to implement the _glue_."
msgstr "データベースとのやりとりはノンブロッキングで非同期なので、HTTPリソースを実装するために非同期の構造を使用する必要があります。Quarkusは、中心となるリアクティブプログラミングモデルとしてMutinyを使用しています。そのため、HTTPエンドポイントからMutinyタイプ（ `Uni` と `Multi` ）を返すことをサポートしています。また、Fruit Panacheのエンティティはこれらの型を使ったメソッドを公開していますので、私たちは _糊_ を実装するだけで済みます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Create the `src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` file with the following content:"
msgstr "`src/main/java/org/acme/hibernate/orm/panache/FruitResource.java` ファイルを以下の内容で作成します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"Let's start with the `getAll` method. The `getAll` method returns all the fruits stored in the database.\n"
"In the `FruitResource`, add the following code:"
msgstr "まずは、 `getAll` のメソッドから見てみましょう。 `getAll` メソッドは、データベースに保存されているすべてのフルーツを返します。 `FruitResource` の中に、以下のコードを追加します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Open http://localhost:8080/fruits to invoke this method:"
msgstr "http://localhost:8080/fruits を開いて、このメソッドを呼び出します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"We get the expected JSON array.\n"
"Quarkus REST automatically maps the list into a JSON Array, except if instructed otherwise."
msgstr ""
"期待通りのJSON配列が得られます。\n"
"Quarkus RESTは特に指示がない限り、自動的にリストをJSON配列にマップします。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"Look at the return type; it returns a `Uni` of `List<Fruit>`.\n"
"`Uni` is an asynchronous type.\n"
"It's a bit like a future.\n"
"It's a placeholder that will get its value (item) later.\n"
"When it receives the item (Mutiny says it _emits_ its item), you can attach some behavior.\n"
"That's how we express the continuation: get a uni, and when the uni emits its item, execute the rest of the processing."
msgstr "戻り値の型を見てください。これは `List<Fruit>` の `Uni` を返します。 `Uni` は非同期型です。これはfutureのようなものです。これは後で値（アイテム）を得るためのプレースホルダーです。アイテムを受け取ったら（Mutinyではアイテムを _emit_すると言っています）、何らかの動作を付けることができます。Uniを取得し、そのUniがアイテムをemitしたら、残りの処理を実行する、という継続を表現しています。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"Reactive developers may wonder why we can't return a stream of fruits directly.\n"
"It tends to be a bad idea when dealing with a database.\n"
"Relational databases do not handle streaming well.\n"
"It’s a problem of protocols not designed for this use case.\n"
"So, to stream rows from the database, you need to keep a connection (and sometimes a transaction) open until all the rows are consumed.\n"
"If you have slow consumers, you break the golden rule of databases: don’t hold connections for too long.\n"
"Indeed, the number of connections is rather low, and having consumers keeping them for too long will dramatically reduce the concurrency of your application.\n"
"So, when possible, use a `Uni<List<T>>` and load the content.\n"
"If you have a large set of results, implement pagination."
msgstr "リアクティブな開発者は、なぜフルーツのストリームを直接返すことができないのかと思うかもしれません。それは、データベースを扱うときにはよくない考えになりがちです。リレーショナル・データベースはストリーミングをうまく扱えません。これは、このユースケースのために設計されていないプロトコルの問題です。そのため、データベースから行をストリーミングするには、すべての行が消費されるまで、コネクション（場合によってはトランザクション）を開いておく必要があります。コンシューマーが遅い場合、データベースの黄金律である「コネクションを長く保持しない」を破ってしまいます。実際、コネクションの数はかなり少なく、コンシューマーがコネクションを長時間保持することは、アプリケーションの並行性を劇的に低下させます。ですから、可能な限り `Uni<List<T>>` を使用し、コンテンツをロードしてください。結果のセットが大きい場合は、ページネーションを実装してください。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Let's continue our API with `getSingle`:"
msgstr "`getSingle` でAPIを継続してみましょう。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"In this case, we use `Fruit.findById` to retrieve the fruit.\n"
"It returns a `Uni`, which will complete when the database has retrieved the row."
msgstr "この場合、 `Fruit.findById` を使ってフルーツを取得します。これは、データベースが行を取得したときに完了する `Uni` を返します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "The `create` method allows adding a new fruit to the database:"
msgstr "`create` メソッドでは、新しいフルーツをデータベースに追加することができます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"The code is a bit more involved.\n"
"To write to a database, we need a transaction, therefore we use `Panache.withTransaction` to obtain one (asynchronously) and proceed to call the `persist` method.\n"
"The `persist` method returns a `Uni` that emits the result of the insertion of the fruit in the database.\n"
"Once the insertion completes (which plays the role of the continuation), we create a `201 CREATED` HTTP response."
msgstr "コードはもう少し複雑です。データベースに書き込むにはトランザクションが必要なので、 `Panache.withTransaction` を使って（非同期に）トランザクションを取得し、 `persist` メソッドを呼び出します。 `persist` メソッドは、フルーツのデータベースへの挿入結果を返す `Uni` を返却します。挿入が完了すると（これが継続の役割を果たす）、 `201 CREATED` HTTPレスポンスを作成します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "If you have https://curl.se/[curl] on your machine, you can try the endpoint using:"
msgstr "マシンに link:https://curl.se/[curl]があれば、エンドポイントを使って試すことができます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Following the same ideas, you can implement the other CRUD methods."
msgstr "同じ考え方で、他のCRUDメソッドも実装できます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Testing and Running"
msgstr "テストと実行"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"Testing a reactive application is similar to testing a non-reactive one: use the HTTP endpoint and verify the HTTP responses.\n"
"The fact that the application is reactive does not change anything."
msgstr "リアクティブなアプリケーションのテストは、非リアクティブなアプリケーションのテストと同様に、 HTTP エンドポイントを使用して、HTTP レスポンスを検証します。アプリケーションがリアクティブであることによる差異はありません。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "In https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java] you can see how the test for the fruit application can be implemented."
msgstr "link:https://github.com/quarkusio/quarkus-quickstarts/blob/main/hibernate-reactive-panache-quickstart/src/test/java/org/acme/hibernate/orm/panache/FruitsEndpointTest.java[FruitsEndpointTest.java]では、Fruitアプリケーションのテストがどのように実装出来るかを見ることができます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Packaging and running the application does not change either."
msgstr "アプリケーションのパッケージ化と実行も同様に差異はありません。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "You can use the following command as usual:"
msgstr "以下のコマンドは通常通り使用できます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "or to build a native executable:"
msgstr "また、ネイティブ実行可能ファイルのビルドも同様です。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "You can also package the application in a container."
msgstr "また、アプリケーションをコンテナにパッケージすることもできます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "To run the application, don’t forget to start a database and provide the configuration to your application."
msgstr "アプリケーションを実行するには、データベースを起動し、アプリケーションに設定を提供することを忘れないでください。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "For example, you can use Docker to run your database:"
msgstr "例えば、Dockerを使ってデータベースを動かすことができます。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Then, launch the application using:"
msgstr "そして、アプリケーションを起動します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Or, if you packaged your application as native executable, use:"
msgstr "あるいは、アプリケーションをネイティブ実行可能ファイルとしてパッケージ化する場合は、次を使用します。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"The parameters passed to the application are described in the datasource guide.\n"
"There are other ways to configure the application - please check the xref:config-reference.adoc#configuration-sources[configuration guide] to have an overview of the possibilities (such as env variable, .env files and so on)."
msgstr "アプリケーションに渡されるパラメータは、データソースガイドに記載されています。アプリケーションを設定する方法は他にもあります。 xref:config-reference.adoc#configuration-sources[設定ガイド]を参照して、利用可能なオプションの概要を確認してください（env変数、.envファイルなど）。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "Going further"
msgstr "さらに詳しく"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid ""
"This guide is a brief introduction to some reactive features offered by Quarkus.\n"
"Quarkus is a reactive framework, and so offers a lot of reactive features."
msgstr "このガイドでは、Quarkusが提供するいくつかのリアクティブ機能を簡単に紹介しました。Quarkusはリアクティブフレームワークであるため、多くのリアクティブ機能を提供しています。"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "If you want to continue on this topic check:"
msgstr "このトピックを続けたい方は以下をチェック下さい:"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "xref:quarkus-reactive-architecture.adoc[The Quarkus Reactive Architecture]"
msgstr "link:quarkus-reactive-architecture.html[Quarkusリアクティブアーキテクチャ]"

#: _versions/3.27/guides/getting-started-reactive.adoc
msgid "xref:mutiny-primer.adoc[Mutiny - an intuitive reactive programming library]"
msgstr "xref:mutiny-primer.adoc[Mutiny -直感的なリアクティブプログラミングライブラリ]"
