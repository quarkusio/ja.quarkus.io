msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Use MCP OAuth2 Flow to access Quarkus MCP Server"
msgstr "MCP OAuth2フローを使用してQuarkus MCPサーバーにアクセスします。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Explain how MCP OAuth2 Flow can be used to access Quarkus MCP Server"
msgstr "MCP OAuth2 Flowを使用してQuarkus MCPサーバーにアクセスする方法を説明します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
msgid "Introduction"
msgstr "はじめに"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Back in April 2025, in the https://quarkus.io/blog/secure-mcp-sse-server/[Getting ready for secure MCP with Quarkus MCP Server] blog post, we explained how to enforce MCP client authentication with the https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] by configuring it to verify bearer access tokens."
msgstr "2025年4月、 link:https://quarkus.io/blog/secure-mcp-sse-server/[Quarkus MCP Serverを使用したセキュアなMCPの準備という] ブログポストで、ベアラアクセストークンを検証するように link:https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Serverを] 設定することで、MCPクライアント認証を実施する方法を説明しました。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "At the time, we worked against the https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[old 2025-03-26 version of the MCP Authorization specification] that expected compliant MCP servers to manage OAuth2 flows themselves either directly or via the delegation, with that idea being disputed due to its complexity, and with no MCP clients providing the OAuth2 authorization code flow support being available. Therefore, in the https://quarkus.io/blog/secure-mcp-sse-server/[Getting ready for secure MCP with Quarkus MCP Server] blog post, the access tokens were acquired out of band: we used https://quarkus.io/guides/security-openid-connect-dev-services[Keycloak DevUI] to get an access token and copy it to https://quarkus.io/blog/secure-mcp-sse-server/#mcp-server-devui[MCP Server DevUI] to test it in devmode, and did a GitHub login to the Quarkus REST endpoint in order to copy and test a GitHub access token with both https://github.com/modelcontextprotocol/inspector[MCP Inspector] and `curl` in prod mode."
msgstr "当時、私たちは、準拠するMCPサーバーがOAuth2フローを直接管理するか、デリゲーションを介して管理することを期待する、 link:https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[古い2025-03-26バージョンのMCP Authorization仕様に] 取り組んでいました。そのため、 link:https://quarkus.io/blog/secure-mcp-sse-server/[Quarkus MCP ServerでセキュアなMCPの準備をしようという] ブログポストでは、アクセストークンを帯域外で取得しました。 link:https://quarkus.io/guides/security-openid-connect-dev-services[Keycloak DevUIを] 使用してアクセストークンを取得し、それを link:https://quarkus.io/blog/secure-mcp-sse-server/#mcp-server-devui[MCP Server DevUIに] コピーしてdevモードでテストしました。また、Quarkus RESTエンドポイントにGitHubログインを行い、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorと] `curl` の両方でGitHubアクセストークンをコピーしてテストしました（prodモード）。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[latest 2025-03-26 version of the MCP Authorization specification] offers a simpler, better version of how OAuth2 must be supported in MCP. The focus has shifted to MCP clients that are now expected to drive the OAuth2 flows, while MCP servers are only required to support automating such flows by providing https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata], as well as correctly verifying the actual access tokens."
msgstr "link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP認可仕様の最新バージョン2025-03-26は] 、OAuth2をMCPでサポートする方法について、よりシンプルで優れたバージョンを提供しています。MCPサーバは、 link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2保護されたリソースメタデータを] 提供し、実際のアクセストークンを正しく検証することによって、そのようなフローの自動化をサポートすることだけが要求されます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "In this blog post, we will explain how MCP clients compliant with the https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[latest 2025-03-26 version of the MCP Authorization specification] can login users using an OAuth2 authorization code flow, acquire access tokens and use them to access secure Quarkus MCP _Streamable HTTP_ servers on behalf of the logged-in users."
msgstr "このブログ記事では、 link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP認証仕様の最新バージョンである2025-03-26に] 準拠したMCPクライアントが、OAuth2認証コードフローを使用してユーザーにログインし、アクセストークンを取得して、そのアクセストークンを使用して、ログインしたユーザーに代わって安全なQuarkus MCP _Streamable HTTP_ サーバーにアクセスする方法について説明します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Currently, https://github.com/modelcontextprotocol/inspector[MCP Inspector] offers the most advanced, adaptable, and accessible MCP OAuth2 authorization code flow support, even if somewhat unstable between its different versions, and therefore we will work with it in this post. You are welcome to experiment with other MCP client implementations."
msgstr "現在、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] は、バージョン間で多少不安定ではあるものの、最も先進的で、適応性が高く、アクセスしやすい MCP OAuth2 認証コードフローをサポートしています。他の MCP クライアントの実装を試すことも歓迎します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "We will demonstrate a great https://docs.quarkiverse.io/quarkus-mcp-server/dev/index.html#_multiple_server_configurations[Quarkus MCP Server capability to support multiple MCP HTTP configurations], each one with their own unique OAuth2 or OpenId Connect security constraints, effectively allowing for a multi-tenant security control of tools, prompts and resources."
msgstr "link:https://docs.quarkiverse.io/quarkus-mcp-server/dev/index.html#_multiple_server_configurations[QuarkusのMCPサーバーは、複数のMCP HTTP構成をサポートし] 、それぞれが独自のOAuth2またはOpenId Connectセキュリティ制約を持つため、ツール、プロンプト、リソースのマルチテナント・セキュリティ制御が効果的に行えることを実証します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "https://www.keycloak.org/[Keycloak] will be used to support two distint security realms, with the security of each of the MCP HTTP configurations controlled by its own Keycloak realm. You are welcome to try to secure Quarkus MCP Server with other preferred OAuth2 or OpenID Connect providers by replacing the Keycloak specific configurations."
msgstr "link:https://www.keycloak.org/[Keycloakは] 2つの異なるセキュリティ領域をサポートするために使用され、MCP HTTP設定のセキュリティはそれぞれのKeycloak領域によって制御されます。Keycloak固有の設定を置き換えることで、他のOAuth2プロバイダーやOpenID ConnectプロバイダーでQuarkus MCPサーバーを保護することも可能です。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Demo MCP OAuth2 Flow Diagram"
msgstr "デモ MCP OAuth2 フロー図"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "You can read all about the MCP OAuth2 Authorization Flow in the https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#authorization-flow[Authorization Flow section of the latest specification]."
msgstr "MCP OAuth2の認証フローについては、 link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#authorization-flow[最新仕様の認証フローセクションを] ご覧ください。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "In this section, we are going to have a look at a simplified diagram showing how https://github.com/modelcontextprotocol/inspector[MCP Inspector] can use OAuth 2.0 Flow to login a user to Keycloak, get an access token and use it to access a secure Quarkus MCP Server endpoint."
msgstr "このセクションでは、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorが] OAuth 2.0フローを使用して、Keycloakにユーザーをログインし、アクセストークンを取得して、それを使用して安全なQuarkus MCP Serverエンドポイントにアクセスする方法を簡略化して示します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "MCP Client such as https://github.com/modelcontextprotocol/inspector[MCP Inspector] requires configuring an MCP _Streamable HTTP_ endpoint URL, OAuth2 Client ID, and optional scopes to access the MCP server securely. And as you can see, a lot happens from the moment you press `Connect` until a valid access token is sent to the MCP server."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] などの MCP クライアントは、MCP サーバーに安全にアクセスするために、MCP _Streamable HTTP_ エンドポイント URL、OAuth2 クライアント ID、およびオプションのスコープを設定する必要があります。このように、 `Connect` を押してから有効なアクセストークンが MCP サーバーに送信されるまで、多くのことが起こります。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "MCP Client starts by accessing the MCP server without a token and gets back HTTP 401 with a `WWW-Authenticate` `resource_metadata` parameter that links to the MCP server's https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] route. The client now fetches a base URL of the Keycloak realm that secures the MCP server as well as the MCP server's resource identifier."
msgstr "MCPクライアントはトークンなしでMCPサーバーへのアクセスを開始し、MCPサーバーの link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2保護されたリソースメタデータ・] ルートにリンクする `WWW-Authenticate` `resource_metadata` パラメータを持つHTTP 401を返します。クライアントは、MCPサーバーを保護するKeycloakレルムのベースURLとMCPサーバーのリソース識別子を取得します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Next, MCP Client uses the Keycloak realm's URL to discover this realm's authorization and token endpoint URLs, supported https://www.rfc-editor.org/rfc/rfc7636[Proof Key for Code Exchange] (PKCE) methods, and other metadata properties."
msgstr "次に、MCPクライアントはKeycloakレルムのURLを使用して、このレルムの認証エンドポイントURLとトークン・エンドポイントURL、サポートされている link:https://www.rfc-editor.org/rfc/rfc7636[Proof Key for Code Exchange] （PKCE）メソッド、およびその他のメタデータ・プロパティを検出します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The user is now redirected to Keycloak to login into the required realm. The Keycloak redirect URL includes the configured OAuth2 client id, scopes, callback URI which points to the `http://localhost:6274/oauth/callback` endpoint managed by the MCP client, as well as the earlier discovered MCP Server's resource identifier as an https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator]. Generated PKCE code challenge and state parameters are also included in the redirect."
msgstr "ユーザーはKeycloakにリダイレクトされ、必要なレルムにログインします。KeycloakのリダイレクトURLには、設定されたOAuth2クライアントID、スコープ、MCPクライアントが管理するエンドポイントを指すコールバックURI、および先に発見されたMCPサーバーのリソース識別子がOAuth2リソースインジケータとして含まれています。 `http://localhost:6274/oauth/callback` MCPクライアントが管理するエンドポイントを指すコールバックURIと、先に発見されたMCPサーバーのリソース識別子が link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2リソースインジケータとして] 含まれています。生成された PKCE コードチャレンジとステートパラメータもリダイレクトに含まれます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The user logs in, is redirected back to the `http://localhost:6274/oauth/callback` endpoint, MCP client exchanges the returned `code` to get ID and access tokens, and uses the access token to access the MCP server, allowing the user to select and run the tool."
msgstr "ユーザはログインし、エンドポイントにリダイレクトされます。 `http://localhost:6274/oauth/callback` MCP クライアントは返された `code` を交換して ID とアクセストークンを取得し、アクセストークンを使用して MCP サーバにアクセスします。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP Authorization Specification] also recommends that MCP clients support https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 Dynamic Client Registration] and https://github.com/modelcontextprotocol/inspector[MCP Inspector] does support it."
msgstr "link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP Authorization Specification] では、MCP クライアントが link:https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 の動的クライアント登録を] サポー トすることも推奨しており、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] はこれをサポートしています。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "In this post, we are only going to look at a case where OAuth2 Client ID is already known in advance, which is likely to be a typical case in production where OIDC client applications are created in advance."
msgstr "この投稿では、OAuth2 クライアント ID が事前に分かっているケースのみを取り上げます。これは、OIDC クライアントアプリケーションを事前に作成する本番環境での典型的なケースと思われます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "We will also look at how https://github.com/modelcontextprotocol/inspector[MCP Inspector] does https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 Dynamic Client Registration] in the next post in this MCP Security series."
msgstr "この MCP セキュリティ・シリーズの次の投稿では、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] が link:https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 動的クライアント登録を] 行う方法についても見ていきます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#authorization-flow[MCP Authorization Flow] is rather neatly defined, requiring the use of such OAuth2 specifications as https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata], https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator], and also recommending the use of https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 Dynamic Client Registration]."
msgstr "link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#authorization-flow[MCP認証フローは] 、OAuth2 link:https://datatracker.ietf.org/doc/html/rfc9728[Protected Resource Metadata] 、 link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicatorなどの] OAuth2仕様の使用を要求し、 link:https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 Dynamic Client Registrationの] 使用を推奨するなど、かなりきちんと定義されています。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Please note though that the actual flow is not that unique to the MCP Authorization. It is a typical Single-page application (SPA) OAuth2 authorization code flow in action:"
msgstr "しかし、実際のフローは MCP 認証に特有なものではないことに注意してください。これは典型的なシングルページアプリケーション (SPA) OAuth2 認証コードフローです："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "SPA uses a provider such as Keycloak to login users and use acquired access tokens to access Quarkus Service on their behalf - typical OAuth2 done at the SPA level. In this diagram, you can replace `SPA` with `MCP Client`, `Quarkus Service` with `MCP Server` and you'll get a close enough match with the demo flow diagram in the previous image."
msgstr "SPAは、Keycloakのようなプロバイダーを使用してユーザーにログインし、取得したアクセストークンを使用してユーザーに代わってQuarkusサービスにアクセスします。この図では、 `SPA` を `MCP Client` に、 `Quarkus Service` を `MCP Server` に置き換えれば、前の画像のデモフロー図とほぼ一致します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The comparison between the https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP Authorization] and SPA OAuth2 flows implies that the https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP Authorization specification] targets generic SPA AI and MCP client applications such as https://github.com/modelcontextprotocol/inspector[MCP Inspector], Claude AI, Cursor, and others that can plugin MCP servers. It does not currently apply to Quarkus MCP Client which typically runs in scope of the higher-level Quarkus LangChain4j server application with its own authentication requirements, you can read more about it in the https://quarkus.io/blog/secure-mcp-client/#demo-architecture[Use Quarkus MCP client to access secure MCP HTTP servers] blog post."
msgstr "link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP Authorizationと] SPA OAuth2フローを比較すると、 link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP Authorization仕様は] 、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] 、Claude AI、Cursorなど、MCPサーバーをプラグインできる一般的なSPA AIやMCPクライアントアプリケーションを対象としていることがわかります。現在のところ、Quarkus MCP Clientには適用されません。Quarkus link:https://quarkus.io/blog/secure-mcp-client/#demo-architecture[MCP] Clientは、通常、独自の認証要件を持つより高レベルのQuarkus LangChain4jサーバーアプリケーションの範囲で実行されます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "We are now ready to have a look at how it works in the demo."
msgstr "では、デモでどのように機能するか見てみましょう。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "You can find the complete project source in the https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/multiple-secure-mcp-http-servers[Multiple Secure Quarkus MCP HTTP Servers sample]."
msgstr "プロジェクトの完全なソースは、 link:https://github.com/quarkiverse/quarkus-mcp-server/tree/main/samples/multiple-secure-mcp-http-servers[Multiple Secure Quarkus MCP HTTP Serversサンプルに] あります。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Step 1 - Create and start MCP server with two secure Streamable HTTP endpoints"
msgstr "ステップ1 - 2つのセキュアなStreamable HTTPエンドポイントを持つMCPサーバーを作成し、起動します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "First, let's create a secure Quarkus MCP server and configure two _Streamable HTTP_ endpoints with their own unique security authentication controls."
msgstr "まず、安全なQuarkus MCPサーバーを作成し、独自のセキュリティ認証制御を持つ2つの _Streamable HTTP_ エンドポイントを設定します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "MCP server maven dependencies"
msgstr "MCP サーバーの maven 依存関係"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Add the following dependencies:"
msgstr "以下の依存関係を追加します："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "`quarkus-mcp-server-sse` is required to support both MCP Streamable HTTP and SSE transports."
msgstr "`quarkus-mcp-server-sse` は、MCP Streamable HTTPとSSEトランスポートの両方をサポートするために必要です。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "`quarkus-oidc` is required to secure access to MCP Server endpoints. Its version is defined in the Quarkus BOM."
msgstr "`quarkus-oidc` は、MCPサーバーのエンドポイントへのアクセスを保護するために必要です。そのバージョンはQuarkusのBOMに定義されています。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "MCP Server Configuration"
msgstr "MCPサーバーの構成"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Let's configure the MCP server:"
msgstr "MCPサーバーを設定しましょう："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Root path for the default `alpha` MCP server endpoint, with both _Streamable HTTP_ and SSE endpoints available under this path."
msgstr "デフォルトの `alpha` MCP サーバー・エンドポイントのルート・パス。このパスでは、 _Streamable HTTP_ エンドポイントと SSE エンドポイントの両方を使用できます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Root path for the `bravo` MCP server endpoint, with both _Streamable HTTP_ and SSE endpoints available under this path."
msgstr "`bravo` MCP サーバー・エンドポイントのルート・パス。このパスでは、 _Streamable HTTP_ エ ンドポイントと SSE エンドポイントの両方が使用できます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Require authentication for all requests to the `alpha` and `bravo` MCP server endpoints. This authentication policy is enforced by the matching OIDC tenant configurations."
msgstr "`alpha` および `bravo` MCP サーバー・エンドポイントへのすべての要求に認証を要求します。この認証ポリシーは、一致する OIDC テナント構成によって実施されます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Default OIDC tenant secures the default MCP server `alpha` endpoint, Keycloak DevService inserts a missing `quarkus.oidc.auth-server-url` property that links to the Keycloak `alpha` realm endpoint."
msgstr "デフォルトのOIDCテナントは、デフォルトのMCPサーバー `alpha` エンドポイントを保護します。Keycloak DevServiceは、Keycloak `alpha` レルムエンドポイントにリンクする欠落している `quarkus.oidc.auth-server-url` プロパティを挿入します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Require that tokens that are allowed to access the default MCP server `alpha` endpoint must have an audience (`aud`) claim that contains a `quarkus-mcp-alpha` value."
msgstr "デフォルトの MCP サーバ `alpha` エンドポイントへのアクセスを許可されるトークンには、 `quarkus-mcp-alpha` 値を含むオーディエンス ( `aud` ) クレームが必要です。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Enable the https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] route for the default OIDC tenant. It will help https://github.com/modelcontextprotocol/inspector[MCP Inspector] to find out about the authorization server that secures the default MCP server `alpha` endpoint."
msgstr "デフォルトの OIDC テナントの link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] ルートを有効にします。これは、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector が] デフォルトの MCP サーバー `alpha` エンドポイントを保護する認証サーバーを見つけるのに役立ちます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "OIDC `bravo` tenant secures the MCP server `bravo` endpoint. Its `quarkus.oidc.bravo.auth-server-url` property links to the Keycloak `bravo` realm endpoint."
msgstr "OIDC `bravo` テナントは、MCPサーバー `bravo` エンドポイントを保護します。その `quarkus.oidc.bravo.auth-server-url` プロパティは、Keycloak `bravo` realm エンドポイントにリンクします。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Require that tokens that are allowed to access the MCP server `bravo` endpoint must have an audience (`aud`) claim that contains a `quarkus-mcp-bravo` value."
msgstr "MCP サーバ `bravo` エンドポイントへのアクセスを許可されるトークンには、 `quarkus-mcp-bravo` 値を含むオーディエンス ( `aud` ) クレームが必要です。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Enable the https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] route for the OIDC `bravo` tenant. It will help https://github.com/modelcontextprotocol/inspector[MCP Inspector] to find out about the the authorization server that secures the MCP server `bravo` endpoint."
msgstr "OIDC `bravo` テナントの link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] ルートを有効にします。これは、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector が] MCP サーバ `bravo` のエンドポイントを保護する認証サーバを見つけるのに役立ちます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Customize the relative path for https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] route for the OIDC `bravo` tenant. By default, it is `http://localhost:8080/bravo`, however, https://github.com/modelcontextprotocol/inspector[MCP Inspector] can not find this route and expects `http://localhost:8080/bravo/mcp`, so we just tune it a bit to make https://github.com/modelcontextprotocol/inspector[MCP Inspector] happy."
msgstr "OIDC `bravo` テナントの link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] ルートの相対パスをカスタマイズします。デフォルトでは `http://localhost:8080/bravo` ですが、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorは] このルートを見つけることができず `http://localhost:8080/bravo/mcp` そのため、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorが] 満足するように少し調整します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Ask Keycloak DevService to upload two realms to the Keycloak container, `alpha-realm.json` and `bravo-realm.json`."
msgstr "Keycloak DevServiceに、Keycloakコンテナに2つのレルム、 `alpha-realm.json` と `bravo-realm.json` をアップロードするよう依頼してください。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Keycloak DevService must set the default OIDC tenant properies, we point to `alpha-realm.json` for Keycloak DevService to use it to set properties such as `quarkus.oidc.auth-server-url`."
msgstr "Keycloak DevServiceは、デフォルトのOIDCテナントプロパティを設定する必要があるため、Keycloak DevServiceが `quarkus.oidc.auth-server-url` などのプロパティを設定するために使用する `alpha-realm.json` 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Ask Keycloak not to add `quarkus.oidc.client-id`. Using the realm verification keys, the configured audience, expiry checks is sufficient to verify Keycloak JWT access tokens; we also plan to deal with dynamically registered OIDC clients in the next blog post."
msgstr "Keycloakに、 `quarkus.oidc.client-id` を追加しないように依頼してください。Keycloak JWTアクセストークンを検証するには、レルム検証キー、設定されたオーディエンス、有効期限チェックを使用すれば十分です。次回のブログポストでは、動的に登録されたOIDCクライアントも扱う予定です。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Allow https://github.com/modelcontextprotocol/inspector[MCP Inspector] CORS requests."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] CORSリクエストを許可します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "You can read about how https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] is supported in Quarkus OIDC in the https://quarkus.io/guides/security-oidc-expanded-configuration#resource-metadata-properties[Expanded OpenId Connect Configuration guide]."
msgstr "Quarkus OIDCで link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2保護リソースメタデータが] どのようにサポートされているかについては、 link:https://quarkus.io/guides/security-oidc-expanded-configuration#resource-metadata-properties[拡張OpenId Connect設定ガイドを] 参照してください。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The Keycloak `alpha` and `bravo` realms represent unique, non-intersecting security configurations backed up by Keycloak. Both of these realms are represented by default and `bravo` OIDC tenants respectively. Quarkus OIDC uses its https://quarkus.io/guides/security-openid-connect-multitenancy#configure-tenant-paths[path-based tenant resolver] to decide which OIDC tenant should handle the current MCP Server request."
msgstr "Keycloakの `alpha` と `bravo` の領域は、Keycloakによってバックアップされた固有の、交差しないセキュリティ構成を表します。これらの領域は両方とも、それぞれデフォルトと `bravo` OIDCテナントによって表されます。Quarkus OIDCは、 link:https://quarkus.io/guides/security-openid-connect-multitenancy#configure-tenant-paths[パスベースのテナントリゾルバを] 使用して、現在のMCPサーバー要求を処理するOIDCテナントを決定します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "You are welcome to update the default and `bravo` OIDC tenant configurations to point to your preferred providers instead of Keycloak, for example, to multiple Entra ID or Auth0 tenants, etc."
msgstr "例えば、複数のEntra IDまたはAuth0テナントなど、Keycloakの代わりにお好みのプロバイダを指すように、デフォルトおよび `bravo` OIDCテナント設定を更新することを歓迎します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Please also check the <<keycloak-vs-github>> section about the reasons behind preferring to use Keycloak in this demo, instead of GitHub that was used in the earlier https://quarkus.io/blog/secure-mcp-sse-server/[Getting ready for secure MCP with Quarkus MCP Server] blog post."
msgstr "このデモでは、 link:https://quarkus.io/blog/secure-mcp-sse-server/[Quarkus MCP ServerでセキュアなMCPを行うための準備として] 、GitHubの代わりにKeycloakを使用しています。このデモでKeycloakを使用した理由については、 <<keycloak-vs-github>> 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP Authorization specification] https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#token-audience-binding-and-validation[requires] that the token audience is validated. The specification prefers https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicators] to control the token audience."
msgstr "link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP Authorization] link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#token-audience-binding-and-validation[仕様では] 、トークンの利用者を検証する link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#token-audience-binding-and-validation[必要があります] 。この仕様では、トークンの利用者を制御するために link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2リソース・インジケータを] 推奨しています。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "For example, by default, the resource identifier of the default MCP server `alpha` endpoint is calculated as `http://localhost:8080` and MCP Inspector includes it as a https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] `resource` parameter in the Keycloak redirect URL. The providers that already support the https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] specification can add the `http://localhost:8080` resource indicator to the access token's audience (`aud`) claim."
msgstr "例えば、デフォルトでは、デフォルトの MCP サーバー `alpha` エンドポイントのリソース識別子は次のように計算されます。 `http://localhost:8080` として計算され、MCP Inspector はこれを link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] `resource` パラメータとして Keycloak リダイレクト URL に含めます。すでに link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2リソースインジケータ] 仕様をサポートしているプロバイダは、アクセストークンのリダイレクトURLにリソース link:https://www.rfc-editor.org/rfc/rfc8707.html[インジケータを] 追加できます。 `http://localhost:8080` リソース・インジケータをアクセストークンのオーディエンス( `aud` )クレームに追加できます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Keycloak does not support the https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] specification yet therefore we configure Keycloak to use predefined audience values specific to MCP server `alpha` and `bravo` endpoints. For our demo, the use of the custom audience values is non-ambiguous and sufficient."
msgstr "Keycloakはまだ link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] 仕様をサポートしていないため、MCPサーバー `alpha` 、 `bravo` エンドポイントに固有の定義済みのオーディエンス値を使用するようにKeycloakを設定します。私たちのデモでは、カスタムオーディエンス値の使用は曖昧でなく、十分です。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "When your OAuth2 provider start supporting the https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] specification, all you need to do to align with the https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP Authorization specification]'s requirement to use resource indicators is to update the OIDC tenant token audience configuration to contain an audience such as `http://localhost:8080`."
msgstr "OAuth2プロバイダが link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2リソース・インジケータ] 仕様のサポートを開始した場合、 link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP Authorization仕様の] リソース・インジケータを使用する要件に合わせるために必要なことは、OIDCテナント・トークンのオーディエンス設定を更新して、以下のようなオーディエンスを含めることです。 `http://localhost:8080` ."

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "You can also harden it by requiring a token to have both a custom audience value such as `quarkus-mcp-alpha` and a resource value such as `http://localhost:8080`."
msgstr "また、 `quarkus-mcp-alpha` のようなカスタムオーディエンス値と、次のようなリソース値の両方をトークンに要求することで、トークンを強固にすることもできます。 `http://localhost:8080` ."

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "MCP User Name Provider tools"
msgstr "MCPユーザー名 プロバイダーツール"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "MCP Server has two _Streamable HTTP_ endpoints. The MCP and security configuration for each of these endpoints allows to group tools, resources and prompts according to specific deployment requirements."
msgstr "MCPサーバーには、2つの _Streamable HTTP_ エンドポイントがあります。これらの各エンドポイントのMCPおよびセキュリティ構成により、特定の配備要件に従ってツール、リソース、およびプロンプトをグループ化できます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Let's create two tools that can return a name of the current MCP Client user, one per each endpoint:"
msgstr "現在のMCPクライアント・ユーザーの名前を返す2つのツールを、各エンドポイントごとに1つずつ作成しましょう："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Capture a security identity represented by the verified access token"
msgstr "検証済みアクセストークンで表されるセキュリティIDの取得"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The `alpha-user-name-provider` tool is accessible via the default _Streamable HTTP_ `alpha` endpoint."
msgstr "`alpha-user-name-provider` ツールは、デフォルトの _Streamable HTTP_ `alpha` エンドポイントからアクセスできます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The `bravo-user-name-provider` tool is accessible via the `bravo` _Streamable HTTP_ endpoint."
msgstr "`bravo-user-name-provider` ツールには、 `bravo` _Streamable HTTP_ エンドポイントからアクセスできます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Both the `alpha-user-name-provider` and `bravo-user-name-provider` tools are very simple tools designed to show that the identities of MCP client users on whose behalf these tools are called by MCP clients is available to tools to perform a user identity specific action, an important element for a secure agentic AI system. Of course, the real world tool implementations will be more interesting."
msgstr "`alpha-user-name-provider` 、 `bravo-user-name-provider` の両ツールは、MCPクライアントからこれらのツールを呼び出されたMCPクライアント・ユーザーのIDが、安全なエージェント型AIシステムにとって重要な要素であるユーザーID固有のアクションを実行するツールで利用可能であることを示すために設計された、非常にシンプルなツールです。もちろん、実世界でのツールの実装はもっと興味深いものになるでしょう。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Keycloak Configuration"
msgstr "キークロークの構成"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The Keycloak configuration has already been prepared in the `alpha-realm.json` and `bravo-realm.json` realm files that Keycloak DevService uploads to Keycloak at the start-up time."
msgstr "Keycloakの設定は、Keycloak DevServiceが起動時にKeycloakにアップロードする `alpha-realm.json` と `bravo-realm.json` realmファイルにすでに準備されています。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Let's have a closer look. Please go to `http://localhost:8080/q/dev-ui` and select an `OpenId Connect` card:"
msgstr "詳しく見てみましょう。次のサイトにアクセスしてください。 `http://localhost:8080/q/dev-ui` にアクセスし、 `OpenId Connect` カードを選択してください："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Click on `Keycloak Admin`, login as `admin:admin` and check the `alpha` and `bravo` realm configurations."
msgstr "`Keycloak Admin` をクリックし、 `admin:admin` としてログインし、 `alpha` と `bravo` のレルム設定を確認します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The `alpha-realm.json` has a single `alpha-client` client and a single user, `alice` with a password `alice`."
msgstr "`alpha-realm.json` には、 `alpha-client` クライアントと、 `alice` パスワード `alice` を持つシングルユーザー があります。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The `alpha-client` is a public client because its `Client authentication` option is disabled:"
msgstr "`Client authentication` オプションが無効になっているため、 `alpha-client` はパブリッククライアントです："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Typically, public SPA applications work with the public clients, to avoid having to deal with managing the confidential client's secret."
msgstr "一般的に、公開SPAアプリケーションは、機密クライアントの秘密管理に対処する必要がないように、公開クライアントと連携します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The `alpha-client` is configured to support a callback URL provided by https://github.com/modelcontextprotocol/inspector[MCP Inspector]:"
msgstr "`alpha-client` は、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] が提供するコールバック URL をサポートするように構成されています："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The `alpha-realm.json` also has a custom `quarkus-mcp-alpha` client scope with an audience mapping, and it is assigned to the `alfa-client` client. It was done similarly to how it was done in the https://quarkus.io/blog/secure-mcp-oidc-client/#keycloak-setup[Use Quarkus MCP client to access secure MCP HTTP server from command line] blog post. We start with creating a `quarkus-mcp-server` client scope:"
msgstr "また、 `alpha-realm.json` 、 `quarkus-mcp-alpha` クライアントスコープにオーディエンスマッピングをカスタムで作成し、 `alfa-client` クライアントに割り当てています。これは、「 link:https://quarkus.io/blog/secure-mcp-oidc-client/#keycloak-setup[Quarkus MCPクライアントを使用して、コマンドラインから安全なMCP HTTPサーバーにアクセスする] 」のブログ記事で行った方法と同様です。まず、 `quarkus-mcp-server` クライアントスコープを作成します："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Next, we create an audience mapping for this scope:"
msgstr "次に、このスコープのオーディエンスマッピングを作成します："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Finally, we assign this client scope as an optional scope to the `alpha-client` client:"
msgstr "最後に、このクライアントスコープをオプションのスコープとして `alpha-client` クライアントに割り当てます："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Similarly, the `bravo-realm.json` has a public `bravo-client` client, and a single user, `jdoe` with a password `jdoe`. It also has a custom `quarkus-mcp-bravo` client scope with an audience mapping."
msgstr "同様に、 `bravo-realm.json` は、パブリック `bravo-client` クライアントと、パスワード `jdoe` を持つシングルユーザー `jdoe` を持っています。また、カスタムの `quarkus-mcp-bravo` クライアント・スコープとオーディエンス・マッピングがあります。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Both realms have the client scopes with the audience mappings to let users request the correct token audience by configuring a custom scope in the https://github.com/modelcontextprotocol/inspector[MCP Inspector]'s OAuth2 Flow configuration. As implied in the <<mcp-server-configuration>>, it will be no longer necessary once the https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] specification is supported by Keycloak and other providers."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorの] OAuth2フロー設定にカスタムスコープを設定することで、ユーザが正しいトークンオーディエンスをリクエストできるように、どちらのレルムにもオーディエンスマッピングを持つクライアントスコープが用意されています。 <<mcp-server-configuration>> に示唆されているように、 link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] 仕様がKeycloakや他のプロバイダによってサポートされるようになれば、その必要はなくなります。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Why was Keycloak preferred to GitHub in the demo ?"
msgstr "なぜデモではGitHubよりもKeycloakが好まれたのですか？"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "You may be wondering, why did we choose `Keycloak` for this demo, instead of `GitHub` that we used in the earlier https://quarkus.io/blog/secure-mcp-sse-server/[Getting ready for secure MCP with Quarkus MCP Server] blog post ?"
msgstr "link:https://quarkus.io/blog/secure-mcp-sse-server/[Quarkus MCP ServerでセキュアなMCPの準備をする」の] ブログ記事で使用した `GitHub` 、このデモに `Keycloak` 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The main reason behind this is that the access tokens that are targeting MCP servers are expected to be designed to target MCP servers only. It is a good OAuth2 security recommendation. GitHub access tokens are meant to be used to access GitHub API, on behalf of the logged-in user, at the point where the login has happened, not via an MCP server indirection. For example, Claude AI offers a direct GitHub MCP integration."
msgstr "この主な理由は、MCP サーバを対象とするアクセストークンは、MCP サーバのみを対象とするように設計されることが期待されているからです。これは OAuth2 のセキュリティ上の推奨事項です。GitHub のアクセストークンは、ログインしたユーザーの代わりに GitHub API にアクセスするために使われるものです。例えば、Claude AI は GitHub MCP と直接統合することができます。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "This consideration applies to other social providers such as Google."
msgstr "この配慮は、グーグルなど他のソーシャル・プロバイダーにも当てはまります。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "It is formally expressed in the https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#access-token-privilege-restriction[MCP Authorization Access Token Privilege Restriction section]: `MCP servers MUST only accept tokens specifically intended for themselves...`."
msgstr "これは、正式には「 link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#access-token-privilege-restriction[MCP Authorization Access Token Privilege Restriction（MCP認可アクセストークン特権制限）」セクションで] 表現されます。 `MCP servers MUST only accept tokens specifically intended for themselves…​` 。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "We also discussed it in the https://quarkus.io/blog/secure-mcp-client/#access-token-delegation-considerations[Access Token Delegation Considerations] section of the https://quarkus.io/blog/secure-mcp-client[Use Quarkus MCP client to access secure MCP HTTP servers] blog post."
msgstr "また、 link:https://quarkus.io/blog/secure-mcp-client[Quarkus MCPクライアントを使用して安全なMCP HTTPサーバーにアクセスするための] ブログ記事の link:https://quarkus.io/blog/secure-mcp-client/#access-token-delegation-considerations[「Access Token Delegation Considerations（アクセストークンの委譲に関する考慮事項] ）」セクションでも説明しました。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "If your MCP server really needs to accept a token that it will not use itself, for example, in order to forward it further downstream, then consider an option of exchanging tokens for the audiences to be correct through the whole distributed token call chain. Please check the https://quarkus.io/blog/secure-mcp-oidc-client/[Use Quarkus MCP client to access secure MCP HTTP server from command line] blog post where we use the standard https://datatracker.ietf.org/doc/html/rfc8693[OAuth2 Token Exchange]."
msgstr "例えば、MCPサーバーが下流に転送するために、自分では使用しないトークンを受け入れる必要がある場合、分散トークンコールチェーン全体を通して正しくオーディエンスを受け入れるためにトークンを交換するオプションを検討してください。 link:https://quarkus.io/blog/secure-mcp-oidc-client/[コマンドラインからセキュアなMCP HTTPサーバーにアクセスするためにQuarkus MCPクライアントを使用する] 」のブログポストで、標準の link:https://datatracker.ietf.org/doc/html/rfc8693[OAuth2トークンエクスチェンジを] 使用していることを確認してください。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Start the MCP server in dev mode"
msgstr "MCPサーバーをdevモードで起動"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Now let's start the MCP server in dev mode:"
msgstr "では、MCPサーバーをdevモードで起動してみましょう："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "You can see that default _Streamable HTTP_ and SSE endpoints are available at `http://localhost:8080/mcp` and `http://localhost:8080/mcp/sse` respectively, while the `bravo` _Streamable HTTP_ and SSE endpoints are available at `http://localhost:8080/bravo/mcp` and `http://localhost:8080/bravo/mcp/sse` respectively."
msgstr "デフォルトの _Streamable HTTP_ および SSE エンドポイントは、次の場所で利用可能です。 `http://localhost:8080/mcp` と `http://localhost:8080/mcp/sse` で、 `bravo` _Streamable HTTP_ と SSE エンドポイントは `http://localhost:8080/bravo/mcp` と `http://localhost:8080/bravo/mcp/sse` にあります。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Step 2: Use MCP Inspector to access two secure MCP server endpoints"
msgstr "ステップ 2: MCP Inspector を使用して、2 つのセキュアな MCP サーバー・エンドポイントにアクセスします。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Start the MCP Inspector"
msgstr "MCP Inspector の起動"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "While https://github.com/modelcontextprotocol/inspector[MCP Inspector] provides a very good OAuth2 Flow support, it is still a very active project and at the moment, you may observe https://github.com/modelcontextprotocol/inspector[MCP Inspector] failing to connect to the OAuth2 provider in some versions."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP] link:https://github.com/modelcontextprotocol/inspector[Inspector] は非常に優れた OAuth2 Flow をサポートしていますが、まだ非常に活発なプロジェクトであるため、現時点では、バージョンによっては OAuth2 プロバイダーへの接続に失敗することがあります。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "https://github.com/modelcontextprotocol/inspector[MCP Inspector] v0.16.7 has been proven to connect to Keycloak successfully and therefore we recommend you to use this version when working with this blog post."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] v0.16.7は、Keycloakに正常に接続できることが証明されています。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "We are now going to connect to two individual MCP _Streamable HTTP_ endpoints in turn."
msgstr "これから2つのMCP _Streamable HTTP_ エンドポイントに順番に接続します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "See the <<demo-flow-diagram>> section for an overview of how https://github.com/modelcontextprotocol/inspector[MCP Inspector] performs a `Connect` request."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] による `Connect` 要求の実行方法の概要については、 <<demo-flow-diagram>> のセクションを参照してください。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Please keep your browser's `Developer Tools Network` tab open if you would like to observe how MCP Inspector probes various MCP server and Keycloak endpoints and eventually succeeds in getting a user logged in and acquiring the access token."
msgstr "MCP InspectorがさまざまなMCPサーバーとKeycloakのエンドポイントをプローブし、最終的にユーザーをログインさせてアクセストークンを取得する様子を観察したい場合は、ブラウザの `Developer Tools Network` タブを開いたままにしておいてください。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Connect to the default MCP Server `alpha` endpoint"
msgstr "デフォルトのMCPサーバー `alpha` エンドポイントに接続します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "If your browser does not show an `OAuth 2.0 Flow` in the `Authentication` view in the loaded https://github.com/modelcontextprotocol/inspector[MCP Inspector] v0.16.7, try latest Firefox."
msgstr "ロードされた link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] v0.16.7の `Authentication` viewで、ブラウザに `OAuth 2.0 Flow` が表示されない場合は、最新のFirefoxをお試しください。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Set `Transport Type` to `Streamable HTTP`, `URL` to the `http://localhost:8080/mcp` address of the default MCP server `alpha` endpoint."
msgstr "`Transport Type` を `Streamable HTTP` に、 `URL` を `http://localhost:8080/mcp` をデフォルトの MCP サーバ `alpha` のエンドポイントのアドレスに設定します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "In the `OAuth 2.0 Flow` authentication section, set the `Client ID` to `alpha-client`, and `Scope` to `openid quarkus-mcp-alpha`."
msgstr "`OAuth 2.0 Flow` 認証セクションで、 `Client ID` を `alpha-client` に、 `Scope` を `openid quarkus-mcp-alpha` に設定します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Requesting an `openid` scope is not strictly necessary in this demo, but OpenId Connect providers will not issue an ID token without it, only the access token, and you'll likely need an SPA MCP Client to have access to the ID token in prod."
msgstr "`openid` スコープを要求することは、このデモでは厳密には必要ではありませんが、OpenId Connect プロバイダはこのスコープなしでは ID トークンを発行しません。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Requesting a `quarkus-mcp-alpha` scope is necessary for Keycloak to add a `quarkus-mcp-alpha` audience to the access token, please see how the `quarkus-mcp-alpha` client scope was created in the <<keycloak-configuration>> section."
msgstr "Keycloakがアクセストークンに `quarkus-mcp-alpha` オーディエンスを追加するには、 `quarkus-mcp-alpha` スコープをリクエストする必要があります。 `quarkus-mcp-alpha` クライアントスコープがどのように作成されたかは、 <<keycloak-configuration>> セクションをご覧ください。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The `Redirect URI` is preconfigured by https://github.com/modelcontextprotocol/inspector[MCP Inspector] and points to the https://github.com/modelcontextprotocol/inspector[MCP Inspector]-managed `http://localhost:6274/oauth` callback endpoint where Keycloak will redirect the user to after the user login is complete."
msgstr "`Redirect URI` は、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] によって事前に設定され、キークロークがユーザー・ログイン完了後にユーザーをリダイレクトする link:https://github.com/modelcontextprotocol/inspector[MCP Inspector が管理する] コールバック・エンドポイントを指します。 `http://localhost:6274/oauth` コールバック・エンドポイントを指します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Now press `Connect`."
msgstr "ここで `Connect` を押します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "As explained in the the <<demo-flow-diagram>> section, https://github.com/modelcontextprotocol/inspector[MCP Inspector] starts by trying to access the default MCP Server _Streamable HTTP_ `alpha` endpoint without a valid token and gets a `401 WWW-Authenticate` challenge, with the `resource_metadata` parameter pointing to the `alpha` endpoint's https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] route."
msgstr "<<demo-flow-diagram>> のセクションで説明したように、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector は] 、有効なトークンなしでデフォルトの MCP Server _Streamable HTTP_ `alpha` エンドポイントにアクセスしようとすると、 `401 WWW-Authenticate` チャレンジを取得します。 `resource_metadata` パラメータは、 `alpha` エンドポイントの link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] ルートを指します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "https://github.com/modelcontextprotocol/inspector[MCP Inspector] fetches the `alpha` endpoint's protected resource metadata and finds out that it is secured by the Keycloak's `alpha` realm."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorは] 、 `alpha` エンドポイントの保護されたリソースのメタデータをフェッチし、それがKeycloakの `alpha` レルムによって保護されていることを確認します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "https://github.com/modelcontextprotocol/inspector[MCP Inspector] now discovers the Keycloak `alpha` realm's metadata, and redirects you to Keycloak `alpha` realm's authorization endpoint where you will see a Keycloak `Alpha` realm login challenge:"
msgstr "`Alpha` M link:https://github.com/modelcontextprotocol/inspector[CP Inspectorが] Keycloak `alpha` realmのメタデータを検出し、Keycloak `alpha` realmの認証エンドポイントにリダイレクトします："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Login as `alice:alice`. Keycloak redirects you back to the https://github.com/modelcontextprotocol/inspector[MCP Inspector]'s `http://localhost:6274/oauth` endpoint. https://github.com/modelcontextprotocol/inspector[MCP Inspector] exchanges the returned `code` for tokens and completes the authorization code flow."
msgstr "`alice:alice` としてログインします。キークロークは、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] のエンドポイントにリダイレクトします。 `http://localhost:6274/oauth` エンドポイントにリダイレクトします。 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector は] 、返された `code` をトークンと交換し、認証コード・フローを完了します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The access token with a `quarkus-mcp-alpha` audience is now available, you can capture it using your browser's `Web Developer Tools` and decode in JWT.io:"
msgstr "`quarkus-mcp-alpha` ブラウザの `Web Developer Tools` 、JWT.ioでデコードできます："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "https://github.com/modelcontextprotocol/inspector[MCP Inspector] uses this token to let you select and run the `alpha-user-name-provider` tool:"
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] では、このトークンを使用して、 `alpha-user-name-provider` ツールを選択および実行します："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The way https://github.com/modelcontextprotocol/inspector[MCP Inspector] was able to acquire the access token, knowing only the OAuth2 Client ID and the MCP server's endpoint address was interesting. See the <<demo-flow-diagram>> section for the overview of how the whole OAuth2 flow works."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorが] OAuth2クライアントIDとMCPサーバのエンドポイントアドレスだけを知っていて、アクセストークンを取得できた方法は興味深いものでした。OAuth2全体の流れの概要については、 <<demo-flow-diagram>> のセクションを参照してください。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Now disconnect MCP Inspector from the MCP Server `alpha` endpoint by pressing a `Disconnect` button."
msgstr "次に、 `Disconnect` ボタンを押して、MCP Inspector を MCP Server `alpha` エンドポイントから切断します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Connect to the MCP Server `bravo` endpoint"
msgstr "MCP Server `bravo` エンドポイントに接続します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Connecting to the MCP Server `bravo` endpoint works exactly the same as with the default `alpha` endpoint, as explained in the <<mcp-inspector-connect-to-alpha>> section, we only need to use the MCP Server `bravo` endpoint related properties."
msgstr "MCP Server `bravo` エンドポイントへの接続は、 <<mcp-inspector-connect-to-alpha>> のセクションで説明したように、デフォルトの `alpha` エンドポイントを使用した場合とまったく同じように動作します。MCP Server `bravo` エンドポイント関連のプロパティを使用するだけです。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Set `Transport Type` to `Streamable HTTP`, `URL` to the `http://localhost:8080/bravo/mcp` address of the MCP server `bravo` endpoint."
msgstr "`Transport Type` を `Streamable HTTP` に、 `URL` を `http://localhost:8080/bravo/mcp` を MCP サーバ `bravo` のエンドポイントのアドレスに設定します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "In the `OAuth 2.0 Flow` authentication section, set the `Client ID` to `bravo-client`, and `Scope` to `openid quarkus-mcp-bravo`."
msgstr "`OAuth 2.0 Flow` 認証セクションで、 `Client ID` を `bravo-client` に、 `Scope` を `openid quarkus-mcp-bravo` に設定します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Keep `Redirect URI` set to `http://localhost:6274/oauth`."
msgstr "`Redirect URI` を `http://localhost:6274/oauth` ."

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "https://github.com/modelcontextprotocol/inspector[MCP Inspector] starts by trying to access the MCP Server `bravo` endpoint without a valid token and gets a `401 WWW-Authenticate` challenge, with the `resource_metadata` parameter pointing to the `bravo`'s  https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] route."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspector は] 、有効なトークンなしで MCP Server `bravo` エンドポイントにアクセスしようとすると、 `resource_metadata` パラメータが `bravo's link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] ルートを指す、 `401 WWW-Authenticate` チャレンジを取得します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "https://github.com/modelcontextprotocol/inspector[MCP Inspector] fetches the `bravo` endpoint's protected resource metadata and finds out that it is secured by the Keycloak's `bravo` realm."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorは] 、 `bravo` エンドポイントの保護されたリソースのメタデータをフェッチし、それがKeycloakの `bravo` レルムによって保護されていることを確認します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "https://github.com/modelcontextprotocol/inspector[MCP Inspector]  now discovers the Keycloak `bravo` realm's metadata, and redirects you to Keycloak `bravo` realm's authorization endpoint where you will see a Keycloak `Bravo` realm login challenge:"
msgstr "`Bravo` M link:https://github.com/modelcontextprotocol/inspector[CP Inspectorが] Keycloak `bravo` realmのメタデータを検出し、Keycloak `bravo` realmの認証エンドポイントにリダイレクトします："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Login as `jdoe:jdoe`. Keycloak redirects you back to the https://github.com/modelcontextprotocol/inspector[MCP Inspector]'s `http://localhost:6274/oauth` endpoint. https://github.com/modelcontextprotocol/inspector[MCP Inspector] exchanges the returned `code` for tokens and completes the authorization code flow."
msgstr "`jdoe:jdoe` としてログインします。キークロークは、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] のエンドポイントにリダイレクトします。 `http://localhost:6274/oauth` エンドポイントにリダイレクトします。 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector は] 、返された `code` をトークンと交換し、認証コード・フローを完了します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The access token with a `quarkus-mcp-bravo` audience is now available. https://github.com/modelcontextprotocol/inspector[MCP Inspector] uses this token to let you select and run the `bravo-user-name-provider` tool:"
msgstr "`quarkus-mcp-bravo` のアクセス・トークンが利用可能になりました。 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] では、このトークンを使用して、 `bravo-user-name-provider` ツールを選択および実行できます："

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "See the <<mcp-inspector-connect-to-alpha>> section for more explanations of how https://github.com/modelcontextprotocol/inspector[MCP Inspector] manages to connect to the MCP Server endpoint knowing only its URL and the OAuth2 Client ID."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspector が] 、URL と OAuth2 クライアント ID だけを知っている MCP Server エンドポイントに接続する方法については、「 <<mcp-inspector-connect-to-alpha>> 」のセクションを参照してください。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Security Considerations"
msgstr "セキュリティ"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "The main security consideration for secure Quarkus MCP server deployments is to ensure that access tokens have a correct audience, for the MCP Server to assert that the current token is meant to access this MCP server only. MCP Servers that propagate tokens further should consider exchanging such tokens, for a new token to target the downstream service correctly."
msgstr "セキュアなQuarkus MCPサーバーを導入するための主なセキュリティ上の考慮点は、アクセストークンが正しい対象者であることを保証することです。トークンをさらに伝播するMCPサーバーは、新しいトークンと交換して、ダウンストリームサービスを正し くターゲットすることを検討する必要があります。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "A token audience claim can have several values, and it must contain an https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] that points to a specific HTTP resource location or a custom audience value or both the resource indicator and the custom audience values."
msgstr "トークンオーディエンスクレームは複数の値を持つことができ、特定の HTTP リソースの場所を指す link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 リソースインジケータ] 、またはカスタムオーディエンス値、あるいはリソースインジケータとカスタムオーディエンス値の両方を含む必要があります。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "One should also consider carefully if an MCP server should enable its https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] route which allows a public access to the information about the authorization server that secures this MCP Server."
msgstr "また、MCPサーバーが link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] ルートを有効にして、このMCPサーバーを保護する認証サーバーに関する情報へのパブリック・アクセスを許可するかどうかについても、慎重に検討する必要があります。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Please keep in mind that it might be considered sensitive information, especially when no SPA MCP Client applications are used, when the provider login themes can be customized to make it less obvious to users what is the actual provider that is used to log them in."
msgstr "特にSPA MCPクライアントアプリケーションを使用していない場合、プロバイダのログインテーマをカスタマイズして、ログインに使用される実際のプロバイダが何であるかをユーザーにわかりにくくすることができる場合、機密情報と見なされる可能性があることに留意してください。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "In this blog, we used https://github.com/modelcontextprotocol/inspector[MCP Inspector] to demonstrate how MCP Client can use OAuth2 Flow to login users and access secure Quarkus MCP _Streamable HTTP_ servers, when only an MCP Server address and OAuth2 Client ID can provide enough context for the flow to succeed."
msgstr "このブログでは、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorを] 使用して、MCPサーバーアドレスとOAuth2クライアントIDだけでフローを成功させるのに十分なコンテキストを提供できる場合に、MCPクライアントがOAuth2フローを使用してユーザーにログインし、安全なQuarkus MCP _Streamable HTTP_ サーバーにアクセスする方法を説明します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "We also demonstrated how Quarkus MCP Server can https://docs.quarkiverse.io/quarkus-mcp-server/dev/index.html#_multiple_server_configurations[support multiple MCP HTTP configurations] with their own unique security constraints supported with the https://quarkus.io/guides/security-openid-connect-multitenancy#configure-tenant-paths[Quarkus OIDC multi-tenancy resolver]."
msgstr "また、Quarkus link:https://quarkus.io/guides/security-openid-connect-multitenancy#configure-tenant-paths[OIDCマルチテナンシーリゾルバで] サポートされる独自のセキュリティ制約を持つ link:https://docs.quarkiverse.io/quarkus-mcp-server/dev/index.html#_multiple_server_configurations[複数のMCP HTTPコンフィギュレーションを] 、Quarkus MCP Serverで link:https://docs.quarkiverse.io/quarkus-mcp-server/dev/index.html#_multiple_server_configurations[サポートする] 方法も紹介しました。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "In the next blog post in this series, we will look at how https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#access-token-privilege-restriction[MCP Authorization] OAuth2 Flow can use OAuth Dynamic Client Registration and how https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] can play its part in securing Quarkus MCP Servers."
msgstr "次回のブログポストでは、 link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#access-token-privilege-restriction[MCP認証] OAuth2フローでOAuth動的クライアント登録を使用する方法と、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyが] Quarkus MCPサーバーのセキュリティ保護にどのように役立つかを説明します。"

#: _posts/2025-09-22-secure-mcp-server-oauth2.adoc
#, fuzzy
msgid "Enjoy, and stay tuned !"
msgstr "お楽しみください！"
