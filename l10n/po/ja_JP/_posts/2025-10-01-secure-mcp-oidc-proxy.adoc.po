msgid ""
msgstr ""
"Language: ja_JP\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: jekyll-l10n\n"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Use Quarkus OIDC Proxy to encrypt Quarkus MCP Server tokens"
msgstr "Quarkus OIDC Proxyを使用して、Quarkus MCP Serverトークンを暗号化します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Explain how Quarkus OIDC Proxy can encrypt Quarkus MCP Server tokens"
msgstr "Quarkus OIDC ProxyによるQuarkus MCP Serverトークンの暗号化について説明します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
msgid "Introduction"
msgstr "はじめに"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "In the https://quarkus.io/blog/secure-mcp-server-oauth2/[Use MCP OAuth2 Flow to access Quarkus MCP Server] blog post, we explained how an MCP Client such as https://github.com/modelcontextprotocol/inspector[MCP Inspector] could use the OAuth2 Flow with a pre-registered OAuth2 Client application to discover the MCP server's https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata], the metadata of the authorization server, login a user and acquire an access token that it could use to access MCP Server provided tools."
msgstr "link:https://quarkus.io/blog/secure-mcp-server-oauth2/[MCP OAuth2 Flowを使用してQuarkus MCP Serverにアクセスする] 」のブログポストでは、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorなどの] MCPクライアントが、事前に登録されたOAuth2クライアントアプリケーションでOAuth2 Flowを使用して、MCPサーバーの link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2保護リソースメタデータ] 、認証サーバーのメタデータを検出し、ユーザーにログインして、MCPサーバーが提供するツールにアクセスするためのアクセストークンを取得する方法を説明しました。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "In this blog post, we will look at how https://github.com/modelcontextprotocol/inspector[MCP Inspector] can register OAuth2 Client applications dynamically, instead of using a pre-registered OAuth2 Client, but also, use https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] to delegate to https://www.keycloak.org/[Keycloak] during the MCP OAuth2 flow, <<point-of-using-oidc-proxy,analyze why it can be useful>> and show how it can <<use-oidc-proxy-to-encrypt-tokens,encrypt access and refresh tokens and exclude ID tokens>>, before they are made available to https://github.com/modelcontextprotocol/inspector[MCP Inspector]."
msgstr "このブログポストでは、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorが] 、事前に登録されたOAuth2クライアントを使用する代わりに、OAuth2クライアントアプリケーションを動的に登録する方法を見ていきます。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Demo MCP OAuth2 Flow Diagram"
msgstr "デモ MCP OAuth2 フロー図"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "In the https://quarkus.io/blog/secure-mcp-server-oauth2/[Use MCP OAuth2 Flow to access Quarkus MCP Server] blog post, we looked at how https://github.com/modelcontextprotocol/inspector[MCP Inspector] could use OAuth 2.0 Flow with a https://quarkus.io/blog/secure-mcp-server-oauth2/#demo-flow-diagram[pre-registered OAuth2 client]."
msgstr "link:https://quarkus.io/blog/secure-mcp-server-oauth2/[MCP OAuth2 Flowを使用してQuarkus MCP Serverにアクセスする] 」というブログ記事で、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorが] link:https://quarkus.io/blog/secure-mcp-server-oauth2/#demo-flow-diagram[事前に登録されたOAuth2クライアントで] OAuth 2.0 Flowを使用する方法について説明しました。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The demo flow diagram in this section is very similar to the one from the https://quarkus.io/blog/secure-mcp-server-oauth2/#demo-flow-diagram[Use MCP OAuth2 Flow to access Quarkus MCP Server] blog post. It shows how https://github.com/modelcontextprotocol/inspector[MCP Inspector] can use https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 Dynamic Client Registration] instead of requiring that an OAuth2 Client is pre-registered, and with the https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] interposing between MCP Client and Keycloak."
msgstr "このセクションのデモフロー図は、「 link:https://quarkus.io/blog/secure-mcp-server-oauth2/#demo-flow-diagram[Use MCP OAuth2 Flow to access Quarkus MCP Server] 」ブログポストのフロー図と非常によく似ています。 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorが] 、OAuth2クライアントを事前に登録する代わりに、 link:https://datatracker.ietf.org/doc/html/rfc7591[OAuth2動的クライアント登録を] 使用し、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyが] MCPクライアントとKeycloakの間に介在する方法を示しています。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "When https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 Dynamic Client Registration] is used, MCP Client such as https://github.com/modelcontextprotocol/inspector[MCP Inspector] requires configuring an MCP _Streamable HTTP_ endpoint URL only."
msgstr "link:https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 動的クライアント登録を] 使用する場合、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] などの MCP クライアントは、MCP _Streamable HTTP_ エンドポイント URL の設定のみが必要です。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "MCP Client starts by accessing the MCP server without a token and gets back HTTP 401 with a `WWW-Authenticate` `resource_metadata` parameter that links to the MCP server's https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] route. The client now fetches a URL of the authorization server that secures the MCP server as well as the MCP server's resource identifier."
msgstr "MCP クライアントはトークンなしで MCP サーバにアクセスし、MCP サーバの link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] ルートにリンクする `WWW-Authenticate` `resource_metadata` パラメータを持つ HTTP 401 を返します。クライアントはMCPサーバを保護する認証サーバのURLとMCPサーバのリソース識別子を取得します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Since https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] is used, MCP Client does not see a Keycloak URL as the authorization server URL but `http://localhost:8080/q/oidc` URL pointing to a default https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy]'s base URL."
msgstr "link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyが] 使用されているため、MCPクライアントには認証サーバのURLとしてKeycloak URLが表示されません。 `http://localhost:8080/q/oidc` のURLではなく、デフォルトの link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyの] ベースURLを指すURLが表示されます。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Next, MCP Client uses the https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy]'s URL to discover its authorization, token, client registration and other endpoint URLs. https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] provides its metadata by discovering Keycloak's metadata and replacing Keycloak-specific URLs with its own proxy-managed URLs, but does not transform other Keycloak metadata such as supported https://www.rfc-editor.org/rfc/rfc7636[Proof Key for Code Exchange] (PKCE) methods."
msgstr "次に、MCPクライアントは link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyの] URLを使用して、認証、トークン、クライアント登録、その他のエンドポイントURLを検出します。 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyは] 、Keycloakのメタデータを検出し、Keycloak固有のURLを独自のプロキシ管理URLに置き換えることでメタデータを提供しますが、サポートされている link:https://www.rfc-editor.org/rfc/rfc7636[Proof Key for Code Exchange] （PKCE）メソッドなど、Keycloakの他のメタデータは変換しません。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The user is now redirected to https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] which in turn redirects the user to Keycloak to login."
msgstr "ユーザーは link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyに] リダイレクトされ、そこからKeycloakにリダイレクトされてログインします。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Once the user logs in and authorizes MCP Inspector to access Quarkus MCP server, the user is redirected back to the `http://localhost:6274/oauth/callback` endpoint, MCP client exchanges the returned `code` to get ID, access and refresh tokens, and uses the access token to access the MCP server, allowing the user to select and run the tool."
msgstr "ユーザーがログインし、Quarkus MCP サーバーへのアクセスを MCP Inspector に許可すると、ユーザーはエンドポイントにリダイレクトされます。 `http://localhost:6274/oauth/callback` MCP クライアントは返された `code` を交換して ID、アクセストークン、およびリフレッシュトークンを取得し、アクセストークンを使用して MCP サーバーにアクセスします。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "We are now ready to have a deeper look at how it works in the demo."
msgstr "では、デモでどのように機能するのか、さらに詳しく見ていきましょう。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "You can find the complete project source in the https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/tree/main/secure-mcp-http-server-with-oidc-proxy[Secure Quarkus MCP HTTP Server with OIDC Proxy sample]."
msgstr "プロジェクトの完全なソースは、「 link:https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/tree/main/secure-mcp-http-server-with-oidc-proxy[Secure Quarkus MCP HTTP Server with OIDC Proxy」サンプルに] あります。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Step 1 - Create and start MCP server"
msgstr "ステップ1 - MCPサーバーの作成と起動"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "First, let's create a secure Quarkus MCP server."
msgstr "まず、安全なQuarkus MCPサーバーを作成します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "MCP server maven dependencies"
msgstr "MCP サーバーの maven 依存関係"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Add the following dependencies:"
msgstr "以下の依存関係を追加します："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "`quarkus-mcp-server-sse` is required to support both MCP Streamable HTTP and SSE transports."
msgstr "`quarkus-mcp-server-sse` は、MCP Streamable HTTPとSSEトランスポートの両方をサポートするために必要です。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "`quarkus-oidc` is required to secure access to Quarkus MCP Server. Its version is defined in the Quarkus BOM."
msgstr "`quarkus-oidc` は、Quarkus MCP Serverへのアクセスを保護するために必要です。そのバージョンはQuarkusのBOMで定義されています。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "`quarkus-oidc-proxy` is required to support OIDC proxy between MCP Client and Keycloak"
msgstr "`quarkus-oidc-proxy` は、MCPクライアントとKeycloak間のOIDCプロキシをサポートするために必要です。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "MCP Server Configuration"
msgstr "MCPサーバーの構成"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Let's configure the MCP server:"
msgstr "MCPサーバーを設定しましょう："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Require authentication for all requests to the MCP server. This authentication policy is enforced by the default OIDC tenant configuration."
msgstr "MCP サーバへのすべての要求に対して認証を要求します。この認証ポリシーは、デフォルトのOIDCテナント構成によって強制されます。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Default OIDC tenant secures the MCP server, Keycloak DevService inserts a missing `quarkus.oidc.auth-server-url` property that links to the Keycloak `quarkus-mcp-realm` realm endpoint."
msgstr "デフォルトのOIDCテナントはMCPサーバーを保護し、Keycloak DevServiceはKeycloak `quarkus-mcp-realm` realmエンドポイントにリンクする `quarkus.oidc.auth-server-url` プロパティを挿入します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Require that tokens that are allowed to access the MCP server must have an audience (`aud`) claim that contains a `quarkus-mcp-server` value."
msgstr "MCP サーバへのアクセスを許可されるトークンは、 `quarkus-mcp-server` の値を含むオーディエンス( `aud` )クレームを持つ必要があります。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Enable the https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] route for the default OIDC tenant. It will help https://github.com/modelcontextprotocol/inspector[MCP Inspector] to find out about the authorization server that secures the MCP server."
msgstr "デフォルトの OIDC テナントの link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] ルートを有効にします。これは、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector が] MCP サーバーを保護する認証サーバーを見つけるのに役立ちます。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Quarkus https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] handler is not aware that https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] is meant to intercept OAuth2 Flow requests between https://github.com/modelcontextprotocol/inspector[MCP Inspector] and Keycloak, so we help it to return a correct URL by setting an absolute URL that points to the base https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] URL."
msgstr "Quarkus link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] ハンドラーは、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyが] link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorと] Keycloak間のOAuth2フローリクエストを傍受することを意図していることを認識していません。したがって、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyの] 基本URLを指す絶対URLを設定することで、正しいURLを返すようにします。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Ask Keycloak DevService to upload the `quarkus-mcp-realm.json` realm file. This realm does not have pre-registered clients."
msgstr "Keycloak DevServiceに `quarkus-mcp-realm.json` realmファイルをアップロードするよう依頼してください。このレルムには事前登録されたクライアントはありません。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Ask Keycloak not to add `quarkus.oidc.client-id` since https://github.com/modelcontextprotocol/inspector[MCP Inspector] will register OAuth2 clients dynamically."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorは] OAuth2クライアントを動的に登録するため、Keycloakに `quarkus.oidc.client-id` 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "CORS policy to allow https://github.com/modelcontextprotocol/inspector[MCP Inspector] script requests."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] スクリプト・リクエストを許可するための CORS ポリシー。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "You can read about how https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] is supported in Quarkus OIDC in the https://quarkus.io/guides/security-oidc-expanded-configuration#resource-metadata-properties[Expanded OpenId Connect Configuration guide]."
msgstr "Quarkus OIDCで link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2保護リソースメタデータが] どのようにサポートされているかについては、 link:https://quarkus.io/guides/security-oidc-expanded-configuration#resource-metadata-properties[拡張OpenId Connect設定ガイドを] 参照してください。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "MCP User Name Provider tool"
msgstr "MCPユーザー名プロバイダーツール"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Let's create a single tool that can return a name of the current MCP Client user:"
msgstr "現在のMCPクライアント・ユーザーの名前を返すツールを1つ作成してみましょう："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Capture a security identity represented by the verified access token"
msgstr "検証済みアクセストークンで表されるセキュリティIDの取得"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The `user-name-provider` tool returns a name of the current MCP Client user."
msgstr "`user-name-provider` ツールは、現在の MCP クライアント・ユーザーの名前を返します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The `user-name-provider` tool is a very simple tool designed to show that an identity of the MCP client user on whose behalf this tool is called by the MCP client is available for the tool to perform a user identity specific action, an important element for a secure agentic AI system."
msgstr "`user-name-provider` 。このツールは、MCPクライアントがこのツールを呼び出す際に、MCPクライアント・ユーザーのIDが利用可能であることを示すために設計された非常にシンプルなツールで、安全なエージェント型AIシステムにとって重要な要素です。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Keycloak Configuration"
msgstr "キークロークの構成"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The Keycloak configuration has already been prepared in the `quarkus-mcp-realm.json` that Keycloak DevService uploads to Keycloak at the start-up time."
msgstr "Keycloakの設定は、Keycloak DevServiceが起動時にKeycloakにアップロードする `quarkus-mcp-realm.json` 、すでに準備されています。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Let's have a closer look. Please go to `http://localhost:8080/q/dev-ui` and select an `OpenId Connect` card:"
msgstr "詳しく見てみましょう。次のサイトにアクセスしてください。 `http://localhost:8080/q/dev-ui` にアクセスし、 `OpenId Connect` カードを選択してください："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Click on `Keycloak Admin`, login as `admin:admin` and check the `quarkus-mcp-realm` realm configuration."
msgstr "`Keycloak Admin` をクリックし、 `admin:admin` としてログインし、 `quarkus-mcp-realm` レルム設定を確認します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The `quarkus-mcp-realm` has only Keycloak specific clients registered that are required to support various Keycloak realm operations, it has no custom clients registered.\n"
"This realm has a single user, `alice` with a password `alice`.\n"
"It also has a custom `quarkus-mcp-server` client scope with an audience mapping:"
msgstr "`quarkus-mcp-realm` には、さまざまなKeycloakレルムの操作をサポートするために必要なKeycloak固有のクライアントだけが登録されており、カスタムクライアントは登録されていません。このレルムには、パスワード `alice` を持つ単一のユーザー `alice` がいます。また、カスタムの `quarkus-mcp-server` クライアントスコープとオーディエンスマッピングがあります："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The `quarkus-mcp-server` scope has an audience mapping:"
msgstr "`quarkus-mcp-server` スコープには観客マッピングがあります："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The `quarkus-mcp-realm` realm have the `quarkus-mcp-server` client scope with the `quarkus-mcp-server` audience mapping to let users specify the `quarkus-mcp-server` scope in order to request the correct token audience when https://github.com/modelcontextprotocol/inspector[MCP Inspector] initiates OAuth2 Flow."
msgstr "`quarkus-mcp-realm` レルムは、 `quarkus-mcp-server` クライアント・スコープと `quarkus-mcp-server` オーディエンス・マッピングを持ち、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector が] OAuth2 フローを開始する際に正しいトークン・オーディエンスを要求するために、ユーザが `quarkus-mcp-server` スコープを指定できるようになっています。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] specification provides an alternative option, where MCP Client can pass an MCP Server's `resource` indicator to the OAuth2 provider and the provider can add it to the token audience. You can choose to avoid creating custom Keycloak client scopes with an audience mapping once Keycloak starts supporting the https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] specification."
msgstr "link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2リソースインジケータ] 仕様は、MCPクライアントがMCPサーバーの `resource` インジケータをOAuth2プロバイダに渡すことができ、プロバイダがそれをトークン・オーディエンスに追加できるという代替オプションを提供します。Keycloakが link:https://www.rfc-editor.org/rfc/rfc8707.html[OAuth2 Resource Indicator] 仕様をサポートし始めたら、オーディエンスマッピングを持つカスタムKeycloakクライアントスコープを作成しないように選択できます。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Start the MCP server in dev mode"
msgstr "MCPサーバーをdevモードで起動"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Now let's start the MCP server in dev mode:"
msgstr "では、MCPサーバーをdevモードで起動してみましょう："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "You can see that default _Streamable HTTP_ and SSE endpoints are available at `http://localhost:8080/mcp` and `http://localhost:8080/mcp/sse` respectively."
msgstr "デフォルトの _Streamable HTTP_ および SSE エンドポイントは、次の場所で利用可能です。 `http://localhost:8080/mcp` と `http://localhost:8080/mcp/sse` にあります。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Step 2: Start the MCP Inspector"
msgstr "ステップ 2: MCP Inspector の起動"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "While https://github.com/modelcontextprotocol/inspector[MCP Inspector] provides a very good OAuth2 Flow support, it is still a very active project and at the moment, you may observe https://github.com/modelcontextprotocol/inspector[MCP Inspector] failing to connect to the OAuth2 provider in some versions. https://github.com/modelcontextprotocol/inspector[MCP Inspector] v0.16.7 is currently recommended."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP] link:https://github.com/modelcontextprotocol/inspector[Inspectorは] 非常に優れたOAuth2 Flowをサポートしていますが、まだ非常に活発なプロジェクトであるため、バージョンによってはOAuth2プロバイダへの接続に失敗することがあります。現在、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] v0.16.7を推奨しています。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "As you can see, no pre-configured OAuth2 Client ID is set."
msgstr "このように、OAuth2クライアントIDは設定されていません。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Now, do not press `Connect` immediately. We are going to follow the https://github.com/modelcontextprotocol/inspector[MCP Inspector]'s `Guided OAuth Flow` to <<use-mcp-inspector-to-access-mcp-server,register an OAuth2 Client, login a user and acquire an access token>> instead, and request a `Connect` once the `Guided OAuth Flow` is complete."
msgstr "ここで、すぐに `Connect` を押さないでください。 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] の `Guided OAuth Flow` に従って xref:use-mcp-inspector-to-access-mcp-server[OAuth2 クライアントを登録し、] 代わりに xref:use-mcp-inspector-to-access-mcp-server[ユーザーをログインしてアクセストークンを取得] し、 `Guided OAuth Flow` が完了したら `Connect` をリクエストします。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "We will then have a look at how to <<use-oidc-proxy-to-encrypt-tokens>>."
msgstr "その後、 <<use-oidc-proxy-to-encrypt-tokens>> 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "See the <<demo-flow-diagram>> section for an overview of how https://github.com/modelcontextprotocol/inspector[MCP Inspector] performs a `Connect` request."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] による `Connect` 要求の実行方法の概要については、 <<demo-flow-diagram>> のセクションを参照してください。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Please keep your browser's `Developer Tools`'s `Network` tab open if you would like to observe how MCP Inspector probes various MCP server and https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] endpoints and eventually succeeds in getting a user logged in and acquiring the access token."
msgstr "MCP InspectorがさまざまなMCPサーバーと link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] エンドポイントをプローブし、最終的にユーザーをログインさせてアクセストークンを取得する様子を観察したい場合は、ブラウザの `Developer Tools’s `Network` タブを開いておいてください。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Step 3: Use MCP Inspector to register OAuth2 Client and access MCP Server"
msgstr "ステップ 3: MCP Inspector を使用して OAuth2 クライアントを登録し、MCP サーバーにアクセスします。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "We are now going to use the https://github.com/modelcontextprotocol/inspector[MCP Inspector]'s `Guided OAuth Flow` to register an OAuth2 Client, login a user and acquire tokens."
msgstr "これから link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] の `Guided OAuth Flow` を使用して OAuth2 クライアントの登録、ユーザーのログイン、トークンの取得を行います。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Click on `Open Auth Settings` which you can find opposite the Connection settings that you saw in the <<start-mcp-inspector>> section, and click on the `Guided OAuth2 Flow`:"
msgstr "<<start-mcp-inspector>> の接続設定の反対側にある `Open Auth Settings` をクリックし、 `Guided OAuth2 Flow` をクリックします："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The `Guided OAuth2 Flow` may not be highlighted after you select it but https://github.com/modelcontextprotocol/inspector[MCP Inspector] will run it once you press `Continue`."
msgstr "`Guided OAuth2 Flow` を選択してもハイライトされない場合がありますが、 `Continue` を押すと link:https://github.com/modelcontextprotocol/inspector[MCP Inspector が] 実行されます。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Press `Continue` to do the `Metadata Discovery`:"
msgstr "`Continue` を押して `Metadata Discovery` を実行します："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "As you can see, https://github.com/modelcontextprotocol/inspector[MCP Inspector] discovers the MCP Server's https://datatracker.ietf.org/doc/html/rfc9728[OAuth2 Protected Resource Metadata] first, finds out the https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy]'s URL, and uses it to fetch the the OIDC Proxy's metadata. As mentioned in the <<demo-flow-diagram>> section, https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy] provides its metadata by discovering Keycloak's metadata and replacing Keycloak-specific URLs with its own proxy-managed URLs, but does not transform other Keycloak metadata."
msgstr "ご覧のように、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorは] まずMCP Serverの link:https://datatracker.ietf.org/doc/html/rfc9728[OAuth2保護されたリソースメタデータを] 発見し、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxyの] URLを見つけ、それを使ってOIDC Proxyのメタデータを取得します。 <<demo-flow-diagram>> のセクションで述べたように、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxyは] Keycloakのメタデータを検出し、Keycloak固有のURLを自身のプロキシが管理するURLに置き換えることでメタデータを提供しますが、その他のKeycloakのメタデータを変換することはありません。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The next step is the `Client Registration`, press `Continue`."
msgstr "次のステップは `Client Registration` で、 `Continue` を押します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "https://github.com/modelcontextprotocol/inspector[MCP Inspector] posts a client registration request that you can see in the browser's developer tools:"
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] は、ブラウザの開発者ツールで確認できるクライアント登録リクエ ストを送信します："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Note that the `token_endpoint_auth_method` property is set to `none` - this is how a `public` OAuth2 Client is registered, since managing confidential OAuth2 Clients that have secrets is harder for Single-page application (SPA) such as https://github.com/modelcontextprotocol/inspector[MCP Inspector]."
msgstr "`token_endpoint_auth_method` プロパティが `none` に設定されていることに注意してください。これは、 `public` OAuth2 クライアントの登録方法です。秘密を持つ OAuth2 クライアントを管理するのは、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector の] ようなシングルページアプリケーション (SPA) では難しいからです。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The `Client Registration` succeeds:"
msgstr "`Client Registration` 成功："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The `client_id` is a dynamically generated value. You will see a different `client_id` when you work with this blog post."
msgstr "`client_id` は動的に生成される値です。このブログ記事で作業する際には、別の `client_id` が表示されます。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "At this point, we have to pause the `Guided OAuth2 Flow` sequence, go to Keycloak and assign the `quarkus-mcp-server` and `profile` scopes to the registered client."
msgstr "この時点で、 `Guided OAuth2 Flow` のシーケンスを一時停止し、Keycloakにアクセスして、 `quarkus-mcp-server` と `profile` のスコープを登録クライアントに割り当てる必要があります。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"The whole point of registering OAuth2 Clients dynamically is to avoid having to deal with manually configuring them.\n"
"However, as you could see in the Client Registration Request image above, https://github.com/modelcontextprotocol/inspector[MCP Inspector] currently does not allow\n"
"to pass OAuth2 scopes during the OAuth2 Client Registration - irrespectively of whether you configure `Scope` in its <<start-mcp-inspector,Connection settings>> or not."
msgstr "OAuth2 クライアントを動的に登録することの要点は、手動で OAuth2 クライアントを設定する手間を省くことです。 `Scope` しかし、上のクライアント登録リクエストの画像を見るとわかるように、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector は] 現在、OAuth2 クライアントの登録時に OAuth2 スコープを渡すことができません。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The scopes impact what an issued access token can do, what kind of information it can include. The current OAuth2 Client application that logins the current user can request some scopes, for the user to authorize the client to use the access token according to permissions enabled by these scopes. Without requesting scopes during the OAuth2 Client Registration, Keycloak can only issue access tokens with a very limited content, with no audience and the logged-in user information included."
msgstr "スコープは、発行されたアクセストークンに何ができるか、どのような情報を含めることができるかに影響します。現在のユーザーをログインさせるOAuth2クライアントアプリケーションは、いくつかのスコープをリクエストすることができ、ユーザーはそのスコープによって有効化された権限に従ってアクセストークンを使用することをクライアントに許可することができます。OAuth2クライアント登録時にスコープを要求しない場合、Keycloakは非常に限られた内容のアクセストークンしか発行することができず、オーディエンスやログインしているユーザー情報は含まれません。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Therefore, to support this post's demo flow, we need to manually assign the required scopes to the registered client directly in the Keycloak Admin Dashboard."
msgstr "したがって、この投稿のデモフローをサポートするためには、Keycloak管理者ダッシュボードで必要なスコープを登録クライアントに直接手動で割り当てる必要があります。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "In general, the https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP Authorization]-compliant MCP Clients should be able to use custom OAuth2 scopes during the https://datatracker.ietf.org/doc/html/rfc7591[OAuth2 Dynamic Client Registration] going forward."
msgstr "一般的に、 link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[MCP認証に準拠した] MCPクライアントは、今後 link:https://datatracker.ietf.org/doc/html/rfc7591[OAuth2動的クライアント登録] 時にカスタムOAuth2スコープを使用できるようになるはずです。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "OK, let's update the registered client in Keycloak."
msgstr "では、Keycloakに登録されているクライアントを更新してみましょう。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Login to Keycloak as described in the <<keycloak-configuration>> section, select the `quarkus-mcp-realm` in `Manage Realms` and the registered client in this realm's `Clients`:"
msgstr "<<keycloak-configuration>> セクションで説明したようにKeycloakにログインし、 `Manage Realms` で `quarkus-mcp-realm` 、このレルムの `Clients` で登録クライアントを選択します："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Click on its `Client Scopes` tab, and add `profile` and `quarkus-mcp-server` scopes as `Default` scopes:"
msgstr "`Client Scopes` タブをクリックし、 `profile` および `quarkus-mcp-server` スコープを `Default` スコープとして追加します："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Usually, these scopes should be optional for them to be requested at the authorization code flow login time, but in this case we set them as default scopes since the registered client is currently not aware of such scopes at the registration and login times due to the https://github.com/modelcontextprotocol/inspector[MCP Inspector]'s limitation described above in this section."
msgstr "通常、これらのスコープは、認証コード・フロー・ログイン時に要求されるオプションであるべきですが、本節で前述した link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorの] 制限により、登録クライアントは現在、登録時およびログイン時にこのようなスコープを認識しないため、今回はデフォルトのスコープとして設定します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "As far as these two scopes are concerned, the `quarkus-mcp-server` scope was described in the <<keycloak-configuration>> section and is used to ensure the access tokens that are issued to the registered client include the correct MCP server audience, while the `profile` scope is only added for the access tokens to contain the logged-in user's name - adding this scope is not strictly necessary."
msgstr "この2つのスコープに関して言えば、 `quarkus-mcp-server` のスコープは <<keycloak-configuration>> のセクションで説明したとおりで、登録されたクライアントに発行されるアクセストークンに正しいMCPサーバの利用者が含まれていることを確認するために使用されます。一方、 `profile` のスコープは、アクセストークンにログインユーザの名前が含まれていることを確認するためだけに追加されます（このスコープを追加することは厳密には必要ではありません）。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Let's go back to the https://github.com/modelcontextprotocol/inspector[MCP Inspector]'s `Guided OAuth Flow` where we have already completed the `Metadata Discovery` and `Client Registration` steps."
msgstr "link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] 's `Guided OAuth Flow` に戻りましょう。 `Metadata Discovery` と `Client Registration` のステップはすでに完了しています。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Press `Continue` to begin the `Preparing Authorization` step and you will see an `Authorization URL` displayed:"
msgstr "`Continue` を押して `Preparing Authorization` のステップを開始すると、 `Authorization URL` が表示されます："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Click on it using the provided button on the right, and you will be redirected to Keycloak, via https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy], to login:"
msgstr "右のボタンをクリックすると、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDCプロキシ] 経由でKeycloakにリダイレクトされ、ログインできます："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Login as `alice:alice`, and now Keycloak will request you to give your consent to the registered MCP Inspector Client to access Quarkus MCP Server:"
msgstr "`alice:alice` としてログインすると、登録済みの MCP Inspector クライアントが Quarkus MCP サーバーにアクセスすることに同意するよう、Keycloak が要求します："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "This is what using scopes during the client registration, and `quarkus-mcp-server` scope in particular, give you: a must have option to authorize the registered MCP client application to access the MCP Server on your behalf."
msgstr "これは、クライアント登録時にスコープを使用すること、特に `quarkus-mcp-server` スコープを使用することで、登録されたMCPクライアント・アプリケーションがMCPサーバーにアクセスすることを承認するための必須オプションです。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Press `Yes`, Keycloak will redirect you back to the https://github.com/modelcontextprotocol/inspector[MCP Inspector]'s callback page in another tab that will display the authorization code:"
msgstr "`Yes` を押すと、Keycloakは、認証コードを表示する別のタブの link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorの] コールバック・ページにリダイレクトします："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Copy and paste this code into the `Prepare Authorization` field in the `Guided OAuth Flow` view:"
msgstr "このコードをコピーして、 `Guided OAuth Flow` ビューの `Prepare Authorization` フィールドに貼り付けます："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Press `Continue`. https://github.com/modelcontextprotocol/inspector[MCP Inspector] now successfully acquires the tokens:"
msgstr "プレス `Continue` 。 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector が] トークンの取得に成功しました："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "As you can see, 3 tokens, the access and refresh tokens but also the ID token are returned. https://github.com/modelcontextprotocol/inspector[MCP Inspector] does not really need the ID token, it only needs an access token in order to be able to access the MCP server, and optionally, the refresh token to get another access token when the current one expires. We'll have a look at how to drop the ID token in the <<use-oidc-proxy-to-encrypt-tokens>> section."
msgstr "このように、アクセストークンとリフレッシュ・トークンのほか、ID トークンの 3 つのトークンが返されます。 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] は、ID トークンを実際には必要としません。MCP サーバにアクセスするためにアクセストークンが必要なだけで、オプションとして、現在のアクセストークンの有効期限が切れたときに別のアクセストークンを取得するためのリフレッシュ・トークンも必要です。ID トークンを削除する方法については、 <<use-oidc-proxy-to-encrypt-tokens>> のセクションで説明します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Copy the access token from the provided JSON data and paste it into https://www.jwt.io/[jwt.io]:"
msgstr "提供されたJSONデータからアクセストークンをコピーし、 link:https://www.jwt.io/[jwt.ioに] 貼り付けます："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "It contains a required `quarkus-mcp-server` audience, exactly what the <<mcp-server-configuration,MCP Server expects>>."
msgstr "これには、 xref:mcp-server-configuration[MCPサーバーが期待する] 、必須 `quarkus-mcp-server` 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Now you are ready to press `Connect` in the Connection view that you saw in the <<start-mcp-inspector>> section."
msgstr "これで、 <<start-mcp-inspector>> のセクションで見た接続ビューで、 `Connect` を押す準備ができました。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "At this point, the access token is already available, so https://github.com/modelcontextprotocol/inspector[MCP Inspector] uses this token to let you select and run the `user-name-provider` tool:"
msgstr "この時点で、アクセストークンは既に使用可能になっているため、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] ではこのトークンを使用して、 `user-name-provider` ツールを選択して実行できます："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Now press `Disconnect` first, and then `Clear OAuth State`:"
msgstr "まず `Disconnect` を押し、次に `Clear OAuth State` を押します："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "But keep the <<start-mcp-server,MCP server running>>, do not stop it."
msgstr "しかし、 xref:start-mcp-server[MCPサーバーは] 停止させずに xref:start-mcp-server[稼働] させておいてください。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Let's see next how <<use-oidc-proxy,OIDC Proxy can encrypt access and refresh tokens and drop ID token>>."
msgstr "次に、 xref:use-oidc-proxy[OIDC Proxyがアクセス・トークンやリフレッシュ・トークン、ドロップIDトークンを] どのように xref:use-oidc-proxy[暗号化できるかを見て] みましょう。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Step 4: Use OIDC Proxy to encrypt access and refresh tokens and drop ID token"
msgstr "ステップ 4: OIDC Proxy を使用して、アクセス・トークンおよびリフレッシュ・トークンを暗号化し、ID トークンをドロップします。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "What is the point of using OIDC Proxy ?"
msgstr "OIDCプロキシを使う意味は何ですか？"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "You may be wondering by now, what is the point of using https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] and https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] together, with all the proxying going on between https://github.com/modelcontextprotocol/inspector[MCP Inspector] and Keycloak ?"
msgstr "link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyと] link:https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Serverを] 一緒に使用し、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorと] Keycloakの間でプロキシ処理を行うことに何の意味があるのでしょうか？"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "And if you have been following the evolution of the MCP Authorization specification, from its older https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[2025-03-26 version] to the https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[latest one], you may want to ask, does the idea of using https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] bring us back to the days where the MCP Server was expected to do OAuth2 itself in the https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[2025-03-26 version] ?"
msgstr "また、MCP Authorization仕様の進化を、古い link:https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[バージョン] である link:https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[2025-03-26から] link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization[最新のバージョンまで追いかけて] きた方であれば、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyを] 使用するというアイデアは、 link:https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[2025-03-26のバージョンで] MCPサーバーがOAuth2を行うことを期待されていた時代に戻るのか？"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Not really, https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] was introduced in the https://quarkus.io/blog/oidc-proxy/[Use OIDC Proxy to integrate OIDC service endpoints with custom GPT] blog post, more than half a year before the original MCP specification was published."
msgstr "link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyは] 、 link:https://quarkus.io/blog/oidc-proxy/[OIDCサービスエンドポイントをカスタムGPTと統合するためにOIDC Proxyを使用] するというブログポストで紹介されました。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The main idea behind https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] is to let SPA applications write the same OAuth2 code no matter what the connection details and capabilities of the actual proxied OAuth2 provider are, with the https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] mediating between the client that is trying to perform various OAuth2 actions and the actual provider."
msgstr "link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyの] 主なアイデアは、さまざまなOAuth2アクションを実行しようとするクライアントと実際のプロバイダの間を link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyが] 仲介することで、プロキシされる実際のOAuth2プロバイダの接続の詳細や機能に関係なく、SPAアプリケーションに同じOAuth2コードを記述させることです。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "For example, as it happens, Keycloak currently does not accept OAuth2 dynamic client registration requests that are sent directly from the https://github.com/modelcontextprotocol/inspector[MCP Inspector] SPA because its client registration endpoint does not support CORS. However, https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy], by being co-located with the Quarkus MCP Server, does support CORS, and thus can approve and forward OAuth2 client registration requests from the https://github.com/modelcontextprotocol/inspector[MCP Inspector] SPA's host to Keycloak. https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] can also augment or transform some of the OAuth2 requests and responses."
msgstr "例えば、Keycloakは現在、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] SPAから直接送信されるOAuth2動的クライアント登録要求を受け付けていません。しかし、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyは] 、Quarkus MCPサーバーと同居しているため、CORSをサポートしており、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] SPAのホストからのOAuth2クライアント登録リクエストを承認し、Keycloakに転送することができます。 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyは] 、OAuth2リクエストとレスポンスの一部を補強または変換することもできます。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Besides helping SPAs write an interoperable OAuth2 code, https://quarkus.io/blog/oidc-proxy/#security-considerations[it can help with restricting which authorization code flow tokens can be returned and support a locally managed redirect endpoint]."
msgstr "SPA が相互運用可能な OAuth2 コードを書くのを助けるだけでなく、 link:https://quarkus.io/blog/oidc-proxy/#security-considerations[どの認証コードフローのトークンが返されるかを制限したり、ローカルで管理されたリダイレクトエンドポイントをサポートしたりするのにも役立ちます] 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Recently, we have also enhanced https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] to support encrypting access and refresh tokens before returning them to SPA. We'll look at it in the next <<use-oidc-proxy-to-encrypt-tokens>> section."
msgstr "最近、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyも] 強化され、アクセスおよびリフレッシュトークンをSPAに返す前に暗号化できるようになりました。この機能については、次のセクション（ <<use-oidc-proxy-to-encrypt-tokens>> ）で説明します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Encrypt access and refresh tokens and drop ID token"
msgstr "アクセストークンとリフレッシュトークンの暗号化とIDトークンのドロップ"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "When we were discussing the early https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[MCP Authorizaton version 2025-03-26] options in the https://quarkus.io/blog/secure-mcp-sse-server/[Getting ready for secure MCP with Quarkus MCP Server] blog post, my colleague https://github.com/BarDweller[Ozzy Osborne] thought about the security of access tokens that were made available to MCP Clients and prototyped a Quarkus MCP Server demo where the MCP Server was used to access GitHub but the Claude AI MCP Client only had access to the wrapped access tokens that can not be used directly against GitHub."
msgstr "link:https://quarkus.io/blog/secure-mcp-sse-server/[Quarkus MCP Serverを使ったセキュアなMCPの準備の] ブログポストで、初期の link:https://modelcontextprotocol.io/specification/2025-03-26/basic/authorization[MCP認証バージョン2025-03-26の] オプションについて議論していたとき、同僚の link:https://github.com/BarDweller[Ozzy Osborneは] 、MCPクライアントが利用できるアクセストークンのセキュリティについて考え、Quarkus MCP Serverのデモを試作しました。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] builds on Ozzy's idea to wrap tokens and makes it possible to encrypt both access and refresh tokens that are returned to the MCP Client."
msgstr "link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyは] 、トークンをラップするというOzzyのアイデアを基に、MCPクライアントに返されるアクセストークンとリフレッシュトークンの両方を暗号化できるようにしました。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Let's see how it works."
msgstr "どう動くか見てみましょう。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Add the following configuration properties to the <<mcp-server-configuration>>, without restarting the <<start-mcp-server,MCP Server>>:"
msgstr "xref:start-mcp-server[MCP サーバを] 再起動せずに、以下の構成プロパティを <<mcp-server-configuration>> に追加します："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/blob/main/secure-mcp-http-server-with-oidc-proxy/src/main/resources/publicKey.jwk[Public RSA key] that OIDC Proxy must use to encrypt access and refresh tokens, when intercepting the `authorization_code` and `refresh_token` grant responses. Note that Quarkus OIDC that protects the MCP Server does not control the communication between https://github.com/modelcontextprotocol/inspector[MCP Inspector] and the token issuer, therefore it can not encrypt the tokens, only OIDC Proxy can."
msgstr "OIDCプロキシが `authorization_code` 、 `refresh_token` グラント・レスポンスを傍受する際に、アクセス・トークンおよびリフレッシュ・トークンを暗号化するために使用する必要がある link:https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/blob/main/secure-mcp-http-server-with-oidc-proxy/src/main/resources/publicKey.jwk[公開RSA鍵] 。MCPサーバーを保護するQuarkus OIDCは、 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorと] トークン発行者の間の通信を制御しないため、トークンを暗号化できません。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/blob/main/secure-mcp-http-server-with-oidc-proxy/src/main/resources/privateKey.jwk[Private RSA key] that OIDC Proxy must use to decrypt refresh tokens and Quarkus OIDC - bearer access tokens. Note that OIDC Proxy does not control access to the Quarkus service endpoint such as Quarkus MCP server but only intercepts requests/responses to/from the token issuer, therefore it can only decrypt refresh tokens when intercepting `refresh_token` grant requests, while Quarkus OIDC must handle the decryption of the access tokens that were encrypted by OIDC Proxy and are used to access the MCP Server."
msgstr "OIDC ProxyがリフレッシュトークンとQuarkus OIDC - ベアラアクセストークンを復号化するために使用する必要がある link:https://github.com/sberyozkin/quarkus-mcp-server-oidc-proxy/blob/main/secure-mcp-http-server-with-oidc-proxy/src/main/resources/privateKey.jwk[プライベートRSAキー] 。OIDC Proxyは、Quarkus MCPサーバーなどのQuarkusサービスエンドポイントへのアクセスを制御するのではなく、トークン発行者との間のリクエスト/レスポンスを傍受するだけであるため、 `refresh_token` グラントリクエストを傍受する場合にのみリフレッシュトークンを復号化できます。一方、Quarkus OIDCは、OIDC Proxyによって暗号化され、MCPサーバーへのアクセスに使用されるアクセストークンの復号化を処理する必要があります。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "This is a hint to Quarkus OIDC that when the `quarkus.oidc.token.decryption-key-location` is set, that only an access token, either the bearer or authorization code flow one, that must be decrypted."
msgstr "これは、Quarkus OIDCに対して、 `quarkus.oidc.token.decryption-key-location` が設定されている場合、アクセストークン（ベアラまたは認証コードフローのいずれか）のみが復号化される必要があることを示すヒントです。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "As you could see at the end of the <<use-mcp-inspector-to-access-mcp-server>> section, ID token was also returned to https://github.com/modelcontextprotocol/inspector[MCP Inspector] which does not need it. OIDC proxy also does not encrypt ID tokens the same way it can encrypt access and refresh tokens, because the whole point of an ID token when SPA applications login the user is for SPA be able to find some information about the user from the ID token, therefore encrypting it by the OIDC proxy would make it impossible. But an ID token can contain sensitive information so why return it to SPA which does not need it ? So we let https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy] remove it from the authorization code flow grant response."
msgstr "<<use-mcp-inspector-to-access-mcp-server>> セクションの最後にあるように、IDトークンは、それを必要としない link:https://github.com/modelcontextprotocol/inspector[MCP Inspector] にも返されます。なぜなら、SPAアプリケーションがユーザーにログインする際のIDトークンの要点は、SPAがIDトークンからユーザーに関する情報を見つけることができるようにすることだからです。しかし、IDトークンには機密情報が含まれている可能性があります。そこで、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDCプロキシは] 認証コードフローのグラントレスポンスからIDトークンを削除するようにします。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Save the updated configuration, Quarkus MCP Server will notice them in dev mode."
msgstr "更新された設定を保存すると、Quarkus MCP Serverはdevモードでそれらを認識します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"Now please go back to the <<use-mcp-inspector-to-access-mcp-server>> section and repeat the same steps, including updating another registered client in Keycloak.\n"
"Once you completed the https://github.com/modelcontextprotocol/inspector[MCP Inspector]'s `Guided OAuth Flow`, check the returned tokens:"
msgstr "次に、 <<use-mcp-inspector-to-access-mcp-server>> セクションに戻り、Keycloak に登録されている別のクライアントを更新するなど、同じ手順を繰り返してください。 link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorの] `Guided OAuth Flow` 、返却されたトークンを確認してください："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid ""
"As you can see an ID token is no longer returned.\n"
"Now copy the access token value. https://www.jwt.io/[jwt.io] no longer accepts encrypted JWT tokens, but you can find another JWT decoder online such as https://fusionauth.io/dev-tools/jwt-decoder[FusionAuth JWT Decoder].\n"
"Paste the access token - the actual claims are encrypted but it can still show the JWT headers:"
msgstr "IDトークンは返されなくなりました。アクセストークンの値をコピーしてください。 link:https://www.jwt.io/[jwt.ioは] 暗号化されたJWTトークンを受け付けなくなりましたが、 link:https://fusionauth.io/dev-tools/jwt-decoder[FusionAuth JWT Decoderの] ような別のJWTデコーダーをオンラインで見つけることができます。アクセストークンを貼り付けます - 実際のクレームは暗号化されていますが、JWTヘッダーを表示することはできます："

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "These are not signing but encryption algorithms. `RSA-OAEP` encrypts the generated content encryption key while `A256GCM` algorithm uses this key to encrypt claims."
msgstr "これらは署名ではなく、暗号化アルゴリズムです。 `RSA-OAEP` は生成されたコンテンツの暗号化キーを暗号化し、 `A256GCM` アルゴリズムはこのキーを使ってクレームを暗号化します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "In this particular demo, the fact that the access and refresh tokens are encrypted primarily eliminates the information leak risk as Keycloak access and refresh tokens are usually in JWT format and can contain sensitive details. We also rely on the MCP Client to use https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#authorization-code-protection[Proof Key for Code Exchange] to minimize a risk of the authorizaion code being leaked and the attacker acquiring the tokens, and we enforce the CORS policy in the <<mcp-server-configuration>> section to allow requests to the MCP Server only from the known https://github.com/modelcontextprotocol/inspector[MCP Inspector]'s host and port."
msgstr "この特定のデモでは、アクセス・トークンとリフレッシュ・トークンが暗号化されているという事実が、Keycloakのアクセス・トークンとリフレッシュ・トークンは通常JWT形式であり、機密情報を含む可能性があるため、主に情報漏えいのリスクを排除します。また、認証コードが漏洩し、攻撃者がトークンを取得するリスクを最小化するために、 link:https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#authorization-code-protection[コード交換にProof Keyを] 使用するMCPクライアントに依存し、既知の link:https://github.com/modelcontextprotocol/inspector[MCP Inspectorの] ホストとポートからのみMCP Serverへのリクエストを許可するために、 <<mcp-server-configuration>> セクションでCORSポリシーを強制します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Encrypting access tokens before returning them to the MCP Client is very useful when your MCP Server is implemented to propagate the incoming access tokens to other services, such as GitHub, or downstream microservices that may not enforce specific CORS policies, or token verification constraints such as a token audience check. In such cases, if the MCP Client leaks the access token, the attacker can bypass Quarkus MCP server and access those other services directly. This risk is avoided when the access token is encrypted by https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy] because those other services won't be able to decrypt it."
msgstr "MCPクライアントにアクセストークンを返す前にアクセストークンを暗号化することは、GitHubなどの他のサービスに受信アクセストークンを伝播するようにMCPサーバーが実装されている場合、または特定のCORSポリシーやトークンオーディエンスチェックなどのトークン検証制約を強制しない可能性のある下流のマイクロサービスが実装されている場合に非常に便利です。このような場合、MCPクライアントからアクセストークンが漏れると、攻撃者はQuarkus MCPサーバーをバイパスして、他のサービスに直接アクセスできます。 link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxyによって] アクセストークンが暗号化されると、他のサービスはアクセストークンを解読できないため、このようなリスクを回避できます。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Similarly, when the SPA tries to use a refresh token to refresh the expired access token and the attacker manages to get hold of the refresh token and is aware of the actual token issuer's refresh endpoint, then the refresh grant request can go directly to the provider. This risk is avoided when the refresh token is encrypted by https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy] because the token issuer won't be able to decrypt it."
msgstr "同様に、SPAが期限切れのアクセストークンをリフレッシュするためにリフレッシュトークンを使用しようとした場合、攻撃者がリフレッシュトークンを入手することに成功し、実際のトークン発行者のリフレッシュエンドポイントを知ることができれば、リフレッシュ許可リクエストは直接プロバイダに行くことができます。リフレッシュ・トークンが link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxyによって] 暗号化されている場合、トークン発行者は復号化することができないため、このリスクを回避することができます。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Now that we discussed why it may be worth encrypting the access and refresh tokens, please go to the end of the <<use-mcp-inspector-to-access-mcp-server>> section, `Connect` to the MCP Server, and run the tool to confirm that the encrypted access token is correctly decrypted by the MCP Server."
msgstr "アクセストークンとリフレッシュ・トークンを暗号化する価値がある理由を説明したところで、 <<use-mcp-inspector-to-access-mcp-server>> セクションの最後に進み、 `Connect` 、MCP サーバーにアクセスしてツールを実行し、暗号化されたアクセストークンが MCP サーバーによって正しく復号化されていることを確認してください。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Security Considerations"
msgstr "セキュリティ"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "The key security recommendation remains the same as the one in the https://quarkus.io/blog/secure-mcp-server-oauth2/#security-considerations[Use MCP OAuth2 Flow to access Quarkus MCP Server] blog post: secure Quarkus MCP servers must enforce that access tokens have a correct audience, for the MCP Server to assert that the current token is meant to access this MCP server only. And indeed, MCP Servers that propagate tokens further should consider exchanging such tokens, for a new token to target the downstream service correctly - it also minimizes the risk discussed next."
msgstr "セキュアな link:https://quarkus.io/blog/secure-mcp-server-oauth2/#security-considerations[Quarkus] MCPサーバーは、アクセストークンが正しい対象者であることを強制する必要があります。また、トークンをさらに伝播させるMCPサーバーは、新しいトークンが下流のサービスを正しくターゲットにするよう、トークンの交換を検討する必要があります。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "When your MCP server forwards the tokens, please consider how to minimize a risk of the attacker stealing the tokens from the MCP Client and using them to access directly the same services that MCP Server forwards tokens to. https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] provides a way to <<use-oidc-proxy-to-encrypt-tokens,encrypt access and refresh tokens>> that are returned to the MCP Client, making them acceptable only by either the MCP server or https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy] itself."
msgstr "MCPサーバーがトークンを転送する場合、攻撃者がMCPクライアントからトークンを盗んで、MCPサーバーがトークンを転送するのと同じサービスに直接アクセスするためにトークンを使用するリスクを最小限に抑える方法を検討してください。 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyは] 、MCPクライアントに返される xref:use-oidc-proxy-to-encrypt-tokens[アクセス・トークンやリフレッシュ・トークンを暗号化] し、MCPサーバーまたは link:https://github.com/quarkiverse/quarkus-oidc-proxy[OIDC Proxy] 自身によってのみ受け入れられるようにする方法を提供します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "When MCP Client registers OAuth2 Clients dynamically, please consider enforcing a user consent during the authentication with a standard OpenId Connect `prompt=consent` parameter. https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] recognizes the `quarkus.oidc.authentication.extra-params.prompt=consent` property that you can use if the MCP Client does not add it itself when initiating an authorization code flow for the dynamically registered client."
msgstr "MCPクライアントがOAuth2クライアントを動的に登録する場合、標準のOpenId Connect `prompt=consent` パラメータを使用して、認証時にユーザーの同意を強制することを検討してください。 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyでは] 、動的に登録されたクライアントの認証コードフローを開始する際に、MCPクライアントが `quarkus.oidc.authentication.extra-params.prompt=consent` 。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Please note that the https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] extension currently has an `experimental` status, therefore, while we do encourage you to experiment with it, we do not recommend to use it in production for the purpose of hardening the https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] token security yet."
msgstr "link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] エクステンションは、現在 `experimental` 、実験的に使用することは推奨されますが、 link:https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] トークンのセキュリティを強化する目的で本番環境で使用することは推奨されません。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Please never use a wildcard CORS policy in production, get the MCP server accept only known MCP Client SPA origins."
msgstr "MCPサーバーは、既知のMCPクライアントSPAオリジンのみを受け入れるようにしてください。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
msgid "Conclusion"
msgstr "まとめ"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "In this blog post we looked at how https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] can help to harden the security of https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] tokens, by encrypting access and refresh tokens, and removing a possibly sensitive ID token, before the tokens are returned to the MCP Client."
msgstr "このブログ記事では、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyを] 使用して、 link:https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCPサーバーの] トークンのセキュリティを強化する方法について説明しました。この方法では、トークンがMCPクライアントに返される前に、アクセスおよびリフレッシュトークンを暗号化し、機密性の高いIDトークンを削除します。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "We also used https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxy] to get OAuth2 Dynamic Client Registration working by controlling the CORS policy at the https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCP Server] level and forwarding the client registration requests to Keycloak."
msgstr "また、 link:https://github.com/quarkiverse/quarkus-oidc-proxy[Quarkus OIDC Proxyを] 使用して、 link:https://github.com/quarkiverse/quarkus-mcp-server[Quarkus MCPサーバー] レベルでCORSポリシーを制御し、クライアント登録リクエストをKeycloakに転送することで、OAuth2の動的クライアント登録を実現しました。"

#: _posts/2025-10-01-secure-mcp-oidc-proxy.adoc
#, fuzzy
msgid "Please let us know what you think, enjoy !"
msgstr "ご感想をお聞かせください！"
